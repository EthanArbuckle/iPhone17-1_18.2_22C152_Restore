void nw_protocol_webtransport_session_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  _DWORD *handle;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  NSObject *v10;
  int v11;
  char *backtrace_string;
  BOOL v13;
  char *v14;
  BOOL v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  nw_protocol *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_webtransport_session_error";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_webtransport_session_error";
      v8 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v13 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_webtransport_session_error";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_37:
        if (!v5) {
          return;
        }
LABEL_38:
        free(v5);
        return;
      }
      if (!v13) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_webtransport_session_error";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_webtransport_session_error";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_36:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_37;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((handle[137] & 2) == 0 && gLogDatapath)
    {
      v10 = __nwlog_obj();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v11 = handle[115];
        *(_DWORD *)buf = 136447234;
        v19 = "nw_protocol_webtransport_session_error";
        v20 = 2082;
        v21 = (char *)(handle + 116);
        v22 = 2080;
        v23 = " ";
        v24 = 1024;
        v25 = v11;
        v26 = 2048;
        v27 = a2;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called, with other_protocol: %p", buf, 0x30u);
      }
    }
    handle[113] = a3;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_webtransport_session_error";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (!__nwlog_fault(v5, &type, &v16)) {
    goto LABEL_37;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_webtransport_session_error";
    v8 = "%{public}s called with null webtransport_session";
    goto LABEL_36;
  }
  if (!v16)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_webtransport_session_error";
    v8 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_36;
  }
  v14 = (char *)__nw_create_backtrace_string();
  v6 = __nwlog_obj();
  v7 = type;
  v15 = os_log_type_enabled(v6, type);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_webtransport_session_error";
    v8 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_36;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v19 = "nw_protocol_webtransport_session_error";
    v20 = 2082;
    v21 = v14;
    _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v14);
  if (v5) {
    goto LABEL_38;
  }
}

void nw_protocol_webtransport_session_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_protocol_webtransport_session_disconnected";
    v23 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v23, &type, &v34)) {
      goto LABEL_65;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_webtransport_session_disconnected";
      v26 = "%{public}s called with null protocol";
    }
    else if (v34)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v31 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_protocol_webtransport_session_disconnected";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_65:
        if (!v23) {
          return;
        }
LABEL_66:
        free(v23);
        return;
      }
      if (!v31) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_webtransport_session_disconnected";
      v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_webtransport_session_disconnected";
      v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_64:
    _os_log_impl(&dword_1830D4000, v24, v25, v26, buf, 0xCu);
    goto LABEL_65;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    if ((handle[548] & 2) == 0)
    {
      if (gLogDatapath)
      {
        v28 = __nwlog_obj();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          int v29 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136447234;
          *(void *)&buf[4] = "nw_protocol_webtransport_session_disconnected";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = handle + 464;
          *(_WORD *)&buf[22] = 2080;
          v37 = " ";
          *(_WORD *)v38 = 1024;
          *(_DWORD *)&v38[2] = v29;
          __int16 v39 = 2048;
          v40 = a2;
          _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called, with other_protocol: %p", buf, 0x30u);
        }
      }
    }
    if (*((_DWORD *)handle + 111) == 5)
    {
      if ((handle[548] & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v3 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          int v4 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136446978;
          *(void *)&buf[4] = "nw_webtransport_session_terminate";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = handle + 464;
          *(_WORD *)&buf[22] = 2080;
          v37 = " ";
          *(_WORD *)v38 = 1024;
          *(_DWORD *)&v38[2] = v4;
          _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Session already terminated, ignoring", buf, 0x26u);
        }
      }
      return;
    }
    int v5 = *((_DWORD *)handle + 113);
    if (v5)
    {
      if ((handle[548] & 2) != 0) {
        goto LABEL_17;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_17;
      }
      int v7 = *((_DWORD *)handle + 115);
      *(_DWORD *)buf = 136447234;
      *(void *)&buf[4] = "nw_webtransport_session_terminate";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = handle + 464;
      *(_WORD *)&buf[22] = 2080;
      v37 = " ";
      *(_WORD *)v38 = 1024;
      *(_DWORD *)&v38[2] = v7;
      __int16 v39 = 1024;
      LODWORD(v40) = v5;
      v8 = "%{public}s %{public}s%s<i%u> Closing webtransport session with error %{darwin.errno}d";
      v9 = v6;
      uint32_t v10 = 44;
    }
    else
    {
      if ((handle[548] & 2) != 0) {
        goto LABEL_17;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v11 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_17;
      }
      int v12 = *((_DWORD *)handle + 115);
      *(_DWORD *)buf = 136446978;
      *(void *)&buf[4] = "nw_webtransport_session_terminate";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = handle + 464;
      *(_WORD *)&buf[22] = 2080;
      v37 = " ";
      *(_WORD *)v38 = 1024;
      *(_DWORD *)&v38[2] = v12;
      v8 = "%{public}s %{public}s%s<i%u> Closing webtransport session without error";
      v9 = v11;
      uint32_t v10 = 38;
    }
    _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_INFO, v8, buf, v10);
LABEL_17:
    *((_DWORD *)handle + 111) = 5;
    v13 = (char *)*((void *)handle + 23);
    if (v13)
    {
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL33nw_webtransport_session_terminateP23nw_webtransport_sessioni_block_invoke;
      v37 = (const char *)&__block_descriptor_tmp_26_33833;
      *(_DWORD *)v38 = v5;
      nw_hash_table_apply(v13, (uint64_t)buf);
    }
    uint64_t v14 = *((void *)handle + 53);
    if (v14)
    {
      v15 = *(void **)(v14 + 48);
      if (v5) {
        nw_protocol_error(*(void **)(v14 + 48), *((void *)handle + 53));
      }
      nw_protocol_disconnected(v15, v14);
    }
    uint64_t v16 = *((void *)handle + 41);
    if (v16)
    {
      if (v5)
      {
        do
        {
          uint64_t v17 = *(void *)(v16 + 112);
          v18 = *(void **)(v16 + 48);
          nw_protocol_error(v18, v16);
          uint64_t v19 = v16;
          uint64_t v16 = v17;
          nw_protocol_disconnected(v18, v19);
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v20 = *(void *)(v16 + 112);
          nw_protocol_disconnected(*(void **)(v16 + 48), v16);
          uint64_t v16 = v20;
        }
        while (v20);
      }
    }
    uint64_t v21 = *((void *)handle + 52);
    if (v21)
    {
      v22 = *(void **)(v21 + 48);
      if (v5) {
        nw_protocol_error(*(void **)(v21 + 48), *((void *)handle + 52));
      }
      nw_protocol_disconnected(v22, v21);
    }
    if (*((void *)handle + 4))
    {
      nw_protocol_remove_instance((uint64_t)handle);
      nw_protocol_disconnect(*((void **)handle + 4), (uint64_t)handle);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_protocol_webtransport_session_disconnected";
  v23 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  if (!__nwlog_fault(v23, &type, &v34)) {
    goto LABEL_65;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_65;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_protocol_webtransport_session_disconnected";
    v26 = "%{public}s called with null webtransport_session";
    goto LABEL_64;
  }
  if (!v34)
  {
    v24 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_65;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_protocol_webtransport_session_disconnected";
    v26 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_64;
  }
  v32 = (char *)__nw_create_backtrace_string();
  v24 = __nwlog_obj();
  os_log_type_t v25 = type;
  BOOL v33 = os_log_type_enabled(v24, type);
  if (!v32)
  {
    if (!v33) {
      goto LABEL_65;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_protocol_webtransport_session_disconnected";
    v26 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_64;
  }
  if (v33)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = "nw_protocol_webtransport_session_disconnected";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v32;
    _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v32);
  if (v23) {
    goto LABEL_66;
  }
}

BOOL ___ZL33nw_webtransport_session_establishP23nw_webtransport_session_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  v3 = a3;
  BOOL is_http_connection = nw_protocol_metadata_is_http_connection(a3);
  if (is_http_connection)
  {
    if (v3) {
      v3 = os_retain(v3);
    }
    uint64_t v6 = *(void *)(a1 + 32);
    char v7 = *(unsigned char *)(v6 + 384);
    if (v7)
    {
      v8 = *(void **)(v6 + 376);
      if (v8)
      {
        os_release(v8);
        char v7 = *(unsigned char *)(v6 + 384);
      }
    }
    *(void *)(v6 + 376) = v3;
    *(unsigned char *)(v6 + 384) = v7 | 1;
  }
  return !is_http_connection;
}

void nw_protocol_webtransport_session_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_webtransport_session_disconnect";
    v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v3, &type, &v14)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_webtransport_session_disconnect";
      uint64_t v6 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v11 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_protocol_webtransport_session_disconnect";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v3) {
          return;
        }
LABEL_37:
        free(v3);
        return;
      }
      if (!v11) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_webtransport_session_disconnect";
      uint64_t v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_webtransport_session_disconnect";
      uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_36;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((handle[137] & 2) == 0 && gLogDatapath)
    {
      v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = handle[115];
        *(_DWORD *)buf = 136447234;
        uint64_t v17 = "nw_protocol_webtransport_session_disconnect";
        __int16 v18 = 2082;
        uint64_t v19 = (char *)(handle + 116);
        __int16 v20 = 2080;
        uint64_t v21 = " ";
        __int16 v22 = 1024;
        int v23 = v9;
        __int16 v24 = 2048;
        os_log_type_t v25 = a2;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called, with other_protocol: %p", buf, 0x30u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_protocol_webtransport_session_disconnect";
  v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v3, &type, &v14)) {
    goto LABEL_36;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_webtransport_session_disconnect";
    uint64_t v6 = "%{public}s called with null webtransport_session";
    goto LABEL_35;
  }
  if (!v14)
  {
    int v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_webtransport_session_disconnect";
    uint64_t v6 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_35;
  }
  int v12 = (char *)__nw_create_backtrace_string();
  int v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  BOOL v13 = os_log_type_enabled(v4, type);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_webtransport_session_disconnect";
    uint64_t v6 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_35;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v17 = "nw_protocol_webtransport_session_disconnect";
    __int16 v18 = 2082;
    uint64_t v19 = v12;
    _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v12);
  if (v3) {
    goto LABEL_37;
  }
}

uint64_t nw_protocol_webtransport_session_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
    v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v8, &type, &v22)) {
      goto LABEL_77;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        int v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
          BOOL v11 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_76;
        }
        goto LABEL_77;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
          BOOL v11 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_76;
        }
        goto LABEL_77;
      }
      if (!v15) {
        goto LABEL_57;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
      __int16 v26 = 2082;
      v27 = backtrace_string;
      uint64_t v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_56;
    }
    int v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
    BOOL v11 = "%{public}s called with null protocol";
LABEL_76:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_77;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
    v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v8, &type, &v22)) {
      goto LABEL_77;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        int v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
          BOOL v11 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
          goto LABEL_76;
        }
        goto LABEL_77;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
          BOOL v11 = "%{public}s called with null webtransport_session, no backtrace";
          goto LABEL_76;
        }
        goto LABEL_77;
      }
      if (!v17) {
        goto LABEL_57;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
      __int16 v26 = 2082;
      v27 = backtrace_string;
      uint64_t v16 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
      goto LABEL_56;
    }
    int v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
    BOOL v11 = "%{public}s called with null webtransport_session";
    goto LABEL_76;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
    v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v8, &type, &v22)) {
      goto LABEL_77;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
      BOOL v11 = "%{public}s called with null other_protocol";
      goto LABEL_76;
    }
    if (!v22)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
        BOOL v11 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_76;
      }
      goto LABEL_77;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v18 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
        BOOL v11 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_76;
      }
      goto LABEL_77;
    }
    if (!v18) {
      goto LABEL_57;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
    __int16 v26 = 2082;
    v27 = backtrace_string;
    uint64_t v16 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_56:
    _os_log_impl(&dword_1830D4000, v9, v10, v16, buf, 0x16u);
    goto LABEL_57;
  }
  if (!a2->handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
    v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v8, &type, &v22)) {
      goto LABEL_77;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
        BOOL v11 = "%{public}s called with null webtransport_stream";
        goto LABEL_76;
      }
LABEL_77:
      if (v8) {
        free(v8);
      }
      return 0;
    }
    if (!v22)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
        BOOL v11 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_76;
      }
      goto LABEL_77;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v19 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
        BOOL v11 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_76;
      }
      goto LABEL_77;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
      __int16 v26 = 2082;
      v27 = backtrace_string;
      uint64_t v16 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
      goto LABEL_56;
    }
LABEL_57:
    free(backtrace_string);
    goto LABEL_77;
  }
  if ((handle[137] & 2) == 0)
  {
    if (gLogDatapath)
    {
      int v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v13 = handle[115];
        *(_DWORD *)buf = 136446978;
        os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
        __int16 v26 = 2082;
        v27 = (char *)(handle + 116);
        __int16 v28 = 2080;
        int v29 = " ";
        __int16 v30 = 1024;
        int v31 = v13;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }
  }
  if ((handle[137] & 0x10) == 0)
  {
    output_handler = a1->output_handler;
    if ((handle[137] & 4) == 0)
    {
      if (*((void *)handle + 50))
      {
        if (output_handler)
        {
          callbacks = output_handler->callbacks;
          if (callbacks)
          {
            if (callbacks->add_listen_handler)
            {
              *((void *)handle + 51) = output_handler;
              if (nw_protocol_add_listen_handler((uint64_t)output_handler, (uint64_t)(handle + 16))) {
                char v6 = 4;
              }
              else {
                char v6 = 0;
              }
              *((unsigned char *)handle + 548) = handle[137] & 0xFB | v6;
              output_handler = a1->output_handler;
            }
          }
        }
      }
    }
    nw_protocol_connect((uint64_t)output_handler, (uint64_t)a1);
    *((unsigned char *)handle + 548) |= 0x10u;
    return 1;
  }
  uint64_t result = 1;
  if ((handle[137] & 2) == 0 && gLogDatapath)
  {
    __int16 v20 = __nwlog_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      int v21 = handle[115];
      *(_DWORD *)buf = 136446978;
      os_log_type_t v25 = "nw_protocol_webtransport_session_connect";
      __int16 v26 = 2082;
      v27 = (char *)(handle + 116);
      __int16 v28 = 2080;
      int v29 = " ";
      __int16 v30 = 1024;
      int v31 = v21;
      _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Skipping received connect callback, already sent to output_handler", buf, 0x26u);
    }
    return 1;
  }
  return result;
}

uint64_t nw_protocol_webtransport_session_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
    v110 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v136[0]) = 0;
    if (!__nwlog_fault(v110, type, v136)) {
      goto LABEL_244;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!LOBYTE(v136[0]))
      {
        v111 = __nwlog_obj();
        os_log_type_t v112 = type[0];
        if (os_log_type_enabled(v111, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
          v113 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_243;
        }
        goto LABEL_244;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v111 = __nwlog_obj();
      os_log_type_t v112 = type[0];
      BOOL v115 = os_log_type_enabled(v111, type[0]);
      if (!backtrace_string)
      {
        if (v115)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
          v113 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_243;
        }
        goto LABEL_244;
      }
      if (!v115) {
        goto LABEL_219;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
      __int16 v150 = 2082;
      v151 = backtrace_string;
      v116 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_218;
    }
    v111 = __nwlog_obj();
    os_log_type_t v112 = type[0];
    if (!os_log_type_enabled(v111, type[0])) {
      goto LABEL_244;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
    v113 = "%{public}s called with null protocol";
LABEL_243:
    _os_log_impl(&dword_1830D4000, v111, v112, v113, buf, 0xCu);
    goto LABEL_244;
  }
  if (!a1->handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
    v110 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v136[0]) = 0;
    if (!__nwlog_fault(v110, type, v136)) {
      goto LABEL_244;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!LOBYTE(v136[0]))
      {
        v111 = __nwlog_obj();
        os_log_type_t v112 = type[0];
        if (os_log_type_enabled(v111, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
          v113 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
          goto LABEL_243;
        }
        goto LABEL_244;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v111 = __nwlog_obj();
      os_log_type_t v112 = type[0];
      BOOL v117 = os_log_type_enabled(v111, type[0]);
      if (!backtrace_string)
      {
        if (v117)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
          v113 = "%{public}s called with null webtransport_session, no backtrace";
          goto LABEL_243;
        }
        goto LABEL_244;
      }
      if (!v117) {
        goto LABEL_219;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
      __int16 v150 = 2082;
      v151 = backtrace_string;
      v116 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
      goto LABEL_218;
    }
    v111 = __nwlog_obj();
    os_log_type_t v112 = type[0];
    if (!os_log_type_enabled(v111, type[0])) {
      goto LABEL_244;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
    v113 = "%{public}s called with null webtransport_session";
    goto LABEL_243;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
    v110 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v136[0]) = 0;
    if (!__nwlog_fault(v110, type, v136)) {
      goto LABEL_244;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v111 = __nwlog_obj();
      os_log_type_t v112 = type[0];
      if (!os_log_type_enabled(v111, type[0])) {
        goto LABEL_244;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
      v113 = "%{public}s called with null input_protocol";
      goto LABEL_243;
    }
    if (!LOBYTE(v136[0]))
    {
      v111 = __nwlog_obj();
      os_log_type_t v112 = type[0];
      if (os_log_type_enabled(v111, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
        v113 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_243;
      }
      goto LABEL_244;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v111 = __nwlog_obj();
    os_log_type_t v112 = type[0];
    BOOL v118 = os_log_type_enabled(v111, type[0]);
    if (!backtrace_string)
    {
      if (v118)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
        v113 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_243;
      }
      goto LABEL_244;
    }
    if (!v118) {
      goto LABEL_219;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
    __int16 v150 = 2082;
    v151 = backtrace_string;
    v116 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_218:
    _os_log_impl(&dword_1830D4000, v111, v112, v116, buf, 0x16u);
    goto LABEL_219;
  }
  handle = (char *)a1->handle;
  int v4 = (char *)a2->handle;
  if (v4)
  {
    if ((handle[548] & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v5 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        int v6 = *((_DWORD *)handle + 115);
        default_input_handler = a1->default_input_handler;
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
        __int16 v150 = 2082;
        v151 = handle + 464;
        __int16 v152 = 2080;
        uint64_t v153 = (uint64_t)" ";
        __int16 v154 = 1024;
        *(_DWORD *)v155 = v6;
        *(_WORD *)&v155[4] = 2048;
        *(void *)&v155[6] = a1;
        *(_WORD *)&v155[14] = 2048;
        *(void *)&v155[16] = default_input_handler;
        __int16 v156 = 2048;
        v157 = a2;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> called, protocol %p, default_input_handler %p, input protocol %p", buf, 0x44u);
      }
    }
    if ((v4[276] & 0x20) == 0)
    {
      if (*((char **)handle + 52) == v4)
      {
        if ((handle[548] & 2) == 0)
        {
          if (gLogDatapath)
          {
            v125 = __nwlog_obj();
            if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
            {
              int v126 = *((_DWORD *)handle + 115);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
              __int16 v150 = 2082;
              v151 = handle + 464;
              __int16 v152 = 2080;
              uint64_t v153 = (uint64_t)" ";
              __int16 v154 = 1024;
              *(_DWORD *)v155 = v126;
              _os_log_impl(&dword_1830D4000, v125, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Removing placeholder stream for session", buf, 0x26u);
            }
          }
        }
        *((void *)handle + 52) = 0;
        goto LABEL_69;
      }
      if (*((char **)handle + 53) == v4)
      {
        if ((handle[548] & 2) == 0)
        {
          if (gLogDatapath)
          {
            v127 = __nwlog_obj();
            if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
            {
              int v128 = *((_DWORD *)handle + 115);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
              __int16 v150 = 2082;
              v151 = handle + 464;
              __int16 v152 = 2080;
              uint64_t v153 = (uint64_t)" ";
              __int16 v154 = 1024;
              *(_DWORD *)v155 = v128;
              _os_log_impl(&dword_1830D4000, v127, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Removing datagram stream for session", buf, 0x26u);
            }
          }
        }
        *((void *)handle + 53) = 0;
        goto LABEL_69;
      }
      *(void *)os_log_type_t type = *((void *)v4 + 8);
      BOOL node = nw_hash_table_get_node(*((void *)handle + 23), (uint64_t)type, 8);
      if (node)
      {
        if (nw_hash_table_remove_node(*((void *)handle + 23), node)) {
          goto LABEL_69;
        }
        if ((handle[548] & 2) != 0) {
          goto LABEL_69;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_69;
        }
        int v10 = *((_DWORD *)handle + 115);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        __int16 v150 = 2082;
        v151 = handle + 464;
        __int16 v152 = 2080;
        uint64_t v153 = (uint64_t)" ";
        __int16 v154 = 1024;
        *(_DWORD *)v155 = v10;
        *(_WORD *)&v155[4] = 2048;
        *(void *)&v155[6] = *(void *)type;
        BOOL v11 = "%{public}s %{public}s%s<i%u> Failed to remove stream %lld from hash table";
      }
      else
      {
        if ((handle[548] & 2) != 0) {
          goto LABEL_69;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_69;
        }
        int v28 = *((_DWORD *)handle + 115);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        __int16 v150 = 2082;
        v151 = handle + 464;
        __int16 v152 = 2080;
        uint64_t v153 = (uint64_t)" ";
        __int16 v154 = 1024;
        *(_DWORD *)v155 = v28;
        *(_WORD *)&v155[4] = 2048;
        *(void *)&v155[6] = *(void *)type;
        BOOL v11 = "%{public}s %{public}s%s<i%u> called remove_input_handler with stream id %lld, but no stream found";
      }
      int v29 = v9;
      os_log_type_t v30 = OS_LOG_TYPE_ERROR;
      uint32_t v31 = 48;
LABEL_46:
      _os_log_impl(&dword_1830D4000, v29, v30, v11, buf, v31);
LABEL_69:
      *((void *)v4 + 11) = 0;
      if (*((char **)handle + 6) != v4) {
        return 1;
      }
      uint64_t v38 = (uint64_t)handle;
      if (*((_DWORD *)handle + 111))
      {
        uint64_t v39 = *((void *)handle + 53);
        if (v39)
        {
LABEL_72:
          nw_protocol_set_input_handler((uint64_t)handle, v39);
          if ((handle[548] & 2) != 0) {
            return 1;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v40 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
            return 1;
          }
          int v41 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          __int16 v150 = 2082;
          v151 = handle + 464;
          __int16 v152 = 2080;
          uint64_t v153 = (uint64_t)" ";
          __int16 v154 = 1024;
          *(_DWORD *)v155 = v41;
          v42 = "%{public}s %{public}s%s<i%u> not destroying, still have datagram stream";
          goto LABEL_75;
        }
      }
      else
      {
        if ((handle[548] & 2) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            int v45 = *((_DWORD *)handle + 115);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
            __int16 v150 = 2082;
            v151 = handle + 464;
            __int16 v152 = 2080;
            uint64_t v153 = (uint64_t)" ";
            __int16 v154 = 1024;
            *(_DWORD *)v155 = v45;
            _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> first input handler bailed, closing", buf, 0x26u);
          }
        }
        uint64_t v46 = *((void *)handle + 54);
        v47 = (void *)*((void *)handle + 49);
        v136[0] = MEMORY[0x1E4F143A8];
        v136[1] = 0x40000000;
        v136[2] = ___ZL37nw_webtransport_session_remove_streamP23nw_webtransport_sessionP22nw_webtransport_stream_block_invoke;
        v136[3] = &unk_1E5240268;
        v136[4] = v46;
        nw_queue_context_async(v47, v136);
        uint64_t v39 = *((void *)handle + 53);
        if (v39) {
          goto LABEL_72;
        }
      }
      v48 = (os_unfair_lock_s *)*((void *)handle + 23);
      if (v48 && v48[10]._os_unfair_lock_opaque)
      {
        some_BOOL node = nw_hash_table_get_some_node(v48);
        uint64_t object = nw_hash_node_get_object(some_node);
        nw_protocol_set_input_handler((uint64_t)handle, object);
        if ((handle[548] & 2) != 0) {
          return 1;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v40 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
          return 1;
        }
        int v51 = *((_DWORD *)handle + 115);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        __int16 v150 = 2082;
        v151 = handle + 464;
        __int16 v152 = 2080;
        uint64_t v153 = (uint64_t)" ";
        __int16 v154 = 1024;
        *(_DWORD *)v155 = v51;
        v42 = "%{public}s %{public}s%s<i%u> not destroying, still have active streams";
        goto LABEL_75;
      }
      if (*((_DWORD *)handle + 114))
      {
        uint64_t v52 = *((void *)handle + 41);
        if (v52)
        {
          if ((*(unsigned char *)(v52 + 276) & 0x10) == 0)
          {
            if (gLogDatapath)
            {
              v131 = __nwlog_obj();
              if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v132 = *(void *)(v52 + 88);
                if (v132) {
                  int v133 = *(_DWORD *)(v132 + 460);
                }
                else {
                  int v133 = -1;
                }
                uint64_t v134 = *(void *)(v52 + 64);
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_webtransport_session_get_next_pending_stream";
                __int16 v150 = 2082;
                v151 = (const char *)(v52 + 192);
                __int16 v152 = 2080;
                uint64_t v153 = (uint64_t)" ";
                __int16 v154 = 1024;
                *(_DWORD *)v155 = v133;
                *(_WORD *)&v155[4] = 2048;
                *(void *)&v155[6] = v134;
                *(_WORD *)&v155[14] = 2048;
                *(void *)&v155[16] = v52;
                _os_log_impl(&dword_1830D4000, v131, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> found stream (%p)", buf, 0x3Au);
                uint64_t v38 = (uint64_t)handle;
              }
            }
          }
        }
        nw_protocol_set_input_handler(v38, v52);
        if ((*(unsigned char *)(v38 + 548) & 2) != 0) {
          return 1;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v40 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
          return 1;
        }
        int v53 = *(_DWORD *)(v38 + 460);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        __int16 v150 = 2082;
        v151 = (const char *)(v38 + 464);
        __int16 v152 = 2080;
        uint64_t v153 = (uint64_t)" ";
        __int16 v154 = 1024;
        *(_DWORD *)v155 = v53;
        v42 = "%{public}s %{public}s%s<i%u> not destroying, still have pending streams";
LABEL_75:
        _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_INFO, v42, buf, 0x26u);
        return 1;
      }
      uint64_t v54 = *((void *)handle + 52);
      if (v54)
      {
        nw_protocol_set_input_handler((uint64_t)handle, v54);
        if ((handle[548] & 2) != 0) {
          return 1;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v40 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
          return 1;
        }
        int v55 = *((_DWORD *)handle + 115);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        __int16 v150 = 2082;
        v151 = handle + 464;
        __int16 v152 = 2080;
        uint64_t v153 = (uint64_t)" ";
        __int16 v154 = 1024;
        *(_DWORD *)v155 = v55;
        v42 = "%{public}s %{public}s%s<i%u> not destroying, still have placeholder stream";
        goto LABEL_75;
      }
      nw_protocol_set_input_handler((uint64_t)handle, 0);
      if ((handle[548] & 2) == 0)
      {
        v56 = __nwlog_obj();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          int v57 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          __int16 v150 = 2082;
          v151 = handle + 464;
          __int16 v152 = 2080;
          uint64_t v153 = (uint64_t)" ";
          __int16 v154 = 1024;
          *(_DWORD *)v155 = v57;
          _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> called, destroying session", buf, 0x26u);
        }
      }
      *(void *)buf = 0;
      nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(handle + 344), buf);
      *(void *)buf = 0;
      nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(handle + 360), buf);
      *(void *)buf = 0;
      nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(handle + 376), buf);
      nw_http_capsule_framer_cleanup((void *)handle + 12);
      uint64_t v58 = *((void *)handle + 50);
      if (v58) {
        (*(void (**)(uint64_t, char *, void))(*(void *)v58 + 8))(v58, handle, 0);
      }
      if ((handle[548] & 4) != 0)
      {
        if ((nw_protocol_remove_listen_handler(*((void *)handle + 51), (uint64_t)(handle + 64)) & 1) == 0
          && (handle[548] & 2) == 0)
        {
          v59 = __nwlog_obj();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
          {
            int v60 = *((_DWORD *)handle + 115);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
            __int16 v150 = 2082;
            v151 = handle + 464;
            __int16 v152 = 2080;
            uint64_t v153 = (uint64_t)" ";
            __int16 v154 = 1024;
            *(_DWORD *)v155 = v60;
            _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> failed to remove listen handler", buf, 0x26u);
          }
        }
        *((void *)handle + 51) = 0;
      }
      uint64_t v61 = *((void *)handle + 4);
      if (v61) {
        nw_protocol_remove_input_handler(v61, (uint64_t)handle);
      }
      uint64_t v143 = 0;
      v144 = &v143;
      uint64_t v145 = 0x2000000000;
      uint64_t v146 = 0;
      v62 = (char *)*((void *)handle + 23);
      if (v62)
      {
        *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
        uint64_t v138 = 0x40000000;
        v139 = ___ZL31nw_webtransport_session_destroyP23nw_webtransport_session_block_invoke;
        v140 = &unk_1E52402B0;
        v141 = &v143;
        v142 = handle;
        nw_hash_table_apply(v62, (uint64_t)type);
        v63 = (os_unfair_lock_s *)*((void *)handle + 23);
        if (v63)
        {
          _nw_hash_table_release(v63);
          *((void *)handle + 23) = 0;
        }
      }
      uint64_t v64 = *((void *)handle + 41);
      v144[3] = v64;
      if (!v64)
      {
        (*(void (**)(void, void))(*((void *)handle + 54) + 16))(*((void *)handle + 54), 0);
        v109 = (const void *)*((void *)handle + 54);
        if (v109)
        {
          _Block_release(v109);
          *((void *)handle + 54) = 0;
        }
        std::destroy_at[abi:nn180100]<nw_webtransport_session,0>((uint64_t)handle);
        free(handle);
        _Block_object_dispose(&v143, 8);
        return 1;
      }
      while (1)
      {
        uint64_t v64 = *(void *)(v64 + 112);
        if ((*(unsigned char *)(v38 + 548) & 2) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v65 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            int v66 = *(_DWORD *)(v38 + 460);
            uint64_t v67 = v144[3];
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
            __int16 v150 = 2082;
            v151 = handle + 464;
            __int16 v152 = 2080;
            uint64_t v153 = (uint64_t)" ";
            __int16 v154 = 1024;
            *(_DWORD *)v155 = v66;
            *(_WORD *)&v155[4] = 2048;
            *(void *)&v155[6] = v67;
            _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> should not have stream %p left, destroying anyways", buf, 0x30u);
          }
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
        v68 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v148 = OS_LOG_TYPE_ERROR;
        char v147 = 0;
        if (__nwlog_fault(v68, &v148, &v147))
        {
          if (v148 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v69 = gLogObj;
            os_log_type_t v70 = v148;
            if (!os_log_type_enabled((os_log_t)gLogObj, v148)) {
              goto LABEL_131;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
            v71 = v69;
            os_log_type_t v72 = v70;
            v73 = "%{public}s should not have streams left when destroying";
LABEL_130:
            _os_log_impl(&dword_1830D4000, v71, v72, v73, buf, 0xCu);
            goto LABEL_131;
          }
          if (!v147)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v78 = gLogObj;
            os_log_type_t v79 = v148;
            if (!os_log_type_enabled((os_log_t)gLogObj, v148)) {
              goto LABEL_131;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
            v71 = v78;
            os_log_type_t v72 = v79;
            v73 = "%{public}s should not have streams left when destroying, backtrace limit exceeded";
            goto LABEL_130;
          }
          v74 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v75 = gLogObj;
          os_log_type_t v76 = v148;
          BOOL v77 = os_log_type_enabled((os_log_t)gLogObj, v148);
          if (!v74)
          {
            if (!v77) {
              goto LABEL_131;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
            v71 = v75;
            os_log_type_t v72 = v76;
            v73 = "%{public}s should not have streams left when destroying, no backtrace";
            goto LABEL_130;
          }
          if (v77)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
            __int16 v150 = 2082;
            v151 = v74;
            _os_log_impl(&dword_1830D4000, v75, v76, "%{public}s should not have streams left when destroying, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v74);
        }
LABEL_131:
        if (v68) {
          free(v68);
        }
        uint64_t v80 = *(void *)(v64 + 112);
        v81 = *(void **)(v64 + 120);
        uint64_t v38 = (uint64_t)handle;
        if (v80)
        {
          *(void *)(v80 + 120) = v81;
          v81 = *(void **)(v64 + 120);
        }
        else
        {
          *((void *)handle + 42) = v81;
        }
        void *v81 = v80;
        *(void *)(v64 + 112) = 0;
        *(void *)(v64 + 120) = 0;
        uint64_t v82 = v144[3];
        if (v82)
        {
          if ((*(unsigned char *)(v82 + 276) & 0x10) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v83 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              uint64_t v84 = *(void *)(v82 + 88);
              if (v84) {
                int v85 = *(_DWORD *)(v84 + 460);
              }
              else {
                int v85 = -1;
              }
              uint64_t v86 = *(void *)(v82 + 64);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
              __int16 v150 = 2082;
              v151 = (const char *)(v82 + 192);
              __int16 v152 = 2080;
              uint64_t v153 = (uint64_t)" ";
              __int16 v154 = 1024;
              *(_DWORD *)v155 = v85;
              *(_WORD *)&v155[4] = 2048;
              *(void *)&v155[6] = v86;
              *(_WORD *)&v155[14] = 2048;
              *(void *)&v155[16] = v82;
              _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> destroying stream %p", buf, 0x3Au);
            }
          }
          if (*(void *)(v82 + 72))
          {
            if ((*(unsigned char *)(v82 + 276) & 0x10) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v87 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                uint64_t v88 = *(void *)(v82 + 88);
                if (v88) {
                  int v89 = *(_DWORD *)(v88 + 460);
                }
                else {
                  int v89 = -1;
                }
                uint64_t v90 = *(void *)(v82 + 64);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
                __int16 v150 = 2082;
                v151 = (const char *)(v82 + 192);
                __int16 v152 = 2080;
                uint64_t v153 = (uint64_t)" ";
                __int16 v154 = 1024;
                *(_DWORD *)v155 = v89;
                *(_WORD *)&v155[4] = 2048;
                *(void *)&v155[6] = v90;
                _os_log_impl(&dword_1830D4000, v87, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> input_frames has unread frames before destroying", buf, 0x30u);
              }
            }
          }
          uint64_t v91 = *(void *)(v82 + 72);
          do
          {
            if (!v91) {
              break;
            }
            uint64_t v92 = *(void *)(v91 + 32);
            char v93 = ___ZL30nw_webtransport_stream_destroyP22nw_webtransport_stream_block_invoke((uint64_t)&__block_literal_global_31, v91);
            uint64_t v91 = v92;
          }
          while ((v93 & 1) != 0);
          (*(void (**)(void, void))(*(void *)(v82 + 176) + 16))(*(void *)(v82 + 176), 0);
          v94 = *(const void **)(v82 + 176);
          if (v94)
          {
            _Block_release(v94);
            *(void *)(v82 + 176) = 0;
          }
          if (*(unsigned char *)(v82 + 168))
          {
            v95 = *(void **)(v82 + 160);
            if (v95) {
              os_release(v95);
            }
          }
          *(void *)(v82 + 160) = 0;
          if (*(unsigned char *)(v82 + 152))
          {
            v96 = *(void **)(v82 + 144);
            if (v96) {
              os_release(v96);
            }
          }
          *(void *)(v82 + 144) = 0;
          if (*(unsigned char *)(v82 + 136))
          {
            v97 = *(void **)(v82 + 128);
            if (v97) {
              os_release(v97);
            }
          }
LABEL_164:
          free((void *)v82);
          goto LABEL_165;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        uint64_t v82 = _os_log_send_and_compose_impl();
        os_log_type_t v148 = OS_LOG_TYPE_ERROR;
        char v147 = 0;
        if (!__nwlog_fault((const char *)v82, &v148, &v147)) {
          goto LABEL_181;
        }
        if (v148 == OS_LOG_TYPE_FAULT)
        {
          v98 = __nwlog_obj();
          os_log_type_t v99 = v148;
          if (os_log_type_enabled(v98, v148))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
            v100 = v98;
            os_log_type_t v101 = v99;
            v102 = "%{public}s called with null webtransport_stream";
            goto LABEL_180;
          }
LABEL_181:
          if (v82) {
            goto LABEL_164;
          }
          goto LABEL_165;
        }
        if (!v147)
        {
          v107 = __nwlog_obj();
          os_log_type_t v108 = v148;
          if (!os_log_type_enabled(v107, v148)) {
            goto LABEL_181;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
          v100 = v107;
          os_log_type_t v101 = v108;
          v102 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
LABEL_180:
          _os_log_impl(&dword_1830D4000, v100, v101, v102, buf, 0xCu);
          goto LABEL_181;
        }
        v103 = (char *)__nw_create_backtrace_string();
        v104 = __nwlog_obj();
        os_log_type_t v105 = v148;
        BOOL v106 = os_log_type_enabled(v104, v148);
        if (!v103)
        {
          uint64_t v38 = (uint64_t)handle;
          if (!v106) {
            goto LABEL_181;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
          v100 = v104;
          os_log_type_t v101 = v105;
          v102 = "%{public}s called with null webtransport_stream, no backtrace";
          goto LABEL_180;
        }
        if (v106)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
          __int16 v150 = 2082;
          v151 = v103;
          _os_log_impl(&dword_1830D4000, v104, v105, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v103);
        uint64_t v38 = (uint64_t)handle;
        if (v82) {
          goto LABEL_164;
        }
LABEL_165:
        v144[3] = v64;
      }
    }
    if ((handle[548] & 2) == 0)
    {
      if (gLogDatapath)
      {
        v120 = __nwlog_obj();
        if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
        {
          int v121 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v150 = 2082;
          v151 = handle + 464;
          __int16 v152 = 2080;
          uint64_t v153 = (uint64_t)" ";
          __int16 v154 = 1024;
          *(_DWORD *)v155 = v121;
          *(_WORD *)&v155[4] = 2048;
          *(void *)&v155[6] = v4;
          _os_log_impl(&dword_1830D4000, v120, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream (%p)", buf, 0x30u);
        }
      }
    }
    if ((v4[276] & 0x20) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
      __int16 v150 = 2048;
      v151 = v4;
      int v12 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v136[0]) = 0;
      if (!__nwlog_fault(v12, type, v136)) {
        goto LABEL_57;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v13 = gLogObj;
        os_log_type_t v14 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_57;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
        __int16 v150 = 2048;
        v151 = v4;
        BOOL v15 = "%{public}s stream %p not in pending list, cannot remove";
      }
      else if (LOBYTE(v136[0]))
      {
        BOOL v19 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v13 = gLogObj;
        os_log_type_t v14 = type[0];
        BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v19)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            __int16 v150 = 2048;
            v151 = v4;
            __int16 v152 = 2082;
            uint64_t v153 = (uint64_t)v19;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v19);
          goto LABEL_57;
        }
        if (!v20)
        {
LABEL_57:
          if (v12) {
            free(v12);
          }
          goto LABEL_69;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
        __int16 v150 = 2048;
        v151 = v4;
        BOOL v15 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v13 = gLogObj;
        os_log_type_t v14 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_57;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
        __int16 v150 = 2048;
        v151 = v4;
        BOOL v15 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0x16u);
      goto LABEL_57;
    }
    uint64_t v16 = *((void *)v4 + 14);
    BOOL v17 = (void *)*((void *)v4 + 15);
    if (v16)
    {
      *(void *)(v16 + 120) = v17;
      BOOL v17 = (void *)*((void *)v4 + 15);
      BOOL v18 = handle;
    }
    else
    {
      BOOL v18 = handle;
      *((void *)handle + 42) = v17;
    }
    *BOOL v17 = v16;
    *((void *)v4 + 14) = 0;
    *((void *)v4 + 15) = 0;
    int v21 = *((_DWORD *)v18 + 114);
    *((_DWORD *)v18 + 114) = v21 - 1;
    if (v21)
    {
LABEL_67:
      char v37 = v4[276];
      v4[276] = v37 & 0xDF;
      if ((v37 & 0x10) != 0) {
        goto LABEL_69;
      }
      if (!gLogDatapath) {
        goto LABEL_69;
      }
      v122 = __nwlog_obj();
      if (!os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_69;
      }
      uint64_t v123 = *((void *)v4 + 11);
      if (v123) {
        int v124 = *(_DWORD *)(v123 + 460);
      }
      else {
        int v124 = -1;
      }
      uint64_t v129 = *((void *)v4 + 8);
      int v130 = *((_DWORD *)handle + 114);
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
      __int16 v150 = 2082;
      v151 = v4 + 192;
      __int16 v152 = 2080;
      uint64_t v153 = (uint64_t)" ";
      __int16 v154 = 1024;
      *(_DWORD *)v155 = v124;
      *(_WORD *)&v155[4] = 2048;
      *(void *)&v155[6] = v129;
      *(_WORD *)&v155[14] = 2048;
      *(void *)&v155[16] = v4;
      __int16 v156 = 1024;
      LODWORD(v157) = v130;
      BOOL v11 = "%{public}s %{public}s%s<i%u:s%lld> removed pending stream (%p), now have %u pending streams";
      int v29 = v122;
      os_log_type_t v30 = OS_LOG_TYPE_DEBUG;
      uint32_t v31 = 64;
      goto LABEL_46;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v22 = *((unsigned int *)handle + 114);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
    __int16 v150 = 2082;
    v151 = "webtransport_session->pending_stream_count";
    __int16 v152 = 2048;
    uint64_t v153 = 1;
    __int16 v154 = 2048;
    *(void *)v155 = v22;
    int v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v136[0]) = 0;
    if (__nwlog_fault(v23, type, v136))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v24 = gLogObj;
        os_log_type_t v25 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          uint64_t v26 = *((unsigned int *)handle + 114);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v150 = 2082;
          v151 = "webtransport_session->pending_stream_count";
          __int16 v152 = 2048;
          uint64_t v153 = 1;
          __int16 v154 = 2048;
          *(void *)v155 = v26;
          v27 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_63:
          _os_log_impl(&dword_1830D4000, v24, v25, v27, buf, 0x2Au);
        }
      }
      else if (LOBYTE(v136[0]))
      {
        uint64_t v32 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v24 = gLogObj;
        os_log_type_t v25 = type[0];
        BOOL v33 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v32)
        {
          if (v33)
          {
            uint64_t v34 = *((unsigned int *)handle + 114);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            __int16 v150 = 2082;
            v151 = "webtransport_session->pending_stream_count";
            __int16 v152 = 2048;
            uint64_t v153 = 1;
            __int16 v154 = 2048;
            *(void *)v155 = v34;
            *(_WORD *)&v155[8] = 2082;
            *(void *)&v155[10] = v32;
            _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v32);
          goto LABEL_64;
        }
        if (v33)
        {
          uint64_t v36 = *((unsigned int *)handle + 114);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v150 = 2082;
          v151 = "webtransport_session->pending_stream_count";
          __int16 v152 = 2048;
          uint64_t v153 = 1;
          __int16 v154 = 2048;
          *(void *)v155 = v36;
          v27 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_63;
        }
      }
      else
      {
        __int16 v24 = __nwlog_obj();
        os_log_type_t v25 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          uint64_t v35 = *((unsigned int *)handle + 114);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v150 = 2082;
          v151 = "webtransport_session->pending_stream_count";
          __int16 v152 = 2048;
          uint64_t v153 = 1;
          __int16 v154 = 2048;
          *(void *)v155 = v35;
          v27 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_63;
        }
      }
    }
LABEL_64:
    if (v23) {
      free(v23);
    }
    *((_DWORD *)handle + 114) = 0;
    goto LABEL_67;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
  v110 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v136[0]) = 0;
  if (!__nwlog_fault(v110, type, v136)) {
    goto LABEL_244;
  }
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!LOBYTE(v136[0]))
    {
      v111 = __nwlog_obj();
      os_log_type_t v112 = type[0];
      if (os_log_type_enabled(v111, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
        v113 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_243;
      }
      goto LABEL_244;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v111 = __nwlog_obj();
    os_log_type_t v112 = type[0];
    BOOL v119 = os_log_type_enabled(v111, type[0]);
    if (!backtrace_string)
    {
      if (v119)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
        v113 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_243;
      }
      goto LABEL_244;
    }
    if (v119)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
      __int16 v150 = 2082;
      v151 = backtrace_string;
      v116 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
      goto LABEL_218;
    }
LABEL_219:
    free(backtrace_string);
    goto LABEL_244;
  }
  v111 = __nwlog_obj();
  os_log_type_t v112 = type[0];
  if (os_log_type_enabled(v111, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
    v113 = "%{public}s called with null webtransport_stream";
    goto LABEL_243;
  }
LABEL_244:
  if (v110) {
    free(v110);
  }
  return 0;
}

BOOL nw_protocol_webtransport_session_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v361 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
    v212 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v343[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v212, &aBlock, v343)) {
      goto LABEL_483;
    }
    if (aBlock == 17)
    {
      v213 = __nwlog_obj();
      os_log_type_t v214 = aBlock;
      if (!os_log_type_enabled(v213, (os_log_type_t)aBlock)) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null protocol";
      goto LABEL_482;
    }
    if (v343[0] == OS_LOG_TYPE_DEFAULT)
    {
      v213 = __nwlog_obj();
      os_log_type_t v214 = aBlock;
      if (!os_log_type_enabled(v213, (os_log_type_t)aBlock)) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_482;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v213 = __nwlog_obj();
    os_log_type_t v214 = aBlock;
    BOOL v221 = os_log_type_enabled(v213, (os_log_type_t)aBlock);
    if (!backtrace_string)
    {
      if (!v221) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_482;
    }
    if (!v221) {
      goto LABEL_395;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    v222 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_394:
    _os_log_impl(&dword_1830D4000, v213, v214, v222, buf, 0x16u);
    goto LABEL_395;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
    v212 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v343[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v212, &aBlock, v343)) {
      goto LABEL_483;
    }
    if (aBlock == 17)
    {
      v213 = __nwlog_obj();
      os_log_type_t v214 = aBlock;
      if (!os_log_type_enabled(v213, (os_log_type_t)aBlock)) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null webtransport_session";
      goto LABEL_482;
    }
    if (v343[0] == OS_LOG_TYPE_DEFAULT)
    {
      v213 = __nwlog_obj();
      os_log_type_t v214 = aBlock;
      if (!os_log_type_enabled(v213, (os_log_type_t)aBlock)) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
      goto LABEL_482;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v213 = __nwlog_obj();
    os_log_type_t v214 = aBlock;
    BOOL v223 = os_log_type_enabled(v213, (os_log_type_t)aBlock);
    if (!backtrace_string)
    {
      if (!v223) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null webtransport_session, no backtrace";
      goto LABEL_482;
    }
    if (!v223) {
      goto LABEL_395;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    v222 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
    goto LABEL_394;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
    v212 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v343[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v212, &aBlock, v343)) {
      goto LABEL_483;
    }
    if (aBlock == 17)
    {
      v213 = __nwlog_obj();
      os_log_type_t v214 = aBlock;
      if (!os_log_type_enabled(v213, (os_log_type_t)aBlock)) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null input_protocol";
      goto LABEL_482;
    }
    if (v343[0] == OS_LOG_TYPE_DEFAULT)
    {
      v213 = __nwlog_obj();
      os_log_type_t v214 = aBlock;
      if (!os_log_type_enabled(v213, (os_log_type_t)aBlock)) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_482;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v213 = __nwlog_obj();
    os_log_type_t v214 = aBlock;
    BOOL v224 = os_log_type_enabled(v213, (os_log_type_t)aBlock);
    if (!backtrace_string)
    {
      if (!v224) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_482;
    }
    if (!v224) {
      goto LABEL_395;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    v222 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_394;
  }
  if ((handle[137] & 2) == 0)
  {
    if (gLogDatapath)
    {
      v216 = a2;
      v217 = __nwlog_obj();
      BOOL v218 = os_log_type_enabled(v217, OS_LOG_TYPE_DEBUG);
      a2 = v216;
      if (v218)
      {
        int v219 = handle[115];
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 116;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v348 = (uint64_t)" ";
        *(_WORD *)v349 = 1024;
        *(_DWORD *)&v349[2] = v219;
        _os_log_impl(&dword_1830D4000, v217, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        a2 = v216;
      }
    }
  }
  if (handle[111] == 5)
  {
    if ((handle[137] & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v4 = gLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
      if (result)
      {
        int v6 = handle[115];
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 116;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v348 = (uint64_t)" ";
        *(_WORD *)v349 = 1024;
        *(_DWORD *)&v349[2] = v6;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> cannot add input handler to closed session", buf, 0x26u);
        return 0;
      }
      return result;
    }
    return 0;
  }
  char v7 = a2;
  uint64_t parameters = nw_protocol_get_parameters((uint64_t)a2);
  if (!parameters)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
    v212 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v343[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v212, &aBlock, v343)) {
      goto LABEL_483;
    }
    if (aBlock == 17)
    {
      v213 = __nwlog_obj();
      os_log_type_t v214 = aBlock;
      if (!os_log_type_enabled(v213, (os_log_type_t)aBlock)) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null parameters";
      goto LABEL_482;
    }
    if (v343[0] == OS_LOG_TYPE_DEFAULT)
    {
      v213 = __nwlog_obj();
      os_log_type_t v214 = aBlock;
      if (!os_log_type_enabled(v213, (os_log_type_t)aBlock)) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_482;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v213 = __nwlog_obj();
    os_log_type_t v214 = aBlock;
    BOOL v246 = os_log_type_enabled(v213, (os_log_type_t)aBlock);
    if (!backtrace_string)
    {
      if (!v246) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null parameters, no backtrace";
      goto LABEL_482;
    }
    if (!v246) {
      goto LABEL_395;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    v222 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
    goto LABEL_394;
  }
  uint64_t v9 = (uint64_t *)parameters;
  v333 = v7;
  uint64_t remote_endpoint = nw_protocol_get_remote_endpoint((uint64_t)v7);
  if (!remote_endpoint)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
    v212 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v343[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v212, &aBlock, v343)) {
      goto LABEL_483;
    }
    if (aBlock == 17)
    {
      v213 = __nwlog_obj();
      os_log_type_t v214 = aBlock;
      if (!os_log_type_enabled(v213, (os_log_type_t)aBlock)) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null remote_endpoint";
      goto LABEL_482;
    }
    if (v343[0] == OS_LOG_TYPE_DEFAULT)
    {
      v213 = __nwlog_obj();
      os_log_type_t v214 = aBlock;
      if (!os_log_type_enabled(v213, (os_log_type_t)aBlock)) {
        goto LABEL_483;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      v215 = "%{public}s called with null remote_endpoint, backtrace limit exceeded";
      goto LABEL_482;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v213 = __nwlog_obj();
    os_log_type_t v214 = aBlock;
    BOOL v247 = os_log_type_enabled(v213, (os_log_type_t)aBlock);
    if (backtrace_string)
    {
      if (v247)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        v222 = "%{public}s called with null remote_endpoint, dumping backtrace:%{public}s";
        goto LABEL_394;
      }
LABEL_395:
      free(backtrace_string);
      goto LABEL_483;
    }
    if (!v247) {
      goto LABEL_483;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
    v215 = "%{public}s called with null remote_endpoint, no backtrace";
LABEL_482:
    _os_log_impl(&dword_1830D4000, v213, v214, v215, buf, 0xCu);
LABEL_483:
    if (v212) {
      free(v212);
    }
    return 0;
  }
  BOOL v11 = (void *)remote_endpoint;
  if (*((void *)handle + 43)) {
    goto LABEL_35;
  }
  int v12 = v9;
  int v13 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v12, 0, 1);

  os_log_type_t v14 = nw_parameters_copy_protocol_options_legacy(v13, (nw_protocol *)handle);
  nw_protocol_options_get_log_id_str(v14, (unsigned char *)handle + 464, 84);
  handle[115] = nw_protocol_get_next_instance_id();
  BOOL v15 = v14;
  uint64_t v16 = v15;
  if (!v15)
  {
    v251 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_options_get_top_id";
    v331 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock) = 16;
    v343[0] = OS_LOG_TYPE_DEFAULT;
    v252 = (char *)v331;
    if (!__nwlog_fault(v331, &aBlock, v343))
    {
LABEL_538:
      if (v252) {
        free(v252);
      }
      int v17 = 0;
      goto LABEL_15;
    }
    if (aBlock == 17)
    {
      v253 = __nwlog_obj();
      os_log_type_t v254 = aBlock;
      if (os_log_type_enabled(v253, (os_log_type_t)aBlock))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_options_get_top_id";
        _os_log_impl(&dword_1830D4000, v253, v254, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else
    {
      if (v343[0])
      {
        v275 = (char *)__nw_create_backtrace_string();
        v276 = __nwlog_obj();
        os_log_type_t type = aBlock;
        BOOL v277 = os_log_type_enabled(v276, (os_log_type_t)aBlock);
        if (v275)
        {
          if (v277)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_options_get_top_id";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v275;
            _os_log_impl(&dword_1830D4000, v276, type, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v275);
          goto LABEL_537;
        }
        if (v277)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_options_get_top_id";
          _os_log_impl(&dword_1830D4000, v276, type, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        v276 = __nwlog_obj();
        os_log_type_t v298 = aBlock;
        if (os_log_type_enabled(v276, (os_log_type_t)aBlock))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_options_get_top_id";
          _os_log_impl(&dword_1830D4000, v276, v298, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_537:
    v252 = (char *)v331;
    goto LABEL_538;
  }
  int v17 = *((_DWORD *)v15 + 33);
LABEL_15:

  if ((handle[137] & 2) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v18 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      int v19 = handle[115];
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 116;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v348 = (uint64_t)" ";
      *(_WORD *)v349 = 1024;
      *(_DWORD *)&v349[2] = v19;
      *(_WORD *)&v349[6] = 1024;
      *(_DWORD *)&v349[8] = v19;
      *(_WORD *)&v349[12] = 1024;
      *(_DWORD *)&v349[14] = v17;
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> created WebTransport session and assigned instance ID: %u from C%u", buf, 0x32u);
    }
  }
  if (v16)
  {
    nw_protocol_stack_t v20 = nw_parameters_copy_default_protocol_stack(v13);
    int v21 = nw_protocol_options_copy(v16);
    if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_61090);
    }
    id v22 = (id)nw_protocol_copy_webtransport_definition::definition;
    nw_parameters_set_protocol_instance(v21, v23, (uint64_t)handle);
    if (v22) {
      os_release(v22);
    }
    nw_protocol_stack_replace_protocol_with_handle(v20, (uint64_t)handle, v21);
    if (v21) {
      os_release(v21);
    }
    if (v20) {
      os_release(v20);
    }
  }
  else if ((handle[137] & 2) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v24 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      int v25 = handle[115];
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 116;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v348 = (uint64_t)" ";
      *(_WORD *)v349 = 1024;
      *(_DWORD *)&v349[2] = v25;
      *(_WORD *)&v349[6] = 2048;
      *(void *)&v349[8] = v13;
      *(_WORD *)&v349[16] = 2048;
      *(void *)&v349[18] = v12;
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> failed to find webtransport options in new parameters %p, copy of %p", buf, 0x3Au);
    }
  }
  char v26 = *((unsigned char *)handle + 352);
  if (v26)
  {
    v27 = (void *)*((void *)handle + 43);
    if (v27)
    {
      os_release(v27);
      char v26 = *((unsigned char *)handle + 352);
    }
  }
  *((void *)handle + 43) = v13;
  *((unsigned char *)handle + 352) = v26 | 1;
  if (v16) {
    os_release(v16);
  }
LABEL_35:
  identifier = a1->identifier;
  int v29 = nw_parameters_copy_protocol_options_legacy(v9, (nw_protocol *)handle);
  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_stream_add_input_handler";
    uint64_t v54 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v343[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v54, &aBlock, v343))
    {
      if (aBlock == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v55 = gLogObj;
        os_log_type_t v56 = aBlock;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_add_input_handler";
          int v57 = "%{public}s called with null webtransport_stream";
LABEL_90:
          v65 = v55;
          os_log_type_t v66 = v56;
LABEL_91:
          _os_log_impl(&dword_1830D4000, v65, v66, v57, buf, 0xCu);
        }
      }
      else if (v343[0])
      {
        uint64_t v61 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v62 = gLogObj;
        os_log_type_t v63 = aBlock;
        BOOL v64 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock);
        if (v61)
        {
          if (v64)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_webtransport_stream_add_input_handler";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v61;
            _os_log_impl(&dword_1830D4000, v62, v63, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v61);
          goto LABEL_92;
        }
        if (v64)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_add_input_handler";
          int v57 = "%{public}s called with null webtransport_stream, no backtrace";
          v65 = v62;
          os_log_type_t v66 = v63;
          goto LABEL_91;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v55 = gLogObj;
        os_log_type_t v56 = aBlock;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_add_input_handler";
          int v57 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }
LABEL_92:
    if (v54) {
      free(v54);
    }
    os_log_type_t v30 = 0;
    goto LABEL_99;
  }
  os_log_type_t v30 = malloc_type_calloc(1uLL, 0x118uLL, 0xEAFB8F1AuLL);
  if (!v30)
  {
    v225 = __nwlog_obj();
    os_log_type_enabled(v225, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "strict_calloc";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = 1;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v348 = 280;
    v226 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v226);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v226);
  }
  v30[34] = 0;
  *((_OWORD *)v30 + 15) = 0u;
  *((_OWORD *)v30 + 16) = 0u;
  *((_OWORD *)v30 + 13) = 0u;
  *((_OWORD *)v30 + 14) = 0u;
  *((_OWORD *)v30 + 11) = 0u;
  *((_OWORD *)v30 + 12) = 0u;
  *((_OWORD *)v30 + 9) = 0u;
  *((_OWORD *)v30 + 10) = 0u;
  *((_OWORD *)v30 + 7) = 0u;
  *((_OWORD *)v30 + 8) = 0u;
  *((_OWORD *)v30 + 5) = 0u;
  *((_OWORD *)v30 + 6) = 0u;
  *((_OWORD *)v30 + 3) = 0u;
  *((_OWORD *)v30 + 4) = 0u;
  *((_OWORD *)v30 + 1) = 0u;
  *((_OWORD *)v30 + 2) = 0u;
  *(_OWORD *)os_log_type_t v30 = 0u;
  v30[2] = identifier;
  if (nw_protocol_webtransport_stream_callbacks(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_webtransport_stream_callbacks(void)::onceToken, &__block_literal_global_22);
  }
  v30[3] = &nw_protocol_webtransport_stream_callbacks(void)::protocol_callbacks;
  v30[5] = v30;
  v30[9] = 0;
  v30[10] = v30 + 9;
  v30[11] = handle;
  uint32_t v31 = os_retain(v11);
  char v32 = *((unsigned char *)v30 + 136);
  if (v32)
  {
    BOOL v33 = (void *)v30[16];
    if (v33)
    {
      os_release(v33);
      char v32 = *((unsigned char *)v30 + 136);
    }
  }
  v30[16] = v31;
  *((unsigned char *)v30 + 136) = v32 | 1;
  uint64_t v34 = os_retain(v9);
  char v35 = *((unsigned char *)v30 + 152);
  if (v35)
  {
    uint64_t v36 = (void *)v30[18];
    if (v36)
    {
      os_release(v36);
      char v35 = *((unsigned char *)v30 + 152);
    }
  }
  v30[18] = v34;
  *((unsigned char *)v30 + 152) = v35 | 1;
  if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_61090);
  }
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_webtransport_definition::definition);
  char v38 = *((unsigned char *)v30 + 168);
  if (v38)
  {
    uint64_t v39 = (void *)v30[20];
    if (v39)
    {
      os_release(v39);
      char v38 = *((unsigned char *)v30 + 168);
    }
  }
  v30[20] = singleton;
  *((unsigned char *)v30 + 168) = v38 | 1;
  if (nw_path_parameters_get_logging_disabled(v9[13])) {
    char v40 = 16;
  }
  else {
    char v40 = 0;
  }
  *((unsigned char *)v30 + 276) = *((unsigned char *)v30 + 276) & 0xEF | v40;
  v30[8] = -1;
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000;
  uint64_t v348 = (uint64_t)v30;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v337 = 0x40000000;
  v338 = ___ZL38nw_protocol_webtransport_stream_createPK22nw_protocol_identifierP23nw_webtransport_sessionP11nw_endpointP13nw_parameters_block_invoke;
  v339 = &unk_1E5240220;
  v340 = (os_log_type_t *)buf;
  v30[22] = _Block_copy(&aBlock);
  _Block_object_dispose(buf, 8);
  if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      v231 = __nwlog_obj();
      if (os_log_type_enabled(v231, OS_LOG_TYPE_DEBUG))
      {
        if (v30) {
          v232 = (const char *)(v30 + 24);
        }
        else {
          v232 = "";
        }
        v233 = " ";
        if (!v30) {
          v233 = "";
        }
        uint64_t v234 = v30[11];
        if (v234) {
          int v235 = *(_DWORD *)(v234 + 460);
        }
        else {
          int v235 = -1;
        }
        uint64_t v294 = v30[8];
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_create";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v232;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v348 = (uint64_t)v233;
        *(_WORD *)v349 = 1024;
        *(_DWORD *)&v349[2] = v235;
        *(_WORD *)&v349[6] = 2048;
        *(void *)&v349[8] = v294;
        *(_WORD *)&v349[16] = 2048;
        *(void *)&v349[18] = v30;
        _os_log_impl(&dword_1830D4000, v231, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> created WebTransport stream with protocol pointer %p", buf, 0x3Au);
      }
    }
  }
  os_release(v29);
  if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      v236 = __nwlog_obj();
      if (os_log_type_enabled(v236, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v237 = v30[11];
        if (v237) {
          int v238 = *(_DWORD *)(v237 + 460);
        }
        else {
          int v238 = -1;
        }
        uint64_t v295 = v30[8];
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_add_input_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v30 + 24;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v348 = (uint64_t)" ";
        *(_WORD *)v349 = 1024;
        *(_DWORD *)&v349[2] = v238;
        *(_WORD *)&v349[6] = 2048;
        *(void *)&v349[8] = v295;
        _os_log_impl(&dword_1830D4000, v236, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }
  nw_protocol_set_input_handler((uint64_t)v30, (uint64_t)v333);
  *(_OWORD *)os_log_type_t v30 = *(_OWORD *)v333->flow_id;
  nw_protocol_set_output_handler((uint64_t)v333, (uint64_t)v30);
  int v41 = (nw_protocol *)v30[11];
  if (!v41)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_stream_add_input_handler";
    v227 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v343[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v227, &aBlock, v343)) {
      goto LABEL_499;
    }
    if (aBlock == 17)
    {
      v228 = __nwlog_obj();
      os_log_type_t v229 = aBlock;
      if (!os_log_type_enabled(v228, (os_log_type_t)aBlock)) {
        goto LABEL_499;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_add_input_handler";
      v230 = "%{public}s called with null options_protocol";
    }
    else if (v343[0])
    {
      v271 = (char *)__nw_create_backtrace_string();
      v228 = __nwlog_obj();
      os_log_type_t v229 = aBlock;
      BOOL v272 = os_log_type_enabled(v228, (os_log_type_t)aBlock);
      if (v271)
      {
        if (v272)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_add_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v271;
          _os_log_impl(&dword_1830D4000, v228, v229, "%{public}s called with null options_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v271);
        goto LABEL_499;
      }
      if (!v272)
      {
LABEL_499:
        if (v227) {
          free(v227);
        }
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_add_input_handler";
      v230 = "%{public}s called with null options_protocol, no backtrace";
    }
    else
    {
      v228 = __nwlog_obj();
      os_log_type_t v229 = aBlock;
      if (!os_log_type_enabled(v228, (os_log_type_t)aBlock)) {
        goto LABEL_499;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_add_input_handler";
      v230 = "%{public}s called with null options_protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v228, v229, v230, buf, 0xCu);
    goto LABEL_499;
  }
  v42 = (void *)v30[18];
  if (v42)
  {
    if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        v243 = __nwlog_obj();
        if (os_log_type_enabled(v243, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v244 = v30[11];
          if (v244) {
            int v245 = *(_DWORD *)(v244 + 460);
          }
          else {
            int v245 = -1;
          }
          uint64_t v296 = v30[8];
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_replace_protocol_instance";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v30 + 24;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v348 = (uint64_t)" ";
          *(_WORD *)v349 = 1024;
          *(_DWORD *)&v349[2] = v245;
          *(_WORD *)&v349[6] = 2048;
          *(void *)&v349[8] = v296;
          _os_log_impl(&dword_1830D4000, v243, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }
    v43 = nw_parameters_copy_protocol_options_legacy(v42, v41);
    if (v43)
    {
      v44 = v43;
      if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          v248 = __nwlog_obj();
          if (os_log_type_enabled(v248, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v249 = v30[11];
            if (v249) {
              int v250 = *(_DWORD *)(v249 + 460);
            }
            else {
              int v250 = -1;
            }
            uint64_t v297 = v30[8];
            *(_DWORD *)buf = 136448514;
            *(void *)&uint8_t buf[4] = "nw_webtransport_stream_replace_protocol_instance";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v30 + 24;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v348 = (uint64_t)" ";
            *(_WORD *)v349 = 1024;
            *(_DWORD *)&v349[2] = v250;
            *(_WORD *)&v349[6] = 2048;
            *(void *)&v349[8] = v297;
            *(_WORD *)&v349[16] = 2048;
            *(void *)&v349[18] = v30;
            *(_WORD *)&v349[26] = 2048;
            v350 = v30;
            __int16 v351 = 2048;
            v352 = v41;
            __int16 v353 = 2048;
            v354 = v42;
            __int16 v355 = 2048;
            v356 = v44;
            _os_log_impl(&dword_1830D4000, v248, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> webtransport_stream protocol %p, set protocol instance to %p instead of %p in parameters %p options %p", buf, 0x62u);
          }
        }
      }
      if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_61090);
      }
      id v45 = (id)nw_protocol_copy_webtransport_definition::definition;
      uint64_t v46 = v44;
      *((void *)v46 + 2) = v30;

      if (v45) {
        os_release(v45);
      }
      os_release(v46);
    }
    goto LABEL_69;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_webtransport_stream_replace_protocol_instance";
  v239 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(aBlock) = 16;
  v343[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v239, &aBlock, v343))
  {
    if (aBlock == 17)
    {
      v240 = __nwlog_obj();
      os_log_type_t v241 = aBlock;
      if (!os_log_type_enabled(v240, (os_log_type_t)aBlock)) {
        goto LABEL_504;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_replace_protocol_instance";
      v242 = "%{public}s called with null parameters";
      goto LABEL_503;
    }
    if (v343[0] == OS_LOG_TYPE_DEFAULT)
    {
      v240 = __nwlog_obj();
      os_log_type_t v241 = aBlock;
      if (!os_log_type_enabled(v240, (os_log_type_t)aBlock)) {
        goto LABEL_504;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_replace_protocol_instance";
      v242 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_503;
    }
    v273 = (char *)__nw_create_backtrace_string();
    v240 = __nwlog_obj();
    os_log_type_t v241 = aBlock;
    BOOL v274 = os_log_type_enabled(v240, (os_log_type_t)aBlock);
    if (v273)
    {
      if (v274)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_replace_protocol_instance";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v273;
        _os_log_impl(&dword_1830D4000, v240, v241, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v273);
      goto LABEL_504;
    }
    if (v274)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_replace_protocol_instance";
      v242 = "%{public}s called with null parameters, no backtrace";
LABEL_503:
      _os_log_impl(&dword_1830D4000, v240, v241, v242, buf, 0xCu);
    }
  }
LABEL_504:
  if (v239) {
    free(v239);
  }
LABEL_69:
  v47 = nw_parameters_copy_protocol_options_legacy((void *)v30[18], (nw_protocol *)v30);
  if (v47)
  {
    v48 = v47;
    v49 = v48;
    uint64_t v50 = 0;
    *((unsigned char *)v30 + 192) = 0;
    int v51 = (char *)(v30 + 24);
    unint64_t v52 = 84;
    while (1)
    {
      int v53 = v48[v50 + 48];
      v51[v50] = v53;
      if (!v53) {
        break;
      }
      --v52;
      ++v50;
      if (v52 <= 1)
      {
        v51[v50] = 0;
        break;
      }
    }

    os_release(v49);
  }
  else if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v58 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v59 = v30[11];
      if (v59) {
        int v60 = *(_DWORD *)(v59 + 460);
      }
      else {
        int v60 = -1;
      }
      uint64_t v67 = v30[8];
      v68 = (void *)v30[18];
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_add_input_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v30 + 24;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v348 = (uint64_t)" ";
      *(_WORD *)v349 = 1024;
      *(_DWORD *)&v349[2] = v60;
      *(_WORD *)&v349[6] = 2048;
      *(void *)&v349[8] = v67;
      *(_WORD *)&v349[16] = 2048;
      *(void *)&v349[18] = v30;
      *(_WORD *)&v349[26] = 2048;
      v350 = v68;
      _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> Failed to access options for protocol %p, parameters %p", buf, 0x44u);
    }
  }
LABEL_99:
  if (!*((void *)handle + 6))
  {
    nw_protocol_set_input_handler((uint64_t)handle, (uint64_t)v30);
    *(_OWORD *)handle = *(_OWORD *)v333->flow_id;
    if ((handle[137] & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v69 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        int v70 = handle[115];
        uint64_t v71 = *((void *)handle + 6);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 116;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v348 = (uint64_t)" ";
        *(_WORD *)v349 = 1024;
        *(_DWORD *)&v349[2] = v70;
        *(_WORD *)&v349[6] = 2048;
        *(void *)&v349[8] = v71;
        _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Set session default_input_handler: %p", buf, 0x30u);
      }
    }
  }
  unsigned int v72 = handle[137] & 0x20;
  int v73 = handle[112];
  if (v73 != 1)
  {
    if (!v73)
    {
      if (v29)
      {
        if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
        {
          if (gLogDatapath)
          {
            v265 = __nwlog_obj();
            if (os_log_type_enabled(v265, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v266 = v30[11];
              if (v266) {
                int v267 = *(_DWORD *)(v266 + 460);
              }
              else {
                int v267 = -1;
              }
              uint64_t v299 = v30[8];
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_webtransport_http2_stream_reconfigure_and_start";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v30 + 24;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v348 = (uint64_t)" ";
              *(_WORD *)v349 = 1024;
              *(_DWORD *)&v349[2] = v267;
              *(_WORD *)&v349[6] = 2048;
              *(void *)&v349[8] = v299;
              *(_WORD *)&v349[16] = 2048;
              *(void *)&v349[18] = v30;
              *(_WORD *)&v349[26] = 1024;
              LODWORD(v350) = v72 >> 5;
              _os_log_impl(&dword_1830D4000, v265, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> Reconfiguring HTTP2 stream with protocol: %p, peer_initiated: %u", buf, 0x40u);
            }
          }
        }
        uint64_t v74 = v30[11];
        if (*(void **)(v74 + 416) == v30)
        {
          if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
          {
            if (gLogDatapath)
            {
              v287 = __nwlog_obj();
              if (os_log_type_enabled(v287, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v288 = v30[11];
                if (v288) {
                  int v289 = *(_DWORD *)(v288 + 460);
                }
                else {
                  int v289 = -1;
                }
                uint64_t v317 = v30[8];
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_webtransport_http2_stream_reconfigure_and_start";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v30 + 24;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v348 = (uint64_t)" ";
                *(_WORD *)v349 = 1024;
                *(_DWORD *)&v349[2] = v289;
                *(_WORD *)&v349[6] = 2048;
                *(void *)&v349[8] = v317;
                _os_log_impl(&dword_1830D4000, v287, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> Returning without more reconfiguration for placeholder stream", buf, 0x30u);
              }
            }
          }
          nw_protocol_connected((void *)v30[6], (uint64_t)v30);
          goto LABEL_257;
        }
        if (nw_protocol_webtransport_http2_stream_callbacks(void)::onceToken != -1) {
          dispatch_once(&nw_protocol_webtransport_http2_stream_callbacks(void)::onceToken, &__block_literal_global_34);
        }
        v30[3] = &nw_protocol_webtransport_http2_stream_callbacks(void)::protocol_callbacks;
        nw_protocol_set_output_handler((uint64_t)v30, v74);
        v75 = nw_parameters_copy_protocol_options_legacy((void *)v30[18], (nw_protocol *)v30);
        if (!v75)
        {
          if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v103 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              uint64_t v104 = v30[11];
              if (v104) {
                int v105 = *(_DWORD *)(v104 + 460);
              }
              else {
                int v105 = -1;
              }
              uint64_t v142 = v30[8];
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_webtransport_http2_stream_reconfigure_and_start";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v30 + 24;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v348 = (uint64_t)" ";
              *(_WORD *)v349 = 1024;
              *(_DWORD *)&v349[2] = v105;
              *(_WORD *)&v349[6] = 2048;
              *(void *)&v349[8] = v142;
              _os_log_impl(&dword_1830D4000, v103, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> Could not find options for stream when reconfiguring", buf, 0x30u);
            }
          }
          goto LABEL_257;
        }
        os_log_type_t v76 = v75;
        if (v72)
        {
          if ((*((unsigned char *)v30 + 276) & 0x10) != 0) {
            goto LABEL_256;
          }
          if (!gLogDatapath) {
            goto LABEL_256;
          }
          BOOL v106 = __nwlog_obj();
          if (!os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_256;
          }
          uint64_t v107 = v30[11];
          if (v107) {
            int v108 = *(_DWORD *)(v107 + 460);
          }
          else {
            int v108 = -1;
          }
          uint64_t v318 = v30[8];
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http2_stream_reconfigure_and_start";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v30 + 24;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v348 = (uint64_t)" ";
          *(_WORD *)v349 = 1024;
          *(_DWORD *)&v349[2] = v108;
          *(_WORD *)&v349[6] = 2048;
          *(void *)&v349[8] = v318;
          v165 = "%{public}s %{public}s%s<i%u:s%lld> Waiting for connected callback and stream ID assignment to setup metadata";
          v166 = v106;
          os_log_type_t v167 = OS_LOG_TYPE_DEBUG;
        }
        else
        {
          if (nw_protocol_options_is_webtransport(v75))
          {
            *((unsigned char *)v30 + 276) = *((unsigned char *)v30 + 276) & 0xFC | 1;
            if (nw_webtransport_options_get_is_datagram(v76)) {
              char v77 = 8;
            }
            else {
              char v77 = 0;
            }
            *((unsigned char *)v30 + 276) = *((unsigned char *)v30 + 276) & 0xF7 | v77;
            BOOL is_unidirectional = nw_webtransport_options_get_is_unidirectional(v76);
            char v79 = *((unsigned char *)v30 + 276);
            if (is_unidirectional) {
              char v80 = 4;
            }
            else {
              char v80 = 0;
            }
            *((unsigned char *)v30 + 276) = v79 & 0xFB | v80;
            if ((v79 & 0x10) == 0)
            {
              v81 = __nwlog_obj();
              if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
              {
                uint64_t v82 = v30[11];
                if (v82) {
                  int v83 = *(_DWORD *)(v82 + 460);
                }
                else {
                  int v83 = -1;
                }
                uint64_t v160 = v30[8];
                unsigned int v161 = *((unsigned __int8 *)v30 + 276);
                *(_DWORD *)buf = 136448002;
                *(void *)&uint8_t buf[4] = "nw_webtransport_stream_configure_metadata_with_options";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v30 + 24;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v348 = (uint64_t)" ";
                *(_WORD *)v349 = 1024;
                *(_DWORD *)&v349[2] = v83;
                *(_WORD *)&v349[6] = 2048;
                *(void *)&v349[8] = v160;
                *(_WORD *)&v349[16] = 1024;
                *(_DWORD *)&v349[18] = (v161 >> 1) & 1;
                *(_WORD *)&v349[22] = 1024;
                *(_DWORD *)&v349[24] = (v161 >> 3) & 1;
                LOWORD(v350) = 1024;
                *(_DWORD *)((char *)&v350 + 2) = (v161 >> 2) & 1;
                _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> Configuring metadata with flags: peer_initiated: %u, datagram: %u, unidirectional: %u", buf, 0x42u);
              }
            }
            nw_webtransport_metadata_set_is_peer_initiated((void *)v30[20], (*((unsigned char *)v30 + 276) & 2) != 0);
            nw_webtransport_metadata_set_is_datagram((void *)v30[20], (*((unsigned char *)v30 + 276) & 8) != 0);
            nw_webtransport_metadata_set_is_unidirectional((void *)v30[20], (*((unsigned char *)v30 + 276) & 4) != 0);
            goto LABEL_256;
          }
          if ((*((unsigned char *)v30 + 276) & 0x10) != 0
            || (v131 = __nwlog_obj(), !os_log_type_enabled(v131, OS_LOG_TYPE_ERROR)))
          {
LABEL_256:
            os_release(v76);
LABEL_257:
            nw_protocol_connected(v30, (uint64_t)handle);
            goto LABEL_590;
          }
          uint64_t v132 = v30[11];
          if (v132) {
            int v133 = *(_DWORD *)(v132 + 460);
          }
          else {
            int v133 = -1;
          }
          uint64_t v164 = v30[8];
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_configure_metadata_with_options";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v30 + 24;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v348 = (uint64_t)" ";
          *(_WORD *)v349 = 1024;
          *(_DWORD *)&v349[2] = v133;
          *(_WORD *)&v349[6] = 2048;
          *(void *)&v349[8] = v164;
          v165 = "%{public}s %{public}s%s<i%u:s%lld> Invalid protocol options for webtransport stream";
          v166 = v131;
          os_log_type_t v167 = OS_LOG_TYPE_ERROR;
        }
        _os_log_impl(&dword_1830D4000, v166, v167, v165, buf, 0x30u);
        goto LABEL_256;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http2_stream_reconfigure_and_start";
      v255 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(aBlock) = 16;
      v343[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v255, &aBlock, v343))
      {
        if (aBlock == 17)
        {
          v256 = __nwlog_obj();
          os_log_type_t v257 = aBlock;
          if (!os_log_type_enabled(v256, (os_log_type_t)aBlock)) {
            goto LABEL_544;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http2_stream_reconfigure_and_start";
          v258 = "%{public}s called with null webtransport_stream";
          goto LABEL_543;
        }
        if (v343[0] == OS_LOG_TYPE_DEFAULT)
        {
          v256 = __nwlog_obj();
          os_log_type_t v257 = aBlock;
          if (!os_log_type_enabled(v256, (os_log_type_t)aBlock)) {
            goto LABEL_544;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http2_stream_reconfigure_and_start";
          v258 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
          goto LABEL_543;
        }
        v278 = (char *)__nw_create_backtrace_string();
        v256 = __nwlog_obj();
        os_log_type_t v257 = aBlock;
        BOOL v279 = os_log_type_enabled(v256, (os_log_type_t)aBlock);
        if (v278)
        {
          if (v279)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_webtransport_http2_stream_reconfigure_and_start";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v278;
            _os_log_impl(&dword_1830D4000, v256, v257, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v278);
          goto LABEL_544;
        }
        if (v279)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http2_stream_reconfigure_and_start";
          v258 = "%{public}s called with null webtransport_stream, no backtrace";
LABEL_543:
          _os_log_impl(&dword_1830D4000, v256, v257, v258, buf, 0xCu);
        }
      }
LABEL_544:
      if (v255) {
        free(v255);
      }
      goto LABEL_257;
    }
    if (v29)
    {
      if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          v268 = __nwlog_obj();
          if (os_log_type_enabled(v268, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v269 = v30[11];
            if (v269) {
              int v270 = *(_DWORD *)(v269 + 460);
            }
            else {
              int v270 = -1;
            }
            uint64_t v300 = v30[8];
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v30 + 24;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v348 = (uint64_t)" ";
            *(_WORD *)v349 = 1024;
            *(_DWORD *)&v349[2] = v270;
            *(_WORD *)&v349[6] = 2048;
            *(void *)&v349[8] = v300;
            *(_WORD *)&v349[16] = 2048;
            *(void *)&v349[18] = v30;
            _os_log_impl(&dword_1830D4000, v268, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called for stream (%p)", buf, 0x3Au);
          }
        }
      }
      if ((*((unsigned char *)v30 + 276) & 0x20) == 0)
      {
        v30[14] = 0;
        uint64_t v88 = (void *)*((void *)handle + 42);
        v30[15] = v88;
        *uint64_t v88 = v30;
        *((void *)handle + 42) = v30 + 14;
        uint64_t v89 = handle[114] + 1;
        uint64_t v90 = v89 << 31 >> 31;
        handle[114] = v89;
        if (v90 == v89 && (v90 & 0x8000000000000000) == 0)
        {
LABEL_241:
          char v157 = *((unsigned char *)v30 + 276);
          *((unsigned char *)v30 + 276) = v157 | 0x20;
          if ((v157 & 0x10) == 0)
          {
            if (gLogDatapath)
            {
              v284 = __nwlog_obj();
              if (os_log_type_enabled(v284, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v285 = v30[11];
                if (v285) {
                  int v286 = *(_DWORD *)(v285 + 460);
                }
                else {
                  int v286 = -1;
                }
                uint64_t v309 = v30[8];
                int v310 = handle[114];
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v30 + 24;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v348 = (uint64_t)" ";
                *(_WORD *)v349 = 1024;
                *(_DWORD *)&v349[2] = v286;
                *(_WORD *)&v349[6] = 2048;
                *(void *)&v349[8] = v309;
                *(_WORD *)&v349[16] = 2048;
                *(void *)&v349[18] = v30;
                *(_WORD *)&v349[26] = 1024;
                LODWORD(v350) = v310;
                _os_log_impl(&dword_1830D4000, v284, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> added stream (%p), now have %u pending streams", buf, 0x40u);
              }
            }
          }
          goto LABEL_243;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v91 = handle[114];
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = "webtransport_session->pending_stream_count";
        *(_WORD *)&buf[22] = 2048;
        uint64_t v348 = 1;
        *(_WORD *)v349 = 2048;
        *(void *)&v349[2] = v91;
        uint64_t v92 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(aBlock) = 16;
        v343[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v92, &aBlock, v343))
        {
          if (aBlock == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v93 = gLogObj;
            os_log_type_t v94 = aBlock;
            if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock))
            {
              uint64_t v95 = handle[114];
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = "webtransport_session->pending_stream_count";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v348 = 1;
              *(_WORD *)v349 = 2048;
              *(void *)&v349[2] = v95;
              v96 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_237:
              _os_log_impl(&dword_1830D4000, v93, v94, v96, buf, 0x2Au);
            }
          }
          else if (v343[0])
          {
            int v128 = (char *)__nw_create_backtrace_string();
            char v93 = __nwlog_obj();
            os_log_type_t v94 = aBlock;
            BOOL v129 = os_log_type_enabled(v93, (os_log_type_t)aBlock);
            if (v128)
            {
              if (v129)
              {
                uint64_t v130 = handle[114];
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = "webtransport_session->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v348 = 1;
                *(_WORD *)v349 = 2048;
                *(void *)&v349[2] = v130;
                *(_WORD *)&v349[10] = 2082;
                *(void *)&v349[12] = v128;
                _os_log_impl(&dword_1830D4000, v93, v94, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v128);
              goto LABEL_238;
            }
            if (v129)
            {
              uint64_t v156 = handle[114];
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = "webtransport_session->pending_stream_count";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v348 = 1;
              *(_WORD *)v349 = 2048;
              *(void *)&v349[2] = v156;
              v96 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_237;
            }
          }
          else
          {
            char v93 = __nwlog_obj();
            os_log_type_t v94 = aBlock;
            if (os_log_type_enabled(v93, (os_log_type_t)aBlock))
            {
              uint64_t v141 = handle[114];
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = "webtransport_session->pending_stream_count";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v348 = 1;
              *(_WORD *)v349 = 2048;
              *(void *)&v349[2] = v141;
              v96 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_237;
            }
          }
        }
LABEL_238:
        if (v92) {
          free(v92);
        }
        handle[114] = -1;
        goto LABEL_241;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v30;
      v97 = (void *)_os_log_send_and_compose_impl();
      LOBYTE(aBlock) = 16;
      v343[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault((const char *)v97, &aBlock, v343))
      {
        if (aBlock == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v98 = gLogObj;
          os_log_type_t v99 = aBlock;
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock)) {
            goto LABEL_213;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v30;
          v100 = "%{public}s stream %p already in pending list, cannot add again";
          goto LABEL_211;
        }
        if (v343[0] == OS_LOG_TYPE_DEFAULT)
        {
          v98 = __nwlog_obj();
          os_log_type_t v99 = aBlock;
          if (!os_log_type_enabled(v98, (os_log_type_t)aBlock)) {
            goto LABEL_213;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v30;
          v100 = "%{public}s stream %p already in pending list, cannot add again, backtrace limit exceeded";
          goto LABEL_211;
        }
        os_log_type_t v101 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v98 = gLogObj;
        os_log_type_t v99 = aBlock;
        BOOL v102 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock);
        if (v101)
        {
          if (v102)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v30;
            *(_WORD *)&buf[22] = 2082;
            uint64_t v348 = (uint64_t)v101;
            _os_log_impl(&dword_1830D4000, v98, v99, "%{public}s stream %p already in pending list, cannot add again, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v101);
          if (!v97) {
            goto LABEL_243;
          }
LABEL_214:
          free(v97);
LABEL_243:
          if ((handle[137] & 2) != 0) {
            goto LABEL_590;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v158 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
            goto LABEL_590;
          }
          int v159 = handle[115];
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 116;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v348 = (uint64_t)" ";
          *(_WORD *)v349 = 1024;
          *(_DWORD *)&v349[2] = v159;
          v144 = "%{public}s %{public}s%s<i%u> Not reconfiguring stream, no transport mode determined yet";
          uint64_t v145 = v158;
          os_log_type_t v146 = OS_LOG_TYPE_INFO;
          uint32_t v147 = 38;
          goto LABEL_246;
        }
        if (v102)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v30;
          v100 = "%{public}s stream %p already in pending list, cannot add again, no backtrace";
LABEL_211:
          uint64_t v138 = v98;
          os_log_type_t v139 = v99;
          uint32_t v140 = 22;
LABEL_212:
          _os_log_impl(&dword_1830D4000, v138, v139, v100, buf, v140);
        }
      }
LABEL_213:
      if (!v97) {
        goto LABEL_243;
      }
      goto LABEL_214;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
    v97 = (void *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v343[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v97, &aBlock, v343)) {
      goto LABEL_213;
    }
    if (aBlock == 17)
    {
      v263 = __nwlog_obj();
      os_log_type_t v264 = aBlock;
      if (!os_log_type_enabled(v263, (os_log_type_t)aBlock)) {
        goto LABEL_213;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
      v100 = "%{public}s called with null webtransport_stream";
    }
    else if (v343[0])
    {
      v282 = (char *)__nw_create_backtrace_string();
      v263 = __nwlog_obj();
      os_log_type_t v264 = aBlock;
      BOOL v283 = os_log_type_enabled(v263, (os_log_type_t)aBlock);
      if (v282)
      {
        if (v283)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v282;
          _os_log_impl(&dword_1830D4000, v263, v264, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v282);
        goto LABEL_213;
      }
      if (!v283) {
        goto LABEL_213;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
      v100 = "%{public}s called with null webtransport_stream, no backtrace";
    }
    else
    {
      v263 = __nwlog_obj();
      os_log_type_t v264 = aBlock;
      if (!os_log_type_enabled(v263, (os_log_type_t)aBlock)) {
        goto LABEL_213;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
      v100 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    }
    uint64_t v138 = v263;
    os_log_type_t v139 = v264;
    uint32_t v140 = 12;
    goto LABEL_212;
  }
  if (!v29)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
    v259 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v343[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v259, &aBlock, v343)) {
      goto LABEL_549;
    }
    if (aBlock == 17)
    {
      v260 = __nwlog_obj();
      os_log_type_t v261 = aBlock;
      if (!os_log_type_enabled(v260, (os_log_type_t)aBlock)) {
        goto LABEL_549;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
      v262 = "%{public}s called with null webtransport_stream";
    }
    else if (v343[0])
    {
      v280 = (char *)__nw_create_backtrace_string();
      v260 = __nwlog_obj();
      os_log_type_t v261 = aBlock;
      BOOL v281 = os_log_type_enabled(v260, (os_log_type_t)aBlock);
      if (v280)
      {
        if (v281)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v280;
          _os_log_impl(&dword_1830D4000, v260, v261, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v280);
        goto LABEL_549;
      }
      if (!v281)
      {
LABEL_549:
        if (v259) {
          free(v259);
        }
        goto LABEL_590;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
      v262 = "%{public}s called with null webtransport_stream, no backtrace";
    }
    else
    {
      v260 = __nwlog_obj();
      os_log_type_t v261 = aBlock;
      if (!os_log_type_enabled(v260, (os_log_type_t)aBlock)) {
        goto LABEL_549;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
      v262 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v260, v261, v262, buf, 0xCu);
    goto LABEL_549;
  }
  uint64_t v84 = v30[11];
  if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v85 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v86 = v30[11];
      if (v86) {
        int v87 = *(_DWORD *)(v86 + 460);
      }
      else {
        int v87 = -1;
      }
      uint64_t v109 = v30[8];
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v30 + 24;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v348 = (uint64_t)" ";
      *(_WORD *)v349 = 1024;
      *(_DWORD *)&v349[2] = v87;
      *(_WORD *)&v349[6] = 2048;
      *(void *)&v349[8] = v109;
      *(_WORD *)&v349[16] = 2048;
      *(void *)&v349[18] = v30;
      *(_WORD *)&v349[26] = 1024;
      LODWORD(v350) = v72 >> 5;
      _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> Reconfiguring HTTP3 stream with protocol: %p, peer_initiated: %u", buf, 0x40u);
    }
  }
  if (*(void **)(v84 + 416) == v30)
  {
    if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v119 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v120 = v30[11];
        if (v120) {
          int v121 = *(_DWORD *)(v120 + 460);
        }
        else {
          int v121 = -1;
        }
        uint64_t v137 = v30[8];
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v30 + 24;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v348 = (uint64_t)" ";
        *(_WORD *)v349 = 1024;
        *(_DWORD *)&v349[2] = v121;
        *(_WORD *)&v349[6] = 2048;
        *(void *)&v349[8] = v137;
        _os_log_impl(&dword_1830D4000, v119, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> Returning connected without more reconfiguration for placeholder stream", buf, 0x30u);
      }
    }
    nw_protocol_connected((void *)v30[6], (uint64_t)v30);
    goto LABEL_590;
  }
  v110 = nw_parameters_copy_protocol_options_legacy((void *)v30[18], (nw_protocol *)v30);
  if (!v110)
  {
    if ((*((unsigned char *)v30 + 276) & 0x10) != 0) {
      goto LABEL_590;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v122 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_590;
    }
    uint64_t v123 = v30[11];
    if (v123) {
      int v124 = *(_DWORD *)(v123 + 460);
    }
    else {
      int v124 = -1;
    }
    uint64_t v143 = v30[8];
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v30 + 24;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v348 = (uint64_t)" ";
    *(_WORD *)v349 = 1024;
    *(_DWORD *)&v349[2] = v124;
    *(_WORD *)&v349[6] = 2048;
    *(void *)&v349[8] = v143;
    v144 = "%{public}s %{public}s%s<i%u:s%lld> Could not find options for stream when reconfiguring";
    uint64_t v145 = v122;
    os_log_type_t v146 = OS_LOG_TYPE_ERROR;
    uint32_t v147 = 48;
LABEL_246:
    _os_log_impl(&dword_1830D4000, v145, v146, v144, buf, v147);
    goto LABEL_590;
  }
  v111 = v110;
  if (nw_protocol_webtransport_http3_stream_callbacks(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_webtransport_http3_stream_callbacks(void)::onceToken, &__block_literal_global_49);
  }
  v30[3] = &nw_protocol_webtransport_http3_stream_callbacks(void)::protocol_callbacks;
  if (v72)
  {
    if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v125 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v126 = v30[11];
        if (v126) {
          int v127 = *(_DWORD *)(v126 + 460);
        }
        else {
          int v127 = -1;
        }
        uint64_t v148 = v30[8];
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v30 + 24;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v348 = (uint64_t)" ";
        *(_WORD *)v349 = 1024;
        *(_DWORD *)&v349[2] = v127;
        *(_WORD *)&v349[6] = 2048;
        *(void *)&v349[8] = v148;
        _os_log_impl(&dword_1830D4000, v125, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> Preemptively configuring metadata with incoming stream ID", buf, 0x30u);
      }
    }
    if (*(void *)(v84 + 176) != -1)
    {
      if (v30[8] == -1)
      {
        uint64_t v152 = *(void *)(v30[11] + 176);
        if (v152 == -1)
        {
          if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
          {
            v172 = __nwlog_obj();
            if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
            {
              uint64_t v173 = v30[11];
              if (v173) {
                int v174 = *(_DWORD *)(v173 + 460);
              }
              else {
                int v174 = -1;
              }
              uint64_t v178 = v30[8];
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_assign_stream_id";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v30 + 24;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v348 = (uint64_t)" ";
              *(_WORD *)v349 = 1024;
              *(_DWORD *)&v349[2] = v174;
              *(_WORD *)&v349[6] = 2048;
              *(void *)&v349[8] = v178;
              _os_log_impl(&dword_1830D4000, v172, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> Failed to get stream ID for HTTP/3 webtransport stream, failing", buf, 0x30u);
            }
          }
          v179 = (void *)v30[6];
          nw_protocol_error(v179, (uint64_t)v30);
          nw_protocol_disconnected(v179, (uint64_t)v30);
        }
        else
        {
          v30[8] = v152;
          nw_webtransport_metadata_set_stream_id((void *)v30[20], v152);
          if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
          {
            uint64_t v153 = __nwlog_obj();
            if (os_log_type_enabled(v153, OS_LOG_TYPE_INFO))
            {
              uint64_t v154 = v30[11];
              if (v154) {
                int v155 = *(_DWORD *)(v154 + 460);
              }
              else {
                int v155 = -1;
              }
              uint64_t v177 = v30[8];
              *(_DWORD *)buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_assign_stream_id";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v30 + 24;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v348 = (uint64_t)" ";
              *(_WORD *)v349 = 1024;
              *(_DWORD *)&v349[2] = v155;
              *(_WORD *)&v349[6] = 2048;
              *(void *)&v349[8] = v177;
              *(_WORD *)&v349[16] = 2048;
              *(void *)&v349[18] = v177;
              *(_WORD *)&v349[26] = 2048;
              v350 = v30;
              __int16 v351 = 1024;
              LODWORD(v352) = 1;
              _os_log_impl(&dword_1830D4000, v153, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> Assigned stream ID: %llu to stream with protocol %p, incoming: %u", buf, 0x4Au);
            }
          }
        }
      }
      else if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          v149 = __nwlog_obj();
          if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v150 = v30[11];
            if (v150) {
              int v151 = *(_DWORD *)(v150 + 460);
            }
            else {
              int v151 = -1;
            }
            uint64_t v329 = v30[8];
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_assign_stream_id";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v30 + 24;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v348 = (uint64_t)" ";
            *(_WORD *)v349 = 1024;
            *(_DWORD *)&v349[2] = v151;
            *(_WORD *)&v349[6] = 2048;
            *(void *)&v349[8] = v329;
            *(_WORD *)&v349[16] = 2048;
            *(void *)&v349[18] = v329;
            _os_log_impl(&dword_1830D4000, v149, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> Stream ID %llu already set, skipping", buf, 0x3Au);
          }
        }
      }
      uint64_t v180 = v30[8];
      char v181 = *((unsigned char *)v30 + 276);
      if (v180 == -1)
      {
        if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
        {
          v185 = __nwlog_obj();
          if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
          {
            uint64_t v186 = v30[11];
            if (v186) {
              int v187 = *(_DWORD *)(v186 + 460);
            }
            else {
              int v187 = -1;
            }
            uint64_t v190 = v30[8];
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_webtransport_stream_configure_metadata_with_stream_id";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v30 + 24;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v348 = (uint64_t)" ";
            *(_WORD *)v349 = 1024;
            *(_DWORD *)&v349[2] = v187;
            *(_WORD *)&v349[6] = 2048;
            *(void *)&v349[8] = v190;
            _os_log_impl(&dword_1830D4000, v185, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> Not configuring webtransport stream metadata with no stream ID set", buf, 0x30u);
          }
        }
      }
      else
      {
        *((unsigned char *)v30 + 276) = v181 & 0xF0 | (4 * ((v180 & 2) != 0)) | 3;
        if ((v181 & 0x10) == 0)
        {
          v182 = __nwlog_obj();
          if (os_log_type_enabled(v182, OS_LOG_TYPE_INFO))
          {
            uint64_t v183 = v30[11];
            if (v183) {
              int v184 = *(_DWORD *)(v183 + 460);
            }
            else {
              int v184 = -1;
            }
            uint64_t v188 = v30[8];
            unsigned int v189 = *((unsigned __int8 *)v30 + 276);
            *(_DWORD *)buf = 136448002;
            *(void *)&uint8_t buf[4] = "nw_webtransport_stream_configure_metadata_with_stream_id";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v30 + 24;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v348 = (uint64_t)" ";
            *(_WORD *)v349 = 1024;
            *(_DWORD *)&v349[2] = v184;
            *(_WORD *)&v349[6] = 2048;
            *(void *)&v349[8] = v188;
            *(_WORD *)&v349[16] = 1024;
            *(_DWORD *)&v349[18] = (v189 >> 1) & 1;
            *(_WORD *)&v349[22] = 1024;
            *(_DWORD *)&v349[24] = (v189 >> 3) & 1;
            LOWORD(v350) = 1024;
            *(_DWORD *)((char *)&v350 + 2) = (v189 >> 2) & 1;
            _os_log_impl(&dword_1830D4000, v182, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> Configuring metadata with flags: peer_initiated: %u, datagram: %u, unidirectional: %u", buf, 0x42u);
          }
        }
        nw_webtransport_metadata_set_is_peer_initiated((void *)v30[20], (*((unsigned char *)v30 + 276) & 2) != 0);
        nw_webtransport_metadata_set_is_datagram((void *)v30[20], (*((unsigned char *)v30 + 276) & 8) != 0);
        nw_webtransport_metadata_set_is_unidirectional((void *)v30[20], (*((unsigned char *)v30 + 276) & 4) != 0);
      }
    }
    if ((*((unsigned char *)v30 + 276) & 0x40) != 0) {
      goto LABEL_296;
    }
LABEL_295:
    nw_webtransport_http3_stream_fix_http_parameters(v84, (uint64_t)v30);
    goto LABEL_296;
  }
  if (nw_protocol_options_is_webtransport(v111))
  {
    *((unsigned char *)v30 + 276) = *((unsigned char *)v30 + 276) & 0xFC | 1;
    if (nw_webtransport_options_get_is_datagram(v111)) {
      char v112 = 8;
    }
    else {
      char v112 = 0;
    }
    *((unsigned char *)v30 + 276) = *((unsigned char *)v30 + 276) & 0xF7 | v112;
    BOOL v113 = nw_webtransport_options_get_is_unidirectional(v111);
    char v114 = *((unsigned char *)v30 + 276);
    if (v113) {
      char v115 = 4;
    }
    else {
      char v115 = 0;
    }
    *((unsigned char *)v30 + 276) = v114 & 0xFB | v115;
    if ((v114 & 0x10) == 0)
    {
      v116 = __nwlog_obj();
      if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
      {
        uint64_t v117 = v30[11];
        if (v117) {
          int v118 = *(_DWORD *)(v117 + 460);
        }
        else {
          int v118 = -1;
        }
        uint64_t v162 = v30[8];
        unsigned int v163 = *((unsigned __int8 *)v30 + 276);
        *(_DWORD *)buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_configure_metadata_with_options";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v30 + 24;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v348 = (uint64_t)" ";
        *(_WORD *)v349 = 1024;
        *(_DWORD *)&v349[2] = v118;
        *(_WORD *)&v349[6] = 2048;
        *(void *)&v349[8] = v162;
        *(_WORD *)&v349[16] = 1024;
        *(_DWORD *)&v349[18] = (v163 >> 1) & 1;
        *(_WORD *)&v349[22] = 1024;
        *(_DWORD *)&v349[24] = (v163 >> 3) & 1;
        LOWORD(v350) = 1024;
        *(_DWORD *)((char *)&v350 + 2) = (v163 >> 2) & 1;
        _os_log_impl(&dword_1830D4000, v116, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> Configuring metadata with flags: peer_initiated: %u, datagram: %u, unidirectional: %u", buf, 0x42u);
      }
    }
    nw_webtransport_metadata_set_is_peer_initiated((void *)v30[20], (*((unsigned char *)v30 + 276) & 2) != 0);
    nw_webtransport_metadata_set_is_datagram((void *)v30[20], (*((unsigned char *)v30 + 276) & 8) != 0);
    nw_webtransport_metadata_set_is_unidirectional((void *)v30[20], (*((unsigned char *)v30 + 276) & 4) != 0);
  }
  else if ((*((unsigned char *)v30 + 276) & 0x10) == 0)
  {
    uint64_t v134 = __nwlog_obj();
    if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
    {
      uint64_t v135 = v30[11];
      if (v135) {
        int v136 = *(_DWORD *)(v135 + 460);
      }
      else {
        int v136 = -1;
      }
      uint64_t v168 = v30[8];
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_configure_metadata_with_options";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v30 + 24;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v348 = (uint64_t)" ";
      *(_WORD *)v349 = 1024;
      *(_DWORD *)&v349[2] = v136;
      *(_WORD *)&v349[6] = 2048;
      *(void *)&v349[8] = v168;
      _os_log_impl(&dword_1830D4000, v134, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> Invalid protocol options for webtransport stream", buf, 0x30u);
    }
  }
  if ((*((unsigned char *)v30 + 276) & 8) != 0)
  {
    nw_protocol_connected(v30, v84);
    goto LABEL_296;
  }
  nw_protocol_set_output_handler((uint64_t)v30, 0);
  v30[7] = 0;
  if (!*(void *)(v84 + 376))
  {
    if ((*((unsigned char *)v30 + 276) & 0x10) != 0) {
      goto LABEL_588;
    }
    v169 = __nwlog_obj();
    if (!os_log_type_enabled(v169, OS_LOG_TYPE_ERROR)) {
      goto LABEL_588;
    }
    uint64_t v170 = v30[11];
    if (v170) {
      int v171 = *(_DWORD *)(v170 + 460);
    }
    else {
      int v171 = -1;
    }
    uint64_t v175 = v30[8];
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v30 + 24;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v348 = (uint64_t)" ";
    *(_WORD *)v349 = 1024;
    *(_DWORD *)&v349[2] = v171;
    *(_WORD *)&v349[6] = 2048;
    *(void *)&v349[8] = v175;
    v176 = "%{public}s %{public}s%s<i%u:s%lld> no http connection metadata when attempting to start webtransport http3 stream";
    goto LABEL_587;
  }
  if ((*((unsigned char *)v30 + 276) & 0x40) == 0) {
    goto LABEL_295;
  }
LABEL_296:
  uint64_t v191 = *(void *)(v84 + 32);
  if (!v191)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
    v290 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v343[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v290, &aBlock, v343)) {
      goto LABEL_579;
    }
    if (aBlock == 17)
    {
      v291 = __nwlog_obj();
      os_log_type_t v292 = aBlock;
      if (!os_log_type_enabled(v291, (os_log_type_t)aBlock)) {
        goto LABEL_579;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
      v293 = "%{public}s called with null transport_protocol";
LABEL_577:
      v319 = v291;
      os_log_type_t v320 = v292;
LABEL_578:
      _os_log_impl(&dword_1830D4000, v319, v320, v293, buf, 0xCu);
      goto LABEL_579;
    }
    if (v343[0] == OS_LOG_TYPE_DEFAULT)
    {
      v291 = __nwlog_obj();
      os_log_type_t v292 = aBlock;
      if (!os_log_type_enabled(v291, (os_log_type_t)aBlock)) {
        goto LABEL_579;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
      v293 = "%{public}s called with null transport_protocol, backtrace limit exceeded";
      goto LABEL_577;
    }
    v301 = (char *)__nw_create_backtrace_string();
    v302 = __nwlog_obj();
    os_log_type_t v303 = aBlock;
    BOOL v304 = os_log_type_enabled(v302, (os_log_type_t)aBlock);
    if (!v301)
    {
      if (!v304) {
        goto LABEL_579;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
      v293 = "%{public}s called with null transport_protocol, no backtrace";
      goto LABEL_604;
    }
    if (v304)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v301;
      _os_log_impl(&dword_1830D4000, v302, v303, "%{public}s called with null transport_protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v301);
LABEL_579:
    if (!v290) {
      goto LABEL_581;
    }
    goto LABEL_580;
  }
  if ((*(unsigned char *)(v84 + 548) & 0x40) != 0)
  {
    v192 = (void *)nw_protocol_get_parameters((uint64_t)v30);
    if (v192)
    {
      v193 = v192;
      nw_parameters_log_protocol_instances(v192);
      v194 = v193;
      v195 = v194[19].isa;

      *(void *)v343 = 0;
      v344 = v343;
      uint64_t v345 = 0x2000000000;
      char v346 = 0;
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3802000000;
      uint64_t v348 = (uint64_t)__Block_byref_object_copy__33867;
      *(void *)v349 = __Block_byref_object_dispose__33868;
      *(void *)&v349[8] = 0;
      v349[16] |= 1u;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v337 = 0x40000000;
      v338 = ___ZL45nw_webtransport_session_add_to_http_messagingP23nw_webtransport_sessionP11nw_protocolS2__block_invoke;
      v339 = &unk_1E5240430;
      v340 = v343;
      v341 = buf;
      v342 = v30;
      nw_protocol_stack_iterate_application_protocols(v195, &aBlock);
      v196 = *(void **)(*(void *)&buf[8] + 40);
      if (v196)
      {
        if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
        }
        id v197 = (id)nw_protocol_copy_http_messaging_definition_definition;
        v198 = v196;
        v198[2] = v191;

        if (v197) {
          os_release(v197);
        }
        v199 = nw_protocol_get_parameters(v191);
        if (!v199) {
          goto LABEL_319;
        }
        v200 = v111;
        v201 = nw_parameters_copy_default_protocol_stack(v199);
        v202 = nw_parameters_copy_default_protocol_stack(v194);
        v203 = nw_protocol_stack_copy_transport_protocol(v201);
        nw_protocol_options_t v204 = nw_protocol_stack_copy_transport_protocol(v202);
        nw_protocol_options_t v205 = v204;
        if (v203)
        {
          if (v204)
          {
            nw_protocol_definition_t v206 = nw_protocol_options_copy_definition(v203);
            if (nw_protocol_options_matches_definition(v205, v206))
            {
              uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v203);
              nw_parameters_set_protocol_instance(v205, v208, protocol_handle);
            }
            os_release(v205);
          }
          nw_protocol_options_t v205 = v203;
        }
        else if (!v204)
        {
LABEL_315:
          if (v202) {
            os_release(v202);
          }
          v111 = v200;
          if (v201) {
            os_release(v201);
          }
LABEL_319:
          nw_protocol_set_output_handler((uint64_t)v30, 0);
          char v209 = nw_protocol_add_input_handler(v191, (uint64_t)v30);
          goto LABEL_320;
        }
        os_release(v205);
        goto LABEL_315;
      }
      v332 = v111;
      __nwlog_obj();
      int v357 = 136446210;
      v358 = "nw_webtransport_session_add_to_http_messaging";
      v305 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v335 = OS_LOG_TYPE_ERROR;
      char v334 = 0;
      if (__nwlog_fault(v305, &v335, &v334))
      {
        if (v335 == OS_LOG_TYPE_FAULT)
        {
          v306 = __nwlog_obj();
          os_log_type_t v307 = v335;
          if (os_log_type_enabled(v306, v335))
          {
            int v357 = 136446210;
            v358 = "nw_webtransport_session_add_to_http_messaging";
            v308 = "%{public}s called with null options";
LABEL_597:
            v327 = v306;
            os_log_type_t v328 = v307;
LABEL_598:
            _os_log_impl(&dword_1830D4000, v327, v328, v308, (uint8_t *)&v357, 0xCu);
          }
        }
        else if (v334)
        {
          v313 = (char *)__nw_create_backtrace_string();
          v314 = __nwlog_obj();
          os_log_type_t v315 = v335;
          BOOL v316 = os_log_type_enabled(v314, v335);
          if (v313)
          {
            if (v316)
            {
              int v357 = 136446466;
              v358 = "nw_webtransport_session_add_to_http_messaging";
              __int16 v359 = 2082;
              v360 = v313;
              _os_log_impl(&dword_1830D4000, v314, v315, "%{public}s called with null options, dumping backtrace:%{public}s", (uint8_t *)&v357, 0x16u);
            }
            free(v313);
            goto LABEL_599;
          }
          if (v316)
          {
            int v357 = 136446210;
            v358 = "nw_webtransport_session_add_to_http_messaging";
            v308 = "%{public}s called with null options, no backtrace";
            v327 = v314;
            os_log_type_t v328 = v315;
            goto LABEL_598;
          }
        }
        else
        {
          v306 = __nwlog_obj();
          os_log_type_t v307 = v335;
          if (os_log_type_enabled(v306, v335))
          {
            int v357 = 136446210;
            v358 = "nw_webtransport_session_add_to_http_messaging";
            v308 = "%{public}s called with null options, backtrace limit exceeded";
            goto LABEL_597;
          }
        }
      }
LABEL_599:
      if (v305) {
        free(v305);
      }
      char v209 = 0;
      v111 = v332;
LABEL_320:
      _Block_object_dispose(buf, 8);
      if ((v349[16] & 1) != 0 && *(void *)&v349[8]) {
        os_release(*(void **)&v349[8]);
      }
      _Block_object_dispose(v343, 8);
      if (v195) {
        os_release(v195);
      }
      if ((v209 & 1) == 0) {
        goto LABEL_581;
      }
      goto LABEL_326;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_http_messaging";
    v290 = (char *)_os_log_send_and_compose_impl();
    v343[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v357) = 0;
    if (!__nwlog_fault(v290, v343, &v357)) {
      goto LABEL_579;
    }
    if (v343[0] == OS_LOG_TYPE_FAULT)
    {
      v291 = __nwlog_obj();
      os_log_type_t v292 = v343[0];
      if (!os_log_type_enabled(v291, v343[0])) {
        goto LABEL_579;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_http_messaging";
      v293 = "%{public}s called with null parameters";
      goto LABEL_577;
    }
    if (!(_BYTE)v357)
    {
      v291 = __nwlog_obj();
      os_log_type_t v292 = v343[0];
      if (!os_log_type_enabled(v291, v343[0])) {
        goto LABEL_579;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_http_messaging";
      v293 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_577;
    }
    v311 = (char *)__nw_create_backtrace_string();
    v302 = __nwlog_obj();
    os_log_type_t v303 = v343[0];
    BOOL v312 = os_log_type_enabled(v302, v343[0]);
    if (v311)
    {
      if (v312)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_http_messaging";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v311;
        _os_log_impl(&dword_1830D4000, v302, v303, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v311);
      if (!v290) {
        goto LABEL_581;
      }
LABEL_580:
      free(v290);
      goto LABEL_581;
    }
    if (v312)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_http_messaging";
      v293 = "%{public}s called with null parameters, no backtrace";
LABEL_604:
      v319 = v302;
      os_log_type_t v320 = v303;
      goto LABEL_578;
    }
    goto LABEL_579;
  }
  if (!nw_protocol_add_input_handler(*(void *)(v84 + 32), (uint64_t)v30))
  {
LABEL_581:
    if ((*((unsigned char *)v30 + 276) & 0x10) != 0) {
      goto LABEL_588;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v169 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_588;
    }
    uint64_t v321 = v30[11];
    if (v321) {
      int v322 = *(_DWORD *)(v321 + 460);
    }
    else {
      int v322 = -1;
    }
    uint64_t v323 = v30[8];
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v30 + 24;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v348 = (uint64_t)" ";
    *(_WORD *)v349 = 1024;
    *(_DWORD *)&v349[2] = v322;
    *(_WORD *)&v349[6] = 2048;
    *(void *)&v349[8] = v323;
    v176 = "%{public}s %{public}s%s<i%u:s%lld> no http3 output handler for webtransport http3 stream";
LABEL_587:
    _os_log_impl(&dword_1830D4000, v169, OS_LOG_TYPE_ERROR, v176, buf, 0x30u);
LABEL_588:
    v324 = (void *)v30[6];
    nw_protocol_error(v324, (uint64_t)v30);
    nw_protocol_disconnected(v324, (uint64_t)v30);
    goto LABEL_589;
  }
LABEL_326:
  if (!v30[4]) {
    goto LABEL_581;
  }
  uint64_t v210 = v30[22];
  v211 = *(void **)(v84 + 392);
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = ___ZL50nw_webtransport_http3_stream_reconfigure_and_startP22nw_webtransport_streamb_block_invoke;
  uint64_t v348 = (uint64_t)&unk_1E52403E8;
  *(void *)v349 = v210;
  nw_queue_context_async(v211, buf);
LABEL_589:
  os_release(v111);
LABEL_590:
  if ((handle[137] & 2) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v325 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      int v326 = handle[115];
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_add_input_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 116;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v348 = (uint64_t)" ";
      *(_WORD *)v349 = 1024;
      *(_DWORD *)&v349[2] = v326;
      *(_WORD *)&v349[6] = 2048;
      *(void *)&v349[8] = v333;
      *(_WORD *)&v349[16] = 2082;
      *(void *)&v349[18] = v30 + 24;
      _os_log_impl(&dword_1830D4000, v325, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u> Added input handler %p from %{public}s", buf, 0x3Au);
    }
  }
  return 1;
}

void sub_1838DB3A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_protocol_webtransport_stream_createPK22nw_protocol_identifierP23nw_webtransport_sessionP11nw_endpointP13nw_parameters_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

void ___ZL41nw_protocol_webtransport_stream_callbacksv_block_invoke()
{
  qword_1E8F798D8 = (uint64_t)nw_protocol_default_replace_input_handler;
  qword_1E8F799D0 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F79930 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F79948 = (uint64_t)nw_protocol_default_get_local;
  qword_1E8F79940 = (uint64_t)nw_protocol_default_get_path;
  qword_1E8F79970 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F79990 = (uint64_t)nw_protocol_default_get_output_local;
  qword_1E8F79998 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F799C8 = (uint64_t)nw_protocol_default_reset;
  qword_1E8F79978 = (uint64_t)nw_protocol_default_supports_external_data;
  qword_1E8F799A0 = (uint64_t)nw_protocol_default_waiting_for_output;
  qword_1E8F79958 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F79960 = (uint64_t)nw_protocol_default_unregister_notification;
  nw_protocol_webtransport_stream_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_webtransport_stream_add_input_handler;
  qword_1E8F79938 = (uint64_t)nw_protocol_webtransport_stream_get_parameters;
  qword_1E8F79950 = (uint64_t)nw_protocol_webtransport_stream_get_remote_endpoint;
  qword_1E8F798E8 = (uint64_t)nw_protocol_webtransport_stream_disconnect;
  qword_1E8F798F8 = (uint64_t)nw_protocol_webtransport_stream_disconnected;
  qword_1E8F79900 = (uint64_t)nw_protocol_webtransport_stream_error;
  qword_1E8F79908 = (uint64_t)nw_protocol_webtransport_stream_input_available;
  qword_1E8F79910 = (uint64_t)nw_protocol_webtransport_stream_output_available;
  qword_1E8F79968 = (uint64_t)nw_protocol_webtransport_stream_notify;
  qword_1E8F799A8 = (uint64_t)nw_protocol_webtransport_stream_copy_info;
  qword_1E8F799B0 = (uint64_t)nw_protocol_webtransport_stream_add_listen_handler;
  qword_1E8F799B8 = (uint64_t)nw_protocol_webtransport_stream_remove_listen_handler;
  qword_1E8F799C0 = (uint64_t)nw_protocol_webtransport_stream_get_message_properties;
  qword_1E8F798D0 = (uint64_t)nw_protocol_webtransport_stream_remove_input_handler;
  qword_1E8F798E0 = (uint64_t)nw_protocol_webtransport_stream_connect;
  qword_1E8F798F0 = (uint64_t)nw_protocol_webtransport_stream_connected;
  qword_1E8F79918 = (uint64_t)nw_protocol_webtransport_stream_get_input_frames;
  qword_1E8F79920 = (uint64_t)nw_protocol_webtransport_stream_get_output_frames;
  qword_1E8F79928 = (uint64_t)nw_protocol_webtransport_stream_finalize_output_frames;
  qword_1E8F79980 = (uint64_t)nw_protocol_webtransport_stream_input_finished;
  qword_1E8F79988 = (uint64_t)nw_protocol_webtransport_stream_output_finished;
}

void nw_protocol_webtransport_stream_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_protocol_webtransport_stream_output_finished";
    v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v3, &type, &v15)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v18 = "nw_protocol_webtransport_stream_output_finished";
      int v6 = "%{public}s called with null protocol";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v11 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_protocol_webtransport_stream_output_finished";
          __int16 v19 = 2082;
          nw_protocol_stack_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_39:
        if (!v3) {
          return;
        }
LABEL_40:
        free(v3);
        return;
      }
      if (!v11) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v18 = "nw_protocol_webtransport_stream_output_finished";
      int v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v18 = "nw_protocol_webtransport_stream_output_finished";
      int v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_38:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_39;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        char v7 = __nwlog_obj();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v8 = handle[11];
          if (v8) {
            int v9 = *(_DWORD *)(v8 + 460);
          }
          else {
            int v9 = -1;
          }
          uint64_t v14 = handle[8];
          *(_DWORD *)buf = 136447234;
          BOOL v18 = "nw_protocol_webtransport_stream_output_finished";
          __int16 v19 = 2082;
          nw_protocol_stack_t v20 = (char *)(handle + 24);
          __int16 v21 = 2080;
          id v22 = " ";
          __int16 v23 = 1024;
          int v24 = v9;
          __int16 v25 = 2048;
          uint64_t v26 = v14;
          _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called on stream without transport mode set, ignoring", buf, 0x30u);
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_protocol_webtransport_stream_output_finished";
  v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v3, &type, &v15)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_protocol_webtransport_stream_output_finished";
    int v6 = "%{public}s called with null webtransport_stream";
    goto LABEL_38;
  }
  if (!v15)
  {
    int v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_protocol_webtransport_stream_output_finished";
    int v6 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_38;
  }
  int v12 = (char *)__nw_create_backtrace_string();
  int v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  BOOL v13 = os_log_type_enabled(v4, type);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_protocol_webtransport_stream_output_finished";
    int v6 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_38;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v18 = "nw_protocol_webtransport_stream_output_finished";
    __int16 v19 = 2082;
    nw_protocol_stack_t v20 = v12;
    _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v12);
  if (v3) {
    goto LABEL_40;
  }
}

void nw_protocol_webtransport_stream_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_protocol_webtransport_stream_input_finished";
    v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v3, &type, &v15)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v18 = "nw_protocol_webtransport_stream_input_finished";
      int v6 = "%{public}s called with null protocol";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v11 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_protocol_webtransport_stream_input_finished";
          __int16 v19 = 2082;
          nw_protocol_stack_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_39:
        if (!v3) {
          return;
        }
LABEL_40:
        free(v3);
        return;
      }
      if (!v11) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v18 = "nw_protocol_webtransport_stream_input_finished";
      int v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v18 = "nw_protocol_webtransport_stream_input_finished";
      int v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_38:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_39;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        char v7 = __nwlog_obj();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v8 = handle[11];
          if (v8) {
            int v9 = *(_DWORD *)(v8 + 460);
          }
          else {
            int v9 = -1;
          }
          uint64_t v14 = handle[8];
          *(_DWORD *)buf = 136447234;
          BOOL v18 = "nw_protocol_webtransport_stream_input_finished";
          __int16 v19 = 2082;
          nw_protocol_stack_t v20 = (char *)(handle + 24);
          __int16 v21 = 2080;
          id v22 = " ";
          __int16 v23 = 1024;
          int v24 = v9;
          __int16 v25 = 2048;
          uint64_t v26 = v14;
          _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called on stream without transport mode set, ignoring", buf, 0x30u);
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_protocol_webtransport_stream_input_finished";
  v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v3, &type, &v15)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_protocol_webtransport_stream_input_finished";
    int v6 = "%{public}s called with null webtransport_stream";
    goto LABEL_38;
  }
  if (!v15)
  {
    int v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_protocol_webtransport_stream_input_finished";
    int v6 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_38;
  }
  int v12 = (char *)__nw_create_backtrace_string();
  int v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  BOOL v13 = os_log_type_enabled(v4, type);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_protocol_webtransport_stream_input_finished";
    int v6 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_38;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v18 = "nw_protocol_webtransport_stream_input_finished";
    __int16 v19 = 2082;
    nw_protocol_stack_t v20 = v12;
    _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v12);
  if (v3) {
    goto LABEL_40;
  }
}

uint64_t nw_protocol_webtransport_stream_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
      BOOL v11 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
          __int16 v20 = 2082;
          __int16 v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_38:
        if (!v8) {
          return 0;
        }
LABEL_39:
        free(v8);
        return 0;
      }
      if (!v13) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
      BOOL v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
      BOOL v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_37:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_38;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = handle[11];
        if (v4) {
          int v5 = *(_DWORD *)(v4 + 460);
        }
        else {
          int v5 = -1;
        }
        uint64_t v6 = handle[8];
        *(_DWORD *)buf = 136447234;
        __int16 v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
        __int16 v20 = 2082;
        __int16 v21 = (char *)(handle + 24);
        __int16 v22 = 2080;
        __int16 v23 = " ";
        __int16 v24 = 1024;
        int v25 = v5;
        __int16 v26 = 2048;
        uint64_t v27 = v6;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> finalize_output_frames called on stream with no transport mode", buf, 0x30u);
      }
    }
    return 0;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v8, &type, &v16)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
    BOOL v11 = "%{public}s called with null webtransport_stream";
    goto LABEL_37;
  }
  if (!v16)
  {
    int v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
    BOOL v11 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_37;
  }
  uint64_t v14 = (char *)__nw_create_backtrace_string();
  int v9 = __nwlog_obj();
  os_log_type_t v10 = type;
  BOOL v15 = os_log_type_enabled(v9, type);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
    BOOL v11 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_37;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v19 = "nw_protocol_webtransport_stream_finalize_output_frames";
    __int16 v20 = 2082;
    __int16 v21 = v14;
    _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v14);
  if (v8) {
    goto LABEL_39;
  }
  return 0;
}

uint64_t nw_protocol_webtransport_stream_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v25 = "nw_protocol_webtransport_stream_get_output_frames";
    int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_webtransport_stream_get_output_frames";
      BOOL v15 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          int v25 = "nw_protocol_webtransport_stream_get_output_frames";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_52:
        if (!v12) {
          return 0;
        }
LABEL_53:
        free(v12);
        return 0;
      }
      if (!v17) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_webtransport_stream_get_output_frames";
      BOOL v15 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_webtransport_stream_get_output_frames";
      BOOL v15 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_51;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v25 = "nw_protocol_webtransport_stream_get_output_frames";
    int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22)) {
      goto LABEL_52;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_52;
        }
        *(_DWORD *)buf = 136446210;
        int v25 = "nw_protocol_webtransport_stream_get_output_frames";
        BOOL v15 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_51;
      }
      BOOL v18 = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (!v18)
      {
        if (!v19) {
          goto LABEL_52;
        }
        *(_DWORD *)buf = 136446210;
        int v25 = "nw_protocol_webtransport_stream_get_output_frames";
        BOOL v15 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_51;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        int v25 = "nw_protocol_webtransport_stream_get_output_frames";
        __int16 v26 = 2082;
        uint64_t v27 = v18;
        __int16 v20 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v13, v14, v20, buf, 0x16u);
      }
LABEL_37:
      free(v18);
      if (!v12) {
        return 0;
      }
      goto LABEL_53;
    }
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136446210;
    int v25 = "nw_protocol_webtransport_stream_get_output_frames";
    BOOL v15 = "%{public}s called with null webtransport_stream";
LABEL_51:
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_52;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v25 = "nw_protocol_webtransport_stream_get_output_frames";
    int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_webtransport_stream_get_output_frames";
      BOOL v15 = "%{public}s called with null return_array";
      goto LABEL_51;
    }
    if (!v22)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_webtransport_stream_get_output_frames";
      BOOL v15 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_51;
    }
    BOOL v18 = (char *)__nw_create_backtrace_string();
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v21 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v21) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_webtransport_stream_get_output_frames";
      BOOL v15 = "%{public}s called with null return_array, no backtrace";
      goto LABEL_51;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      int v25 = "nw_protocol_webtransport_stream_get_output_frames";
      __int16 v26 = 2082;
      uint64_t v27 = v18;
      __int16 v20 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if ((*((unsigned char *)handle + 276) & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v7 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = handle[11];
      if (v8) {
        int v9 = *(_DWORD *)(v8 + 460);
      }
      else {
        int v9 = -1;
      }
      uint64_t v10 = handle[8];
      *(_DWORD *)buf = 136447234;
      int v25 = "nw_protocol_webtransport_stream_get_output_frames";
      __int16 v26 = 2082;
      uint64_t v27 = (char *)(handle + 24);
      __int16 v28 = 2080;
      int v29 = " ";
      __int16 v30 = 1024;
      int v31 = v9;
      __int16 v32 = 2048;
      uint64_t v33 = v10;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called, stream transport mode not yet set, returning 0 frames", buf, 0x30u);
    }
  }
  return 0;
}

uint64_t nw_protocol_webtransport_stream_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v25 = "nw_protocol_webtransport_stream_get_input_frames";
    int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_webtransport_stream_get_input_frames";
      BOOL v15 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          int v25 = "nw_protocol_webtransport_stream_get_input_frames";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_52:
        if (!v12) {
          return 0;
        }
LABEL_53:
        free(v12);
        return 0;
      }
      if (!v17) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_webtransport_stream_get_input_frames";
      BOOL v15 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_webtransport_stream_get_input_frames";
      BOOL v15 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_51;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v25 = "nw_protocol_webtransport_stream_get_input_frames";
    int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22)) {
      goto LABEL_52;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_52;
        }
        *(_DWORD *)buf = 136446210;
        int v25 = "nw_protocol_webtransport_stream_get_input_frames";
        BOOL v15 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_51;
      }
      BOOL v18 = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (!v18)
      {
        if (!v19) {
          goto LABEL_52;
        }
        *(_DWORD *)buf = 136446210;
        int v25 = "nw_protocol_webtransport_stream_get_input_frames";
        BOOL v15 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_51;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        int v25 = "nw_protocol_webtransport_stream_get_input_frames";
        __int16 v26 = 2082;
        uint64_t v27 = v18;
        __int16 v20 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v13, v14, v20, buf, 0x16u);
      }
LABEL_37:
      free(v18);
      if (!v12) {
        return 0;
      }
      goto LABEL_53;
    }
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136446210;
    int v25 = "nw_protocol_webtransport_stream_get_input_frames";
    BOOL v15 = "%{public}s called with null webtransport_stream";
LABEL_51:
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_52;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v25 = "nw_protocol_webtransport_stream_get_input_frames";
    int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_webtransport_stream_get_input_frames";
      BOOL v15 = "%{public}s called with null input_protocol";
      goto LABEL_51;
    }
    if (!v22)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_webtransport_stream_get_input_frames";
      BOOL v15 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_51;
    }
    BOOL v18 = (char *)__nw_create_backtrace_string();
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v21 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v21) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      int v25 = "nw_protocol_webtransport_stream_get_input_frames";
      BOOL v15 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_51;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      int v25 = "nw_protocol_webtransport_stream_get_input_frames";
      __int16 v26 = 2082;
      uint64_t v27 = v18;
      __int16 v20 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if ((*((unsigned char *)handle + 276) & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v7 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = handle[11];
      if (v8) {
        int v9 = *(_DWORD *)(v8 + 460);
      }
      else {
        int v9 = -1;
      }
      uint64_t v10 = handle[8];
      *(_DWORD *)buf = 136447234;
      int v25 = "nw_protocol_webtransport_stream_get_input_frames";
      __int16 v26 = 2082;
      uint64_t v27 = (char *)(handle + 24);
      __int16 v28 = 2080;
      int v29 = " ";
      __int16 v30 = 1024;
      int v31 = v9;
      __int16 v32 = 2048;
      uint64_t v33 = v10;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called, stream transport mode not yet set, returning 0 frames", buf, 0x30u);
    }
  }
  return 0;
}

void nw_protocol_webtransport_stream_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_protocol_webtransport_stream_connected";
    char v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_protocol_webtransport_stream_connected";
      uint64_t v10 = "%{public}s called with null protocol";
      goto LABEL_44;
    }
    if (!v20)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_protocol_webtransport_stream_connected";
      uint64_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (!v12) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_protocol_webtransport_stream_connected";
      uint64_t v10 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_44;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v23 = "nw_protocol_webtransport_stream_connected";
      __int16 v24 = 2082;
      int v25 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_45:
    if (!v7) {
      return;
    }
    goto LABEL_46;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_protocol_webtransport_stream_connected";
    char v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_protocol_webtransport_stream_connected";
      uint64_t v10 = "%{public}s called with null webtransport_stream";
      goto LABEL_44;
    }
    if (!v20)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_protocol_webtransport_stream_connected";
      uint64_t v10 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
      goto LABEL_44;
    }
    BOOL v13 = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (v13)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v23 = "nw_protocol_webtransport_stream_connected";
        __int16 v24 = 2082;
        int v25 = v13;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v13);
      if (!v7) {
        return;
      }
LABEL_46:
      free(v7);
      return;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_protocol_webtransport_stream_connected";
      uint64_t v10 = "%{public}s called with null webtransport_stream, no backtrace";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      goto LABEL_45;
    }
    goto LABEL_45;
  }
  int v3 = (*((unsigned __int8 *)handle + 276) >> 4) & 1;
  if (!gLogDatapath) {
    LOBYTE(v3) = 1;
  }
  if (handle[11])
  {
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = __nwlog_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v5 = handle[11];
        if (v5) {
          int v6 = *(_DWORD *)(v5 + 460);
        }
        else {
          int v6 = -1;
        }
        uint64_t v17 = handle[8];
        *(_DWORD *)buf = 136447234;
        __int16 v23 = "nw_protocol_webtransport_stream_connected";
        __int16 v24 = 2082;
        int v25 = (char *)(handle + 24);
        __int16 v26 = 2080;
        uint64_t v27 = " ";
        __int16 v28 = 1024;
        int v29 = v6;
        __int16 v30 = 2048;
        uint64_t v31 = v17;
        BOOL v18 = "%{public}s %{public}s%s<i%u:s%lld> Forwarding connect from lower layer, stream not reconfigured yet";
LABEL_49:
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, v18, buf, 0x30u);
      }
    }
  }
  else if ((v3 & 1) == 0)
  {
    uint64_t v4 = __nwlog_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = handle[11];
      if (v15) {
        int v16 = *(_DWORD *)(v15 + 460);
      }
      else {
        int v16 = -1;
      }
      uint64_t v19 = handle[8];
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_webtransport_stream_connected";
      __int16 v24 = 2082;
      int v25 = (char *)(handle + 24);
      __int16 v26 = 2080;
      uint64_t v27 = " ";
      __int16 v28 = 1024;
      int v29 = v16;
      __int16 v30 = 2048;
      uint64_t v31 = v19;
      BOOL v18 = "%{public}s %{public}s%s<i%u:s%lld> Stream is not fully setup, ignoring connected event";
      goto LABEL_49;
    }
  }
}

uint64_t nw_protocol_webtransport_stream_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_webtransport_stream_connect";
    char v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v7, &type, &v21)) {
      goto LABEL_67;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        uint64_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_protocol_webtransport_stream_connect";
          uint64_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_66;
        }
        goto LABEL_67;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v15 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_protocol_webtransport_stream_connect";
          uint64_t v10 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_66;
        }
        goto LABEL_67;
      }
      if (!v15) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v24 = "nw_protocol_webtransport_stream_connect";
      __int16 v25 = 2082;
      __int16 v26 = backtrace_string;
      int v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_46;
    }
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_67;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_webtransport_stream_connect";
    uint64_t v10 = "%{public}s called with null protocol";
LABEL_66:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_67;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_webtransport_stream_connect";
    char v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v7, &type, &v21)) {
      goto LABEL_67;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        uint64_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_protocol_webtransport_stream_connect";
          uint64_t v10 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
          goto LABEL_66;
        }
        goto LABEL_67;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v17 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_protocol_webtransport_stream_connect";
          uint64_t v10 = "%{public}s called with null webtransport_stream, no backtrace";
          goto LABEL_66;
        }
        goto LABEL_67;
      }
      if (!v17) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v24 = "nw_protocol_webtransport_stream_connect";
      __int16 v25 = 2082;
      __int16 v26 = backtrace_string;
      int v16 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
      goto LABEL_46;
    }
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_67;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_webtransport_stream_connect";
    uint64_t v10 = "%{public}s called with null webtransport_stream";
    goto LABEL_66;
  }
  if ((*((unsigned char *)handle + 276) & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v11 = __nwlog_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = handle[11];
        if (v12) {
          int v13 = *(_DWORD *)(v12 + 460);
        }
        else {
          int v13 = -1;
        }
        uint64_t v20 = handle[8];
        *(_DWORD *)buf = 136447234;
        __int16 v24 = "nw_protocol_webtransport_stream_connect";
        __int16 v25 = 2082;
        __int16 v26 = (char *)(handle + 24);
        __int16 v27 = 2080;
        __int16 v28 = " ";
        __int16 v29 = 1024;
        int v30 = v13;
        __int16 v31 = 2048;
        uint64_t v32 = v20;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }
  uint64_t v4 = handle[4];
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_webtransport_stream_connect";
    char v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v7, &type, &v21)) {
      goto LABEL_67;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_protocol_webtransport_stream_connect";
      uint64_t v10 = "%{public}s called with null output_protocol";
      goto LABEL_66;
    }
    if (!v21)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_protocol_webtransport_stream_connect";
        uint64_t v10 = "%{public}s called with null output_protocol, backtrace limit exceeded";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v18 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_protocol_webtransport_stream_connect";
        uint64_t v10 = "%{public}s called with null output_protocol, no backtrace";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    if (!v18) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v24 = "nw_protocol_webtransport_stream_connect";
    __int16 v25 = 2082;
    __int16 v26 = backtrace_string;
    int v16 = "%{public}s called with null output_protocol, dumping backtrace:%{public}s";
LABEL_46:
    _os_log_impl(&dword_1830D4000, v8, v9, v16, buf, 0x16u);
    goto LABEL_47;
  }
  uint64_t v5 = handle[11];
  if (v5)
  {
    if (!*(void *)(v5 + 32)) {
      nw_protocol_replace_input_handler(handle[4], (uint64_t)a1, handle[11]);
    }
    nw_protocol_set_output_handler(v5, v4);
    return nw_protocol_connect(v5, (uint64_t)a1);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v24 = "nw_protocol_webtransport_stream_connect";
  char v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v7, &type, &v21)) {
    goto LABEL_67;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v21)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_protocol_webtransport_stream_connect";
        uint64_t v10 = "%{public}s called with null session_protocol, backtrace limit exceeded";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v19 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_protocol_webtransport_stream_connect";
        uint64_t v10 = "%{public}s called with null session_protocol, no backtrace";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v24 = "nw_protocol_webtransport_stream_connect";
      __int16 v25 = 2082;
      __int16 v26 = backtrace_string;
      int v16 = "%{public}s called with null session_protocol, dumping backtrace:%{public}s";
      goto LABEL_46;
    }
LABEL_47:
    free(backtrace_string);
    goto LABEL_67;
  }
  uint64_t v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_webtransport_stream_connect";
    uint64_t v10 = "%{public}s called with null session_protocol";
    goto LABEL_66;
  }
LABEL_67:
  if (v7) {
    free(v7);
  }
  return 0;
}

uint64_t nw_protocol_webtransport_stream_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
    BOOL v129 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v165[0]) = 0;
    if (!__nwlog_fault(v129, type, v165)) {
      goto LABEL_281;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v130 = __nwlog_obj();
      os_log_type_t v131 = type[0];
      if (!os_log_type_enabled(v130, type[0])) {
        goto LABEL_281;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
      uint64_t v132 = "%{public}s called with null protocol";
      goto LABEL_280;
    }
    if (!LOBYTE(v165[0]))
    {
      uint64_t v130 = __nwlog_obj();
      os_log_type_t v131 = type[0];
      if (!os_log_type_enabled(v130, type[0])) {
        goto LABEL_281;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
      uint64_t v132 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_280;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v130 = __nwlog_obj();
    os_log_type_t v131 = type[0];
    BOOL v137 = os_log_type_enabled(v130, type[0]);
    if (!backtrace_string)
    {
      if (!v137) {
        goto LABEL_281;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
      uint64_t v132 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_280;
    }
    if (!v137) {
      goto LABEL_254;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
    __int16 v179 = 2082;
    uint64_t v180 = backtrace_string;
    uint64_t v138 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_253:
    _os_log_impl(&dword_1830D4000, v130, v131, v138, buf, 0x16u);
    goto LABEL_254;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
    BOOL v129 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v165[0]) = 0;
    if (!__nwlog_fault(v129, type, v165)) {
      goto LABEL_281;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v130 = __nwlog_obj();
      os_log_type_t v131 = type[0];
      if (!os_log_type_enabled(v130, type[0])) {
        goto LABEL_281;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
      uint64_t v132 = "%{public}s called with null webtransport_stream";
      goto LABEL_280;
    }
    if (!LOBYTE(v165[0]))
    {
      uint64_t v130 = __nwlog_obj();
      os_log_type_t v131 = type[0];
      if (!os_log_type_enabled(v130, type[0])) {
        goto LABEL_281;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
      uint64_t v132 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
      goto LABEL_280;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v130 = __nwlog_obj();
    os_log_type_t v131 = type[0];
    BOOL v139 = os_log_type_enabled(v130, type[0]);
    if (!backtrace_string)
    {
      if (!v139) {
        goto LABEL_281;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
      uint64_t v132 = "%{public}s called with null webtransport_stream, no backtrace";
      goto LABEL_280;
    }
    if (!v139) {
      goto LABEL_254;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
    __int16 v179 = 2082;
    uint64_t v180 = backtrace_string;
    uint64_t v138 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
    goto LABEL_253;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
    BOOL v129 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v165[0]) = 0;
    if (!__nwlog_fault(v129, type, v165)) {
      goto LABEL_281;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v130 = __nwlog_obj();
      os_log_type_t v131 = type[0];
      if (!os_log_type_enabled(v130, type[0])) {
        goto LABEL_281;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
      uint64_t v132 = "%{public}s called with null input_protocol";
      goto LABEL_280;
    }
    if (!LOBYTE(v165[0]))
    {
      uint64_t v130 = __nwlog_obj();
      os_log_type_t v131 = type[0];
      if (!os_log_type_enabled(v130, type[0])) {
        goto LABEL_281;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
      uint64_t v132 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_280;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v130 = __nwlog_obj();
    os_log_type_t v131 = type[0];
    BOOL v140 = os_log_type_enabled(v130, type[0]);
    if (backtrace_string)
    {
      if (v140)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
        __int16 v179 = 2082;
        uint64_t v180 = backtrace_string;
        uint64_t v138 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
        goto LABEL_253;
      }
LABEL_254:
      free(backtrace_string);
      goto LABEL_281;
    }
    if (!v140) {
      goto LABEL_281;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
    uint64_t v132 = "%{public}s called with null input_protocol, no backtrace";
LABEL_280:
    _os_log_impl(&dword_1830D4000, v130, v131, v132, buf, 0xCu);
LABEL_281:
    if (v129) {
      free(v129);
    }
    return 0;
  }
  if ((handle[276] & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      int v133 = __nwlog_obj();
      if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v134 = *((void *)handle + 11);
        if (v134) {
          int v135 = *(_DWORD *)(v134 + 460);
        }
        else {
          int v135 = -1;
        }
        uint64_t v147 = *((void *)handle + 8);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
        __int16 v179 = 2082;
        uint64_t v180 = handle + 192;
        __int16 v181 = 2080;
        uint64_t v182 = (uint64_t)" ";
        __int16 v183 = 1024;
        *(_DWORD *)int v184 = v135;
        *(_WORD *)&v184[4] = 2048;
        *(void *)&v184[6] = v147;
        _os_log_impl(&dword_1830D4000, v133, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }
  uint64_t v5 = &unk_1EB267000;
  if ((handle[276] & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *((void *)handle + 11);
      if (v7) {
        int v8 = *(_DWORD *)(v7 + 460);
      }
      else {
        int v8 = -1;
      }
      uint64_t v9 = *((void *)handle + 8);
      default_input_handler = a1->default_input_handler;
      *(_DWORD *)buf = 136448002;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
      __int16 v179 = 2082;
      uint64_t v180 = handle + 192;
      __int16 v181 = 2080;
      uint64_t v182 = (uint64_t)" ";
      __int16 v183 = 1024;
      *(_DWORD *)int v184 = v8;
      *(_WORD *)&v184[4] = 2048;
      *(void *)&v184[6] = v9;
      *(_WORD *)&v184[14] = 2048;
      *(void *)&v184[16] = a1;
      __int16 v185 = 2048;
      uint64_t v186 = default_input_handler;
      __int16 v187 = 2048;
      uint64_t v188 = a2;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:s%lld> protocol %p, default_input_handler %p, input protocol %p", buf, 0x4Eu);
    }
  }
  uint64_t v11 = *((void *)handle + 11);
  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  }
  if (a1->default_input_handler != a2) {
    return 0;
  }
  if (handle == *(char **)(v11 + 416))
  {
    uint64_t v13 = *((void *)handle + 4);
    if (v13) {
      nw_protocol_remove_input_handler(v13, (uint64_t)handle);
    }
  }
  uint64_t v14 = *((void *)handle + 11);
  if (!v14)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
    uint64_t v141 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v165[0]) = 0;
    if (__nwlog_fault(v141, type, v165))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v142 = __nwlog_obj();
        os_log_type_t v143 = type[0];
        if (os_log_type_enabled(v142, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          v144 = "%{public}s called with null webtransport_session";
LABEL_294:
          _os_log_impl(&dword_1830D4000, v142, v143, v144, buf, 0xCu);
        }
      }
      else if (LOBYTE(v165[0]))
      {
        uint64_t v148 = (char *)__nw_create_backtrace_string();
        uint64_t v142 = __nwlog_obj();
        os_log_type_t v143 = type[0];
        BOOL v149 = os_log_type_enabled(v142, type[0]);
        if (v148)
        {
          if (v149)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
            __int16 v179 = 2082;
            uint64_t v180 = v148;
            _os_log_impl(&dword_1830D4000, v142, v143, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v148);
          goto LABEL_295;
        }
        if (v149)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          v144 = "%{public}s called with null webtransport_session, no backtrace";
          goto LABEL_294;
        }
      }
      else
      {
        uint64_t v142 = __nwlog_obj();
        os_log_type_t v143 = type[0];
        if (os_log_type_enabled(v142, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          v144 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
          goto LABEL_294;
        }
      }
    }
LABEL_295:
    if (v141) {
      free(v141);
    }
    uint64_t v5 = &unk_1EB267000;
    goto LABEL_88;
  }
  uint64_t v164 = *((void *)handle + 11);
  if ((handle[276] & 0x20) != 0)
  {
    if ((*(unsigned char *)(v14 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v145 = __nwlog_obj();
        if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
        {
          int v146 = *(_DWORD *)(v14 + 460);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v179 = 2082;
          uint64_t v180 = (const char *)(v14 + 464);
          __int16 v181 = 2080;
          uint64_t v182 = (uint64_t)" ";
          __int16 v183 = 1024;
          *(_DWORD *)int v184 = v146;
          *(_WORD *)&v184[4] = 2048;
          *(void *)&v184[6] = handle;
          _os_log_impl(&dword_1830D4000, v145, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream (%p)", buf, 0x30u);
        }
      }
    }
    if ((handle[276] & 0x20) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
      __int16 v179 = 2048;
      uint64_t v180 = handle;
      BOOL v19 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v165[0]) = 0;
      if (!__nwlog_fault(v19, type, v165)) {
        goto LABEL_69;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v20 = gLogObj;
        os_log_type_t v21 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_69;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
        __int16 v179 = 2048;
        uint64_t v180 = handle;
        char v22 = "%{public}s stream %p not in pending list, cannot remove";
      }
      else if (LOBYTE(v165[0]))
      {
        __int16 v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v20 = gLogObj;
        os_log_type_t v21 = type[0];
        BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v25)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            __int16 v179 = 2048;
            uint64_t v180 = handle;
            __int16 v181 = 2082;
            uint64_t v182 = (uint64_t)v25;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v25);
          uint64_t v5 = &unk_1EB267000;
          goto LABEL_69;
        }
        uint64_t v5 = &unk_1EB267000;
        if (!v26)
        {
LABEL_69:
          if (v19) {
            free(v19);
          }
          goto LABEL_81;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
        __int16 v179 = 2048;
        uint64_t v180 = handle;
        char v22 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
      }
      else
      {
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v21 = type[0];
        if (!os_log_type_enabled(v20, type[0])) {
          goto LABEL_69;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
        __int16 v179 = 2048;
        uint64_t v180 = handle;
        char v22 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0x16u);
      goto LABEL_69;
    }
    uint64_t v23 = *((void *)handle + 14);
    __int16 v24 = (void *)*((void *)handle + 15);
    if (v23)
    {
      *(void *)(v23 + 120) = v24;
      __int16 v24 = (void *)*((void *)handle + 15);
    }
    else
    {
      *(void *)(v14 + 336) = v24;
    }
    void *v24 = v23;
    *((void *)handle + 14) = 0;
    *((void *)handle + 15) = 0;
    int v27 = *(_DWORD *)(v14 + 456);
    *(_DWORD *)(v14 + 456) = v27 - 1;
    if (v27)
    {
LABEL_79:
      char v43 = handle[276];
      handle[276] = v43 & 0xDF;
      if ((v43 & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v150 = __nwlog_obj();
          if (os_log_type_enabled(v150, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v151 = *((void *)handle + 11);
            if (v151) {
              int v152 = *(_DWORD *)(v151 + 460);
            }
            else {
              int v152 = -1;
            }
            uint64_t v157 = *((void *)handle + 8);
            uint64_t v14 = v164;
            int v158 = *(_DWORD *)(v164 + 456);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            __int16 v179 = 2082;
            uint64_t v180 = handle + 192;
            __int16 v181 = 2080;
            uint64_t v182 = (uint64_t)" ";
            __int16 v183 = 1024;
            *(_DWORD *)int v184 = v152;
            *(_WORD *)&v184[4] = 2048;
            *(void *)&v184[6] = v157;
            *(_WORD *)&v184[14] = 2048;
            *(void *)&v184[16] = handle;
            __int16 v185 = 1024;
            LODWORD(v186) = v158;
            BOOL v18 = "%{public}s %{public}s%s<i%u:s%lld> removed pending stream (%p), now have %u pending streams";
            char v35 = v150;
            os_log_type_t v36 = OS_LOG_TYPE_DEBUG;
            uint32_t v37 = 64;
            goto LABEL_58;
          }
        }
      }
      goto LABEL_81;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v28 = *(unsigned int *)(v14 + 456);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
    __int16 v179 = 2082;
    uint64_t v180 = "webtransport_session->pending_stream_count";
    __int16 v181 = 2048;
    uint64_t v182 = 1;
    __int16 v183 = 2048;
    *(void *)int v184 = v28;
    __int16 v29 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v165[0]) = 0;
    if (__nwlog_fault(v29, type, v165))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        int v30 = __nwlog_obj();
        os_log_type_t v31 = type[0];
        if (os_log_type_enabled(v30, type[0]))
        {
          uint64_t v32 = *(unsigned int *)(v164 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v179 = 2082;
          uint64_t v180 = "webtransport_session->pending_stream_count";
          __int16 v181 = 2048;
          uint64_t v182 = 1;
          __int16 v183 = 2048;
          *(void *)int v184 = v32;
          uint64_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_75:
          _os_log_impl(&dword_1830D4000, v30, v31, v33, buf, 0x2Au);
        }
      }
      else if (LOBYTE(v165[0]))
      {
        char v38 = (char *)__nw_create_backtrace_string();
        int v30 = __nwlog_obj();
        os_log_type_t v31 = type[0];
        BOOL v39 = os_log_type_enabled(v30, type[0]);
        if (v38)
        {
          if (v39)
          {
            uint64_t v40 = *(unsigned int *)(v164 + 456);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            __int16 v179 = 2082;
            uint64_t v180 = "webtransport_session->pending_stream_count";
            __int16 v181 = 2048;
            uint64_t v182 = 1;
            __int16 v183 = 2048;
            *(void *)int v184 = v40;
            *(_WORD *)&v184[8] = 2082;
            *(void *)&v184[10] = v38;
            _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v38);
          uint64_t v5 = &unk_1EB267000;
          goto LABEL_76;
        }
        uint64_t v5 = &unk_1EB267000;
        if (v39)
        {
          uint64_t v42 = *(unsigned int *)(v164 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v179 = 2082;
          uint64_t v180 = "webtransport_session->pending_stream_count";
          __int16 v181 = 2048;
          uint64_t v182 = 1;
          __int16 v183 = 2048;
          *(void *)int v184 = v42;
          uint64_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_75;
        }
      }
      else
      {
        int v30 = __nwlog_obj();
        os_log_type_t v31 = type[0];
        if (os_log_type_enabled(v30, type[0]))
        {
          uint64_t v41 = *(unsigned int *)(v164 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v179 = 2082;
          uint64_t v180 = "webtransport_session->pending_stream_count";
          __int16 v181 = 2048;
          uint64_t v182 = 1;
          __int16 v183 = 2048;
          *(void *)int v184 = v41;
          uint64_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_75;
        }
      }
    }
LABEL_76:
    if (v29) {
      free(v29);
    }
    uint64_t v14 = v164;
    *(_DWORD *)(v164 + 456) = 0;
    goto LABEL_79;
  }
  if (*(char **)(v14 + 416) == handle)
  {
    if ((*(unsigned char *)(v14 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v153 = __nwlog_obj();
        if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG))
        {
          int v154 = *(_DWORD *)(v14 + 460);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          __int16 v179 = 2082;
          uint64_t v180 = (const char *)(v14 + 464);
          __int16 v181 = 2080;
          uint64_t v182 = (uint64_t)" ";
          __int16 v183 = 1024;
          *(_DWORD *)int v184 = v154;
          _os_log_impl(&dword_1830D4000, v153, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Removing placeholder stream for session", buf, 0x26u);
        }
      }
    }
    *(void *)(v14 + 416) = 0;
  }
  else if (*(char **)(v14 + 424) == handle)
  {
    if ((*(unsigned char *)(v14 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        int v155 = __nwlog_obj();
        if (os_log_type_enabled(v155, OS_LOG_TYPE_DEBUG))
        {
          int v156 = *(_DWORD *)(v14 + 460);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          __int16 v179 = 2082;
          uint64_t v180 = (const char *)(v14 + 464);
          __int16 v181 = 2080;
          uint64_t v182 = (uint64_t)" ";
          __int16 v183 = 1024;
          *(_DWORD *)int v184 = v156;
          _os_log_impl(&dword_1830D4000, v155, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Removing datagram stream for session", buf, 0x26u);
        }
      }
    }
    *(void *)(v14 + 424) = 0;
  }
  else
  {
    *(void *)os_log_type_t type = *((void *)handle + 8);
    BOOL node = nw_hash_table_get_node(*(void *)(v14 + 184), (uint64_t)type, 8);
    if (node)
    {
      if (!nw_hash_table_remove_node(*(void *)(v14 + 184), node) && (*(unsigned char *)(v14 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          int v17 = *(_DWORD *)(v14 + 460);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          __int16 v179 = 2082;
          uint64_t v180 = (const char *)(v14 + 464);
          __int16 v181 = 2080;
          uint64_t v182 = (uint64_t)" ";
          __int16 v183 = 1024;
          *(_DWORD *)int v184 = v17;
          *(_WORD *)&v184[4] = 2048;
          *(void *)&v184[6] = *(void *)type;
          BOOL v18 = "%{public}s %{public}s%s<i%u> Failed to remove stream %lld from hash table";
LABEL_57:
          char v35 = v16;
          os_log_type_t v36 = OS_LOG_TYPE_ERROR;
          uint32_t v37 = 48;
LABEL_58:
          _os_log_impl(&dword_1830D4000, v35, v36, v18, buf, v37);
        }
      }
    }
    else if ((*(unsigned char *)(v14 + 548) & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v34 = *(_DWORD *)(v14 + 460);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        __int16 v179 = 2082;
        uint64_t v180 = (const char *)(v14 + 464);
        __int16 v181 = 2080;
        uint64_t v182 = (uint64_t)" ";
        __int16 v183 = 1024;
        *(_DWORD *)int v184 = v34;
        *(_WORD *)&v184[4] = 2048;
        *(void *)&v184[6] = *(void *)type;
        BOOL v18 = "%{public}s %{public}s%s<i%u> called remove_input_handler with stream id %lld, but no stream found";
        goto LABEL_57;
      }
    }
  }
LABEL_81:
  *((void *)handle + 11) = 0;
  if (*(char **)(v14 + 48) != handle) {
    goto LABEL_88;
  }
  if (*(_DWORD *)(v14 + 444))
  {
    uint64_t v44 = *(void *)(v14 + 424);
    if (v44)
    {
LABEL_84:
      nw_protocol_set_input_handler(v14, v44);
      if ((*(unsigned char *)(v14 + 548) & 2) != 0) {
        goto LABEL_88;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v45 = *((void *)v5 + 237);
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_INFO)) {
        goto LABEL_88;
      }
      int v46 = *(_DWORD *)(v14 + 460);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
      __int16 v179 = 2082;
      uint64_t v180 = (const char *)(v14 + 464);
      __int16 v181 = 2080;
      uint64_t v182 = (uint64_t)" ";
      __int16 v183 = 1024;
      *(_DWORD *)int v184 = v46;
      v47 = "%{public}s %{public}s%s<i%u> not destroying, still have datagram stream";
      goto LABEL_87;
    }
  }
  else
  {
    if ((*(unsigned char *)(v14 + 548) & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v55 = *((void *)v5 + 237);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        int v56 = *(_DWORD *)(v14 + 460);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        __int16 v179 = 2082;
        uint64_t v180 = (const char *)(v14 + 464);
        __int16 v181 = 2080;
        uint64_t v182 = (uint64_t)" ";
        __int16 v183 = 1024;
        *(_DWORD *)int v184 = v56;
        _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> first input handler bailed, closing", buf, 0x26u);
      }
    }
    uint64_t v57 = *(void *)(v14 + 432);
    uint64_t v58 = *(void **)(v14 + 392);
    v165[0] = MEMORY[0x1E4F143A8];
    v165[1] = 0x40000000;
    v165[2] = ___ZL37nw_webtransport_session_remove_streamP23nw_webtransport_sessionP22nw_webtransport_stream_block_invoke;
    v165[3] = &unk_1E5240268;
    v165[4] = v57;
    nw_queue_context_async(v58, v165);
    uint64_t v44 = *(void *)(v14 + 424);
    if (v44) {
      goto LABEL_84;
    }
  }
  uint64_t v59 = *(os_unfair_lock_s **)(v14 + 184);
  if (v59 && v59[10]._os_unfair_lock_opaque)
  {
    some_BOOL node = nw_hash_table_get_some_node(v59);
    uint64_t object = nw_hash_node_get_object(some_node);
    nw_protocol_set_input_handler(v14, object);
    if ((*(unsigned char *)(v14 + 548) & 2) != 0) {
      goto LABEL_88;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v45 = *((void *)v5 + 237);
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_INFO)) {
      goto LABEL_88;
    }
    int v62 = *(_DWORD *)(v14 + 460);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
    __int16 v179 = 2082;
    uint64_t v180 = (const char *)(v14 + 464);
    __int16 v181 = 2080;
    uint64_t v182 = (uint64_t)" ";
    __int16 v183 = 1024;
    *(_DWORD *)int v184 = v62;
    v47 = "%{public}s %{public}s%s<i%u> not destroying, still have active streams";
    goto LABEL_87;
  }
  if (!*(_DWORD *)(v14 + 456))
  {
    uint64_t v73 = *(void *)(v14 + 416);
    if (v73)
    {
      nw_protocol_set_input_handler(v14, v73);
      if ((*(unsigned char *)(v14 + 548) & 2) != 0) {
        goto LABEL_88;
      }
      id v45 = __nwlog_obj();
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_INFO)) {
        goto LABEL_88;
      }
      int v74 = *(_DWORD *)(v14 + 460);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
      __int16 v179 = 2082;
      uint64_t v180 = (const char *)(v14 + 464);
      __int16 v181 = 2080;
      uint64_t v182 = (uint64_t)" ";
      __int16 v183 = 1024;
      *(_DWORD *)int v184 = v74;
      v47 = "%{public}s %{public}s%s<i%u> not destroying, still have placeholder stream";
      goto LABEL_87;
    }
    nw_protocol_set_input_handler(v14, 0);
    if ((*(unsigned char *)(v14 + 548) & 2) == 0)
    {
      v75 = __nwlog_obj();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
      {
        int v76 = *(_DWORD *)(v14 + 460);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
        __int16 v179 = 2082;
        uint64_t v180 = (const char *)(v14 + 464);
        __int16 v181 = 2080;
        uint64_t v182 = (uint64_t)" ";
        __int16 v183 = 1024;
        *(_DWORD *)int v184 = v76;
        _os_log_impl(&dword_1830D4000, v75, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> called, destroying session", buf, 0x26u);
      }
    }
    *(void *)buf = 0;
    nw::retained_ptr<nw_endpoint *>::operator=(v14 + 344, buf);
    *(void *)buf = 0;
    nw::retained_ptr<nw_endpoint *>::operator=(v14 + 360, buf);
    *(void *)buf = 0;
    nw::retained_ptr<nw_endpoint *>::operator=(v14 + 376, buf);
    nw_http_capsule_framer_cleanup((void *)(v14 + 96));
    uint64_t v77 = *(void *)(v14 + 400);
    if (v77) {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v77 + 8))(v77, v14, 0);
    }
    if ((*(unsigned char *)(v14 + 548) & 4) != 0)
    {
      if ((nw_protocol_remove_listen_handler(*(void *)(v14 + 408), v14 + 64) & 1) == 0
        && (*(unsigned char *)(v14 + 548) & 2) == 0)
      {
        uint64_t v78 = __nwlog_obj();
        if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        {
          int v79 = *(_DWORD *)(v14 + 460);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          __int16 v179 = 2082;
          uint64_t v180 = (const char *)(v14 + 464);
          __int16 v181 = 2080;
          uint64_t v182 = (uint64_t)" ";
          __int16 v183 = 1024;
          *(_DWORD *)int v184 = v79;
          _os_log_impl(&dword_1830D4000, v78, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> failed to remove listen handler", buf, 0x26u);
        }
      }
      *(void *)(v14 + 408) = 0;
    }
    uint64_t v80 = *(void *)(v14 + 32);
    if (v80) {
      nw_protocol_remove_input_handler(v80, v14);
    }
    uint64_t v172 = 0;
    uint64_t v173 = &v172;
    uint64_t v174 = 0x2000000000;
    uint64_t v175 = 0;
    v81 = *(char **)(v14 + 184);
    if (v81)
    {
      *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
      uint64_t v167 = 0x40000000;
      uint64_t v168 = ___ZL31nw_webtransport_session_destroyP23nw_webtransport_session_block_invoke;
      v169 = &unk_1E52402B0;
      uint64_t v170 = &v172;
      uint64_t v171 = v14;
      nw_hash_table_apply(v81, (uint64_t)type);
      uint64_t v82 = *(os_unfair_lock_s **)(v14 + 184);
      if (v82)
      {
        _nw_hash_table_release(v82);
        *(void *)(v14 + 184) = 0;
      }
    }
    uint64_t v83 = *(void *)(v14 + 328);
    v173[3] = v83;
    if (!v83)
    {
      (*(void (**)(void, void))(*(void *)(v14 + 432) + 16))(*(void *)(v14 + 432), 0);
      int v128 = *(const void **)(v14 + 432);
      if (v128)
      {
        _Block_release(v128);
        *(void *)(v14 + 432) = 0;
      }
      std::destroy_at[abi:nn180100]<nw_webtransport_session,0>(v14);
      free((void *)v14);
      _Block_object_dispose(&v172, 8);
      goto LABEL_88;
    }
    unsigned int v163 = (const char *)(v14 + 464);
    while (1)
    {
      uint64_t v83 = *(void *)(v83 + 112);
      if ((*(unsigned char *)(v14 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v84 = *((void *)v5 + 237);
        if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
        {
          int v85 = *(_DWORD *)(v14 + 460);
          uint64_t v86 = v173[3];
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          __int16 v179 = 2082;
          uint64_t v180 = v163;
          __int16 v181 = 2080;
          uint64_t v182 = (uint64_t)" ";
          __int16 v183 = 1024;
          *(_DWORD *)int v184 = v85;
          *(_WORD *)&v184[4] = 2048;
          *(void *)&v184[6] = v86;
          _os_log_impl(&dword_1830D4000, v84, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> should not have stream %p left, destroying anyways", buf, 0x30u);
        }
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
      int v87 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v177 = OS_LOG_TYPE_ERROR;
      char v176 = 0;
      if (__nwlog_fault(v87, &v177, &v176))
      {
        if (v177 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v88 = gLogObj;
          os_log_type_t v89 = v177;
          if (!os_log_type_enabled((os_log_t)gLogObj, v177)) {
            goto LABEL_171;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          uint64_t v90 = v88;
          os_log_type_t v91 = v89;
          uint64_t v92 = "%{public}s should not have streams left when destroying";
LABEL_170:
          _os_log_impl(&dword_1830D4000, v90, v91, v92, buf, 0xCu);
          goto LABEL_171;
        }
        if (!v176)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v97 = gLogObj;
          os_log_type_t v98 = v177;
          if (!os_log_type_enabled((os_log_t)gLogObj, v177)) {
            goto LABEL_171;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          uint64_t v90 = v97;
          os_log_type_t v91 = v98;
          uint64_t v92 = "%{public}s should not have streams left when destroying, backtrace limit exceeded";
          goto LABEL_170;
        }
        char v93 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v94 = gLogObj;
        os_log_type_t v95 = v177;
        BOOL v96 = os_log_type_enabled((os_log_t)gLogObj, v177);
        if (!v93)
        {
          if (!v96) {
            goto LABEL_171;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          uint64_t v90 = v94;
          os_log_type_t v91 = v95;
          uint64_t v92 = "%{public}s should not have streams left when destroying, no backtrace";
          goto LABEL_170;
        }
        if (v96)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          __int16 v179 = 2082;
          uint64_t v180 = v93;
          _os_log_impl(&dword_1830D4000, v94, v95, "%{public}s should not have streams left when destroying, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v93);
      }
LABEL_171:
      if (v87) {
        free(v87);
      }
      uint64_t v99 = *(void *)(v83 + 112);
      v100 = *(void **)(v83 + 120);
      if (v99)
      {
        *(void *)(v99 + 120) = v100;
        v100 = *(void **)(v83 + 120);
      }
      else
      {
        *(void *)(v164 + 336) = v100;
      }
      void *v100 = v99;
      *(void *)(v83 + 112) = 0;
      *(void *)(v83 + 120) = 0;
      uint64_t v101 = v173[3];
      uint64_t v5 = &unk_1EB267000;
      if (v101)
      {
        if ((*(unsigned char *)(v101 + 276) & 0x10) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v102 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v103 = *(void *)(v101 + 88);
            if (v103) {
              int v104 = *(_DWORD *)(v103 + 460);
            }
            else {
              int v104 = -1;
            }
            uint64_t v105 = *(void *)(v101 + 64);
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
            __int16 v179 = 2082;
            uint64_t v180 = (const char *)(v101 + 192);
            __int16 v181 = 2080;
            uint64_t v182 = (uint64_t)" ";
            __int16 v183 = 1024;
            *(_DWORD *)int v184 = v104;
            *(_WORD *)&v184[4] = 2048;
            *(void *)&v184[6] = v105;
            *(_WORD *)&v184[14] = 2048;
            *(void *)&v184[16] = v101;
            _os_log_impl(&dword_1830D4000, v102, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> destroying stream %p", buf, 0x3Au);
          }
        }
        if (*(void *)(v101 + 72))
        {
          if ((*(unsigned char *)(v101 + 276) & 0x10) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v106 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              uint64_t v107 = *(void *)(v101 + 88);
              if (v107) {
                int v108 = *(_DWORD *)(v107 + 460);
              }
              else {
                int v108 = -1;
              }
              uint64_t v109 = *(void *)(v101 + 64);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
              __int16 v179 = 2082;
              uint64_t v180 = (const char *)(v101 + 192);
              __int16 v181 = 2080;
              uint64_t v182 = (uint64_t)" ";
              __int16 v183 = 1024;
              *(_DWORD *)int v184 = v108;
              *(_WORD *)&v184[4] = 2048;
              *(void *)&v184[6] = v109;
              _os_log_impl(&dword_1830D4000, v106, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> input_frames has unread frames before destroying", buf, 0x30u);
            }
          }
        }
        uint64_t v110 = *(void *)(v101 + 72);
        do
        {
          if (!v110) {
            break;
          }
          uint64_t v111 = *(void *)(v110 + 32);
          char v112 = ___ZL30nw_webtransport_stream_destroyP22nw_webtransport_stream_block_invoke((uint64_t)&__block_literal_global_31, v110);
          uint64_t v110 = v111;
        }
        while ((v112 & 1) != 0);
        (*(void (**)(void, void))(*(void *)(v101 + 176) + 16))(*(void *)(v101 + 176), 0);
        BOOL v113 = *(const void **)(v101 + 176);
        if (v113)
        {
          _Block_release(v113);
          *(void *)(v101 + 176) = 0;
        }
        if (*(unsigned char *)(v101 + 168))
        {
          char v114 = *(void **)(v101 + 160);
          if (v114) {
            os_release(v114);
          }
        }
        *(void *)(v101 + 160) = 0;
        if (*(unsigned char *)(v101 + 152))
        {
          char v115 = *(void **)(v101 + 144);
          if (v115) {
            os_release(v115);
          }
        }
        *(void *)(v101 + 144) = 0;
        if (*(unsigned char *)(v101 + 136))
        {
          v116 = *(void **)(v101 + 128);
          if (v116) {
            os_release(v116);
          }
        }
LABEL_204:
        free((void *)v101);
        goto LABEL_205;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
      uint64_t v101 = _os_log_send_and_compose_impl();
      os_log_type_t v177 = OS_LOG_TYPE_ERROR;
      char v176 = 0;
      if (!__nwlog_fault((const char *)v101, &v177, &v176)) {
        goto LABEL_221;
      }
      if (v177 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v117 = __nwlog_obj();
        os_log_type_t v118 = v177;
        if (os_log_type_enabled(v117, v177))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
          BOOL v119 = v117;
          os_log_type_t v120 = v118;
          int v121 = "%{public}s called with null webtransport_stream";
          goto LABEL_220;
        }
LABEL_221:
        if (v101) {
          goto LABEL_204;
        }
        goto LABEL_205;
      }
      if (!v176)
      {
        uint64_t v126 = __nwlog_obj();
        os_log_type_t v127 = v177;
        if (!os_log_type_enabled(v126, v177)) {
          goto LABEL_221;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        BOOL v119 = v126;
        os_log_type_t v120 = v127;
        int v121 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
LABEL_220:
        _os_log_impl(&dword_1830D4000, v119, v120, v121, buf, 0xCu);
        goto LABEL_221;
      }
      uint64_t v122 = (char *)__nw_create_backtrace_string();
      uint64_t v123 = __nwlog_obj();
      os_log_type_t v124 = v177;
      BOOL v125 = os_log_type_enabled(v123, v177);
      if (!v122)
      {
        uint64_t v5 = &unk_1EB267000;
        if (!v125) {
          goto LABEL_221;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        BOOL v119 = v123;
        os_log_type_t v120 = v124;
        int v121 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_220;
      }
      if (v125)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        __int16 v179 = 2082;
        uint64_t v180 = v122;
        _os_log_impl(&dword_1830D4000, v123, v124, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v122);
      uint64_t v5 = &unk_1EB267000;
      if (v101) {
        goto LABEL_204;
      }
LABEL_205:
      v173[3] = v83;
      uint64_t v14 = v164;
    }
  }
  uint64_t v71 = *(void *)(v14 + 328);
  if (v71)
  {
    if ((*(unsigned char *)(v71 + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        int v159 = __nwlog_obj();
        if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v160 = *(void *)(v71 + 88);
          if (v160) {
            int v161 = *(_DWORD *)(v160 + 460);
          }
          else {
            int v161 = -1;
          }
          uint64_t v162 = *(void *)(v71 + 64);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_get_next_pending_stream";
          __int16 v179 = 2082;
          uint64_t v180 = (const char *)(v71 + 192);
          __int16 v181 = 2080;
          uint64_t v182 = (uint64_t)" ";
          __int16 v183 = 1024;
          *(_DWORD *)int v184 = v161;
          *(_WORD *)&v184[4] = 2048;
          *(void *)&v184[6] = v162;
          *(_WORD *)&v184[14] = 2048;
          *(void *)&v184[16] = v71;
          _os_log_impl(&dword_1830D4000, v159, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> found stream (%p)", buf, 0x3Au);
          uint64_t v14 = v164;
        }
      }
    }
  }
  nw_protocol_set_input_handler(v14, v71);
  if ((*(unsigned char *)(v14 + 548) & 2) != 0) {
    goto LABEL_88;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v45 = *((void *)v5 + 237);
  if (!os_log_type_enabled(v45, OS_LOG_TYPE_INFO)) {
    goto LABEL_88;
  }
  int v72 = *(_DWORD *)(v14 + 460);
  *(_DWORD *)buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
  __int16 v179 = 2082;
  uint64_t v180 = (const char *)(v14 + 464);
  __int16 v181 = 2080;
  uint64_t v182 = (uint64_t)" ";
  __int16 v183 = 1024;
  *(_DWORD *)int v184 = v72;
  v47 = "%{public}s %{public}s%s<i%u> not destroying, still have pending streams";
LABEL_87:
  _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_INFO, v47, buf, 0x26u);
LABEL_88:
  nw_protocol_set_output_handler((uint64_t)a1, 0);
  if ((handle[276] & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v48 = *((void *)v5 + 237);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      uint64_t v49 = *((void *)handle + 11);
      if (v49) {
        int v50 = *(_DWORD *)(v49 + 460);
      }
      else {
        int v50 = -1;
      }
      uint64_t v51 = *((void *)handle + 8);
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
      __int16 v179 = 2082;
      uint64_t v180 = handle + 192;
      __int16 v181 = 2080;
      uint64_t v182 = (uint64_t)" ";
      __int16 v183 = 1024;
      *(_DWORD *)int v184 = v50;
      *(_WORD *)&v184[4] = 2048;
      *(void *)&v184[6] = v51;
      *(_WORD *)&v184[14] = 2048;
      *(void *)&v184[16] = handle;
      _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> destroying stream %p", buf, 0x3Au);
    }
  }
  if (*((void *)handle + 9))
  {
    if ((handle[276] & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v52 = *((void *)v5 + 237);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        uint64_t v53 = *((void *)handle + 11);
        if (v53) {
          int v54 = *(_DWORD *)(v53 + 460);
        }
        else {
          int v54 = -1;
        }
        uint64_t v63 = *((void *)handle + 8);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        __int16 v179 = 2082;
        uint64_t v180 = handle + 192;
        __int16 v181 = 2080;
        uint64_t v182 = (uint64_t)" ";
        __int16 v183 = 1024;
        *(_DWORD *)int v184 = v54;
        *(_WORD *)&v184[4] = 2048;
        *(void *)&v184[6] = v63;
        _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> input_frames has unread frames before destroying", buf, 0x30u);
      }
    }
  }
  uint64_t v64 = *((void *)handle + 9);
  do
  {
    if (!v64) {
      break;
    }
    uint64_t v65 = *(void *)(v64 + 32);
    char v66 = ___ZL30nw_webtransport_stream_destroyP22nw_webtransport_stream_block_invoke((uint64_t)&__block_literal_global_31, v64);
    uint64_t v64 = v65;
  }
  while ((v66 & 1) != 0);
  (*(void (**)(void, void))(*((void *)handle + 22) + 16))(*((void *)handle + 22), 0);
  uint64_t v67 = (const void *)*((void *)handle + 22);
  if (v67)
  {
    _Block_release(v67);
    *((void *)handle + 22) = 0;
  }
  if (handle[168])
  {
    v68 = (void *)*((void *)handle + 20);
    if (v68) {
      os_release(v68);
    }
  }
  *((void *)handle + 20) = 0;
  if (handle[152])
  {
    uint64_t v69 = (void *)*((void *)handle + 18);
    if (v69) {
      os_release(v69);
    }
  }
  *((void *)handle + 18) = 0;
  if (handle[136])
  {
    int v70 = (void *)*((void *)handle + 16);
    if (v70) {
      os_release(v70);
    }
  }
  free(handle);
  return 1;
}

BOOL nw_protocol_webtransport_accept(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "nw_protocol_webtransport_accept";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v16 = "nw_protocol_webtransport_accept";
      int v8 = "%{public}s called with null protocol";
      goto LABEL_37;
    }
    if (!v13)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v16 = "nw_protocol_webtransport_accept";
      int v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (!v10) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v16 = "nw_protocol_webtransport_accept";
      int v8 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_37;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v16 = "nw_protocol_webtransport_accept";
      __int16 v17 = 2082;
      BOOL v18 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_38:
    if (!v5) {
      return 0;
    }
LABEL_39:
    free(v5);
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 40);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "nw_protocol_webtransport_accept";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v16 = "nw_protocol_webtransport_accept";
      int v8 = "%{public}s called with null webtransport_session";
      goto LABEL_37;
    }
    if (!v13)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v16 = "nw_protocol_webtransport_accept";
      int v8 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
      goto LABEL_37;
    }
    uint64_t v11 = (char *)__nw_create_backtrace_string();
    int v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (v11)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v16 = "nw_protocol_webtransport_accept";
        __int16 v17 = 2082;
        BOOL v18 = v11;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v11);
      if (!v5) {
        return 0;
      }
      goto LABEL_39;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v16 = "nw_protocol_webtransport_accept";
      int v8 = "%{public}s called with null webtransport_session, no backtrace";
LABEL_37:
      _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      goto LABEL_38;
    }
    goto LABEL_38;
  }
  if (*(_DWORD *)(v1 + 444) != 5) {
    return 1;
  }
  if ((*(unsigned char *)(v1 + 548) & 2) != 0) {
    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = gLogObj;
  BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
  if (result)
  {
    int v4 = *(_DWORD *)(v1 + 460);
    *(_DWORD *)buf = 136446978;
    uint64_t v16 = "nw_protocol_webtransport_accept";
    __int16 v17 = 2082;
    BOOL v18 = (char *)(v1 + 464);
    __int16 v19 = 2080;
    uint64_t v20 = " ";
    __int16 v21 = 1024;
    int v22 = v4;
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> cannot accept new streams after the session was closed", buf, 0x26u);
    return 0;
  }
  return result;
}

uint64_t tcp_listener_create(NSObject *a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  nw_allow_use_of_dispatch_internal();
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    uint64_t v33 = "tcp_listener_create";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v17, &type, &v30)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)__str = 136446210;
      uint64_t v33 = "tcp_listener_create";
      uint64_t v20 = "%{public}s called with null queue";
      goto LABEL_33;
    }
    if (!v30)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)__str = 136446210;
      uint64_t v33 = "tcp_listener_create";
      uint64_t v20 = "%{public}s called with null queue, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v29 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)__str = 136446466;
        uint64_t v33 = "tcp_listener_create";
        __int16 v34 = 2082;
        char v35 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null queue, dumping backtrace:%{public}s", (uint8_t *)__str, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_35;
    }
    if (v29)
    {
      *(_DWORD *)__str = 136446210;
      uint64_t v33 = "tcp_listener_create";
      uint64_t v20 = "%{public}s called with null queue, no backtrace";
      goto LABEL_33;
    }
    goto LABEL_35;
  }
  objc_opt_class();
  uint64_t v2 = _os_object_alloc();
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)__str = 136446210;
    uint64_t v33 = "tcp_listener_allocate";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v7, &type, &v30)) {
      goto LABEL_20;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)__str = 136446210;
      uint64_t v33 = "tcp_listener_allocate";
      BOOL v10 = "%{public}s tcp_listener_obj_alloc failed";
    }
    else
    {
      if (v30)
      {
        uint64_t v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v12 = gLogObj;
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v11)
        {
          if (v14)
          {
            *(_DWORD *)__str = 136446466;
            uint64_t v33 = "tcp_listener_allocate";
            __int16 v34 = 2082;
            char v35 = v11;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s tcp_listener_obj_alloc failed, dumping backtrace:%{public}s", (uint8_t *)__str, 0x16u);
          }
          free(v11);
          goto LABEL_20;
        }
        if (!v14)
        {
LABEL_20:
          if (v7) {
            free(v7);
          }
          goto LABEL_22;
        }
        *(_DWORD *)__str = 136446210;
        uint64_t v33 = "tcp_listener_allocate";
        BOOL v10 = "%{public}s tcp_listener_obj_alloc failed, no backtrace";
        BOOL v15 = v12;
        os_log_type_t v16 = v13;
LABEL_19:
        _os_log_impl(&dword_1830D4000, v15, v16, v10, (uint8_t *)__str, 0xCu);
        goto LABEL_20;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)__str = 136446210;
      uint64_t v33 = "tcp_listener_allocate";
      BOOL v10 = "%{public}s tcp_listener_obj_alloc failed, backtrace limit exceeded";
    }
    BOOL v15 = v8;
    os_log_type_t v16 = v9;
    goto LABEL_19;
  }
  uint64_t v3 = v2;
  *(_DWORD *)(v2 + 72) = 0;
  *(void *)(v2 + 64) = 0;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  *(void *)(v3 + 16) = v4;
  if (v4)
  {
    snprintf(__str, 0x35uLL, "com.apple.networking.tcp_listener.%p", (const void *)v3);
    char v36 = 0;
    uint64_t v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v6 = dispatch_queue_create(__str, v5);
    *(void *)(v3 + 24) = v6;
    if (v6)
    {
      *(_DWORD *)(v3 + 80) = 1;
      *(void *)(v3 + 32) = a1;
      dispatch_retain(a1);
      return v3;
    }
  }
  os_release((void *)v3);
LABEL_22:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)__str = 136446210;
  uint64_t v33 = "tcp_listener_create";
  __int16 v17 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v30 = 0;
  if (__nwlog_fault(v17, &type, &v30))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = gLogObj;
      os_log_type_t v19 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)__str = 136446210;
        uint64_t v33 = "tcp_listener_create";
        uint64_t v20 = "%{public}s tcp_listener_allocate failed";
LABEL_33:
        __int16 v25 = v18;
        os_log_type_t v26 = v19;
LABEL_34:
        _os_log_impl(&dword_1830D4000, v25, v26, v20, (uint8_t *)__str, 0xCu);
      }
    }
    else if (v30)
    {
      __int16 v21 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v22 = gLogObj;
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v21)
      {
        if (v24)
        {
          *(_DWORD *)__str = 136446466;
          uint64_t v33 = "tcp_listener_create";
          __int16 v34 = 2082;
          char v35 = v21;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s tcp_listener_allocate failed, dumping backtrace:%{public}s", (uint8_t *)__str, 0x16u);
        }
        free(v21);
        goto LABEL_35;
      }
      if (v24)
      {
        *(_DWORD *)__str = 136446210;
        uint64_t v33 = "tcp_listener_create";
        uint64_t v20 = "%{public}s tcp_listener_allocate failed, no backtrace";
        __int16 v25 = v22;
        os_log_type_t v26 = v23;
        goto LABEL_34;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = gLogObj;
      os_log_type_t v19 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)__str = 136446210;
        uint64_t v33 = "tcp_listener_create";
        uint64_t v20 = "%{public}s tcp_listener_allocate failed, backtrace limit exceeded";
        goto LABEL_33;
      }
    }
  }
LABEL_35:
  if (v17) {
    free(v17);
  }
  return 0;
}

uint64_t tcp_listener_create_launchd(NSObject *a1, const char *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = tcp_listener_create(a1);
  uint64_t v4 = v3;
  if (v3) {
    xpc_dictionary_set_string(*(xpc_object_t *)(v3 + 16), "launchd", a2);
  }
  return v4;
}

void tcp_listener_start(uint64_t a1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_listener_start";
    uint64_t v51 = (char *)_os_log_send_and_compose_impl();
    fds[0] = 16;
    LOBYTE(cnt) = 0;
    if (!__nwlog_fault(v51, fds, &cnt)) {
      goto LABEL_116;
    }
    if (fds[0] == 17)
    {
      unint64_t v52 = __nwlog_obj();
      os_log_type_t v53 = fds[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)fds[0])) {
        goto LABEL_116;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_start";
      int v54 = "%{public}s called with null listener";
    }
    else if ((_BYTE)cnt)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v52 = __nwlog_obj();
      os_log_type_t v53 = fds[0];
      BOOL v56 = os_log_type_enabled(v52, (os_log_type_t)fds[0]);
      if (backtrace_string)
      {
        if (v56)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "tcp_listener_start";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v52, v53, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_116;
      }
      if (!v56)
      {
LABEL_116:
        if (v51) {
          free(v51);
        }
        return;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_start";
      int v54 = "%{public}s called with null listener, no backtrace";
    }
    else
    {
      unint64_t v52 = __nwlog_obj();
      os_log_type_t v53 = fds[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)fds[0])) {
        goto LABEL_116;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_start";
      int v54 = "%{public}s called with null listener, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v52, v53, v54, buf, 0xCu);
    goto LABEL_116;
  }
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 72);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  if (*(_DWORD *)(a1 + 80) != 1) {
    goto LABEL_82;
  }
  if (!*(void *)(a1 + 40))
  {
    BOOL v14 = (void *)a1;
    int v15 = 22;
    goto LABEL_81;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v3 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    size_t v4 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "tcp_listener_start_locked";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = a1;
    *(_WORD *)&buf[22] = 2114;
    size_t v62 = v4;
    _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %p: %{public}@", buf, 0x20u);
  }
  string = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 16), "launchd");
  if (!string)
  {
    os_log_type_t v16 = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 16), "interface");
    if (v16)
    {
      __int16 v17 = v16;
      if (!strcasecmp(v16, (const char *)kTCPListenerInterfaceAll))
      {
        int v21 = 1;
        goto LABEL_40;
      }
      unsigned int v18 = if_nametoindex(v17);
      *(_DWORD *)(a1 + 76) = v18;
      if (!v18)
      {
        int v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        uint64_t v37 = __nwlog_obj();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "tcp_listener_setup_sockets";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v17;
          _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s could not find interface %{public}s", buf, 0x16u);
        }
        goto LABEL_79;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v19 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v20 = *(_DWORD *)(a1 + 76);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_listener_setup_sockets";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v20;
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s ifindex %u", buf, 0x12u);
      }
    }
    int v21 = 0;
LABEL_40:
    unsigned __int16 uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 16), "port");
    uint64_t v23 = uint64;
    int v24 = -9;
    __int16 v25 = uint64;
    while (1)
    {
      int v26 = v24;
      LODWORD(cnt) = 0;
      uint64_t v27 = tcp_listener_socket_create(a1, 2, v25, *(_DWORD *)(a1 + 76), v21, (unsigned int *)&cnt);
      if (!v27) {
        goto LABEL_58;
      }
      uint64_t v28 = v27;
      memset(buf, 0, sizeof(buf));
      LODWORD(v62) = 0;
      socklen_t v60 = 28;
      if (getsockname(*(_DWORD *)(v27 + 16), (sockaddr *)buf, &v60)) {
        break;
      }
      BOOL v29 = tcp_listener_socket_create(a1, 30, *(__int16 *)&buf[2], *(_DWORD *)(a1 + 76), v21, (unsigned int *)&cnt);
      if (v29)
      {
        uint64_t v36 = v29;
        *(_WORD *)(a1 + 84) = *(_WORD *)&buf[2];
        dispatch_resume(*(dispatch_object_t *)(v28 + 8));
        *(unsigned char *)(v28 + 20) = 1;
        *(void *)uint64_t v28 = *(void *)(a1 + 64);
        *(void *)(a1 + 64) = v28;
        dispatch_resume(*(dispatch_object_t *)(v36 + 8));
        *(unsigned char *)(v36 + 20) = 1;
        *(void *)uint64_t v36 = *(void *)(a1 + 64);
        *(void *)(a1 + 64) = v36;
LABEL_58:
        int v7 = cnt;
LABEL_79:
        if (!v7)
        {
          if (!xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 16), "srvtype")) {
            goto LABEL_38;
          }
          uint64_t v42 = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 16), "interface");
          char v43 = v42;
          if (v42)
          {
            if (!strcasecmp(v42, (const char *)kTCPListenerInterfaceAll) || !strcasecmp(v43, "awdl0")) {
              LODWORD(v43) = 0x100000;
            }
            else {
              LODWORD(v43) = 0;
            }
          }
          if (xpc_dictionary_get_BOOL(*(xpc_object_t *)(a1 + 16), "registerp2p"))
          {
            LODWORD(v43) = v43 | 0x20000;
            if (*(_DWORD *)(a1 + 76))
            {
              uint64_t v44 = __nwlog_obj();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                id v45 = if_indextoname(*(_DWORD *)(a1 + 76), fds);
                int v46 = "?";
                if (v45) {
                  int v46 = fds;
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "tcp_listener_setup_bonjour";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v46;
                _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_ERROR, "%{public}s Client specified an interface (%{public}s) and RegisterP2P", buf, 0x16u);
              }
            }
          }
          uint32_t v47 = *(_DWORD *)(a1 + 76);
          v48 = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 16), "srvname");
          uint64_t v49 = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 16), "srvtype");
          int v50 = xpc_dictionary_get_BOOL(*(xpc_object_t *)(a1 + 16), "localonly")
              ? "local."
              : xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 16), "srvdomain");
          int v7 = DNSServiceRegister((DNSServiceRef *)(a1 + 56), (DNSServiceFlags)v43, v47, v48, v49, v50, 0, *(_WORD *)(a1 + 84), 0, 0, (DNSServiceRegisterReply)tcp_listener_dns_handler, (void *)a1);
          if (!v7)
          {
            int v7 = DNSServiceSetDispatchQueue(*(DNSServiceRef *)(a1 + 56), *(dispatch_queue_t *)(a1 + 24));
            if (!v7) {
              goto LABEL_38;
            }
          }
        }
        goto LABEL_80;
      }
      char v30 = *(NSObject **)(v28 + 8);
      if (v30)
      {
        dispatch_source_cancel(v30);
        if (!*(unsigned char *)(v28 + 20)) {
          dispatch_resume(*(dispatch_object_t *)(v28 + 8));
        }
      }
      else
      {
        int v31 = *(_DWORD *)(v28 + 16);
        if (v31 != -1) {
          close(v31);
        }
      }
      free((void *)v28);
      if (!v23 && cnt == 48)
      {
        int v24 = v26 + 1;
        if (v26) {
          continue;
        }
      }
      goto LABEL_58;
    }
    int v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)fds = 136446466;
    *(void *)&fds[4] = "tcp_listener_setup_sockets";
    __int16 v64 = 1024;
    int v65 = v7;
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v57) = 16;
    char v59 = 0;
    if (__nwlog_fault(v32, &v57, &v59))
    {
      if (v57 == 17)
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v34 = v57;
        if (os_log_type_enabled(v33, (os_log_type_t)v57))
        {
          *(_DWORD *)fds = 136446466;
          *(void *)&fds[4] = "tcp_listener_setup_sockets";
          __int16 v64 = 1024;
          int v65 = v7;
          char v35 = "%{public}s getsockname failed %{darwin.errno}d";
LABEL_70:
          _os_log_impl(&dword_1830D4000, v33, v34, v35, fds, 0x12u);
        }
      }
      else if (v59)
      {
        char v38 = (char *)__nw_create_backtrace_string();
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v34 = v57;
        BOOL v39 = os_log_type_enabled(v33, (os_log_type_t)v57);
        if (v38)
        {
          if (v39)
          {
            *(_DWORD *)fds = 136446722;
            *(void *)&fds[4] = "tcp_listener_setup_sockets";
            __int16 v64 = 1024;
            int v65 = v7;
            __int16 v66 = 2082;
            uint64_t v67 = v38;
            _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s getsockname failed %{darwin.errno}d, dumping backtrace:%{public}s", fds, 0x1Cu);
          }
          free(v38);
          goto LABEL_71;
        }
        if (v39)
        {
          *(_DWORD *)fds = 136446466;
          *(void *)&fds[4] = "tcp_listener_setup_sockets";
          __int16 v64 = 1024;
          int v65 = v7;
          char v35 = "%{public}s getsockname failed %{darwin.errno}d, no backtrace";
          goto LABEL_70;
        }
      }
      else
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v34 = v57;
        if (os_log_type_enabled(v33, (os_log_type_t)v57))
        {
          *(_DWORD *)fds = 136446466;
          *(void *)&fds[4] = "tcp_listener_setup_sockets";
          __int16 v64 = 1024;
          int v65 = v7;
          char v35 = "%{public}s getsockname failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_70;
        }
      }
    }
LABEL_71:
    if (v32) {
      free(v32);
    }
    uint64_t v40 = *(NSObject **)(v28 + 8);
    if (v40)
    {
      dispatch_source_cancel(v40);
      if (!*(unsigned char *)(v28 + 20)) {
        dispatch_resume(*(dispatch_object_t *)(v28 + 8));
      }
    }
    else
    {
      int v41 = *(_DWORD *)(v28 + 16);
      if (v41 != -1) {
        close(v41);
      }
    }
    free((void *)v28);
    goto LABEL_79;
  }
  dispatch_queue_t v6 = string;
  *(void *)fds = 0;
  size_t cnt = 0;
  int v7 = launch_activate_socket(string, (int **)fds, &cnt);
  if (v7 || !*(void *)fds || !cnt) {
    goto LABEL_35;
  }
  size_t v8 = 0;
  int v9 = 2;
  do
  {
    socklen_t v60 = 0;
    socklen_t v57 = 4;
    if (getsockopt(*(_DWORD *)(*(void *)fds + 4 * v8), 0xFFFF, 4104, &v60, &v57)) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = v60 == 1;
    }
    if (!v10)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v11 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "tcp_listener_setup_sockets_launchd";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v6;
        *(_WORD *)&buf[22] = 2048;
        size_t v62 = v8;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s Sockets:%{public}s[%zu] is not SOCK_STREAM - not supported", buf, 0x20u);
      }
LABEL_11:
      close(*(_DWORD *)(*(void *)fds + 4 * v8));
      goto LABEL_12;
    }
    if (!*(_WORD *)(a1 + 84))
    {
      memset(buf, 0, sizeof(buf));
      LODWORD(v62) = 0;
      socklen_t v57 = 28;
      if (!getsockname(*(_DWORD *)(*(void *)fds + 4 * v8), (sockaddr *)buf, &v57))
      {
        int v9 = buf[1];
        if (buf[1] == 2 || buf[1] == 30) {
          *(_WORD *)(a1 + 84) = *(_WORD *)&buf[2];
        }
      }
    }
    uint64_t v12 = tcp_listener_socket_create_with_fd(v9, a1, *(_DWORD *)(*(void *)fds + 4 * v8));
    if (!v12) {
      goto LABEL_11;
    }
    uint64_t v13 = v12;
    *(void *)uint64_t v12 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v12;
    dispatch_resume(*(dispatch_object_t *)(v12 + 8));
    *(unsigned char *)(v13 + 20) = 1;
LABEL_12:
    ++v8;
  }
  while (v8 < cnt);
  if (*(void *)fds) {
    free(*(void **)fds);
  }
LABEL_35:
  if (!v7) {
    int v7 = 2;
  }
  if (*(void *)(a1 + 64))
  {
LABEL_38:
    *(_DWORD *)(a1 + 80) = 2;
    goto LABEL_82;
  }
LABEL_80:
  BOOL v14 = (void *)a1;
  int v15 = v7;
LABEL_81:
  tcp_listener_call_error_handler_locked(v14, v15);
LABEL_82:
  os_unfair_lock_unlock(v2);
}

void tcp_listener_call_error_handler_locked(void *a1, int a2)
{
  uint64_t v3 = (const void *)a1[6];
  if (v3)
  {
    v10[0] = 0;
    v10[1] = v10;
    v10[2] = 0x3002000000;
    v10[3] = __Block_byref_object_copy__35071;
    v10[4] = __Block_byref_object_dispose__35072;
    uint64_t v11 = 0;
    uint64_t v11 = _Block_copy(v3);
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x2000000000;
    int v9 = 0;
    int v9 = os_retain(a1);
    uint64_t v5 = a1[4];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __tcp_listener_call_error_handler_locked_block_invoke;
    block[3] = &unk_1E5240638;
    block[4] = v8;
    block[5] = v10;
    int v7 = a2;
    dispatch_async(v5, block);
    _Block_object_dispose(v8, 8);
    _Block_object_dispose(v10, 8);
  }
  tcp_listener_cancel_locked(a1);
}

BOOL tcp_listener_socket_create_with_fd(int a1, uint64_t a2, int a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v54 = 1;
  if (ioctl(a3, 0x8004667EuLL, &v54) < 0)
  {
    int v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v11;
    int v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (!__nwlog_fault(v7, &type, &v52)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        BOOL v10 = "%{public}s FIONBIO failed %{darwin.errno}d";
        goto LABEL_50;
      }
LABEL_52:
      if (!v7) {
        return 0;
      }
      char v35 = (void *)v7;
LABEL_54:
      free(v35);
      return 0;
    }
    if (!v52)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        BOOL v10 = "%{public}s FIONBIO failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_50;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = gLogObj;
    os_log_type_t v9 = type;
    BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        BOOL v10 = "%{public}s FIONBIO failed %{darwin.errno}d, no backtrace";
        goto LABEL_50;
      }
      goto LABEL_52;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v11;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = backtrace_string;
      os_log_type_t v19 = "%{public}s FIONBIO failed %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_52;
  }
  if (setsockopt(a3, 0xFFFF, 4130, &v54, 4u))
  {
    int v6 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v6;
    int v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (!__nwlog_fault(v7, &type, &v52)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v6;
        BOOL v10 = "%{public}s SO_NOSIGPIPE failed %{darwin.errno}d";
LABEL_50:
        uint64_t v32 = v8;
        os_log_type_t v33 = v9;
        uint32_t v34 = 18;
LABEL_51:
        _os_log_impl(&dword_1830D4000, v32, v33, v10, buf, v34);
        goto LABEL_52;
      }
      goto LABEL_52;
    }
    if (!v52)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v6;
        BOOL v10 = "%{public}s SO_NOSIGPIPE failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_50;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = gLogObj;
    os_log_type_t v9 = type;
    BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v6;
        BOOL v10 = "%{public}s SO_NOSIGPIPE failed %{darwin.errno}d, no backtrace";
        goto LABEL_50;
      }
      goto LABEL_52;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v6;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = backtrace_string;
      os_log_type_t v19 = "%{public}s SO_NOSIGPIPE failed %{darwin.errno}d, dumping backtrace:%{public}s";
LABEL_25:
      int v21 = v8;
      os_log_type_t v22 = v9;
      uint32_t v23 = 28;
LABEL_26:
      _os_log_impl(&dword_1830D4000, v21, v22, v19, buf, v23);
      goto LABEL_27;
    }
    goto LABEL_27;
  }
  if (xpc_dictionary_get_BOOL(*(xpc_object_t *)(a2 + 16), "tfo") && setsockopt(a3, 6, 261, &v54, 4u))
  {
    int v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v12;
    uint64_t v13 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (!__nwlog_fault((const char *)v13, &type, &v52)) {
      goto LABEL_88;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v14 = gLogObj;
      os_log_type_t v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v12;
      os_log_type_t v16 = "%{public}s setsockopt(%d, TCP_FASTOPEN, 1) failed %{darwin.errno}d";
      goto LABEL_87;
    }
    if (!v52)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v12;
      os_log_type_t v16 = "%{public}s setsockopt(%d, TCP_FASTOPEN, 1) failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_87;
    }
    uint64_t v37 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v14 = gLogObj;
    os_log_type_t v15 = type;
    BOOL v38 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v37)
    {
      if (!v38) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v12;
      os_log_type_t v16 = "%{public}s setsockopt(%d, TCP_FASTOPEN, 1) failed %{darwin.errno}d, no backtrace";
      goto LABEL_87;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v12;
      *(_WORD *)&unsigned char buf[24] = 2082;
      *(void *)&buf[26] = v37;
      BOOL v39 = "%{public}s setsockopt(%d, TCP_FASTOPEN, 1) failed %{darwin.errno}d, dumping backtrace:%{public}s";
LABEL_72:
      _os_log_impl(&dword_1830D4000, v14, v15, v39, buf, 0x22u);
      goto LABEL_73;
    }
    goto LABEL_73;
  }
  if (a1 == 30
    && xpc_dictionary_get_BOOL(*(xpc_object_t *)(a2 + 16), "coproc")
    && setsockopt(a3, 0xFFFF, 4376, &v54, 4u))
  {
    int v24 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v24;
    uint64_t v13 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (!__nwlog_fault((const char *)v13, &type, &v52)) {
      goto LABEL_88;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      os_log_type_t v16 = "%{public}s setsockopt(%d, SO_INTCOPROC_ALLOW, 1) failed %{darwin.errno}d";
      goto LABEL_87;
    }
    if (!v52)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      os_log_type_t v16 = "%{public}s setsockopt(%d, SO_INTCOPROC_ALLOW, 1) failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_87;
    }
    uint64_t v37 = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v42 = os_log_type_enabled(v14, type);
    if (!v37)
    {
      if (!v42) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      os_log_type_t v16 = "%{public}s setsockopt(%d, SO_INTCOPROC_ALLOW, 1) failed %{darwin.errno}d, no backtrace";
LABEL_87:
      _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0x18u);
LABEL_88:
      if (!v13) {
        return 0;
      }
      goto LABEL_89;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      *(_WORD *)&unsigned char buf[24] = 2082;
      *(void *)&buf[26] = v37;
      BOOL v39 = "%{public}s setsockopt(%d, SO_INTCOPROC_ALLOW, 1) failed %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_72;
    }
LABEL_73:
    free(v37);
    goto LABEL_88;
  }
  __int16 v25 = malloc_type_calloc(1uLL, 0x18uLL, 0xEAFB8F1AuLL);
  if (v25)
  {
    uint64_t v13 = (uint64_t)v25;
    v25[4] = a3;
    dispatch_source_t v26 = dispatch_source_create(MEMORY[0x1E4F14478], a3, 0, *(dispatch_queue_t *)(a2 + 24));
    *(void *)(v13 + 8) = v26;
    if (v26)
    {
      os_retain((void *)a2);
      uint64_t v27 = *(NSObject **)(v13 + 8);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 0x40000000;
      handler[2] = __tcp_listener_socket_create_with_fd_block_invoke;
      handler[3] = &__block_descriptor_tmp_9_35053;
      handler[4] = a2;
      int v51 = a3;
      dispatch_source_set_event_handler(v27, handler);
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      *(void *)&unsigned char buf[24] = *(void *)(v13 + 8);
      v48[0] = MEMORY[0x1E4F143A8];
      v48[1] = 0x40000000;
      v48[2] = __tcp_listener_socket_create_with_fd_block_invoke_2;
      v48[3] = &unk_1E5240680;
      int v49 = a3;
      v48[4] = buf;
      v48[5] = a2;
      dispatch_source_set_cancel_handler(*(dispatch_source_t *)&buf[24], v48);
      _Block_object_dispose(buf, 8);
      return v13;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (!__nwlog_fault(v28, &type, &v52)) {
      goto LABEL_81;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v29 = gLogObj;
      os_log_type_t v30 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      int v31 = "%{public}s dispatch_source_create failed";
    }
    else if (v52)
    {
      uint64_t v40 = (char *)__nw_create_backtrace_string();
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v41 = os_log_type_enabled(v29, type);
      if (v40)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v40;
          _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s dispatch_source_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v40);
        goto LABEL_81;
      }
      if (!v41)
      {
LABEL_81:
        if (v28) {
          free(v28);
        }
LABEL_89:
        char v35 = (void *)v13;
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      int v31 = "%{public}s dispatch_source_create failed, no backtrace";
    }
    else
    {
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      int v31 = "%{public}s dispatch_source_create failed, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v29, v30, v31, buf, 0xCu);
    goto LABEL_81;
  }
  char v43 = __nwlog_obj();
  os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "strict_calloc";
  *(_WORD *)&unsigned char buf[12] = 2048;
  *(void *)&buf[14] = 1;
  *(_WORD *)&buf[22] = 2048;
  *(void *)&unsigned char buf[24] = 24;
  uint64_t v44 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v44);
  if (!result)
  {
    free(v44);
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
    int v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (!__nwlog_fault(v7, &type, &v52)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v45 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (!os_log_type_enabled(v45, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      BOOL v10 = "%{public}s malloc failed";
    }
    else if (v52)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v45 = __nwlog_obj();
      os_log_type_t v46 = type;
      BOOL v47 = os_log_type_enabled(v45, type);
      if (backtrace_string)
      {
        if (!v47) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v19 = "%{public}s malloc failed, dumping backtrace:%{public}s";
        int v21 = v45;
        os_log_type_t v22 = v46;
        uint32_t v23 = 22;
        goto LABEL_26;
      }
      if (!v47) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      BOOL v10 = "%{public}s malloc failed, no backtrace";
    }
    else
    {
      id v45 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (!os_log_type_enabled(v45, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_socket_create_with_fd";
      BOOL v10 = "%{public}s malloc failed, backtrace limit exceeded";
    }
    uint64_t v32 = v45;
    os_log_type_t v33 = v46;
    uint32_t v34 = 12;
    goto LABEL_51;
  }
  __break(1u);
  return result;
}

BOOL tcp_listener_socket_create(uint64_t a1, int a2, __int16 a3, int a4, int a5, unsigned int *a6)
{
  *(void *)&v58[5] = *MEMORY[0x1E4F143B8];
  int v52 = a4;
  int v11 = socket(a2, 1, 6);
  int v12 = v11;
  if (v11 < 0)
  {
    unsigned int v18 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    *a6 = v18;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    int v54 = "tcp_listener_socket_create";
    __int16 v55 = 1024;
    int v56 = v18;
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    type.os_log_type_t sa_len = 16;
    LOBYTE(v51) = 0;
    if (!__nwlog_fault(v14, &type, &v51)) {
      goto LABEL_124;
    }
    if (type.sa_len == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = gLogObj;
      os_log_type_t sa_len = type.sa_len;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type.sa_len)) {
        goto LABEL_124;
      }
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v18;
      __int16 v17 = "%{public}s socket failed %{darwin.errno}d";
      goto LABEL_122;
    }
    if (!(_BYTE)v51)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = gLogObj;
      os_log_type_t sa_len = type.sa_len;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type.sa_len)) {
        goto LABEL_124;
      }
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v18;
      __int16 v17 = "%{public}s socket failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_122;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v15 = gLogObj;
    os_log_type_t sa_len = type.sa_len;
    BOOL v23 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type.sa_len);
    if (!backtrace_string)
    {
      if (!v23) {
        goto LABEL_124;
      }
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v18;
      __int16 v17 = "%{public}s socket failed %{darwin.errno}d, no backtrace";
      goto LABEL_122;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446722;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v18;
      __int16 v57 = 2082;
      *(void *)uint64_t v58 = backtrace_string;
      os_log_type_t v22 = "%{public}s socket failed %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_124;
  }
  int v51 = 1;
  if (setsockopt(v11, 0xFFFF, 4, &v51, 4u))
  {
    unsigned int v13 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    *a6 = v13;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    int v54 = "tcp_listener_socket_create";
    __int16 v55 = 1024;
    int v56 = v13;
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    type.os_log_type_t sa_len = 16;
    os_log_type_t v50 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v14, &type, &v50)) {
      goto LABEL_124;
    }
    if (type.sa_len == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = gLogObj;
      os_log_type_t sa_len = type.sa_len;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type.sa_len)) {
        goto LABEL_124;
      }
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v13;
      __int16 v17 = "%{public}s SO_REUSEADDR failed %{darwin.errno}d";
LABEL_122:
      uint64_t v44 = v15;
      os_log_type_t v45 = sa_len;
      uint32_t v46 = 18;
LABEL_123:
      _os_log_impl(&dword_1830D4000, v44, v45, v17, buf, v46);
      goto LABEL_124;
    }
    if (v50 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = gLogObj;
      os_log_type_t sa_len = type.sa_len;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type.sa_len)) {
        goto LABEL_124;
      }
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v13;
      __int16 v17 = "%{public}s SO_REUSEADDR failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_122;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v15 = gLogObj;
    os_log_type_t sa_len = type.sa_len;
    BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type.sa_len);
    if (!backtrace_string)
    {
      if (!v21) {
        goto LABEL_124;
      }
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v13;
      __int16 v17 = "%{public}s SO_REUSEADDR failed %{darwin.errno}d, no backtrace";
      goto LABEL_122;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446722;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v13;
      __int16 v57 = 2082;
      *(void *)uint64_t v58 = backtrace_string;
      os_log_type_t v22 = "%{public}s SO_REUSEADDR failed %{darwin.errno}d, dumping backtrace:%{public}s";
LABEL_25:
      int v24 = v15;
      os_log_type_t v25 = sa_len;
      uint32_t v26 = 28;
LABEL_26:
      _os_log_impl(&dword_1830D4000, v24, v25, v22, buf, v26);
      goto LABEL_27;
    }
    goto LABEL_27;
  }
  if (a5 && setsockopt(v12, 0xFFFF, 4356, &v51, 4u))
  {
    unsigned int v19 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    *a6 = v19;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    int v54 = "tcp_listener_socket_create";
    __int16 v55 = 1024;
    int v56 = v19;
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    type.os_log_type_t sa_len = 16;
    os_log_type_t v50 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v14, &type, &v50)) {
      goto LABEL_124;
    }
    if (type.sa_len == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = gLogObj;
      os_log_type_t sa_len = type.sa_len;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type.sa_len)) {
        goto LABEL_124;
      }
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v19;
      __int16 v17 = "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d";
      goto LABEL_122;
    }
    if (v50 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t sa_len = type.sa_len;
      if (!os_log_type_enabled(v15, (os_log_type_t)type.sa_len)) {
        goto LABEL_124;
      }
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v19;
      __int16 v17 = "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_122;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v15 = gLogObj;
    os_log_type_t sa_len = type.sa_len;
    BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type.sa_len);
    if (!backtrace_string)
    {
      if (!v30) {
        goto LABEL_124;
      }
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v19;
      __int16 v17 = "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, no backtrace";
      goto LABEL_122;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446722;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v19;
      __int16 v57 = 2082;
      *(void *)uint64_t v58 = backtrace_string;
      os_log_type_t v22 = "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_27;
  }
  if (a2 == 30)
  {
    if (setsockopt(v12, 41, 27, &v51, 4u))
    {
      unsigned int v27 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      *a6 = v27;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v27;
      BOOL v14 = (char *)_os_log_send_and_compose_impl();
      type.os_log_type_t sa_len = 16;
      os_log_type_t v50 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v14, &type, &v50)) {
        goto LABEL_124;
      }
      if (type.sa_len == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = gLogObj;
        os_log_type_t sa_len = type.sa_len;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type.sa_len)) {
          goto LABEL_124;
        }
        *(_DWORD *)buf = 136446466;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v27;
        __int16 v17 = "%{public}s IPV6_V6ONLY failed %{darwin.errno}d";
        goto LABEL_122;
      }
      if (v50 == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t sa_len = type.sa_len;
        if (!os_log_type_enabled(v15, (os_log_type_t)type.sa_len)) {
          goto LABEL_124;
        }
        *(_DWORD *)buf = 136446466;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v27;
        __int16 v17 = "%{public}s IPV6_V6ONLY failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_122;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t sa_len = type.sa_len;
      BOOL v32 = os_log_type_enabled(v15, (os_log_type_t)type.sa_len);
      if (!backtrace_string)
      {
        if (!v32) {
          goto LABEL_124;
        }
        *(_DWORD *)buf = 136446466;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v27;
        __int16 v17 = "%{public}s IPV6_V6ONLY failed %{darwin.errno}d, no backtrace";
        goto LABEL_122;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446722;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v27;
        __int16 v57 = 2082;
        *(void *)uint64_t v58 = backtrace_string;
        os_log_type_t v22 = "%{public}s IPV6_V6ONLY failed %{darwin.errno}d, dumping backtrace:%{public}s";
        goto LABEL_25;
      }
      goto LABEL_27;
    }
    if (v52 && setsockopt(v12, 41, 125, &v52, 4u))
    {
      unsigned int v31 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      *a6 = v31;
      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v31;
      BOOL v14 = (char *)_os_log_send_and_compose_impl();
      type.os_log_type_t sa_len = 16;
      os_log_type_t v50 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v14, &type, &v50)) {
        goto LABEL_124;
      }
      if (type.sa_len == 17)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t sa_len = type.sa_len;
        if (!os_log_type_enabled(v15, (os_log_type_t)type.sa_len)) {
          goto LABEL_124;
        }
        *(_DWORD *)buf = 136446466;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v31;
        __int16 v17 = "%{public}s IPV6_BOUND_IF failed %{darwin.errno}d";
        goto LABEL_122;
      }
      if (v50 == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t sa_len = type.sa_len;
        if (!os_log_type_enabled(v15, (os_log_type_t)type.sa_len)) {
          goto LABEL_124;
        }
        *(_DWORD *)buf = 136446466;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v31;
        __int16 v17 = "%{public}s IPV6_BOUND_IF failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_122;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t sa_len = type.sa_len;
      BOOL v42 = os_log_type_enabled(v15, (os_log_type_t)type.sa_len);
      if (!backtrace_string)
      {
        if (!v42) {
          goto LABEL_124;
        }
        *(_DWORD *)buf = 136446466;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v31;
        __int16 v17 = "%{public}s IPV6_BOUND_IF failed %{darwin.errno}d, no backtrace";
        goto LABEL_122;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446722;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v31;
        __int16 v57 = 2082;
        *(void *)uint64_t v58 = backtrace_string;
        os_log_type_t v22 = "%{public}s IPV6_BOUND_IF failed %{darwin.errno}d, dumping backtrace:%{public}s";
        goto LABEL_25;
      }
      goto LABEL_27;
    }
    memset(&type.sa_data[2], 0, 24);
  }
  else
  {
    if (v52 && setsockopt(v12, 0, 25, &v52, 4u))
    {
      unsigned int v28 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      *a6 = v28;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v28;
      BOOL v14 = (char *)_os_log_send_and_compose_impl();
      type.os_log_type_t sa_len = 16;
      os_log_type_t v50 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v14, &type, &v50)) {
        goto LABEL_124;
      }
      if (type.sa_len == 17)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t sa_len = type.sa_len;
        if (!os_log_type_enabled(v15, (os_log_type_t)type.sa_len)) {
          goto LABEL_124;
        }
        *(_DWORD *)buf = 136446466;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v28;
        __int16 v17 = "%{public}s IP_BOUND_IF failed %{darwin.errno}d";
        goto LABEL_122;
      }
      if (v50 == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t sa_len = type.sa_len;
        if (!os_log_type_enabled(v15, (os_log_type_t)type.sa_len)) {
          goto LABEL_124;
        }
        *(_DWORD *)buf = 136446466;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v28;
        __int16 v17 = "%{public}s IP_BOUND_IF failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_122;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t sa_len = type.sa_len;
      BOOL v37 = os_log_type_enabled(v15, (os_log_type_t)type.sa_len);
      if (!backtrace_string)
      {
        if (!v37) {
          goto LABEL_124;
        }
        *(_DWORD *)buf = 136446466;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v28;
        __int16 v17 = "%{public}s IP_BOUND_IF failed %{darwin.errno}d, no backtrace";
        goto LABEL_122;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446722;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v28;
        __int16 v57 = 2082;
        *(void *)uint64_t v58 = backtrace_string;
        os_log_type_t v22 = "%{public}s IP_BOUND_IF failed %{darwin.errno}d, dumping backtrace:%{public}s";
        goto LABEL_25;
      }
      goto LABEL_27;
    }
    memset(&type, 0, 28);
    if (a2 == 2)
    {
      *(_WORD *)&type.os_log_type_t sa_len = 528;
      socklen_t v29 = 16;
      goto LABEL_66;
    }
  }
  *(_WORD *)&type.os_log_type_t sa_len = 7708;
  socklen_t v29 = 28;
LABEL_66:
  *(_WORD *)type.sa_data = a3;
  if (bind(v12, &type, v29))
  {
    unsigned int v33 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    *a6 = v33;
    if (v33 <= 0x31 && ((1 << v33) & 0x2000000002002) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v35 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v12;
        __int16 v57 = 1024;
        v58[0] = v33;
        _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_ERROR, "%{public}s bind(fd %d) failed %{darwin.errno}d", buf, 0x18u);
      }
      goto LABEL_126;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446722;
    int v54 = "tcp_listener_socket_create";
    __int16 v55 = 1024;
    int v56 = v12;
    __int16 v57 = 1024;
    v58[0] = v33;
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v50 = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (__nwlog_fault(v14, &v50, &v48))
    {
      if (v50 == OS_LOG_TYPE_FAULT)
      {
        BOOL v38 = __nwlog_obj();
        os_log_type_t v39 = v50;
        if (!os_log_type_enabled(v38, v50)) {
          goto LABEL_124;
        }
        *(_DWORD *)buf = 136446722;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v12;
        __int16 v57 = 1024;
        v58[0] = v33;
        __int16 v17 = "%{public}s bind(fd %d) failed %{darwin.errno}d";
        goto LABEL_133;
      }
      if (!v48)
      {
        BOOL v38 = __nwlog_obj();
        os_log_type_t v39 = v50;
        if (!os_log_type_enabled(v38, v50)) {
          goto LABEL_124;
        }
        *(_DWORD *)buf = 136446722;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v12;
        __int16 v57 = 1024;
        v58[0] = v33;
        __int16 v17 = "%{public}s bind(fd %d) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_133;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v38 = __nwlog_obj();
      os_log_type_t v39 = v50;
      BOOL v43 = os_log_type_enabled(v38, v50);
      if (backtrace_string)
      {
        if (!v43) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446978;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v12;
        __int16 v57 = 1024;
        v58[0] = v33;
        LOWORD(v58[1]) = 2082;
        *(void *)((char *)&v58[1] + 2) = backtrace_string;
        os_log_type_t v22 = "%{public}s bind(fd %d) failed %{darwin.errno}d, dumping backtrace:%{public}s";
        int v24 = v38;
        os_log_type_t v25 = v39;
        uint32_t v26 = 34;
        goto LABEL_26;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446722;
        int v54 = "tcp_listener_socket_create";
        __int16 v55 = 1024;
        int v56 = v12;
        __int16 v57 = 1024;
        v58[0] = v33;
        __int16 v17 = "%{public}s bind(fd %d) failed %{darwin.errno}d, no backtrace";
LABEL_133:
        uint64_t v44 = v38;
        os_log_type_t v45 = v39;
        uint32_t v46 = 24;
        goto LABEL_123;
      }
    }
LABEL_124:
    if (v14) {
      free(v14);
    }
LABEL_126:
    BOOL v40 = 0;
    goto LABEL_127;
  }
  if (listen(v12, 10))
  {
    unsigned int v36 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    *a6 = v36;
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    int v54 = "tcp_listener_socket_create";
    __int16 v55 = 1024;
    int v56 = v36;
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v50 = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v14, &v50, &v48)) {
      goto LABEL_124;
    }
    if (v50 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t sa_len = v50;
      if (!os_log_type_enabled(v15, v50)) {
        goto LABEL_124;
      }
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v36;
      __int16 v17 = "%{public}s listen failed %{darwin.errno}d";
      goto LABEL_122;
    }
    if (!v48)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t sa_len = v50;
      if (!os_log_type_enabled(v15, v50)) {
        goto LABEL_124;
      }
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v36;
      __int16 v17 = "%{public}s listen failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_122;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v15 = __nwlog_obj();
    os_log_type_t sa_len = v50;
    BOOL v41 = os_log_type_enabled(v15, v50);
    if (!backtrace_string)
    {
      if (!v41) {
        goto LABEL_124;
      }
      *(_DWORD *)buf = 136446466;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v36;
      __int16 v17 = "%{public}s listen failed %{darwin.errno}d, no backtrace";
      goto LABEL_122;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446722;
      int v54 = "tcp_listener_socket_create";
      __int16 v55 = 1024;
      int v56 = v36;
      __int16 v57 = 2082;
      *(void *)uint64_t v58 = backtrace_string;
      os_log_type_t v22 = "%{public}s listen failed %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_27;
  }
  BOOL v40 = tcp_listener_socket_create_with_fd(a2, a1, v12);
  if (!v40) {
    *a6 = 12;
  }
LABEL_127:
  if (v12 != -1 && !v40) {
    close(v12);
  }
  return v40;
}

void tcp_listener_dns_handler(uint64_t a1, int a2, int a3, const char *a4, const char *a5, const char *a6, uint64_t a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unsigned int v13 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v18 = "tcp_listener_dns_handler";
    BOOL v14 = "<NULL>";
    int v17 = 136447490;
    if (a4) {
      BOOL v14 = a4;
    }
    __int16 v19 = 1024;
    int v20 = a2;
    os_log_type_t v15 = "NULL";
    __int16 v21 = 1024;
    if (a5) {
      os_log_type_t v16 = a5;
    }
    else {
      os_log_type_t v16 = "NULL";
    }
    int v22 = a3;
    if (a6) {
      os_log_type_t v15 = a6;
    }
    __int16 v23 = 2082;
    int v24 = v14;
    __int16 v25 = 2082;
    uint32_t v26 = v16;
    __int16 v27 = 2082;
    unsigned int v28 = v15;
    _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s flags=0x%x, errorCode=%d, name=%{public}s, type=%{public}s, domain=%{public}s", (uint8_t *)&v17, 0x36u);
  }
  if (a3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a7 + 72));
    tcp_listener_call_error_handler_locked((void *)a7, a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(a7 + 72));
  }
}

void __tcp_listener_socket_create_with_fd_block_invoke(uint64_t a1)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 72));
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2)
  {
    __nwlog_obj();
    int __buf = 136446210;
    *(void *)os_log_type_t v50 = "tcp_listener_accept_locked";
    unsigned int v33 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(block[0]) = 16;
    address.os_log_type_t sa_len = 0;
    if (!__nwlog_fault(v33, block, &address)) {
      goto LABEL_66;
    }
    if (LOBYTE(block[0]) == 17)
    {
      uint32_t v34 = __nwlog_obj();
      os_log_type_t v35 = block[0];
      if (!os_log_type_enabled(v34, block[0])) {
        goto LABEL_66;
      }
      int __buf = 136446210;
      *(void *)os_log_type_t v50 = "tcp_listener_accept_locked";
      unsigned int v36 = "%{public}s called with null listener";
    }
    else if (address.sa_len)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint32_t v34 = __nwlog_obj();
      os_log_type_t v35 = block[0];
      BOOL v38 = os_log_type_enabled(v34, block[0]);
      if (backtrace_string)
      {
        if (v38)
        {
          int __buf = 136446466;
          *(void *)os_log_type_t v50 = "tcp_listener_accept_locked";
          *(_WORD *)&v50[8] = 2082;
          *(void *)&v50[10] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null listener, dumping backtrace:%{public}s", (uint8_t *)&__buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_66;
      }
      if (!v38)
      {
LABEL_66:
        if (v33) {
          free(v33);
        }
        goto LABEL_51;
      }
      int __buf = 136446210;
      *(void *)os_log_type_t v50 = "tcp_listener_accept_locked";
      unsigned int v36 = "%{public}s called with null listener, no backtrace";
    }
    else
    {
      uint32_t v34 = __nwlog_obj();
      os_log_type_t v35 = block[0];
      if (!os_log_type_enabled(v34, block[0])) {
        goto LABEL_66;
      }
      int __buf = 136446210;
      *(void *)os_log_type_t v50 = "tcp_listener_accept_locked";
      unsigned int v36 = "%{public}s called with null listener, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v34, v35, v36, (uint8_t *)&__buf, 0xCu);
    goto LABEL_66;
  }
  int v39 = *(_DWORD *)(a1 + 40);
  while (1)
  {
    *(void *)&address.os_log_type_t sa_len = 0;
    *(void *)&address.sa_data[6] = 0;
    int v44 = 0;
    uint64_t v43 = 0;
    socklen_t v41 = 28;
    int v5 = accept(v39, &address, &v41);
    if (v5 < 0) {
      break;
    }
    int v6 = v5;
    if (setsockopt(v5, 0xFFFF, 4130, &tcp_listener_accept_locked_on, 4u))
    {
      nw_endpoint_t v21 = nw_endpoint_create_address(&address);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v22 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        logging_description = nw_endpoint_get_logging_description(v21);
        int __buf = 136446466;
        *(void *)os_log_type_t v50 = "tcp_listener_accept_locked";
        *(_WORD *)&v50[8] = 2082;
        *(void *)&v50[10] = logging_description;
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, "%{public}s Failed to set SO_NOSIGPIPE on new connection from %{public}s", (uint8_t *)&__buf, 0x16u);
      }
      if (v21) {
        goto LABEL_49;
      }
      goto LABEL_50;
    }
    if (xpc_dictionary_get_BOOL(*(xpc_object_t *)(v2 + 16), "localonly"))
    {
      pid_t v7 = getpid();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        uint32_t v46 = "tcp_listener_verify_local";
        __int16 v47 = 2048;
        uint64_t v48 = v2;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %p", buf, 0x16u);
      }
      int v9 = socket(17, 3, 0);
      if (v9 < 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v25 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v26 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          *(_DWORD *)buf = 136446466;
          uint32_t v46 = "tcp_listener_verify_local";
          __int16 v47 = 1024;
          LODWORD(v48) = v26;
          _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s failure to create routing socket %d", buf, 0x12u);
        }
      }
      else
      {
        int v10 = v9;
        tcp_listener_verify_local_seq = atomic_fetch_add_explicit(&tcp_listener_verify_local_seq, 1u, memory_order_relaxed)+ 1;
        *(_DWORD *)os_log_type_t v50 = 0;
        memset(&v50[16], 0, 32);
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        memset(v78, 0, sizeof(v78));
        HIWORD(__buf) = 4357;
        *(void *)&v50[4] = 0x100000807;
        size_t v11 = address.sa_len + 92;
        LOWORD(__buf) = address.sa_len + 92;
        *(_DWORD *)&v50[12] = v7;
        *(_DWORD *)&v50[16] = tcp_listener_verify_local_seq;
        __memcpy_chk();
        if (write(v10, &__buf, v11) < 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v27 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            int v28 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
            *(_DWORD *)buf = 136446466;
            uint32_t v46 = "tcp_listener_verify_local";
            __int16 v47 = 1024;
            LODWORD(v48) = v28;
            uint64_t v29 = "%{public}s failure while writing to the routing socket %d";
            goto LABEL_42;
          }
        }
        else
        {
          while (1)
          {
            ssize_t v12 = read(v10, &__buf, 0x200uLL);
            if (v12 < 1) {
              break;
            }
            if (*(_DWORD *)&v50[16] == tcp_listener_verify_local_seq && *(_DWORD *)&v50[12] == v7) {
              goto LABEL_18;
            }
          }
          if ((v12 & 0x8000000000000000) == 0)
          {
LABEL_18:
            close(v10);
            if ((*(_DWORD *)&v50[4] & 0x200400) == 0) {
              goto LABEL_44;
            }
            goto LABEL_19;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v27 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_43;
          }
          int v30 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          *(_DWORD *)buf = 136446466;
          uint32_t v46 = "tcp_listener_verify_local";
          __int16 v47 = 1024;
          LODWORD(v48) = v30;
          uint64_t v29 = "%{public}s failure reading from the routing socket %d";
LABEL_42:
          _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, v29, buf, 0x12u);
        }
LABEL_43:
        close(v10);
      }
LABEL_44:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG) || gLogFDOverride != -1)
      {
        nw_endpoint_t v21 = nw_endpoint_create_address(&address);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unsigned int v31 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          BOOL v32 = nw_endpoint_get_logging_description(v21);
          int __buf = 136446466;
          *(void *)os_log_type_t v50 = "tcp_listener_accept_locked";
          *(_WORD *)&v50[8] = 2082;
          *(void *)&v50[10] = v32;
          _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring non-local connection from %{public}s", (uint8_t *)&__buf, 0x16u);
        }
        if (v21) {
LABEL_49:
        }
          os_release(v21);
      }
LABEL_50:
      close(v6);
      goto LABEL_51;
    }
LABEL_19:
    unsigned int v13 = tcp_connection_create_with_connected_fd_inner(v6, 1);
    if (!v13)
    {
      close(v6);
      tcp_listener_call_error_handler_locked((void *)v2, 12);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v24 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int __buf = 136446210;
        *(void *)os_log_type_t v50 = "tcp_listener_accept_locked";
        _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_ERROR, "%{public}s tcp_connection_create_inbound() returned non-zero", (uint8_t *)&__buf, 0xCu);
      }
      goto LABEL_51;
    }
    BOOL v14 = v13;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG) || gLogFDOverride != -1)
    {
      nw_endpoint_t v15 = nw_endpoint_create_address(&address);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v16 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = tcp_connection_id(v14);
        unsigned int v18 = nw_endpoint_get_logging_description(v15);
        int __buf = 136446978;
        *(void *)os_log_type_t v50 = "tcp_listener_accept_locked";
        *(_WORD *)&v50[8] = 2048;
        *(void *)&v50[10] = v17;
        *(_WORD *)&v50[18] = 1024;
        *(_DWORD *)&v50[20] = v6;
        *(_WORD *)&v50[24] = 2082;
        *(void *)&v50[26] = v18;
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s client connection %llu fd=%d from %{public}s", (uint8_t *)&__buf, 0x26u);
      }
      if (v15) {
        os_release(v15);
      }
    }
    uint64_t v3 = *(void *)(v2 + 40);
    if (v3)
    {
      size_t v4 = *(NSObject **)(v2 + 32);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __tcp_listener_accept_locked_block_invoke;
      block[3] = &unk_1E52406A8;
      block[5] = v14;
      void block[6] = v2;
      block[4] = v3;
      dispatch_async(v4, block);
    }
    else
    {
      os_release(v14);
    }
  }
  int v19 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (v19 != 35)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v20 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int __buf = 136446466;
      *(void *)os_log_type_t v50 = "tcp_listener_accept_locked";
      *(_WORD *)&v50[8] = 1024;
      *(_DWORD *)&v50[10] = v19;
      _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s accept failed %{darwin.errno}d", (uint8_t *)&__buf, 0x12u);
    }
    tcp_listener_call_error_handler_locked((void *)v2, v19);
  }
LABEL_51:
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 72));
}

void __tcp_listener_socket_create_with_fd_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  close(*(_DWORD *)(a1 + 48));
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  if (v2)
  {
    os_release(v2);
  }
}

void __tcp_listener_accept_locked_block_invoke(void *a1)
{
  uint64_t v1 = (void *)a1[5];
  if (*(_DWORD *)(a1[6] + 80) != 3) {
    (*(void (**)(void))(a1[4] + 16))();
  }
  if (v1)
  {
    os_release(v1);
  }
}

void __Block_byref_object_copy__35071(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__35072(uint64_t a1)
{
}

void __tcp_listener_call_error_handler_locked_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2[20] == 3
    || ((*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) + 16))(),
        (uint64_t v2 = *(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) != 0))
  {
    os_release(v2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  uint64_t v3 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v3)
  {
    _Block_release(v3);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = 0;
  }
}

void tcp_listener_cancel_locked(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 136446466;
    int v10 = "tcp_listener_cancel_locked";
    __int16 v11 = 2048;
    ssize_t v12 = a1;
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %p", (uint8_t *)&v9, 0x16u);
  }
  while (1)
  {
    uint64_t v3 = (void *)a1[8];
    if (!v3) {
      break;
    }
    a1[8] = *(void *)v3;
    size_t v4 = *((void *)v3 + 1);
    if (v4)
    {
      dispatch_source_cancel(v4);
      if (!*((unsigned char *)v3 + 20)) {
        dispatch_resume(*((dispatch_object_t *)v3 + 1));
      }
    }
    else
    {
      int v5 = *((_DWORD *)v3 + 4);
      if (v5 != -1) {
        close(v5);
      }
    }
    free(v3);
  }
  int v6 = (const void *)a1[5];
  if (v6)
  {
    _Block_release(v6);
    a1[5] = 0;
  }
  pid_t v7 = (const void *)a1[6];
  if (v7)
  {
    _Block_release(v7);
    a1[6] = 0;
  }
  uint64_t v8 = (_DNSServiceRef_t *)a1[7];
  if (v8)
  {
    DNSServiceRefDeallocate(v8);
    a1[7] = 0;
  }
}

void tcp_listener_cancel(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    *(_DWORD *)(a1 + 80) = 3;
    os_unfair_lock_unlock(v2);
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    BOOL v14 = 0;
    BOOL v14 = os_retain((void *)a1);
    uint64_t v3 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __tcp_listener_cancel_block_invoke;
    block[3] = &unk_1E52405B0;
    block[4] = buf;
    dispatch_async(v3, block);
    _Block_object_dispose(buf, 8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "tcp_listener_cancel";
  size_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_cancel";
      pid_t v7 = "%{public}s called with null listener";
      goto LABEL_17;
    }
    if (!v11)
    {
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_cancel";
      pid_t v7 = "%{public}s called with null listener, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_listener_cancel";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_listener_cancel";
      pid_t v7 = "%{public}s called with null listener, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_18:
  if (v4) {
    free(v4);
  }
}

void __tcp_listener_cancel_block_invoke(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 72));
  tcp_listener_cancel_locked(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 72));
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    os_release(v2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

uint64_t tcp_listener_get_dns_service_ref(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    uint64_t v3 = *(void *)(a1 + 56);
    os_unfair_lock_unlock(v2);
    return v3;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "tcp_listener_get_dns_service_ref";
  int v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "tcp_listener_get_dns_service_ref";
        uint64_t v8 = "%{public}s called with null listener";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v14 = "tcp_listener_get_dns_service_ref";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "tcp_listener_get_dns_service_ref";
        uint64_t v8 = "%{public}s called with null listener, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "tcp_listener_get_dns_service_ref";
        uint64_t v8 = "%{public}s called with null listener, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v5) {
    free(v5);
  }
  return 0;
}

void tcp_listener_set_accept_handler(uint64_t a1, const void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v18 = "tcp_listener_set_accept_handler";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v18 = "tcp_listener_set_accept_handler";
      BOOL v10 = "%{public}s called with null listener";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v18 = "tcp_listener_set_accept_handler";
          __int16 v19 = 2082;
          int v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_38:
        if (!v7) {
          return;
        }
        goto LABEL_39;
      }
      if (!v12) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v18 = "tcp_listener_set_accept_handler";
      BOOL v10 = "%{public}s called with null listener, no backtrace";
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v18 = "tcp_listener_set_accept_handler";
      BOOL v10 = "%{public}s called with null listener, backtrace limit exceeded";
    }
LABEL_37:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_38;
  }
  if (a2)
  {
    size_t v4 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    if (*(const void **)(a1 + 40) != a2)
    {
      int v5 = _Block_copy(a2);
      os_log_type_t v6 = *(const void **)(a1 + 40);
      if (v6) {
        _Block_release(v6);
      }
      *(void *)(a1 + 40) = v5;
    }
    os_unfair_lock_unlock(v4);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned int v18 = "tcp_listener_set_accept_handler";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v18 = "tcp_listener_set_accept_handler";
    BOOL v10 = "%{public}s called with null acceptblk";
    goto LABEL_37;
  }
  if (!v15)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v18 = "tcp_listener_set_accept_handler";
    BOOL v10 = "%{public}s called with null acceptblk, backtrace limit exceeded";
    goto LABEL_37;
  }
  uint64_t v13 = (char *)__nw_create_backtrace_string();
  uint64_t v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  BOOL v14 = os_log_type_enabled(v8, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v18 = "tcp_listener_set_accept_handler";
    BOOL v10 = "%{public}s called with null acceptblk, no backtrace";
    goto LABEL_37;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    unsigned int v18 = "tcp_listener_set_accept_handler";
    __int16 v19 = 2082;
    int v20 = v13;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null acceptblk, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7) {
LABEL_39:
  }
    free(v7);
}

void tcp_listener_set_accept_handler_f(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "tcp_listener_set_accept_handler_f";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v7, &v17, &v16)) {
      goto LABEL_37;
    }
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v17;
      if (!os_log_type_enabled(v8, v17)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v19 = "tcp_listener_set_accept_handler_f";
      BOOL v10 = "%{public}s called with null listener";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v17;
      BOOL v12 = os_log_type_enabled(v8, v17);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v19 = "tcp_listener_set_accept_handler_f";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_37:
        if (!v7) {
          return;
        }
LABEL_38:
        free(v7);
        return;
      }
      if (!v12) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v19 = "tcp_listener_set_accept_handler_f";
      BOOL v10 = "%{public}s called with null listener, no backtrace";
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v17;
      if (!os_log_type_enabled(v8, v17)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v19 = "tcp_listener_set_accept_handler_f";
      BOOL v10 = "%{public}s called with null listener, backtrace limit exceeded";
    }
LABEL_36:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_37;
  }
  if (a3)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 0x40000000;
    aBlock[2] = __tcp_listener_set_accept_handler_f_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_3;
    aBlock[4] = a3;
    aBlock[5] = a2;
    size_t v4 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    if (*(void **)(a1 + 40) != aBlock)
    {
      int v5 = _Block_copy(aBlock);
      os_log_type_t v6 = *(const void **)(a1 + 40);
      if (v6) {
        _Block_release(v6);
      }
      *(void *)(a1 + 40) = v5;
    }
    os_unfair_lock_unlock(v4);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v19 = "tcp_listener_set_accept_handler_f";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v7, &v17, &v16)) {
    goto LABEL_37;
  }
  if (v17 == OS_LOG_TYPE_FAULT)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "tcp_listener_set_accept_handler_f";
    BOOL v10 = "%{public}s called with null acceptfnc";
    goto LABEL_36;
  }
  if (!v16)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "tcp_listener_set_accept_handler_f";
    BOOL v10 = "%{public}s called with null acceptfnc, backtrace limit exceeded";
    goto LABEL_36;
  }
  uint64_t v13 = (char *)__nw_create_backtrace_string();
  uint64_t v8 = __nwlog_obj();
  os_log_type_t v9 = v17;
  BOOL v14 = os_log_type_enabled(v8, v17);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "tcp_listener_set_accept_handler_f";
    BOOL v10 = "%{public}s called with null acceptfnc, no backtrace";
    goto LABEL_36;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v19 = "tcp_listener_set_accept_handler_f";
    __int16 v20 = 2082;
    uint64_t v21 = v13;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null acceptfnc, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7) {
    goto LABEL_38;
  }
}

uint64_t __tcp_listener_set_accept_handler_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void tcp_listener_set_error_handler(uint64_t a1, const void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v18 = "tcp_listener_set_error_handler";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v18 = "tcp_listener_set_error_handler";
      BOOL v10 = "%{public}s called with null listener";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v18 = "tcp_listener_set_error_handler";
          __int16 v19 = 2082;
          __int16 v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_38:
        if (!v7) {
          return;
        }
        goto LABEL_39;
      }
      if (!v12) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v18 = "tcp_listener_set_error_handler";
      BOOL v10 = "%{public}s called with null listener, no backtrace";
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v18 = "tcp_listener_set_error_handler";
      BOOL v10 = "%{public}s called with null listener, backtrace limit exceeded";
    }
LABEL_37:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_38;
  }
  if (a2)
  {
    size_t v4 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    if (*(const void **)(a1 + 48) != a2)
    {
      int v5 = _Block_copy(a2);
      os_log_type_t v6 = *(const void **)(a1 + 48);
      if (v6) {
        _Block_release(v6);
      }
      *(void *)(a1 + 48) = v5;
    }
    os_unfair_lock_unlock(v4);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned int v18 = "tcp_listener_set_error_handler";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v18 = "tcp_listener_set_error_handler";
    BOOL v10 = "%{public}s called with null handler";
    goto LABEL_37;
  }
  if (!v15)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v18 = "tcp_listener_set_error_handler";
    BOOL v10 = "%{public}s called with null handler, backtrace limit exceeded";
    goto LABEL_37;
  }
  uint64_t v13 = (char *)__nw_create_backtrace_string();
  uint64_t v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  BOOL v14 = os_log_type_enabled(v8, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v18 = "tcp_listener_set_error_handler";
    BOOL v10 = "%{public}s called with null handler, no backtrace";
    goto LABEL_37;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    unsigned int v18 = "tcp_listener_set_error_handler";
    __int16 v19 = 2082;
    __int16 v20 = v13;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7) {
LABEL_39:
  }
    free(v7);
}

void tcp_listener_set_error_handler_f(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "tcp_listener_set_error_handler_f";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v7, &v17, &v16)) {
      goto LABEL_37;
    }
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v17;
      if (!os_log_type_enabled(v8, v17)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v19 = "tcp_listener_set_error_handler_f";
      BOOL v10 = "%{public}s called with null listener";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v17;
      BOOL v12 = os_log_type_enabled(v8, v17);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v19 = "tcp_listener_set_error_handler_f";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_37:
        if (!v7) {
          return;
        }
LABEL_38:
        free(v7);
        return;
      }
      if (!v12) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v19 = "tcp_listener_set_error_handler_f";
      BOOL v10 = "%{public}s called with null listener, no backtrace";
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v17;
      if (!os_log_type_enabled(v8, v17)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v19 = "tcp_listener_set_error_handler_f";
      BOOL v10 = "%{public}s called with null listener, backtrace limit exceeded";
    }
LABEL_36:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_37;
  }
  if (a3)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 0x40000000;
    aBlock[2] = __tcp_listener_set_error_handler_f_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_5_35127;
    aBlock[4] = a3;
    aBlock[5] = a2;
    size_t v4 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    if (*(void **)(a1 + 48) != aBlock)
    {
      int v5 = _Block_copy(aBlock);
      os_log_type_t v6 = *(const void **)(a1 + 48);
      if (v6) {
        _Block_release(v6);
      }
      *(void *)(a1 + 48) = v5;
    }
    os_unfair_lock_unlock(v4);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v19 = "tcp_listener_set_error_handler_f";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v7, &v17, &v16)) {
    goto LABEL_37;
  }
  if (v17 == OS_LOG_TYPE_FAULT)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "tcp_listener_set_error_handler_f";
    BOOL v10 = "%{public}s called with null handler";
    goto LABEL_36;
  }
  if (!v16)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "tcp_listener_set_error_handler_f";
    BOOL v10 = "%{public}s called with null handler, backtrace limit exceeded";
    goto LABEL_36;
  }
  uint64_t v13 = (char *)__nw_create_backtrace_string();
  uint64_t v8 = __nwlog_obj();
  os_log_type_t v9 = v17;
  BOOL v14 = os_log_type_enabled(v8, v17);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v19 = "tcp_listener_set_error_handler_f";
    BOOL v10 = "%{public}s called with null handler, no backtrace";
    goto LABEL_36;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v19 = "tcp_listener_set_error_handler_f";
    __int16 v20 = 2082;
    uint64_t v21 = v13;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7) {
    goto LABEL_38;
  }
}

uint64_t __tcp_listener_set_error_handler_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

uint64_t tcp_listener_set_port(uint64_t a1, const char *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    v16.ai_flags = 136446210;
    *(void *)&v16.ai_family = "tcp_listener_set_port";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, type, &v15)) {
      goto LABEL_39;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v15)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type[0];
        if (!os_log_type_enabled(v7, type[0])) {
          goto LABEL_39;
        }
        v16.ai_flags = 136446210;
        *(void *)&v16.ai_family = "tcp_listener_set_port";
        os_log_type_t v9 = "%{public}s called with null listener, backtrace limit exceeded";
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type[0];
      BOOL v11 = os_log_type_enabled(v7, type[0]);
      if (!backtrace_string)
      {
        if (!v11) {
          goto LABEL_39;
        }
        v16.ai_flags = 136446210;
        *(void *)&v16.ai_family = "tcp_listener_set_port";
        os_log_type_t v9 = "%{public}s called with null listener, no backtrace";
        goto LABEL_38;
      }
      if (v11)
      {
        v16.ai_flags = 136446466;
        *(void *)&v16.ai_family = "tcp_listener_set_port";
        LOWORD(v16.ai_protocol) = 2082;
        *(void *)((char *)&v16.ai_protocol + 2) = backtrace_string;
        BOOL v12 = "%{public}s called with null listener, dumping backtrace:%{public}s";
LABEL_28:
        _os_log_impl(&dword_1830D4000, v7, v8, v12, (uint8_t *)&v16, 0x16u);
      }
LABEL_29:
      free(backtrace_string);
      goto LABEL_39;
    }
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type[0];
    if (!os_log_type_enabled(v7, type[0])) {
      goto LABEL_39;
    }
    v16.ai_flags = 136446210;
    *(void *)&v16.ai_family = "tcp_listener_set_port";
    os_log_type_t v9 = "%{public}s called with null listener";
LABEL_38:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, (uint8_t *)&v16, 0xCu);
LABEL_39:
    if (v6) {
      free(v6);
    }
    return 22;
  }
  if (!a2)
  {
    __nwlog_obj();
    v16.ai_flags = 136446210;
    *(void *)&v16.ai_family = "tcp_listener_set_port";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, type, &v15)) {
      goto LABEL_39;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type[0];
      if (!os_log_type_enabled(v7, type[0])) {
        goto LABEL_39;
      }
      v16.ai_flags = 136446210;
      *(void *)&v16.ai_family = "tcp_listener_set_port";
      os_log_type_t v9 = "%{public}s called with null portstr";
      goto LABEL_38;
    }
    if (!v15)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type[0];
      if (!os_log_type_enabled(v7, type[0])) {
        goto LABEL_39;
      }
      v16.ai_flags = 136446210;
      *(void *)&v16.ai_family = "tcp_listener_set_port";
      os_log_type_t v9 = "%{public}s called with null portstr, backtrace limit exceeded";
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type[0];
    BOOL v13 = os_log_type_enabled(v7, type[0]);
    if (backtrace_string)
    {
      if (v13)
      {
        v16.ai_flags = 136446466;
        *(void *)&v16.ai_family = "tcp_listener_set_port";
        LOWORD(v16.ai_protocol) = 2082;
        *(void *)((char *)&v16.ai_protocol + 2) = backtrace_string;
        BOOL v12 = "%{public}s called with null portstr, dumping backtrace:%{public}s";
        goto LABEL_28;
      }
      goto LABEL_29;
    }
    if (!v13) {
      goto LABEL_39;
    }
    v16.ai_flags = 136446210;
    *(void *)&v16.ai_family = "tcp_listener_set_port";
    os_log_type_t v9 = "%{public}s called with null portstr, no backtrace";
    goto LABEL_38;
  }
  if (xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 16), "launchd")) {
    return 22;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    memset(&v16.ai_addrlen, 0, 32);
    v16.ai_flags = 0;
    v16.ai_protocol = 6;
    *(void *)&v16.ai_family = 0x100000002;
    *(void *)os_log_type_t type = 0;
    uint64_t v4 = getaddrinfo(0, a2, &v16, (addrinfo **)type);
    if (!v4)
    {
      xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 16), "port", *(unsigned __int16 *)(*(void *)(*(void *)type + 32) + 2));
      if (*(void *)type) {
        freeaddrinfo(*(addrinfo **)type);
      }
    }
  }
  else
  {
    uint64_t v4 = 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return v4;
}

uint64_t tcp_listener_get_port(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    uint64_t v3 = *(unsigned __int16 *)(a1 + 84);
    os_unfair_lock_unlock(v2);
    return v3;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "tcp_listener_get_port";
  int v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "tcp_listener_get_port";
        os_log_type_t v8 = "%{public}s called with null listener";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v14 = "tcp_listener_get_port";
          __int16 v15 = 2082;
          addrinfo v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "tcp_listener_get_port";
        os_log_type_t v8 = "%{public}s called with null listener, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "tcp_listener_get_port";
        os_log_type_t v8 = "%{public}s called with null listener, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v5) {
    free(v5);
  }
  return 0;
}

void tcp_listener_set_local_only(uint64_t a1, BOOL a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    if (*(_DWORD *)(a1 + 80) == 1)
    {
      xpc_dictionary_set_BOOL(*(xpc_object_t *)(a1 + 16), "localonly", a2);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v5 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "tcp_listener_set_local_only";
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s listener is already running", buf, 0xCu);
      }
    }
    os_unfair_lock_unlock(v4);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v15 = "tcp_listener_set_local_only";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v15 = "tcp_listener_set_local_only";
      os_log_type_t v9 = "%{public}s called with null listener";
      goto LABEL_21;
    }
    if (!v12)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v15 = "tcp_listener_set_local_only";
      os_log_type_t v9 = "%{public}s called with null listener, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v15 = "tcp_listener_set_local_only";
        __int16 v16 = 2082;
        uint64_t v17 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v15 = "tcp_listener_set_local_only";
      os_log_type_t v9 = "%{public}s called with null listener, no backtrace";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
}

void tcp_listener_set_tfo(uint64_t a1, BOOL a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    if (*(_DWORD *)(a1 + 80) == 1)
    {
      xpc_dictionary_set_BOOL(*(xpc_object_t *)(a1 + 16), "tfo", a2);
LABEL_19:
      os_unfair_lock_unlock(v4);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    int v24 = "tcp_listener_set_tfo";
    int v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v5, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        int v24 = "tcp_listener_set_tfo";
        os_log_type_t v8 = "%{public}s listener is already running";
LABEL_15:
        BOOL v13 = v6;
        os_log_type_t v14 = v7;
LABEL_16:
        _os_log_impl(&dword_1830D4000, v13, v14, v8, buf, 0xCu);
        goto LABEL_17;
      }
      if (!v21)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        int v24 = "tcp_listener_set_tfo";
        os_log_type_t v8 = "%{public}s listener is already running, backtrace limit exceeded";
        goto LABEL_15;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          int v24 = "tcp_listener_set_tfo";
          __int16 v25 = 2082;
          int v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s listener is already running, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_17;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "tcp_listener_set_tfo";
        os_log_type_t v8 = "%{public}s listener is already running, no backtrace";
        BOOL v13 = v10;
        os_log_type_t v14 = v11;
        goto LABEL_16;
      }
    }
LABEL_17:
    if (v5) {
      free(v5);
    }
    goto LABEL_19;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v24 = "tcp_listener_set_tfo";
  __int16 v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v15, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      int v24 = "tcp_listener_set_tfo";
      uint64_t v18 = "%{public}s called with null listener";
      goto LABEL_36;
    }
    if (!v21)
    {
      __int16 v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      int v24 = "tcp_listener_set_tfo";
      uint64_t v18 = "%{public}s called with null listener, backtrace limit exceeded";
      goto LABEL_36;
    }
    __int16 v19 = (char *)__nw_create_backtrace_string();
    __int16 v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v20 = os_log_type_enabled(v16, type);
    if (v19)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        int v24 = "tcp_listener_set_tfo";
        __int16 v25 = 2082;
        int v26 = v19;
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v19);
      goto LABEL_37;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      int v24 = "tcp_listener_set_tfo";
      uint64_t v18 = "%{public}s called with null listener, no backtrace";
LABEL_36:
      _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
    }
  }
LABEL_37:
  if (v15) {
    free(v15);
  }
}

void tcp_listener_enable_coprocessor_interface(uint64_t a1, char a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __tcp_listener_enable_coprocessor_interface_block_invoke;
    block[3] = &__block_descriptor_tmp_6_35165;
    block[4] = a1;
    char v10 = a2;
    dispatch_sync(v2, block);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v14 = "tcp_listener_enable_coprocessor_interface";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v12 = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v3, &v12, &v11))
  {
    if (v12 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = v12;
      if (!os_log_type_enabled(v4, v12)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v14 = "tcp_listener_enable_coprocessor_interface";
      uint64_t v6 = "%{public}s called with null listener";
      goto LABEL_17;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = v12;
      if (!os_log_type_enabled(v4, v12)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v14 = "tcp_listener_enable_coprocessor_interface";
      uint64_t v6 = "%{public}s called with null listener, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = v12;
    BOOL v8 = os_log_type_enabled(v4, v12);
    if (backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v14 = "tcp_listener_enable_coprocessor_interface";
        __int16 v15 = 2082;
        __int16 v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v14 = "tcp_listener_enable_coprocessor_interface";
      uint64_t v6 = "%{public}s called with null listener, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    }
  }
LABEL_18:
  if (v3) {
    free(v3);
  }
}

void __tcp_listener_enable_coprocessor_interface_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v1 + 80) == 1)
  {
    char v2 = *(unsigned char *)(a1 + 40);
    uint64_t v3 = *(void **)(v1 + 16);
    xpc_dictionary_set_BOOL(v3, "coproc", v2);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "tcp_listener_enable_coprocessor_interface_block_invoke";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v4, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "tcp_listener_enable_coprocessor_interface_block_invoke";
      os_log_type_t v7 = "%{public}s listener is already running";
LABEL_16:
      os_log_type_t v12 = v5;
      os_log_type_t v13 = v6;
LABEL_17:
      _os_log_impl(&dword_1830D4000, v12, v13, v7, buf, 0xCu);
      goto LABEL_18;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "tcp_listener_enable_coprocessor_interface_block_invoke";
      os_log_type_t v7 = "%{public}s listener is already running, backtrace limit exceeded";
      goto LABEL_16;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = gLogObj;
    os_log_type_t v10 = type;
    BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v17 = "tcp_listener_enable_coprocessor_interface_block_invoke";
        __int16 v18 = 2082;
        __int16 v19 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s listener is already running, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "tcp_listener_enable_coprocessor_interface_block_invoke";
      os_log_type_t v7 = "%{public}s listener is already running, no backtrace";
      os_log_type_t v12 = v9;
      os_log_type_t v13 = v10;
      goto LABEL_17;
    }
  }
LABEL_18:
  if (v4) {
    free(v4);
  }
}

void tcp_listener_set_service(uint64_t a1, const char *a2, const char *a3, const char *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v21 = "tcp_listener_set_service";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      char v21 = "tcp_listener_set_service";
      os_log_type_t v13 = "%{public}s called with null listener";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          char v21 = "tcp_listener_set_service";
          __int16 v22 = 2082;
          __int16 v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_40:
        if (!v10) {
          return;
        }
LABEL_41:
        free(v10);
        return;
      }
      if (!v15) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      char v21 = "tcp_listener_set_service";
      os_log_type_t v13 = "%{public}s called with null listener, no backtrace";
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      char v21 = "tcp_listener_set_service";
      os_log_type_t v13 = "%{public}s called with null listener, backtrace limit exceeded";
    }
LABEL_39:
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    goto LABEL_40;
  }
  if (a3)
  {
    BOOL v8 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    if (*(_DWORD *)(a1 + 80) == 1)
    {
      if (a2) {
        xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 16), "srvname", a2);
      }
      xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 16), "srvtype", a3);
      if (a4) {
        xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 16), "srvdomain", a4);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "tcp_listener_set_service";
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s listener is already running", buf, 0xCu);
      }
    }
    os_unfair_lock_unlock(v8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v21 = "tcp_listener_set_service";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (!__nwlog_fault(v10, &type, &v18)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    char v21 = "tcp_listener_set_service";
    os_log_type_t v13 = "%{public}s called with null regtype";
    goto LABEL_39;
  }
  if (!v18)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    char v21 = "tcp_listener_set_service";
    os_log_type_t v13 = "%{public}s called with null regtype, backtrace limit exceeded";
    goto LABEL_39;
  }
  __int16 v16 = (char *)__nw_create_backtrace_string();
  BOOL v11 = __nwlog_obj();
  os_log_type_t v12 = type;
  BOOL v17 = os_log_type_enabled(v11, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    char v21 = "tcp_listener_set_service";
    os_log_type_t v13 = "%{public}s called with null regtype, no backtrace";
    goto LABEL_39;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    char v21 = "tcp_listener_set_service";
    __int16 v22 = 2082;
    __int16 v23 = v16;
    _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null regtype, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v16);
  if (v10) {
    goto LABEL_41;
  }
}

void tcp_listener_set_register_p2p(uint64_t a1, BOOL a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    if (*(_DWORD *)(a1 + 80) == 1)
    {
      xpc_dictionary_set_BOOL(*(xpc_object_t *)(a1 + 16), "registerp2p", a2);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "tcp_listener_set_register_p2p";
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s listener is already running", buf, 0xCu);
      }
    }
    os_unfair_lock_unlock(v4);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "tcp_listener_set_register_p2p";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "tcp_listener_set_register_p2p";
      os_log_type_t v9 = "%{public}s called with null listener";
      goto LABEL_21;
    }
    if (!v12)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "tcp_listener_set_register_p2p";
      os_log_type_t v9 = "%{public}s called with null listener, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v15 = "tcp_listener_set_register_p2p";
        __int16 v16 = 2082;
        BOOL v17 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "tcp_listener_set_register_p2p";
      os_log_type_t v9 = "%{public}s called with null listener, no backtrace";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
}

void tcp_listener_set_interface(uint64_t a1, const char *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    if (*(_DWORD *)(a1 + 80) == 1)
    {
      xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 16), "interface", a2);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "tcp_listener_set_interface";
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s listener is already running", buf, 0xCu);
      }
    }
    os_unfair_lock_unlock(v4);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "tcp_listener_set_interface";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "tcp_listener_set_interface";
      os_log_type_t v9 = "%{public}s called with null listener";
      goto LABEL_21;
    }
    if (!v12)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "tcp_listener_set_interface";
      os_log_type_t v9 = "%{public}s called with null listener, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v15 = "tcp_listener_set_interface";
        __int16 v16 = 2082;
        BOOL v17 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "tcp_listener_set_interface";
      os_log_type_t v9 = "%{public}s called with null listener, no backtrace";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_22:
  if (v6) {
    free(v6);
  }
}

void *tcp_listener_retain(void *object)
{
  if (object) {
    return os_retain(object);
  }
  return object;
}

void tcp_listener_release(void *object)
{
  if (object) {
    os_release(object);
  }
}

void tcp_connection_retain(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    os_retain(a1);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  char v14 = "tcp_connection_retain";
  uint64_t v1 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v1, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v2 = gLogObj;
      os_log_type_t v3 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "tcp_connection_retain";
      uint64_t v4 = "%{public}s called with null connection";
LABEL_16:
      os_log_type_t v9 = v2;
      os_log_type_t v10 = v3;
LABEL_17:
      _os_log_impl(&dword_1830D4000, v9, v10, v4, buf, 0xCu);
      goto LABEL_18;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v2 = gLogObj;
      os_log_type_t v3 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "tcp_connection_retain";
      uint64_t v4 = "%{public}s called with null connection, backtrace limit exceeded";
      goto LABEL_16;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v6 = gLogObj;
    os_log_type_t v7 = type;
    BOOL v8 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        char v14 = "tcp_connection_retain";
        __int16 v15 = 2082;
        __int16 v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446210;
      char v14 = "tcp_connection_retain";
      uint64_t v4 = "%{public}s called with null connection, no backtrace";
      os_log_type_t v9 = v6;
      os_log_type_t v10 = v7;
      goto LABEL_17;
    }
  }
LABEL_18:
  if (v1) {
    free(v1);
  }
}

void tcp_connection_release(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    os_release(a1);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  char v14 = "tcp_connection_release";
  uint64_t v1 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v1, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v2 = gLogObj;
      os_log_type_t v3 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "tcp_connection_release";
      uint64_t v4 = "%{public}s called with null connection";
LABEL_16:
      os_log_type_t v9 = v2;
      os_log_type_t v10 = v3;
LABEL_17:
      _os_log_impl(&dword_1830D4000, v9, v10, v4, buf, 0xCu);
      goto LABEL_18;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v2 = gLogObj;
      os_log_type_t v3 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "tcp_connection_release";
      uint64_t v4 = "%{public}s called with null connection, backtrace limit exceeded";
      goto LABEL_16;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v6 = gLogObj;
    os_log_type_t v7 = type;
    BOOL v8 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        char v14 = "tcp_connection_release";
        __int16 v15 = 2082;
        __int16 v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446210;
      char v14 = "tcp_connection_release";
      uint64_t v4 = "%{public}s called with null connection, no backtrace";
      os_log_type_t v9 = v6;
      os_log_type_t v10 = v7;
      goto LABEL_17;
    }
  }
LABEL_18:
  if (v1) {
    free(v1);
  }
}

void sub_1838E8714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NWConcrete_nw_authentication_challenge;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

NWConcrete_nw_authentication_protection_space *nw_authentication_protection_space_create(int a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  BOOL result = [NWConcrete_nw_authentication_protection_space alloc];
  if (!result) {
    return result;
  }
  v13.receiver = result;
  v13.super_class = (Class)NWConcrete_nw_authentication_protection_space;
  BOOL result = (NWConcrete_nw_authentication_protection_space *)objc_msgSendSuper2(&v13, sel_init);
  if (result)
  {
    result->os_log_type_t type = a1;
    return result;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  __int16 v15 = "-[NWConcrete_nw_authentication_protection_space initWithType:]";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (id)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "-[NWConcrete_nw_authentication_protection_space initWithType:]";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s [super init] failed", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (id)gLogObj;
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v15 = "-[NWConcrete_nw_authentication_protection_space initWithType:]";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "-[NWConcrete_nw_authentication_protection_space initWithType:]";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "-[NWConcrete_nw_authentication_protection_space initWithType:]";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v4) {
    free(v4);
  }
  return 0;
}

void nw_authentication_protection_space_set_is_proxy(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    *((unsigned char *)v3 + 28) = *((unsigned char *)v3 + 28) & 0xFE | a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_authentication_protection_space_set_is_proxy";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_authentication_protection_space_set_is_proxy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protection_space", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_authentication_protection_space_set_is_proxy";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null protection_space, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_authentication_protection_space_set_is_proxy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null protection_space, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_authentication_protection_space_set_is_proxy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null protection_space, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_authentication_protection_space_get_is_proxy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 28) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_authentication_protection_space_get_is_proxy";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_authentication_protection_space_get_is_proxy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protection_space", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_authentication_protection_space_get_is_proxy";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null protection_space, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_authentication_protection_space_get_is_proxy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null protection_space, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_authentication_protection_space_get_is_proxy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null protection_space, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_authentication_protection_space_set_endpoint(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 1, a2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_authentication_protection_space_set_endpoint";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_authentication_protection_space_set_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protection_space", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_authentication_protection_space_set_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null protection_space, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_authentication_protection_space_set_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null protection_space, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_authentication_protection_space_set_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null protection_space, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

id nw_authentication_protection_space_copy_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[1];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_authentication_protection_space_copy_endpoint";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_authentication_protection_space_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protection_space", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_authentication_protection_space_copy_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null protection_space, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_authentication_protection_space_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null protection_space, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_authentication_protection_space_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null protection_space, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_authentication_protection_space_set_realm(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_authentication_protection_space_set_realm";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_authentication_protection_space_set_realm";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protection_space", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v9 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v20 = "nw_authentication_protection_space_set_realm";
            __int16 v21 = 2082;
            __int16 v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null protection_space, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_authentication_protection_space_set_realm";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null protection_space, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v9 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_authentication_protection_space_set_realm";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null protection_space, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_26:
    if (v8) {
      free(v8);
    }
    goto LABEL_7;
  }
  uint64_t v5 = (void *)v3[2];
  if (v5)
  {
    free(v5);
    v4[2] = 0;
  }
  if (!a2) {
    goto LABEL_7;
  }
  os_log_type_t v6 = strdup(a2);
  if (v6)
  {
LABEL_6:
    v4[2] = v6;
LABEL_7:

    return;
  }
  BOOL v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "strict_strdup";
  os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v12))
  {
    free(v12);
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t nw_authentication_protection_space_get_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[6];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_authentication_protection_space_get_type";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_authentication_protection_space_get_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protection_space", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_authentication_protection_space_get_type";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null protection_space, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_authentication_protection_space_get_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null protection_space, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_authentication_protection_space_get_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null protection_space, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_authentication_protection_space_set_proxy_origin_is_cleartext(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 28) = *((unsigned char *)v3 + 28) & 0xFD | v5;
    goto LABEL_6;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_authentication_protection_space_set_proxy_origin_is_cleartext";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_authentication_protection_space_set_proxy_origin_is_cleartext";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protection_space", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_authentication_protection_space_set_proxy_origin_is_cleartext";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null protection_space, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_authentication_protection_space_set_proxy_origin_is_cleartext";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null protection_space, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_authentication_protection_space_set_proxy_origin_is_cleartext";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null protection_space, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

NWConcrete_nw_authentication_challenge *nw_authentication_challenge_create()
{
  return objc_alloc_init(NWConcrete_nw_authentication_challenge);
}

uint64_t nw_authentication_challenge_get_type(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = (unint64_t *)v1;
  if (!v1)
  {
    os_log_type_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_authentication_challenge_get_type";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_authentication_challenge_get_type";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null challenge", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (!v20)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_authentication_challenge_get_type";
        _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_authentication_challenge_get_type";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_authentication_challenge_get_type";
      __int16 v24 = 2082;
      __int16 v25 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_24;
  }
  uint64_t v3 = *((void *)v1 + 3);
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_authentication_challenge_get_type";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_authentication_challenge_get_type";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null challenge->protection_space_array", buf, 0xCu);
      }
LABEL_36:

LABEL_37:
      if (v7) {
        free(v7);
      }
      goto LABEL_39;
    }
    if (!v20)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_authentication_challenge_get_type";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null challenge->protection_space_array, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_authentication_challenge_get_type";
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null challenge->protection_space_array, no backtrace", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_authentication_challenge_get_type";
      __int16 v24 = 2082;
      __int16 v25 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null challenge->protection_space_array, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_24:

    free(backtrace_string);
    goto LABEL_37;
  }
  if (*(void *)(v3 + 24) == *(void *)(v3 + 16))
  {
LABEL_39:
    uint64_t v5 = 0;
    goto LABEL_40;
  }
  id v4 = nw_array_get_object_at_index(v3, v2[4]);
  uint64_t v5 = nw_authentication_protection_space_get_type(v4);

LABEL_40:
  return v5;
}

void nw_authentication_challenge_set_http_message(void *a1, const void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = (const void *)v3[2];
    if (v5)
    {
      CFRelease(v5);
      v4[2] = 0;
    }
    if (a2) {
      v4[2] = CFRetain(a2);
    }
    goto LABEL_6;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_authentication_challenge_set_http_message";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_authentication_challenge_set_http_message";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null challenge", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_authentication_challenge_set_http_message";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_authentication_challenge_set_http_message";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_authentication_challenge_set_http_message";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void sub_1838EA890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFTypeRef nw_authentication_challenge_copy_http_message(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_authentication_challenge_copy_http_message";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_authentication_challenge_copy_http_message";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null challenge", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v17 = "nw_authentication_challenge_copy_http_message";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_authentication_challenge_copy_http_message";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_authentication_challenge_copy_http_message";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = (const void *)*((void *)v1 + 2);
  if (!v3)
  {
LABEL_22:
    CFTypeRef v4 = 0;
    goto LABEL_23;
  }
  CFTypeRef v4 = CFRetain(v3);
LABEL_23:

  return v4;
}

void sub_1838EAB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_authentication_challenge_set_protection_space(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    BOOL v5 = nw_array_create();
    os_log_type_t v6 = (void *)v3[3];
    v3[3] = v5;

    v3[4] = 0;
    nw_array_append(v3[3], v4);
    goto LABEL_3;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_authentication_challenge_set_protection_space";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_authentication_challenge_set_protection_space";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null challenge", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_authentication_challenge_set_protection_space";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_authentication_challenge_set_protection_space";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_authentication_challenge_set_protection_space";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:
}

uint64_t nw_authentication_challenge_copy_protection_space(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = (unint64_t *)v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 3);
    if (v3)
    {
      uint64_t v4 = nw_array_get_object_at_index(v3, v2[4]);
      goto LABEL_4;
    }
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_authentication_challenge_copy_protection_space";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v7, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_authentication_challenge_copy_protection_space";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null challenge->protection_space_array", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v19)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_authentication_challenge_copy_protection_space";
          _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null challenge->protection_space_array, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_authentication_challenge_copy_protection_space";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null challenge->protection_space_array, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v22 = "nw_authentication_challenge_copy_protection_space";
        __int16 v23 = 2082;
        __int16 v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null challenge->protection_space_array, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    os_log_type_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_authentication_challenge_copy_protection_space";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v7, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_authentication_challenge_copy_protection_space";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null challenge", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v19)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_authentication_challenge_copy_protection_space";
          _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_authentication_challenge_copy_protection_space";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v22 = "nw_authentication_challenge_copy_protection_space";
        __int16 v23 = 2082;
        __int16 v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_4:

  return v4;
}

void nw_authentication_challenge_set_attempt_count(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 10) = a2;
    goto LABEL_3;
  }
  BOOL v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_authentication_challenge_set_attempt_count";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_set_attempt_count";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null challenge", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_authentication_challenge_set_attempt_count";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_set_attempt_count";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_set_attempt_count";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_authentication_challenge_get_attempt_count(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[10];
    goto LABEL_3;
  }
  BOOL v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_authentication_challenge_get_attempt_count";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_get_attempt_count";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null challenge", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_authentication_challenge_get_attempt_count";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_get_attempt_count";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_get_attempt_count";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_authentication_challenge_set_proposed_credential(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 1, a2);
    goto LABEL_3;
  }
  BOOL v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_authentication_challenge_set_proposed_credential";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_set_proposed_credential";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null challenge", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_authentication_challenge_set_proposed_credential";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_set_proposed_credential";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_set_proposed_credential";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

id nw_authentication_challenge_get_proposed_credential(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[1];
    goto LABEL_3;
  }
  BOOL v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_authentication_challenge_get_proposed_credential";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_get_proposed_credential";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null challenge", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_authentication_challenge_get_proposed_credential";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_get_proposed_credential";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_get_proposed_credential";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_authentication_challenge_set_protection_space_array(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 3, a2);
    v3[4] = 0;
    goto LABEL_3;
  }
  BOOL v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_authentication_challenge_set_protection_space_array";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_set_protection_space_array";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null challenge", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_authentication_challenge_set_protection_space_array";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_set_protection_space_array";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_authentication_challenge_set_protection_space_array";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

BOOL nw_authentication_challenge_try_next_protection_space(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_authentication_challenge_try_next_protection_space";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_authentication_challenge_try_next_protection_space";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null challenge", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (!v21)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_authentication_challenge_try_next_protection_space";
        _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_authentication_challenge_try_next_protection_space";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v24 = "nw_authentication_challenge_try_next_protection_space";
      __int16 v25 = 2082;
      uint64_t v26 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_26;
  }
  uint64_t v3 = v1[3];
  if (!v3)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_authentication_challenge_try_next_protection_space";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_authentication_challenge_try_next_protection_space";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null challenge->protection_space_array", buf, 0xCu);
      }
LABEL_38:

LABEL_39:
      if (v8) {
        free(v8);
      }
      goto LABEL_41;
    }
    if (!v21)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_authentication_challenge_try_next_protection_space";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null challenge->protection_space_array, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_authentication_challenge_try_next_protection_space";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null challenge->protection_space_array, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v24 = "nw_authentication_challenge_try_next_protection_space";
      __int16 v25 = 2082;
      uint64_t v26 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null challenge->protection_space_array, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_26:

    free(backtrace_string);
    goto LABEL_39;
  }
  unint64_t v4 = v2[4] + 1;
  if (v4 >= (uint64_t)(*(void *)(v3 + 24) - *(void *)(v3 + 16)) >> 3)
  {
LABEL_41:
    BOOL v6 = 0;
    goto LABEL_42;
  }
  BOOL v5 = nw_array_get_object_at_index(v3, v4);
  BOOL v6 = v5 != 0;
  if (v5) {
    ++v2[4];
  }

LABEL_42:
  return v6;
}

_DWORD *nw_authentication_credential_create(int a1)
{
  uint64_t v2 = [NWConcrete_nw_authentication_credential alloc];

  return -[NWConcrete_nw_authentication_credential initWithType:](v2, a1);
}

void nw_authentication_credential_set_persistence(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  unint64_t v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 3) = a2;
    goto LABEL_3;
  }
  BOOL v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_authentication_credential_set_persistence";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_authentication_credential_set_persistence";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null credential", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_authentication_credential_set_persistence";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_authentication_credential_set_persistence";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null credential, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_authentication_credential_set_persistence";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_authentication_credential_set_username(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  unint64_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_authentication_credential_set_username";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_authentication_credential_set_username";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null credential", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v20 = "nw_authentication_credential_set_username";
            __int16 v21 = 2082;
            __int16 v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_authentication_credential_set_username";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null credential, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_authentication_credential_set_username";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_26:
    if (v8) {
      free(v8);
    }
    goto LABEL_7;
  }
  BOOL v5 = (void *)v3[2];
  if (v5)
  {
    free(v5);
    v4[2] = 0;
  }
  if (!a2) {
    goto LABEL_7;
  }
  BOOL v6 = strdup(a2);
  if (v6)
  {
LABEL_6:
    v4[2] = v6;
LABEL_7:

    return;
  }
  BOOL v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "strict_strdup";
  os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v12))
  {
    free(v12);
    goto LABEL_6;
  }
  __break(1u);
}

void nw_authentication_credential_set_password(void *a1, const char *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  unint64_t v4 = v3;
  if (!v3)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_authentication_credential_set_password";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v12, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_authentication_credential_set_password";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null credential", buf, 0xCu);
        }
      }
      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v13 = __nwlog_obj();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v24 = "nw_authentication_credential_set_password";
            __int16 v25 = 2082;
            uint64_t v26 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_authentication_credential_set_password";
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null credential, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v13 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_authentication_credential_set_password";
          _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_27:
    if (v12) {
      free(v12);
    }
    goto LABEL_8;
  }
  id v5 = v3;
  BOOL v6 = v5;
  os_log_type_t v7 = (void *)*((void *)v5 + 3);
  if (v7)
  {
    size_t v8 = strlen(*((const char **)v5 + 3));
    bzero(v7, v8);
    os_log_type_t v9 = (void *)v6[3];
    if (v9)
    {
      free(v9);
      v6[3] = 0;
    }
  }

  if (!a2) {
    goto LABEL_8;
  }
  os_log_type_t v10 = strdup(a2);
  if (v10)
  {
LABEL_7:
    v6[3] = v10;
LABEL_8:

    return;
  }
  BOOL v15 = __nwlog_obj();
  os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  __int16 v24 = "strict_strdup";
  os_log_type_t v16 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v16))
  {
    free(v16);
    goto LABEL_7;
  }
  __break(1u);
}

void nw_authentication_credential_add_valid_authentication_type(void *a1, unsigned int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  unint64_t v4 = v3;
  if (v3)
  {
    id v5 = (void *)v3[5];
    if (!v5)
    {
      xpc_object_t v6 = xpc_array_create(0, 0);
      os_log_type_t v7 = (void *)v4[5];
      v4[5] = v6;

      id v5 = (void *)v4[5];
    }
    xpc_array_set_uint64(v5, 0xFFFFFFFFFFFFFFFFLL, a2);
    goto LABEL_5;
  }
  size_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "nw_authentication_credential_add_valid_authentication_type";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_authentication_credential_add_valid_authentication_type";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null credential", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v19 = "nw_authentication_credential_add_valid_authentication_type";
          __int16 v20 = 2082;
          char v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_authentication_credential_add_valid_authentication_type";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null credential, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_authentication_credential_add_valid_authentication_type";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v9) {
    free(v9);
  }
LABEL_5:
}

void sub_1838ED3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_authentication_credential_add_to_tlv_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))++ = xpc_uint64_get_value(v4);

  return 1;
}

void sub_1838ED418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_authentication_credential_is_equal(void *a1, void *a2)
{
  unint64_t v3 = a1;
  unint64_t v4 = a2;
  id v5 = (void *)v4;
  if (!(v3 | v4))
  {
    BOOL v6 = 1;
    goto LABEL_29;
  }
  BOOL v6 = 0;
  if (v3 && v4)
  {
    int v7 = *(_DWORD *)(v3 + 8);
    if (v7 != *(_DWORD *)(v4 + 8) || *(_DWORD *)(v3 + 12) != *(_DWORD *)(v4 + 12)) {
      goto LABEL_28;
    }
    if (v7 == 1)
    {
      size_t v8 = *(const char **)(v3 + 16);
      os_log_type_t v9 = (const char *)v5[2];
      if (v8 != v9 && v8 && v9)
      {
        if (strcmp(v8, v9)) {
          goto LABEL_28;
        }
      }
      else if (v8 != v9)
      {
        goto LABEL_28;
      }
      os_log_type_t v10 = *(const char **)(v3 + 24);
      os_log_type_t v11 = (const char *)v5[3];
      if (v10 != v11 && v10 && v11)
      {
        if (strcmp(v10, v11)) {
          goto LABEL_28;
        }
      }
      else if (v10 != v11)
      {
        goto LABEL_28;
      }
    }
    uint64_t v12 = v5[4];
    if (*(void *)(v3 + 32))
    {
      if (v12) {
        goto LABEL_22;
      }
    }
    else if (!v12)
    {
LABEL_22:
      os_log_type_t v13 = (void *)v5[5];
      id v14 = *(id *)(v3 + 40);
      id v15 = v13;
      char v16 = v15;
      BOOL v6 = v14 == v15;
      if (v14 != v15 && v14 && v15) {
        BOOL v6 = xpc_equal(v14, v15);
      }

      goto LABEL_29;
    }
LABEL_28:
    BOOL v6 = 0;
  }
LABEL_29:

  return v6;
}

void sub_1838ED570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_authentication_credential_iterate_valid_authentication_types(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    int v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_authentication_credential_iterate_valid_authentication_types";
    size_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_authentication_credential_iterate_valid_authentication_types";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null credential", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_authentication_credential_iterate_valid_authentication_types";
          __int16 v27 = 2082;
          int v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_authentication_credential_iterate_valid_authentication_types";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null credential, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_authentication_credential_iterate_valid_authentication_types";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    BOOL v6 = (void *)v3[5];
    if (v6)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_authentication_credential_iterate_valid_authentication_types_block_invoke;
      applier[3] = &unk_1E5244348;
      id v22 = v4;
      xpc_array_apply(v6, applier);
    }
    goto LABEL_5;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v26 = "nw_authentication_credential_iterate_valid_authentication_types";
  size_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_authentication_credential_iterate_valid_authentication_types";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null iterator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_authentication_credential_iterate_valid_authentication_types";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null iterator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  char v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_authentication_credential_iterate_valid_authentication_types";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null iterator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v26 = "nw_authentication_credential_iterate_valid_authentication_types";
    __int16 v27 = 2082;
    int v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null iterator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_1838EDAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_authentication_credential_iterate_valid_authentication_types_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  xpc_uint64_get_value(v4);
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return v5;
}

void sub_1838EDB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_authentication_credential_get_username(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_authentication_credential_get_username";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_authentication_credential_get_username";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null credential", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_authentication_credential_get_username";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_authentication_credential_get_username";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null credential, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_authentication_credential_get_username";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_authentication_credential_get_password(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 3);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_authentication_credential_get_password";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_authentication_credential_get_password";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null credential", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_authentication_credential_get_password";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_authentication_credential_get_password";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null credential, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_authentication_credential_get_password";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_authentication_credential_set_identity(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 4, a2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_authentication_credential_set_identity";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_authentication_credential_set_identity";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null credential", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_authentication_credential_set_identity";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_authentication_credential_set_identity";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null credential, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_authentication_credential_set_identity";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t __nw_proxy_options_authbroker_is_available_block_invoke()
{
  mach_port_t sp = 0;
  uint64_t result = bootstrap_look_up(*MEMORY[0x1E4F14638], "com.apple.cfnetwork.AuthBrokerAgent", &sp);
  if (result) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = sp == 0;
  }
  if (!v1)
  {
    nw_proxy_options_authbroker_is_available::available = 1;
    return mach_port_deallocate(*MEMORY[0x1E4F14960], sp);
  }
  return result;
}

BOOL nw_proxy_option_is_equal(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3 && a2[1] == a3[1];
}

void *nw_proxy_options_copy_authentication_challenge_handler(void *a1)
{
  id v1 = a1;
  uint64_t v5 = 0;
  BOOL v6 = &v5;
  uint64_t v7 = 0x3032000000;
  os_log_type_t v8 = __Block_byref_object_copy__35680;
  os_log_type_t v9 = __Block_byref_object_dispose__35681;
  id v10 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __nw_proxy_options_copy_authentication_challenge_handler_block_invoke;
  v4[3] = &unk_1E5248E90;
  v4[4] = &v5;
  nw_protocol_options_access_handle(v1, v4);
  uint64_t v2 = _Block_copy((const void *)v6[5]);
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1838EE460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__35680(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__35681(uint64_t a1)
{
}

uint64_t __nw_proxy_options_copy_authentication_challenge_handler_block_invoke(uint64_t a1, const void **a2)
{
  uint64_t v3 = _Block_copy(*a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

void nw_proxy_options_set_http_proxy_authorization_header(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_proxy_options_set_http_proxy_authorization_header_block_invoke;
    v13[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v13[4] = a2;
    nw_protocol_options_access_handle(v3, v13);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_options_set_http_proxy_authorization_header";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_options_set_http_proxy_authorization_header";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_options_set_http_proxy_authorization_header";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_options_set_http_proxy_authorization_header";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_options_set_http_proxy_authorization_header";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1838EE7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_options_set_http_proxy_authorization_header_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  if (v4)
  {
    free(v4);
    *(void *)(a2 + 8) = 0;
  }
  uint64_t v5 = *(const char **)(a1 + 32);
  if (!v5) {
    return 1;
  }
  BOOL v6 = strdup(v5);
  if (v6)
  {
LABEL_5:
    *(void *)(a2 + 8) = v6;
    return 1;
  }
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t __nw_proxy_options_get_http_proxy_authorization_header_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 8);
  return 1;
}

void *nw_proxy_copy_shoes_definition()
{
  if (nw_protocol_shoes_get_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_shoes_get_definition(void)::onceToken, &__block_literal_global_33);
  }
  BOOL result = (void *)nw_protocol_shoes_get_definition(void)::proxy_definition;
  if (nw_protocol_shoes_get_definition(void)::proxy_definition)
  {
    return os_retain(result);
  }
  return result;
}

void *nw_protocol_http_connect_create()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v2 = __nwlog_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v6 = "nw_protocol_http_connect_create";
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  v0 = malloc_type_calloc(1uLL, 0x178uLL, 0xEAFB8F1AuLL);
  if (v0) {
    goto LABEL_3;
  }
  id v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v6 = "strict_calloc";
  __int16 v7 = 2048;
  uint64_t v8 = 1;
  __int16 v9 = 2048;
  uint64_t v10 = 376;
  uint64_t v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = (void *)__nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
LABEL_3:
    v0[5] = &g_http_connect_protocol_identifier;
    v0[6] = &g_http_connect_protocol_callbacks;
    v0[8] = v0;
    return v0 + 3;
  }
  __break(1u);
  return result;
}

uint64_t nw_protocol_http_connect_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      uint64_t result = handle[19];
      if (!result) {
        return handle[17];
      }
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_http_connect_get_remote_endpoint";
    id v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http_connect_get_remote_endpoint";
        BOOL v6 = "%{public}s called with null http_connect";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http_connect_get_remote_endpoint";
        BOOL v6 = "%{public}s called with null http_connect, backtrace limit exceeded";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http_connect_get_remote_endpoint";
        BOOL v6 = "%{public}s called with null http_connect, no backtrace";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      char v14 = "nw_protocol_http_connect_get_remote_endpoint";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      __int16 v9 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_protocol_http_connect_get_remote_endpoint";
  id v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_33;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http_connect_get_remote_endpoint";
        BOOL v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http_connect_get_remote_endpoint";
        BOOL v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      char v14 = "nw_protocol_http_connect_get_remote_endpoint";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      __int16 v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_22:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_23:
    free(backtrace_string);
    goto LABEL_33;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_http_connect_get_remote_endpoint";
    BOOL v6 = "%{public}s called with null protocol";
LABEL_32:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_33:
  if (v3) {
    free(v3);
  }
  return 0;
}

nw_protocol *nw_protocol_http_connect_get_local_endpoint(nw_protocol *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_http_connect_get_local_endpoint";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_39;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v13)
      {
        BOOL v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_http_connect_get_local_endpoint";
        BOOL v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v10) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_http_connect_get_local_endpoint";
        BOOL v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_38;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        char v16 = "nw_protocol_http_connect_get_local_endpoint";
        __int16 v17 = 2082;
        __int16 v18 = backtrace_string;
        char v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_28:
        _os_log_impl(&dword_1830D4000, v6, v7, v11, buf, 0x16u);
      }
LABEL_29:
      free(backtrace_string);
      goto LABEL_39;
    }
    BOOL v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_http_connect_get_local_endpoint";
    BOOL v8 = "%{public}s called with null protocol";
LABEL_38:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
LABEL_39:
    if (v5) {
      free(v5);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_http_connect_get_local_endpoint";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_http_connect_get_local_endpoint";
      BOOL v8 = "%{public}s called with null http_connect";
      goto LABEL_38;
    }
    if (!v13)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_http_connect_get_local_endpoint";
      BOOL v8 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        char v16 = "nw_protocol_http_connect_get_local_endpoint";
        __int16 v17 = 2082;
        __int16 v18 = backtrace_string;
        char v11 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
        goto LABEL_28;
      }
      goto LABEL_29;
    }
    if (!v12) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_http_connect_get_local_endpoint";
    BOOL v8 = "%{public}s called with null http_connect, no backtrace";
    goto LABEL_38;
  }
  if (handle[13]) {
    return (nw_protocol *)handle[15];
  }
  uint64_t result = a1->default_input_handler;
  if (result)
  {
    callbacks = result->callbacks;
    if (callbacks)
    {
      get_local_endpoint = (uint64_t (*)(void))callbacks->get_local_endpoint;
      if (get_local_endpoint)
      {
        return (nw_protocol *)get_local_endpoint();
      }
    }
    return 0;
  }
  return result;
}

nw_protocol *nw_protocol_http_connect_get_path(nw_protocol *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_protocol_http_connect_get_path";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_http_connect_get_path";
      __int16 v9 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v14)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_http_connect_get_path";
        __int16 v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_protocol_http_connect_get_path";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v6) {
          return 0;
        }
        goto LABEL_40;
      }
      if (!v11) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_http_connect_get_path";
      __int16 v9 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_38:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_39;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_protocol_http_connect_get_path";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_http_connect_get_path";
      __int16 v9 = "%{public}s called with null http_connect";
      goto LABEL_38;
    }
    if (!v14)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_http_connect_get_path";
      __int16 v9 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_38;
    }
    BOOL v12 = (char *)__nw_create_backtrace_string();
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v13) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_http_connect_get_path";
      __int16 v9 = "%{public}s called with null http_connect, no backtrace";
      goto LABEL_38;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v17 = "nw_protocol_http_connect_get_path";
      __int16 v18 = 2082;
      uint64_t v19 = v12;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null http_connect, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v12);
LABEL_39:
    if (!v6) {
      return 0;
    }
LABEL_40:
    free(v6);
    return 0;
  }
  uint64_t result = (nw_protocol *)*((void *)handle + 13);
  if (result) {
    return result;
  }
  uint64_t result = a1->default_input_handler;
  if (!result) {
    return result;
  }
  callbacks = result->callbacks;
  if (!callbacks) {
    return 0;
  }
  get_path = (uint64_t (*)(void))callbacks->get_path;
  if (!get_path) {
    return 0;
  }

  return (nw_protocol *)get_path();
}

nw_protocol *nw_protocol_http_connect_get_parameters(nw_protocol *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_protocol_http_connect_get_parameters";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_http_connect_get_parameters";
      __int16 v9 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v14)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_http_connect_get_parameters";
        __int16 v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_protocol_http_connect_get_parameters";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v6) {
          return 0;
        }
        goto LABEL_40;
      }
      if (!v11) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_http_connect_get_parameters";
      __int16 v9 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_38:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_39;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_protocol_http_connect_get_parameters";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_http_connect_get_parameters";
      __int16 v9 = "%{public}s called with null http_connect";
      goto LABEL_38;
    }
    if (!v14)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_http_connect_get_parameters";
      __int16 v9 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_38;
    }
    BOOL v12 = (char *)__nw_create_backtrace_string();
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v13) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_http_connect_get_parameters";
      __int16 v9 = "%{public}s called with null http_connect, no backtrace";
      goto LABEL_38;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v17 = "nw_protocol_http_connect_get_parameters";
      __int16 v18 = 2082;
      uint64_t v19 = v12;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null http_connect, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v12);
LABEL_39:
    if (!v6) {
      return 0;
    }
LABEL_40:
    free(v6);
    return 0;
  }
  uint64_t result = (nw_protocol *)*((void *)handle + 14);
  if (result) {
    return result;
  }
  uint64_t result = a1->default_input_handler;
  if (!result) {
    return result;
  }
  callbacks = result->callbacks;
  if (!callbacks) {
    return 0;
  }
  get_uint64_t parameters = (uint64_t (*)(void))callbacks->get_parameters;
  if (!get_parameters) {
    return 0;
  }

  return (nw_protocol *)get_parameters();
}

uint64_t nw_protocol_http_connect_copy_info(uint64_t a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v28 = "nw_protocol_http_connect_copy_info";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v17, &type, &v25)) {
      goto LABEL_58;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        __int16 v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_58;
        }
        *(_DWORD *)buf = 136446210;
        int v28 = "nw_protocol_http_connect_copy_info";
        uint64_t v20 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_57;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (!v22) {
          goto LABEL_58;
        }
        *(_DWORD *)buf = 136446210;
        int v28 = "nw_protocol_http_connect_copy_info";
        uint64_t v20 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_57;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        int v28 = "nw_protocol_http_connect_copy_info";
        __int16 v29 = 2082;
        int v30 = backtrace_string;
        char v23 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_47:
        _os_log_impl(&dword_1830D4000, v18, v19, v23, buf, 0x16u);
      }
LABEL_48:
      free(backtrace_string);
      goto LABEL_58;
    }
    __int16 v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136446210;
    int v28 = "nw_protocol_http_connect_copy_info";
    uint64_t v20 = "%{public}s called with null protocol";
LABEL_57:
    _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
LABEL_58:
    if (v17) {
      free(v17);
    }
    return 0;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v28 = "nw_protocol_http_connect_copy_info";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v17, &type, &v25)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_58;
      }
      *(_DWORD *)buf = 136446210;
      int v28 = "nw_protocol_http_connect_copy_info";
      uint64_t v20 = "%{public}s called with null http_connect";
      goto LABEL_57;
    }
    if (!v25)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_58;
      }
      *(_DWORD *)buf = 136446210;
      int v28 = "nw_protocol_http_connect_copy_info";
      uint64_t v20 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v24 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        int v28 = "nw_protocol_http_connect_copy_info";
        __int16 v29 = 2082;
        int v30 = backtrace_string;
        char v23 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    if (!v24) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136446210;
    int v28 = "nw_protocol_http_connect_copy_info";
    uint64_t v20 = "%{public}s called with null http_connect, no backtrace";
    goto LABEL_57;
  }
  if (a2 == 254 && *v2 && v2[1] && v2[2])
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (!v3 || (uint64_t v4 = *(void *)(v3 + 24)) == 0 || (v5 = *(uint64_t (**)(void))(v4 + 224)) == 0 || (v6 = v5()) == 0) {
      uint64_t v6 = nw_array_create();
    }
    if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
      dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_102_35650);
    }
    id v7 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
    unint64_t v8 = nw_delta_nanos(*v2, v2[1]);
    if (v8 <= 0xF423FFFFFFFFFLL) {
      unint64_t v9 = (v8 / 0xF4240);
    }
    else {
      unint64_t v9 = 0xFFFFFFFFLL;
    }
    unint64_t v10 = nw_delta_nanos(*v2, v2[2]);
    if (v10 <= 0xF423FFFFFFFFFLL) {
      unint64_t v11 = (v10 / 0xF4240);
    }
    else {
      unint64_t v11 = 0xFFFFFFFFLL;
    }
    BOOL v12 = nw_protocol_establishment_report_create(v7, v9, v11);
    if (v7) {
      os_release(v7);
    }
    nw_array_append(v6, v12);
    if (v12) {
      os_release(v12);
    }
    return v6;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  if (!v14) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 24);
  if (!v15) {
    return 0;
  }
  char v16 = *(uint64_t (**)(void))(v15 + 224);
  if (!v16) {
    return 0;
  }

  return v16();
}

void nw_protocol_http_connect_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http_connect_error";
    unint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v11, &type, &v40)) {
      goto LABEL_88;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v17 = "%{public}s called with null protocol";
LABEL_86:
      BOOL v37 = v18;
      os_log_type_t v38 = v19;
      uint32_t v39 = 12;
      goto LABEL_87;
    }
    if (!v40)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v17 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v26 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v26) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v17 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_86;
    }
    if (!v26) {
      goto LABEL_59;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v43 = "nw_protocol_http_connect_error";
    __int16 v44 = 2082;
    os_log_type_t v45 = backtrace_string;
    __int16 v27 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_58:
    _os_log_impl(&dword_1830D4000, v18, v19, v27, buf, 0x16u);
    goto LABEL_59;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http_connect_error";
    unint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v11, &type, &v40)) {
      goto LABEL_88;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v17 = "%{public}s called with null http_connect";
      goto LABEL_86;
    }
    if (!v40)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v17 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v28 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v28) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v17 = "%{public}s called with null http_connect, no backtrace";
      goto LABEL_86;
    }
    if (!v28) {
      goto LABEL_59;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v43 = "nw_protocol_http_connect_error";
    __int16 v44 = 2082;
    os_log_type_t v45 = backtrace_string;
    __int16 v27 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
    goto LABEL_58;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_protocol_http_connect_error";
    unint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v11, &type, &v40)) {
      goto LABEL_88;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v17 = "%{public}s called with null other_protocol";
      goto LABEL_86;
    }
    if (!v40)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v17 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v29 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v29) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v17 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_86;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v44 = 2082;
      os_log_type_t v45 = backtrace_string;
      __int16 v27 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_58;
    }
LABEL_59:
    free(backtrace_string);
    if (!v11) {
      return;
    }
LABEL_89:
    free(v11);
    return;
  }
  if (a3)
  {
    if (handle[70] == 1 && a1->output_handler == a2) {
      return;
    }
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        error = (void (*)(void))callbacks->error;
        if (error)
        {
          error();
          return;
        }
      }
    }
    __nwlog_obj();
    unint64_t v8 = a1->default_input_handler;
    unint64_t v9 = "invalid";
    if (v8)
    {
      identifier = v8->identifier;
      if (identifier) {
        unint64_t v9 = (const char *)identifier;
      }
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v43 = "nw_protocol_http_connect_error";
    __int16 v44 = 2082;
    os_log_type_t v45 = (char *)v9;
    unint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v11, &type, &v40)) {
      goto LABEL_88;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_88;
      }
      uint64_t v14 = a1->default_input_handler;
      uint64_t v15 = "invalid";
      if (v14)
      {
        char v16 = v14->identifier;
        if (v16) {
          uint64_t v15 = (const char *)v16;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v44 = 2082;
      os_log_type_t v45 = (char *)v15;
      __int16 v17 = "%{public}s protocol %{public}s has invalid error callback";
    }
    else if (v40)
    {
      uint64_t v20 = (char *)__nw_create_backtrace_string();
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (v20)
      {
        if (v21)
        {
          BOOL v22 = a1->default_input_handler;
          char v23 = "invalid";
          if (v22)
          {
            BOOL v24 = v22->identifier;
            if (v24) {
              char v23 = (const char *)v24;
            }
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v43 = "nw_protocol_http_connect_error";
          __int16 v44 = 2082;
          os_log_type_t v45 = (char *)v23;
          __int16 v46 = 2082;
          __int16 v47 = v20;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v20);
LABEL_88:
        if (!v11) {
          return;
        }
        goto LABEL_89;
      }
      if (!v21) {
        goto LABEL_88;
      }
      uint32_t v34 = a1->default_input_handler;
      os_log_type_t v35 = "invalid";
      if (v34)
      {
        unsigned int v36 = v34->identifier;
        if (v36) {
          os_log_type_t v35 = (const char *)v36;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v44 = 2082;
      os_log_type_t v45 = (char *)v35;
      __int16 v17 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
    }
    else
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_88;
      }
      uint64_t v31 = a1->default_input_handler;
      BOOL v32 = "invalid";
      if (v31)
      {
        unsigned int v33 = v31->identifier;
        if (v33) {
          BOOL v32 = (const char *)v33;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_protocol_http_connect_error";
      __int16 v44 = 2082;
      os_log_type_t v45 = (char *)v32;
      __int16 v17 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
    }
    BOOL v37 = v12;
    os_log_type_t v38 = v13;
    uint32_t v39 = 22;
LABEL_87:
    _os_log_impl(&dword_1830D4000, v37, v38, v17, buf, v39);
    goto LABEL_88;
  }
  if ((handle[92] & 0x80) == 0)
  {
    if (gLogDatapath)
    {
      int v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v43 = "nw_protocol_http_connect_error";
        __int16 v44 = 2082;
        os_log_type_t v45 = (char *)(handle + 71);
        __int16 v46 = 2080;
        __int16 v47 = " ";
        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%ssuppressing error 0", buf, 0x20u);
      }
    }
  }
}

void nw_protocol_http_connect_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    BOOL v37 = __nwlog_obj();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v83 = "nw_protocol_http_connect_disconnected";
      _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_protocol_http_connect_disconnected";
    os_log_type_t v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (!__nwlog_fault(v38, &type, &v80)) {
      goto LABEL_132;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint32_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_132;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v83 = "nw_protocol_http_connect_disconnected";
      socklen_t v41 = "%{public}s called with null protocol";
    }
    else if (v80)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint32_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v48 = os_log_type_enabled(v39, type);
      if (backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v83 = "nw_protocol_http_connect_disconnected";
          __int16 v84 = 2082;
          int v85 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_132:
        if (!v38) {
          return;
        }
        goto LABEL_133;
      }
      if (!v48) {
        goto LABEL_132;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v83 = "nw_protocol_http_connect_disconnected";
      socklen_t v41 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint32_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_132;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v83 = "nw_protocol_http_connect_disconnected";
      socklen_t v41 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_131;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_protocol_http_connect_disconnected";
    os_log_type_t v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (!__nwlog_fault(v38, &type, &v80)) {
      goto LABEL_132;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v80)
      {
        uint32_t v39 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (!os_log_type_enabled(v39, type)) {
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v83 = "nw_protocol_http_connect_disconnected";
        socklen_t v41 = "%{public}s called with null http_connect, backtrace limit exceeded";
        goto LABEL_131;
      }
      int v49 = (char *)__nw_create_backtrace_string();
      uint32_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v50 = os_log_type_enabled(v39, type);
      if (!v49)
      {
        if (!v50) {
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v83 = "nw_protocol_http_connect_disconnected";
        socklen_t v41 = "%{public}s called with null http_connect, no backtrace";
        goto LABEL_131;
      }
      if (v50)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v83 = "nw_protocol_http_connect_disconnected";
        __int16 v84 = 2082;
        int v85 = v49;
        long long v51 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
LABEL_84:
        _os_log_impl(&dword_1830D4000, v39, v40, v51, buf, 0x16u);
      }
LABEL_85:
      free(v49);
      if (!v38) {
        return;
      }
LABEL_133:
      long long v71 = (char *)v38;
LABEL_142:
      free(v71);
      return;
    }
    uint32_t v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    if (!os_log_type_enabled(v39, type)) {
      goto LABEL_132;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_protocol_http_connect_disconnected";
    socklen_t v41 = "%{public}s called with null http_connect";
LABEL_131:
    _os_log_impl(&dword_1830D4000, v39, v40, v41, buf, 0xCu);
    goto LABEL_132;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_protocol_http_connect_disconnected";
    os_log_type_t v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (!__nwlog_fault(v38, &type, &v80)) {
      goto LABEL_132;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint32_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_132;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v83 = "nw_protocol_http_connect_disconnected";
      socklen_t v41 = "%{public}s called with null other_protocol";
      goto LABEL_131;
    }
    if (!v80)
    {
      uint32_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_132;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v83 = "nw_protocol_http_connect_disconnected";
      socklen_t v41 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_131;
    }
    int v49 = (char *)__nw_create_backtrace_string();
    uint32_t v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v52 = os_log_type_enabled(v39, type);
    if (!v49)
    {
      if (!v52) {
        goto LABEL_132;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v83 = "nw_protocol_http_connect_disconnected";
      socklen_t v41 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_131;
    }
    if (v52)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v83 = "nw_protocol_http_connect_disconnected";
      __int16 v84 = 2082;
      int v85 = v49;
      long long v51 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_84;
    }
    goto LABEL_85;
  }
  if (*((_DWORD *)handle + 70) == 1)
  {
    if (a1->output_handler != a2)
    {
      default_input_handler = a1->default_input_handler;
      if (!default_input_handler
        || (callbacks = default_input_handler->callbacks) == 0
        || (disconnected = (void (*)(void))callbacks->disconnected) == 0)
      {
        __nwlog_obj();
        unint64_t v8 = a1->default_input_handler;
        unint64_t v9 = "invalid";
        if (v8)
        {
          identifier = v8->identifier;
          if (identifier) {
            unint64_t v9 = (const char *)identifier;
          }
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v83 = "nw_protocol_http_connect_disconnected";
        __int16 v84 = 2082;
        int v85 = (void *)v9;
        unint64_t v11 = (const char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v80 = 0;
        if (!__nwlog_fault(v11, &type, &v80)) {
          goto LABEL_140;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v12 = __nwlog_obj();
          os_log_type_t v13 = type;
          if (!os_log_type_enabled(v12, type)) {
            goto LABEL_140;
          }
          uint64_t v14 = a1->default_input_handler;
          uint64_t v15 = "invalid";
          if (v14)
          {
            char v16 = v14->identifier;
            if (v16) {
              uint64_t v15 = (const char *)v16;
            }
          }
LABEL_19:
          *(_DWORD *)buf = 136446466;
          uint64_t v83 = "nw_protocol_http_connect_disconnected";
          __int16 v84 = 2082;
          int v85 = (void *)v15;
          __int16 v17 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_139:
          _os_log_impl(&dword_1830D4000, v12, v13, v17, buf, 0x16u);
          goto LABEL_140;
        }
        if (v80)
        {
          long long v53 = (char *)__nw_create_backtrace_string();
          BOOL v12 = __nwlog_obj();
          os_log_type_t v13 = type;
          BOOL v54 = os_log_type_enabled(v12, type);
          if (v53)
          {
            if (v54)
            {
              long long v55 = a1->default_input_handler;
              long long v56 = "invalid";
              if (v55)
              {
                long long v57 = v55->identifier;
                if (v57) {
                  long long v56 = (const char *)v57;
                }
              }
              *(_DWORD *)buf = 136446722;
              uint64_t v83 = "nw_protocol_http_connect_disconnected";
              __int16 v84 = 2082;
              int v85 = (void *)v56;
              __int16 v86 = 2082;
              int v87 = v53;
              _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v53);
            if (v11) {
              goto LABEL_141;
            }
            return;
          }
          if (v54)
          {
            long long v72 = a1->default_input_handler;
            long long v62 = "invalid";
            if (v72)
            {
              long long v73 = v72->identifier;
              if (v73) {
                long long v62 = (const char *)v73;
              }
            }
LABEL_138:
            *(_DWORD *)buf = 136446466;
            uint64_t v83 = "nw_protocol_http_connect_disconnected";
            __int16 v84 = 2082;
            int v85 = (void *)v62;
            __int16 v17 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
            goto LABEL_139;
          }
          goto LABEL_140;
        }
        BOOL v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_140;
        }
        long long v64 = a1->default_input_handler;
        long long v59 = "invalid";
        if (v64)
        {
          long long v65 = v64->identifier;
          if (v65) {
            long long v59 = (const char *)v65;
          }
        }
LABEL_100:
        *(_DWORD *)buf = 136446466;
        uint64_t v83 = "nw_protocol_http_connect_disconnected";
        __int16 v84 = 2082;
        int v85 = (void *)v59;
        __int16 v17 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
        goto LABEL_139;
      }
LABEL_23:
      disconnected();
      return;
    }
    handle[184] = handle[184] & 0xFFC7 | 0x20;
    if (nw_http_connect_restart_after_disconnect((uint64_t)handle)) {
      return;
    }
    uint64_t v20 = a1->default_input_handler;
    if (v20)
    {
      BOOL v21 = v20->callbacks;
      if (v21)
      {
        disconnected = (void (*)(void))v21->disconnected;
        if (disconnected) {
          goto LABEL_23;
        }
      }
    }
    __nwlog_obj();
    BOOL v22 = a1->default_input_handler;
    char v23 = "invalid";
    if (v22)
    {
      BOOL v24 = v22->identifier;
      if (v24) {
        char v23 = (const char *)v24;
      }
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v83 = "nw_protocol_http_connect_disconnected";
    __int16 v84 = 2082;
    int v85 = (void *)v23;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    char v25 = (const char *)_os_log_send_and_compose_impl();
    if (__nwlog_fault(v25, &type, &v80))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (!os_log_type_enabled(v26, type)) {
          goto LABEL_154;
        }
        BOOL v28 = a1->default_input_handler;
        BOOL v29 = "invalid";
        if (v28)
        {
          int v30 = v28->identifier;
          if (v30) {
            BOOL v29 = (const char *)v30;
          }
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v83 = "nw_protocol_http_connect_disconnected";
        __int16 v84 = 2082;
        int v85 = (void *)v29;
        uint64_t v31 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_153:
        _os_log_impl(&dword_1830D4000, v26, v27, v31, buf, 0x16u);
        goto LABEL_154;
      }
      if (!v80)
      {
        BOOL v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (!os_log_type_enabled(v26, type)) {
          goto LABEL_154;
        }
        long long v74 = a1->default_input_handler;
        long long v75 = "invalid";
        if (v74)
        {
          long long v76 = v74->identifier;
          if (v76) {
            long long v75 = (const char *)v76;
          }
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v83 = "nw_protocol_http_connect_disconnected";
        __int16 v84 = 2082;
        int v85 = (void *)v75;
        uint64_t v31 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
        goto LABEL_153;
      }
      long long v66 = (char *)__nw_create_backtrace_string();
      BOOL v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v67 = os_log_type_enabled(v26, type);
      if (!v66)
      {
        if (!v67) {
          goto LABEL_154;
        }
        long long v77 = a1->default_input_handler;
        uint64_t v78 = "invalid";
        if (v77)
        {
          uint64_t v79 = v77->identifier;
          if (v79) {
            uint64_t v78 = (const char *)v79;
          }
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v83 = "nw_protocol_http_connect_disconnected";
        __int16 v84 = 2082;
        int v85 = (void *)v78;
        uint64_t v31 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
        goto LABEL_153;
      }
      if (v67)
      {
        long long v68 = a1->default_input_handler;
        long long v69 = "invalid";
        if (v68)
        {
          long long v70 = v68->identifier;
          if (v70) {
            long long v69 = (const char *)v70;
          }
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v83 = "nw_protocol_http_connect_disconnected";
        __int16 v84 = 2082;
        int v85 = (void *)v69;
        __int16 v86 = 2082;
        int v87 = v66;
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v66);
    }
LABEL_154:
    if (v25)
    {
      long long v71 = (char *)v25;
      goto LABEL_142;
    }
    return;
  }
  __int16 v18 = a1->default_input_handler;
  if (v18)
  {
    os_log_type_t v19 = v18->callbacks;
    if (v19)
    {
      disconnected = (void (*)(void))v19->disconnected;
      if (disconnected) {
        goto LABEL_23;
      }
    }
  }
  __nwlog_obj();
  BOOL v32 = a1->default_input_handler;
  unsigned int v33 = "invalid";
  if (v32)
  {
    uint32_t v34 = v32->identifier;
    if (v34) {
      unsigned int v33 = (const char *)v34;
    }
  }
  *(_DWORD *)buf = 136446466;
  uint64_t v83 = "nw_protocol_http_connect_disconnected";
  __int16 v84 = 2082;
  int v85 = (void *)v33;
  unint64_t v11 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v80 = 0;
  if (!__nwlog_fault(v11, &type, &v80)) {
    goto LABEL_140;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_140;
    }
    os_log_type_t v35 = a1->default_input_handler;
    uint64_t v15 = "invalid";
    if (v35)
    {
      unsigned int v36 = v35->identifier;
      if (v36) {
        uint64_t v15 = (const char *)v36;
      }
    }
    goto LABEL_19;
  }
  if (!v80)
  {
    BOOL v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_140;
    }
    long long v58 = a1->default_input_handler;
    long long v59 = "invalid";
    if (v58)
    {
      long long v60 = v58->identifier;
      if (v60) {
        long long v59 = (const char *)v60;
      }
    }
    goto LABEL_100;
  }
  BOOL v42 = (char *)__nw_create_backtrace_string();
  BOOL v12 = __nwlog_obj();
  os_log_type_t v13 = type;
  BOOL v43 = os_log_type_enabled(v12, type);
  if (!v42)
  {
    if (!v43) {
      goto LABEL_140;
    }
    long long v61 = a1->default_input_handler;
    long long v62 = "invalid";
    if (v61)
    {
      long long v63 = v61->identifier;
      if (v63) {
        long long v62 = (const char *)v63;
      }
    }
    goto LABEL_138;
  }
  if (v43)
  {
    __int16 v44 = a1->default_input_handler;
    os_log_type_t v45 = "invalid";
    if (v44)
    {
      __int16 v46 = v44->identifier;
      if (v46) {
        os_log_type_t v45 = (const char *)v46;
      }
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v83 = "nw_protocol_http_connect_disconnected";
    __int16 v84 = 2082;
    int v85 = (void *)v45;
    __int16 v86 = 2082;
    int v87 = v42;
    _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
  }
  free(v42);
LABEL_140:
  if (v11)
  {
LABEL_141:
    long long v71 = (char *)v11;
    goto LABEL_142;
  }
}

uint64_t nw_http_connect_restart_after_disconnect(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_http_connect_restart_after_disconnect";
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v8, &type, &v18)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "nw_http_connect_restart_after_disconnect";
      unint64_t v11 = "%{public}s called with null http_connect";
LABEL_52:
      _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      goto LABEL_53;
    }
    if (!v18)
    {
      unint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v21 = "nw_http_connect_restart_after_disconnect";
        unint64_t v11 = "%{public}s called with null http_connect, backtrace limit exceeded";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v21 = "nw_http_connect_restart_after_disconnect";
        unint64_t v11 = "%{public}s called with null http_connect, no backtrace";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (!v13) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v21 = "nw_http_connect_restart_after_disconnect";
    __int16 v22 = 2082;
    char v23 = backtrace_string;
    uint64_t v14 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
LABEL_38:
    _os_log_impl(&dword_1830D4000, v9, v10, v14, buf, 0x16u);
    goto LABEL_39;
  }
  if (!*(void *)(a1 + 168))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_http_connect_restart_after_disconnect";
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v8, &type, &v18)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "nw_http_connect_restart_after_disconnect";
      unint64_t v11 = "%{public}s called with null http_connect->context";
      goto LABEL_52;
    }
    if (!v18)
    {
      unint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v21 = "nw_http_connect_restart_after_disconnect";
        unint64_t v11 = "%{public}s called with null http_connect->context, backtrace limit exceeded";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v21 = "nw_http_connect_restart_after_disconnect";
        unint64_t v11 = "%{public}s called with null http_connect->context, no backtrace";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (!v15) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v21 = "nw_http_connect_restart_after_disconnect";
    __int16 v22 = 2082;
    char v23 = backtrace_string;
    uint64_t v14 = "%{public}s called with null http_connect->context, dumping backtrace:%{public}s";
    goto LABEL_38;
  }
  __int16 v2 = *(_WORD *)(a1 + 368);
  if ((v2 & 0x20) != 0)
  {
    if (*(_DWORD *)(a1 + 276))
    {
      if ((v2 & 0x80) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v3 = gLogObj;
        uint64_t v4 = 1;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446722;
          BOOL v21 = "nw_http_connect_restart_after_disconnect";
          __int16 v22 = 2082;
          char v23 = (char *)(a1 + 284);
          __int16 v24 = 2080;
          char v25 = " ";
          _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sNot restarting after disconnect because async operation is active", buf, 0x20u);
        }
        return v4;
      }
    }
    else
    {
      if ((v2 & 0x80) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v5 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446722;
          BOOL v21 = "nw_http_connect_restart_after_disconnect";
          __int16 v22 = 2082;
          char v23 = (char *)(a1 + 284);
          __int16 v24 = 2080;
          char v25 = " ";
          _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sWaiting to restart after disconnect", buf, 0x20u);
        }
      }
      nw_http_connect_start_async(a1);
      uint64_t v6 = *(void **)(a1 + 168);
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 0x40000000;
      v17[2] = ___ZL40nw_http_connect_restart_after_disconnectP24nw_protocol_http_connect_block_invoke;
      v17[3] = &__block_descriptor_tmp_43_35832;
      v17[4] = a1;
      nw_queue_context_async(v6, v17);
    }
    return 1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v21 = "nw_http_connect_restart_after_disconnect";
  unint64_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (!__nwlog_fault(v8, &type, &v18)) {
    goto LABEL_53;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v18)
    {
      unint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v21 = "nw_http_connect_restart_after_disconnect";
        unint64_t v11 = "%{public}s called with null http_connect->was_disconnected, backtrace limit exceeded";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v16 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v21 = "nw_http_connect_restart_after_disconnect";
        unint64_t v11 = "%{public}s called with null http_connect->was_disconnected, no backtrace";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v21 = "nw_http_connect_restart_after_disconnect";
      __int16 v22 = 2082;
      char v23 = backtrace_string;
      uint64_t v14 = "%{public}s called with null http_connect->was_disconnected, dumping backtrace:%{public}s";
      goto LABEL_38;
    }
LABEL_39:
    free(backtrace_string);
    goto LABEL_53;
  }
  unint64_t v9 = __nwlog_obj();
  os_log_type_t v10 = type;
  if (os_log_type_enabled(v9, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_http_connect_restart_after_disconnect";
    unint64_t v11 = "%{public}s called with null http_connect->was_disconnected";
    goto LABEL_52;
  }
LABEL_53:
  if (v8) {
    free(v8);
  }
  return 0;
}

void nw_http_connect_start_async(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(unsigned int *)(a1 + 276) + 1;
    uint64_t v3 = v2 << 31 >> 31;
    *(_DWORD *)(a1 + 276) = v2;
    if (v3 == v2 && (v3 & 0x8000000000000000) == 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = *(unsigned int *)(a1 + 276);
    *(_DWORD *)buf = 136446978;
    __int16 v24 = "nw_http_connect_start_async";
    __int16 v25 = 2082;
    uint64_t v26 = "http_connect->in_async";
    __int16 v27 = 2048;
    uint64_t v28 = 1;
    __int16 v29 = 2048;
    uint64_t v30 = v4;
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v5, &type, &v21)) {
      goto LABEL_18;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v8 = *(unsigned int *)(a1 + 276);
        *(_DWORD *)buf = 136446978;
        __int16 v24 = "nw_http_connect_start_async";
        __int16 v25 = 2082;
        uint64_t v26 = "http_connect->in_async";
        __int16 v27 = 2048;
        uint64_t v28 = 1;
        __int16 v29 = 2048;
        uint64_t v30 = v8;
        unint64_t v9 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v6, v7, v9, buf, 0x2Au);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type;
      BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v11)
        {
          uint64_t v12 = *(unsigned int *)(a1 + 276);
          *(_DWORD *)buf = 136447234;
          __int16 v24 = "nw_http_connect_start_async";
          __int16 v25 = 2082;
          uint64_t v26 = "http_connect->in_async";
          __int16 v27 = 2048;
          uint64_t v28 = 1;
          __int16 v29 = 2048;
          uint64_t v30 = v12;
          __int16 v31 = 2082;
          BOOL v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v11)
      {
        uint64_t v14 = *(unsigned int *)(a1 + 276);
        *(_DWORD *)buf = 136446978;
        __int16 v24 = "nw_http_connect_start_async";
        __int16 v25 = 2082;
        uint64_t v26 = "http_connect->in_async";
        __int16 v27 = 2048;
        uint64_t v28 = 1;
        __int16 v29 = 2048;
        uint64_t v30 = v14;
        unint64_t v9 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v13 = *(unsigned int *)(a1 + 276);
        *(_DWORD *)buf = 136446978;
        __int16 v24 = "nw_http_connect_start_async";
        __int16 v25 = 2082;
        uint64_t v26 = "http_connect->in_async";
        __int16 v27 = 2048;
        uint64_t v28 = 1;
        __int16 v29 = 2048;
        uint64_t v30 = v13;
        unint64_t v9 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
    if (v5) {
      free(v5);
    }
    *(_DWORD *)(a1 + 276) = -1;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v24 = "nw_http_connect_start_async";
  BOOL v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v15, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_http_connect_start_async";
      char v18 = "%{public}s called with null http_connect";
      goto LABEL_35;
    }
    if (!v21)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_http_connect_start_async";
      char v18 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_35;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    BOOL v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v20 = os_log_type_enabled(v16, type);
    if (v19)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v24 = "nw_http_connect_start_async";
        __int16 v25 = 2082;
        uint64_t v26 = v19;
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null http_connect, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v19);
      goto LABEL_36;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_http_connect_start_async";
      char v18 = "%{public}s called with null http_connect, no backtrace";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
    }
  }
LABEL_36:
  if (v15) {
    free(v15);
  }
}

void ___ZL40nw_http_connect_restart_after_disconnectP24nw_protocol_http_connect_block_invoke(uint64_t a1)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || (*(_WORD *)(v2 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = gLogObj;
    BOOL v4 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
    uint64_t v2 = *(void *)(a1 + 32);
    if (v4)
    {
      os_log_type_t v5 = "";
      uint64_t v6 = (const char *)(v2 + 284);
      if (!v2) {
        uint64_t v6 = "";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
      if (v2) {
        os_log_type_t v5 = " ";
      }
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2080;
      BOOL v129 = (void *)v5;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sFinished waiting to restart after disconnect", buf, 0x20u);
      uint64_t v2 = *(void *)(a1 + 32);
    }
  }
  BOOL v7 = nw_http_connect_end_async(v2);
  uint64_t v8 = *(void *)(a1 + 32);
  if (v7)
  {
    __int16 v9 = *(_WORD *)(v8 + 368);
    if ((v9 & 0x20) == 0)
    {
      if ((v9 & 0x80) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          uint64_t v11 = *(void *)(a1 + 32);
          uint64_t v12 = "";
          BOOL v13 = v11 == 0;
          if (v11) {
            uint64_t v14 = (const char *)(v11 + 284);
          }
          else {
            uint64_t v14 = "";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
          if (!v13) {
            uint64_t v12 = " ";
          }
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v14;
          *(_WORD *)&buf[22] = 2080;
          BOOL v129 = (void *)v12;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sNot restarting because not disconnected", buf, 0x20u);
        }
      }
      return;
    }
    *(_WORD *)(v8 + 368) = v9 & 0xFFDF;
    uint64_t v19 = *(void *)(a1 + 32);
    __int16 v20 = *(_WORD *)(v19 + 368);
    if (*(_DWORD *)(v19 + 280) == 1)
    {
      if ((v20 & 4) == 0)
      {
        if ((v20 & 0x80) != 0) {
          goto LABEL_39;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v21 = gLogObj;
        BOOL v22 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
        uint64_t v19 = *(void *)(a1 + 32);
        if (!v22) {
          goto LABEL_39;
        }
        char v23 = "";
        __int16 v24 = (const char *)(v19 + 284);
        if (!v19) {
          __int16 v24 = "";
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
        if (v19) {
          char v23 = " ";
        }
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v24;
        *(_WORD *)&buf[22] = 2080;
        BOOL v129 = (void *)v23;
        __int16 v25 = "%{public}s %{public}s%sNot restarting because no response bytes were received";
        uint64_t v26 = v21;
        os_log_type_t v27 = OS_LOG_TYPE_INFO;
        uint32_t v28 = 32;
LABEL_38:
        _os_log_impl(&dword_1830D4000, v26, v27, v25, buf, v28);
        uint64_t v19 = *(void *)(a1 + 32);
LABEL_39:
        nw_http_connect_fail(v19, 22);
        return;
      }
      os_log_type_t v35 = (uint64_t *)(v19 + 224);
      if (gLogDatapath)
      {
        BOOL v106 = __nwlog_obj();
        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
          _os_log_impl(&dword_1830D4000, v106, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
        }
      }
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_35841;
      BOOL v129 = &__block_descriptor_tmp_17_35842;
      *(void *)&long long v130 = v35;
      BYTE8(v130) = 0;
      uint64_t v36 = *v35;
      do
      {
        if (!v36) {
          break;
        }
        uint64_t v37 = *(void *)(v36 + 32);
        char v38 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
        uint64_t v36 = v37;
      }
      while ((v38 & 1) != 0);
      *(_WORD *)(*(void *)(a1 + 32) + 368) &= ~4u;
      *(_WORD *)(*(void *)(a1 + 32) + 368) &= ~2u;
      uint64_t v19 = *(void *)(a1 + 32);
      __int16 v39 = *(_WORD *)(v19 + 368);
      if ((v39 & 1) == 0)
      {
        uint64_t v40 = *(void *)(v19 + 56);
        if (!v40
          || (uint64_t v41 = *(void *)(v40 + 24)) == 0
          || (BOOL v42 = *(void (**)(void, uint64_t))(v41 + 256)) == 0)
        {
          if ((v39 & 0x80) != 0) {
            goto LABEL_39;
          }
          uint64_t v101 = __nwlog_obj();
          BOOL v102 = os_log_type_enabled(v101, OS_LOG_TYPE_ERROR);
          uint64_t v19 = *(void *)(a1 + 32);
          if (!v102) {
            goto LABEL_39;
          }
          uint64_t v103 = (const char *)(v19 + 284);
          uint64_t v104 = *(void *)(v19 + 56);
          if (!v19) {
            uint64_t v103 = "";
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v103;
          if (v19) {
            uint64_t v105 = " ";
          }
          else {
            uint64_t v105 = "";
          }
          *(_WORD *)&buf[22] = 2080;
          BOOL v129 = (void *)v105;
          LOWORD(v130) = 2048;
          *(void *)((char *)&v130 + 2) = v104;
          __int16 v25 = "%{public}s %{public}s%sNot restarting after disconnect because unable to call reset on output_handler %p";
          uint64_t v26 = v101;
          os_log_type_t v27 = OS_LOG_TYPE_ERROR;
          uint32_t v28 = 42;
          goto LABEL_38;
        }
        v42(*(void *)(v19 + 56), v19 + 24);
LABEL_56:
        uint64_t v43 = *(void *)(*(void *)(a1 + 32) + 56);
        if (v43)
        {
          uint64_t v44 = *(void *)(v43 + 24);
          if (v44)
          {
            os_log_type_t v45 = *(void (**)(void))(v44 + 24);
            if (v45)
            {
              v45();
              return;
            }
          }
        }
        __nwlog_obj();
        uint64_t v91 = *(void *)(*(void *)(a1 + 32) + 56);
        uint64_t v92 = "invalid";
        if (v91)
        {
          char v93 = *(const char **)(v91 + 16);
          if (v93) {
            uint64_t v92 = v93;
          }
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v92;
        os_log_type_t v94 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        char v118 = 0;
        if (!__nwlog_fault(v94, type, &v118)) {
          goto LABEL_168;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v95 = __nwlog_obj();
          os_log_type_t v96 = type[0];
          if (!os_log_type_enabled(v95, type[0])) {
            goto LABEL_168;
          }
          uint64_t v97 = *(void *)(*(void *)(a1 + 32) + 56);
          os_log_type_t v98 = "invalid";
          if (v97)
          {
            uint64_t v99 = *(const char **)(v97 + 16);
            if (v99) {
              os_log_type_t v98 = v99;
            }
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v98;
          v100 = "%{public}s protocol %{public}s has invalid connect callback";
        }
        else if (v118)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v95 = __nwlog_obj();
          os_log_type_t v96 = type[0];
          BOOL v108 = os_log_type_enabled(v95, type[0]);
          if (backtrace_string)
          {
            if (v108)
            {
              uint64_t v109 = *(void *)(*(void *)(a1 + 32) + 56);
              uint64_t v110 = "invalid";
              if (v109)
              {
                uint64_t v111 = *(const char **)(v109 + 16);
                if (v111) {
                  uint64_t v110 = v111;
                }
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v110;
              *(_WORD *)&buf[22] = 2082;
              BOOL v129 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v95, v96, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(backtrace_string);
            goto LABEL_168;
          }
          if (!v108)
          {
LABEL_168:
            if (v94) {
              free(v94);
            }
            return;
          }
          uint64_t v115 = *(void *)(*(void *)(a1 + 32) + 56);
          v116 = "invalid";
          if (v115)
          {
            uint64_t v117 = *(const char **)(v115 + 16);
            if (v117) {
              v116 = v117;
            }
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v116;
          v100 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
        }
        else
        {
          os_log_type_t v95 = __nwlog_obj();
          os_log_type_t v96 = type[0];
          if (!os_log_type_enabled(v95, type[0])) {
            goto LABEL_168;
          }
          uint64_t v112 = *(void *)(*(void *)(a1 + 32) + 56);
          BOOL v113 = "invalid";
          if (v112)
          {
            char v114 = *(const char **)(v112 + 16);
            if (v114) {
              BOOL v113 = v114;
            }
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v113;
          v100 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
        }
        _os_log_impl(&dword_1830D4000, v95, v96, v100, buf, 0x16u);
        goto LABEL_168;
      }
      *(void *)os_log_type_t type = 0;
      BOOL v125 = type;
      uint64_t v126 = 0x2000000000;
      id v127 = 0;
      id v127 = nw_path_copy_flow_registration(*(void **)(v19 + 168), v19 + 24);
      __int16 v46 = v125;
      if (!*((void *)v125 + 3))
      {
        uint64_t v66 = *(void *)(a1 + 32);
        if (!v66 || (*(_WORD *)(v66 + 368) & 0x80) == 0)
        {
          BOOL v67 = __nwlog_obj();
          BOOL v68 = os_log_type_enabled(v67, OS_LOG_TYPE_INFO);
          uint64_t v66 = *(void *)(a1 + 32);
          if (v68)
          {
            long long v69 = "";
            long long v70 = (const char *)(v66 + 284);
            if (!v66) {
              long long v70 = "";
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
            if (v66) {
              long long v69 = " ";
            }
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v70;
            *(_WORD *)&buf[22] = 2080;
            BOOL v129 = (void *)v69;
            _os_log_impl(&dword_1830D4000, v67, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sNot restarting after disconnect because unable to get flow registration", buf, 0x20u);
            uint64_t v66 = *(void *)(a1 + 32);
          }
        }
        nw_http_connect_fail(v66, 22);
        goto LABEL_127;
      }
      v119[0] = MEMORY[0x1E4F143A8];
      v119[1] = 0x40000000;
      os_log_type_t v120 = ___ZL40nw_http_connect_restart_after_disconnectP24nw_protocol_http_connect_block_invoke_41;
      int v121 = &unk_1E52407A8;
      uint64_t v47 = *(void *)(a1 + 32);
      uint64_t v122 = type;
      uint64_t v123 = v47;
      BOOL v48 = *(void **)(v47 + 96);
      if (v48)
      {
        os_release(v48);
        *(void *)(*(void *)(a1 + 32) + 96) = 0;
        __int16 v46 = v125;
        uint64_t v47 = *(void *)(a1 + 32);
      }
      *(void *)(*(void *)(a1 + 32) + 96) = nw_path_flow_registration_create_new_flow(*((void **)v46 + 3), 1, 1, 0, 0, (_OWORD *)(v47 + 240), 0, 0);
      uint64_t v49 = *(void *)(a1 + 32);
      if (*(void *)(v49 + 96))
      {
        nw_http_connect_start_async(v49);
        uint64_t v50 = *(void *)(a1 + 32);
        long long v51 = *(void **)(v50 + 104);
        if (v51)
        {
          os_release(v51);
          *(void *)(*(void *)(a1 + 32) + 104) = 0;
          uint64_t v50 = *(void *)(a1 + 32);
        }
        *(void *)(*(void *)(a1 + 32) + 104) = nw_path_flow_registration_force_update(*(void **)(v50 + 96));
        BOOL v52 = nw_http_connect_end_async(*(void *)(a1 + 32));
        uint64_t v49 = *(void *)(a1 + 32);
        if (!v52)
        {
          if (!v49 || (*(_WORD *)(v49 + 368) & 0x80) == 0)
          {
            uint64_t v79 = __nwlog_obj();
            BOOL v80 = os_log_type_enabled(v79, OS_LOG_TYPE_INFO);
            uint64_t v49 = *(void *)(a1 + 32);
            if (v80)
            {
              v81 = "";
              uint64_t v82 = (const char *)(v49 + 284);
              if (!v49) {
                uint64_t v82 = "";
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
              if (v49) {
                v81 = " ";
              }
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v82;
              *(_WORD *)&buf[22] = 2080;
              BOOL v129 = (void *)v81;
              _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sNot restarting after disconnect because getting new path changed state to destroy", buf, 0x20u);
              uint64_t v49 = *(void *)(a1 + 32);
            }
          }
          nw_http_connect_destroy(v49);
          goto LABEL_126;
        }
        long long v53 = *(NSObject **)(v49 + 104);
        if (v53)
        {
          BOOL v54 = *(void **)(v49 + 120);
          if (v54)
          {
            os_release(v54);
            *(void *)(*(void *)(a1 + 32) + 120) = 0;
            long long v53 = *(NSObject **)(*(void *)(a1 + 32) + 104);
          }
          *(void *)(*(void *)(a1 + 32) + 120) = nw_path_copy_effective_local_endpoint(v53);
          uint64_t v49 = *(void *)(a1 + 32);
          uint64_t v55 = *(void *)(v49 + 72);
          if (!v55) {
            goto LABEL_115;
          }
          uint64_t v56 = *(void *)(v55 + 24);
          if (!v56) {
            goto LABEL_115;
          }
          long long v57 = *(uint64_t (**)(void))(v56 + 112);
          if (!v57) {
            goto LABEL_115;
          }
          long long v58 = v57(*(void *)(v49 + 72));
          uint64_t v49 = *(void *)(a1 + 32);
          if (v58)
          {
            long long v59 = *(void **)(v49 + 112);
            if (v59)
            {
              os_release(v59);
              *(void *)(*(void *)(a1 + 32) + 112) = 0;
            }
            *(void *)(*(void *)(a1 + 32) + 112) = nw_parameters_copy(v58);
            *(void *)buf = 0;
            *(void *)&buf[8] = 0;
            nw_path_flow_registration_get_id(*(void **)(*(void *)(a1 + 32) + 96), buf);
            *(_OWORD *)(*(void *)(a1 + 32) + 24) = *(_OWORD *)buf;
            uint64_t v60 = *(void *)(a1 + 32);
            uint64_t v61 = *(void *)(v60 + 56);
            nw_protocol_set_output_handler(v60 + 24, 0);
            if (nw_http_connect_reattach_channel_protocol(*(void *)(a1 + 32)))
            {
              if (v61)
              {
                uint64_t v62 = *(void *)(v61 + 24);
                if (v62)
                {
                  long long v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 8);
                  if (v63)
                  {
                    uint64_t v64 = *(void *)(a1 + 32);
                    uint64_t v65 = *(void *)(v64 + 56);
                    v63(v61, v64 + 24, 1);
                    nw_protocol_set_output_handler(*(void *)(a1 + 32) + 24, v65);
                  }
                }
              }
              v120((uint64_t)v119);
              _Block_object_dispose(type, 8);
              goto LABEL_56;
            }
            nw_protocol_set_output_handler(*(void *)(a1 + 32) + 24, v61);
            goto LABEL_124;
          }
          if (v49)
          {
LABEL_115:
            if ((*(_WORD *)(v49 + 368) & 0x80) != 0) {
              goto LABEL_125;
            }
          }
          int v87 = __nwlog_obj();
          BOOL v88 = os_log_type_enabled(v87, OS_LOG_TYPE_INFO);
          uint64_t v49 = *(void *)(a1 + 32);
          if (!v88)
          {
LABEL_125:
            nw_http_connect_fail(v49, 22);
LABEL_126:
            v120((uint64_t)v119);
LABEL_127:
            _Block_object_dispose(type, 8);
            return;
          }
          os_log_type_t v89 = "";
          uint64_t v90 = (const char *)(v49 + 284);
          if (!v49) {
            uint64_t v90 = "";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
          if (v49) {
            os_log_type_t v89 = " ";
          }
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v90;
          *(_WORD *)&buf[22] = 2080;
          BOOL v129 = (void *)v89;
          long long v75 = "%{public}s %{public}s%sNot restarting after disconnect because unable to get parameters";
          long long v76 = v87;
          os_log_type_t v77 = OS_LOG_TYPE_INFO;
        }
        else
        {
          if ((*(_WORD *)(v49 + 368) & 0x80) != 0) {
            goto LABEL_125;
          }
          uint64_t v83 = __nwlog_obj();
          BOOL v84 = os_log_type_enabled(v83, OS_LOG_TYPE_ERROR);
          uint64_t v49 = *(void *)(a1 + 32);
          if (!v84) {
            goto LABEL_125;
          }
          int v85 = "";
          __int16 v86 = (const char *)(v49 + 284);
          if (!v49) {
            __int16 v86 = "";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
          if (v49) {
            int v85 = " ";
          }
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v86;
          *(_WORD *)&buf[22] = 2080;
          BOOL v129 = (void *)v85;
          long long v75 = "%{public}s %{public}s%sNot restarting after disconnect because unable to get new path";
          long long v76 = v83;
          os_log_type_t v77 = OS_LOG_TYPE_ERROR;
        }
        uint32_t v78 = 32;
      }
      else
      {
        if ((*(_WORD *)(v49 + 368) & 0x80) != 0) {
          goto LABEL_125;
        }
        long long v71 = __nwlog_obj();
        BOOL v72 = os_log_type_enabled(v71, OS_LOG_TYPE_INFO);
        uint64_t v49 = *(void *)(a1 + 32);
        if (!v72) {
          goto LABEL_125;
        }
        long long v73 = (const char *)(v49 + 284);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
        if (!v49) {
          long long v73 = "";
        }
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v73;
        *(_WORD *)&buf[22] = 2080;
        long long v74 = " ";
        if (!v49) {
          long long v74 = "";
        }
        BOOL v129 = (void *)v74;
        LOWORD(v130) = 1040;
        *(_DWORD *)((char *)&v130 + 2) = 16;
        WORD3(v130) = 2096;
        *((void *)&v130 + 1) = v49 + 240;
        long long v75 = "%{public}s %{public}s%sNot restarting after disconnect because unable to create new flow with nexus agent %{uuid_t}.16P";
        long long v76 = v71;
        os_log_type_t v77 = OS_LOG_TYPE_INFO;
        uint32_t v78 = 48;
      }
      _os_log_impl(&dword_1830D4000, v76, v77, v75, buf, v78);
LABEL_124:
      uint64_t v49 = *(void *)(a1 + 32);
      goto LABEL_125;
    }
    if ((v20 & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v29 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v30 = *(void *)(a1 + 32);
        __int16 v31 = (const char *)(v30 + 284);
        BOOL v32 = "";
        BOOL v33 = v30 == 0;
        int v34 = *(_DWORD *)(v30 + 280);
        if (v33) {
          __int16 v31 = "";
        }
        *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(_DWORD *)buf = 136446978;
        if (!v33) {
          BOOL v32 = " ";
        }
        *(void *)&buf[14] = v31;
        *(_WORD *)&buf[22] = 2080;
        BOOL v129 = (void *)v32;
        LOWORD(v130) = 1024;
        *(_DWORD *)((char *)&v130 + 2) = v34;
        _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sNot restarting because state %d is not negotiating", buf, 0x26u);
      }
    }
  }
  else
  {
    if (!v8 || (*(_WORD *)(v8 + 368) & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v15 = gLogObj;
      BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
      uint64_t v8 = *(void *)(a1 + 32);
      if (v16)
      {
        os_log_type_t v17 = "";
        char v18 = (const char *)(v8 + 284);
        if (!v8) {
          char v18 = "";
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_restart_after_disconnect_block_invoke";
        if (v8) {
          os_log_type_t v17 = " ";
        }
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v18;
        *(_WORD *)&buf[22] = 2080;
        BOOL v129 = (void *)v17;
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sNot restarting after disconnect because http connect state was changed to destroy", buf, 0x20u);
        uint64_t v8 = *(void *)(a1 + 32);
      }
    }
    nw_http_connect_destroy(v8);
  }
}

BOOL nw_http_connect_end_async(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = *(_DWORD *)(a1 + 276);
    *(_DWORD *)(a1 + 276) = v2 - 1;
    if (v2) {
      return (*(_WORD *)(a1 + 368) & 0x40) == 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = *(unsigned int *)(a1 + 276);
    *(_DWORD *)buf = 136446978;
    __int16 v24 = "nw_http_connect_end_async";
    __int16 v25 = 2082;
    uint64_t v26 = "http_connect->in_async";
    __int16 v27 = 2048;
    uint64_t v28 = 1;
    __int16 v29 = 2048;
    uint64_t v30 = v3;
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v4, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v5 = gLogObj;
        os_log_type_t v6 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v7 = *(unsigned int *)(a1 + 276);
          *(_DWORD *)buf = 136446978;
          __int16 v24 = "nw_http_connect_end_async";
          __int16 v25 = 2082;
          uint64_t v26 = "http_connect->in_async";
          __int16 v27 = 2048;
          uint64_t v28 = 1;
          __int16 v29 = 2048;
          uint64_t v30 = v7;
          uint64_t v8 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_16:
          _os_log_impl(&dword_1830D4000, v5, v6, v8, buf, 0x2Au);
        }
      }
      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v5 = gLogObj;
        os_log_type_t v6 = type;
        BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v10)
          {
            uint64_t v11 = *(unsigned int *)(a1 + 276);
            *(_DWORD *)buf = 136447234;
            __int16 v24 = "nw_http_connect_end_async";
            __int16 v25 = 2082;
            uint64_t v26 = "http_connect->in_async";
            __int16 v27 = 2048;
            uint64_t v28 = 1;
            __int16 v29 = 2048;
            uint64_t v30 = v11;
            __int16 v31 = 2082;
            BOOL v32 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(backtrace_string);
          goto LABEL_17;
        }
        if (v10)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 276);
          *(_DWORD *)buf = 136446978;
          __int16 v24 = "nw_http_connect_end_async";
          __int16 v25 = 2082;
          uint64_t v26 = "http_connect->in_async";
          __int16 v27 = 2048;
          uint64_t v28 = 1;
          __int16 v29 = 2048;
          uint64_t v30 = v13;
          uint64_t v8 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_16;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v5 = gLogObj;
        os_log_type_t v6 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v12 = *(unsigned int *)(a1 + 276);
          *(_DWORD *)buf = 136446978;
          __int16 v24 = "nw_http_connect_end_async";
          __int16 v25 = 2082;
          uint64_t v26 = "http_connect->in_async";
          __int16 v27 = 2048;
          uint64_t v28 = 1;
          __int16 v29 = 2048;
          uint64_t v30 = v12;
          uint64_t v8 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    if (v4) {
      free(v4);
    }
    *(_DWORD *)(a1 + 276) = 0;
    return (*(_WORD *)(a1 + 368) & 0x40) == 0;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v24 = "nw_http_connect_end_async";
  BOOL v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v15, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_http_connect_end_async";
        char v18 = "%{public}s called with null http_connect";
LABEL_35:
        _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
      }
    }
    else if (v21)
    {
      uint64_t v19 = (char *)__nw_create_backtrace_string();
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (v19)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v24 = "nw_http_connect_end_async";
          __int16 v25 = 2082;
          uint64_t v26 = v19;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null http_connect, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v19);
        goto LABEL_36;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_http_connect_end_async";
        char v18 = "%{public}s called with null http_connect, no backtrace";
        goto LABEL_35;
      }
    }
    else
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_http_connect_end_async";
        char v18 = "%{public}s called with null http_connect, backtrace limit exceeded";
        goto LABEL_35;
      }
    }
  }
LABEL_36:
  if (v15) {
    free(v15);
  }
  return 0;
}

void nw_http_connect_destroy(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a1 && (__int16 v2 = *(_WORD *)(a1 + 368), (v2 & 0x80) != 0))
  {
    if (*(_DWORD *)(a1 + 276))
    {
LABEL_12:
      *(_WORD *)(a1 + 368) |= 0x40u;
      return;
    }
  }
  else
  {
    if (gLogDatapath)
    {
      uint64_t v28 = __nwlog_obj();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        __int16 v29 = (const char *)(a1 + 284);
        if (!a1) {
          __int16 v29 = "";
        }
        int v31 = 136446978;
        BOOL v32 = "nw_http_connect_destroy";
        __int16 v33 = 2082;
        int v34 = v29;
        uint64_t v30 = " ";
        if (!a1) {
          uint64_t v30 = "";
        }
        __int16 v35 = 2080;
        uint64_t v36 = v30;
        __int16 v37 = 2048;
        uint64_t v38 = a1;
        _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%stearing down %p", (uint8_t *)&v31, 0x2Au);
      }
    }
    if (nw_http_connect_in_async(a1))
    {
      if (!a1 || (*(_WORD *)(a1 + 368) & 0x80) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v3 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          BOOL v4 = "";
          BOOL v32 = "nw_http_connect_destroy";
          os_log_type_t v5 = " ";
          int v31 = 136446722;
          if (a1) {
            BOOL v4 = (const char *)(a1 + 284);
          }
          else {
            os_log_type_t v5 = "";
          }
          __int16 v33 = 2082;
          int v34 = v4;
          __int16 v35 = 2080;
          uint64_t v36 = v5;
          _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}s%shttp connect in async, setting state to destroy", (uint8_t *)&v31, 0x20u);
        }
      }
      goto LABEL_12;
    }
    __int16 v2 = *(_WORD *)(a1 + 368);
  }
  if ((v2 & 0x40) != 0)
  {
    *(_WORD *)(a1 + 368) = v2 & 0xFFBF;
    if (!a1 || (v2 & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = "";
        BOOL v32 = "nw_http_connect_destroy";
        uint64_t v8 = " ";
        int v31 = 136446722;
        if (a1) {
          uint64_t v7 = (const char *)(a1 + 284);
        }
        else {
          uint64_t v8 = "";
        }
        __int16 v33 = 2082;
        int v34 = v7;
        __int16 v35 = 2080;
        uint64_t v36 = v8;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}s%shttp connect destroying after deferral", (uint8_t *)&v31, 0x20u);
      }
    }
  }
  _CFHTTPAuthenticationApplyProxyAuthorizationToRequest();
  __int16 v9 = *(void **)(a1 + 96);
  if (v9)
  {
    nw_path_flow_registration_close(v9);
    BOOL v10 = *(void **)(a1 + 96);
    if (v10)
    {
      os_release(v10);
      *(void *)(a1 + 96) = 0;
    }
  }
  uint64_t v11 = *(void **)(a1 + 88);
  if (v11)
  {
    nw_path_flow_registration_close(v11);
    uint64_t v12 = *(void **)(a1 + 88);
    if (v12)
    {
      os_release(v12);
      *(void *)(a1 + 88) = 0;
    }
  }
  uint64_t v13 = *(void **)(a1 + 128);
  if (v13)
  {
    os_release(v13);
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v14 = *(void **)(a1 + 104);
  if (v14)
  {
    os_release(v14);
    *(void *)(a1 + 104) = 0;
  }
  BOOL v15 = *(void **)(a1 + 112);
  if (v15)
  {
    os_release(v15);
    *(void *)(a1 + 112) = 0;
  }
  BOOL v16 = *(void **)(a1 + 120);
  if (v16)
  {
    os_release(v16);
    *(void *)(a1 + 120) = 0;
  }
  os_log_type_t v17 = *(void **)(a1 + 136);
  if (v17)
  {
    os_release(v17);
    *(void *)(a1 + 136) = 0;
  }
  char v18 = *(void **)(a1 + 144);
  if (v18)
  {
    os_release(v18);
    *(void *)(a1 + 144) = 0;
  }
  uint64_t v19 = *(void **)(a1 + 152);
  if (v19)
  {
    os_release(v19);
    *(void *)(a1 + 152) = 0;
  }
  BOOL v20 = *(void **)(a1 + 160);
  if (v20)
  {
    os_release(v20);
    *(void *)(a1 + 160) = 0;
  }
  char v21 = *(void **)(a1 + 168);
  if (v21)
  {
    os_release(v21);
    *(void *)(a1 + 168) = 0;
  }
  BOOL v22 = *(void **)(a1 + 176);
  if (v22)
  {
    os_release(v22);
    *(void *)(a1 + 176) = 0;
  }
  char v23 = *(void **)(a1 + 184);
  if (v23)
  {
    os_release(v23);
    *(void *)(a1 + 184) = 0;
  }
  __int16 v24 = *(const void **)(a1 + 192);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a1 + 192) = 0;
  }
  __int16 v25 = *(const void **)(a1 + 208);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a1 + 208) = 0;
  }
  uint64_t v26 = *(const void **)(a1 + 200);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 200) = 0;
  }
  __int16 v27 = *(const void **)(a1 + 216);
  if (v27) {
    CFRelease(v27);
  }
  free((void *)a1);
}

void nw_http_connect_fail(uint64_t a1, int a2)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(_DWORD *)(a1 + 280) = 3;
    if (!a2) {
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        os_log_type_t v5 = *(void (**)(void))(v4 + 56);
        if (v5)
        {
          v5();
          goto LABEL_7;
        }
      }
    }
    __nwlog_obj();
    uint64_t v32 = *(void *)(a1 + 72);
    __int16 v33 = "invalid";
    if (v32)
    {
      int v34 = *(const char **)(v32 + 16);
      if (v34) {
        __int16 v33 = v34;
      }
    }
    *(_DWORD *)buf = 136446466;
    int v85 = "nw_http_connect_fail";
    __int16 v86 = 2082;
    int v87 = (void *)v33;
    __int16 v35 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v82 = 0;
    if (__nwlog_fault(v35, &type, &v82))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (!os_log_type_enabled(v36, type)) {
          goto LABEL_116;
        }
        uint64_t v38 = *(void *)(a1 + 72);
        uint64_t v39 = "invalid";
        if (v38)
        {
          uint64_t v40 = *(const char **)(v38 + 16);
          if (v40) {
            uint64_t v39 = v40;
          }
        }
        *(_DWORD *)buf = 136446466;
        int v85 = "nw_http_connect_fail";
        __int16 v86 = 2082;
        int v87 = (void *)v39;
        uint64_t v41 = "%{public}s protocol %{public}s has invalid error callback";
        goto LABEL_115;
      }
      if (!v82)
      {
        uint64_t v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (!os_log_type_enabled(v36, type)) {
          goto LABEL_116;
        }
        uint64_t v76 = *(void *)(a1 + 72);
        os_log_type_t v77 = "invalid";
        if (v76)
        {
          uint32_t v78 = *(const char **)(v76 + 16);
          if (v78) {
            os_log_type_t v77 = v78;
          }
        }
        *(_DWORD *)buf = 136446466;
        int v85 = "nw_http_connect_fail";
        __int16 v86 = 2082;
        int v87 = (void *)v77;
        uint64_t v41 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
        goto LABEL_115;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v36 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v57 = os_log_type_enabled(v36, type);
      if (backtrace_string)
      {
        if (v57)
        {
          uint64_t v58 = *(void *)(a1 + 72);
          long long v59 = "invalid";
          if (v58)
          {
            uint64_t v60 = *(const char **)(v58 + 16);
            if (v60) {
              long long v59 = v60;
            }
          }
          *(_DWORD *)buf = 136446722;
          int v85 = "nw_http_connect_fail";
          __int16 v86 = 2082;
          int v87 = (void *)v59;
          __int16 v88 = 2082;
          os_log_type_t v89 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(backtrace_string);
        goto LABEL_116;
      }
      if (v57)
      {
        uint64_t v79 = *(void *)(a1 + 72);
        BOOL v80 = "invalid";
        if (v79)
        {
          v81 = *(const char **)(v79 + 16);
          if (v81) {
            BOOL v80 = v81;
          }
        }
        *(_DWORD *)buf = 136446466;
        int v85 = "nw_http_connect_fail";
        __int16 v86 = 2082;
        int v87 = (void *)v80;
        uint64_t v41 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
LABEL_115:
        _os_log_impl(&dword_1830D4000, v36, v37, v41, buf, 0x16u);
      }
    }
LABEL_116:
    if (v35) {
      free(v35);
    }
LABEL_7:
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 24);
      if (v7)
      {
        uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 48);
        if (v8)
        {
          v8(v6, a1 + 24);
          goto LABEL_11;
        }
      }
    }
    __nwlog_obj();
    uint64_t v12 = *(void *)(a1 + 72);
    uint64_t v13 = "invalid";
    if (v12)
    {
      uint64_t v14 = *(const char **)(v12 + 16);
      if (v14) {
        uint64_t v13 = v14;
      }
    }
    *(_DWORD *)buf = 136446466;
    int v85 = "nw_http_connect_fail";
    __int16 v86 = 2082;
    int v87 = (void *)v13;
    BOOL v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v82 = 0;
    if (__nwlog_fault(v15, &type, &v82))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_95;
        }
        uint64_t v18 = *(void *)(a1 + 72);
        uint64_t v19 = "invalid";
        if (v18)
        {
          BOOL v20 = *(const char **)(v18 + 16);
          if (v20) {
            uint64_t v19 = v20;
          }
        }
        *(_DWORD *)buf = 136446466;
        int v85 = "nw_http_connect_fail";
        __int16 v86 = 2082;
        int v87 = (void *)v19;
        char v21 = "%{public}s protocol %{public}s has invalid disconnected callback";
        goto LABEL_94;
      }
      if (!v82)
      {
        BOOL v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_95;
        }
        uint64_t v61 = *(void *)(a1 + 72);
        uint64_t v62 = "invalid";
        if (v61)
        {
          long long v63 = *(const char **)(v61 + 16);
          if (v63) {
            uint64_t v62 = v63;
          }
        }
        *(_DWORD *)buf = 136446466;
        int v85 = "nw_http_connect_fail";
        __int16 v86 = 2082;
        int v87 = (void *)v62;
        char v21 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
        goto LABEL_94;
      }
      BOOL v42 = (char *)__nw_create_backtrace_string();
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v43 = os_log_type_enabled(v16, type);
      if (v42)
      {
        if (v43)
        {
          uint64_t v44 = *(void *)(a1 + 72);
          os_log_type_t v45 = "invalid";
          if (v44)
          {
            __int16 v46 = *(const char **)(v44 + 16);
            if (v46) {
              os_log_type_t v45 = v46;
            }
          }
          *(_DWORD *)buf = 136446722;
          int v85 = "nw_http_connect_fail";
          __int16 v86 = 2082;
          int v87 = (void *)v45;
          __int16 v88 = 2082;
          os_log_type_t v89 = v42;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v42);
        goto LABEL_95;
      }
      if (v43)
      {
        uint64_t v69 = *(void *)(a1 + 72);
        long long v70 = "invalid";
        if (v69)
        {
          long long v71 = *(const char **)(v69 + 16);
          if (v71) {
            long long v70 = v71;
          }
        }
        *(_DWORD *)buf = 136446466;
        int v85 = "nw_http_connect_fail";
        __int16 v86 = 2082;
        int v87 = (void *)v70;
        char v21 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
LABEL_94:
        _os_log_impl(&dword_1830D4000, v16, v17, v21, buf, 0x16u);
      }
    }
LABEL_95:
    if (v15) {
      free(v15);
    }
LABEL_11:
    uint64_t v9 = *(void *)(a1 + 56);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 24);
      if (v10)
      {
        uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 32);
        if (v11)
        {
          v11(v9, a1 + 24);
          return;
        }
      }
    }
    __nwlog_obj();
    uint64_t v22 = *(void *)(a1 + 56);
    char v23 = "invalid";
    if (v22)
    {
      __int16 v24 = *(const char **)(v22 + 16);
      if (v24) {
        char v23 = v24;
      }
    }
    *(_DWORD *)buf = 136446466;
    int v85 = "nw_http_connect_fail";
    __int16 v86 = 2082;
    int v87 = (void *)v23;
    __int16 v25 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v82 = 0;
    if (__nwlog_fault(v25, &type, &v82))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (!os_log_type_enabled(v26, type)) {
          goto LABEL_103;
        }
        uint64_t v28 = *(void *)(a1 + 56);
        __int16 v29 = "invalid";
        if (v28)
        {
          uint64_t v30 = *(const char **)(v28 + 16);
          if (v30) {
            __int16 v29 = v30;
          }
        }
        *(_DWORD *)buf = 136446466;
        int v85 = "nw_http_connect_fail";
        __int16 v86 = 2082;
        int v87 = (void *)v29;
        int v31 = "%{public}s protocol %{public}s has invalid disconnect callback";
LABEL_102:
        _os_log_impl(&dword_1830D4000, v26, v27, v31, buf, 0x16u);
        goto LABEL_103;
      }
      if (!v82)
      {
        uint64_t v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (!os_log_type_enabled(v26, type)) {
          goto LABEL_103;
        }
        uint64_t v64 = *(void *)(a1 + 56);
        uint64_t v65 = "invalid";
        if (v64)
        {
          uint64_t v66 = *(const char **)(v64 + 16);
          if (v66) {
            uint64_t v65 = v66;
          }
        }
        *(_DWORD *)buf = 136446466;
        int v85 = "nw_http_connect_fail";
        __int16 v86 = 2082;
        int v87 = (void *)v65;
        int v31 = "%{public}s protocol %{public}s has invalid disconnect callback, backtrace limit exceeded";
        goto LABEL_102;
      }
      uint64_t v47 = (char *)__nw_create_backtrace_string();
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v48 = os_log_type_enabled(v26, type);
      if (!v47)
      {
        if (!v48) {
          goto LABEL_103;
        }
        uint64_t v72 = *(void *)(a1 + 56);
        long long v73 = "invalid";
        if (v72)
        {
          long long v74 = *(const char **)(v72 + 16);
          if (v74) {
            long long v73 = v74;
          }
        }
        *(_DWORD *)buf = 136446466;
        int v85 = "nw_http_connect_fail";
        __int16 v86 = 2082;
        int v87 = (void *)v73;
        int v31 = "%{public}s protocol %{public}s has invalid disconnect callback, no backtrace";
        goto LABEL_102;
      }
      if (v48)
      {
        uint64_t v49 = *(void *)(a1 + 56);
        uint64_t v50 = "invalid";
        if (v49)
        {
          long long v51 = *(const char **)(v49 + 16);
          if (v51) {
            uint64_t v50 = v51;
          }
        }
        *(_DWORD *)buf = 136446722;
        int v85 = "nw_http_connect_fail";
        __int16 v86 = 2082;
        int v87 = (void *)v50;
        __int16 v88 = 2082;
        os_log_type_t v89 = v47;
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s protocol %{public}s has invalid disconnect callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v47);
    }
LABEL_103:
    if (v25)
    {
      long long v75 = (char *)v25;
LABEL_125:
      free(v75);
      return;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v85 = "nw_http_connect_fail";
  BOOL v52 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v82 = 0;
  if (__nwlog_fault(v52, &type, &v82))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      long long v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_123;
      }
      *(_DWORD *)buf = 136446210;
      int v85 = "nw_http_connect_fail";
      uint64_t v55 = "%{public}s called with null http_connect";
LABEL_122:
      _os_log_impl(&dword_1830D4000, v53, v54, v55, buf, 0xCu);
      goto LABEL_123;
    }
    if (!v82)
    {
      long long v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_123;
      }
      *(_DWORD *)buf = 136446210;
      int v85 = "nw_http_connect_fail";
      uint64_t v55 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_122;
    }
    BOOL v67 = (char *)__nw_create_backtrace_string();
    long long v53 = __nwlog_obj();
    os_log_type_t v54 = type;
    BOOL v68 = os_log_type_enabled(v53, type);
    if (!v67)
    {
      if (!v68) {
        goto LABEL_123;
      }
      *(_DWORD *)buf = 136446210;
      int v85 = "nw_http_connect_fail";
      uint64_t v55 = "%{public}s called with null http_connect, no backtrace";
      goto LABEL_122;
    }
    if (v68)
    {
      *(_DWORD *)buf = 136446466;
      int v85 = "nw_http_connect_fail";
      __int16 v86 = 2082;
      int v87 = v67;
      _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s called with null http_connect, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v67);
  }
LABEL_123:
  if (v52)
  {
    long long v75 = (char *)v52;
    goto LABEL_125;
  }
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_35841(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v3;
  }
  void *v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

void ___ZL40nw_http_connect_restart_after_disconnectP24nw_protocol_http_connect_block_invoke_41(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v1 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v1)
  {
    long long v34 = 0uLL;
    uint64_t v3 = v1;
    if (!uuid_is_null(v3 + 32)) {
      long long v34 = *((_OWORD *)v3 + 2);
    }

    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = (*(unsigned __int16 *)(v4 + 368) >> 7) & 1;
    if (!gLogDatapath) {
      LOBYTE(v5) = 1;
    }
    if (*(void *)(v4 + 88))
    {
      if ((v5 & 1) == 0)
      {
        uint64_t v11 = __nwlog_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = *(void *)(a1 + 40);
          BOOL v13 = v12 == 0;
          *(_DWORD *)buf = 136447234;
          __int16 v25 = "nw_http_connect_restart_after_disconnect_block_invoke";
          if (v12) {
            uint64_t v14 = (const char *)(v12 + 284);
          }
          else {
            uint64_t v14 = "";
          }
          __int16 v26 = 2082;
          os_log_type_t v27 = (void *)v14;
          if (v13) {
            BOOL v15 = "";
          }
          else {
            BOOL v15 = " ";
          }
          __int16 v28 = 2080;
          __int16 v29 = v15;
          __int16 v30 = 1040;
          int v31 = 16;
          __int16 v32 = 2096;
          __int16 v33 = &v34;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sCleaning up flow registration %{uuid_t}.16P", buf, 0x30u);
        }
      }
      nw_path_flow_registration_close(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (v6)
      {
        os_release(v6);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      }
    }
    else
    {
      if ((v5 & 1) == 0)
      {
        uint64_t v18 = __nwlog_obj();
        BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
        uint64_t v4 = *(void *)(a1 + 40);
        if (v19)
        {
          *(_DWORD *)buf = 136447234;
          __int16 v25 = "nw_http_connect_restart_after_disconnect_block_invoke";
          BOOL v20 = v4 == 0;
          if (v4) {
            char v21 = (const char *)(v4 + 284);
          }
          else {
            char v21 = "";
          }
          __int16 v26 = 2082;
          os_log_type_t v27 = (void *)v21;
          __int16 v28 = 2080;
          uint64_t v22 = " ";
          if (v20) {
            uint64_t v22 = "";
          }
          __int16 v29 = v22;
          __int16 v30 = 1040;
          int v31 = 16;
          __int16 v32 = 2096;
          __int16 v33 = &v34;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDeferring cleanup of flow registration %{uuid_t}.16P", buf, 0x30u);
          uint64_t v4 = *(void *)(a1 + 40);
        }
      }
      *(void *)(v4 + 88) = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v25 = "nw_http_connect_restart_after_disconnect_block_invoke";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(v34) = 16;
  char v23 = 0;
  if (__nwlog_fault(v7, &v34, &v23))
  {
    if (v34 == 17)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v34;
      if (!os_log_type_enabled(v8, (os_log_type_t)v34)) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_http_connect_restart_after_disconnect_block_invoke";
      uint64_t v10 = "%{public}s called with null flow_registration";
      goto LABEL_41;
    }
    if (!v23)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v34;
      if (!os_log_type_enabled(v8, (os_log_type_t)v34)) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_http_connect_restart_after_disconnect_block_invoke";
      uint64_t v10 = "%{public}s called with null flow_registration, backtrace limit exceeded";
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = v34;
    BOOL v17 = os_log_type_enabled(v8, (os_log_type_t)v34);
    if (backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v25 = "nw_http_connect_restart_after_disconnect_block_invoke";
        __int16 v26 = 2082;
        os_log_type_t v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_42;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_http_connect_restart_after_disconnect_block_invoke";
      uint64_t v10 = "%{public}s called with null flow_registration, no backtrace";
LABEL_41:
      _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    }
  }
LABEL_42:
  if (v7) {
    free(v7);
  }
}

void sub_1838F4920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_http_connect_reattach_channel_protocol(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long v51 = 136446210;
    *(void *)&v51[4] = "nw_http_connect_reattach_channel_protocol";
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(uu) = 16;
    buf[0] = 0;
    if (!__nwlog_fault(v39, &uu, buf)) {
      goto LABEL_92;
    }
    if (uu == 17)
    {
      uint64_t v40 = __nwlog_obj();
      os_log_type_t v41 = uu;
      if (!os_log_type_enabled(v40, (os_log_type_t)uu)) {
        goto LABEL_92;
      }
      *(_DWORD *)long long v51 = 136446210;
      *(void *)&v51[4] = "nw_http_connect_reattach_channel_protocol";
      BOOL v42 = "%{public}s called with null http_connect";
    }
    else if (buf[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v40 = __nwlog_obj();
      os_log_type_t v41 = uu;
      BOOL v44 = os_log_type_enabled(v40, (os_log_type_t)uu);
      if (backtrace_string)
      {
        if (v44)
        {
          *(_DWORD *)long long v51 = 136446466;
          *(void *)&v51[4] = "nw_http_connect_reattach_channel_protocol";
          *(_WORD *)&v51[12] = 2082;
          *(void *)&v51[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s called with null http_connect, dumping backtrace:%{public}s", v51, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_92;
      }
      if (!v44)
      {
LABEL_92:
        if (v39) {
          free(v39);
        }
        return 0;
      }
      *(_DWORD *)long long v51 = 136446210;
      *(void *)&v51[4] = "nw_http_connect_reattach_channel_protocol";
      BOOL v42 = "%{public}s called with null http_connect, no backtrace";
    }
    else
    {
      uint64_t v40 = __nwlog_obj();
      os_log_type_t v41 = uu;
      if (!os_log_type_enabled(v40, (os_log_type_t)uu)) {
        goto LABEL_92;
      }
      *(_DWORD *)long long v51 = 136446210;
      *(void *)&v51[4] = "nw_http_connect_reattach_channel_protocol";
      BOOL v42 = "%{public}s called with null http_connect, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v40, v41, v42, v51, 0xCu);
    goto LABEL_92;
  }
  int protocol_level = nw_path_flow_registration_get_protocol_level(*(void **)(a1 + 104), *(void **)(a1 + 96));
  uint64_t v47 = 0;
  *(void *)&long long uu = 0;
  *((void *)&uu + 1) = &uu;
  uint64_t v57 = 0x2000000000;
  char v58 = 1;
  if (protocol_level > 4) {
    goto LABEL_3;
  }
  int v4 = protocol_level;
  int v5 = *(void **)(a1 + 112);
  uint64_t v6 = MEMORY[0x1E4F143A8];
  *(void *)long long v51 = MEMORY[0x1E4F143A8];
  *(void *)&v51[8] = 0x40000000;
  *(void *)&v51[16] = ___ZL34nw_http_connect_reattach_protocolsP24nw_protocol_http_connect19nw_protocol_level_tS1_PP11nw_protocol_block_invoke;
  BOOL v52 = (const char *)&unk_1E52407F0;
  uint64_t v54 = a1;
  uint64_t v55 = &v47;
  p_long long uu = &uu;
  nw_parameters_internal_iterate_protocol_stack(v5, 4, 0, v51);
  if (!*(unsigned char *)(*((void *)&uu + 1) + 24)) {
    goto LABEL_42;
  }
  if (!v47) {
    goto LABEL_3;
  }
  _Block_object_dispose(&uu, 8);
  *(void *)&long long uu = 0;
  *((void *)&uu + 1) = &uu;
  uint64_t v57 = 0x2000000000;
  char v58 = 1;
  if (v4 <= 3)
  {
    uint64_t v7 = *(void **)(a1 + 112);
    *(void *)long long v51 = v6;
    *(void *)&v51[8] = 0x40000000;
    *(void *)&v51[16] = ___ZL34nw_http_connect_reattach_protocolsP24nw_protocol_http_connect19nw_protocol_level_tS1_PP11nw_protocol_block_invoke;
    BOOL v52 = (const char *)&unk_1E52407F0;
    uint64_t v54 = a1;
    uint64_t v55 = &v47;
    p_long long uu = &uu;
    nw_parameters_internal_iterate_protocol_stack(v7, 3, 0, v51);
    if (!*(unsigned char *)(*((void *)&uu + 1) + 24)) {
      goto LABEL_42;
    }
  }
  if (!v47) {
    goto LABEL_3;
  }
  _Block_object_dispose(&uu, 8);
  *(void *)&long long uu = 0;
  *((void *)&uu + 1) = &uu;
  uint64_t v57 = 0x2000000000;
  char v58 = 1;
  if (v4 <= 2)
  {
    uint64_t v8 = *(void **)(a1 + 112);
    *(void *)long long v51 = v6;
    *(void *)&v51[8] = 0x40000000;
    *(void *)&v51[16] = ___ZL34nw_http_connect_reattach_protocolsP24nw_protocol_http_connect19nw_protocol_level_tS1_PP11nw_protocol_block_invoke;
    BOOL v52 = (const char *)&unk_1E52407F0;
    uint64_t v54 = a1;
    uint64_t v55 = &v47;
    p_long long uu = &uu;
    nw_parameters_internal_iterate_protocol_stack(v8, 2, 0, v51);
    if (!*(unsigned char *)(*((void *)&uu + 1) + 24)) {
      goto LABEL_42;
    }
  }
  if (!v47) {
    goto LABEL_3;
  }
  _Block_object_dispose(&uu, 8);
  *(void *)&long long uu = 0;
  *((void *)&uu + 1) = &uu;
  uint64_t v57 = 0x2000000000;
  char v58 = 1;
  if (v4 <= 1)
  {
    os_log_type_t v9 = *(void **)(a1 + 112);
    *(void *)long long v51 = v6;
    *(void *)&v51[8] = 0x40000000;
    *(void *)&v51[16] = ___ZL34nw_http_connect_reattach_protocolsP24nw_protocol_http_connect19nw_protocol_level_tS1_PP11nw_protocol_block_invoke;
    BOOL v52 = (const char *)&unk_1E52407F0;
    uint64_t v54 = a1;
    uint64_t v55 = &v47;
    p_long long uu = &uu;
    nw_parameters_internal_iterate_protocol_stack(v9, 1, 0, v51);
    if (!*(unsigned char *)(*((void *)&uu + 1) + 24))
    {
LABEL_42:
      _Block_object_dispose(&uu, 8);
      return 0;
    }
  }
  if (!v47)
  {
LABEL_3:
    if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_reattach_protocols";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        __int16 v49 = 2080;
        uint64_t v50 = " ";
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to locate http_connect in protocol stack", buf, 0x20u);
      }
    }
    *(unsigned char *)(*((void *)&uu + 1) + 24) = 0;
    goto LABEL_42;
  }
  _Block_object_dispose(&uu, 8);
  long long uu = 0uLL;
  unsigned int v46 = 0;
  if (!nw_path_flow_registration_get_nexus_instance(*(NWConcrete_nw_path **)(a1 + 104), *(NWConcrete_nw_path_flow_registration **)(a1 + 96), &uu, &v46))
  {
    if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
    {
      __int16 v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v51 = 136446722;
        *(void *)&v51[4] = "nw_http_connect_reattach_channel_protocol";
        *(_WORD *)&v51[12] = 2082;
        *(void *)&v51[14] = a1 + 284;
        *(_WORD *)&v51[22] = 2080;
        BOOL v52 = " ";
        _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNot restarting after disconnect because nexus is not ready", v51, 0x20u);
      }
    }
    return 0;
  }
  int v45 = 0;
  uint64_t nexus_key = nw_path_flow_registration_get_nexus_key(*(NWConcrete_nw_path **)(a1 + 104), *(NWConcrete_nw_path_flow_registration **)(a1 + 96), &v45);
  *(void *)buf = 0;
  *(void *)&buf[8] = 0;
  char can_support_user_packet_pool = nw_path_flow_registration_can_support_user_packet_pool(*(void **)(a1 + 104), *(void **)(a1 + 96));
  unsigned char buf[12] = buf[12] & 0xFE | can_support_user_packet_pool;
  if (nw_path_flow_registration_should_use_event_ring(*(void **)(a1 + 104), *(void **)(a1 + 96))) {
    char v12 = 2;
  }
  else {
    char v12 = 0;
  }
  unsigned char buf[12] = buf[12] & 0xFD | v12;
  *(void *)buf = nexus_key;
  *(_DWORD *)&buf[8] = 16;
  BOOL v13 = nw_path_copy_endpoint(*(void **)(a1 + 104));
  id v14 = nw_path_copy_parameters(*(void **)(a1 + 104));
  BOOL v15 = *(void **)(a1 + 128);
  if (v15)
  {
    os_release(v15);
    *(void *)(a1 + 128) = 0;
  }
  BOOL v16 = nw_parameters_copy_context(v14);
  uint64_t v17 = nw_channel_create_with_attributes(v16, (unsigned __int8 *)&uu, v46, (uint64_t)buf);
  *(void *)(a1 + 128) = v17;
  if (v16)
  {
    os_release(v16);
    uint64_t v17 = *(void *)(a1 + 128);
  }
  __int16 v18 = *(_WORD *)(a1 + 368);
  if (!v17)
  {
    if ((v18 & 0x80) == 0)
    {
      __int16 v26 = __nwlog_obj();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v51 = 136446722;
        *(void *)&v51[4] = "nw_http_connect_reattach_channel_protocol";
        *(_WORD *)&v51[12] = 2082;
        *(void *)&v51[14] = a1 + 284;
        *(_WORD *)&v51[22] = 2080;
        BOOL v52 = " ";
        _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNot restarting after disconnect because failed to open channel", v51, 0x20u);
      }
    }
    if (v13) {
      os_release(v13);
    }
    uint64_t v23 = 0;
    if (v14) {
      goto LABEL_77;
    }
    return v23;
  }
  if ((v18 & 0x80) == 0)
  {
    BOOL v19 = __nwlog_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long v51 = 136446978;
      *(void *)&v51[4] = "nw_http_connect_reattach_channel_protocol";
      *(_WORD *)&v51[12] = 2082;
      *(void *)&v51[14] = a1 + 284;
      *(_WORD *)&v51[22] = 2080;
      BOOL v52 = " ";
      LOWORD(p_uu) = 1024;
      *(_DWORD *)((char *)&p_uu + 2) = v4;
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sopened channel at level %u", v51, 0x26u);
    }
  }
  nw_channel_set_close_automatically(*(void *)(a1 + 128), 1);
  nw_channel_set_defer_input_available(*(void *)(a1 + 128), 1);
  nw_channel_set_protocol_level(*(void *)(a1 + 128), v4);
  if (v4 == 2)
  {
    if (nw_protocol_ip_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_86959);
    }
    if (nw_parameters_has_protocol_in_stack(v14, &nw_protocol_ip_identifier::identifier)
      && v13
      && nw_endpoint_get_type(v13) == nw_endpoint_type_address)
    {
      if (nw_endpoint_get_address_family(v13) == 2) {
        int v20 = 1;
      }
      else {
        int v20 = 2;
      }
      char v21 = *(void **)(a1 + 96);
      if (nw_protocol_ip_identifier::onceToken != -1) {
        dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_86959);
      }
      uint64_t stats_region = nw_channel_get_stats_region(*(void *)(a1 + 128), v20);
      nw_path_flow_registration_set_stats_region(v21, 2, (long long *)&nw_protocol_ip_identifier::identifier, stats_region);
    }
  }
  else if ((v4 & 0xFFFFFFFE) != 2)
  {
    goto LABEL_67;
  }
  os_log_type_t v27 = (void *)nw_protocol_tcp_identifier();
  if (!nw_parameters_has_protocol_in_stack(v14, v27))
  {
    if (nw_protocol_udp_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_udp_identifier::onceToken, &__block_literal_global_23);
    }
    if (nw_parameters_has_protocol_in_stack(v14, &nw_protocol_udp_identifier::identifier))
    {
      __int16 v33 = *(void **)(a1 + 96);
      if (nw_protocol_udp_identifier::onceToken[0] == -1) {
        goto LABEL_65;
      }
    }
    else
    {
      if (nw_parameters_get_upper_transport_protocol(v14) != 253) {
        goto LABEL_67;
      }
      upper_transport_protocol_identifier = (long long *)nw_parameters_get_upper_transport_protocol_identifier(v14);
      uint64_t v35 = *(void **)(a1 + 96);
      uint64_t v36 = nw_channel_get_stats_region(*(void *)(a1 + 128), 5);
      nw_path_flow_registration_set_stats_region(v35, 3, upper_transport_protocol_identifier, v36);
      __int16 v33 = *(void **)(a1 + 96);
      if (nw_protocol_udp_identifier::onceToken[0] == -1) {
        goto LABEL_65;
      }
    }
    dispatch_once(nw_protocol_udp_identifier::onceToken, &__block_literal_global_23);
LABEL_65:
    uint64_t v30 = nw_channel_get_stats_region(*(void *)(a1 + 128), 4);
    __int16 v32 = (long long *)&nw_protocol_udp_identifier::identifier;
    int v31 = v33;
    goto LABEL_66;
  }
  __int16 v28 = *(void **)(a1 + 96);
  uint64_t v29 = nw_protocol_tcp_identifier();
  uint64_t v30 = nw_channel_get_stats_region(*(void *)(a1 + 128), 3);
  int v31 = v28;
  __int16 v32 = (long long *)v29;
LABEL_66:
  nw_path_flow_registration_set_stats_region(v31, 3, v32, v30);
LABEL_67:
  uint64_t protocol_handler = nw_channel_get_protocol_handler(*(void *)(a1 + 128));
  if ((**(unsigned int (***)(void))(protocol_handler + 24))())
  {
    if (nw_channel_set_path_flow_registration(*(void *)(a1 + 128), *(void **)(a1 + 104), *(void **)(a1 + 96)))
    {
      nw_channel_set_keep_path_flow_registration_open(*(void *)(a1 + 128), *(void **)(a1 + 96));
      uint64_t v23 = 1;
      goto LABEL_74;
    }
    if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
    {
      uint64_t v38 = __nwlog_obj();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v51 = 136446722;
        *(void *)&v51[4] = "nw_http_connect_reattach_channel_protocol";
        *(_WORD *)&v51[12] = 2082;
        *(void *)&v51[14] = a1 + 284;
        *(_WORD *)&v51[22] = 2080;
        BOOL v52 = " ";
        _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNot restarting after disconnect because unable to set path flow registration", v51, 0x20u);
      }
    }
  }
  uint64_t v23 = 0;
LABEL_74:
  if (v13) {
    os_release(v13);
  }
  if (v14) {
LABEL_77:
  }
    os_release(v14);
  return v23;
}

uint64_t ___ZL34nw_http_connect_reattach_protocolsP24nw_protocol_http_connect19nw_protocol_level_tS1_PP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 40);
  if (!v7 || (*(_WORD *)(v7 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      BOOL v10 = v9 == 0;
      if (v9) {
        uint64_t v11 = (const char *)(v9 + 284);
      }
      else {
        uint64_t v11 = "";
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v57 = "nw_http_connect_reattach_protocols_block_invoke";
      __int16 v58 = 2082;
      uint64_t v59 = (void *)v11;
      if (v10) {
        char v12 = "";
      }
      else {
        char v12 = " ";
      }
      __int16 v60 = 2080;
      uint64_t v61 = v12;
      __int16 v62 = 2114;
      id v63 = a3;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sEnumerating protocol: %{public}@", buf, 0x2Au);
    }
  }
  uint64_t v13 = **(void **)(a1 + 48);
  if (!v13)
  {
    if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
      dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_102_35650);
    }
    if (nw_protocol_definition_is_equal_unsafe((uint64_t)a3, (uint64_t)(id)nw_proxy_copy_http_connect_definition::proxy_definition))
    {
      uint64_t v29 = *(void *)(a1 + 40);
      if (!v29 || (*(_WORD *)(v29 + 368) & 0x80) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v30 = gLogObj;
        BOOL v31 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
        uint64_t v29 = *(void *)(a1 + 40);
        if (v31)
        {
          BOOL v32 = v29 == 0;
          if (v29) {
            __int16 v33 = (const char *)(v29 + 284);
          }
          else {
            __int16 v33 = "";
          }
          *(_DWORD *)buf = 136446978;
          uint64_t v57 = "nw_http_connect_reattach_protocols_block_invoke";
          __int16 v58 = 2082;
          uint64_t v59 = (void *)v33;
          long long v34 = " ";
          if (v32) {
            long long v34 = "";
          }
          __int16 v60 = 2080;
          uint64_t v61 = v34;
          __int16 v62 = 2114;
          id v63 = a3;
          _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRebuilding stack under protocol: %{public}@", buf, 0x2Au);
          uint64_t v29 = *(void *)(a1 + 40);
        }
      }
      **(void **)(a1 + 48) = v29 + 24;
    }
    return 1;
  }
  uint64_t v14 = *(void *)(a1 + 40);
  if (!v14)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v57 = "nw_http_connect_reattach_protocol";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v44, &type, &v54)) {
      goto LABEL_107;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v45 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (!os_log_type_enabled(v45, type)) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v57 = "nw_http_connect_reattach_protocol";
      uint64_t v47 = "%{public}s called with null http_connect";
    }
    else if (v54)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v45 = __nwlog_obj();
      os_log_type_t v46 = type;
      BOOL v49 = os_log_type_enabled(v45, type);
      if (backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v57 = "nw_http_connect_reattach_protocol";
          __int16 v58 = 2082;
          uint64_t v59 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s called with null http_connect, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_107:
        if (!v44) {
          goto LABEL_52;
        }
LABEL_108:
        free(v44);
        goto LABEL_52;
      }
      if (!v49) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v57 = "nw_http_connect_reattach_protocol";
      uint64_t v47 = "%{public}s called with null http_connect, no backtrace";
    }
    else
    {
      int v45 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (!os_log_type_enabled(v45, type)) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v57 = "nw_http_connect_reattach_protocol";
      uint64_t v47 = "%{public}s called with null http_connect, backtrace limit exceeded";
    }
    goto LABEL_106;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v57 = "nw_http_connect_reattach_protocol";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v44, &type, &v54)) {
      goto LABEL_107;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v54)
      {
        int v45 = __nwlog_obj();
        os_log_type_t v46 = type;
        if (!os_log_type_enabled(v45, type)) {
          goto LABEL_107;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v57 = "nw_http_connect_reattach_protocol";
        uint64_t v47 = "%{public}s called with null definition, backtrace limit exceeded";
        goto LABEL_106;
      }
      uint64_t v50 = (char *)__nw_create_backtrace_string();
      int v45 = __nwlog_obj();
      os_log_type_t v46 = type;
      BOOL v51 = os_log_type_enabled(v45, type);
      if (!v50)
      {
        if (!v51) {
          goto LABEL_107;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v57 = "nw_http_connect_reattach_protocol";
        uint64_t v47 = "%{public}s called with null definition, no backtrace";
        goto LABEL_106;
      }
      if (v51)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v57 = "nw_http_connect_reattach_protocol";
        __int16 v58 = 2082;
        uint64_t v59 = v50;
        BOOL v52 = "%{public}s called with null definition, dumping backtrace:%{public}s";
LABEL_91:
        _os_log_impl(&dword_1830D4000, v45, v46, v52, buf, 0x16u);
      }
LABEL_92:
      free(v50);
      if (!v44) {
        goto LABEL_52;
      }
      goto LABEL_108;
    }
    int v45 = __nwlog_obj();
    os_log_type_t v46 = type;
    if (!os_log_type_enabled(v45, type)) {
      goto LABEL_107;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v57 = "nw_http_connect_reattach_protocol";
    uint64_t v47 = "%{public}s called with null definition";
LABEL_106:
    _os_log_impl(&dword_1830D4000, v45, v46, v47, buf, 0xCu);
    goto LABEL_107;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v57 = "nw_http_connect_reattach_protocol";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v44, &type, &v54)) {
      goto LABEL_107;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v45 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (!os_log_type_enabled(v45, type)) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v57 = "nw_http_connect_reattach_protocol";
      uint64_t v47 = "%{public}s called with null protocol_parameters";
      goto LABEL_106;
    }
    if (!v54)
    {
      int v45 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (!os_log_type_enabled(v45, type)) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v57 = "nw_http_connect_reattach_protocol";
      uint64_t v47 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_106;
    }
    uint64_t v50 = (char *)__nw_create_backtrace_string();
    int v45 = __nwlog_obj();
    os_log_type_t v46 = type;
    BOOL v53 = os_log_type_enabled(v45, type);
    if (!v50)
    {
      if (!v53) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v57 = "nw_http_connect_reattach_protocol";
      uint64_t v47 = "%{public}s called with null protocol_parameters, no backtrace";
      goto LABEL_106;
    }
    if (v53)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v57 = "nw_http_connect_reattach_protocol";
      __int16 v58 = 2082;
      uint64_t v59 = v50;
      BOOL v52 = "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s";
      goto LABEL_91;
    }
    goto LABEL_92;
  }
  id v15 = a3;

  uint64_t internal = nw_protocol_create_internal((uint64_t)v15 + 8, *(void **)(v14 + 120), *(const char **)(v14 + 112), 1);
  if (internal)
  {
    uint64_t v17 = internal;
    __int16 v18 = a4;
    v18[2] = v17;

    BOOL v19 = *(uint64_t (***)(uint64_t, uint64_t))(v17 + 24);
    if (v19 && (int v20 = *v19) != 0)
    {
      char v21 = v20(v17, v13);
      char v22 = v21;
      if (*(void *)(v14 + 56))
      {
        if (v21) {
          goto LABEL_20;
        }
      }
      else
      {
        nw_protocol_set_output_handler(v14 + 24, v17);
        if (v22)
        {
LABEL_20:
          **(void **)(a1 + 48) = v17;
          uint64_t v23 = *(void *)(a1 + 40);
          if (!v23 || (*(_WORD *)(v23 + 368) & 0x80) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v24 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v25 = *(void *)(a1 + 40);
              BOOL v26 = v25 == 0;
              if (v25) {
                os_log_type_t v27 = (const char *)(v25 + 284);
              }
              else {
                os_log_type_t v27 = "";
              }
              *(_DWORD *)buf = 136446978;
              uint64_t v57 = "nw_http_connect_reattach_protocols_block_invoke";
              __int16 v58 = 2082;
              uint64_t v59 = (void *)v27;
              if (v26) {
                __int16 v28 = "";
              }
              else {
                __int16 v28 = " ";
              }
              __int16 v60 = 2080;
              uint64_t v61 = v28;
              __int16 v62 = 2114;
              id v63 = v15;
              _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAttached protocol: %{public}@", buf, 0x2Au);
            }
          }
          return 1;
        }
      }
      if ((*(_WORD *)(v14 + 368) & 0x80) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v36 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          uint64_t v57 = "nw_http_connect_reattach_protocol";
          __int16 v58 = 2082;
          uint64_t v59 = (void *)(v14 + 284);
          __int16 v60 = 2080;
          uint64_t v61 = " ";
          __int16 v62 = 2114;
          id v63 = v15;
          os_log_type_t v37 = "%{public}s %{public}s%sCould not add input handler for %{public}@";
          goto LABEL_51;
        }
      }
    }
    else if ((*(_WORD *)(v14 + 368) & 0x80) == 0)
    {
      uint64_t v36 = __nwlog_obj();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v57 = "nw_http_connect_reattach_protocol";
        __int16 v58 = 2082;
        uint64_t v59 = (void *)(v14 + 284);
        __int16 v60 = 2080;
        uint64_t v61 = " ";
        __int16 v62 = 2114;
        id v63 = v15;
        os_log_type_t v37 = "%{public}s %{public}s%sCannot call add input handler for %{public}@ because it is not valid";
        goto LABEL_51;
      }
    }
  }
  else if ((*(_WORD *)(v14 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v36 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      uint64_t v57 = "nw_http_connect_reattach_protocol";
      __int16 v58 = 2082;
      uint64_t v59 = (void *)(v14 + 284);
      __int16 v60 = 2080;
      uint64_t v61 = " ";
      __int16 v62 = 2114;
      id v63 = v15;
      os_log_type_t v37 = "%{public}s %{public}s%sPath could not create protocol for %{public}@";
LABEL_51:
      _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, v37, buf, 0x2Au);
    }
  }
LABEL_52:
  uint64_t v38 = *(void *)(a1 + 40);
  if (!v38 || (*(_WORD *)(v38 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v39 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)(a1 + 40);
      BOOL v41 = v40 == 0;
      if (v40) {
        BOOL v42 = (const char *)(v40 + 284);
      }
      else {
        BOOL v42 = "";
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v57 = "nw_http_connect_reattach_protocols_block_invoke";
      __int16 v58 = 2082;
      uint64_t v59 = (void *)v42;
      if (v41) {
        BOOL v43 = "";
      }
      else {
        BOOL v43 = " ";
      }
      __int16 v60 = 2080;
      uint64_t v61 = v43;
      __int16 v62 = 2114;
      id v63 = a3;
      _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach protocol %{public}@", buf, 0x2Au);
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

BOOL nw_http_connect_in_async(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(_DWORD *)(a1 + 276) != 0;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v11 = "nw_http_connect_in_async";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v11 = "nw_http_connect_in_async";
        int v5 = "%{public}s called with null http_connect";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v11 = "nw_http_connect_in_async";
          __int16 v12 = 2082;
          uint64_t v13 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null http_connect, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v11 = "nw_http_connect_in_async";
        int v5 = "%{public}s called with null http_connect, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v11 = "nw_http_connect_in_async";
        int v5 = "%{public}s called with null http_connect, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
  return 0;
}

void nw_protocol_http_connect_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    __int16 v58 = __nwlog_obj();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v117 = "nw_protocol_http_connect_connected";
    BOOL v31 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(uu) = 16;
    LOBYTE(v112) = 0;
    if (!__nwlog_fault(v31, &uu, &v112)) {
      goto LABEL_60;
    }
    if (uu == 17)
    {
      uint64_t v59 = __nwlog_obj();
      os_log_type_t v60 = uu;
      if (!os_log_type_enabled(v59, (os_log_type_t)uu)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      long long v34 = "%{public}s called with null protocol";
      goto LABEL_177;
    }
    if (!(_BYTE)v112)
    {
      uint64_t v59 = __nwlog_obj();
      os_log_type_t v60 = uu;
      if (!os_log_type_enabled(v59, (os_log_type_t)uu)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      long long v34 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_177;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v59 = __nwlog_obj();
    os_log_type_t v60 = uu;
    BOOL v67 = os_log_type_enabled(v59, (os_log_type_t)uu);
    if (!backtrace_string)
    {
      if (!v67) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      long long v34 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_177;
    }
    if (v67)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      __int16 v118 = 2082;
      BOOL v119 = backtrace_string;
      BOOL v68 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_129:
      _os_log_impl(&dword_1830D4000, v59, v60, v68, buf, 0x16u);
    }
LABEL_130:
    free(backtrace_string);
    if (!v31) {
      return;
    }
LABEL_61:
    BOOL v42 = (char *)v31;
LABEL_62:
    free(v42);
    return;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v117 = "nw_protocol_http_connect_connected";
    BOOL v31 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(uu) = 16;
    LOBYTE(v112) = 0;
    if (!__nwlog_fault(v31, &uu, &v112)) {
      goto LABEL_60;
    }
    if (uu == 17)
    {
      uint64_t v59 = __nwlog_obj();
      os_log_type_t v60 = uu;
      if (!os_log_type_enabled(v59, (os_log_type_t)uu)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      long long v34 = "%{public}s called with null http_connect";
      goto LABEL_177;
    }
    if (!(_BYTE)v112)
    {
      uint64_t v59 = __nwlog_obj();
      os_log_type_t v60 = uu;
      if (!os_log_type_enabled(v59, (os_log_type_t)uu)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      long long v34 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_177;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v59 = __nwlog_obj();
    os_log_type_t v60 = uu;
    BOOL v69 = os_log_type_enabled(v59, (os_log_type_t)uu);
    if (!backtrace_string)
    {
      if (!v69) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      long long v34 = "%{public}s called with null http_connect, no backtrace";
      goto LABEL_177;
    }
    if (v69)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      __int16 v118 = 2082;
      BOOL v119 = backtrace_string;
      BOOL v68 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
      goto LABEL_129;
    }
    goto LABEL_130;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v117 = "nw_protocol_http_connect_connected";
    BOOL v31 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(uu) = 16;
    LOBYTE(v112) = 0;
    if (!__nwlog_fault(v31, &uu, &v112)) {
      goto LABEL_60;
    }
    if (uu == 17)
    {
      uint64_t v59 = __nwlog_obj();
      os_log_type_t v60 = uu;
      if (!os_log_type_enabled(v59, (os_log_type_t)uu)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      long long v34 = "%{public}s called with null other_protocol";
      goto LABEL_177;
    }
    if (!(_BYTE)v112)
    {
      uint64_t v59 = __nwlog_obj();
      os_log_type_t v60 = uu;
      if (!os_log_type_enabled(v59, (os_log_type_t)uu)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      long long v34 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_177;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v59 = __nwlog_obj();
    os_log_type_t v60 = uu;
    BOOL v70 = os_log_type_enabled(v59, (os_log_type_t)uu);
    if (backtrace_string)
    {
      if (!v70) {
        goto LABEL_130;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      __int16 v118 = 2082;
      BOOL v119 = backtrace_string;
      BOOL v68 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_129;
    }
    if (!v70) {
      goto LABEL_60;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v117 = "nw_protocol_http_connect_connected";
    long long v34 = "%{public}s called with null other_protocol, no backtrace";
LABEL_177:
    uint64_t v39 = v59;
    os_log_type_t v40 = v60;
    uint32_t v41 = 12;
LABEL_59:
    _os_log_impl(&dword_1830D4000, v39, v40, v34, buf, v41);
LABEL_60:
    if (!v31) {
      return;
    }
    goto LABEL_61;
  }
  if (a1->output_handler != a2)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
        if (connected)
        {
          char v8 = a2;
LABEL_10:
          connected(default_input_handler, v8);
          return;
        }
      }
    }
    __nwlog_obj();
    BOOL v48 = a1->default_input_handler;
    BOOL v49 = "invalid";
    if (v48)
    {
      identifier = v48->identifier;
      if (identifier) {
        BOOL v49 = (const char *)identifier;
      }
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v117 = "nw_protocol_http_connect_connected";
    __int16 v118 = 2082;
    BOOL v119 = (char *)v49;
    BOOL v51 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(uu) = 16;
    LOBYTE(v112) = 0;
    if (__nwlog_fault(v51, &uu, &v112))
    {
      if (uu == 17)
      {
        BOOL v52 = __nwlog_obj();
        os_log_type_t v53 = uu;
        if (!os_log_type_enabled(v52, (os_log_type_t)uu)) {
          goto LABEL_163;
        }
        char v54 = a1->default_input_handler;
        uint64_t v55 = "invalid";
        if (v54)
        {
          uint64_t v56 = v54->identifier;
          if (v56) {
            uint64_t v55 = (const char *)v56;
          }
        }
LABEL_94:
        *(_DWORD *)buf = 136446466;
        uint64_t v117 = "nw_protocol_http_connect_connected";
        __int16 v118 = 2082;
        BOOL v119 = (char *)v55;
        uint64_t v57 = "%{public}s protocol %{public}s has invalid connected callback";
LABEL_162:
        _os_log_impl(&dword_1830D4000, v52, v53, v57, buf, 0x16u);
        goto LABEL_163;
      }
      if ((_BYTE)v112)
      {
        uint64_t v61 = (char *)__nw_create_backtrace_string();
        BOOL v52 = __nwlog_obj();
        os_log_type_t v53 = uu;
        BOOL v62 = os_log_type_enabled(v52, (os_log_type_t)uu);
        if (v61)
        {
          if (v62)
          {
            id v63 = a1->default_input_handler;
            uint64_t v64 = "invalid";
            if (v63)
            {
              uint64_t v65 = v63->identifier;
              if (v65) {
                uint64_t v64 = (const char *)v65;
              }
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v117 = "nw_protocol_http_connect_connected";
            __int16 v118 = 2082;
            BOOL v119 = (char *)v64;
            __int16 v120 = 2082;
            int v121 = v61;
            _os_log_impl(&dword_1830D4000, v52, v53, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v61);
          goto LABEL_163;
        }
        if (!v62) {
          goto LABEL_163;
        }
        os_log_type_t v89 = a1->default_input_handler;
        uint64_t v90 = "invalid";
        if (v89)
        {
          uint64_t v91 = v89->identifier;
          if (v91) {
            uint64_t v90 = (const char *)v91;
          }
        }
LABEL_161:
        *(_DWORD *)buf = 136446466;
        uint64_t v117 = "nw_protocol_http_connect_connected";
        __int16 v118 = 2082;
        BOOL v119 = (char *)v90;
        uint64_t v57 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
        goto LABEL_162;
      }
      BOOL v52 = __nwlog_obj();
      os_log_type_t v53 = uu;
      if (!os_log_type_enabled(v52, (os_log_type_t)uu)) {
        goto LABEL_163;
      }
      long long v71 = a1->default_input_handler;
      uint64_t v72 = "invalid";
      if (v71)
      {
        long long v73 = v71->identifier;
        if (v73) {
          uint64_t v72 = (const char *)v73;
        }
      }
LABEL_136:
      *(_DWORD *)buf = 136446466;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      __int16 v118 = 2082;
      BOOL v119 = (char *)v72;
      uint64_t v57 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
      goto LABEL_162;
    }
    goto LABEL_163;
  }
  __int16 v9 = *((_WORD *)handle + 184);
  *((_WORD *)handle + 184) = v9 | 0x10;
  switch(*((_DWORD *)handle + 70))
  {
    case 0:
      if ((v9 & 1) == 0) {
        goto LABEL_79;
      }
      path = nw_protocol_http_connect_get_path((nw_protocol *)(handle + 24));
      if (path)
      {
        uint64_t v11 = path;
        __int16 v12 = v11->parameters;

        if (v12)
        {
          uint64_t v13 = nw_parameters_copy_context(v12);
          if (v13)
          {
            uint64_t v14 = v13;
            id v15 = (NWConcrete_nw_path_flow_registration *)nw_path_copy_flow_registration(v13, (uint64_t)(handle + 24));
            if (!v15)
            {
              if ((*((_WORD *)handle + 184) & 0x80) == 0)
              {
                BOOL v43 = __nwlog_obj();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  uint64_t v117 = "nw_http_connect_keep_path_flow_registration_open";
                  __int16 v118 = 2082;
                  BOOL v119 = handle + 284;
                  __int16 v120 = 2080;
                  int v121 = " ";
                  _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sUnable to copy flow registration", buf, 0x20u);
                }
              }
              goto LABEL_78;
            }
            BOOL v16 = v15;
            long long uu = 0uLL;
            unsigned int v115 = 0;
            if (nw_path_flow_registration_get_nexus_instance(v11, v15, &uu, &v115))
            {
              int v114 = 0;
              uint64_t nexus_key = nw_path_flow_registration_get_nexus_key(v11, v16, &v114);
              uint64_t v113 = 16;
              char can_support_user_packet_pool = nw_path_flow_registration_can_support_user_packet_pool(v11, v16);
              if (nw_path_flow_registration_should_use_event_ring(v11, v16)) {
                char v19 = 2;
              }
              else {
                char v19 = 0;
              }
              BYTE4(v113) = v19 | can_support_user_packet_pool;
              uint64_t v112 = nexus_key;
              BOOL v20 = nw_channel_create_with_attributes(v14, (unsigned __int8 *)&uu, v115, (uint64_t)&v112);
              if (v20)
              {
                char v21 = (void *)v20;
                nw_channel_set_keep_path_flow_registration_open(v20, v16);
                os_release(v21);
LABEL_77:
                os_release(v16);
LABEL_78:
                os_release(v14);
                os_release(v12);
                goto LABEL_79;
              }
              if ((*((_WORD *)handle + 184) & 0x80) != 0) {
                goto LABEL_77;
              }
              BOOL v44 = __nwlog_obj();
              if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
                goto LABEL_77;
              }
              *(_DWORD *)buf = 136446722;
              uint64_t v117 = "nw_http_connect_keep_path_flow_registration_open";
              __int16 v118 = 2082;
              BOOL v119 = handle + 284;
              __int16 v120 = 2080;
              int v121 = " ";
              int v45 = "%{public}s %{public}s%sUnable to get channel";
            }
            else
            {
              if ((*((_WORD *)handle + 184) & 0x80) != 0) {
                goto LABEL_77;
              }
              BOOL v44 = __nwlog_obj();
              if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
                goto LABEL_77;
              }
              *(_DWORD *)buf = 136446722;
              uint64_t v117 = "nw_http_connect_keep_path_flow_registration_open";
              __int16 v118 = 2082;
              BOOL v119 = handle + 284;
              __int16 v120 = 2080;
              int v121 = " ";
              int v45 = "%{public}s %{public}s%sUnable to get nexus instance";
            }
            _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_ERROR, v45, buf, 0x20u);
            goto LABEL_77;
          }
          os_release(v12);
          if ((*((_WORD *)handle + 184) & 0x80) == 0)
          {
            os_log_type_t v37 = __nwlog_obj();
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              uint64_t v117 = "nw_http_connect_keep_path_flow_registration_open";
              __int16 v118 = 2082;
              BOOL v119 = handle + 284;
              __int16 v120 = 2080;
              int v121 = " ";
              uint64_t v38 = "%{public}s %{public}s%sUnable to get context";
              goto LABEL_66;
            }
          }
LABEL_79:
          uint64_t v46 = mach_continuous_time();
          if (v46 <= 1) {
            uint64_t v47 = 1;
          }
          else {
            uint64_t v47 = v46;
          }
          *(void *)handle = v47;
          *((_DWORD *)handle + 70) = 1;
          uint64_t v25 = (uint64_t)handle;
          char v22 = 0;
          goto LABEL_83;
        }
        if ((*((_WORD *)handle + 184) & 0x80) != 0) {
          goto LABEL_79;
        }
        os_log_type_t v37 = __nwlog_obj();
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
          goto LABEL_79;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v117 = "nw_http_connect_keep_path_flow_registration_open";
        __int16 v118 = 2082;
        BOOL v119 = handle + 284;
        __int16 v120 = 2080;
        int v121 = " ";
        uint64_t v38 = "%{public}s %{public}s%sUnable to get parameters";
      }
      else
      {
        if ((*((_WORD *)handle + 184) & 0x80) != 0) {
          goto LABEL_79;
        }
        os_log_type_t v37 = __nwlog_obj();
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
          goto LABEL_79;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v117 = "nw_http_connect_keep_path_flow_registration_open";
        __int16 v118 = 2082;
        BOOL v119 = handle + 284;
        __int16 v120 = 2080;
        int v121 = " ";
        uint64_t v38 = "%{public}s %{public}s%sUnable to get path";
      }
LABEL_66:
      _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_ERROR, v38, buf, 0x20u);
      goto LABEL_79;
    case 1:
      char v22 = (const void *)*((void *)handle + 26);
      int v23 = v9 & 8;
      if (v22) {
        BOOL v24 = v23 == 0;
      }
      else {
        BOOL v24 = 0;
      }
      if (v24)
      {
        uint64_t v25 = (uint64_t)handle;
LABEL_83:
        if ((nw_http_connect_send_request(v25, v22) & 1) == 0) {
          nw_http_connect_fail((uint64_t)handle, 22);
        }
      }
      return;
    case 2:
      BOOL v26 = a1->default_input_handler;
      if (v26)
      {
        os_log_type_t v27 = v26->callbacks;
        if (v27)
        {
          __int16 v28 = (void (*)(void))v27->connected;
          if (v28)
          {
            v28();
            goto LABEL_34;
          }
        }
      }
      __nwlog_obj();
      long long v74 = a1->default_input_handler;
      long long v75 = "invalid";
      if (v74)
      {
        uint64_t v76 = v74->identifier;
        if (v76) {
          long long v75 = (const char *)v76;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      __int16 v118 = 2082;
      BOOL v119 = (char *)v75;
      os_log_type_t v77 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(uu) = 16;
      LOBYTE(v112) = 0;
      if (!__nwlog_fault(v77, &uu, &v112)) {
        goto LABEL_211;
      }
      if (uu == 17)
      {
        uint32_t v78 = __nwlog_obj();
        os_log_type_t v79 = uu;
        if (!os_log_type_enabled(v78, (os_log_type_t)uu)) {
          goto LABEL_211;
        }
        BOOL v80 = a1->default_input_handler;
        v81 = "invalid";
        if (v80)
        {
          char v82 = v80->identifier;
          if (v82) {
            v81 = (const char *)v82;
          }
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v117 = "nw_protocol_http_connect_connected";
        __int16 v118 = 2082;
        BOOL v119 = (char *)v81;
        uint64_t v83 = "%{public}s protocol %{public}s has invalid connected callback";
LABEL_210:
        _os_log_impl(&dword_1830D4000, v78, v79, v83, buf, 0x16u);
        goto LABEL_211;
      }
      if (!(_BYTE)v112)
      {
        uint32_t v78 = __nwlog_obj();
        os_log_type_t v79 = uu;
        if (!os_log_type_enabled(v78, (os_log_type_t)uu)) {
          goto LABEL_211;
        }
        BOOL v102 = a1->default_input_handler;
        uint64_t v103 = "invalid";
        if (v102)
        {
          uint64_t v104 = v102->identifier;
          if (v104) {
            uint64_t v103 = (const char *)v104;
          }
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v117 = "nw_protocol_http_connect_connected";
        __int16 v118 = 2082;
        BOOL v119 = (char *)v103;
        uint64_t v83 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_210;
      }
      uint64_t v92 = (char *)__nw_create_backtrace_string();
      uint32_t v78 = __nwlog_obj();
      os_log_type_t v79 = uu;
      BOOL v93 = os_log_type_enabled(v78, (os_log_type_t)uu);
      if (!v92)
      {
        if (!v93) {
          goto LABEL_211;
        }
        uint64_t v107 = a1->default_input_handler;
        BOOL v108 = "invalid";
        if (v107)
        {
          uint64_t v109 = v107->identifier;
          if (v109) {
            BOOL v108 = (const char *)v109;
          }
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v117 = "nw_protocol_http_connect_connected";
        __int16 v118 = 2082;
        BOOL v119 = (char *)v108;
        uint64_t v83 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
        goto LABEL_210;
      }
      if (v93)
      {
        os_log_type_t v94 = a1->default_input_handler;
        os_log_type_t v95 = "invalid";
        if (v94)
        {
          os_log_type_t v96 = v94->identifier;
          if (v96) {
            os_log_type_t v95 = (const char *)v96;
          }
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v117 = "nw_protocol_http_connect_connected";
        __int16 v118 = 2082;
        BOOL v119 = (char *)v95;
        __int16 v120 = 2082;
        int v121 = v92;
        _os_log_impl(&dword_1830D4000, v78, v79, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v92);
LABEL_211:
      if (v77) {
        free(v77);
      }
LABEL_34:
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        uint64_t v29 = default_input_handler->callbacks;
        if (v29)
        {
          connected = (void (*)(nw_protocol *, nw_protocol *))v29->connected;
          if (connected)
          {
            char v8 = a1;
            goto LABEL_10;
          }
        }
      }
      __nwlog_obj();
      BOOL v84 = a1->default_input_handler;
      int v85 = "invalid";
      if (v84)
      {
        __int16 v86 = v84->identifier;
        if (v86) {
          int v85 = (const char *)v86;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      __int16 v118 = 2082;
      BOOL v119 = (char *)v85;
      BOOL v51 = (const char *)_os_log_send_and_compose_impl();
      LOBYTE(uu) = 16;
      LOBYTE(v112) = 0;
      if (__nwlog_fault(v51, &uu, &v112))
      {
        if (uu == 17)
        {
          BOOL v52 = __nwlog_obj();
          os_log_type_t v53 = uu;
          if (!os_log_type_enabled(v52, (os_log_type_t)uu)) {
            goto LABEL_163;
          }
          int v87 = a1->default_input_handler;
          uint64_t v55 = "invalid";
          if (v87)
          {
            __int16 v88 = v87->identifier;
            if (v88) {
              uint64_t v55 = (const char *)v88;
            }
          }
          goto LABEL_94;
        }
        if (!(_BYTE)v112)
        {
          BOOL v52 = __nwlog_obj();
          os_log_type_t v53 = uu;
          if (!os_log_type_enabled(v52, (os_log_type_t)uu)) {
            goto LABEL_163;
          }
          uint64_t v105 = a1->default_input_handler;
          uint64_t v72 = "invalid";
          if (v105)
          {
            BOOL v106 = v105->identifier;
            if (v106) {
              uint64_t v72 = (const char *)v106;
            }
          }
          goto LABEL_136;
        }
        uint64_t v97 = (char *)__nw_create_backtrace_string();
        BOOL v52 = __nwlog_obj();
        os_log_type_t v53 = uu;
        BOOL v98 = os_log_type_enabled(v52, (os_log_type_t)uu);
        if (v97)
        {
          if (v98)
          {
            uint64_t v99 = a1->default_input_handler;
            v100 = "invalid";
            if (v99)
            {
              uint64_t v101 = v99->identifier;
              if (v101) {
                v100 = (const char *)v101;
              }
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v117 = "nw_protocol_http_connect_connected";
            __int16 v118 = 2082;
            BOOL v119 = (char *)v100;
            __int16 v120 = 2082;
            int v121 = v97;
            _os_log_impl(&dword_1830D4000, v52, v53, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v97);
          if (v51) {
            goto LABEL_164;
          }
          return;
        }
        if (v98)
        {
          uint64_t v110 = a1->default_input_handler;
          uint64_t v90 = "invalid";
          if (v110)
          {
            uint64_t v111 = v110->identifier;
            if (v111) {
              uint64_t v90 = (const char *)v111;
            }
          }
          goto LABEL_161;
        }
      }
LABEL_163:
      if (v51)
      {
LABEL_164:
        BOOL v42 = (char *)v51;
        goto LABEL_62;
      }
      return;
    case 3:
      if ((v9 & 0x80) != 0) {
        return;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v30 = handle + 284;
      *(_DWORD *)buf = 136446722;
      uint64_t v117 = "nw_protocol_http_connect_connected";
      __int16 v118 = 2082;
      BOOL v119 = handle + 284;
      __int16 v120 = 2080;
      int v121 = " ";
      BOOL v31 = (const char *)_os_log_send_and_compose_impl();
      LOBYTE(uu) = 16;
      LOBYTE(v112) = 0;
      if (!__nwlog_fault(v31, &uu, &v112)) {
        goto LABEL_60;
      }
      if (uu == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v32 = gLogObj;
        os_log_type_t v33 = uu;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)uu)) {
          goto LABEL_60;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v117 = "nw_protocol_http_connect_connected";
        __int16 v118 = 2082;
        BOOL v119 = v30;
        __int16 v120 = 2080;
        int v121 = " ";
        long long v34 = "%{public}s %{public}s%shttp connect state is failed";
LABEL_58:
        uint64_t v39 = v32;
        os_log_type_t v40 = v33;
        uint32_t v41 = 32;
        goto LABEL_59;
      }
      if (!(_BYTE)v112)
      {
        BOOL v32 = __nwlog_obj();
        os_log_type_t v33 = uu;
        if (!os_log_type_enabled(v32, (os_log_type_t)uu)) {
          goto LABEL_60;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v117 = "nw_protocol_http_connect_connected";
        __int16 v118 = 2082;
        BOOL v119 = v30;
        __int16 v120 = 2080;
        int v121 = " ";
        long long v34 = "%{public}s %{public}s%shttp connect state is failed, backtrace limit exceeded";
        goto LABEL_58;
      }
      uint64_t v35 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v32 = gLogObj;
      os_log_type_t v33 = uu;
      BOOL v36 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)uu);
      if (!v35)
      {
        if (!v36) {
          goto LABEL_60;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v117 = "nw_protocol_http_connect_connected";
        __int16 v118 = 2082;
        BOOL v119 = v30;
        __int16 v120 = 2080;
        int v121 = " ";
        long long v34 = "%{public}s %{public}s%shttp connect state is failed, no backtrace";
        goto LABEL_58;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v117 = "nw_protocol_http_connect_connected";
        __int16 v118 = 2082;
        BOOL v119 = v30;
        __int16 v120 = 2080;
        int v121 = " ";
        __int16 v122 = 2082;
        uint64_t v123 = v35;
        _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s %{public}s%shttp connect state is failed, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v35);
      break;
    default:
      return;
  }
  goto LABEL_60;
}

uint64_t nw_http_connect_send_request(uint64_t a1, CFTypeRef cf)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  if (!a1 || (*(_WORD *)(a1 + 368) & 0x80) == 0)
  {
    if (gLogDatapath)
    {
      int v133 = __nwlog_obj();
      if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v134 = " ";
        int v135 = (const char *)(a1 + 284);
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
        *(_DWORD *)buf = 136446722;
        if (!a1)
        {
          uint64_t v134 = "";
          int v135 = "";
        }
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v135;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = v134;
        _os_log_impl(&dword_1830D4000, v133, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
    if (!a1)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
      BOOL v129 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v161[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v129, type, v161)) {
        goto LABEL_324;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        long long v130 = __nwlog_obj();
        os_log_type_t v131 = type[0];
        if (!os_log_type_enabled(v130, type[0])) {
          goto LABEL_324;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
        uint64_t v132 = "%{public}s called with null http_connect";
      }
      else if (v161[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        long long v130 = __nwlog_obj();
        os_log_type_t v131 = type[0];
        BOOL v137 = os_log_type_enabled(v130, type[0]);
        if (backtrace_string)
        {
          if (v137)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v130, v131, "%{public}s called with null http_connect, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_324;
        }
        if (!v137)
        {
LABEL_324:
          if (v129) {
            free(v129);
          }
          return 0;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
        uint64_t v132 = "%{public}s called with null http_connect, no backtrace";
      }
      else
      {
        long long v130 = __nwlog_obj();
        os_log_type_t v131 = type[0];
        if (!os_log_type_enabled(v130, type[0])) {
          goto LABEL_324;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
        uint64_t v132 = "%{public}s called with null http_connect, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v130, v131, v132, buf, 0xCu);
      goto LABEL_324;
    }
  }
  if (cf)
  {
    Request = (__CFHTTPMessage *)CFRetain(cf);
    goto LABEL_7;
  }
  if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
  {
    if (gLogDatapath)
    {
      v144 = __nwlog_obj();
      if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        _os_log_impl(&dword_1830D4000, v144, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
  }
  nw_endpoint_type_t v26 = nw_endpoint_get_type(*(nw_endpoint_t *)(a1 + 144));
  if (v26 == nw_endpoint_type_address)
  {
    uint64_t v29 = nw_endpoint_copy_address_string(*(nw_endpoint_t *)(a1 + 144));
    hostname = 0;
  }
  else
  {
    nw_endpoint_type_t v27 = v26;
    if (v26 != nw_endpoint_type_host)
    {
      if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v48 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = a1 + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v171 = " ";
          LOWORD(v172) = 1024;
          *(_DWORD *)((char *)&v172 + 2) = v27;
          BOOL v49 = "%{public}s %{public}s%sUnsupported endpoint type: %d";
          uint64_t v50 = v48;
          uint32_t v51 = 38;
LABEL_85:
          _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_ERROR, v49, buf, v51);
        }
      }
LABEL_86:
      nw_http_connect_fail(a1, 22);
      if ((*(_WORD *)(a1 + 368) & 0x80) != 0) {
        return 0;
      }
LABEL_213:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v102 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        _os_log_impl(&dword_1830D4000, v102, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to create request message", buf, 0x20u);
        return 0;
      }
      return 0;
    }
    hostname = nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 144));
    uint64_t v29 = 0;
  }
  uint64_t v39 = nw_endpoint_copy_port_string(*(nw_endpoint_t *)(a1 + 144));
  if (!v39)
  {
    if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v58 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        BOOL v49 = "%{public}s %{public}s%sCannot connect without port";
        uint64_t v50 = v58;
        uint32_t v51 = 32;
        goto LABEL_85;
      }
    }
    goto LABEL_86;
  }
  os_log_type_t v40 = v39;
  CFAllocatorRef v41 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  BOOL v42 = "";
  if (v29) {
    BOOL v42 = v29;
  }
  if (hostname) {
    BOOL v43 = hostname;
  }
  else {
    BOOL v43 = v42;
  }
  CFStringRef v44 = CFStringCreateWithFormat(v41, 0, @"%s:%s", v43, v39);
  if (!v44)
  {
    if ((*(_WORD *)(a1 + 368) & 0x80) != 0) {
      goto LABEL_186;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = a1 + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v171 = " ";
    uint64_t v61 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v161[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v61, type, v161))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v62 = gLogObj;
        os_log_type_t v63 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_184;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        uint64_t v64 = "%{public}s %{public}s%sCFStringCreateWithFormat failed";
        goto LABEL_183;
      }
      if (v161[0] == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v62 = __nwlog_obj();
        os_log_type_t v63 = type[0];
        if (!os_log_type_enabled(v62, type[0])) {
          goto LABEL_184;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        uint64_t v64 = "%{public}s %{public}s%sCFStringCreateWithFormat failed, backtrace limit exceeded";
        goto LABEL_183;
      }
      long long v71 = (char *)__nw_create_backtrace_string();
      BOOL v62 = __nwlog_obj();
      os_log_type_t v63 = type[0];
      BOOL v72 = os_log_type_enabled(v62, type[0]);
      if (v71)
      {
        if (v72)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = a1 + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v171 = " ";
          LOWORD(v172) = 2082;
          *(void *)((char *)&v172 + 2) = v71;
          _os_log_impl(&dword_1830D4000, v62, v63, "%{public}s %{public}s%sCFStringCreateWithFormat failed, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v71);
        goto LABEL_184;
      }
      if (v72)
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        uint64_t v64 = "%{public}s %{public}s%sCFStringCreateWithFormat failed, no backtrace";
LABEL_183:
        _os_log_impl(&dword_1830D4000, v62, v63, v64, buf, 0x20u);
      }
    }
LABEL_184:
    if (v61) {
      free(v61);
    }
LABEL_186:
    if (!v29)
    {
LABEL_212:
      free(v40);
      if ((*(_WORD *)(a1 + 368) & 0x80) != 0) {
        return 0;
      }
      goto LABEL_213;
    }
LABEL_211:
    free(v29);
    goto LABEL_212;
  }
  CFStringRef v45 = v44;
  CFURLRef v46 = CFURLCreateWithString(v41, v44, 0);
  if (!v46)
  {
    if ((*(_WORD *)(a1 + 368) & 0x80) != 0) {
      goto LABEL_209;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = a1 + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v171 = " ";
    BOOL v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v161[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v67, type, v161))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v68 = __nwlog_obj();
        os_log_type_t v69 = type[0];
        if (!os_log_type_enabled(v68, type[0])) {
          goto LABEL_207;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        BOOL v70 = "%{public}s %{public}s%sCFURLCreateWithString failed";
LABEL_206:
        _os_log_impl(&dword_1830D4000, v68, v69, v70, buf, 0x20u);
        goto LABEL_207;
      }
      if (v161[0] == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v68 = __nwlog_obj();
        os_log_type_t v69 = type[0];
        if (!os_log_type_enabled(v68, type[0])) {
          goto LABEL_207;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        BOOL v70 = "%{public}s %{public}s%sCFURLCreateWithString failed, backtrace limit exceeded";
        goto LABEL_206;
      }
      long long v73 = (char *)__nw_create_backtrace_string();
      BOOL v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      BOOL v74 = os_log_type_enabled(v68, type[0]);
      if (!v73)
      {
        if (!v74) {
          goto LABEL_207;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        BOOL v70 = "%{public}s %{public}s%sCFURLCreateWithString failed, no backtrace";
        goto LABEL_206;
      }
      if (v74)
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        LOWORD(v172) = 2082;
        *(void *)((char *)&v172 + 2) = v73;
        _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s %{public}s%sCFURLCreateWithString failed, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v73);
    }
LABEL_207:
    if (v67) {
LABEL_208:
    }
      free(v67);
LABEL_209:
    uint64_t v101 = v45;
    goto LABEL_210;
  }
  CFURLRef v47 = v46;
  Request = CFHTTPMessageCreateRequest(v41, @"CONNECT", v46, @"HTTP/1.1");
  CFRelease(v47);
  if (!Request)
  {
    if ((*(_WORD *)(a1 + 368) & 0x80) != 0) {
      goto LABEL_209;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = a1 + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v171 = " ";
    BOOL v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v161[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v67, type, v161)) {
      goto LABEL_207;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      if (!os_log_type_enabled(v68, type[0])) {
        goto LABEL_207;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v171 = " ";
      BOOL v70 = "%{public}s %{public}s%sCFHTTPMessageCreateRequest failed";
    }
    else if (v161[0])
    {
      uint64_t v91 = (char *)__nw_create_backtrace_string();
      BOOL v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      BOOL v92 = os_log_type_enabled(v68, type[0]);
      if (v91)
      {
        if (v92)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = a1 + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v171 = " ";
          LOWORD(v172) = 2082;
          *(void *)((char *)&v172 + 2) = v91;
          _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s %{public}s%sCFHTTPMessageCreateRequest failed, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v91);
        if (!v67) {
          goto LABEL_209;
        }
        goto LABEL_208;
      }
      if (!v92) {
        goto LABEL_207;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v171 = " ";
      BOOL v70 = "%{public}s %{public}s%sCFHTTPMessageCreateRequest failed, no backtrace";
    }
    else
    {
      BOOL v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      if (!os_log_type_enabled(v68, type[0])) {
        goto LABEL_207;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v171 = " ";
      BOOL v70 = "%{public}s %{public}s%sCFHTTPMessageCreateRequest failed, backtrace limit exceeded";
    }
    goto LABEL_206;
  }
  if (strcmp(v40, "443"))
  {
    CFHTTPMessageSetHeaderFieldValue(Request, @"Host", v45);
    goto LABEL_149;
  }
  CFStringRef v77 = CFStringCreateWithCString(v41, v43, 0x600u);
  if (!v77)
  {
    if ((*(_WORD *)(a1 + 368) & 0x80) != 0)
    {
LABEL_273:
      CFRelease(v45);
      uint64_t v101 = Request;
      goto LABEL_210;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = a1 + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v171 = " ";
    BOOL v93 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v161[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v93, type, v161))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v94 = __nwlog_obj();
        os_log_type_t v95 = type[0];
        if (!os_log_type_enabled(v94, type[0])) {
          goto LABEL_271;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        os_log_type_t v96 = "%{public}s %{public}s%sCFStringCreateWithCString failed";
        goto LABEL_270;
      }
      if (v161[0] == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v94 = __nwlog_obj();
        os_log_type_t v95 = type[0];
        if (!os_log_type_enabled(v94, type[0])) {
          goto LABEL_271;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        os_log_type_t v96 = "%{public}s %{public}s%sCFStringCreateWithCString failed, backtrace limit exceeded";
        goto LABEL_270;
      }
      int v155 = Request;
      uint64_t v103 = (char *)__nw_create_backtrace_string();
      os_log_type_t v94 = __nwlog_obj();
      os_log_type_t v95 = type[0];
      BOOL v104 = os_log_type_enabled(v94, type[0]);
      if (v103)
      {
        if (v104)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = a1 + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v171 = " ";
          LOWORD(v172) = 2082;
          *(void *)((char *)&v172 + 2) = v103;
          _os_log_impl(&dword_1830D4000, v94, v95, "%{public}s %{public}s%sCFStringCreateWithCString failed, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v103);
        Request = v155;
        goto LABEL_271;
      }
      Request = v155;
      if (v104)
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        os_log_type_t v96 = "%{public}s %{public}s%sCFStringCreateWithCString failed, no backtrace";
LABEL_270:
        _os_log_impl(&dword_1830D4000, v94, v95, v96, buf, 0x20u);
      }
    }
LABEL_271:
    if (v93) {
      free(v93);
    }
    goto LABEL_273;
  }
  CFStringRef v78 = v77;
  CFHTTPMessageSetHeaderFieldValue(Request, @"Host", v77);
  CFRelease(v78);
LABEL_149:
  CFHTTPMessageSetHeaderFieldValue(Request, @"Connection", @"keep-alive");
  CFHTTPMessageSetHeaderFieldValue(Request, @"Proxy-Connection", @"keep-alive");
  os_log_type_t v79 = *(void **)(a1 + 184);
  if (v79)
  {
    id v80 = v79;
    *(void *)os_log_type_t type = 0;
    uint64_t v157 = (uint64_t)type;
    uint64_t v158 = 0x2020000000;
    int v159 = 0;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_proxy_options_get_http_proxy_authorization_header_block_invoke;
    uint64_t v171 = (const char *)&unk_1E5248E90;
    *(void *)&long long v172 = type;
    nw_protocol_options_access_handle(v80, buf);
    v81 = *(const char **)(v157 + 24);
    _Block_object_dispose(type, 8);

    if (v81)
    {
      CFStringRef v82 = CFStringCreateWithCString(v41, v81, 0x8000100u);
      if (v82)
      {
        CFStringRef v83 = v82;
        CFHTTPMessageSetHeaderFieldValue(Request, @"Proxy-Authorization", v82);
        CFRelease(v83);
        goto LABEL_234;
      }
      if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
      {
        int v154 = Request;
        __nwlog_obj();
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        uint64_t v97 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v161[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v97, type, v161))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            BOOL v98 = __nwlog_obj();
            os_log_type_t v99 = type[0];
            if (os_log_type_enabled(v98, type[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = a1 + 284;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v171 = " ";
              v100 = "%{public}s %{public}s%sCFStringCreateWithCString failed";
LABEL_229:
              BOOL v108 = v98;
LABEL_230:
              _os_log_impl(&dword_1830D4000, v108, v99, v100, buf, 0x20u);
            }
          }
          else if (v161[0])
          {
            uint64_t v105 = (char *)__nw_create_backtrace_string();
            BOOL v106 = __nwlog_obj();
            os_log_type_t v99 = type[0];
            log = v106;
            BOOL v107 = os_log_type_enabled(v106, type[0]);
            if (v105)
            {
              if (v107)
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = a1 + 284;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v171 = " ";
                LOWORD(v172) = 2082;
                *(void *)((char *)&v172 + 2) = v105;
                _os_log_impl(&dword_1830D4000, log, v99, "%{public}s %{public}s%sCFStringCreateWithCString failed, dumping backtrace:%{public}s", buf, 0x2Au);
              }
              free(v105);
              goto LABEL_231;
            }
            if (v107)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = a1 + 284;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v171 = " ";
              v100 = "%{public}s %{public}s%sCFStringCreateWithCString failed, no backtrace";
              BOOL v108 = log;
              goto LABEL_230;
            }
          }
          else
          {
            BOOL v98 = __nwlog_obj();
            os_log_type_t v99 = type[0];
            if (os_log_type_enabled(v98, type[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = a1 + 284;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v171 = " ";
              v100 = "%{public}s %{public}s%sCFStringCreateWithCString failed, backtrace limit exceeded";
              goto LABEL_229;
            }
          }
        }
LABEL_231:
        if (v97) {
          free(v97);
        }
        Request = v154;
      }
    }
  }
LABEL_234:
  CFRelease(v45);
  uint64_t v109 = *(const void **)(a1 + 216);
  if (v109)
  {
    CFRelease(v109);
    *(void *)(a1 + 216) = 0;
  }
  uint64_t v110 = *(const void **)(a1 + 192);
  if (v110)
  {
    CFRelease(v110);
    *(void *)(a1 + 192) = 0;
  }
  uint64_t v111 = *(const void **)(a1 + 208);
  if (v111)
  {
    CFRelease(v111);
    *(void *)(a1 + 208) = 0;
  }
  uint64_t v112 = *(void **)(a1 + 160);
  if (!v112 || (uint64_t v113 = (id *)os_retain(v112)) == 0)
  {
    int v114 = *(void **)(a1 + 152);
    if (v114)
    {
      unsigned int v115 = (id *)os_retain(v114);
      if (v115)
      {
        uint64_t v113 = v115;
        id v116 = nw_endpoint_copy_parent_endpoint(v115);
        if (v116)
        {
          id v117 = v116;
          do
          {
            os_release(v113);
            uint64_t v113 = (id *)v117;
            id v117 = v113[14];
          }
          while (v117);
        }
        goto LABEL_247;
      }
    }
    if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
    {
      os_log_type_t v124 = __nwlog_obj();
      if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        _os_log_impl(&dword_1830D4000, v124, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sunable to derive the correct proxy url", buf, 0x20u);
      }
    }
    uint64_t v101 = Request;
LABEL_210:
    CFRelease(v101);
    if (!v29) {
      goto LABEL_212;
    }
    goto LABEL_211;
  }
LABEL_247:
  __int16 v118 = v113;
  int v119 = [v118 type];

  if (v119 == 2)
  {
    if ((*(_WORD *)(a1 + 368) & 0x100) != 0) {
      __int16 v120 = "https";
    }
    else {
      __int16 v120 = "http";
    }
    int v121 = nw_endpoint_get_hostname(v118);
    unsigned int port = nw_endpoint_get_port(v118);
    CFStringRef v123 = CFStringCreateWithFormat(v41, 0, @"%s://%s:%d/", v120, v121, port);
    goto LABEL_262;
  }
  if (nw_endpoint_get_type(v118) == nw_endpoint_type_address)
  {
    uint64_t v125 = nw_endpoint_copy_address_string(v118);
    if (v125)
    {
      uint64_t v126 = v125;
      if ((*(_WORD *)(a1 + 368) & 0x100) != 0) {
        id v127 = "https";
      }
      else {
        id v127 = "http";
      }
      unsigned int v128 = nw_endpoint_get_port(v118);
      CFStringRef v123 = CFStringCreateWithFormat(v41, 0, @"%s://%s:%d/", v127, v126, v128);
      free(v126);
LABEL_262:
      os_release(v118);
      if (v123)
      {
        *(void *)(a1 + 216) = CFURLCreateWithString(v41, v123, 0);
        CFRelease(v123);
      }
      goto LABEL_265;
    }
  }
  os_release(v118);
LABEL_265:
  *(void *)(a1 + 192) = CFRetain(Request);
  if (v29) {
    free(v29);
  }
  free(v40);
LABEL_7:
  if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v171 = " ";
      LOWORD(v172) = 2048;
      *(void *)((char *)&v172 + 2) = Request;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSending http_message %p", buf, 0x2Au);
    }
  }
  CFDataRef v6 = CFHTTPMessageCopySerializedMessage(Request);
  if (!v6)
  {
    if ((*(_WORD *)(a1 + 368) & 0x80) != 0)
    {
LABEL_120:
      if (Request) {
        CFRelease(Request);
      }
      return 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v30 = a1 + 284;
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = a1 + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v171 = " ";
    BOOL v31 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v161[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v31, type, v161))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v32 = gLogObj;
        os_log_type_t v33 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_118;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v30;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        long long v34 = "%{public}s %{public}s%sCFHTTPMessageCopySerializedMessage failed";
        goto LABEL_117;
      }
      if (v161[0] == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v32 = gLogObj;
        os_log_type_t v33 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_118;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v30;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        long long v34 = "%{public}s %{public}s%sCFHTTPMessageCopySerializedMessage failed, backtrace limit exceeded";
        goto LABEL_117;
      }
      BOOL v52 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v32 = gLogObj;
      os_log_type_t v33 = type[0];
      BOOL v53 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v52)
      {
        if (v53)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v30;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v171 = " ";
          LOWORD(v172) = 2082;
          *(void *)((char *)&v172 + 2) = v52;
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s %{public}s%sCFHTTPMessageCopySerializedMessage failed, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v52);
        goto LABEL_118;
      }
      if (v53)
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v30;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        long long v34 = "%{public}s %{public}s%sCFHTTPMessageCopySerializedMessage failed, no backtrace";
LABEL_117:
        _os_log_impl(&dword_1830D4000, v32, v33, v34, buf, 0x20u);
      }
    }
LABEL_118:
    if (v31) {
      free(v31);
    }
    goto LABEL_120;
  }
  CFDataRef v7 = v6;
  char v8 = *(const void **)(a1 + 200);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 200) = 0;
  }
  BytePtr = CFDataGetBytePtr(v7);
  CFIndex Length = CFDataGetLength(v7);
  if (!BytePtr)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    v161[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v168) = 0;
    if (!__nwlog_fault(v35, v161, &v168)) {
      goto LABEL_339;
    }
    if (v161[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v138 = __nwlog_obj();
      os_log_type_t v139 = v161[0];
      if (!os_log_type_enabled(v138, v161[0])) {
        goto LABEL_339;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      BOOL v140 = "%{public}s called with null buffer";
      goto LABEL_338;
    }
    if (!(_BYTE)v168)
    {
      uint64_t v138 = __nwlog_obj();
      os_log_type_t v139 = v161[0];
      if (!os_log_type_enabled(v138, v161[0])) {
        goto LABEL_339;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      BOOL v140 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_338;
    }
    uint64_t v145 = (char *)__nw_create_backtrace_string();
    uint64_t v138 = __nwlog_obj();
    os_log_type_t v139 = v161[0];
    BOOL v146 = os_log_type_enabled(v138, v161[0]);
    if (!v145)
    {
      if (!v146) {
        goto LABEL_339;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      BOOL v140 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_338;
    }
    if (v146)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v145;
      _os_log_impl(&dword_1830D4000, v138, v139, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v145);
LABEL_339:
    if (!v35) {
      goto LABEL_141;
    }
    goto LABEL_140;
  }
  unsigned int v11 = Length;
  if (!Length)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    v161[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v168) = 0;
    if (!__nwlog_fault(v35, v161, &v168)) {
      goto LABEL_339;
    }
    if (v161[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v138 = __nwlog_obj();
      os_log_type_t v139 = v161[0];
      if (!os_log_type_enabled(v138, v161[0])) {
        goto LABEL_339;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      BOOL v140 = "%{public}s called with null length";
      goto LABEL_338;
    }
    if (!(_BYTE)v168)
    {
      uint64_t v138 = __nwlog_obj();
      os_log_type_t v139 = v161[0];
      if (!os_log_type_enabled(v138, v161[0])) {
        goto LABEL_339;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      BOOL v140 = "%{public}s called with null length, backtrace limit exceeded";
      goto LABEL_338;
    }
    uint64_t v147 = (char *)__nw_create_backtrace_string();
    uint64_t v138 = __nwlog_obj();
    os_log_type_t v139 = v161[0];
    BOOL v148 = os_log_type_enabled(v138, v161[0]);
    if (v147)
    {
      if (v148)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v147;
        _os_log_impl(&dword_1830D4000, v138, v139, "%{public}s called with null length, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v147);
      if (v35) {
        goto LABEL_140;
      }
      goto LABEL_141;
    }
    if (v148)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      BOOL v140 = "%{public}s called with null length, no backtrace";
LABEL_338:
      _os_log_impl(&dword_1830D4000, v138, v139, v140, buf, 0xCu);
      goto LABEL_339;
    }
    goto LABEL_339;
  }
  uint64_t v168 = 0;
  v169 = &v168;
  uint64_t v166 = 0;
  uint64_t v167 = &v166;
  uint64_t v12 = *(void *)(a1 + 56);
  if (!v12)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    v161[0] = OS_LOG_TYPE_ERROR;
    char v165 = 0;
    if (!__nwlog_fault(v35, v161, &v165)) {
      goto LABEL_344;
    }
    if (v161[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v141 = __nwlog_obj();
      os_log_type_t v142 = v161[0];
      if (!os_log_type_enabled(v141, v161[0])) {
        goto LABEL_344;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      os_log_type_t v143 = "%{public}s called with null output_handler";
    }
    else if (v165)
    {
      BOOL v149 = (char *)__nw_create_backtrace_string();
      uint64_t v141 = __nwlog_obj();
      os_log_type_t v142 = v161[0];
      BOOL v150 = os_log_type_enabled(v141, v161[0]);
      if (v149)
      {
        if (v150)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v149;
          _os_log_impl(&dword_1830D4000, v141, v142, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v149);
LABEL_344:
        if (!v35) {
          goto LABEL_141;
        }
        goto LABEL_140;
      }
      if (!v150) {
        goto LABEL_344;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      os_log_type_t v143 = "%{public}s called with null output_handler, no backtrace";
    }
    else
    {
      uint64_t v141 = __nwlog_obj();
      os_log_type_t v142 = v161[0];
      if (!os_log_type_enabled(v141, v161[0])) {
        goto LABEL_344;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      os_log_type_t v143 = "%{public}s called with null output_handler, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v141, v142, v143, buf, 0xCu);
    goto LABEL_344;
  }
  int v13 = (*(uint64_t (**)(void, uint64_t, CFIndex, CFIndex, uint64_t, uint64_t *))(*(void *)(v12 + 24) + 88))(*(void *)(a1 + 56), a1 + 24, Length, Length, 0xFFFFFFFFLL, &v168);
  int v14 = v13;
  uint64_t v15 = v168;
  if (!v168 || !v13)
  {
    if (!v13 || (*(_WORD *)(a1 + 368) & 0x80) != 0) {
      goto LABEL_141;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = a1 + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v171 = " ";
    LOWORD(v172) = 1024;
    *(_DWORD *)((char *)&v172 + 2) = v14;
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    v161[0] = OS_LOG_TYPE_ERROR;
    char v165 = 0;
    if (!__nwlog_fault(v35, v161, &v165)) {
      goto LABEL_139;
    }
    if (v161[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v36 = gLogObj;
      os_log_type_t v37 = v161[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v161[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v171 = " ";
      LOWORD(v172) = 1024;
      *(_DWORD *)((char *)&v172 + 2) = v14;
      uint64_t v38 = "%{public}s %{public}s%sOutput handler reported %u frames to write, but array is empty";
    }
    else if (v165)
    {
      uint64_t v59 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v36 = gLogObj;
      os_log_type_t v37 = v161[0];
      BOOL v60 = os_log_type_enabled((os_log_t)gLogObj, v161[0]);
      if (v59)
      {
        if (v60)
        {
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = a1 + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v171 = " ";
          LOWORD(v172) = 1024;
          *(_DWORD *)((char *)&v172 + 2) = v14;
          WORD3(v172) = 2082;
          *((void *)&v172 + 1) = v59;
          _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s %{public}s%sOutput handler reported %u frames to write, but array is empty, dumping backtrace:%{public}s", buf, 0x30u);
        }
        free(v59);
LABEL_139:
        if (v35) {
LABEL_140:
        }
          free(v35);
LABEL_141:
        if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          long long v75 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = a1 + 284;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v171 = " ";
            _os_log_impl(&dword_1830D4000, v75, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to send http connect request", buf, 0x20u);
          }
        }
        uint64_t v76 = 0;
        if (!Request) {
          goto LABEL_146;
        }
LABEL_145:
        CFRelease(Request);
        goto LABEL_146;
      }
      if (!v60) {
        goto LABEL_139;
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v171 = " ";
      LOWORD(v172) = 1024;
      *(_DWORD *)((char *)&v172 + 2) = v14;
      uint64_t v38 = "%{public}s %{public}s%sOutput handler reported %u frames to write, but array is empty, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v36 = gLogObj;
      os_log_type_t v37 = v161[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v161[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v171 = " ";
      LOWORD(v172) = 1024;
      *(_DWORD *)((char *)&v172 + 2) = v14;
      uint64_t v38 = "%{public}s %{public}s%sOutput handler reported %u frames to write, but array is empty, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v36, v37, v38, buf, 0x26u);
    goto LABEL_139;
  }
  uint64_t v153 = Request;
  while (1)
  {
    uint64_t v16 = *(void *)(v15 + 32);
    if (v16 || *(void *)(v15 + 40))
    {
      uint64_t v17 = *(void *)(v15 + 112);
      if (!v17) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)(v15 + 112);
      if (!v17) {
        goto LABEL_29;
      }
    }
    if ((*(_WORD *)(v15 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(v15, *(void *)(v15 + 88)))
    {
      LODWORD(v17) = 0;
LABEL_29:
      char v19 = 0;
      goto LABEL_30;
    }
    LODWORD(v17) = *(_DWORD *)(v15 + 52);
    uint64_t v18 = *(unsigned int *)(v15 + 56);
    if (v17) {
      LODWORD(v17) = v17 - (v18 + *(_DWORD *)(v15 + 60));
    }
    char v19 = (void *)(*(void *)(v15 + 112) + v18);
LABEL_30:
    size_t v20 = v17 >= v11 ? v11 : v17;
    memcpy(v19, BytePtr, v20);
    if (!nw_frame_claim(v15, v21, v20, 0)) {
      break;
    }
    nw_frame_collapse(v15);
    nw_frame_unclaim(v15, v22, v20, 0);
    uint64_t v23 = *(void *)(v15 + 32);
    BOOL v24 = *(void **)(v15 + 40);
    if (v23)
    {
      *(void *)(v23 + 40) = v24;
      BOOL v24 = *(void **)(v15 + 40);
    }
    else
    {
      v169 = *(uint64_t **)(v15 + 40);
    }
    void *v24 = v23;
    uint64_t v25 = v167;
    *(void *)(v15 + 32) = 0;
    *(void *)(v15 + 40) = v25;
    *uint64_t v25 = v15;
    uint64_t v167 = (uint64_t *)(v15 + 32);
    if (v16)
    {
      BytePtr += v20;
      uint64_t v15 = v16;
      v11 -= v20;
      if (v11) {
        continue;
      }
    }
    goto LABEL_158;
  }
  if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = a1 + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v171 = " ";
    LOWORD(v172) = 1024;
    *(_DWORD *)((char *)&v172 + 2) = v20;
    char v54 = (char *)_os_log_send_and_compose_impl();
    v161[0] = OS_LOG_TYPE_ERROR;
    char v165 = 0;
    if (!__nwlog_fault(v54, v161, &v165)) {
      goto LABEL_156;
    }
    if (v161[0] != OS_LOG_TYPE_FAULT)
    {
      if (v165)
      {
        uint64_t v65 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v55 = gLogObj;
        os_log_type_t v56 = v161[0];
        BOOL v66 = os_log_type_enabled((os_log_t)gLogObj, v161[0]);
        if (v65)
        {
          if (v66)
          {
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = a1 + 284;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v171 = " ";
            LOWORD(v172) = 1024;
            *(_DWORD *)((char *)&v172 + 2) = v20;
            WORD3(v172) = 2082;
            *((void *)&v172 + 1) = v65;
            _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s %{public}s%sClaiming frame with %u bytes failed, dumping backtrace:%{public}s", buf, 0x30u);
          }
          free(v65);
          goto LABEL_156;
        }
        if (!v66) {
          goto LABEL_156;
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        LOWORD(v172) = 1024;
        *(_DWORD *)((char *)&v172 + 2) = v20;
        uint64_t v57 = "%{public}s %{public}s%sClaiming frame with %u bytes failed, no backtrace";
      }
      else
      {
        uint64_t v55 = __nwlog_obj();
        os_log_type_t v56 = v161[0];
        if (!os_log_type_enabled(v55, v161[0])) {
          goto LABEL_156;
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        LOWORD(v172) = 1024;
        *(_DWORD *)((char *)&v172 + 2) = v20;
        uint64_t v57 = "%{public}s %{public}s%sClaiming frame with %u bytes failed, backtrace limit exceeded";
      }
LABEL_155:
      _os_log_impl(&dword_1830D4000, v55, v56, v57, buf, 0x26u);
      goto LABEL_156;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v55 = gLogObj;
    os_log_type_t v56 = v161[0];
    if (os_log_type_enabled((os_log_t)gLogObj, v161[0]))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v171 = " ";
      LOWORD(v172) = 1024;
      *(_DWORD *)((char *)&v172 + 2) = v20;
      uint64_t v57 = "%{public}s %{public}s%sClaiming frame with %u bytes failed";
      goto LABEL_155;
    }
LABEL_156:
    if (v54) {
      free(v54);
    }
  }
LABEL_158:
  (*(void (**)(uint64_t, uint64_t *))(*(void *)(v12 + 24) + 96))(v12, &v166);
  uint64_t v84 = v168;
  Request = v153;
  if (v168)
  {
    *(void *)int v161 = 0;
    uint64_t v162 = v161;
    int v164 = 0;
    uint64_t v163 = 0x2000000000;
    *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
    uint64_t v157 = 0x40000000;
    uint64_t v158 = (uint64_t)___ZL26nw_http_connect_send_bytesP24nw_protocol_http_connectPKhj_block_invoke;
    int v159 = &unk_1E5240818;
    uint64_t v160 = v161;
    do
    {
      if (!v84) {
        break;
      }
      uint64_t v85 = *(void *)(v84 + 32);
      char v86 = ((uint64_t (*)(os_log_type_t *))v158)(type);
      uint64_t v84 = v85;
    }
    while ((v86 & 1) != 0);
    if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v87 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v88 = *((_DWORD *)v162 + 6);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v171 = " ";
        LOWORD(v172) = 1024;
        *(_DWORD *)((char *)&v172 + 2) = v88;
        _os_log_impl(&dword_1830D4000, v87, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to use %u frames, marking as failed", buf, 0x26u);
      }
    }
    _Block_object_dispose(v161, 8);
  }
  uint64_t v89 = *(void *)(a1 + 168);
  if ((!v89 || *(_DWORD *)(v89 + 124) != 4) && (*(_WORD *)(a1 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v90 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v171 = " ";
      _os_log_impl(&dword_1830D4000, v90, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sSent http connect request to proxy", buf, 0x20u);
    }
  }
  *(_WORD *)(a1 + 368) |= 8u;
  uint64_t v76 = 1;
  if (v153) {
    goto LABEL_145;
  }
LABEL_146:
  CFRelease(v7);
  return v76;
}

void sub_1838F9E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL26nw_http_connect_send_bytesP24nw_protocol_http_connectPKhj_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_protocol_http_connect_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v23 = __nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v9, &type, &v30)) {
      goto LABEL_27;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      uint64_t v12 = "%{public}s called with null protocol";
      goto LABEL_71;
    }
    if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v28 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (!v28) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
        __int16 v34 = 2082;
        uint64_t v35 = backtrace_string;
        uint64_t v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_58;
      }
      if (!v28) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      uint64_t v12 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      uint64_t v12 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_71:
    char v19 = v24;
    os_log_type_t v20 = v25;
    uint32_t v21 = 12;
    goto LABEL_26;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v9, &type, &v30)) {
      goto LABEL_27;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      uint64_t v12 = "%{public}s called with null http_connect";
      goto LABEL_71;
    }
    if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v29 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (!v29) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
        __int16 v34 = 2082;
        uint64_t v35 = backtrace_string;
        uint64_t v15 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
LABEL_58:
        uint64_t v16 = v24;
        os_log_type_t v17 = v25;
        uint32_t v18 = 22;
        goto LABEL_18;
      }
      if (!v29) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      uint64_t v12 = "%{public}s called with null http_connect, no backtrace";
    }
    else
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      uint64_t v12 = "%{public}s called with null http_connect, backtrace limit exceeded";
    }
    goto LABEL_71;
  }
  if (*((_DWORD *)handle + 70) != 2)
  {
    if ((handle[184] & 0x80) != 0) {
      return 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v8 = (char *)(handle + 142);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
    __int16 v34 = 2082;
    uint64_t v35 = (char *)(handle + 142);
    __int16 v36 = 2080;
    os_log_type_t v37 = " ";
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v9, &type, &v30)) {
      goto LABEL_27;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      __int16 v34 = 2082;
      uint64_t v35 = v8;
      __int16 v36 = 2080;
      os_log_type_t v37 = " ";
      uint64_t v12 = "%{public}s %{public}s%sCannot finalize output frames when not connected";
      goto LABEL_25;
    }
    if (!v30)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      __int16 v34 = 2082;
      uint64_t v35 = v8;
      __int16 v36 = 2080;
      os_log_type_t v37 = " ";
      uint64_t v12 = "%{public}s %{public}s%sCannot finalize output frames when not connected, backtrace limit exceeded";
      goto LABEL_25;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v10 = gLogObj;
    os_log_type_t v11 = type;
    BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v14) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      __int16 v34 = 2082;
      uint64_t v35 = v8;
      __int16 v36 = 2080;
      os_log_type_t v37 = " ";
      uint64_t v12 = "%{public}s %{public}s%sCannot finalize output frames when not connected, no backtrace";
      goto LABEL_25;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446978;
      os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
      __int16 v34 = 2082;
      uint64_t v35 = v8;
      __int16 v36 = 2080;
      os_log_type_t v37 = " ";
      __int16 v38 = 2082;
      uint64_t v39 = backtrace_string;
      uint64_t v15 = "%{public}s %{public}s%sCannot finalize output frames when not connected, dumping backtrace:%{public}s";
      uint64_t v16 = v10;
      os_log_type_t v17 = v11;
      uint32_t v18 = 42;
LABEL_18:
      _os_log_impl(&dword_1830D4000, v16, v17, v15, buf, v18);
    }
LABEL_19:
    free(backtrace_string);
    if (!v9) {
      return 0;
    }
    goto LABEL_28;
  }
  uint64_t v4 = *((void *)handle + 7);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5)
    {
      CFDataRef v6 = *(uint64_t (**)(void))(v5 + 96);
      if (v6) {
        return v6();
      }
    }
  }
  if ((handle[184] & 0x80) != 0) {
    return 0;
  }
  __nwlog_obj();
  uint64_t v22 = (char *)(handle + 142);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
  __int16 v34 = 2082;
  uint64_t v35 = (char *)(handle + 142);
  __int16 v36 = 2080;
  os_log_type_t v37 = " ";
  __int16 v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v30 = 0;
  if (__nwlog_fault(v9, &type, &v30))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
        __int16 v34 = 2082;
        uint64_t v35 = v22;
        __int16 v36 = 2080;
        os_log_type_t v37 = " ";
        uint64_t v12 = "%{public}s %{public}s%sOutput handler has invalid finalize_output_frames callback";
LABEL_25:
        char v19 = v10;
        os_log_type_t v20 = v11;
        uint32_t v21 = 32;
LABEL_26:
        _os_log_impl(&dword_1830D4000, v19, v20, v12, buf, v21);
      }
    }
    else if (v30)
    {
      nw_endpoint_type_t v26 = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v27 = os_log_type_enabled(v10, type);
      if (v26)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
          __int16 v34 = 2082;
          uint64_t v35 = v22;
          __int16 v36 = 2080;
          os_log_type_t v37 = " ";
          __int16 v38 = 2082;
          uint64_t v39 = v26;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s %{public}s%sOutput handler has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v26);
      }
      else if (v27)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
        __int16 v34 = 2082;
        uint64_t v35 = v22;
        __int16 v36 = 2080;
        os_log_type_t v37 = " ";
        uint64_t v12 = "%{public}s %{public}s%sOutput handler has invalid finalize_output_frames callback, no backtrace";
        goto LABEL_25;
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v33 = "nw_protocol_http_connect_finalize_output_frames";
        __int16 v34 = 2082;
        uint64_t v35 = v22;
        __int16 v36 = 2080;
        os_log_type_t v37 = " ";
        uint64_t v12 = "%{public}s %{public}s%sOutput handler has invalid finalize_output_frames callback, backtrace limit exceeded";
        goto LABEL_25;
      }
    }
  }
LABEL_27:
  if (v9) {
LABEL_28:
  }
    free(v9);
  return 0;
}

uint64_t nw_protocol_http_connect_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v12 = __nwlog_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_protocol_http_connect_get_output_frames";
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_protocol_http_connect_get_output_frames";
    int v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v13, &type, &v21)) {
      goto LABEL_43;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        BOOL v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_43;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_protocol_http_connect_get_output_frames";
        uint64_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_42;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (!v18) {
          goto LABEL_43;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_protocol_http_connect_get_output_frames";
        uint64_t v16 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_42;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v24 = "nw_protocol_http_connect_get_output_frames";
        __int16 v25 = 2082;
        nw_endpoint_type_t v26 = backtrace_string;
        char v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v14, v15, v19, buf, 0x16u);
      }
LABEL_33:
      free(backtrace_string);
      goto LABEL_43;
    }
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_protocol_http_connect_get_output_frames";
    uint64_t v16 = "%{public}s called with null protocol";
LABEL_42:
    _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
LABEL_43:
    if (v13) {
      free(v13);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_protocol_http_connect_get_output_frames";
    int v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v13, &type, &v21)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_protocol_http_connect_get_output_frames";
      uint64_t v16 = "%{public}s called with null http_connect";
      goto LABEL_42;
    }
    if (!v21)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_protocol_http_connect_get_output_frames";
      uint64_t v16 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v20 = os_log_type_enabled(v14, type);
    if (backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v24 = "nw_protocol_http_connect_get_output_frames";
        __int16 v25 = 2082;
        nw_endpoint_type_t v26 = backtrace_string;
        char v19 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (!v20) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_protocol_http_connect_get_output_frames";
    uint64_t v16 = "%{public}s called with null http_connect, no backtrace";
    goto LABEL_42;
  }
  if (*((_DWORD *)handle + 70) == 2)
  {
    uint64_t result = handle[7];
    if (!result) {
      return result;
    }
    uint64_t v9 = *(void *)(result + 24);
    if (v9)
    {
      BOOL v10 = *(uint64_t (**)(void))(v9 + 88);
      if (v10) {
        return v10();
      }
    }
  }
  else if ((handle[46] & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = gLogObj;
    uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446722;
    BOOL v24 = "nw_protocol_http_connect_get_output_frames";
    __int16 v25 = 2082;
    nw_endpoint_type_t v26 = (char *)handle + 284;
    __int16 v27 = 2080;
    BOOL v28 = " ";
    _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNot yet connected, returning 0 output frames", buf, 0x20u);
  }
  return 0;
}

uint64_t nw_protocol_http_connect_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    BOOL v28 = __nwlog_obj();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
      _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v29, &type, &v39)) {
      goto LABEL_79;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v39)
      {
        char v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_79;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        BOOL v32 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_78;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v34 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v34) {
          goto LABEL_79;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        BOOL v32 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_78;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v35 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_66:
        _os_log_impl(&dword_1830D4000, v30, v31, v35, buf, 0x16u);
      }
LABEL_67:
      free(backtrace_string);
      goto LABEL_79;
    }
    char v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
    BOOL v32 = "%{public}s called with null protocol";
LABEL_78:
    _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0xCu);
LABEL_79:
    if (v29) {
      free(v29);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v29, &type, &v39)) {
      goto LABEL_79;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
      BOOL v32 = "%{public}s called with null http_connect";
      goto LABEL_78;
    }
    if (!v39)
    {
      char v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
      BOOL v32 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_78;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v36 = os_log_type_enabled(v30, type);
    if (backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v35 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    if (!v36) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
    BOOL v32 = "%{public}s called with null http_connect, no backtrace";
    goto LABEL_78;
  }
  if (*((_DWORD *)handle + 70) != 2)
  {
    if ((handle[184] & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 142;
        __int16 v42 = 2080;
        BOOL v43 = " ";
        _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNot yet connected, returning 0 input frames", buf, 0x20u);
        return 0;
      }
    }
    return 0;
  }
  uint64_t v11 = *((void *)handle + 28);
  if (!v11) {
    goto LABEL_34;
  }
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  while (v11 && nw_frame_unclaimed_length((_DWORD *)v11) + v13 <= a4 && v12 <= a5)
  {
    uint64_t v16 = *(void *)(v11 + 32);
    os_log_type_t v17 = *(void **)(v11 + 40);
    os_log_type_t v15 = (nw_frame **)(v11 + 32);
    if (v16)
    {
      *(void *)(v16 + 40) = v17;
      os_log_type_t v17 = *(void **)(v11 + 40);
    }
    else
    {
      *((void *)handle + 29) = v17;
    }
    *os_log_type_t v17 = v16;
    const char *v15 = 0;
    *(void *)(v11 + 40) = 0;
    tqh_last = a6->tqh_last;
    *(void *)(v11 + 40) = tqh_last;
    *tqh_last = (nw_frame *)v11;
    a6->tqh_last = v15;
    v13 += nw_frame_unclaimed_length((_DWORD *)v11);
    uint64_t v12 = (v12 + 1);
    uint64_t v11 = *((void *)handle + 28);
  }
  if ((handle[184] & 0x80) == 0)
  {
    if (gLogDatapath)
    {
      log = __nwlog_obj();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 142;
        __int16 v42 = 2080;
        BOOL v43 = " ";
        __int16 v44 = 1024;
        *(_DWORD *)CFStringRef v45 = v12;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&v45[6] = v13;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAdding %u frames (%u bytes) from read_frames", buf, 0x2Cu);
      }
    }
  }
  if (v11)
  {
    if ((handle[184] & 0x80) == 0)
    {
      if (gLogDatapath)
      {
        char v19 = __nwlog_obj();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 142;
          __int16 v42 = 2080;
          BOOL v43 = " ";
          __int16 v44 = 1024;
          *(_DWORD *)CFStringRef v45 = a4;
          *(_WORD *)&v45[4] = 1024;
          *(_DWORD *)&v45[6] = a5;
          __int16 v46 = 1024;
          int v47 = v12;
          __int16 v48 = 1024;
          unsigned int v49 = v13;
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sHit maximum (%u bytes, %u frames), returning %u frames (%u bytes)", buf, 0x38u);
        }
      }
    }
    return v12;
  }
  if (v13 > a4)
  {
    if ((handle[184] & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v20 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 142;
        __int16 v42 = 2080;
        BOOL v43 = " ";
        __int16 v44 = 1024;
        *(_DWORD *)CFStringRef v45 = v13;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&v45[6] = a4;
        _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sAbout to read from below when above maximum bytes (%u bytes > %u bytes)", buf, 0x2Cu);
      }
    }
    if ((handle[184] & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 142;
      __int16 v42 = 2080;
      BOOL v43 = " ";
      char v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v39 = 0;
      if (!__nwlog_fault(v21, &type, &v39)) {
        goto LABEL_46;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 142;
        __int16 v42 = 2080;
        BOOL v43 = " ";
        BOOL v24 = "%{public}s %{public}s%sAbout to read from below when above maximum bytes";
      }
      else if (v39)
      {
        nw_endpoint_type_t v26 = (char *)__nw_create_backtrace_string();
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v27 = os_log_type_enabled(v22, type);
        if (v26)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 142;
            __int16 v42 = 2080;
            BOOL v43 = " ";
            __int16 v44 = 2082;
            *(void *)CFStringRef v45 = v26;
            _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s %{public}s%sAbout to read from below when above maximum bytes, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v26);
          goto LABEL_46;
        }
        if (!v27)
        {
LABEL_46:
          if (v21) {
            free(v21);
          }
          return v12;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 142;
        __int16 v42 = 2080;
        BOOL v43 = " ";
        BOOL v24 = "%{public}s %{public}s%sAbout to read from below when above maximum bytes, no backtrace";
      }
      else
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 142;
        __int16 v42 = 2080;
        BOOL v43 = " ";
        BOOL v24 = "%{public}s %{public}s%sAbout to read from below when above maximum bytes, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0x20u);
      goto LABEL_46;
    }
  }
  else
  {
LABEL_34:
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)(*((void *)handle + 7) + 24) + 80))();
    if (*(void *)buf)
    {
      *a6->tqh_last = *(nw_frame **)buf;
      __int16 v25 = *(nw_frame ***)&buf[8];
      *(void *)(*(void *)buf + 40) = a6->tqh_last;
      a6->tqh_last = v25;
    }
  }
  return v12;
}

void nw_protocol_http_connect_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    os_log_type_t v31 = __nwlog_obj();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      CFStringRef v82 = "nw_protocol_http_connect_input_finished";
      _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    CFStringRef v82 = "nw_protocol_http_connect_input_finished";
    BOOL v32 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (!__nwlog_fault(v32, &type, &v79)) {
      goto LABEL_120;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (!os_log_type_enabled(v33, type)) {
        goto LABEL_120;
      }
      *(_DWORD *)buf = 136446210;
      CFStringRef v82 = "nw_protocol_http_connect_input_finished";
      uint64_t v35 = "%{public}s called with null protocol";
    }
    else if (v79)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v42 = os_log_type_enabled(v33, type);
      if (backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          CFStringRef v82 = "nw_protocol_http_connect_input_finished";
          __int16 v83 = 2082;
          uint64_t v84 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_120:
        if (!v32) {
          return;
        }
        goto LABEL_121;
      }
      if (!v42) {
        goto LABEL_120;
      }
      *(_DWORD *)buf = 136446210;
      CFStringRef v82 = "nw_protocol_http_connect_input_finished";
      uint64_t v35 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (!os_log_type_enabled(v33, type)) {
        goto LABEL_120;
      }
      *(_DWORD *)buf = 136446210;
      CFStringRef v82 = "nw_protocol_http_connect_input_finished";
      uint64_t v35 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_119;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    CFStringRef v82 = "nw_protocol_http_connect_input_finished";
    BOOL v32 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (!__nwlog_fault(v32, &type, &v79)) {
      goto LABEL_120;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_120;
        }
        *(_DWORD *)buf = 136446210;
        CFStringRef v82 = "nw_protocol_http_connect_input_finished";
        uint64_t v35 = "%{public}s called with null http_connect, backtrace limit exceeded";
        goto LABEL_119;
      }
      BOOL v43 = (char *)__nw_create_backtrace_string();
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v44 = os_log_type_enabled(v33, type);
      if (!v43)
      {
        if (!v44) {
          goto LABEL_120;
        }
        *(_DWORD *)buf = 136446210;
        CFStringRef v82 = "nw_protocol_http_connect_input_finished";
        uint64_t v35 = "%{public}s called with null http_connect, no backtrace";
        goto LABEL_119;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        CFStringRef v82 = "nw_protocol_http_connect_input_finished";
        __int16 v83 = 2082;
        uint64_t v84 = v43;
        CFStringRef v45 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
LABEL_74:
        _os_log_impl(&dword_1830D4000, v33, v34, v45, buf, 0x16u);
      }
LABEL_75:
      free(v43);
      if (!v32) {
        return;
      }
LABEL_121:
      uint64_t v65 = (char *)v32;
LABEL_140:
      free(v65);
      return;
    }
    os_log_type_t v33 = __nwlog_obj();
    os_log_type_t v34 = type;
    if (!os_log_type_enabled(v33, type)) {
      goto LABEL_120;
    }
    *(_DWORD *)buf = 136446210;
    CFStringRef v82 = "nw_protocol_http_connect_input_finished";
    uint64_t v35 = "%{public}s called with null http_connect";
LABEL_119:
    _os_log_impl(&dword_1830D4000, v33, v34, v35, buf, 0xCu);
    goto LABEL_120;
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    CFStringRef v82 = "nw_protocol_http_connect_input_finished";
    BOOL v32 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (!__nwlog_fault(v32, &type, &v79)) {
      goto LABEL_120;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (!os_log_type_enabled(v33, type)) {
        goto LABEL_120;
      }
      *(_DWORD *)buf = 136446210;
      CFStringRef v82 = "nw_protocol_http_connect_input_finished";
      uint64_t v35 = "%{public}s called with null protocol->default_input_handler";
      goto LABEL_119;
    }
    if (!v79)
    {
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (!os_log_type_enabled(v33, type)) {
        goto LABEL_120;
      }
      *(_DWORD *)buf = 136446210;
      CFStringRef v82 = "nw_protocol_http_connect_input_finished";
      uint64_t v35 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
      goto LABEL_119;
    }
    BOOL v43 = (char *)__nw_create_backtrace_string();
    os_log_type_t v33 = __nwlog_obj();
    os_log_type_t v34 = type;
    BOOL v46 = os_log_type_enabled(v33, type);
    if (!v43)
    {
      if (!v46) {
        goto LABEL_120;
      }
      *(_DWORD *)buf = 136446210;
      CFStringRef v82 = "nw_protocol_http_connect_input_finished";
      uint64_t v35 = "%{public}s called with null protocol->default_input_handler, no backtrace";
      goto LABEL_119;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      CFStringRef v82 = "nw_protocol_http_connect_input_finished";
      __int16 v83 = 2082;
      uint64_t v84 = v43;
      CFStringRef v45 = "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s";
      goto LABEL_74;
    }
    goto LABEL_75;
  }
  if (*((_DWORD *)handle + 70) == 1)
  {
    if (a1->output_handler != a2)
    {
      callbacks = default_input_handler->callbacks;
      if (!callbacks || (input_finished = (void (*)(void))callbacks->input_finished) == 0)
      {
        __nwlog_obj();
        char v8 = a1->default_input_handler;
        uint64_t v9 = "invalid";
        if (v8)
        {
          identifier = v8->identifier;
          if (identifier) {
            uint64_t v9 = (const char *)identifier;
          }
        }
        *(_DWORD *)buf = 136446466;
        CFStringRef v82 = "nw_protocol_http_connect_input_finished";
        __int16 v83 = 2082;
        uint64_t v84 = (void *)v9;
        uint64_t v11 = (const char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v79 = 0;
        if (!__nwlog_fault(v11, &type, &v79)) {
          goto LABEL_138;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v12 = __nwlog_obj();
          os_log_type_t v13 = type;
          if (!os_log_type_enabled(v12, type)) {
            goto LABEL_138;
          }
          BOOL v14 = a1->default_input_handler;
          os_log_type_t v15 = "invalid";
          if (v14)
          {
            uint64_t v16 = v14->identifier;
            if (v16) {
              os_log_type_t v15 = (const char *)v16;
            }
          }
LABEL_18:
          *(_DWORD *)buf = 136446466;
          CFStringRef v82 = "nw_protocol_http_connect_input_finished";
          __int16 v83 = 2082;
          uint64_t v84 = (void *)v15;
          os_log_type_t v17 = "%{public}s protocol %{public}s has invalid input_finished callback";
LABEL_137:
          _os_log_impl(&dword_1830D4000, v12, v13, v17, buf, 0x16u);
          goto LABEL_138;
        }
        if (v79)
        {
          BOOL v52 = (char *)__nw_create_backtrace_string();
          uint64_t v12 = __nwlog_obj();
          os_log_type_t v13 = type;
          BOOL v53 = os_log_type_enabled(v12, type);
          if (v52)
          {
            if (v53)
            {
              char v54 = a1->default_input_handler;
              uint64_t v55 = "invalid";
              if (v54)
              {
                os_log_type_t v56 = v54->identifier;
                if (v56) {
                  uint64_t v55 = (const char *)v56;
                }
              }
              *(_DWORD *)buf = 136446722;
              CFStringRef v82 = "nw_protocol_http_connect_input_finished";
              __int16 v83 = 2082;
              uint64_t v84 = (void *)v55;
              __int16 v85 = 2082;
              char v86 = v52;
              _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v52);
            if (v11) {
              goto LABEL_139;
            }
            return;
          }
          if (v53)
          {
            long long v71 = a1->default_input_handler;
            BOOL v67 = "invalid";
            if (v71)
            {
              BOOL v72 = v71->identifier;
              if (v72) {
                BOOL v67 = (const char *)v72;
              }
            }
LABEL_136:
            *(_DWORD *)buf = 136446466;
            CFStringRef v82 = "nw_protocol_http_connect_input_finished";
            __int16 v83 = 2082;
            uint64_t v84 = (void *)v67;
            os_log_type_t v17 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
            goto LABEL_137;
          }
          goto LABEL_138;
        }
        uint64_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_138;
        }
        os_log_type_t v69 = a1->default_input_handler;
        uint64_t v58 = "invalid";
        if (v69)
        {
          BOOL v70 = v69->identifier;
          if (v70) {
            uint64_t v58 = (const char *)v70;
          }
        }
LABEL_104:
        *(_DWORD *)buf = 136446466;
        CFStringRef v82 = "nw_protocol_http_connect_input_finished";
        __int16 v83 = 2082;
        uint64_t v84 = (void *)v58;
        os_log_type_t v17 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
        goto LABEL_137;
      }
LABEL_21:
      input_finished();
      return;
    }
    handle[184] = handle[184] & 0xFFC7 | 0x20;
    if (nw_http_connect_restart_after_disconnect((uint64_t)handle)) {
      return;
    }
    char v19 = a1->default_input_handler;
    if (v19)
    {
      BOOL v20 = v19->callbacks;
      if (v20)
      {
        input_finished = (void (*)(void))v20->disconnected;
        if (input_finished) {
          goto LABEL_21;
        }
      }
    }
    __nwlog_obj();
    char v21 = a1->default_input_handler;
    uint64_t v22 = "invalid";
    if (v21)
    {
      os_log_type_t v23 = v21->identifier;
      if (v23) {
        uint64_t v22 = (const char *)v23;
      }
    }
    *(_DWORD *)buf = 136446466;
    CFStringRef v82 = "nw_protocol_http_connect_input_finished";
    __int16 v83 = 2082;
    uint64_t v84 = (void *)v22;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    BOOL v24 = (const char *)_os_log_send_and_compose_impl();
    if (__nwlog_fault(v24, &type, &v79))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (!os_log_type_enabled(v25, type)) {
          goto LABEL_152;
        }
        BOOL v27 = a1->default_input_handler;
        BOOL v28 = "invalid";
        if (v27)
        {
          uint64_t v29 = v27->identifier;
          if (v29) {
            BOOL v28 = (const char *)v29;
          }
        }
        *(_DWORD *)buf = 136446466;
        CFStringRef v82 = "nw_protocol_http_connect_input_finished";
        __int16 v83 = 2082;
        uint64_t v84 = (void *)v28;
        char v30 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_151:
        _os_log_impl(&dword_1830D4000, v25, v26, v30, buf, 0x16u);
        goto LABEL_152;
      }
      if (!v79)
      {
        __int16 v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (!os_log_type_enabled(v25, type)) {
          goto LABEL_152;
        }
        long long v73 = a1->default_input_handler;
        BOOL v74 = "invalid";
        if (v73)
        {
          long long v75 = v73->identifier;
          if (v75) {
            BOOL v74 = (const char *)v75;
          }
        }
        *(_DWORD *)buf = 136446466;
        CFStringRef v82 = "nw_protocol_http_connect_input_finished";
        __int16 v83 = 2082;
        uint64_t v84 = (void *)v74;
        char v30 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
        goto LABEL_151;
      }
      BOOL v60 = (char *)__nw_create_backtrace_string();
      __int16 v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v61 = os_log_type_enabled(v25, type);
      if (!v60)
      {
        if (!v61) {
          goto LABEL_152;
        }
        uint64_t v76 = a1->default_input_handler;
        CFStringRef v77 = "invalid";
        if (v76)
        {
          CFStringRef v78 = v76->identifier;
          if (v78) {
            CFStringRef v77 = (const char *)v78;
          }
        }
        *(_DWORD *)buf = 136446466;
        CFStringRef v82 = "nw_protocol_http_connect_input_finished";
        __int16 v83 = 2082;
        uint64_t v84 = (void *)v77;
        char v30 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
        goto LABEL_151;
      }
      if (v61)
      {
        BOOL v62 = a1->default_input_handler;
        os_log_type_t v63 = "invalid";
        if (v62)
        {
          uint64_t v64 = v62->identifier;
          if (v64) {
            os_log_type_t v63 = (const char *)v64;
          }
        }
        *(_DWORD *)buf = 136446722;
        CFStringRef v82 = "nw_protocol_http_connect_input_finished";
        __int16 v83 = 2082;
        uint64_t v84 = (void *)v63;
        __int16 v85 = 2082;
        char v86 = v60;
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v60);
    }
LABEL_152:
    if (v24)
    {
      uint64_t v65 = (char *)v24;
      goto LABEL_140;
    }
    return;
  }
  BOOL v18 = default_input_handler->callbacks;
  if (v18)
  {
    input_finished = (void (*)(void))v18->input_finished;
    if (input_finished) {
      goto LABEL_21;
    }
  }
  __nwlog_obj();
  BOOL v36 = a1->default_input_handler;
  os_log_type_t v37 = "invalid";
  if (v36)
  {
    __int16 v38 = v36->identifier;
    if (v38) {
      os_log_type_t v37 = (const char *)v38;
    }
  }
  *(_DWORD *)buf = 136446466;
  CFStringRef v82 = "nw_protocol_http_connect_input_finished";
  __int16 v83 = 2082;
  uint64_t v84 = (void *)v37;
  uint64_t v11 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v79 = 0;
  if (!__nwlog_fault(v11, &type, &v79)) {
    goto LABEL_138;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_138;
    }
    char v39 = a1->default_input_handler;
    os_log_type_t v15 = "invalid";
    if (v39)
    {
      uint64_t v40 = v39->identifier;
      if (v40) {
        os_log_type_t v15 = (const char *)v40;
      }
    }
    goto LABEL_18;
  }
  if (!v79)
  {
    uint64_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_138;
    }
    uint64_t v57 = a1->default_input_handler;
    uint64_t v58 = "invalid";
    if (v57)
    {
      uint64_t v59 = v57->identifier;
      if (v59) {
        uint64_t v58 = (const char *)v59;
      }
    }
    goto LABEL_104;
  }
  int v47 = (char *)__nw_create_backtrace_string();
  uint64_t v12 = __nwlog_obj();
  os_log_type_t v13 = type;
  BOOL v48 = os_log_type_enabled(v12, type);
  if (!v47)
  {
    if (!v48) {
      goto LABEL_138;
    }
    BOOL v66 = a1->default_input_handler;
    BOOL v67 = "invalid";
    if (v66)
    {
      BOOL v68 = v66->identifier;
      if (v68) {
        BOOL v67 = (const char *)v68;
      }
    }
    goto LABEL_136;
  }
  if (v48)
  {
    unsigned int v49 = a1->default_input_handler;
    uint64_t v50 = "invalid";
    if (v49)
    {
      uint32_t v51 = v49->identifier;
      if (v51) {
        uint64_t v50 = (const char *)v51;
      }
    }
    *(_DWORD *)buf = 136446722;
    CFStringRef v82 = "nw_protocol_http_connect_input_finished";
    __int16 v83 = 2082;
    uint64_t v84 = (void *)v50;
    __int16 v85 = 2082;
    char v86 = v47;
    _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
  }
  free(v47);
LABEL_138:
  if (v11)
  {
LABEL_139:
    uint64_t v65 = (char *)v11;
    goto LABEL_140;
  }
}

void nw_protocol_http_connect_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v174 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v91 = __nwlog_obj();
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      _os_log_impl(&dword_1830D4000, v91, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
    char v8 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v172[0] = 0;
    if (!__nwlog_fault(v8, type, v172)) {
      goto LABEL_225;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v92 = __nwlog_obj();
      os_log_type_t v93 = type[0];
      if (!os_log_type_enabled(v92, type[0])) {
        goto LABEL_225;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      uint64_t v11 = "%{public}s called with null protocol";
    }
    else if (v172[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v92 = __nwlog_obj();
      os_log_type_t v93 = type[0];
      BOOL v97 = os_log_type_enabled(v92, type[0]);
      if (backtrace_string)
      {
        if (v97)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v92, v93, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_225;
      }
      if (!v97) {
        goto LABEL_225;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      uint64_t v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v92 = __nwlog_obj();
      os_log_type_t v93 = type[0];
      if (!os_log_type_enabled(v92, type[0])) {
        goto LABEL_225;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_278;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
    char v8 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v172[0] = 0;
    if (!__nwlog_fault(v8, type, v172)) {
      goto LABEL_225;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v92 = __nwlog_obj();
      os_log_type_t v93 = type[0];
      if (!os_log_type_enabled(v92, type[0])) {
        goto LABEL_225;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      uint64_t v11 = "%{public}s called with null http_connect";
      goto LABEL_278;
    }
    if (!v172[0])
    {
      BOOL v92 = __nwlog_obj();
      os_log_type_t v93 = type[0];
      if (!os_log_type_enabled(v92, type[0])) {
        goto LABEL_225;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      uint64_t v11 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_278;
    }
    uint64_t v29 = (char *)__nw_create_backtrace_string();
    BOOL v92 = __nwlog_obj();
    os_log_type_t v93 = type[0];
    BOOL v98 = os_log_type_enabled(v92, type[0]);
    if (!v29)
    {
      if (!v98) {
        goto LABEL_225;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      uint64_t v11 = "%{public}s called with null http_connect, no backtrace";
      goto LABEL_278;
    }
    if (!v98) {
      goto LABEL_100;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v29;
    os_log_type_t v31 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
LABEL_256:
    uint64_t v40 = v92;
    os_log_type_t v41 = v93;
    uint32_t v42 = 22;
    goto LABEL_99;
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    if ((*((_WORD *)handle + 184) & 0x80) != 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = handle + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v170 = " ";
    char v8 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v172[0] = 0;
    if (!__nwlog_fault(v8, type, v172)) {
      goto LABEL_225;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v172[0])
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = gLogObj;
        os_log_type_t v10 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_225;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        uint64_t v11 = "%{public}s %{public}s%sNo input handler, backtrace limit exceeded";
        goto LABEL_223;
      }
      uint64_t v29 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = gLogObj;
      os_log_type_t v10 = type[0];
      BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (!v29)
      {
        if (!v30) {
          goto LABEL_225;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        uint64_t v11 = "%{public}s %{public}s%sNo input handler, no backtrace";
        goto LABEL_223;
      }
      if (!v30) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v170 = " ";
      LOWORD(v171) = 2082;
      *(void *)((char *)&v171 + 2) = v29;
      os_log_type_t v31 = "%{public}s %{public}s%sNo input handler, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = gLogObj;
    os_log_type_t v10 = type[0];
    if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
      goto LABEL_225;
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = handle + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v170 = " ";
    uint64_t v11 = "%{public}s %{public}s%sNo input handler";
LABEL_223:
    int v88 = v9;
    os_log_type_t v89 = v10;
    uint32_t v90 = 32;
LABEL_224:
    _os_log_impl(&dword_1830D4000, v88, v89, v11, buf, v90);
    goto LABEL_225;
  }
  callbacks = default_input_handler->callbacks;
  if (!callbacks || (input_available = (void (*)(void))callbacks->input_available) == 0)
  {
    if ((*((_WORD *)handle + 184) & 0x80) != 0) {
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = handle + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v170 = " ";
    char v8 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v172[0] = 0;
    if (!__nwlog_fault(v8, type, v172)) {
      goto LABEL_225;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type[0];
      if (!os_log_type_enabled(v9, type[0])) {
        goto LABEL_225;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v170 = " ";
      uint64_t v11 = "%{public}s %{public}s%sinput_handler callback invalid: input_available";
      goto LABEL_223;
    }
    if (v172[0])
    {
      uint64_t v29 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type[0];
      BOOL v95 = os_log_type_enabled(v9, type[0]);
      if (v29)
      {
        if (v95)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v170 = " ";
          LOWORD(v171) = 2082;
          *(void *)((char *)&v171 + 2) = v29;
          os_log_type_t v31 = "%{public}s %{public}s%sinput_handler callback invalid: input_available, dumping backtrace:%{public}s";
          goto LABEL_98;
        }
        goto LABEL_100;
      }
      if (!v95) {
        goto LABEL_225;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v170 = " ";
      uint64_t v11 = "%{public}s %{public}s%sinput_handler callback invalid: input_available, no backtrace";
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type[0];
      if (!os_log_type_enabled(v9, type[0])) {
        goto LABEL_225;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v170 = " ";
      uint64_t v11 = "%{public}s %{public}s%sinput_handler callback invalid: input_available, backtrace limit exceeded";
    }
    goto LABEL_223;
  }
  int v7 = *((_DWORD *)handle + 70);
  if (v7 == 3)
  {
    if ((*((_WORD *)handle + 184) & 0x80) != 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = handle + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v170 = " ";
    char v8 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v172[0] = 0;
    if (!__nwlog_fault(v8, type, v172)) {
      goto LABEL_225;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v172[0])
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = gLogObj;
        os_log_type_t v10 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_225;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        uint64_t v11 = "%{public}s %{public}s%sState is failed, backtrace limit exceeded";
        goto LABEL_223;
      }
      uint64_t v29 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = gLogObj;
      os_log_type_t v10 = type[0];
      BOOL v32 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (!v29)
      {
        if (!v32) {
          goto LABEL_225;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        uint64_t v11 = "%{public}s %{public}s%sState is failed, no backtrace";
        goto LABEL_223;
      }
      if (!v32) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v170 = " ";
      LOWORD(v171) = 2082;
      *(void *)((char *)&v171 + 2) = v29;
      os_log_type_t v31 = "%{public}s %{public}s%sState is failed, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = gLogObj;
    os_log_type_t v10 = type[0];
    if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
      goto LABEL_225;
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = handle + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v170 = " ";
    uint64_t v11 = "%{public}s %{public}s%sState is failed";
    goto LABEL_223;
  }
  if (v7 == 2)
  {
    input_available();
    return;
  }
  output_handler = a1->output_handler;
  if ((*((_WORD *)handle + 184) & 0x80) == 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v99 = __nwlog_obj();
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        _os_log_impl(&dword_1830D4000, v99, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNot yet connected, reading input for http connect", buf, 0x20u);
      }
    }
  }
  if (!output_handler)
  {
    if ((*((_WORD *)handle + 184) & 0x80) != 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = handle + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v170 = " ";
    char v8 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v172[0] = 0;
    if (!__nwlog_fault(v8, type, v172)) {
      goto LABEL_225;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = gLogObj;
      os_log_type_t v10 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_225;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v170 = " ";
      uint64_t v11 = "%{public}s %{public}s%sNo output handler";
      goto LABEL_223;
    }
    if (!v172[0])
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type[0];
      if (!os_log_type_enabled(v9, type[0])) {
        goto LABEL_225;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v170 = " ";
      uint64_t v11 = "%{public}s %{public}s%sNo output handler, backtrace limit exceeded";
      goto LABEL_223;
    }
    uint64_t v29 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = gLogObj;
    os_log_type_t v10 = type[0];
    BOOL v38 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!v29)
    {
      if (!v38) {
        goto LABEL_225;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v170 = " ";
      uint64_t v11 = "%{public}s %{public}s%sNo output handler, no backtrace";
      goto LABEL_223;
    }
    if (!v38) {
      goto LABEL_100;
    }
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = handle + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v170 = " ";
    LOWORD(v171) = 2082;
    *(void *)((char *)&v171 + 2) = v29;
    os_log_type_t v31 = "%{public}s %{public}s%sNo output handler, dumping backtrace:%{public}s";
LABEL_98:
    uint64_t v40 = v9;
    os_log_type_t v41 = v10;
    uint32_t v42 = 42;
LABEL_99:
    _os_log_impl(&dword_1830D4000, v40, v41, v31, buf, v42);
    goto LABEL_100;
  }
  uint64_t v161 = 0;
  uint64_t v162 = &v161;
  uint64_t v160 = handle;
  if (((unsigned int (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, uint64_t *))output_handler->callbacks->get_input_frames)(output_handler, a1, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, &v161))
  {
    int v13 = 0;
    int v14 = 0;
    os_log_type_t v15 = handle + 284;
    uint64_t v158 = output_handler;
    int v159 = a1;
    while (1)
    {
      uint64_t v16 = v161;
      if (v161) {
        break;
      }
LABEL_25:
      if (!((unsigned int (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, uint64_t *))v158->callbacks->get_input_frames)(v158, v159, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, &v161))goto LABEL_64; {
    }
      }
    while (1)
    {
      BOOL v18 = (void *)(v16 + 32);
      uint64_t v19 = *(void *)(v16 + 32);
      if (v19 || *(void *)(v16 + 40))
      {
        if (!*(void *)(v16 + 112)) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v19 = 0;
        if (!*(void *)(v16 + 112)) {
          goto LABEL_41;
        }
      }
      if ((*(_WORD *)(v16 + 204) & 0x100) != 0
        && g_channel_check_validity
        && !g_channel_check_validity(v16, *(void *)(v16 + 88)))
      {
LABEL_41:
        int v25 = 0;
        uint64_t v23 = 0;
        goto LABEL_42;
      }
      int v20 = *(_DWORD *)(v16 + 52);
      if (v20)
      {
        uint64_t v21 = *(unsigned int *)(v16 + 56);
        int v22 = v21 + *(_DWORD *)(v16 + 60);
        uint64_t v23 = *(void *)(v16 + 112) + v21;
        __int16 v24 = *((_WORD *)handle + 184);
        int v25 = v20 - v22;
        if (v20 != v22)
        {
          v24 |= 4u;
          *((_WORD *)handle + 184) = v24;
        }
        goto LABEL_43;
      }
      int v25 = 0;
      uint64_t v23 = *(void *)(v16 + 112) + *(unsigned int *)(v16 + 56);
LABEL_42:
      __int16 v24 = *((_WORD *)handle + 184);
LABEL_43:
      if ((v24 & 0x80) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v26 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v15;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v170 = " ";
          LOWORD(v171) = 1024;
          *(_DWORD *)((char *)&v171 + 2) = v25;
          WORD3(v171) = 2048;
          *((void *)&v171 + 1) = v23;
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRead frame has %u bytes (%p)", buf, 0x30u);
        }
      }
      uint64_t v27 = *(void *)(v16 + 32);
      BOOL v28 = *(void **)(v16 + 40);
      if (v27)
      {
        *(void *)(v27 + 40) = v28;
        BOOL v28 = *(void **)(v16 + 40);
      }
      else
      {
        uint64_t v162 = *(uint64_t **)(v16 + 40);
      }
      handle = v160;
      v13 += v25;
      void *v28 = v27;
      void *v18 = 0;
      *(void *)(v16 + 40) = 0;
      os_log_type_t v17 = (void *)*((void *)v160 + 29);
      *(void *)(v16 + 40) = v17;
      *os_log_type_t v17 = v16;
      *((void *)v160 + 29) = v18;
      ++v14;
      uint64_t v16 = v19;
      if (!v19) {
        goto LABEL_25;
      }
    }
  }
  int v14 = 0;
  int v13 = 0;
LABEL_64:
  if ((*((_WORD *)handle + 184) & 0x80) == 0)
  {
    if (gLogDatapath)
    {
      v100 = __nwlog_obj();
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sGot 0 input frames, done reading", buf, 0x20u);
      }
    }
  }
  if ((*((_WORD *)handle + 184) & 0x80) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v101 = __nwlog_obj();
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_input_available";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        LOWORD(v171) = 1024;
        *(_DWORD *)((char *)&v171 + 2) = v14;
        WORD3(v171) = 1024;
        DWORD2(v171) = v13;
        _os_log_impl(&dword_1830D4000, v101, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRead %u frames (%u bytes)", buf, 0x2Cu);
      }
    }
  }
  if ((*((_WORD *)handle + 184) & 0x80) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v102 = __nwlog_obj();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_process_inbound_data";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        _os_log_impl(&dword_1830D4000, v102, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
  }
  if (*((_DWORD *)handle + 70) == 2)
  {
    if ((*((_WORD *)handle + 184) & 0x80) != 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_http_connect_process_inbound_data";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = handle + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v170 = " ";
    char v8 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v172[0] = 0;
    if (__nwlog_fault(v8, type, v172))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = gLogObj;
        os_log_type_t v10 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_225;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_process_inbound_data";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        uint64_t v11 = "%{public}s %{public}s%sSkipping inbound data process, since we're already connected";
        goto LABEL_223;
      }
      if (!v172[0])
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type[0];
        if (!os_log_type_enabled(v9, type[0])) {
          goto LABEL_225;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_process_inbound_data";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        uint64_t v11 = "%{public}s %{public}s%sSkipping inbound data process, since we're already connected, backtrace limit exceeded";
        goto LABEL_223;
      }
      uint64_t v29 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = gLogObj;
      os_log_type_t v10 = type[0];
      BOOL v39 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (!v29)
      {
        if (!v39) {
          goto LABEL_225;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_process_inbound_data";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        uint64_t v11 = "%{public}s %{public}s%sSkipping inbound data process, since we're already connected, no backtrace";
        goto LABEL_223;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http_connect_process_inbound_data";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        LOWORD(v171) = 2082;
        *(void *)((char *)&v171 + 2) = v29;
        os_log_type_t v31 = "%{public}s %{public}s%sSkipping inbound data process, since we're already connected, dumping backtrace:%{public}s";
        goto LABEL_98;
      }
LABEL_100:
      free(v29);
      if (!v8) {
        return;
      }
LABEL_226:
      free(v8);
      return;
    }
    goto LABEL_225;
  }
  if (*((void *)handle + 28))
  {
    __int16 v33 = *((_WORD *)handle + 184);
    if (*((void *)handle + 25)) {
      goto LABEL_130;
    }
    if ((v33 & 0x80) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v110 = __nwlog_obj();
        if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http_connect_prepare_response_message";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v170 = " ";
          _os_log_impl(&dword_1830D4000, v110, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    if (!*((void *)handle + 25))
    {
      *((void *)handle + 25) = CFHTTPMessageCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      *((_DWORD *)handle + 66) = 0;
      *((void *)handle + 32) = 0;
      __int16 v45 = *((_WORD *)handle + 184);
      LOBYTE(v33) = v45 & 0xFD;
      *((_WORD *)handle + 184) = v45 & 0xFFFD;
      goto LABEL_130;
    }
    __int16 v33 = *((_WORD *)handle + 184);
    if ((v33 & 0x80) != 0)
    {
LABEL_130:
      *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
      uint64_t v164 = 0x40000000;
      char v165 = ___ZL36nw_http_connect_process_inbound_dataP24nw_protocol_http_connect_block_invoke;
      uint64_t v166 = &__block_descriptor_tmp_19_36220;
      uint64_t v167 = handle;
      uint64_t v48 = *((void *)handle + 28);
      do
      {
        if (!v48) {
          break;
        }
        uint64_t v49 = *(void *)(v48 + 32);
        char v50 = ((uint64_t (*)(os_log_type_t *))v165)(type);
        uint64_t v48 = v49;
      }
      while ((v50 & 1) != 0);
      unsigned int v51 = *((unsigned __int16 *)handle + 184);
      if ((v33 & 2) != 0)
      {
        if ((v51 & 0x80) == 0)
        {
          if (gLogDatapath)
          {
            BOOL v43 = __nwlog_obj();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http_connect_process_inbound_data";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = handle + 284;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v170 = " ";
              BOOL v44 = "%{public}s %{public}s%sResponse message was already complete, ignoring extra data...";
              goto LABEL_144;
            }
          }
        }
        return;
      }
      int v52 = (v51 >> 7) & 1;
      if (!gLogDatapath) {
        LOBYTE(v52) = 1;
      }
      if ((v51 & 2) == 0)
      {
        if ((v52 & 1) == 0)
        {
          BOOL v43 = __nwlog_obj();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_http_connect_process_inbound_data";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 284;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v170 = " ";
            BOOL v44 = "%{public}s %{public}s%sResponse message is not complete, waiting for more data...";
            goto LABEL_144;
          }
        }
        return;
      }
      if ((v52 & 1) == 0)
      {
        uint64_t v111 = __nwlog_obj();
        if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http_connect_process_inbound_data";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v170 = " ";
          _os_log_impl(&dword_1830D4000, v111, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sResponse message is complete", buf, 0x20u);
        }
      }
      if ((*((_WORD *)handle + 184) & 0x80) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v112 = __nwlog_obj();
          if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 284;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v170 = " ";
            _os_log_impl(&dword_1830D4000, v112, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
          }
        }
      }
      BOOL v53 = (__CFHTTPMessage *)*((void *)handle + 25);
      if (v53)
      {
        __int16 v54 = *((_WORD *)handle + 184);
        if ((v54 & 2) == 0)
        {
          if ((v54 & 0x80) != 0) {
            return;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v170 = " ";
          char v8 = (char *)_os_log_send_and_compose_impl();
          v172[0] = 16;
          char v168 = 0;
          if (__nwlog_fault(v8, v172, &v168))
          {
            if (v172[0] == 17)
            {
              uint64_t v9 = __nwlog_obj();
              os_log_type_t v10 = v172[0];
              if (!os_log_type_enabled(v9, (os_log_type_t)v172[0])) {
                goto LABEL_225;
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = handle + 284;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v170 = " ";
              uint64_t v11 = "%{public}s %{public}s%sCannot process response that is not yet complete";
              goto LABEL_223;
            }
            if (!v168)
            {
              uint64_t v9 = __nwlog_obj();
              os_log_type_t v10 = v172[0];
              if (!os_log_type_enabled(v9, (os_log_type_t)v172[0])) {
                goto LABEL_225;
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = handle + 284;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v170 = " ";
              uint64_t v11 = "%{public}s %{public}s%sCannot process response that is not yet complete, backtrace limit exceeded";
              goto LABEL_223;
            }
            uint64_t v29 = (char *)__nw_create_backtrace_string();
            uint64_t v9 = __nwlog_obj();
            os_log_type_t v10 = v172[0];
            BOOL v69 = os_log_type_enabled(v9, (os_log_type_t)v172[0]);
            if (!v29)
            {
              if (!v69) {
                goto LABEL_225;
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = handle + 284;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v170 = " ";
              uint64_t v11 = "%{public}s %{public}s%sCannot process response that is not yet complete, no backtrace";
              goto LABEL_223;
            }
            if (v69)
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = handle + 284;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v170 = " ";
              LOWORD(v171) = 2082;
              *(void *)((char *)&v171 + 2) = v29;
              os_log_type_t v31 = "%{public}s %{public}s%sCannot process response that is not yet complete, dumping backtrace:%{public}s";
              goto LABEL_98;
            }
            goto LABEL_100;
          }
LABEL_225:
          if (!v8) {
            return;
          }
          goto LABEL_226;
        }
        CFIndex ResponseStatusCode = CFHTTPMessageGetResponseStatusCode(v53);
        CFStringRef v56 = CFHTTPMessageCopyResponseStatusLine(*((CFHTTPMessageRef *)handle + 25));
        if ((*((_WORD *)handle + 184) & 0x80) == 0)
        {
          if (gLogDatapath)
          {
            uint64_t v113 = __nwlog_obj();
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = handle + 284;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v170 = " ";
              LOWORD(v171) = 2112;
              *(void *)((char *)&v171 + 2) = v56;
              _os_log_impl(&dword_1830D4000, v113, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sResponse Message: %@", buf, 0x2Au);
            }
          }
        }
        if ((*((_WORD *)handle + 184) & 0x80) == 0)
        {
          if (gLogDatapath)
          {
            int v114 = __nwlog_obj();
            if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = handle + 284;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v170 = " ";
              LOWORD(v171) = 2048;
              *(void *)((char *)&v171 + 2) = ResponseStatusCode;
              _os_log_impl(&dword_1830D4000, v114, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sStatus Code: %ld", buf, 0x2Au);
            }
          }
        }
        if (!*((void *)handle + 1))
        {
          uint64_t v57 = mach_continuous_time();
          if (v57 <= 1) {
            uint64_t v58 = 1;
          }
          else {
            uint64_t v58 = v57;
          }
          *((void *)handle + 1) = v58;
        }
        if (ResponseStatusCode != 407)
        {
          if (ResponseStatusCode == 200)
          {
            uint64_t v59 = *((void *)handle + 21);
            if ((!v59 || *(_DWORD *)(v59 + 124) != 4) && (*((_WORD *)handle + 184) & 0x80) == 0)
            {
              BOOL v60 = __nwlog_obj();
              if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = handle + 284;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v170 = " ";
                _os_log_impl(&dword_1830D4000, v60, OS_LOG_TYPE_INFO, "%{public}s %{public}s%shttp connect proxy connected", buf, 0x20u);
              }
            }
            uint64_t v61 = mach_continuous_time();
            if (v61 <= 1) {
              uint64_t v62 = 1;
            }
            else {
              uint64_t v62 = v61;
            }
            *((void *)handle + 2) = v62;
            *((_DWORD *)handle + 70) = 2;
            _CFHTTPAuthenticationApplyProxyAuthorizationToRequest();
            uint64_t v63 = *((void *)handle + 9);
            if (v63)
            {
              uint64_t v64 = *(void *)(v63 + 24);
              if (v64)
              {
                uint64_t v65 = *(void (**)(uint64_t, void))(v64 + 40);
                if (v65)
                {
                  v65(v63, *((void *)handle + 7));
                  uint64_t v66 = *((void *)handle + 9);
                  if (!v66) {
                    goto LABEL_352;
                  }
LABEL_178:
                  uint64_t v67 = *(void *)(v66 + 24);
                  if (v67)
                  {
                    BOOL v68 = *(void (**)(uint64_t, char *))(v67 + 40);
                    if (v68)
                    {
                      v68(v66, handle + 24);
                      goto LABEL_296;
                    }
                  }
LABEL_352:
                  __nwlog_obj();
                  uint64_t v137 = *((void *)handle + 9);
                  uint64_t v138 = "invalid";
                  if (v137)
                  {
                    os_log_type_t v139 = *(const char **)(v137 + 16);
                    if (v139) {
                      uint64_t v138 = v139;
                    }
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v138;
                  BOOL v140 = (char *)_os_log_send_and_compose_impl();
                  v172[0] = 16;
                  char v168 = 0;
                  if (!__nwlog_fault(v140, v172, &v168)) {
                    goto LABEL_381;
                  }
                  if (v172[0] == 17)
                  {
                    uint64_t v141 = __nwlog_obj();
                    os_log_type_t v142 = v172[0];
                    if (!os_log_type_enabled(v141, (os_log_type_t)v172[0])) {
                      goto LABEL_381;
                    }
                    uint64_t v143 = *((void *)v160 + 9);
                    v144 = "invalid";
                    if (v143)
                    {
                      uint64_t v145 = *(const char **)(v143 + 16);
                      if (v145) {
                        v144 = v145;
                      }
                    }
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v144;
                    BOOL v146 = "%{public}s protocol %{public}s has invalid connected callback";
                  }
                  else if (v168)
                  {
                    uint64_t v147 = (char *)__nw_create_backtrace_string();
                    uint64_t v141 = __nwlog_obj();
                    os_log_type_t v142 = v172[0];
                    BOOL v148 = os_log_type_enabled(v141, (os_log_type_t)v172[0]);
                    if (v147)
                    {
                      if (v148)
                      {
                        uint64_t v149 = *((void *)v160 + 9);
                        BOOL v150 = "invalid";
                        if (v149)
                        {
                          uint64_t v151 = *(const char **)(v149 + 16);
                          if (v151) {
                            BOOL v150 = v151;
                          }
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v150;
                        *(_WORD *)&unsigned char buf[22] = 2082;
                        uint64_t v170 = v147;
                        _os_log_impl(&dword_1830D4000, v141, v142, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
                      }
                      free(v147);
                      goto LABEL_381;
                    }
                    if (!v148)
                    {
LABEL_381:
                      if (v140) {
                        free(v140);
                      }
                      goto LABEL_296;
                    }
                    uint64_t v155 = *((void *)v160 + 9);
                    int v156 = "invalid";
                    if (v155)
                    {
                      uint64_t v157 = *(const char **)(v155 + 16);
                      if (v157) {
                        int v156 = v157;
                      }
                    }
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v156;
                    BOOL v146 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
                  }
                  else
                  {
                    uint64_t v141 = __nwlog_obj();
                    os_log_type_t v142 = v172[0];
                    if (!os_log_type_enabled(v141, (os_log_type_t)v172[0])) {
                      goto LABEL_381;
                    }
                    uint64_t v152 = *((void *)v160 + 9);
                    uint64_t v153 = "invalid";
                    if (v152)
                    {
                      int v154 = *(const char **)(v152 + 16);
                      if (v154) {
                        uint64_t v153 = v154;
                      }
                    }
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v153;
                    BOOL v146 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
                  }
                  _os_log_impl(&dword_1830D4000, v141, v142, v146, buf, 0x16u);
                  goto LABEL_381;
                }
              }
            }
            __nwlog_obj();
            uint64_t v115 = *((void *)handle + 9);
            id v116 = "invalid";
            if (v115)
            {
              id v117 = *(const char **)(v115 + 16);
              if (v117) {
                id v116 = v117;
              }
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v116;
            __int16 v118 = (char *)_os_log_send_and_compose_impl();
            v172[0] = 16;
            char v168 = 0;
            if (__nwlog_fault(v118, v172, &v168))
            {
              if (v172[0] == 17)
              {
                int v119 = __nwlog_obj();
                os_log_type_t v120 = v172[0];
                if (!os_log_type_enabled(v119, (os_log_type_t)v172[0])) {
                  goto LABEL_349;
                }
                uint64_t v121 = *((void *)v160 + 9);
                __int16 v122 = "invalid";
                if (v121)
                {
                  CFStringRef v123 = *(const char **)(v121 + 16);
                  if (v123) {
                    __int16 v122 = v123;
                  }
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v122;
                os_log_type_t v124 = "%{public}s protocol %{public}s has invalid connected callback";
LABEL_348:
                _os_log_impl(&dword_1830D4000, v119, v120, v124, buf, 0x16u);
                goto LABEL_349;
              }
              if (!v168)
              {
                int v119 = __nwlog_obj();
                os_log_type_t v120 = v172[0];
                if (!os_log_type_enabled(v119, (os_log_type_t)v172[0])) {
                  goto LABEL_349;
                }
                uint64_t v131 = *((void *)v160 + 9);
                uint64_t v132 = "invalid";
                if (v131)
                {
                  int v133 = *(const char **)(v131 + 16);
                  if (v133) {
                    uint64_t v132 = v133;
                  }
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v132;
                os_log_type_t v124 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
                goto LABEL_348;
              }
              uint64_t v126 = (char *)__nw_create_backtrace_string();
              int v119 = __nwlog_obj();
              os_log_type_t v120 = v172[0];
              BOOL v127 = os_log_type_enabled(v119, (os_log_type_t)v172[0]);
              if (!v126)
              {
                if (!v127) {
                  goto LABEL_349;
                }
                uint64_t v134 = *((void *)v160 + 9);
                int v135 = "invalid";
                if (v134)
                {
                  int v136 = *(const char **)(v134 + 16);
                  if (v136) {
                    int v135 = v136;
                  }
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v135;
                os_log_type_t v124 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
                goto LABEL_348;
              }
              if (v127)
              {
                uint64_t v128 = *((void *)v160 + 9);
                BOOL v129 = "invalid";
                if (v128)
                {
                  long long v130 = *(const char **)(v128 + 16);
                  if (v130) {
                    BOOL v129 = v130;
                  }
                }
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v129;
                *(_WORD *)&unsigned char buf[22] = 2082;
                uint64_t v170 = v126;
                _os_log_impl(&dword_1830D4000, v119, v120, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
              }
              free(v126);
            }
LABEL_349:
            if (v118) {
              free(v118);
            }
            handle = v160;
            uint64_t v66 = *((void *)v160 + 9);
            if (!v66) {
              goto LABEL_352;
            }
            goto LABEL_178;
          }
          if ((*((_WORD *)handle + 184) & 0x80) == 0)
          {
            CFStringRef v82 = __nwlog_obj();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = handle + 284;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v170 = " ";
              LOWORD(v171) = 2114;
              *(void *)((char *)&v171 + 2) = v56;
              _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%shttp connect Proxy received status: %{public}@", buf, 0x2Au);
            }
          }
          _CFHTTPAuthenticationApplyProxyAuthorizationToRequest();
          uint64_t v83 = *((void *)handle + 21);
          if (!v83 || *(_DWORD *)(v83 + 124) != 4)
          {
            CFDictionaryRef v84 = CFHTTPMessageCopyAllHeaderFields(*((CFHTTPMessageRef *)handle + 25));
            if ((*((_WORD *)handle + 184) & 0x80) == 0)
            {
              __int16 v85 = __nwlog_obj();
              if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = handle + 284;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v170 = " ";
                LOWORD(v171) = 2114;
                *(void *)((char *)&v171 + 2) = v84;
                _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sHeaders:\n%{public}@", buf, 0x2Au);
              }
            }
            if (v84) {
              CFRelease(v84);
            }
          }
          uint64_t v86 = (uint64_t)handle;
          int v87 = 57;
          goto LABEL_213;
        }
        __int16 v70 = *((_WORD *)handle + 184);
        *((_WORD *)handle + 184) = v70 & 0xFFF7;
        uint64_t v71 = *((void *)handle + 21);
        if ((!v71 || *(_DWORD *)(v71 + 124) != 4) && (v70 & 0x80) == 0)
        {
          BOOL v72 = __nwlog_obj();
          if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 284;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v170 = " ";
            _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_INFO, "%{public}s %{public}s%shttp connect proxy authentication required", buf, 0x20u);
          }
        }
        if (*((void *)handle + 22) && !*((_DWORD *)handle + 67))
        {
          if (*((_DWORD *)handle + 68))
          {
            if ((*((_WORD *)handle + 184) & 0x80) == 0)
            {
              os_log_type_t v94 = __nwlog_obj();
              if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = handle + 284;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v170 = " ";
                _os_log_impl(&dword_1830D4000, v94, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sProxy credential was rejected, cancelling connection", buf, 0x20u);
              }
            }
            uint64_t v86 = (uint64_t)handle;
            int v87 = 80;
LABEL_213:
            nw_http_connect_fail(v86, v87);
            goto LABEL_296;
          }
        }
        else
        {
          long long v73 = (void *)*((void *)handle + 23);
          if (v73)
          {
            BOOL v74 = nw_proxy_options_copy_authentication_challenge_handler(v73);
            if (v74)
            {
              long long v75 = (void (**)(void, void, void))v74;
              CFStringRef v76 = CFHTTPMessageCopyHeaderFieldValue(*((CFHTTPMessageRef *)handle + 25), @"Proxy-Authenticate");
              if (v76)
              {
                CFStringRef v77 = v76;
                CFIndex Length = CFStringGetLength(v76);
                if (Length < CFStringGetLength(@"NTLM")
                  || (v175.length = CFStringGetLength(@"NTLM"),
                      v175.location = 0,
                      CFStringCompareWithOptions(v77, @"NTLM", v175, 1uLL)))
                {
                  CFIndex v79 = CFStringGetLength(v77);
                  if (v79 < CFStringGetLength(@"Basic")
                    || (v176.length = CFStringGetLength(@"Basic"),
                        int v80 = 1,
                        v176.location = 0,
                        CFStringCompareWithOptions(v77, @"Basic", v176, 1uLL)))
                  {
                    CFIndex v81 = CFStringGetLength(v77);
                    if (v81 < CFStringGetLength(@"Digest")
                      || (v177.length = CFStringGetLength(@"Digest"),
                          v177.location = 0,
                          CFStringCompareWithOptions(v77, @"Digest", v177, 1uLL)))
                    {
                      int v80 = 0;
                    }
                    else
                    {
                      int v80 = 2;
                    }
                  }
                }
                else
                {
                  int v80 = 5;
                }
                uint64_t v103 = nw_authentication_protection_space_create(v80);
                CFRelease(v77);
                if (v103)
                {
                  nw_authentication_protection_space_set_is_proxy(v103, 1);
                  BOOL v104 = nw_endpoint_create_with_cfurl(*((const __CFURL **)handle + 27));
                  nw_authentication_protection_space_set_endpoint(v103, (void *)v104);
                  nw_authentication_protection_space_set_proxy_origin_is_cleartext(v103, 0);
                  uint64_t v105 = objc_alloc_init(NWConcrete_nw_authentication_challenge);
                  nw_authentication_challenge_set_protection_space(v105, v103);
                  nw_authentication_challenge_set_http_message(v105, *((const void **)handle + 25));
                  nw_authentication_challenge_set_attempt_count(v105, *((_DWORD *)handle + 67));
                  os_release(v103);
                  ++*((_DWORD *)handle + 67);
                  nw_http_connect_start_async((uint64_t)handle);
                  if ((*((_WORD *)handle + 184) & 0x80) == 0)
                  {
                    BOOL v106 = __nwlog_obj();
                    if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)long long v172 = 136446722;
                      *(void *)&v172[4] = "nw_http_connect_send_auth_challenge";
                      *(_WORD *)&v172[12] = 2082;
                      *(void *)&v172[14] = handle + 284;
                      *(_WORD *)&v172[22] = 2080;
                      uint64_t v173 = " ";
                      _os_log_impl(&dword_1830D4000, v106, OS_LOG_TYPE_INFO, "%{public}s %{public}s%shttp connect calling out to challenge handler", v172, 0x20u);
                    }
                  }
                  *(void *)long long v172 = 0;
                  *(void *)&v172[8] = v172;
                  *(void *)&v172[16] = 0x2000000000;
                  uint64_t v173 = 0;
                  BOOL v107 = (void *)*((void *)handle + 21);
                  if (v107) {
                    BOOL v107 = os_retain(v107);
                  }
                  uint64_t v173 = (const char *)v107;
                  *(void *)buf = MEMORY[0x1E4F143A8];
                  *(void *)&buf[8] = 0x40000000;
                  *(void *)&buf[16] = ___ZL35nw_http_connect_send_auth_challengeP24nw_protocol_http_connect_block_invoke;
                  uint64_t v170 = (const char *)&unk_1E5240868;
                  *(void *)&long long v171 = v172;
                  *((void *)&v171 + 1) = handle;
                  ((void (**)(void, NWConcrete_nw_authentication_challenge *, unsigned char *))v75)[2](v75, v105, buf);
                  _Block_release(v75);
                  if (v105) {
                    os_release(v105);
                  }
                  _Block_object_dispose(v172, 8);
                  if (v104) {
                    os_release((void *)v104);
                  }
                  goto LABEL_296;
                }
              }
              uint64_t v108 = *((void *)handle + 21);
              if ((!v108 || *(_DWORD *)(v108 + 124) != 4) && (*((_WORD *)handle + 184) & 0x80) == 0)
              {
                uint64_t v109 = __nwlog_obj();
                if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)long long v172 = 136446722;
                  *(void *)&v172[4] = "nw_http_connect_send_auth_challenge";
                  *(_WORD *)&v172[12] = 2082;
                  *(void *)&v172[14] = handle + 284;
                  *(_WORD *)&v172[22] = 2080;
                  uint64_t v173 = " ";
                  _os_log_impl(&dword_1830D4000, v109, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sCould not create challenge for HTTP Connect Proxy authentication", v172, 0x20u);
                }
              }
            }
          }
        }
        nw_http_connect_send_auth_request((uint64_t)handle);
LABEL_296:
        if (v56) {
          CFRelease(v56);
        }
        return;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
      char v8 = (char *)_os_log_send_and_compose_impl();
      v172[0] = 16;
      char v168 = 0;
      if (!__nwlog_fault(v8, v172, &v168)) {
        goto LABEL_225;
      }
      if (v172[0] == 17)
      {
        BOOL v92 = __nwlog_obj();
        os_log_type_t v93 = v172[0];
        if (!os_log_type_enabled(v92, (os_log_type_t)v172[0])) {
          goto LABEL_225;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
        uint64_t v11 = "%{public}s called with null http_connect->response_message";
        goto LABEL_278;
      }
      if (v168)
      {
        uint64_t v29 = (char *)__nw_create_backtrace_string();
        BOOL v92 = __nwlog_obj();
        os_log_type_t v93 = v172[0];
        BOOL v125 = os_log_type_enabled(v92, (os_log_type_t)v172[0]);
        if (v29)
        {
          if (!v125) {
            goto LABEL_100;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v29;
          os_log_type_t v31 = "%{public}s called with null http_connect->response_message, dumping backtrace:%{public}s";
          goto LABEL_256;
        }
        if (!v125) {
          goto LABEL_225;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
        uint64_t v11 = "%{public}s called with null http_connect->response_message, no backtrace";
      }
      else
      {
        BOOL v92 = __nwlog_obj();
        os_log_type_t v93 = v172[0];
        if (!os_log_type_enabled(v92, (os_log_type_t)v172[0])) {
          goto LABEL_225;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
        uint64_t v11 = "%{public}s called with null http_connect->response_message, backtrace limit exceeded";
      }
LABEL_278:
      int v88 = v92;
      os_log_type_t v89 = v93;
      uint32_t v90 = 12;
      goto LABEL_224;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_http_connect_prepare_response_message";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = handle + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v170 = " ";
    os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v172[0] = 0;
    if (__nwlog_fault(v34, type, v172))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v35 = __nwlog_obj();
        os_log_type_t v36 = type[0];
        if (os_log_type_enabled(v35, type[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http_connect_prepare_response_message";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v170 = " ";
          os_log_type_t v37 = "%{public}s %{public}s%sAlready have response message, cannot create new one";
LABEL_126:
          _os_log_impl(&dword_1830D4000, v35, v36, v37, buf, 0x20u);
        }
      }
      else if (v172[0])
      {
        BOOL v46 = (char *)__nw_create_backtrace_string();
        uint64_t v35 = __nwlog_obj();
        os_log_type_t v36 = type[0];
        BOOL v47 = os_log_type_enabled(v35, type[0]);
        if (v46)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http_connect_prepare_response_message";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 284;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v170 = " ";
            LOWORD(v171) = 2082;
            *(void *)((char *)&v171 + 2) = v46;
            _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s %{public}s%sAlready have response message, cannot create new one, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v46);
          goto LABEL_127;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http_connect_prepare_response_message";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v170 = " ";
          os_log_type_t v37 = "%{public}s %{public}s%sAlready have response message, cannot create new one, no backtrace";
          goto LABEL_126;
        }
      }
      else
      {
        uint64_t v35 = __nwlog_obj();
        os_log_type_t v36 = type[0];
        if (os_log_type_enabled(v35, type[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http_connect_prepare_response_message";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v170 = " ";
          os_log_type_t v37 = "%{public}s %{public}s%sAlready have response message, cannot create new one, backtrace limit exceeded";
          goto LABEL_126;
        }
      }
    }
LABEL_127:
    if (v34) {
      free(v34);
    }
    handle = v160;
    __int16 v33 = *((_WORD *)v160 + 184);
    goto LABEL_130;
  }
  if ((*((_WORD *)handle + 184) & 0x80) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v43 = __nwlog_obj();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_process_inbound_data";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v170 = " ";
        BOOL v44 = "%{public}s %{public}s%sNo read frames, nothing to process";
LABEL_144:
        _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEBUG, v44, buf, 0x20u);
      }
    }
  }
}

BOOL ___ZL36nw_http_connect_process_inbound_dataP24nw_protocol_http_connect_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v168 = "nw_http_connect_process_inbound_data_block_invoke";
    int v154 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v165 = 0;
    if (__nwlog_fault(v154, &type, &v165))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v155 = __nwlog_obj();
        os_log_type_t v156 = type;
        if (os_log_type_enabled(v155, type))
        {
          *(_DWORD *)buf = 136446210;
          char v168 = "nw_http_connect_process_inbound_data_block_invoke";
          uint64_t v157 = "%{public}s called with null frame";
LABEL_269:
          _os_log_impl(&dword_1830D4000, v155, v156, v157, buf, 0xCu);
        }
      }
      else if (v165)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v155 = __nwlog_obj();
        os_log_type_t v156 = type;
        BOOL v163 = os_log_type_enabled(v155, type);
        if (backtrace_string)
        {
          if (v163)
          {
            *(_DWORD *)buf = 136446466;
            char v168 = "nw_http_connect_process_inbound_data_block_invoke";
            __int16 v169 = 2082;
            uint64_t v170 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v155, v156, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_270;
        }
        if (v163)
        {
          *(_DWORD *)buf = 136446210;
          char v168 = "nw_http_connect_process_inbound_data_block_invoke";
          uint64_t v157 = "%{public}s called with null frame, no backtrace";
          goto LABEL_269;
        }
      }
      else
      {
        uint64_t v155 = __nwlog_obj();
        os_log_type_t v156 = type;
        if (os_log_type_enabled(v155, type))
        {
          *(_DWORD *)buf = 136446210;
          char v168 = "nw_http_connect_process_inbound_data_block_invoke";
          uint64_t v157 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_269;
        }
      }
    }
LABEL_270:
    if (!v154) {
      return 0;
    }
    os_log_type_t v94 = (char *)v154;
    goto LABEL_138;
  }
  if (!*(void *)(a2 + 112)
    || (*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
  {
    unsigned int v6 = 0;
    int v7 = 0;
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_16;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a2 + 52);
    uint64_t v4 = *(unsigned int *)(a2 + 56);
    if (v5) {
      unsigned int v6 = v5 - (v4 + *(_DWORD *)(a2 + 60));
    }
    else {
      unsigned int v6 = 0;
    }
    int v7 = (const UInt8 *)(*(void *)(a2 + 112) + v4);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_16:
      if ((*(_WORD *)(v8 + 368) & 0x80) != 0 || !gLogDatapath) {
        goto LABEL_18;
      }
      goto LABEL_244;
    }
  }
  if (!gLogDatapath) {
    goto LABEL_10;
  }
LABEL_244:
  uint64_t v158 = __nwlog_obj();
  BOOL v159 = os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG);
  uint64_t v8 = *(void *)(a1 + 32);
  if (v159)
  {
    uint64_t v160 = "";
    *(_DWORD *)buf = 136447234;
    char v168 = "nw_http_connect_process_inbound_data_block_invoke";
    uint64_t v161 = (const char *)(v8 + 284);
    if (!v8) {
      uint64_t v161 = "";
    }
    __int16 v169 = 2082;
    uint64_t v170 = (void *)v161;
    __int16 v171 = 2080;
    if (v8) {
      uint64_t v160 = " ";
    }
    long long v172 = v160;
    __int16 v173 = 2048;
    *(void *)uint64_t v174 = a2;
    *(_WORD *)&v174[8] = 1024;
    *(_DWORD *)&v174[10] = v6;
    _os_log_impl(&dword_1830D4000, v158, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sProcessing frame (%p, %u bytes)", buf, 0x30u);
    uint64_t v8 = *(void *)(a1 + 32);
  }
  if (!v8)
  {
LABEL_10:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v168 = "nw_http_connect_append_bytes";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v165 = 0;
    if (!__nwlog_fault(v9, &type, &v165)) {
      goto LABEL_95;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)buf = 136446210;
      char v168 = "nw_http_connect_append_bytes";
      uint64_t v12 = "%{public}s called with null http_connect";
      goto LABEL_93;
    }
    if (!v165)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)buf = 136446210;
      char v168 = "nw_http_connect_append_bytes";
      uint64_t v12 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_93;
    }
    uint64_t v35 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v36 = os_log_type_enabled(v10, type);
    if (!v35)
    {
      if (!v36) {
        goto LABEL_95;
      }
      *(_DWORD *)buf = 136446210;
      char v168 = "nw_http_connect_append_bytes";
      uint64_t v12 = "%{public}s called with null http_connect, no backtrace";
      goto LABEL_93;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      char v168 = "nw_http_connect_append_bytes";
      __int16 v169 = 2082;
      uint64_t v170 = v35;
      os_log_type_t v37 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
LABEL_62:
      _os_log_impl(&dword_1830D4000, v10, v11, v37, buf, 0x16u);
    }
LABEL_63:
    free(v35);
    if (!v9) {
      goto LABEL_97;
    }
    goto LABEL_96;
  }
LABEL_18:
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v168 = "nw_http_connect_append_bytes";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v165 = 0;
    if (!__nwlog_fault(v9, &type, &v165)) {
      goto LABEL_95;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)buf = 136446210;
      char v168 = "nw_http_connect_append_bytes";
      uint64_t v12 = "%{public}s called with null new_bytes";
      goto LABEL_93;
    }
    if (v165)
    {
      uint64_t v35 = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v164 = os_log_type_enabled(v10, type);
      if (v35)
      {
        if (v164)
        {
          *(_DWORD *)buf = 136446466;
          char v168 = "nw_http_connect_append_bytes";
          __int16 v169 = 2082;
          uint64_t v170 = v35;
          os_log_type_t v37 = "%{public}s called with null new_bytes, dumping backtrace:%{public}s";
          goto LABEL_62;
        }
        goto LABEL_63;
      }
      if (!v164) {
        goto LABEL_95;
      }
      *(_DWORD *)buf = 136446210;
      char v168 = "nw_http_connect_append_bytes";
      uint64_t v12 = "%{public}s called with null new_bytes, no backtrace";
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)buf = 136446210;
      char v168 = "nw_http_connect_append_bytes";
      uint64_t v12 = "%{public}s called with null new_bytes, backtrace limit exceeded";
    }
LABEL_93:
    BOOL v60 = v10;
    os_log_type_t v61 = v11;
    uint32_t v62 = 12;
LABEL_94:
    _os_log_impl(&dword_1830D4000, v60, v61, v12, buf, v62);
    goto LABEL_95;
  }
  if (CFHTTPMessageIsHeaderComplete(*(CFHTTPMessageRef *)(v8 + 200)))
  {
    unsigned int v13 = *(_DWORD *)(v8 + 260) + v6;
    *(_DWORD *)(v8 + 260) = v13;
    int v14 = *(_DWORD *)(v8 + 256);
    __int16 v15 = *(_WORD *)(v8 + 368);
    BOOL v27 = __OFSUB__(v13, v14);
    int v16 = v13 - v14;
    if (v16 < 0 != v27)
    {
      *(_WORD *)(v8 + 368) = v15 & 0xFFFD;
      *(_DWORD *)(v8 + 264) = 0;
    }
    else
    {
      *(_WORD *)(v8 + 368) = v15 | 2;
      *(_DWORD *)(v8 + 264) = v16;
    }
    goto LABEL_54;
  }
  if (!CFHTTPMessageAppendBytes(*(CFHTTPMessageRef *)(v8 + 200), v7, v6))
  {
    if ((*(_WORD *)(v8 + 368) & 0x80) != 0) {
      goto LABEL_97;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v38 = *(void *)(v8 + 200);
    *(_DWORD *)buf = 136446978;
    char v168 = "nw_http_connect_append_bytes";
    __int16 v169 = 2082;
    uint64_t v170 = (void *)(v8 + 284);
    __int16 v171 = 2080;
    long long v172 = " ";
    __int16 v173 = 2048;
    *(void *)uint64_t v174 = v38;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v165 = 0;
    if (__nwlog_fault(v9, &type, &v165))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v39 = gLogObj;
        os_log_type_t v40 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_95;
        }
        uint64_t v41 = *(void *)(v8 + 200);
        *(_DWORD *)buf = 136446978;
        char v168 = "nw_http_connect_append_bytes";
        __int16 v169 = 2082;
        uint64_t v170 = (void *)(v8 + 284);
        __int16 v171 = 2080;
        long long v172 = " ";
        __int16 v173 = 2048;
        *(void *)uint64_t v174 = v41;
        uint64_t v12 = "%{public}s %{public}s%sFailed to apply bytes to response message %p";
        goto LABEL_239;
      }
      if (v165)
      {
        os_log_type_t v96 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v39 = gLogObj;
        os_log_type_t v40 = type;
        BOOL v97 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v96)
        {
          if (v97)
          {
            uint64_t v98 = *(void *)(v8 + 200);
            *(_DWORD *)buf = 136447234;
            char v168 = "nw_http_connect_append_bytes";
            __int16 v169 = 2082;
            uint64_t v170 = (void *)(v8 + 284);
            __int16 v171 = 2080;
            long long v172 = " ";
            __int16 v173 = 2048;
            *(void *)uint64_t v174 = v98;
            *(_WORD *)&v174[8] = 2082;
            *(void *)&v174[10] = v96;
            _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s %{public}s%sFailed to apply bytes to response message %p, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v96);
          goto LABEL_95;
        }
        if (!v97) {
          goto LABEL_95;
        }
        uint64_t v153 = *(void *)(v8 + 200);
        *(_DWORD *)buf = 136446978;
        char v168 = "nw_http_connect_append_bytes";
        __int16 v169 = 2082;
        uint64_t v170 = (void *)(v8 + 284);
        __int16 v171 = 2080;
        long long v172 = " ";
        __int16 v173 = 2048;
        *(void *)uint64_t v174 = v153;
        uint64_t v12 = "%{public}s %{public}s%sFailed to apply bytes to response message %p, no backtrace";
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v39 = gLogObj;
        os_log_type_t v40 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_95;
        }
        uint64_t v152 = *(void *)(v8 + 200);
        *(_DWORD *)buf = 136446978;
        char v168 = "nw_http_connect_append_bytes";
        __int16 v169 = 2082;
        uint64_t v170 = (void *)(v8 + 284);
        __int16 v171 = 2080;
        long long v172 = " ";
        __int16 v173 = 2048;
        *(void *)uint64_t v174 = v152;
        uint64_t v12 = "%{public}s %{public}s%sFailed to apply bytes to response message %p, backtrace limit exceeded";
      }
LABEL_239:
      BOOL v60 = v39;
      os_log_type_t v61 = v40;
      uint32_t v62 = 42;
      goto LABEL_94;
    }
LABEL_95:
    if (v9) {
LABEL_96:
    }
      free(v9);
LABEL_97:
    uint64_t v63 = *(void *)(a1 + 32);
    if (v63 && (*(_WORD *)(v63 + 368) & 0x80) != 0) {
      return 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v64 = *(void *)(a1 + 32);
    uint64_t v65 = (const char *)(v64 + 284);
    BOOL v66 = v64 == 0;
    uint64_t v67 = *(void *)(v64 + 200);
    *(_DWORD *)buf = 136446978;
    if (v66) {
      uint64_t v65 = "";
    }
    char v168 = "nw_http_connect_process_inbound_data_block_invoke";
    if (v66) {
      BOOL v68 = "";
    }
    else {
      BOOL v68 = " ";
    }
    __int16 v169 = 2082;
    uint64_t v170 = (void *)v65;
    __int16 v171 = 2080;
    long long v172 = v68;
    __int16 v173 = 2048;
    *(void *)uint64_t v174 = v67;
    BOOL v69 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v165 = 0;
    if (!__nwlog_fault(v69, &type, &v165)) {
      goto LABEL_136;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v70 = gLogObj;
      os_log_type_t v71 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v72 = *(void *)(a1 + 32);
        long long v73 = (const char *)(v72 + 284);
        BOOL v74 = v72 == 0;
        if (!v72) {
          long long v73 = "";
        }
        uint64_t v75 = *(void *)(v72 + 200);
        if (v74) {
          CFStringRef v76 = "";
        }
        else {
          CFStringRef v76 = " ";
        }
        *(_DWORD *)buf = 136446978;
        char v168 = "nw_http_connect_process_inbound_data_block_invoke";
        __int16 v169 = 2082;
        uint64_t v170 = (void *)v73;
        __int16 v171 = 2080;
        long long v172 = v76;
        __int16 v173 = 2048;
        *(void *)uint64_t v174 = v75;
        CFStringRef v77 = "%{public}s %{public}s%sFailed to apply bytes to response message %p";
LABEL_135:
        _os_log_impl(&dword_1830D4000, v70, v71, v77, buf, 0x2Au);
      }
    }
    else if (v165)
    {
      CFStringRef v78 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v70 = gLogObj;
      os_log_type_t v71 = type;
      BOOL v79 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v78)
      {
        if (v79)
        {
          uint64_t v80 = *(void *)(a1 + 32);
          CFIndex v81 = (const char *)(v80 + 284);
          if (v80)
          {
            CFStringRef v82 = " ";
          }
          else
          {
            CFIndex v81 = "";
            CFStringRef v82 = "";
          }
          uint64_t v83 = *(void *)(v80 + 200);
          *(_DWORD *)buf = 136447234;
          char v168 = "nw_http_connect_process_inbound_data_block_invoke";
          __int16 v169 = 2082;
          uint64_t v170 = (void *)v81;
          __int16 v171 = 2080;
          long long v172 = v82;
          __int16 v173 = 2048;
          *(void *)uint64_t v174 = v83;
          *(_WORD *)&v174[8] = 2082;
          *(void *)&v174[10] = v78;
          _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s %{public}s%sFailed to apply bytes to response message %p, dumping backtrace:%{public}s", buf, 0x34u);
        }
        free(v78);
        goto LABEL_136;
      }
      if (v79)
      {
        uint64_t v89 = *(void *)(a1 + 32);
        uint32_t v90 = (const char *)(v89 + 284);
        BOOL v91 = v89 == 0;
        if (!v89) {
          uint32_t v90 = "";
        }
        uint64_t v92 = *(void *)(v89 + 200);
        if (v91) {
          os_log_type_t v93 = "";
        }
        else {
          os_log_type_t v93 = " ";
        }
        *(_DWORD *)buf = 136446978;
        char v168 = "nw_http_connect_process_inbound_data_block_invoke";
        __int16 v169 = 2082;
        uint64_t v170 = (void *)v90;
        __int16 v171 = 2080;
        long long v172 = v93;
        __int16 v173 = 2048;
        *(void *)uint64_t v174 = v92;
        CFStringRef v77 = "%{public}s %{public}s%sFailed to apply bytes to response message %p, no backtrace";
        goto LABEL_135;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v70 = gLogObj;
      os_log_type_t v71 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v84 = *(void *)(a1 + 32);
        __int16 v85 = (const char *)(v84 + 284);
        BOOL v86 = v84 == 0;
        if (!v84) {
          __int16 v85 = "";
        }
        uint64_t v87 = *(void *)(v84 + 200);
        if (v86) {
          int v88 = "";
        }
        else {
          int v88 = " ";
        }
        *(_DWORD *)buf = 136446978;
        char v168 = "nw_http_connect_process_inbound_data_block_invoke";
        __int16 v169 = 2082;
        uint64_t v170 = (void *)v85;
        __int16 v171 = 2080;
        long long v172 = v88;
        __int16 v173 = 2048;
        *(void *)uint64_t v174 = v87;
        CFStringRef v77 = "%{public}s %{public}s%sFailed to apply bytes to response message %p, backtrace limit exceeded";
        goto LABEL_135;
      }
    }
LABEL_136:
    if (!v69) {
      return 0;
    }
    os_log_type_t v94 = (char *)v69;
LABEL_138:
    free(v94);
    return 0;
  }
  if (CFHTTPMessageIsHeaderComplete(*(CFHTTPMessageRef *)(v8 + 200)))
  {
    CFStringRef v17 = CFHTTPMessageCopyHeaderFieldValue(*(CFHTTPMessageRef *)(v8 + 200), @"Content-Length");
    CFStringRef v18 = v17;
    if (v17) {
      *(_DWORD *)(v8 + 256) = CFStringGetIntValue(v17);
    }
    CFStringRef v19 = CFHTTPMessageCopyHeaderFieldValue(*(CFHTTPMessageRef *)(v8 + 200), @"Connection");
    if (v19)
    {
      v176.length = CFStringGetLength(@"Close");
      v176.location = 0;
      if (CFStringCompareWithOptions(v19, @"Close", v176, 1uLL) == kCFCompareEqualTo) {
        *(_WORD *)(v8 + 368) |= 0x20u;
      }
    }
    CFStringRef v20 = CFHTTPMessageCopyHeaderFieldValue(*(CFHTTPMessageRef *)(v8 + 200), @"Proxy-Connection");
    if (v20)
    {
      v177.length = CFStringGetLength(@"Close");
      v177.location = 0;
      if (CFStringCompareWithOptions(v20, @"Close", v177, 1uLL) == kCFCompareEqualTo) {
        *(_WORD *)(v8 + 368) |= 0x20u;
      }
    }
    if (CFHTTPMessageGetResponseStatusCode(*(CFHTTPMessageRef *)(v8 + 200)) == 200)
    {
      if (*(_DWORD *)(v8 + 256))
      {
        if ((*(_WORD *)(v8 + 368) & 0x80) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v21 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            int v22 = *(_DWORD *)(v8 + 256);
            *(_DWORD *)buf = 136446978;
            char v168 = "nw_http_connect_append_bytes";
            __int16 v169 = 2082;
            uint64_t v170 = (void *)(v8 + 284);
            __int16 v171 = 2080;
            long long v172 = " ";
            __int16 v173 = 1024;
            *(_DWORD *)uint64_t v174 = v22;
            _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sProxy server sent back 200 OK and specified a Content-Length (%d)", buf, 0x26u);
          }
        }
      }
      *(_DWORD *)(v8 + 256) = 0;
    }
    CFDataRef v23 = CFHTTPMessageCopyBody(*(CFHTTPMessageRef *)(v8 + 200));
    CFDataRef v24 = v23;
    if (v23) {
      LODWORD(v23) = CFDataGetLength(v23);
    }
    int v25 = *(_DWORD *)(v8 + 260) + v23;
    int v26 = *(_DWORD *)(v8 + 256);
    BOOL v27 = __OFSUB__(v25, v26);
    int v28 = v25 - v26;
    __int16 v29 = v28 < 0 == v27;
    *(_DWORD *)(v8 + 260) = v25;
    if (v28 < 0 != v27) {
      int v28 = 0;
    }
    *(_WORD *)(v8 + 368) = *(_WORD *)(v8 + 368) & 0xFFFD | (2 * v29);
    *(_DWORD *)(v8 + 264) = v28;
    if (v24) {
      CFRelease(v24);
    }
    if (v20) {
      CFRelease(v20);
    }
    if (v19) {
      CFRelease(v19);
    }
    if (v18) {
      CFRelease(v18);
    }
  }
LABEL_54:
  CFIndex ResponseStatusCode = CFHTTPMessageGetResponseStatusCode(*(CFHTTPMessageRef *)(*(void *)(a1 + 32) + 200));
  CFIndex v32 = ResponseStatusCode;
  uint64_t v33 = *(void *)(a1 + 32);
  if ((*(_WORD *)(v33 + 368) & 2) == 0) {
    goto LABEL_154;
  }
  int v34 = *(_DWORD *)(v33 + 264);
  if (!v34) {
    goto LABEL_154;
  }
  if (ResponseStatusCode != 200)
  {
    int has_internal_diagnostics = os_variant_has_internal_diagnostics();
    uint64_t v43 = *(void *)(a1 + 32);
    if (!has_internal_diagnostics)
    {
      if (v43 && (*(_WORD *)(v43 + 368) & 0x80) != 0) {
        goto LABEL_154;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v99 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_154;
      }
      uint64_t v100 = *(void *)(a1 + 32);
      uint64_t v101 = (const char *)(v100 + 284);
      BOOL v102 = "";
      BOOL v103 = v100 == 0;
      int v104 = *(_DWORD *)(v100 + 264);
      if (v103) {
        uint64_t v101 = "";
      }
      char v168 = "nw_http_connect_process_inbound_data_block_invoke";
      __int16 v169 = 2082;
      *(_DWORD *)buf = 136446978;
      if (!v103) {
        BOOL v102 = " ";
      }
      uint64_t v170 = (void *)v101;
      __int16 v171 = 2080;
      long long v172 = v102;
      __int16 v173 = 1024;
      *(_DWORD *)uint64_t v174 = v104;
      uint64_t v57 = "%{public}s %{public}s%s%d bytes of unexpected response data from server";
      uint64_t v58 = v99;
      uint32_t v59 = 38;
      goto LABEL_153;
    }
    if (!v43 || (*(_WORD *)(v43 + 368) & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v44 = gLogObj;
      BOOL v45 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      uint64_t v46 = *(void *)(a1 + 32);
      if (v45)
      {
        int v47 = *(_DWORD *)(v46 + 264);
        BOOL v48 = v46 == 0;
        if (v46) {
          uint64_t v49 = (const char *)(v46 + 284);
        }
        else {
          uint64_t v49 = "";
        }
        *(_DWORD *)buf = 136446978;
        char v168 = "nw_http_connect_process_inbound_data_block_invoke";
        __int16 v169 = 2082;
        uint64_t v170 = (void *)v49;
        if (v48) {
          char v50 = "";
        }
        else {
          char v50 = " ";
        }
        __int16 v171 = 2080;
        long long v172 = v50;
        __int16 v173 = 1024;
        *(_DWORD *)uint64_t v174 = v47;
        _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%d bytes of unexpected data from server:", buf, 0x26u);
        uint64_t v46 = *(void *)(a1 + 32);
      }
      if (!v46 || (*(_WORD *)(v46 + 368) & 0x80) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v51 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          uint64_t v52 = *(void *)(a1 + 32);
          BOOL v53 = (const char *)(v52 + 284);
          __int16 v54 = "";
          BOOL v55 = v52 == 0;
          int v56 = *(_DWORD *)(v52 + 264);
          char v168 = "nw_http_connect_process_inbound_data_block_invoke";
          if (v55) {
            BOOL v53 = "";
          }
          __int16 v169 = 2082;
          *(_DWORD *)buf = 136447234;
          if (!v55) {
            __int16 v54 = " ";
          }
          uint64_t v170 = (void *)v53;
          __int16 v171 = 2080;
          long long v172 = v54;
          __int16 v173 = 1040;
          *(_DWORD *)uint64_t v174 = v56;
          *(_WORD *)&v174[4] = 2096;
          *(void *)&v174[6] = &v7[v6 - v56];
          uint64_t v57 = "%{public}s %{public}s%s%{network:data}.*P";
          uint64_t v58 = v51;
          uint32_t v59 = 48;
LABEL_153:
          _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_ERROR, v57, buf, v59);
        }
      }
    }
LABEL_154:
    uint64_t v105 = *(void *)(a2 + 32);
    BOOL v106 = *(void **)(a2 + 40);
    if (v105)
    {
      *(void *)(v105 + 40) = v106;
      BOOL v106 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(*(void *)(a1 + 32) + 232) = v106;
    }
    *BOOL v106 = v105;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    nw_frame_finalize(a2);
    uint64_t v107 = *(void *)(a1 + 32);
    if ((*(_WORD *)(v107 + 368) & 2) == 0) {
      return (*(_WORD *)(*(void *)(a1 + 32) + 368) & 2) == 0;
    }
    if (v32 == 200) {
      return (*(_WORD *)(*(void *)(a1 + 32) + 368) & 2) == 0;
    }
    uint64_t v108 = *(void *)(v107 + 224);
    if (!v108) {
      return (*(_WORD *)(*(void *)(a1 + 32) + 368) & 2) == 0;
    }
    if (os_variant_has_internal_diagnostics()
      && *(void *)(v108 + 112)
      && ((*(_WORD *)(v108 + 204) & 0x100) == 0
       || !g_channel_check_validity
       || g_channel_check_validity(v108, *(void *)(v108 + 88))))
    {
      int v109 = *(_DWORD *)(v108 + 52);
      if (v109)
      {
        uint64_t v110 = *(void *)(v108 + 112);
        if (v110)
        {
          uint64_t v111 = *(unsigned int *)(v108 + 56);
          int v112 = v109 - (v111 + *(_DWORD *)(v108 + 60));
          if (v112)
          {
            uint64_t v113 = *(void *)(a1 + 32);
            if (!v113 || (*(_WORD *)(v113 + 368) & 0x80) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v114 = gLogObj;
              BOOL v115 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
              uint64_t v116 = *(void *)(a1 + 32);
              if (v115)
              {
                BOOL v117 = v116 == 0;
                if (v116) {
                  __int16 v118 = (const char *)(v116 + 284);
                }
                else {
                  __int16 v118 = "";
                }
                *(_DWORD *)buf = 136446722;
                char v168 = "nw_http_connect_process_inbound_data_block_invoke";
                int v119 = " ";
                if (v117) {
                  int v119 = "";
                }
                __int16 v169 = 2082;
                uint64_t v170 = (void *)v118;
                __int16 v171 = 2080;
                long long v172 = v119;
                _os_log_impl(&dword_1830D4000, v114, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sUnexpected data from server:", buf, 0x20u);
                uint64_t v116 = *(void *)(a1 + 32);
              }
              if (!v116 || (*(_WORD *)(v116 + 368) & 0x80) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v120 = gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v121 = *(void *)(a1 + 32);
                  char v168 = "nw_http_connect_process_inbound_data_block_invoke";
                  *(_DWORD *)buf = 136447234;
                  BOOL v122 = v121 == 0;
                  if (v121) {
                    CFStringRef v123 = (const char *)(v121 + 284);
                  }
                  else {
                    CFStringRef v123 = "";
                  }
                  __int16 v169 = 2082;
                  uint64_t v170 = (void *)v123;
                  os_log_type_t v124 = " ";
                  __int16 v171 = 2080;
                  if (v122) {
                    os_log_type_t v124 = "";
                  }
                  long long v172 = v124;
                  __int16 v173 = 1040;
                  *(_DWORD *)uint64_t v174 = v112;
                  *(_WORD *)&v174[4] = 2096;
                  *(void *)&v174[6] = v110 + v111;
                  _os_log_impl(&dword_1830D4000, v120, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%{network:data}.*P", buf, 0x30u);
                }
              }
            }
          }
        }
      }
    }
    uint64_t v125 = *(void *)(a1 + 32);
    if (v125)
    {
      if ((*(_WORD *)(v125 + 368) & 0x80) != 0) {
        return (*(_WORD *)(*(void *)(a1 + 32) + 368) & 2) == 0;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v126 = *(void *)(a1 + 32);
    BOOL v127 = v126 == 0;
    if (v126) {
      uint64_t v128 = (const char *)(v126 + 284);
    }
    else {
      uint64_t v128 = "";
    }
    *(_DWORD *)buf = 136446722;
    char v168 = "nw_http_connect_process_inbound_data_block_invoke";
    if (v127) {
      BOOL v129 = "";
    }
    else {
      BOOL v129 = " ";
    }
    __int16 v169 = 2082;
    uint64_t v170 = (void *)v128;
    __int16 v171 = 2080;
    long long v172 = v129;
    long long v130 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v165 = 0;
    if (!__nwlog_fault(v130, &type, &v165)) {
      goto LABEL_232;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v131 = gLogObj;
      os_log_type_t v132 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_232;
      }
      uint64_t v133 = *(void *)(a1 + 32);
      BOOL v134 = v133 == 0;
      if (v133) {
        int v135 = (const char *)(v133 + 284);
      }
      else {
        int v135 = "";
      }
      *(_DWORD *)buf = 136446722;
      if (v134) {
        int v136 = "";
      }
      else {
        int v136 = " ";
      }
      char v168 = "nw_http_connect_process_inbound_data_block_invoke";
      __int16 v169 = 2082;
      uint64_t v170 = (void *)v135;
      __int16 v171 = 2080;
      long long v172 = v136;
      uint64_t v137 = "%{public}s %{public}s%sFrames remaining after response header is complete";
    }
    else if (v165)
    {
      uint64_t v138 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v131 = gLogObj;
      os_log_type_t v132 = type;
      BOOL v139 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v138)
      {
        if (v139)
        {
          uint64_t v140 = *(void *)(a1 + 32);
          BOOL v141 = v140 == 0;
          if (v140) {
            os_log_type_t v142 = (const char *)(v140 + 284);
          }
          else {
            os_log_type_t v142 = "";
          }
          if (v141) {
            uint64_t v143 = "";
          }
          else {
            uint64_t v143 = " ";
          }
          *(_DWORD *)buf = 136446978;
          char v168 = "nw_http_connect_process_inbound_data_block_invoke";
          __int16 v169 = 2082;
          uint64_t v170 = (void *)v142;
          __int16 v171 = 2080;
          long long v172 = v143;
          __int16 v173 = 2082;
          *(void *)uint64_t v174 = v138;
          _os_log_impl(&dword_1830D4000, v131, v132, "%{public}s %{public}s%sFrames remaining after response header is complete, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v138);
        goto LABEL_232;
      }
      if (!v139)
      {
LABEL_232:
        if (v130) {
          free(v130);
        }
        return (*(_WORD *)(*(void *)(a1 + 32) + 368) & 2) == 0;
      }
      uint64_t v148 = *(void *)(a1 + 32);
      BOOL v149 = v148 == 0;
      if (v148) {
        BOOL v150 = (const char *)(v148 + 284);
      }
      else {
        BOOL v150 = "";
      }
      *(_DWORD *)buf = 136446722;
      if (v149) {
        uint64_t v151 = "";
      }
      else {
        uint64_t v151 = " ";
      }
      char v168 = "nw_http_connect_process_inbound_data_block_invoke";
      __int16 v169 = 2082;
      uint64_t v170 = (void *)v150;
      __int16 v171 = 2080;
      long long v172 = v151;
      uint64_t v137 = "%{public}s %{public}s%sFrames remaining after response header is complete, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v131 = gLogObj;
      os_log_type_t v132 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_232;
      }
      uint64_t v144 = *(void *)(a1 + 32);
      BOOL v145 = v144 == 0;
      if (v144) {
        BOOL v146 = (const char *)(v144 + 284);
      }
      else {
        BOOL v146 = "";
      }
      *(_DWORD *)buf = 136446722;
      if (v145) {
        uint64_t v147 = "";
      }
      else {
        uint64_t v147 = " ";
      }
      char v168 = "nw_http_connect_process_inbound_data_block_invoke";
      __int16 v169 = 2082;
      uint64_t v170 = (void *)v146;
      __int16 v171 = 2080;
      long long v172 = v147;
      uint64_t v137 = "%{public}s %{public}s%sFrames remaining after response header is complete, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v131, v132, v137, buf, 0x20u);
    goto LABEL_232;
  }
  nw_frame_claim(a2, v31, v6 - v34, 0);
  return (*(_WORD *)(*(void *)(a1 + 32) + 368) & 2) == 0;
}

void nw_http_connect_send_auth_request(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)int v34 = 0;
    uint64_t v35 = v34;
    uint64_t v36 = 0x2000000000;
    os_log_type_t v37 = 0;
    uint64_t v2 = *(void **)(a1 + 168);
    if (v2) {
      uint64_t v2 = os_retain(v2);
    }
    os_log_type_t v37 = v2;
    if (!*(void *)(a1 + 176) || *(_DWORD *)(a1 + 272))
    {
      Mutable = 0;
      uint64_t v4 = *(const void **)(a1 + 208);
      if (!v4) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      username = (const char *)nw_authentication_credential_get_username(*(void **)(a1 + 176));
      if (!username)
      {
        nw_authentication_credential_get_password(*(void **)(a1 + 176));
        goto LABEL_71;
      }
      CFStringRef v8 = CFStringCreateWithCString(v6, username, 0x8000100u);
      if (v8)
      {
        CFStringRef v9 = v8;
        CFDictionarySetValue(Mutable, @"kCFHTTPAuthenticationUsername", v8);
        CFRelease(v9);
        goto LABEL_51;
      }
      if ((*(_WORD *)(a1 + 368) & 0x80) != 0)
      {
LABEL_51:
        password = (const char *)nw_authentication_credential_get_password(*(void **)(a1 + 176));
        CFStringRef v23 = CFStringCreateWithCString(v6, password, 0x8000100u);
        if (v23)
        {
          CFStringRef v24 = v23;
          CFDictionarySetValue(Mutable, @"kCFHTTPAuthenticationPassword", v23);
          CFRelease(v24);
          goto LABEL_71;
        }
        if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "nw_http_connect_send_auth_request";
          __int16 v41 = 2082;
          uint32_t v42 = (char *)(a1 + 284);
          __int16 v43 = 2080;
          BOOL v44 = " ";
          os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v33 = 0;
          if (!__nwlog_fault(v10, &type, &v33)) {
            goto LABEL_69;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v11 = __nwlog_obj();
            os_log_type_t v12 = type;
            if (!os_log_type_enabled(v11, type)) {
              goto LABEL_69;
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v40 = "nw_http_connect_send_auth_request";
            __int16 v41 = 2082;
            uint32_t v42 = (char *)(a1 + 284);
            __int16 v43 = 2080;
            BOOL v44 = " ";
            unsigned int v13 = "%{public}s %{public}s%sCFStringCreateWithCString failed";
            goto LABEL_68;
          }
          if (!v33)
          {
            os_log_type_t v11 = __nwlog_obj();
            os_log_type_t v12 = type;
            if (!os_log_type_enabled(v11, type)) {
              goto LABEL_69;
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v40 = "nw_http_connect_send_auth_request";
            __int16 v41 = 2082;
            uint32_t v42 = (char *)(a1 + 284);
            __int16 v43 = 2080;
            BOOL v44 = " ";
            unsigned int v13 = "%{public}s %{public}s%sCFStringCreateWithCString failed, backtrace limit exceeded";
            goto LABEL_68;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v11 = __nwlog_obj();
          os_log_type_t v12 = type;
          BOOL v26 = os_log_type_enabled(v11, type);
          if (!backtrace_string)
          {
            if (!v26) {
              goto LABEL_69;
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v40 = "nw_http_connect_send_auth_request";
            __int16 v41 = 2082;
            uint32_t v42 = (char *)(a1 + 284);
            __int16 v43 = 2080;
            BOOL v44 = " ";
            unsigned int v13 = "%{public}s %{public}s%sCFStringCreateWithCString failed, no backtrace";
            goto LABEL_68;
          }
          if (v26)
          {
            *(_DWORD *)buf = 136446978;
            os_log_type_t v40 = "nw_http_connect_send_auth_request";
            __int16 v41 = 2082;
            uint32_t v42 = (char *)(a1 + 284);
            __int16 v43 = 2080;
            BOOL v44 = " ";
            __int16 v45 = 2082;
            uint64_t v46 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s %{public}s%sCFStringCreateWithCString failed, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          if (v10) {
LABEL_70:
          }
            free(v10);
        }
LABEL_71:
        ++*(_DWORD *)(a1 + 272);
        uint64_t v4 = *(const void **)(a1 + 208);
        if (!v4)
        {
LABEL_8:
          if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v5 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446722;
              os_log_type_t v40 = "nw_http_connect_send_auth_request";
              __int16 v41 = 2082;
              uint32_t v42 = (char *)(a1 + 284);
              __int16 v43 = 2080;
              BOOL v44 = " ";
              _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s %{public}s%shttp connect calling out for proxy authorization", buf, 0x20u);
            }
          }
          nw_http_connect_start_async(a1);
          _CFHTTPAuthenticationApplyProxyAuthorizationToRequest();
          if (Mutable) {
            CFRelease(Mutable);
          }
          _Block_object_dispose(v34, 8);
          return;
        }
LABEL_7:
        CFRelease(v4);
        *(void *)(a1 + 208) = 0;
        goto LABEL_8;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446722;
      os_log_type_t v40 = "nw_http_connect_send_auth_request";
      __int16 v41 = 2082;
      uint32_t v42 = (char *)(a1 + 284);
      __int16 v43 = 2080;
      BOOL v44 = " ";
      int v16 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v33 = 0;
      if (__nwlog_fault(v16, &type, &v33))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          CFStringRef v17 = __nwlog_obj();
          os_log_type_t v18 = type;
          if (!os_log_type_enabled(v17, type)) {
            goto LABEL_49;
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "nw_http_connect_send_auth_request";
          __int16 v41 = 2082;
          uint32_t v42 = (char *)(a1 + 284);
          __int16 v43 = 2080;
          BOOL v44 = " ";
          CFStringRef v19 = "%{public}s %{public}s%sCFStringCreateWithCString failed";
          goto LABEL_48;
        }
        if (!v33)
        {
          CFStringRef v17 = __nwlog_obj();
          os_log_type_t v18 = type;
          if (!os_log_type_enabled(v17, type)) {
            goto LABEL_49;
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "nw_http_connect_send_auth_request";
          __int16 v41 = 2082;
          uint32_t v42 = (char *)(a1 + 284);
          __int16 v43 = 2080;
          BOOL v44 = " ";
          CFStringRef v19 = "%{public}s %{public}s%sCFStringCreateWithCString failed, backtrace limit exceeded";
          goto LABEL_48;
        }
        CFStringRef v20 = (char *)__nw_create_backtrace_string();
        CFStringRef v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        BOOL v21 = os_log_type_enabled(v17, type);
        if (v20)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446978;
            os_log_type_t v40 = "nw_http_connect_send_auth_request";
            __int16 v41 = 2082;
            uint32_t v42 = (char *)(a1 + 284);
            __int16 v43 = 2080;
            BOOL v44 = " ";
            __int16 v45 = 2082;
            uint64_t v46 = v20;
            _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s %{public}s%sCFStringCreateWithCString failed, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v20);
          goto LABEL_49;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "nw_http_connect_send_auth_request";
          __int16 v41 = 2082;
          uint32_t v42 = (char *)(a1 + 284);
          __int16 v43 = 2080;
          BOOL v44 = " ";
          CFStringRef v19 = "%{public}s %{public}s%sCFStringCreateWithCString failed, no backtrace";
LABEL_48:
          _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0x20u);
        }
      }
LABEL_49:
      if (v16) {
        free(v16);
      }
      goto LABEL_51;
    }
    if ((*(_WORD *)(a1 + 368) & 0x80) != 0) {
      goto LABEL_71;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    os_log_type_t v40 = "nw_http_connect_send_auth_request";
    __int16 v41 = 2082;
    uint32_t v42 = (char *)(a1 + 284);
    __int16 v43 = 2080;
    BOOL v44 = " ";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v10, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = gLogObj;
        os_log_type_t v12 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_69;
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v40 = "nw_http_connect_send_auth_request";
        __int16 v41 = 2082;
        uint32_t v42 = (char *)(a1 + 284);
        __int16 v43 = 2080;
        BOOL v44 = " ";
        unsigned int v13 = "%{public}s %{public}s%sCFDictionaryCreateMutable failed";
LABEL_68:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0x20u);
        goto LABEL_69;
      }
      if (!v33)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_69;
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v40 = "nw_http_connect_send_auth_request";
        __int16 v41 = 2082;
        uint32_t v42 = (char *)(a1 + 284);
        __int16 v43 = 2080;
        BOOL v44 = " ";
        unsigned int v13 = "%{public}s %{public}s%sCFDictionaryCreateMutable failed, backtrace limit exceeded";
        goto LABEL_68;
      }
      int v14 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v11 = gLogObj;
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v14)
      {
        if (!v15) {
          goto LABEL_69;
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v40 = "nw_http_connect_send_auth_request";
        __int16 v41 = 2082;
        uint32_t v42 = (char *)(a1 + 284);
        __int16 v43 = 2080;
        BOOL v44 = " ";
        unsigned int v13 = "%{public}s %{public}s%sCFDictionaryCreateMutable failed, no backtrace";
        goto LABEL_68;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446978;
        os_log_type_t v40 = "nw_http_connect_send_auth_request";
        __int16 v41 = 2082;
        uint32_t v42 = (char *)(a1 + 284);
        __int16 v43 = 2080;
        BOOL v44 = " ";
        __int16 v45 = 2082;
        uint64_t v46 = v14;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s %{public}s%sCFDictionaryCreateMutable failed, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v14);
    }
LABEL_69:
    if (!v10) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v40 = "nw_http_connect_send_auth_request";
  BOOL v27 = (char *)_os_log_send_and_compose_impl();
  v34[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v27, v34, &type))
  {
    if (v34[0] == OS_LOG_TYPE_FAULT)
    {
      int v28 = __nwlog_obj();
      os_log_type_t v29 = v34[0];
      if (!os_log_type_enabled(v28, v34[0])) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "nw_http_connect_send_auth_request";
      BOOL v30 = "%{public}s called with null http_connect";
      goto LABEL_86;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      int v28 = __nwlog_obj();
      os_log_type_t v29 = v34[0];
      if (!os_log_type_enabled(v28, v34[0])) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "nw_http_connect_send_auth_request";
      BOOL v30 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_86;
    }
    uint64_t v31 = (char *)__nw_create_backtrace_string();
    int v28 = __nwlog_obj();
    os_log_type_t v29 = v34[0];
    BOOL v32 = os_log_type_enabled(v28, v34[0]);
    if (v31)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v40 = "nw_http_connect_send_auth_request";
        __int16 v41 = 2082;
        uint32_t v42 = v31;
        _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null http_connect, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v31);
      goto LABEL_87;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "nw_http_connect_send_auth_request";
      BOOL v30 = "%{public}s called with null http_connect, no backtrace";
LABEL_86:
      _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
    }
  }
LABEL_87:
  if (v27) {
    free(v27);
  }
}

void ___ZL35nw_http_connect_send_auth_challengeP24nw_protocol_http_connect_block_invoke(uint64_t a1, char *object, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6 || (*(_WORD *)(v6 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v7 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      BOOL v9 = v8 == 0;
      if (v8) {
        os_log_type_t v10 = (const char *)(v8 + 284);
      }
      else {
        os_log_type_t v10 = "";
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_auth_challenge_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v10;
      if (v9) {
        os_log_type_t v11 = "";
      }
      else {
        os_log_type_t v11 = " ";
      }
      *(_WORD *)&unsigned char buf[22] = 2080;
      os_log_type_t v18 = v11;
      __int16 v19 = 1024;
      int v20 = a3;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s %{public}s%shttp connect returned from challenge handler, cancel is %d", buf, 0x26u);
    }
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000;
  os_log_type_t v18 = object;
  if (object) {
    os_retain(object);
  }
  os_log_type_t v12 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  v15[2] = ___ZL35nw_http_connect_send_auth_challengeP24nw_protocol_http_connect_block_invoke_83;
  v15[3] = &unk_1E5240840;
  uint64_t v13 = *(void *)(a1 + 40);
  v15[4] = buf;
  v15[5] = v13;
  char v16 = a3;
  nw_queue_context_async_if_needed(v12, v15);
  int v14 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v14)
  {
    os_release(v14);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  _Block_object_dispose(buf, 8);
}

void ___ZL35nw_http_connect_send_auth_challengeP24nw_protocol_http_connect_block_invoke_83(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2 || (*(_WORD *)(v2 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = gLogObj;
    BOOL v4 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
    uint64_t v2 = *(void *)(a1 + 40);
    if (v4)
    {
      int v5 = "";
      uint64_t v6 = (const char *)(v2 + 284);
      if (!v2) {
        uint64_t v6 = "";
      }
      int v18 = 136446722;
      __int16 v19 = "nw_http_connect_send_auth_challenge_block_invoke";
      if (v2) {
        int v5 = " ";
      }
      __int16 v20 = 2082;
      uint64_t v21 = v6;
      __int16 v22 = 2080;
      CFStringRef v23 = v5;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}s%shttp connect returned from challenge handler async", (uint8_t *)&v18, 0x20u);
      uint64_t v2 = *(void *)(a1 + 40);
    }
  }
  if (nw_http_connect_end_async(v2))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      nw_http_connect_fail(*(void *)(a1 + 40), 80);
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 40);
      BOOL v15 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (v15)
      {
        char v16 = *(void **)(v14 + 176);
        if (!v16
          || (os_release(v16),
              *(void *)(*(void *)(a1 + 40) + 176) = 0,
              (BOOL v15 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) != 0))
        {
          BOOL v15 = os_retain(v15);
        }
        *(void *)(*(void *)(a1 + 40) + 176) = v15;
        uint64_t v14 = *(void *)(a1 + 40);
        *(_DWORD *)(v14 + 272) = 0;
      }
      nw_http_connect_send_auth_request(v14);
    }
    CFStringRef v17 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v17)
    {
      os_release(v17);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (!v7 || (*(_WORD *)(v7 + 368) & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        os_log_type_t v10 = "";
        BOOL v11 = v9 == 0;
        if (v9) {
          os_log_type_t v12 = (const char *)(v9 + 284);
        }
        else {
          os_log_type_t v12 = "";
        }
        int v18 = 136446722;
        __int16 v19 = "nw_http_connect_send_auth_challenge_block_invoke";
        if (!v11) {
          os_log_type_t v10 = " ";
        }
        __int16 v20 = 2082;
        uint64_t v21 = v12;
        __int16 v22 = 2080;
        CFStringRef v23 = v10;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sStopping proxy authorization because state has changed to destroyed while getting authentication credentials", (uint8_t *)&v18, 0x20u);
      }
    }
    uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v13)
    {
      os_release(v13);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
    nw_http_connect_destroy(*(void *)(a1 + 40));
  }
}

void ___ZL33nw_http_connect_send_auth_requestP24nw_protocol_http_connect_block_invoke(uint64_t a1, const char *cf, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 40);
  if (!v8 || (*(_WORD *)(v8 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      BOOL v11 = "";
      BOOL v12 = v10 == 0;
      if (v10) {
        uint64_t v13 = (const char *)(v10 + 284);
      }
      else {
        uint64_t v13 = "";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_auth_request_block_invoke";
      if (!v12) {
        BOOL v11 = " ";
      }
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v13;
      *(_WORD *)&unsigned char buf[22] = 2080;
      __int16 v19 = v11;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_INFO, "%{public}s %{public}s%shttp connect returned from proxy authorization", buf, 0x20u);
    }
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000;
  __int16 v19 = cf;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 0x40000000;
  v17[2] = ___ZL33nw_http_connect_send_auth_requestP24nw_protocol_http_connect_block_invoke_36;
  v17[3] = &unk_1E5240758;
  uint64_t v15 = *(void *)(a1 + 40);
  v17[4] = buf;
  void v17[5] = v15;
  v17[6] = a3;
  v17[7] = a4;
  nw_queue_context_async_if_needed(v14, v17);
  char v16 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v16)
  {
    os_release(v16);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  _Block_object_dispose(buf, 8);
}

void ___ZL33nw_http_connect_send_auth_requestP24nw_protocol_http_connect_block_invoke_36(uint64_t a1)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2 || (*(_WORD *)(v2 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = gLogObj;
    BOOL v4 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
    uint64_t v2 = *(void *)(a1 + 40);
    if (v4)
    {
      int v5 = "";
      BOOL v6 = v2 == 0;
      if (v2) {
        uint64_t v7 = (const char *)(v2 + 284);
      }
      else {
        uint64_t v7 = "";
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v58 = "nw_http_connect_send_auth_request_block_invoke";
      if (!v6) {
        int v5 = " ";
      }
      __int16 v59 = 2082;
      BOOL v60 = v7;
      __int16 v61 = 2080;
      uint32_t v62 = (void *)v5;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}s%shttp connect returned from proxy authorization async", buf, 0x20u);
      uint64_t v2 = *(void *)(a1 + 40);
    }
  }
  *(void *)(v2 + 208) = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  BOOL v8 = nw_http_connect_end_async(*(void *)(a1 + 40));
  uint64_t v9 = *(void *)(a1 + 40);
  if (!v8)
  {
    if (!v9 || (*(_WORD *)(v9 + 368) & 0x80) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      CFStringRef v17 = gLogObj;
      BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
      uint64_t v9 = *(void *)(a1 + 40);
      if (v18)
      {
        __int16 v19 = "";
        uint64_t v20 = (const char *)(v9 + 284);
        if (!v9) {
          uint64_t v20 = "";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v58 = "nw_http_connect_send_auth_request_block_invoke";
        if (v9) {
          __int16 v19 = " ";
        }
        __int16 v59 = 2082;
        BOOL v60 = v20;
        __int16 v61 = 2080;
        uint32_t v62 = (void *)v19;
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sStopping proxy authorization because state has changed to destroyed while getting signed request", buf, 0x20u);
        uint64_t v9 = *(void *)(a1 + 40);
      }
    }
    nw_http_connect_destroy(v9);
    return;
  }
  uint64_t v10 = *(void *)(v9 + 168);
  if ((!v10 || *(_DWORD *)(v10 + 124) != 4) && (*(_WORD *)(v9 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v11 = gLogObj;
    BOOL v12 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
    uint64_t v9 = *(void *)(a1 + 40);
    if (v12)
    {
      uint64_t v13 = (const char *)(v9 + 284);
      uint64_t v14 = "";
      if (!v9) {
        uint64_t v13 = "";
      }
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (v9) {
        uint64_t v14 = " ";
      }
      int v16 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 136447234;
      uint64_t v58 = "nw_http_connect_send_auth_request_block_invoke";
      __int16 v59 = 2082;
      BOOL v60 = v13;
      __int16 v61 = 2080;
      uint32_t v62 = (void *)v14;
      __int16 v63 = 2048;
      uint64_t v64 = v15;
      __int16 v65 = 1024;
      int v66 = v16;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s %{public}s%shttp connect proxy authentication received request %p error %d", buf, 0x30u);
      uint64_t v9 = *(void *)(a1 + 40);
    }
  }
  if (*(_DWORD *)(a1 + 56))
  {
    if (!v9) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  uint64_t v21 = *(const void **)(v9 + 208);
  if (!v21)
  {
LABEL_37:
    if ((*(_WORD *)(v9 + 368) & 0x80) != 0)
    {
LABEL_44:
      if (*(void *)(a1 + 48) == 1) {
        int v24 = *(_DWORD *)(a1 + 56);
      }
      else {
        int v24 = 80;
      }
      uint64_t v23 = *(void *)(a1 + 40);
      goto LABEL_48;
    }
LABEL_38:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v25 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)(a1 + 40);
      BOOL v27 = (const char *)(v26 + 284);
      int v28 = "";
      BOOL v29 = v26 == 0;
      int v30 = *(_DWORD *)(a1 + 56);
      if (v29) {
        BOOL v27 = "";
      }
      uint64_t v58 = "nw_http_connect_send_auth_request_block_invoke";
      __int16 v59 = 2082;
      *(_DWORD *)buf = 136446978;
      if (!v29) {
        int v28 = " ";
      }
      BOOL v60 = v27;
      __int16 v61 = 2080;
      uint32_t v62 = (void *)v28;
      __int16 v63 = 1024;
      LODWORD(v64) = v30;
      _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sProxy authentication failed with error %d, cancelling connection", buf, 0x26u);
    }
    goto LABEL_44;
  }
  __int16 v22 = *(_WORD *)(v9 + 368);
  if ((v22 & 0x20) != 0)
  {
    if (nw_http_connect_restart_after_disconnect(v9)) {
      return;
    }
    uint64_t v31 = *(void *)(*(void *)(a1 + 40) + 72);
    if (v31)
    {
      uint64_t v32 = *(void *)(v31 + 24);
      if (v32)
      {
        char v33 = *(void (**)(void))(v32 + 48);
        if (v33)
        {
          v33();
          return;
        }
      }
    }
    __nwlog_obj();
    uint64_t v34 = *(void *)(*(void *)(a1 + 40) + 72);
    uint64_t v35 = "invalid";
    if (v34)
    {
      uint64_t v36 = *(const char **)(v34 + 16);
      if (v36) {
        uint64_t v35 = v36;
      }
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v58 = "nw_http_connect_send_auth_request_block_invoke";
    __int16 v59 = 2082;
    BOOL v60 = v35;
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v37, &type, &v55)) {
      goto LABEL_84;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_84;
      }
      uint64_t v40 = *(void *)(*(void *)(a1 + 40) + 72);
      __int16 v41 = "invalid";
      if (v40)
      {
        uint32_t v42 = *(const char **)(v40 + 16);
        if (v42) {
          __int16 v41 = v42;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v58 = "nw_http_connect_send_auth_request_block_invoke";
      __int16 v59 = 2082;
      BOOL v60 = v41;
      __int16 v43 = "%{public}s protocol %{public}s has invalid disconnected callback";
    }
    else if (v55)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v45 = os_log_type_enabled(v38, type);
      if (backtrace_string)
      {
        if (v45)
        {
          uint64_t v46 = *(void *)(*(void *)(a1 + 40) + 72);
          uint64_t v47 = "invalid";
          if (v46)
          {
            BOOL v48 = *(const char **)(v46 + 16);
            if (v48) {
              uint64_t v47 = v48;
            }
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v58 = "nw_http_connect_send_auth_request_block_invoke";
          __int16 v59 = 2082;
          BOOL v60 = v47;
          __int16 v61 = 2082;
          uint32_t v62 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(backtrace_string);
        goto LABEL_84;
      }
      if (!v45)
      {
LABEL_84:
        if (v37) {
          free(v37);
        }
        return;
      }
      uint64_t v52 = *(void *)(*(void *)(a1 + 40) + 72);
      BOOL v53 = "invalid";
      if (v52)
      {
        __int16 v54 = *(const char **)(v52 + 16);
        if (v54) {
          BOOL v53 = v54;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v58 = "nw_http_connect_send_auth_request_block_invoke";
      __int16 v59 = 2082;
      BOOL v60 = v53;
      __int16 v43 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
    }
    else
    {
      uint64_t v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_84;
      }
      uint64_t v49 = *(void *)(*(void *)(a1 + 40) + 72);
      char v50 = "invalid";
      if (v49)
      {
        uint64_t v51 = *(const char **)(v49 + 16);
        if (v51) {
          char v50 = v51;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v58 = "nw_http_connect_send_auth_request_block_invoke";
      __int16 v59 = 2082;
      BOOL v60 = v50;
      __int16 v43 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v38, v39, v43, buf, 0x16u);
    goto LABEL_84;
  }
  if ((v22 & 0x18) == 0x10 && (nw_http_connect_send_request(v9, v21) & 1) == 0)
  {
    uint64_t v23 = *(void *)(a1 + 40);
    int v24 = 22;
LABEL_48:
    nw_http_connect_fail(v23, v24);
  }
}

uint64_t nw_protocol_http_connect_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    BOOL v11 = __nwlog_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_remove_input_handler";
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_remove_input_handler";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21)) {
      goto LABEL_47;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        uint64_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_remove_input_handler";
        uint64_t v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (!v17) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_remove_input_handler";
        uint64_t v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_46;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_remove_input_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        BOOL v18 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_34:
        _os_log_impl(&dword_1830D4000, v13, v14, v18, buf, 0x16u);
      }
LABEL_35:
      free(backtrace_string);
      goto LABEL_47;
    }
    uint64_t v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_remove_input_handler";
    uint64_t v15 = "%{public}s called with null protocol";
LABEL_46:
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
LABEL_47:
    if (v12) {
      free(v12);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_remove_input_handler";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_remove_input_handler";
      uint64_t v15 = "%{public}s called with null http_connect";
      goto LABEL_46;
    }
    if (!v21)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_remove_input_handler";
      uint64_t v15 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v19 = os_log_type_enabled(v13, type);
    if (backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_remove_input_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        BOOL v18 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (!v19) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_remove_input_handler";
    uint64_t v15 = "%{public}s called with null http_connect, no backtrace";
    goto LABEL_46;
  }
  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  }
  if (a1->default_input_handler != a2) {
    return 0;
  }
  if (gLogDatapath)
  {
    uint64_t v20 = __nwlog_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_35841;
  int v24 = &__block_descriptor_tmp_17_35842;
  int v25 = (char *)(handle + 28);
  char v26 = 0;
  uint64_t v8 = handle[28];
  do
  {
    if (!v8) {
      break;
    }
    uint64_t v9 = *(void *)(v8 + 32);
    char v10 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
    uint64_t v8 = v9;
  }
  while ((v10 & 1) != 0);
  nw_protocol_remove_input_handler((uint64_t)a1->output_handler, (uint64_t)a1);
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  if (a3)
  {
    a1->handle = 0;
    nw_http_connect_destroy((uint64_t)handle);
  }
  return 1;
}

uint64_t nw_protocol_http_connect_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    int v88 = __nwlog_obj();
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
      _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
    uint64_t v89 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v111 = 0;
    if (!__nwlog_fault(v89, type, &v111)) {
      goto LABEL_207;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v111)
      {
        uint32_t v90 = __nwlog_obj();
        os_log_type_t v91 = type[0];
        if (!os_log_type_enabled(v90, type[0])) {
          goto LABEL_207;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
        uint64_t v92 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_206;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint32_t v90 = __nwlog_obj();
      os_log_type_t v91 = type[0];
      BOOL v94 = os_log_type_enabled(v90, type[0]);
      if (!backtrace_string)
      {
        if (!v94) {
          goto LABEL_207;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
        uint64_t v92 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_206;
      }
      if (v94)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        BOOL v95 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_196:
        _os_log_impl(&dword_1830D4000, v90, v91, v95, buf, 0x16u);
      }
LABEL_197:
      free(backtrace_string);
      goto LABEL_207;
    }
    uint32_t v90 = __nwlog_obj();
    os_log_type_t v91 = type[0];
    if (!os_log_type_enabled(v90, type[0])) {
      goto LABEL_207;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
    uint64_t v92 = "%{public}s called with null protocol";
LABEL_206:
    _os_log_impl(&dword_1830D4000, v90, v91, v92, buf, 0xCu);
LABEL_207:
    if (v89) {
      free(v89);
    }
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
    uint64_t v89 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v111 = 0;
    if (!__nwlog_fault(v89, type, &v111)) {
      goto LABEL_207;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint32_t v90 = __nwlog_obj();
      os_log_type_t v91 = type[0];
      if (!os_log_type_enabled(v90, type[0])) {
        goto LABEL_207;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
      uint64_t v92 = "%{public}s called with null http_connect";
      goto LABEL_206;
    }
    if (!v111)
    {
      uint32_t v90 = __nwlog_obj();
      os_log_type_t v91 = type[0];
      if (!os_log_type_enabled(v90, type[0])) {
        goto LABEL_207;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
      uint64_t v92 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_206;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint32_t v90 = __nwlog_obj();
    os_log_type_t v91 = type[0];
    BOOL v96 = os_log_type_enabled(v90, type[0]);
    if (backtrace_string)
    {
      if (v96)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        BOOL v95 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
        goto LABEL_196;
      }
      goto LABEL_197;
    }
    if (!v96) {
      goto LABEL_207;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
    uint64_t v92 = "%{public}s called with null http_connect, no backtrace";
    goto LABEL_206;
  }
  if (a2)
  {
    callbacks = a2->callbacks;
    if (callbacks)
    {
      get_uint64_t parameters = (uint64_t (*)(nw_protocol *))callbacks->get_parameters;
      if (get_parameters)
      {
        uint64_t v7 = (uint64_t *)get_parameters(a2);
        if (v7)
        {
          uint64_t v8 = v7;
          uint64_t v9 = nw_parameters_copy_protocol_options_legacy(v7, a1);
          char v10 = v9;
          if (v9)
          {
            BOOL v11 = v9;
            BOOL v12 = v11;
            handle[284] = 0;
            unint64_t v13 = 84;
            uint64_t v14 = 284;
            while (1)
            {
              int v15 = v11[v14 - 236];
              handle[v14] = v15;
              if (!v15) {
                break;
              }
              --v13;
              ++v14;
              if (v13 <= 1)
              {
                handle[v14] = 0;
                break;
              }
            }
            int v16 = v11[48];

            if (!v16)
            {
              BOOL v17 = v12;
              uint64_t v18 = *((unsigned __int16 *)v17 + 68);

              if (v18) {
                snprintf(handle + 284, 0x54uLL, "C%llu", v18);
              }
            }
          }
          if (!handle[284]) {
            snprintf(handle + 284, 0x54uLL, "http_connect[%llu]", ++nw_protocol_http_connect_add_input_handler(nw_protocol *,nw_protocol *)::http_connect_count);
          }
          if (nw_path_parameters_get_logging_disabled(v8[13])) {
            int v19 = 128;
          }
          else {
            int v19 = 0;
          }
          *((_WORD *)handle + 184) = *((_WORD *)handle + 184) & 0xFF7F | v19;
          uint64_t v20 = a2->callbacks;
          if (v20)
          {
            get_path = (uint64_t (*)(nw_protocol *))v20->get_path;
            if (get_path)
            {
              __int16 v22 = (void *)get_path(a2);
              if (v22)
              {
                *((_WORD *)handle + 184) = *((_WORD *)handle + 184) & 0xFFFE | nw_path_get_nexus_agent_uuid(v22, (_OWORD *)handle + 15);
                uint64_t v23 = (void *)((uint64_t (*)(nw_protocol *))a2->callbacks->get_remote_endpoint)(a2);
                if (v23)
                {
                  int v24 = os_retain(v23);
                  *((void *)handle + 17) = v24;
                  if (v24)
                  {
                    id v25 = v24;
                    int v26 = [v25 type];

                    if ((v26 - 3) <= 0xFFFFFFFD)
                    {
                      if ((*((_WORD *)handle + 184) & 0x80) == 0)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = handle + 284;
                        *(_WORD *)&unsigned char buf[22] = 2080;
                        uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                        uint64_t v27 = (char *)_os_log_send_and_compose_impl();
                        type[0] = OS_LOG_TYPE_ERROR;
                        char v111 = 0;
                        if (!__nwlog_fault(v27, type, &v111)) {
                          goto LABEL_157;
                        }
                        if (type[0] == OS_LOG_TYPE_FAULT)
                        {
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          int v28 = gLogObj;
                          os_log_type_t v29 = type[0];
                          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                            goto LABEL_157;
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&unsigned char buf[22] = 2080;
                          uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          int v30 = "%{public}s %{public}s%sRemote endpoint is wrong type";
                          goto LABEL_156;
                        }
                        if (!v111)
                        {
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          int v28 = gLogObj;
                          os_log_type_t v29 = type[0];
                          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                            goto LABEL_157;
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&unsigned char buf[22] = 2080;
                          uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          int v30 = "%{public}s %{public}s%sRemote endpoint is wrong type, backtrace limit exceeded";
                          goto LABEL_156;
                        }
                        os_log_type_t v37 = (char *)__nw_create_backtrace_string();
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        int v28 = gLogObj;
                        os_log_type_t v29 = type[0];
                        BOOL v52 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
                        if (!v37)
                        {
                          if (!v52) {
                            goto LABEL_157;
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&unsigned char buf[22] = 2080;
                          uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          int v30 = "%{public}s %{public}s%sRemote endpoint is wrong type, no backtrace";
LABEL_156:
                          _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0x20u);
LABEL_157:
                          if (v27) {
                            free(v27);
                          }
                          goto LABEL_159;
                        }
                        if (v52)
                        {
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&unsigned char buf[22] = 2080;
                          uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          LOWORD(v114) = 2082;
                          *(void *)((char *)&v114 + 2) = v37;
                          os_log_type_t v39 = "%{public}s %{public}s%sRemote endpoint is wrong type, dumping backtrace:%{public}s";
                          goto LABEL_89;
                        }
LABEL_90:
                        free(v37);
                        goto LABEL_157;
                      }
LABEL_159:
                      nw_http_connect_destroy((uint64_t)handle);
                      if (v10) {
                        os_release(v10);
                      }
                      return 0;
                    }
                    __int16 v41 = (void *)*((void *)handle + 20);
                    if (v41)
                    {
                      os_release(v41);
                      *((void *)handle + 20) = 0;
                    }
                    uint32_t v42 = (void *)*((void *)handle + 19);
                    if (v42)
                    {
                      os_release(v42);
                      *((void *)handle + 19) = 0;
                    }
                    if (!v10)
                    {
                      BOOL v46 = 0;
                      *((void *)handle + 19) = nw_endpoint_copy_without_proxy_parent(*((void **)handle + 17));
                      goto LABEL_101;
                    }
                    __int16 v43 = v10;
                    BOOL v44 = v43 + 3;
                    id v45 = v43[3];

                    *((void *)handle + 20) = v45;
                    BOOL v46 = v45 != 0;
                    uint64_t v47 = v43;
                    BOOL v48 = v47;
                    if (*v44)
                    {
                      BOOL v49 = *((unsigned char *)v47 + 152) == 0;

                      if (!v49)
                      {
                        char v50 = (void *)*((void *)handle + 20);
                        if (v50) {
                          char v50 = os_retain(v50);
                        }
                        *((void *)handle + 19) = v50;
                        goto LABEL_98;
                      }
                    }
                    else
                    {
                    }
                    char v50 = (void *)*((void *)handle + 19);
LABEL_98:
                    if (!v50) {
                      *((void *)handle + 19) = nw_endpoint_copy_without_proxy_parent(*((void **)handle + 17));
                    }
                    os_release(v48);
LABEL_101:
                    BOOL v53 = (void *)*((void *)handle + 18);
                    if (v53)
                    {
                      os_release(v53);
                      *((void *)handle + 18) = 0;
                    }
                    __int16 v54 = nw_endpoint_copy_proxy_original_endpoint(*((void **)handle + 17));
                    *((void *)handle + 18) = v54;
                    if (!v54)
                    {
                      if (!v46)
                      {
                        if ((*((_WORD *)handle + 184) & 0x80) != 0) {
                          goto LABEL_82;
                        }
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = handle + 284;
                        *(_WORD *)&unsigned char buf[22] = 2080;
                        uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                        char v55 = (const char *)_os_log_send_and_compose_impl();
                        type[0] = OS_LOG_TYPE_ERROR;
                        char v111 = 0;
                        if (!__nwlog_fault(v55, type, &v111)) {
                          goto LABEL_176;
                        }
                        if (type[0] == OS_LOG_TYPE_FAULT)
                        {
                          int v56 = __nwlog_obj();
                          os_log_type_t v57 = type[0];
                          if (!os_log_type_enabled(v56, type[0])) {
                            goto LABEL_176;
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&unsigned char buf[22] = 2080;
                          uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          uint64_t v58 = "%{public}s %{public}s%sNo proxy original endpoint";
                          goto LABEL_175;
                        }
                        if (!v111)
                        {
                          int v56 = __nwlog_obj();
                          os_log_type_t v57 = type[0];
                          if (!os_log_type_enabled(v56, type[0])) {
                            goto LABEL_176;
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&unsigned char buf[22] = 2080;
                          uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          uint64_t v58 = "%{public}s %{public}s%sNo proxy original endpoint, backtrace limit exceeded";
                          goto LABEL_175;
                        }
                        BOOL v86 = (char *)__nw_create_backtrace_string();
                        int v56 = __nwlog_obj();
                        os_log_type_t v57 = type[0];
                        BOOL v87 = os_log_type_enabled(v56, type[0]);
                        if (!v86)
                        {
                          if (!v87) {
                            goto LABEL_176;
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&unsigned char buf[22] = 2080;
                          uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          uint64_t v58 = "%{public}s %{public}s%sNo proxy original endpoint, no backtrace";
                          goto LABEL_175;
                        }
                        if (v87)
                        {
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&unsigned char buf[22] = 2080;
                          uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          LOWORD(v114) = 2082;
                          *(void *)((char *)&v114 + 2) = v86;
                          _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s %{public}s%sNo proxy original endpoint, dumping backtrace:%{public}s", buf, 0x2Au);
                        }
                        free(v86);
                        goto LABEL_176;
                      }
                      __int16 v54 = *((void *)handle + 17);
                      if (v54) {
                        __int16 v54 = os_retain(v54);
                      }
                      *((void *)handle + 18) = v54;
                    }
                    if (nw_endpoint_get_type(v54) - 3 <= 0xFFFFFFFD)
                    {
                      if ((*((_WORD *)handle + 184) & 0x80) != 0) {
                        goto LABEL_82;
                      }
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = handle + 284;
                      *(_WORD *)&unsigned char buf[22] = 2080;
                      uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                      char v55 = (const char *)_os_log_send_and_compose_impl();
                      type[0] = OS_LOG_TYPE_ERROR;
                      char v111 = 0;
                      if (!__nwlog_fault(v55, type, &v111)) {
                        goto LABEL_176;
                      }
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        int v56 = gLogObj;
                        os_log_type_t v57 = type[0];
                        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                          goto LABEL_176;
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = handle + 284;
                        *(_WORD *)&unsigned char buf[22] = 2080;
                        uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                        uint64_t v58 = "%{public}s %{public}s%sProxy original endpoint is wrong type";
                        goto LABEL_175;
                      }
                      if (!v111)
                      {
                        int v56 = __nwlog_obj();
                        os_log_type_t v57 = type[0];
                        if (!os_log_type_enabled(v56, type[0])) {
                          goto LABEL_176;
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = handle + 284;
                        *(_WORD *)&unsigned char buf[22] = 2080;
                        uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                        uint64_t v58 = "%{public}s %{public}s%sProxy original endpoint is wrong type, backtrace limit exceeded";
                        goto LABEL_175;
                      }
                      __int16 v65 = (char *)__nw_create_backtrace_string();
                      int v56 = __nwlog_obj();
                      os_log_type_t v57 = type[0];
                      BOOL v66 = os_log_type_enabled(v56, type[0]);
                      if (v65)
                      {
                        if (v66)
                        {
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&unsigned char buf[22] = 2080;
                          uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          LOWORD(v114) = 2082;
                          *(void *)((char *)&v114 + 2) = v65;
                          _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s %{public}s%sProxy original endpoint is wrong type, dumping backtrace:%{public}s", buf, 0x2Au);
                        }
                        free(v65);
                        if (!v55) {
                          goto LABEL_82;
                        }
LABEL_177:
                        uint64_t v51 = (char *)v55;
                        goto LABEL_81;
                      }
                      if (v66)
                      {
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = handle + 284;
                        *(_WORD *)&unsigned char buf[22] = 2080;
                        uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                        uint64_t v58 = "%{public}s %{public}s%sProxy original endpoint is wrong type, no backtrace";
LABEL_175:
                        _os_log_impl(&dword_1830D4000, v56, v57, v58, buf, 0x20u);
                      }
LABEL_176:
                      if (!v55) {
                        goto LABEL_82;
                      }
                      goto LABEL_177;
                    }
                    nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
                    if (!a2->output_handler) {
                      nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)(handle + 24));
                    }
                    *(_OWORD *)(handle + 24) = *(_OWORD *)a2->flow_id;
                    if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
                      dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_102_35650);
                    }
                    id v59 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
                    BOOL v60 = v8;
                    id v61 = v59;
                    uint32_t v62 = v61;
                    if (v61)
                    {
                      *(void *)buf = 0;
                      *(void *)&buf[8] = buf;
                      *(void *)&buf[16] = 0x3032000000;
                      uint64_t v113 = __Block_byref_object_copy__19403;
                      *(void *)&long long v114 = __Block_byref_object_dispose__19404;
                      *((void *)&v114 + 1) = 0;
                      __int16 v63 = (atomic_uchar *)v60[21];
                      if (v63)
                      {
                        *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
                        uint64_t v106 = 3221225472;
                        uint64_t v107 = __nw_parameters_copy_proxy_options_block_invoke;
                        uint64_t v108 = &unk_1E524A2E8;
                        id v109 = v61;
                        uint64_t v110 = buf;
                        nw_array_apply(v63, (uint64_t)type);

                        uint64_t v64 = *(void **)(*(void *)&buf[8] + 40);
                      }
                      else
                      {
                        uint64_t v64 = 0;
                      }
                      id v67 = v64;
                      _Block_object_dispose(buf, 8);

                      goto LABEL_136;
                    }
                    BOOL v97 = __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_parameters_copy_proxy_options";
                    uint64_t v98 = (char *)_os_log_send_and_compose_impl();

                    type[0] = OS_LOG_TYPE_ERROR;
                    char v111 = 0;
                    if (__nwlog_fault(v98, type, &v111))
                    {
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        uint64_t v99 = __nwlog_obj();
                        os_log_type_t v100 = type[0];
                        if (os_log_type_enabled(v99, type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_parameters_copy_proxy_options";
                          _os_log_impl(&dword_1830D4000, v99, v100, "%{public}s called with null proxy_protocol", buf, 0xCu);
                        }
                      }
                      else if (v111)
                      {
                        uint64_t v101 = (char *)__nw_create_backtrace_string();
                        uint64_t v99 = __nwlog_obj();
                        os_log_type_t v102 = type[0];
                        BOOL v103 = os_log_type_enabled(v99, type[0]);
                        if (v101)
                        {
                          if (v103)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_parameters_copy_proxy_options";
                            *(_WORD *)&unsigned char buf[12] = 2082;
                            *(void *)&buf[14] = v101;
                            _os_log_impl(&dword_1830D4000, v99, v102, "%{public}s called with null proxy_protocol, dumping backtrace:%{public}s", buf, 0x16u);
                          }

                          free(v101);
                          goto LABEL_225;
                        }
                        if (v103)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_parameters_copy_proxy_options";
                          _os_log_impl(&dword_1830D4000, v99, v102, "%{public}s called with null proxy_protocol, no backtrace", buf, 0xCu);
                        }
                      }
                      else
                      {
                        uint64_t v99 = __nwlog_obj();
                        os_log_type_t v104 = type[0];
                        if (os_log_type_enabled(v99, type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_parameters_copy_proxy_options";
                          _os_log_impl(&dword_1830D4000, v99, v104, "%{public}s called with null proxy_protocol, backtrace limit exceeded", buf, 0xCu);
                        }
                      }
                    }
LABEL_225:
                    if (v98) {
                      free(v98);
                    }
                    id v67 = 0;
LABEL_136:

                    *((void *)handle + 23) = v67;
                    BOOL v68 = v60;
                    id v69 = v68[23];

                    if (!v69)
                    {
LABEL_153:
                      CFStringRef v82 = v68;
                      id v83 = *(id *)(v8[13] + 136);

                      *((void *)handle + 28) = 0;
                      uint64_t v84 = handle + 224;
                      *((void *)v84 - 7) = v83;
                      *((_DWORD *)v84 + 14) = 0;
                      *((void *)v84 + 1) = v84;
                      return 1;
                    }
                    __int16 v70 = v69;
                    os_log_type_t v71 = v70;
                    if (v70[38] == 1)
                    {
                      int v72 = v70[39];

                      __int16 v73 = (v72 == 4002) << 8;
                    }
                    else
                    {

                      __int16 v73 = 0;
                    }
                    *((_WORD *)handle + 184) = *((_WORD *)handle + 184) & 0xFEFF | v73;
                    BOOL v74 = v71;
                    id v75 = v74[13];

                    if (v75
                      && (username = (const char *)nw_authentication_credential_get_username(v75),
                          (password = (const char *)nw_authentication_credential_get_password(v75)) != 0))
                    {
                      if (username)
                      {
                        if (*username)
                        {
                          CFStringRef v78 = password;
                          if (*password)
                          {
                            BOOL v79 = (void *)*((void *)handle + 22);
                            if (v79)
                            {
                              os_release(v79);
                              *((void *)handle + 22) = 0;
                            }
                            uint64_t v80 = nw_authentication_credential_create(1);
                            *((void *)handle + 22) = v80;
                            *((_DWORD *)handle + 68) = 0;
                            nw_authentication_credential_set_username(v80, username);
                            nw_authentication_credential_set_password(*((void **)handle + 22), v78);
                          }
                        }
                      }
                    }
                    else
                    {
                      CFIndex v81 = nw_proxy_config_copy_endpoint(v74);
                      nw_endpoint_get_hostname(v81);
                      if (v81) {
                        os_release(v81);
                      }
                      if (!v75) {
                        goto LABEL_152;
                      }
                    }
                    os_release(v75);
LABEL_152:
                    os_release(v74);
                    goto LABEL_153;
                  }
                }
                else
                {
                  *((void *)handle + 17) = 0;
                }
                if ((*((_WORD *)handle + 184) & 0x80) != 0) {
                  goto LABEL_159;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = handle + 284;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                uint64_t v27 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                char v111 = 0;
                if (!__nwlog_fault(v27, type, &v111)) {
                  goto LABEL_157;
                }
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  int v28 = gLogObj;
                  os_log_type_t v29 = type[0];
                  if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                    goto LABEL_157;
                  }
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = handle + 284;
                  *(_WORD *)&unsigned char buf[22] = 2080;
                  uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                  int v30 = "%{public}s %{public}s%sNo remote endpoint";
                  goto LABEL_156;
                }
                if (!v111)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  int v28 = gLogObj;
                  os_log_type_t v29 = type[0];
                  if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                    goto LABEL_157;
                  }
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = handle + 284;
                  *(_WORD *)&unsigned char buf[22] = 2080;
                  uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                  int v30 = "%{public}s %{public}s%sNo remote endpoint, backtrace limit exceeded";
                  goto LABEL_156;
                }
                os_log_type_t v37 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                int v28 = gLogObj;
                os_log_type_t v29 = type[0];
                BOOL v38 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
                if (!v37)
                {
                  if (!v38) {
                    goto LABEL_157;
                  }
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = handle + 284;
                  *(_WORD *)&unsigned char buf[22] = 2080;
                  uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                  int v30 = "%{public}s %{public}s%sNo remote endpoint, no backtrace";
                  goto LABEL_156;
                }
                if (!v38) {
                  goto LABEL_90;
                }
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = handle + 284;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                LOWORD(v114) = 2082;
                *(void *)((char *)&v114 + 2) = v37;
                os_log_type_t v39 = "%{public}s %{public}s%sNo remote endpoint, dumping backtrace:%{public}s";
LABEL_89:
                _os_log_impl(&dword_1830D4000, v28, v29, v39, buf, 0x2Au);
                goto LABEL_90;
              }
              int v19 = *((_WORD *)handle + 184) & 0x80;
            }
          }
          if (v19) {
            goto LABEL_159;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
          uint64_t v27 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          char v111 = 0;
          if (!__nwlog_fault(v27, type, &v111)) {
            goto LABEL_157;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v28 = gLogObj;
            os_log_type_t v29 = type[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
              goto LABEL_157;
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 284;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
            int v30 = "%{public}s %{public}s%sUnable to get path";
            goto LABEL_156;
          }
          if (!v111)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v28 = gLogObj;
            os_log_type_t v29 = type[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
              goto LABEL_157;
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 284;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
            int v30 = "%{public}s %{public}s%sUnable to get path, backtrace limit exceeded";
            goto LABEL_156;
          }
          os_log_type_t v37 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v28 = gLogObj;
          os_log_type_t v29 = type[0];
          BOOL v40 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (!v37)
          {
            if (!v40) {
              goto LABEL_157;
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 284;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
            int v30 = "%{public}s %{public}s%sUnable to get path, no backtrace";
            goto LABEL_156;
          }
          if (!v40) {
            goto LABEL_90;
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
          LOWORD(v114) = 2082;
          *(void *)((char *)&v114 + 2) = v37;
          os_log_type_t v39 = "%{public}s %{public}s%sUnable to get path, dumping backtrace:%{public}s";
          goto LABEL_89;
        }
      }
    }
  }
  if ((*((_WORD *)handle + 184) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = handle + 284;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
    uint64_t v31 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v111 = 0;
    if (!__nwlog_fault(v31, type, &v111)) {
      goto LABEL_79;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v32 = gLogObj;
      os_log_type_t v33 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
      uint64_t v34 = "%{public}s %{public}s%sUnable to get parameters";
    }
    else if (v111)
    {
      uint64_t v35 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v32 = gLogObj;
      os_log_type_t v33 = type[0];
      BOOL v36 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 284;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
          LOWORD(v114) = 2082;
          *(void *)((char *)&v114 + 2) = v35;
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s %{public}s%sUnable to get parameters, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v35);
LABEL_79:
        if (v31)
        {
          uint64_t v51 = (char *)v31;
LABEL_81:
          free(v51);
          goto LABEL_82;
        }
        goto LABEL_82;
      }
      if (!v36) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
      uint64_t v34 = "%{public}s %{public}s%sUnable to get parameters, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v32 = gLogObj;
      os_log_type_t v33 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 284;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
      uint64_t v34 = "%{public}s %{public}s%sUnable to get parameters, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v32, v33, v34, buf, 0x20u);
    goto LABEL_79;
  }
LABEL_82:
  nw_http_connect_destroy((uint64_t)handle);
  return 0;
}

void sub_1839040F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t NWPBParametersReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int)*MEMORY[0x1E4F940E8];
  unint64_t v5 = *(void *)(a2 + v4);
  BOOL v6 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]);
  uint64_t v8 = (int *)MEMORY[0x1E4F940C8];
  if (v5 >= v7) {
    return *(unsigned char *)(a2 + *v8) == 0;
  }
  char v10 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    uint64_t v14 = (unsigned char *)(a2 + *v8);
    if (*v14) {
      return *(unsigned char *)(a2 + *v8) == 0;
    }
    if (v5 >= v7) {
      break;
    }
    char v15 = *(unsigned char *)(*(void *)(a2 + *v10) + v5);
    *(void *)(a2 + (int)v4) = v5 + 1;
    unint64_t v16 = v15 & 0x7F;
    if ((v15 & 0x80) == 0) {
      goto LABEL_40;
    }
    uint64_t v17 = *v3;
    unint64_t v18 = *(void *)(a2 + v17);
    if (v18 == -1 || v18 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v19 = v18 + 1;
    int v20 = *(char *)(*(void *)(a2 + *v10) + v18);
    *(void *)(a2 + v17) = v19;
    v16 |= (unint64_t)(v20 & 0x7F) << 7;
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v21 = *v3;
    unint64_t v22 = *(void *)(a2 + v21);
    if (v22 == -1 || v22 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v23 = v22 + 1;
    int v24 = *(char *)(*(void *)(a2 + *v10) + v22);
    *(void *)(a2 + v21) = v23;
    v16 |= (unint64_t)(v24 & 0x7F) << 14;
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v25 = *v3;
    unint64_t v26 = *(void *)(a2 + v25);
    if (v26 == -1 || v26 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v27 = v26 + 1;
    int v28 = *(char *)(*(void *)(a2 + *v10) + v26);
    *(void *)(a2 + v25) = v27;
    v16 |= (unint64_t)(v28 & 0x7F) << 21;
    if ((v28 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v29 = *v3;
    unint64_t v30 = *(void *)(a2 + v29);
    if (v30 == -1 || v30 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v31 = v30 + 1;
    int v32 = *(char *)(*(void *)(a2 + *v10) + v30);
    *(void *)(a2 + v29) = v31;
    v16 |= (unint64_t)(v32 & 0x7F) << 28;
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v33 = *v3;
    unint64_t v34 = *(void *)(a2 + v33);
    if (v34 == -1 || v34 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v35 = v34 + 1;
    int v36 = *(char *)(*(void *)(a2 + *v10) + v34);
    *(void *)(a2 + v33) = v35;
    if ((v36 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v37 = *v3;
    unint64_t v38 = *(void *)(a2 + v37);
    if (v38 == -1 || v38 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v39 = v38 + 1;
    int v40 = *(char *)(*(void *)(a2 + *v10) + v38);
    *(void *)(a2 + v37) = v39;
    if ((v40 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v41 = *v3;
    unint64_t v42 = *(void *)(a2 + v41);
    if (v42 == -1 || v42 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v43 = v42 + 1;
    int v44 = *(char *)(*(void *)(a2 + *v10) + v42);
    *(void *)(a2 + v41) = v43;
    if ((v44 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v45 = *v3;
    unint64_t v46 = *(void *)(a2 + v45);
    if (v46 == -1 || v46 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v47 = v46 + 1;
    int v48 = *(char *)(*(void *)(a2 + *v10) + v46);
    *(void *)(a2 + v45) = v47;
    if ((v48 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v49 = *v3;
    unint64_t v50 = *(void *)(a2 + v49);
    if (v50 == -1 || v50 >= *(void *)(a2 + *v6))
    {
LABEL_38:
      uint64_t v14 = (unsigned char *)(a2 + *v8);
      goto LABEL_39;
    }
    unint64_t v51 = v50 + 1;
    int v52 = *(char *)(*(void *)(a2 + *v10) + v50);
    *(void *)(a2 + v49) = v51;
    if (v52 < 0)
    {
      unint64_t v16 = 0;
      uint64_t v53 = *v8;
      int v54 = *(unsigned __int8 *)(a2 + v53);
      goto LABEL_42;
    }
LABEL_40:
    uint64_t v53 = *v8;
    int v54 = *(unsigned __int8 *)(a2 + v53);
    if (*(unsigned char *)(a2 + v53)) {
      unint64_t v16 = 0;
    }
LABEL_42:
    int v55 = v16 & 7;
    if (v54) {
      BOOL v56 = 1;
    }
    else {
      BOOL v56 = v55 == 4;
    }
    if (v56) {
      return *(unsigned char *)(a2 + *v8) == 0;
    }
    os_log_type_t v57 = (unsigned char *)(a2 + v53);
    switch((v16 >> 3))
    {
      case 1u:
        uint64_t v11 = PBReaderReadString();
        uint64_t v12 = 56;
        goto LABEL_4;
      case 2u:
        uint64_t v11 = PBReaderReadString();
        uint64_t v12 = 72;
        goto LABEL_4;
      case 3u:
        uint64_t v11 = PBReaderReadString();
        uint64_t v12 = 80;
        goto LABEL_4;
      case 4u:
        uint64_t v11 = PBReaderReadString();
        uint64_t v12 = 144;
        goto LABEL_4;
      case 5u:
        uint64_t v11 = PBReaderReadString();
        uint64_t v12 = 176;
        goto LABEL_4;
      case 6u:
        *(_WORD *)(a1 + 196) |= 4u;
        uint64_t v390 = *v3;
        unint64_t v391 = *(void *)(a2 + v390);
        if (v391 == -1 || v391 >= *(void *)(a2 + *v6))
        {
          unsigned int v394 = 0;
LABEL_662:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_663;
        }
        unint64_t v392 = v391 + 1;
        char v393 = *(unsigned char *)(*(void *)(a2 + *v10) + v391);
        *(void *)(a2 + v390) = v392;
        unsigned int v394 = v393 & 0x7F;
        if ((v393 & 0x80) == 0) {
          goto LABEL_663;
        }
        uint64_t v395 = *v3;
        unint64_t v396 = *(void *)(a2 + v395);
        if (v396 == -1 || v396 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        int v397 = *(char *)(*(void *)(a2 + *v10) + v396);
        *(void *)(a2 + v395) = v396 + 1;
        unsigned int v394 = v394 & 0xFFFFC07F | ((v397 & 0x7F) << 7);
        if ((v397 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        uint64_t v398 = *v3;
        unint64_t v399 = *(void *)(a2 + v398);
        if (v399 == -1 || v399 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        int v400 = *(char *)(*(void *)(a2 + *v10) + v399);
        *(void *)(a2 + v398) = v399 + 1;
        unsigned int v394 = v394 & 0xFFE03FFF | ((v400 & 0x7F) << 14);
        if ((v400 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        uint64_t v401 = *v3;
        unint64_t v402 = *(void *)(a2 + v401);
        if (v402 == -1 || v402 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        int v403 = *(char *)(*(void *)(a2 + *v10) + v402);
        *(void *)(a2 + v401) = v402 + 1;
        unsigned int v394 = v394 & 0xF01FFFFF | ((v403 & 0x7F) << 21);
        if ((v403 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        uint64_t v404 = *v3;
        unint64_t v405 = *(void *)(a2 + v404);
        if (v405 == -1 || v405 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        unint64_t v406 = v405 + 1;
        int v407 = *(char *)(*(void *)(a2 + *v10) + v405);
        *(void *)(a2 + v404) = v406;
        v394 |= v407 << 28;
        if ((v407 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        uint64_t v408 = *v3;
        unint64_t v409 = *(void *)(a2 + v408);
        if (v409 == -1 || v409 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        unint64_t v410 = v409 + 1;
        int v411 = *(char *)(*(void *)(a2 + *v10) + v409);
        *(void *)(a2 + v408) = v410;
        if ((v411 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        uint64_t v412 = *v3;
        unint64_t v413 = *(void *)(a2 + v412);
        if (v413 == -1 || v413 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        unint64_t v414 = v413 + 1;
        int v415 = *(char *)(*(void *)(a2 + *v10) + v413);
        *(void *)(a2 + v412) = v414;
        if ((v415 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        uint64_t v416 = *v3;
        unint64_t v417 = *(void *)(a2 + v416);
        if (v417 == -1 || v417 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        unint64_t v418 = v417 + 1;
        int v419 = *(char *)(*(void *)(a2 + *v10) + v417);
        *(void *)(a2 + v416) = v418;
        if ((v419 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        uint64_t v420 = *v3;
        unint64_t v421 = *(void *)(a2 + v420);
        if (v421 == -1 || v421 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        unint64_t v422 = v421 + 1;
        int v423 = *(char *)(*(void *)(a2 + *v10) + v421);
        *(void *)(a2 + v420) = v422;
        if ((v423 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        uint64_t v424 = *v3;
        unint64_t v425 = *(void *)(a2 + v424);
        if (v425 == -1 || v425 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        unint64_t v426 = v425 + 1;
        int v427 = *(char *)(*(void *)(a2 + *v10) + v425);
        *(void *)(a2 + v424) = v426;
        if (v427 < 0)
        {
          unsigned int v394 = 0;
          goto LABEL_665;
        }
LABEL_663:
        if (*(unsigned char *)(a2 + *v8)) {
          unsigned int v394 = 0;
        }
LABEL_665:
        *(_DWORD *)(a1 + 88) = v394;
        goto LABEL_5;
      case 7u:
        *(_WORD *)(a1 + 196) |= 1u;
        uint64_t v469 = *v3;
        unint64_t v470 = *(void *)(a2 + v469);
        if (v470 == -1 || v470 >= *(void *)(a2 + *v6))
        {
          unsigned int v473 = 0;
LABEL_672:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_673;
        }
        unint64_t v471 = v470 + 1;
        char v472 = *(unsigned char *)(*(void *)(a2 + *v10) + v470);
        *(void *)(a2 + v469) = v471;
        unsigned int v473 = v472 & 0x7F;
        if ((v472 & 0x80) == 0) {
          goto LABEL_673;
        }
        uint64_t v474 = *v3;
        unint64_t v475 = *(void *)(a2 + v474);
        if (v475 == -1 || v475 >= *(void *)(a2 + *v6)) {
          goto LABEL_672;
        }
        int v476 = *(char *)(*(void *)(a2 + *v10) + v475);
        *(void *)(a2 + v474) = v475 + 1;
        unsigned int v473 = v473 & 0xFFFFC07F | ((v476 & 0x7F) << 7);
        if ((v476 & 0x80000000) == 0) {
          goto LABEL_673;
        }
        uint64_t v477 = *v3;
        unint64_t v478 = *(void *)(a2 + v477);
        if (v478 == -1 || v478 >= *(void *)(a2 + *v6)) {
          goto LABEL_672;
        }
        int v479 = *(char *)(*(void *)(a2 + *v10) + v478);
        *(void *)(a2 + v477) = v478 + 1;
        unsigned int v473 = v473 & 0xFFE03FFF | ((v479 & 0x7F) << 14);
        if ((v479 & 0x80000000) == 0) {
          goto LABEL_673;
        }
        uint64_t v480 = *v3;
        unint64_t v481 = *(void *)(a2 + v480);
        if (v481 == -1 || v481 >= *(void *)(a2 + *v6)) {
          goto LABEL_672;
        }
        int v482 = *(char *)(*(void *)(a2 + *v10) + v481);
        *(void *)(a2 + v480) = v481 + 1;
        unsigned int v473 = v473 & 0xF01FFFFF | ((v482 & 0x7F) << 21);
        if ((v482 & 0x80000000) == 0) {
          goto LABEL_673;
        }
        uint64_t v483 = *v3;
        unint64_t v484 = *(void *)(a2 + v483);
        if (v484 == -1 || v484 >= *(void *)(a2 + *v6)) {
          goto LABEL_672;
        }
        unint64_t v485 = v484 + 1;
        int v486 = *(char *)(*(void *)(a2 + *v10) + v484);
        *(void *)(a2 + v483) = v485;
        v473 |= v486 << 28;
        if ((v486 & 0x80000000) == 0) {
          goto LABEL_673;
        }
        uint64_t v487 = *v3;
        unint64_t v488 = *(void *)(a2 + v487);
        if (v488 == -1 || v488 >= *(void *)(a2 + *v6)) {
          goto LABEL_672;
        }
        unint64_t v489 = v488 + 1;
        int v490 = *(char *)(*(void *)(a2 + *v10) + v488);
        *(void *)(a2 + v487) = v489;
        if ((v490 & 0x80000000) == 0) {
          goto LABEL_673;
        }
        uint64_t v491 = *v3;
        unint64_t v492 = *(void *)(a2 + v491);
        if (v492 == -1 || v492 >= *(void *)(a2 + *v6)) {
          goto LABEL_672;
        }
        unint64_t v493 = v492 + 1;
        int v494 = *(char *)(*(void *)(a2 + *v10) + v492);
        *(void *)(a2 + v491) = v493;
        if ((v494 & 0x80000000) == 0) {
          goto LABEL_673;
        }
        uint64_t v495 = *v3;
        unint64_t v496 = *(void *)(a2 + v495);
        if (v496 == -1 || v496 >= *(void *)(a2 + *v6)) {
          goto LABEL_672;
        }
        unint64_t v497 = v496 + 1;
        int v498 = *(char *)(*(void *)(a2 + *v10) + v496);
        *(void *)(a2 + v495) = v497;
        if ((v498 & 0x80000000) == 0) {
          goto LABEL_673;
        }
        uint64_t v499 = *v3;
        unint64_t v500 = *(void *)(a2 + v499);
        if (v500 == -1 || v500 >= *(void *)(a2 + *v6)) {
          goto LABEL_672;
        }
        unint64_t v501 = v500 + 1;
        int v502 = *(char *)(*(void *)(a2 + *v10) + v500);
        *(void *)(a2 + v499) = v501;
        if ((v502 & 0x80000000) == 0) {
          goto LABEL_673;
        }
        uint64_t v503 = *v3;
        unint64_t v504 = *(void *)(a2 + v503);
        if (v504 == -1 || v504 >= *(void *)(a2 + *v6)) {
          goto LABEL_672;
        }
        unint64_t v505 = v504 + 1;
        int v506 = *(char *)(*(void *)(a2 + *v10) + v504);
        *(void *)(a2 + v503) = v505;
        if (v506 < 0)
        {
          unsigned int v473 = 0;
          goto LABEL_675;
        }
LABEL_673:
        if (*(unsigned char *)(a2 + *v8)) {
          unsigned int v473 = 0;
        }
LABEL_675:
        *(_DWORD *)(a1 + 64) = v473;
        goto LABEL_5;
      case 8u:
        *(_WORD *)(a1 + 196) |= 0x20u;
        uint64_t v311 = *v3;
        unint64_t v312 = *(void *)(a2 + v311);
        if (v312 == -1 || v312 >= *(void *)(a2 + *v6))
        {
          unsigned int v315 = 0;
LABEL_652:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_653;
        }
        unint64_t v313 = v312 + 1;
        char v314 = *(unsigned char *)(*(void *)(a2 + *v10) + v312);
        *(void *)(a2 + v311) = v313;
        unsigned int v315 = v314 & 0x7F;
        if ((v314 & 0x80) == 0) {
          goto LABEL_653;
        }
        uint64_t v316 = *v3;
        unint64_t v317 = *(void *)(a2 + v316);
        if (v317 == -1 || v317 >= *(void *)(a2 + *v6)) {
          goto LABEL_652;
        }
        int v318 = *(char *)(*(void *)(a2 + *v10) + v317);
        *(void *)(a2 + v316) = v317 + 1;
        unsigned int v315 = v315 & 0xFFFFC07F | ((v318 & 0x7F) << 7);
        if ((v318 & 0x80000000) == 0) {
          goto LABEL_653;
        }
        uint64_t v319 = *v3;
        unint64_t v320 = *(void *)(a2 + v319);
        if (v320 == -1 || v320 >= *(void *)(a2 + *v6)) {
          goto LABEL_652;
        }
        int v321 = *(char *)(*(void *)(a2 + *v10) + v320);
        *(void *)(a2 + v319) = v320 + 1;
        unsigned int v315 = v315 & 0xFFE03FFF | ((v321 & 0x7F) << 14);
        if ((v321 & 0x80000000) == 0) {
          goto LABEL_653;
        }
        uint64_t v322 = *v3;
        unint64_t v323 = *(void *)(a2 + v322);
        if (v323 == -1 || v323 >= *(void *)(a2 + *v6)) {
          goto LABEL_652;
        }
        int v324 = *(char *)(*(void *)(a2 + *v10) + v323);
        *(void *)(a2 + v322) = v323 + 1;
        unsigned int v315 = v315 & 0xF01FFFFF | ((v324 & 0x7F) << 21);
        if ((v324 & 0x80000000) == 0) {
          goto LABEL_653;
        }
        uint64_t v325 = *v3;
        unint64_t v326 = *(void *)(a2 + v325);
        if (v326 == -1 || v326 >= *(void *)(a2 + *v6)) {
          goto LABEL_652;
        }
        unint64_t v327 = v326 + 1;
        int v328 = *(char *)(*(void *)(a2 + *v10) + v326);
        *(void *)(a2 + v325) = v327;
        v315 |= v328 << 28;
        if ((v328 & 0x80000000) == 0) {
          goto LABEL_653;
        }
        uint64_t v329 = *v3;
        unint64_t v330 = *(void *)(a2 + v329);
        if (v330 == -1 || v330 >= *(void *)(a2 + *v6)) {
          goto LABEL_652;
        }
        unint64_t v331 = v330 + 1;
        int v332 = *(char *)(*(void *)(a2 + *v10) + v330);
        *(void *)(a2 + v329) = v331;
        if ((v332 & 0x80000000) == 0) {
          goto LABEL_653;
        }
        uint64_t v333 = *v3;
        unint64_t v334 = *(void *)(a2 + v333);
        if (v334 == -1 || v334 >= *(void *)(a2 + *v6)) {
          goto LABEL_652;
        }
        unint64_t v335 = v334 + 1;
        int v336 = *(char *)(*(void *)(a2 + *v10) + v334);
        *(void *)(a2 + v333) = v335;
        if ((v336 & 0x80000000) == 0) {
          goto LABEL_653;
        }
        uint64_t v337 = *v3;
        unint64_t v338 = *(void *)(a2 + v337);
        if (v338 == -1 || v338 >= *(void *)(a2 + *v6)) {
          goto LABEL_652;
        }
        unint64_t v339 = v338 + 1;
        int v340 = *(char *)(*(void *)(a2 + *v10) + v338);
        *(void *)(a2 + v337) = v339;
        if ((v340 & 0x80000000) == 0) {
          goto LABEL_653;
        }
        uint64_t v341 = *v3;
        unint64_t v342 = *(void *)(a2 + v341);
        if (v342 == -1 || v342 >= *(void *)(a2 + *v6)) {
          goto LABEL_652;
        }
        unint64_t v343 = v342 + 1;
        int v344 = *(char *)(*(void *)(a2 + *v10) + v342);
        *(void *)(a2 + v341) = v343;
        if ((v344 & 0x80000000) == 0) {
          goto LABEL_653;
        }
        uint64_t v345 = *v3;
        unint64_t v346 = *(void *)(a2 + v345);
        if (v346 == -1 || v346 >= *(void *)(a2 + *v6)) {
          goto LABEL_652;
        }
        unint64_t v347 = v346 + 1;
        int v348 = *(char *)(*(void *)(a2 + *v10) + v346);
        *(void *)(a2 + v345) = v347;
        if (v348 < 0)
        {
          unsigned int v315 = 0;
          goto LABEL_655;
        }
LABEL_653:
        if (*(unsigned char *)(a2 + *v8)) {
          unsigned int v315 = 0;
        }
LABEL_655:
        *(_DWORD *)(a1 + 172) = v315;
        goto LABEL_5;
      case 9u:
        *(_WORD *)(a1 + 196) |= 2u;
        uint64_t v545 = *v3;
        unint64_t v546 = *(void *)(a2 + v545);
        if (v546 == -1 || v546 >= *(void *)(a2 + *v6))
        {
          unsigned int v549 = 0;
LABEL_687:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_688;
        }
        unint64_t v547 = v546 + 1;
        char v548 = *(unsigned char *)(*(void *)(a2 + *v10) + v546);
        *(void *)(a2 + v545) = v547;
        unsigned int v549 = v548 & 0x7F;
        if ((v548 & 0x80) == 0) {
          goto LABEL_688;
        }
        uint64_t v550 = *v3;
        unint64_t v551 = *(void *)(a2 + v550);
        if (v551 == -1 || v551 >= *(void *)(a2 + *v6)) {
          goto LABEL_687;
        }
        int v552 = *(char *)(*(void *)(a2 + *v10) + v551);
        *(void *)(a2 + v550) = v551 + 1;
        unsigned int v549 = v549 & 0xFFFFC07F | ((v552 & 0x7F) << 7);
        if ((v552 & 0x80000000) == 0) {
          goto LABEL_688;
        }
        uint64_t v553 = *v3;
        unint64_t v554 = *(void *)(a2 + v553);
        if (v554 == -1 || v554 >= *(void *)(a2 + *v6)) {
          goto LABEL_687;
        }
        int v555 = *(char *)(*(void *)(a2 + *v10) + v554);
        *(void *)(a2 + v553) = v554 + 1;
        unsigned int v549 = v549 & 0xFFE03FFF | ((v555 & 0x7F) << 14);
        if ((v555 & 0x80000000) == 0) {
          goto LABEL_688;
        }
        uint64_t v556 = *v3;
        unint64_t v557 = *(void *)(a2 + v556);
        if (v557 == -1 || v557 >= *(void *)(a2 + *v6)) {
          goto LABEL_687;
        }
        int v558 = *(char *)(*(void *)(a2 + *v10) + v557);
        *(void *)(a2 + v556) = v557 + 1;
        unsigned int v549 = v549 & 0xF01FFFFF | ((v558 & 0x7F) << 21);
        if ((v558 & 0x80000000) == 0) {
          goto LABEL_688;
        }
        uint64_t v559 = *v3;
        unint64_t v560 = *(void *)(a2 + v559);
        if (v560 == -1 || v560 >= *(void *)(a2 + *v6)) {
          goto LABEL_687;
        }
        unint64_t v561 = v560 + 1;
        int v562 = *(char *)(*(void *)(a2 + *v10) + v560);
        *(void *)(a2 + v559) = v561;
        v549 |= v562 << 28;
        if ((v562 & 0x80000000) == 0) {
          goto LABEL_688;
        }
        uint64_t v563 = *v3;
        unint64_t v564 = *(void *)(a2 + v563);
        if (v564 == -1 || v564 >= *(void *)(a2 + *v6)) {
          goto LABEL_687;
        }
        unint64_t v565 = v564 + 1;
        int v566 = *(char *)(*(void *)(a2 + *v10) + v564);
        *(void *)(a2 + v563) = v565;
        if ((v566 & 0x80000000) == 0) {
          goto LABEL_688;
        }
        uint64_t v567 = *v3;
        unint64_t v568 = *(void *)(a2 + v567);
        if (v568 == -1 || v568 >= *(void *)(a2 + *v6)) {
          goto LABEL_687;
        }
        unint64_t v569 = v568 + 1;
        int v570 = *(char *)(*(void *)(a2 + *v10) + v568);
        *(void *)(a2 + v567) = v569;
        if ((v570 & 0x80000000) == 0) {
          goto LABEL_688;
        }
        uint64_t v571 = *v3;
        unint64_t v572 = *(void *)(a2 + v571);
        if (v572 == -1 || v572 >= *(void *)(a2 + *v6)) {
          goto LABEL_687;
        }
        unint64_t v573 = v572 + 1;
        int v574 = *(char *)(*(void *)(a2 + *v10) + v572);
        *(void *)(a2 + v571) = v573;
        if ((v574 & 0x80000000) == 0) {
          goto LABEL_688;
        }
        uint64_t v575 = *v3;
        unint64_t v576 = *(void *)(a2 + v575);
        if (v576 == -1 || v576 >= *(void *)(a2 + *v6)) {
          goto LABEL_687;
        }
        unint64_t v577 = v576 + 1;
        int v578 = *(char *)(*(void *)(a2 + *v10) + v576);
        *(void *)(a2 + v575) = v577;
        if ((v578 & 0x80000000) == 0) {
          goto LABEL_688;
        }
        uint64_t v579 = *v3;
        unint64_t v580 = *(void *)(a2 + v579);
        if (v580 == -1 || v580 >= *(void *)(a2 + *v6)) {
          goto LABEL_687;
        }
        unint64_t v581 = v580 + 1;
        int v582 = *(char *)(*(void *)(a2 + *v10) + v580);
        *(void *)(a2 + v579) = v581;
        if (v582 < 0)
        {
          unsigned int v549 = 0;
          goto LABEL_690;
        }
LABEL_688:
        if (*(unsigned char *)(a2 + *v8)) {
          unsigned int v549 = 0;
        }
LABEL_690:
        *(_DWORD *)(a1 + 68) = v549;
        goto LABEL_5;
      case 0xAu:
        *(_WORD *)(a1 + 196) |= 0x10u;
        uint64_t v227 = *v3;
        unint64_t v228 = *(void *)(a2 + v227);
        if (v228 == -1 || v228 >= *(void *)(a2 + *v6))
        {
          unsigned int v231 = 0;
LABEL_642:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_643;
        }
        unint64_t v229 = v228 + 1;
        char v230 = *(unsigned char *)(*(void *)(a2 + *v10) + v228);
        *(void *)(a2 + v227) = v229;
        unsigned int v231 = v230 & 0x7F;
        if ((v230 & 0x80) == 0) {
          goto LABEL_643;
        }
        uint64_t v232 = *v3;
        unint64_t v233 = *(void *)(a2 + v232);
        if (v233 == -1 || v233 >= *(void *)(a2 + *v6)) {
          goto LABEL_642;
        }
        int v234 = *(char *)(*(void *)(a2 + *v10) + v233);
        *(void *)(a2 + v232) = v233 + 1;
        unsigned int v231 = v231 & 0xFFFFC07F | ((v234 & 0x7F) << 7);
        if ((v234 & 0x80000000) == 0) {
          goto LABEL_643;
        }
        uint64_t v235 = *v3;
        unint64_t v236 = *(void *)(a2 + v235);
        if (v236 == -1 || v236 >= *(void *)(a2 + *v6)) {
          goto LABEL_642;
        }
        int v237 = *(char *)(*(void *)(a2 + *v10) + v236);
        *(void *)(a2 + v235) = v236 + 1;
        unsigned int v231 = v231 & 0xFFE03FFF | ((v237 & 0x7F) << 14);
        if ((v237 & 0x80000000) == 0) {
          goto LABEL_643;
        }
        uint64_t v238 = *v3;
        unint64_t v239 = *(void *)(a2 + v238);
        if (v239 == -1 || v239 >= *(void *)(a2 + *v6)) {
          goto LABEL_642;
        }
        int v240 = *(char *)(*(void *)(a2 + *v10) + v239);
        *(void *)(a2 + v238) = v239 + 1;
        unsigned int v231 = v231 & 0xF01FFFFF | ((v240 & 0x7F) << 21);
        if ((v240 & 0x80000000) == 0) {
          goto LABEL_643;
        }
        uint64_t v241 = *v3;
        unint64_t v242 = *(void *)(a2 + v241);
        if (v242 == -1 || v242 >= *(void *)(a2 + *v6)) {
          goto LABEL_642;
        }
        unint64_t v243 = v242 + 1;
        int v244 = *(char *)(*(void *)(a2 + *v10) + v242);
        *(void *)(a2 + v241) = v243;
        v231 |= v244 << 28;
        if ((v244 & 0x80000000) == 0) {
          goto LABEL_643;
        }
        uint64_t v245 = *v3;
        unint64_t v246 = *(void *)(a2 + v245);
        if (v246 == -1 || v246 >= *(void *)(a2 + *v6)) {
          goto LABEL_642;
        }
        unint64_t v247 = v246 + 1;
        int v248 = *(char *)(*(void *)(a2 + *v10) + v246);
        *(void *)(a2 + v245) = v247;
        if ((v248 & 0x80000000) == 0) {
          goto LABEL_643;
        }
        uint64_t v249 = *v3;
        unint64_t v250 = *(void *)(a2 + v249);
        if (v250 == -1 || v250 >= *(void *)(a2 + *v6)) {
          goto LABEL_642;
        }
        unint64_t v251 = v250 + 1;
        int v252 = *(char *)(*(void *)(a2 + *v10) + v250);
        *(void *)(a2 + v249) = v251;
        if ((v252 & 0x80000000) == 0) {
          goto LABEL_643;
        }
        uint64_t v253 = *v3;
        unint64_t v254 = *(void *)(a2 + v253);
        if (v254 == -1 || v254 >= *(void *)(a2 + *v6)) {
          goto LABEL_642;
        }
        unint64_t v255 = v254 + 1;
        int v256 = *(char *)(*(void *)(a2 + *v10) + v254);
        *(void *)(a2 + v253) = v255;
        if ((v256 & 0x80000000) == 0) {
          goto LABEL_643;
        }
        uint64_t v257 = *v3;
        unint64_t v258 = *(void *)(a2 + v257);
        if (v258 == -1 || v258 >= *(void *)(a2 + *v6)) {
          goto LABEL_642;
        }
        unint64_t v259 = v258 + 1;
        int v260 = *(char *)(*(void *)(a2 + *v10) + v258);
        *(void *)(a2 + v257) = v259;
        if ((v260 & 0x80000000) == 0) {
          goto LABEL_643;
        }
        uint64_t v261 = *v3;
        unint64_t v262 = *(void *)(a2 + v261);
        if (v262 == -1 || v262 >= *(void *)(a2 + *v6)) {
          goto LABEL_642;
        }
        unint64_t v263 = v262 + 1;
        int v264 = *(char *)(*(void *)(a2 + *v10) + v262);
        *(void *)(a2 + v261) = v263;
        if (v264 < 0)
        {
          unsigned int v231 = 0;
          goto LABEL_645;
        }
LABEL_643:
        if (*(unsigned char *)(a2 + *v8)) {
          unsigned int v231 = 0;
        }
LABEL_645:
        *(_DWORD *)(a1 + 168) = v231;
        goto LABEL_5;
      case 0xBu:
        *(_WORD *)(a1 + 196) |= 0x400u;
        uint64_t v583 = *v3;
        unint64_t v584 = *(void *)(a2 + v583);
        if (v584 == -1 || v584 >= *(void *)(a2 + *v6))
        {
          uint64_t v587 = 0;
LABEL_682:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_683;
        }
        unint64_t v585 = v584 + 1;
        char v586 = *(unsigned char *)(*(void *)(a2 + *v10) + v584);
        *(void *)(a2 + v583) = v585;
        uint64_t v587 = v586 & 0x7F;
        if ((v586 & 0x80) == 0) {
          goto LABEL_683;
        }
        uint64_t v588 = *v3;
        unint64_t v589 = *(void *)(a2 + v588);
        if (v589 == -1 || v589 >= *(void *)(a2 + *v6)) {
          goto LABEL_682;
        }
        unint64_t v590 = v589 + 1;
        int v591 = *(char *)(*(void *)(a2 + *v10) + v589);
        *(void *)(a2 + v588) = v590;
        v587 |= (unint64_t)(v591 & 0x7F) << 7;
        if ((v591 & 0x80000000) == 0) {
          goto LABEL_683;
        }
        uint64_t v592 = *v3;
        unint64_t v593 = *(void *)(a2 + v592);
        if (v593 == -1 || v593 >= *(void *)(a2 + *v6)) {
          goto LABEL_682;
        }
        unint64_t v594 = v593 + 1;
        int v595 = *(char *)(*(void *)(a2 + *v10) + v593);
        *(void *)(a2 + v592) = v594;
        v587 |= (unint64_t)(v595 & 0x7F) << 14;
        if ((v595 & 0x80000000) == 0) {
          goto LABEL_683;
        }
        uint64_t v596 = *v3;
        unint64_t v597 = *(void *)(a2 + v596);
        if (v597 == -1 || v597 >= *(void *)(a2 + *v6)) {
          goto LABEL_682;
        }
        unint64_t v598 = v597 + 1;
        int v599 = *(char *)(*(void *)(a2 + *v10) + v597);
        *(void *)(a2 + v596) = v598;
        v587 |= (unint64_t)(v599 & 0x7F) << 21;
        if ((v599 & 0x80000000) == 0) {
          goto LABEL_683;
        }
        uint64_t v600 = *v3;
        unint64_t v601 = *(void *)(a2 + v600);
        if (v601 == -1 || v601 >= *(void *)(a2 + *v6)) {
          goto LABEL_682;
        }
        unint64_t v602 = v601 + 1;
        int v603 = *(char *)(*(void *)(a2 + *v10) + v601);
        *(void *)(a2 + v600) = v602;
        v587 |= (unint64_t)(v603 & 0x7F) << 28;
        if ((v603 & 0x80000000) == 0) {
          goto LABEL_683;
        }
        uint64_t v604 = *v3;
        unint64_t v605 = *(void *)(a2 + v604);
        if (v605 == -1 || v605 >= *(void *)(a2 + *v6)) {
          goto LABEL_682;
        }
        unint64_t v606 = v605 + 1;
        int v607 = *(char *)(*(void *)(a2 + *v10) + v605);
        *(void *)(a2 + v604) = v606;
        v587 |= (unint64_t)(v607 & 0x7F) << 35;
        if ((v607 & 0x80000000) == 0) {
          goto LABEL_683;
        }
        uint64_t v608 = *v3;
        unint64_t v609 = *(void *)(a2 + v608);
        if (v609 == -1 || v609 >= *(void *)(a2 + *v6)) {
          goto LABEL_682;
        }
        unint64_t v610 = v609 + 1;
        int v611 = *(char *)(*(void *)(a2 + *v10) + v609);
        *(void *)(a2 + v608) = v610;
        v587 |= (unint64_t)(v611 & 0x7F) << 42;
        if ((v611 & 0x80000000) == 0) {
          goto LABEL_683;
        }
        uint64_t v612 = *v3;
        unint64_t v613 = *(void *)(a2 + v612);
        if (v613 == -1 || v613 >= *(void *)(a2 + *v6)) {
          goto LABEL_682;
        }
        unint64_t v614 = v613 + 1;
        int v615 = *(char *)(*(void *)(a2 + *v10) + v613);
        *(void *)(a2 + v612) = v614;
        v587 |= (unint64_t)(v615 & 0x7F) << 49;
        if ((v615 & 0x80000000) == 0) {
          goto LABEL_683;
        }
        uint64_t v616 = *v3;
        unint64_t v617 = *(void *)(a2 + v616);
        if (v617 == -1 || v617 >= *(void *)(a2 + *v6)) {
          goto LABEL_682;
        }
        unint64_t v618 = v617 + 1;
        int v619 = *(char *)(*(void *)(a2 + *v10) + v617);
        *(void *)(a2 + v616) = v618;
        v587 |= (unint64_t)(v619 & 0x7F) << 56;
        if ((v619 & 0x80000000) == 0) {
          goto LABEL_683;
        }
        uint64_t v620 = *v3;
        unint64_t v621 = *(void *)(a2 + v620);
        if (v621 == -1 || v621 >= *(void *)(a2 + *v6)) {
          goto LABEL_682;
        }
        unint64_t v622 = v621 + 1;
        uint64_t v623 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v621);
        *(void *)(a2 + v620) = v622;
        if ((v623 & 0x80) != 0)
        {
          uint64_t v587 = 0;
          goto LABEL_685;
        }
        v587 |= v623 << 63;
LABEL_683:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v587 = 0;
        }
LABEL_685:
        *(unsigned char *)(a1 + 188) = v587 != 0;
        goto LABEL_5;
      case 0xCu:
        *(_WORD *)(a1 + 196) |= 0x40u;
        uint64_t v145 = *v3;
        unint64_t v146 = *(void *)(a2 + v145);
        if (v146 == -1 || v146 >= *(void *)(a2 + *v6))
        {
          uint64_t v149 = 0;
LABEL_632:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_633;
        }
        unint64_t v147 = v146 + 1;
        char v148 = *(unsigned char *)(*(void *)(a2 + *v10) + v146);
        *(void *)(a2 + v145) = v147;
        uint64_t v149 = v148 & 0x7F;
        if ((v148 & 0x80) == 0) {
          goto LABEL_633;
        }
        uint64_t v150 = *v3;
        unint64_t v151 = *(void *)(a2 + v150);
        if (v151 == -1 || v151 >= *(void *)(a2 + *v6)) {
          goto LABEL_632;
        }
        unint64_t v152 = v151 + 1;
        int v153 = *(char *)(*(void *)(a2 + *v10) + v151);
        *(void *)(a2 + v150) = v152;
        v149 |= (unint64_t)(v153 & 0x7F) << 7;
        if ((v153 & 0x80000000) == 0) {
          goto LABEL_633;
        }
        uint64_t v154 = *v3;
        unint64_t v155 = *(void *)(a2 + v154);
        if (v155 == -1 || v155 >= *(void *)(a2 + *v6)) {
          goto LABEL_632;
        }
        unint64_t v156 = v155 + 1;
        int v157 = *(char *)(*(void *)(a2 + *v10) + v155);
        *(void *)(a2 + v154) = v156;
        v149 |= (unint64_t)(v157 & 0x7F) << 14;
        if ((v157 & 0x80000000) == 0) {
          goto LABEL_633;
        }
        uint64_t v158 = *v3;
        unint64_t v159 = *(void *)(a2 + v158);
        if (v159 == -1 || v159 >= *(void *)(a2 + *v6)) {
          goto LABEL_632;
        }
        unint64_t v160 = v159 + 1;
        int v161 = *(char *)(*(void *)(a2 + *v10) + v159);
        *(void *)(a2 + v158) = v160;
        v149 |= (unint64_t)(v161 & 0x7F) << 21;
        if ((v161 & 0x80000000) == 0) {
          goto LABEL_633;
        }
        uint64_t v162 = *v3;
        unint64_t v163 = *(void *)(a2 + v162);
        if (v163 == -1 || v163 >= *(void *)(a2 + *v6)) {
          goto LABEL_632;
        }
        unint64_t v164 = v163 + 1;
        int v165 = *(char *)(*(void *)(a2 + *v10) + v163);
        *(void *)(a2 + v162) = v164;
        v149 |= (unint64_t)(v165 & 0x7F) << 28;
        if ((v165 & 0x80000000) == 0) {
          goto LABEL_633;
        }
        uint64_t v166 = *v3;
        unint64_t v167 = *(void *)(a2 + v166);
        if (v167 == -1 || v167 >= *(void *)(a2 + *v6)) {
          goto LABEL_632;
        }
        unint64_t v168 = v167 + 1;
        int v169 = *(char *)(*(void *)(a2 + *v10) + v167);
        *(void *)(a2 + v166) = v168;
        v149 |= (unint64_t)(v169 & 0x7F) << 35;
        if ((v169 & 0x80000000) == 0) {
          goto LABEL_633;
        }
        uint64_t v170 = *v3;
        unint64_t v171 = *(void *)(a2 + v170);
        if (v171 == -1 || v171 >= *(void *)(a2 + *v6)) {
          goto LABEL_632;
        }
        unint64_t v172 = v171 + 1;
        int v173 = *(char *)(*(void *)(a2 + *v10) + v171);
        *(void *)(a2 + v170) = v172;
        v149 |= (unint64_t)(v173 & 0x7F) << 42;
        if ((v173 & 0x80000000) == 0) {
          goto LABEL_633;
        }
        uint64_t v174 = *v3;
        unint64_t v175 = *(void *)(a2 + v174);
        if (v175 == -1 || v175 >= *(void *)(a2 + *v6)) {
          goto LABEL_632;
        }
        unint64_t v176 = v175 + 1;
        int v177 = *(char *)(*(void *)(a2 + *v10) + v175);
        *(void *)(a2 + v174) = v176;
        v149 |= (unint64_t)(v177 & 0x7F) << 49;
        if ((v177 & 0x80000000) == 0) {
          goto LABEL_633;
        }
        uint64_t v178 = *v3;
        unint64_t v179 = *(void *)(a2 + v178);
        if (v179 == -1 || v179 >= *(void *)(a2 + *v6)) {
          goto LABEL_632;
        }
        unint64_t v180 = v179 + 1;
        int v181 = *(char *)(*(void *)(a2 + *v10) + v179);
        *(void *)(a2 + v178) = v180;
        v149 |= (unint64_t)(v181 & 0x7F) << 56;
        if ((v181 & 0x80000000) == 0) {
          goto LABEL_633;
        }
        uint64_t v182 = *v3;
        unint64_t v183 = *(void *)(a2 + v182);
        if (v183 == -1 || v183 >= *(void *)(a2 + *v6)) {
          goto LABEL_632;
        }
        unint64_t v184 = v183 + 1;
        uint64_t v185 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v183);
        *(void *)(a2 + v182) = v184;
        if ((v185 & 0x80) != 0)
        {
          uint64_t v149 = 0;
          goto LABEL_635;
        }
        v149 |= v185 << 63;
LABEL_633:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v149 = 0;
        }
LABEL_635:
        *(unsigned char *)(a1 + 184) = v149 != 0;
        goto LABEL_5;
      case 0xDu:
        *(_WORD *)(a1 + 196) |= 0x800u;
        uint64_t v186 = *v3;
        unint64_t v187 = *(void *)(a2 + v186);
        if (v187 == -1 || v187 >= *(void *)(a2 + *v6))
        {
          uint64_t v190 = 0;
LABEL_637:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_638;
        }
        unint64_t v188 = v187 + 1;
        char v189 = *(unsigned char *)(*(void *)(a2 + *v10) + v187);
        *(void *)(a2 + v186) = v188;
        uint64_t v190 = v189 & 0x7F;
        if ((v189 & 0x80) == 0) {
          goto LABEL_638;
        }
        uint64_t v191 = *v3;
        unint64_t v192 = *(void *)(a2 + v191);
        if (v192 == -1 || v192 >= *(void *)(a2 + *v6)) {
          goto LABEL_637;
        }
        unint64_t v193 = v192 + 1;
        int v194 = *(char *)(*(void *)(a2 + *v10) + v192);
        *(void *)(a2 + v191) = v193;
        v190 |= (unint64_t)(v194 & 0x7F) << 7;
        if ((v194 & 0x80000000) == 0) {
          goto LABEL_638;
        }
        uint64_t v195 = *v3;
        unint64_t v196 = *(void *)(a2 + v195);
        if (v196 == -1 || v196 >= *(void *)(a2 + *v6)) {
          goto LABEL_637;
        }
        unint64_t v197 = v196 + 1;
        int v198 = *(char *)(*(void *)(a2 + *v10) + v196);
        *(void *)(a2 + v195) = v197;
        v190 |= (unint64_t)(v198 & 0x7F) << 14;
        if ((v198 & 0x80000000) == 0) {
          goto LABEL_638;
        }
        uint64_t v199 = *v3;
        unint64_t v200 = *(void *)(a2 + v199);
        if (v200 == -1 || v200 >= *(void *)(a2 + *v6)) {
          goto LABEL_637;
        }
        unint64_t v201 = v200 + 1;
        int v202 = *(char *)(*(void *)(a2 + *v10) + v200);
        *(void *)(a2 + v199) = v201;
        v190 |= (unint64_t)(v202 & 0x7F) << 21;
        if ((v202 & 0x80000000) == 0) {
          goto LABEL_638;
        }
        uint64_t v203 = *v3;
        unint64_t v204 = *(void *)(a2 + v203);
        if (v204 == -1 || v204 >= *(void *)(a2 + *v6)) {
          goto LABEL_637;
        }
        unint64_t v205 = v204 + 1;
        int v206 = *(char *)(*(void *)(a2 + *v10) + v204);
        *(void *)(a2 + v203) = v205;
        v190 |= (unint64_t)(v206 & 0x7F) << 28;
        if ((v206 & 0x80000000) == 0) {
          goto LABEL_638;
        }
        uint64_t v207 = *v3;
        unint64_t v208 = *(void *)(a2 + v207);
        if (v208 == -1 || v208 >= *(void *)(a2 + *v6)) {
          goto LABEL_637;
        }
        unint64_t v209 = v208 + 1;
        int v210 = *(char *)(*(void *)(a2 + *v10) + v208);
        *(void *)(a2 + v207) = v209;
        v190 |= (unint64_t)(v210 & 0x7F) << 35;
        if ((v210 & 0x80000000) == 0) {
          goto LABEL_638;
        }
        uint64_t v211 = *v3;
        unint64_t v212 = *(void *)(a2 + v211);
        if (v212 == -1 || v212 >= *(void *)(a2 + *v6)) {
          goto LABEL_637;
        }
        unint64_t v213 = v212 + 1;
        int v214 = *(char *)(*(void *)(a2 + *v10) + v212);
        *(void *)(a2 + v211) = v213;
        v190 |= (unint64_t)(v214 & 0x7F) << 42;
        if ((v214 & 0x80000000) == 0) {
          goto LABEL_638;
        }
        uint64_t v215 = *v3;
        unint64_t v216 = *(void *)(a2 + v215);
        if (v216 == -1 || v216 >= *(void *)(a2 + *v6)) {
          goto LABEL_637;
        }
        unint64_t v217 = v216 + 1;
        int v218 = *(char *)(*(void *)(a2 + *v10) + v216);
        *(void *)(a2 + v215) = v217;
        v190 |= (unint64_t)(v218 & 0x7F) << 49;
        if ((v218 & 0x80000000) == 0) {
          goto LABEL_638;
        }
        uint64_t v219 = *v3;
        unint64_t v220 = *(void *)(a2 + v219);
        if (v220 == -1 || v220 >= *(void *)(a2 + *v6)) {
          goto LABEL_637;
        }
        unint64_t v221 = v220 + 1;
        int v222 = *(char *)(*(void *)(a2 + *v10) + v220);
        *(void *)(a2 + v219) = v221;
        v190 |= (unint64_t)(v222 & 0x7F) << 56;
        if ((v222 & 0x80000000) == 0) {
          goto LABEL_638;
        }
        uint64_t v223 = *v3;
        unint64_t v224 = *(void *)(a2 + v223);
        if (v224 == -1 || v224 >= *(void *)(a2 + *v6)) {
          goto LABEL_637;
        }
        unint64_t v225 = v224 + 1;
        uint64_t v226 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v224);
        *(void *)(a2 + v223) = v225;
        if ((v226 & 0x80) != 0)
        {
          uint64_t v190 = 0;
          goto LABEL_640;
        }
        v190 |= v226 << 63;
LABEL_638:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v190 = 0;
        }
LABEL_640:
        *(unsigned char *)(a1 + 189) = v190 != 0;
        goto LABEL_5;
      case 0xEu:
        *(_WORD *)(a1 + 196) |= 0x100u;
        uint64_t v428 = *v3;
        unint64_t v429 = *(void *)(a2 + v428);
        if (v429 == -1 || v429 >= *(void *)(a2 + *v6))
        {
          uint64_t v432 = 0;
LABEL_667:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_668;
        }
        unint64_t v430 = v429 + 1;
        char v431 = *(unsigned char *)(*(void *)(a2 + *v10) + v429);
        *(void *)(a2 + v428) = v430;
        uint64_t v432 = v431 & 0x7F;
        if ((v431 & 0x80) == 0) {
          goto LABEL_668;
        }
        uint64_t v433 = *v3;
        unint64_t v434 = *(void *)(a2 + v433);
        if (v434 == -1 || v434 >= *(void *)(a2 + *v6)) {
          goto LABEL_667;
        }
        unint64_t v435 = v434 + 1;
        int v436 = *(char *)(*(void *)(a2 + *v10) + v434);
        *(void *)(a2 + v433) = v435;
        v432 |= (unint64_t)(v436 & 0x7F) << 7;
        if ((v436 & 0x80000000) == 0) {
          goto LABEL_668;
        }
        uint64_t v437 = *v3;
        unint64_t v438 = *(void *)(a2 + v437);
        if (v438 == -1 || v438 >= *(void *)(a2 + *v6)) {
          goto LABEL_667;
        }
        unint64_t v439 = v438 + 1;
        int v440 = *(char *)(*(void *)(a2 + *v10) + v438);
        *(void *)(a2 + v437) = v439;
        v432 |= (unint64_t)(v440 & 0x7F) << 14;
        if ((v440 & 0x80000000) == 0) {
          goto LABEL_668;
        }
        uint64_t v441 = *v3;
        unint64_t v442 = *(void *)(a2 + v441);
        if (v442 == -1 || v442 >= *(void *)(a2 + *v6)) {
          goto LABEL_667;
        }
        unint64_t v443 = v442 + 1;
        int v444 = *(char *)(*(void *)(a2 + *v10) + v442);
        *(void *)(a2 + v441) = v443;
        v432 |= (unint64_t)(v444 & 0x7F) << 21;
        if ((v444 & 0x80000000) == 0) {
          goto LABEL_668;
        }
        uint64_t v445 = *v3;
        unint64_t v446 = *(void *)(a2 + v445);
        if (v446 == -1 || v446 >= *(void *)(a2 + *v6)) {
          goto LABEL_667;
        }
        unint64_t v447 = v446 + 1;
        int v448 = *(char *)(*(void *)(a2 + *v10) + v446);
        *(void *)(a2 + v445) = v447;
        v432 |= (unint64_t)(v448 & 0x7F) << 28;
        if ((v448 & 0x80000000) == 0) {
          goto LABEL_668;
        }
        uint64_t v449 = *v3;
        unint64_t v450 = *(void *)(a2 + v449);
        if (v450 == -1 || v450 >= *(void *)(a2 + *v6)) {
          goto LABEL_667;
        }
        unint64_t v451 = v450 + 1;
        int v452 = *(char *)(*(void *)(a2 + *v10) + v450);
        *(void *)(a2 + v449) = v451;
        v432 |= (unint64_t)(v452 & 0x7F) << 35;
        if ((v452 & 0x80000000) == 0) {
          goto LABEL_668;
        }
        uint64_t v453 = *v3;
        unint64_t v454 = *(void *)(a2 + v453);
        if (v454 == -1 || v454 >= *(void *)(a2 + *v6)) {
          goto LABEL_667;
        }
        unint64_t v455 = v454 + 1;
        int v456 = *(char *)(*(void *)(a2 + *v10) + v454);
        *(void *)(a2 + v453) = v455;
        v432 |= (unint64_t)(v456 & 0x7F) << 42;
        if ((v456 & 0x80000000) == 0) {
          goto LABEL_668;
        }
        uint64_t v457 = *v3;
        unint64_t v458 = *(void *)(a2 + v457);
        if (v458 == -1 || v458 >= *(void *)(a2 + *v6)) {
          goto LABEL_667;
        }
        unint64_t v459 = v458 + 1;
        int v460 = *(char *)(*(void *)(a2 + *v10) + v458);
        *(void *)(a2 + v457) = v459;
        v432 |= (unint64_t)(v460 & 0x7F) << 49;
        if ((v460 & 0x80000000) == 0) {
          goto LABEL_668;
        }
        uint64_t v461 = *v3;
        unint64_t v462 = *(void *)(a2 + v461);
        if (v462 == -1 || v462 >= *(void *)(a2 + *v6)) {
          goto LABEL_667;
        }
        unint64_t v463 = v462 + 1;
        int v464 = *(char *)(*(void *)(a2 + *v10) + v462);
        *(void *)(a2 + v461) = v463;
        v432 |= (unint64_t)(v464 & 0x7F) << 56;
        if ((v464 & 0x80000000) == 0) {
          goto LABEL_668;
        }
        uint64_t v465 = *v3;
        unint64_t v466 = *(void *)(a2 + v465);
        if (v466 == -1 || v466 >= *(void *)(a2 + *v6)) {
          goto LABEL_667;
        }
        unint64_t v467 = v466 + 1;
        uint64_t v468 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v466);
        *(void *)(a2 + v465) = v467;
        if ((v468 & 0x80) != 0)
        {
          uint64_t v432 = 0;
          goto LABEL_670;
        }
        v432 |= v468 << 63;
LABEL_668:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v432 = 0;
        }
LABEL_670:
        *(unsigned char *)(a1 + 186) = v432 != 0;
        goto LABEL_5;
      case 0xFu:
        *(_WORD *)(a1 + 196) |= 0x2000u;
        uint64_t v104 = *v3;
        unint64_t v105 = *(void *)(a2 + v104);
        if (v105 == -1 || v105 >= *(void *)(a2 + *v6))
        {
          uint64_t v108 = 0;
LABEL_627:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_628;
        }
        unint64_t v106 = v105 + 1;
        char v107 = *(unsigned char *)(*(void *)(a2 + *v10) + v105);
        *(void *)(a2 + v104) = v106;
        uint64_t v108 = v107 & 0x7F;
        if ((v107 & 0x80) == 0) {
          goto LABEL_628;
        }
        uint64_t v109 = *v3;
        unint64_t v110 = *(void *)(a2 + v109);
        if (v110 == -1 || v110 >= *(void *)(a2 + *v6)) {
          goto LABEL_627;
        }
        unint64_t v111 = v110 + 1;
        int v112 = *(char *)(*(void *)(a2 + *v10) + v110);
        *(void *)(a2 + v109) = v111;
        v108 |= (unint64_t)(v112 & 0x7F) << 7;
        if ((v112 & 0x80000000) == 0) {
          goto LABEL_628;
        }
        uint64_t v113 = *v3;
        unint64_t v114 = *(void *)(a2 + v113);
        if (v114 == -1 || v114 >= *(void *)(a2 + *v6)) {
          goto LABEL_627;
        }
        unint64_t v115 = v114 + 1;
        int v116 = *(char *)(*(void *)(a2 + *v10) + v114);
        *(void *)(a2 + v113) = v115;
        v108 |= (unint64_t)(v116 & 0x7F) << 14;
        if ((v116 & 0x80000000) == 0) {
          goto LABEL_628;
        }
        uint64_t v117 = *v3;
        unint64_t v118 = *(void *)(a2 + v117);
        if (v118 == -1 || v118 >= *(void *)(a2 + *v6)) {
          goto LABEL_627;
        }
        unint64_t v119 = v118 + 1;
        int v120 = *(char *)(*(void *)(a2 + *v10) + v118);
        *(void *)(a2 + v117) = v119;
        v108 |= (unint64_t)(v120 & 0x7F) << 21;
        if ((v120 & 0x80000000) == 0) {
          goto LABEL_628;
        }
        uint64_t v121 = *v3;
        unint64_t v122 = *(void *)(a2 + v121);
        if (v122 == -1 || v122 >= *(void *)(a2 + *v6)) {
          goto LABEL_627;
        }
        unint64_t v123 = v122 + 1;
        int v124 = *(char *)(*(void *)(a2 + *v10) + v122);
        *(void *)(a2 + v121) = v123;
        v108 |= (unint64_t)(v124 & 0x7F) << 28;
        if ((v124 & 0x80000000) == 0) {
          goto LABEL_628;
        }
        uint64_t v125 = *v3;
        unint64_t v126 = *(void *)(a2 + v125);
        if (v126 == -1 || v126 >= *(void *)(a2 + *v6)) {
          goto LABEL_627;
        }
        unint64_t v127 = v126 + 1;
        int v128 = *(char *)(*(void *)(a2 + *v10) + v126);
        *(void *)(a2 + v125) = v127;
        v108 |= (unint64_t)(v128 & 0x7F) << 35;
        if ((v128 & 0x80000000) == 0) {
          goto LABEL_628;
        }
        uint64_t v129 = *v3;
        unint64_t v130 = *(void *)(a2 + v129);
        if (v130 == -1 || v130 >= *(void *)(a2 + *v6)) {
          goto LABEL_627;
        }
        unint64_t v131 = v130 + 1;
        int v132 = *(char *)(*(void *)(a2 + *v10) + v130);
        *(void *)(a2 + v129) = v131;
        v108 |= (unint64_t)(v132 & 0x7F) << 42;
        if ((v132 & 0x80000000) == 0) {
          goto LABEL_628;
        }
        uint64_t v133 = *v3;
        unint64_t v134 = *(void *)(a2 + v133);
        if (v134 == -1 || v134 >= *(void *)(a2 + *v6)) {
          goto LABEL_627;
        }
        unint64_t v135 = v134 + 1;
        int v136 = *(char *)(*(void *)(a2 + *v10) + v134);
        *(void *)(a2 + v133) = v135;
        v108 |= (unint64_t)(v136 & 0x7F) << 49;
        if ((v136 & 0x80000000) == 0) {
          goto LABEL_628;
        }
        uint64_t v137 = *v3;
        unint64_t v138 = *(void *)(a2 + v137);
        if (v138 == -1 || v138 >= *(void *)(a2 + *v6)) {
          goto LABEL_627;
        }
        unint64_t v139 = v138 + 1;
        int v140 = *(char *)(*(void *)(a2 + *v10) + v138);
        *(void *)(a2 + v137) = v139;
        v108 |= (unint64_t)(v140 & 0x7F) << 56;
        if ((v140 & 0x80000000) == 0) {
          goto LABEL_628;
        }
        uint64_t v141 = *v3;
        unint64_t v142 = *(void *)(a2 + v141);
        if (v142 == -1 || v142 >= *(void *)(a2 + *v6)) {
          goto LABEL_627;
        }
        unint64_t v143 = v142 + 1;
        uint64_t v144 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v142);
        *(void *)(a2 + v141) = v143;
        if ((v144 & 0x80) != 0)
        {
          uint64_t v108 = 0;
          goto LABEL_630;
        }
        v108 |= v144 << 63;
LABEL_628:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v108 = 0;
        }
LABEL_630:
        *(unsigned char *)(a1 + 191) = v108 != 0;
        goto LABEL_5;
      case 0x10u:
        *(_WORD *)(a1 + 196) |= 0x4000u;
        uint64_t v270 = *v3;
        unint64_t v271 = *(void *)(a2 + v270);
        if (v271 == -1 || v271 >= *(void *)(a2 + *v6))
        {
          uint64_t v274 = 0;
LABEL_647:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_648;
        }
        unint64_t v272 = v271 + 1;
        char v273 = *(unsigned char *)(*(void *)(a2 + *v10) + v271);
        *(void *)(a2 + v270) = v272;
        uint64_t v274 = v273 & 0x7F;
        if ((v273 & 0x80) == 0) {
          goto LABEL_648;
        }
        uint64_t v275 = *v3;
        unint64_t v276 = *(void *)(a2 + v275);
        if (v276 == -1 || v276 >= *(void *)(a2 + *v6)) {
          goto LABEL_647;
        }
        unint64_t v277 = v276 + 1;
        int v278 = *(char *)(*(void *)(a2 + *v10) + v276);
        *(void *)(a2 + v275) = v277;
        v274 |= (unint64_t)(v278 & 0x7F) << 7;
        if ((v278 & 0x80000000) == 0) {
          goto LABEL_648;
        }
        uint64_t v279 = *v3;
        unint64_t v280 = *(void *)(a2 + v279);
        if (v280 == -1 || v280 >= *(void *)(a2 + *v6)) {
          goto LABEL_647;
        }
        unint64_t v281 = v280 + 1;
        int v282 = *(char *)(*(void *)(a2 + *v10) + v280);
        *(void *)(a2 + v279) = v281;
        v274 |= (unint64_t)(v282 & 0x7F) << 14;
        if ((v282 & 0x80000000) == 0) {
          goto LABEL_648;
        }
        uint64_t v283 = *v3;
        unint64_t v284 = *(void *)(a2 + v283);
        if (v284 == -1 || v284 >= *(void *)(a2 + *v6)) {
          goto LABEL_647;
        }
        unint64_t v285 = v284 + 1;
        int v286 = *(char *)(*(void *)(a2 + *v10) + v284);
        *(void *)(a2 + v283) = v285;
        v274 |= (unint64_t)(v286 & 0x7F) << 21;
        if ((v286 & 0x80000000) == 0) {
          goto LABEL_648;
        }
        uint64_t v287 = *v3;
        unint64_t v288 = *(void *)(a2 + v287);
        if (v288 == -1 || v288 >= *(void *)(a2 + *v6)) {
          goto LABEL_647;
        }
        unint64_t v289 = v288 + 1;
        int v290 = *(char *)(*(void *)(a2 + *v10) + v288);
        *(void *)(a2 + v287) = v289;
        v274 |= (unint64_t)(v290 & 0x7F) << 28;
        if ((v290 & 0x80000000) == 0) {
          goto LABEL_648;
        }
        uint64_t v291 = *v3;
        unint64_t v292 = *(void *)(a2 + v291);
        if (v292 == -1 || v292 >= *(void *)(a2 + *v6)) {
          goto LABEL_647;
        }
        unint64_t v293 = v292 + 1;
        int v294 = *(char *)(*(void *)(a2 + *v10) + v292);
        *(void *)(a2 + v291) = v293;
        v274 |= (unint64_t)(v294 & 0x7F) << 35;
        if ((v294 & 0x80000000) == 0) {
          goto LABEL_648;
        }
        uint64_t v295 = *v3;
        unint64_t v296 = *(void *)(a2 + v295);
        if (v296 == -1 || v296 >= *(void *)(a2 + *v6)) {
          goto LABEL_647;
        }
        unint64_t v297 = v296 + 1;
        int v298 = *(char *)(*(void *)(a2 + *v10) + v296);
        *(void *)(a2 + v295) = v297;
        v274 |= (unint64_t)(v298 & 0x7F) << 42;
        if ((v298 & 0x80000000) == 0) {
          goto LABEL_648;
        }
        uint64_t v299 = *v3;
        unint64_t v300 = *(void *)(a2 + v299);
        if (v300 == -1 || v300 >= *(void *)(a2 + *v6)) {
          goto LABEL_647;
        }
        unint64_t v301 = v300 + 1;
        int v302 = *(char *)(*(void *)(a2 + *v10) + v300);
        *(void *)(a2 + v299) = v301;
        v274 |= (unint64_t)(v302 & 0x7F) << 49;
        if ((v302 & 0x80000000) == 0) {
          goto LABEL_648;
        }
        uint64_t v303 = *v3;
        unint64_t v304 = *(void *)(a2 + v303);
        if (v304 == -1 || v304 >= *(void *)(a2 + *v6)) {
          goto LABEL_647;
        }
        unint64_t v305 = v304 + 1;
        int v306 = *(char *)(*(void *)(a2 + *v10) + v304);
        *(void *)(a2 + v303) = v305;
        v274 |= (unint64_t)(v306 & 0x7F) << 56;
        if ((v306 & 0x80000000) == 0) {
          goto LABEL_648;
        }
        uint64_t v307 = *v3;
        unint64_t v308 = *(void *)(a2 + v307);
        if (v308 == -1 || v308 >= *(void *)(a2 + *v6)) {
          goto LABEL_647;
        }
        unint64_t v309 = v308 + 1;
        uint64_t v310 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v308);
        *(void *)(a2 + v307) = v309;
        if ((v310 & 0x80) != 0)
        {
          uint64_t v274 = 0;
          goto LABEL_650;
        }
        v274 |= v310 << 63;
LABEL_648:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v274 = 0;
        }
LABEL_650:
        *(unsigned char *)(a1 + 192) = v274 != 0;
        goto LABEL_5;
      case 0x11u:
        *(_WORD *)(a1 + 196) |= 0x1000u;
        uint64_t v63 = *v3;
        unint64_t v64 = *(void *)(a2 + v63);
        if (v64 == -1 || v64 >= *(void *)(a2 + *v6))
        {
          uint64_t v67 = 0;
LABEL_622:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_623;
        }
        unint64_t v65 = v64 + 1;
        char v66 = *(unsigned char *)(*(void *)(a2 + *v10) + v64);
        *(void *)(a2 + v63) = v65;
        uint64_t v67 = v66 & 0x7F;
        if ((v66 & 0x80) == 0) {
          goto LABEL_623;
        }
        uint64_t v68 = *v3;
        unint64_t v69 = *(void *)(a2 + v68);
        if (v69 == -1 || v69 >= *(void *)(a2 + *v6)) {
          goto LABEL_622;
        }
        unint64_t v70 = v69 + 1;
        int v71 = *(char *)(*(void *)(a2 + *v10) + v69);
        *(void *)(a2 + v68) = v70;
        v67 |= (unint64_t)(v71 & 0x7F) << 7;
        if ((v71 & 0x80000000) == 0) {
          goto LABEL_623;
        }
        uint64_t v72 = *v3;
        unint64_t v73 = *(void *)(a2 + v72);
        if (v73 == -1 || v73 >= *(void *)(a2 + *v6)) {
          goto LABEL_622;
        }
        unint64_t v74 = v73 + 1;
        int v75 = *(char *)(*(void *)(a2 + *v10) + v73);
        *(void *)(a2 + v72) = v74;
        v67 |= (unint64_t)(v75 & 0x7F) << 14;
        if ((v75 & 0x80000000) == 0) {
          goto LABEL_623;
        }
        uint64_t v76 = *v3;
        unint64_t v77 = *(void *)(a2 + v76);
        if (v77 == -1 || v77 >= *(void *)(a2 + *v6)) {
          goto LABEL_622;
        }
        unint64_t v78 = v77 + 1;
        int v79 = *(char *)(*(void *)(a2 + *v10) + v77);
        *(void *)(a2 + v76) = v78;
        v67 |= (unint64_t)(v79 & 0x7F) << 21;
        if ((v79 & 0x80000000) == 0) {
          goto LABEL_623;
        }
        uint64_t v80 = *v3;
        unint64_t v81 = *(void *)(a2 + v80);
        if (v81 == -1 || v81 >= *(void *)(a2 + *v6)) {
          goto LABEL_622;
        }
        unint64_t v82 = v81 + 1;
        int v83 = *(char *)(*(void *)(a2 + *v10) + v81);
        *(void *)(a2 + v80) = v82;
        v67 |= (unint64_t)(v83 & 0x7F) << 28;
        if ((v83 & 0x80000000) == 0) {
          goto LABEL_623;
        }
        uint64_t v84 = *v3;
        unint64_t v85 = *(void *)(a2 + v84);
        if (v85 == -1 || v85 >= *(void *)(a2 + *v6)) {
          goto LABEL_622;
        }
        unint64_t v86 = v85 + 1;
        int v87 = *(char *)(*(void *)(a2 + *v10) + v85);
        *(void *)(a2 + v84) = v86;
        v67 |= (unint64_t)(v87 & 0x7F) << 35;
        if ((v87 & 0x80000000) == 0) {
          goto LABEL_623;
        }
        uint64_t v88 = *v3;
        unint64_t v89 = *(void *)(a2 + v88);
        if (v89 == -1 || v89 >= *(void *)(a2 + *v6)) {
          goto LABEL_622;
        }
        unint64_t v90 = v89 + 1;
        int v91 = *(char *)(*(void *)(a2 + *v10) + v89);
        *(void *)(a2 + v88) = v90;
        v67 |= (unint64_t)(v91 & 0x7F) << 42;
        if ((v91 & 0x80000000) == 0) {
          goto LABEL_623;
        }
        uint64_t v92 = *v3;
        unint64_t v93 = *(void *)(a2 + v92);
        if (v93 == -1 || v93 >= *(void *)(a2 + *v6)) {
          goto LABEL_622;
        }
        unint64_t v94 = v93 + 1;
        int v95 = *(char *)(*(void *)(a2 + *v10) + v93);
        *(void *)(a2 + v92) = v94;
        v67 |= (unint64_t)(v95 & 0x7F) << 49;
        if ((v95 & 0x80000000) == 0) {
          goto LABEL_623;
        }
        uint64_t v96 = *v3;
        unint64_t v97 = *(void *)(a2 + v96);
        if (v97 == -1 || v97 >= *(void *)(a2 + *v6)) {
          goto LABEL_622;
        }
        unint64_t v98 = v97 + 1;
        int v99 = *(char *)(*(void *)(a2 + *v10) + v97);
        *(void *)(a2 + v96) = v98;
        v67 |= (unint64_t)(v99 & 0x7F) << 56;
        if ((v99 & 0x80000000) == 0) {
          goto LABEL_623;
        }
        uint64_t v100 = *v3;
        unint64_t v101 = *(void *)(a2 + v100);
        if (v101 == -1 || v101 >= *(void *)(a2 + *v6)) {
          goto LABEL_622;
        }
        unint64_t v102 = v101 + 1;
        uint64_t v103 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v101);
        *(void *)(a2 + v100) = v102;
        if ((v103 & 0x80) != 0)
        {
          uint64_t v67 = 0;
          goto LABEL_625;
        }
        v67 |= v103 << 63;
LABEL_623:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v67 = 0;
        }
LABEL_625:
        *(unsigned char *)(a1 + 190) = v67 != 0;
        goto LABEL_5;
      case 0x12u:
        *(_WORD *)(a1 + 196) |= 0x200u;
        uint64_t v349 = *v3;
        unint64_t v350 = *(void *)(a2 + v349);
        if (v350 == -1 || v350 >= *(void *)(a2 + *v6))
        {
          uint64_t v353 = 0;
LABEL_657:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_658;
        }
        unint64_t v351 = v350 + 1;
        char v352 = *(unsigned char *)(*(void *)(a2 + *v10) + v350);
        *(void *)(a2 + v349) = v351;
        uint64_t v353 = v352 & 0x7F;
        if ((v352 & 0x80) == 0) {
          goto LABEL_658;
        }
        uint64_t v354 = *v3;
        unint64_t v355 = *(void *)(a2 + v354);
        if (v355 == -1 || v355 >= *(void *)(a2 + *v6)) {
          goto LABEL_657;
        }
        unint64_t v356 = v355 + 1;
        int v357 = *(char *)(*(void *)(a2 + *v10) + v355);
        *(void *)(a2 + v354) = v356;
        v353 |= (unint64_t)(v357 & 0x7F) << 7;
        if ((v357 & 0x80000000) == 0) {
          goto LABEL_658;
        }
        uint64_t v358 = *v3;
        unint64_t v359 = *(void *)(a2 + v358);
        if (v359 == -1 || v359 >= *(void *)(a2 + *v6)) {
          goto LABEL_657;
        }
        unint64_t v360 = v359 + 1;
        int v361 = *(char *)(*(void *)(a2 + *v10) + v359);
        *(void *)(a2 + v358) = v360;
        v353 |= (unint64_t)(v361 & 0x7F) << 14;
        if ((v361 & 0x80000000) == 0) {
          goto LABEL_658;
        }
        uint64_t v362 = *v3;
        unint64_t v363 = *(void *)(a2 + v362);
        if (v363 == -1 || v363 >= *(void *)(a2 + *v6)) {
          goto LABEL_657;
        }
        unint64_t v364 = v363 + 1;
        int v365 = *(char *)(*(void *)(a2 + *v10) + v363);
        *(void *)(a2 + v362) = v364;
        v353 |= (unint64_t)(v365 & 0x7F) << 21;
        if ((v365 & 0x80000000) == 0) {
          goto LABEL_658;
        }
        uint64_t v366 = *v3;
        unint64_t v367 = *(void *)(a2 + v366);
        if (v367 == -1 || v367 >= *(void *)(a2 + *v6)) {
          goto LABEL_657;
        }
        unint64_t v368 = v367 + 1;
        int v369 = *(char *)(*(void *)(a2 + *v10) + v367);
        *(void *)(a2 + v366) = v368;
        v353 |= (unint64_t)(v369 & 0x7F) << 28;
        if ((v369 & 0x80000000) == 0) {
          goto LABEL_658;
        }
        uint64_t v370 = *v3;
        unint64_t v371 = *(void *)(a2 + v370);
        if (v371 == -1 || v371 >= *(void *)(a2 + *v6)) {
          goto LABEL_657;
        }
        unint64_t v372 = v371 + 1;
        int v373 = *(char *)(*(void *)(a2 + *v10) + v371);
        *(void *)(a2 + v370) = v372;
        v353 |= (unint64_t)(v373 & 0x7F) << 35;
        if ((v373 & 0x80000000) == 0) {
          goto LABEL_658;
        }
        uint64_t v374 = *v3;
        unint64_t v375 = *(void *)(a2 + v374);
        if (v375 == -1 || v375 >= *(void *)(a2 + *v6)) {
          goto LABEL_657;
        }
        unint64_t v376 = v375 + 1;
        int v377 = *(char *)(*(void *)(a2 + *v10) + v375);
        *(void *)(a2 + v374) = v376;
        v353 |= (unint64_t)(v377 & 0x7F) << 42;
        if ((v377 & 0x80000000) == 0) {
          goto LABEL_658;
        }
        uint64_t v378 = *v3;
        unint64_t v379 = *(void *)(a2 + v378);
        if (v379 == -1 || v379 >= *(void *)(a2 + *v6)) {
          goto LABEL_657;
        }
        unint64_t v380 = v379 + 1;
        int v381 = *(char *)(*(void *)(a2 + *v10) + v379);
        *(void *)(a2 + v378) = v380;
        v353 |= (unint64_t)(v381 & 0x7F) << 49;
        if ((v381 & 0x80000000) == 0) {
          goto LABEL_658;
        }
        uint64_t v382 = *v3;
        unint64_t v383 = *(void *)(a2 + v382);
        if (v383 == -1 || v383 >= *(void *)(a2 + *v6)) {
          goto LABEL_657;
        }
        unint64_t v384 = v383 + 1;
        int v385 = *(char *)(*(void *)(a2 + *v10) + v383);
        *(void *)(a2 + v382) = v384;
        v353 |= (unint64_t)(v385 & 0x7F) << 56;
        if ((v385 & 0x80000000) == 0) {
          goto LABEL_658;
        }
        uint64_t v386 = *v3;
        unint64_t v387 = *(void *)(a2 + v386);
        if (v387 == -1 || v387 >= *(void *)(a2 + *v6)) {
          goto LABEL_657;
        }
        unint64_t v388 = v387 + 1;
        uint64_t v389 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v387);
        *(void *)(a2 + v386) = v388;
        if ((v389 & 0x80) != 0)
        {
          uint64_t v353 = 0;
          goto LABEL_660;
        }
        v353 |= v389 << 63;
LABEL_658:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v353 = 0;
        }
LABEL_660:
        *(unsigned char *)(a1 + 187) = v353 != 0;
        goto LABEL_5;
      case 0x13u:
        *(_WORD *)(a1 + 196) |= 8u;
        uint64_t v507 = *v3;
        unint64_t v508 = *(void *)(a2 + v507);
        if (v508 == -1 || v508 >= *(void *)(a2 + *v6))
        {
          unsigned int v511 = 0;
LABEL_677:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_678;
        }
        unint64_t v509 = v508 + 1;
        char v510 = *(unsigned char *)(*(void *)(a2 + *v10) + v508);
        *(void *)(a2 + v507) = v509;
        unsigned int v511 = v510 & 0x7F;
        if ((v510 & 0x80) == 0) {
          goto LABEL_678;
        }
        uint64_t v512 = *v3;
        unint64_t v513 = *(void *)(a2 + v512);
        if (v513 == -1 || v513 >= *(void *)(a2 + *v6)) {
          goto LABEL_677;
        }
        int v514 = *(char *)(*(void *)(a2 + *v10) + v513);
        *(void *)(a2 + v512) = v513 + 1;
        unsigned int v511 = v511 & 0xFFFFC07F | ((v514 & 0x7F) << 7);
        if ((v514 & 0x80000000) == 0) {
          goto LABEL_678;
        }
        uint64_t v515 = *v3;
        unint64_t v516 = *(void *)(a2 + v515);
        if (v516 == -1 || v516 >= *(void *)(a2 + *v6)) {
          goto LABEL_677;
        }
        int v517 = *(char *)(*(void *)(a2 + *v10) + v516);
        *(void *)(a2 + v515) = v516 + 1;
        unsigned int v511 = v511 & 0xFFE03FFF | ((v517 & 0x7F) << 14);
        if ((v517 & 0x80000000) == 0) {
          goto LABEL_678;
        }
        uint64_t v518 = *v3;
        unint64_t v519 = *(void *)(a2 + v518);
        if (v519 == -1 || v519 >= *(void *)(a2 + *v6)) {
          goto LABEL_677;
        }
        int v520 = *(char *)(*(void *)(a2 + *v10) + v519);
        *(void *)(a2 + v518) = v519 + 1;
        unsigned int v511 = v511 & 0xF01FFFFF | ((v520 & 0x7F) << 21);
        if ((v520 & 0x80000000) == 0) {
          goto LABEL_678;
        }
        uint64_t v521 = *v3;
        unint64_t v522 = *(void *)(a2 + v521);
        if (v522 == -1 || v522 >= *(void *)(a2 + *v6)) {
          goto LABEL_677;
        }
        unint64_t v523 = v522 + 1;
        int v524 = *(char *)(*(void *)(a2 + *v10) + v522);
        *(void *)(a2 + v521) = v523;
        v511 |= v524 << 28;
        if ((v524 & 0x80000000) == 0) {
          goto LABEL_678;
        }
        uint64_t v525 = *v3;
        unint64_t v526 = *(void *)(a2 + v525);
        if (v526 == -1 || v526 >= *(void *)(a2 + *v6)) {
          goto LABEL_677;
        }
        unint64_t v527 = v526 + 1;
        int v528 = *(char *)(*(void *)(a2 + *v10) + v526);
        *(void *)(a2 + v525) = v527;
        if ((v528 & 0x80000000) == 0) {
          goto LABEL_678;
        }
        uint64_t v529 = *v3;
        unint64_t v530 = *(void *)(a2 + v529);
        if (v530 == -1 || v530 >= *(void *)(a2 + *v6)) {
          goto LABEL_677;
        }
        unint64_t v531 = v530 + 1;
        int v532 = *(char *)(*(void *)(a2 + *v10) + v530);
        *(void *)(a2 + v529) = v531;
        if ((v532 & 0x80000000) == 0) {
          goto LABEL_678;
        }
        uint64_t v533 = *v3;
        unint64_t v534 = *(void *)(a2 + v533);
        if (v534 == -1 || v534 >= *(void *)(a2 + *v6)) {
          goto LABEL_677;
        }
        unint64_t v535 = v534 + 1;
        int v536 = *(char *)(*(void *)(a2 + *v10) + v534);
        *(void *)(a2 + v533) = v535;
        if ((v536 & 0x80000000) == 0) {
          goto LABEL_678;
        }
        uint64_t v537 = *v3;
        unint64_t v538 = *(void *)(a2 + v537);
        if (v538 == -1 || v538 >= *(void *)(a2 + *v6)) {
          goto LABEL_677;
        }
        unint64_t v539 = v538 + 1;
        int v540 = *(char *)(*(void *)(a2 + *v10) + v538);
        *(void *)(a2 + v537) = v539;
        if ((v540 & 0x80000000) == 0) {
          goto LABEL_678;
        }
        uint64_t v541 = *v3;
        unint64_t v542 = *(void *)(a2 + v541);
        if (v542 == -1 || v542 >= *(void *)(a2 + *v6)) {
          goto LABEL_677;
        }
        unint64_t v543 = v542 + 1;
        int v544 = *(char *)(*(void *)(a2 + *v10) + v542);
        *(void *)(a2 + v541) = v543;
        if (v544 < 0)
        {
          unsigned int v511 = 0;
          goto LABEL_680;
        }
LABEL_678:
        if (*(unsigned char *)(a2 + *v8)) {
          unsigned int v511 = 0;
        }
LABEL_680:
        *(_DWORD *)(a1 + 112) = v511;
        goto LABEL_5;
      case 0x14u:
        *(_WORD *)(a1 + 196) |= 0x80u;
        uint64_t v661 = *v3;
        unint64_t v662 = *(void *)(a2 + v661);
        if (v662 == -1 || v662 >= *(void *)(a2 + *v6))
        {
          uint64_t v665 = 0;
LABEL_692:
          *(unsigned char *)(a2 + *v8) = 1;
          goto LABEL_693;
        }
        unint64_t v663 = v662 + 1;
        char v664 = *(unsigned char *)(*(void *)(a2 + *v10) + v662);
        *(void *)(a2 + v661) = v663;
        uint64_t v665 = v664 & 0x7F;
        if ((v664 & 0x80) == 0) {
          goto LABEL_693;
        }
        uint64_t v666 = *v3;
        unint64_t v667 = *(void *)(a2 + v666);
        if (v667 == -1 || v667 >= *(void *)(a2 + *v6)) {
          goto LABEL_692;
        }
        unint64_t v668 = v667 + 1;
        int v669 = *(char *)(*(void *)(a2 + *v10) + v667);
        *(void *)(a2 + v666) = v668;
        v665 |= (unint64_t)(v669 & 0x7F) << 7;
        if ((v669 & 0x80000000) == 0) {
          goto LABEL_693;
        }
        uint64_t v670 = *v3;
        unint64_t v671 = *(void *)(a2 + v670);
        if (v671 == -1 || v671 >= *(void *)(a2 + *v6)) {
          goto LABEL_692;
        }
        unint64_t v672 = v671 + 1;
        int v673 = *(char *)(*(void *)(a2 + *v10) + v671);
        *(void *)(a2 + v670) = v672;
        v665 |= (unint64_t)(v673 & 0x7F) << 14;
        if ((v673 & 0x80000000) == 0) {
          goto LABEL_693;
        }
        uint64_t v674 = *v3;
        unint64_t v675 = *(void *)(a2 + v674);
        if (v675 == -1 || v675 >= *(void *)(a2 + *v6)) {
          goto LABEL_692;
        }
        unint64_t v676 = v675 + 1;
        int v677 = *(char *)(*(void *)(a2 + *v10) + v675);
        *(void *)(a2 + v674) = v676;
        v665 |= (unint64_t)(v677 & 0x7F) << 21;
        if ((v677 & 0x80000000) == 0) {
          goto LABEL_693;
        }
        uint64_t v678 = *v3;
        unint64_t v679 = *(void *)(a2 + v678);
        if (v679 == -1 || v679 >= *(void *)(a2 + *v6)) {
          goto LABEL_692;
        }
        unint64_t v680 = v679 + 1;
        int v681 = *(char *)(*(void *)(a2 + *v10) + v679);
        *(void *)(a2 + v678) = v680;
        v665 |= (unint64_t)(v681 & 0x7F) << 28;
        if ((v681 & 0x80000000) == 0) {
          goto LABEL_693;
        }
        uint64_t v682 = *v3;
        unint64_t v683 = *(void *)(a2 + v682);
        if (v683 == -1 || v683 >= *(void *)(a2 + *v6)) {
          goto LABEL_692;
        }
        unint64_t v684 = v683 + 1;
        int v685 = *(char *)(*(void *)(a2 + *v10) + v683);
        *(void *)(a2 + v682) = v684;
        v665 |= (unint64_t)(v685 & 0x7F) << 35;
        if ((v685 & 0x80000000) == 0) {
          goto LABEL_693;
        }
        uint64_t v686 = *v3;
        unint64_t v687 = *(void *)(a2 + v686);
        if (v687 == -1 || v687 >= *(void *)(a2 + *v6)) {
          goto LABEL_692;
        }
        unint64_t v688 = v687 + 1;
        int v689 = *(char *)(*(void *)(a2 + *v10) + v687);
        *(void *)(a2 + v686) = v688;
        v665 |= (unint64_t)(v689 & 0x7F) << 42;
        if ((v689 & 0x80000000) == 0) {
          goto LABEL_693;
        }
        uint64_t v690 = *v3;
        unint64_t v691 = *(void *)(a2 + v690);
        if (v691 == -1 || v691 >= *(void *)(a2 + *v6)) {
          goto LABEL_692;
        }
        unint64_t v692 = v691 + 1;
        int v693 = *(char *)(*(void *)(a2 + *v10) + v691);
        *(void *)(a2 + v690) = v692;
        v665 |= (unint64_t)(v693 & 0x7F) << 49;
        if ((v693 & 0x80000000) == 0) {
          goto LABEL_693;
        }
        uint64_t v694 = *v3;
        unint64_t v695 = *(void *)(a2 + v694);
        if (v695 == -1 || v695 >= *(void *)(a2 + *v6)) {
          goto LABEL_692;
        }
        unint64_t v696 = v695 + 1;
        int v697 = *(char *)(*(void *)(a2 + *v10) + v695);
        *(void *)(a2 + v694) = v696;
        v665 |= (unint64_t)(v697 & 0x7F) << 56;
        if ((v697 & 0x80000000) == 0) {
          goto LABEL_693;
        }
        uint64_t v698 = *v3;
        unint64_t v699 = *(void *)(a2 + v698);
        if (v699 == -1 || v699 >= *(void *)(a2 + *v6)) {
          goto LABEL_692;
        }
        unint64_t v700 = v699 + 1;
        uint64_t v701 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v699);
        *(void *)(a2 + v698) = v700;
        if ((v701 & 0x80) != 0)
        {
          uint64_t v665 = 0;
          goto LABEL_695;
        }
        v665 |= v701 << 63;
LABEL_693:
        if (*(unsigned char *)(a2 + *v8)) {
          uint64_t v665 = 0;
        }
LABEL_695:
        *(unsigned char *)(a1 + 185) = v665 != 0;
        goto LABEL_5;
      case 0x15u:
        uint64_t v58 = objc_alloc_init(NWPBEndpoint);
        objc_storeStrong((id *)(a1 + 96), v58);
        uint64_t v774 = 0;
        uint64_t v775 = 0;
        if (!PBReaderPlaceMark() || !NWPBEndpointReadFrom((uint64_t)v58, a2)) {
          goto LABEL_740;
        }
        goto LABEL_620;
      case 0x16u:
        uint64_t v58 = objc_alloc_init(NWPBInterface);
        objc_storeStrong((id *)(a1 + 160), v58);
        goto LABEL_345;
      case 0x17u:
        if (v55 != 2) {
          goto LABEL_696;
        }
        uint64_t v774 = 0;
        uint64_t v775 = 0;
        uint64_t result = PBReaderPlaceMark();
        if (!result) {
          return result;
        }
        uint64_t v625 = *v3;
        unint64_t v626 = *(void *)(a2 + v625);
        unint64_t v627 = *(void *)(a2 + *v6);
        if (v626 >= v627) {
          goto LABEL_609;
        }
        while (2)
        {
          v628 = (unsigned char *)(a2 + *v8);
          if (*v628) {
            goto LABEL_609;
          }
          if (v626 >= v627) {
            goto LABEL_538;
          }
          char v629 = *(unsigned char *)(*(void *)(a2 + *v10) + v626);
          *(void *)(a2 + (int)v625) = v626 + 1;
          if ((v629 & 0x80) == 0) {
            goto LABEL_539;
          }
          uint64_t v630 = *v3;
          unint64_t v631 = *(void *)(a2 + v630);
          if (v631 == -1 || v631 >= *(void *)(a2 + *v6)) {
            goto LABEL_537;
          }
          int v632 = *(char *)(*(void *)(a2 + *v10) + v631);
          *(void *)(a2 + v630) = v631 + 1;
          if ((v632 & 0x80000000) == 0) {
            goto LABEL_539;
          }
          uint64_t v633 = *v3;
          unint64_t v634 = *(void *)(a2 + v633);
          if (v634 == -1 || v634 >= *(void *)(a2 + *v6)) {
            goto LABEL_537;
          }
          int v635 = *(char *)(*(void *)(a2 + *v10) + v634);
          *(void *)(a2 + v633) = v634 + 1;
          if ((v635 & 0x80000000) == 0) {
            goto LABEL_539;
          }
          uint64_t v636 = *v3;
          unint64_t v637 = *(void *)(a2 + v636);
          if (v637 == -1 || v637 >= *(void *)(a2 + *v6)) {
            goto LABEL_537;
          }
          int v638 = *(char *)(*(void *)(a2 + *v10) + v637);
          *(void *)(a2 + v636) = v637 + 1;
          if ((v638 & 0x80000000) == 0) {
            goto LABEL_539;
          }
          uint64_t v639 = *v3;
          unint64_t v640 = *(void *)(a2 + v639);
          if (v640 == -1 || v640 >= *(void *)(a2 + *v6)) {
            goto LABEL_537;
          }
          unint64_t v641 = v640 + 1;
          int v642 = *(char *)(*(void *)(a2 + *v10) + v640);
          *(void *)(a2 + v639) = v641;
          if ((v642 & 0x80000000) == 0) {
            goto LABEL_539;
          }
          uint64_t v643 = *v3;
          unint64_t v644 = *(void *)(a2 + v643);
          if (v644 == -1 || v644 >= *(void *)(a2 + *v6)) {
            goto LABEL_537;
          }
          unint64_t v645 = v644 + 1;
          int v646 = *(char *)(*(void *)(a2 + *v10) + v644);
          *(void *)(a2 + v643) = v645;
          if ((v646 & 0x80000000) == 0) {
            goto LABEL_539;
          }
          uint64_t v647 = *v3;
          unint64_t v648 = *(void *)(a2 + v647);
          if (v648 == -1 || v648 >= *(void *)(a2 + *v6)) {
            goto LABEL_537;
          }
          unint64_t v649 = v648 + 1;
          int v650 = *(char *)(*(void *)(a2 + *v10) + v648);
          *(void *)(a2 + v647) = v649;
          if ((v650 & 0x80000000) == 0) {
            goto LABEL_539;
          }
          uint64_t v651 = *v3;
          unint64_t v652 = *(void *)(a2 + v651);
          if (v652 == -1 || v652 >= *(void *)(a2 + *v6)) {
            goto LABEL_537;
          }
          unint64_t v653 = v652 + 1;
          int v654 = *(char *)(*(void *)(a2 + *v10) + v652);
          *(void *)(a2 + v651) = v653;
          if ((v654 & 0x80000000) == 0) {
            goto LABEL_539;
          }
          uint64_t v655 = *v3;
          unint64_t v656 = *(void *)(a2 + v655);
          if (v656 == -1 || v656 >= *(void *)(a2 + *v6)) {
            goto LABEL_537;
          }
          unint64_t v657 = v656 + 1;
          int v658 = *(char *)(*(void *)(a2 + *v10) + v656);
          *(void *)(a2 + v655) = v657;
          if (v658 < 0)
          {
            uint64_t v659 = *v3;
            unint64_t v660 = *(void *)(a2 + v659);
            if (v660 == -1 || v660 >= *(void *)(a2 + *v6))
            {
LABEL_537:
              v628 = (unsigned char *)(a2 + *v8);
LABEL_538:
              unsigned char *v628 = 1;
            }
            else
            {
              *(void *)(a2 + v659) = v660 + 1;
            }
          }
LABEL_539:
          PBRepeatedInt32Add();
          uint64_t v625 = *v3;
          unint64_t v626 = *(void *)(a2 + v625);
          unint64_t v627 = *(void *)(a2 + *v6);
          if (v626 >= v627) {
            goto LABEL_609;
          }
          continue;
        }
      case 0x18u:
        if (v55 != 2)
        {
LABEL_696:
          uint64_t v740 = *v3;
          unint64_t v741 = *(void *)(a2 + v740);
          if (v741 != -1 && v741 < *(void *)(a2 + *v6))
          {
            char v742 = *(unsigned char *)(*(void *)(a2 + *v10) + v741);
            *(void *)(a2 + v740) = v741 + 1;
            if ((v742 & 0x80) == 0) {
              goto LABEL_727;
            }
            uint64_t v743 = *v3;
            unint64_t v744 = *(void *)(a2 + v743);
            if (v744 == -1 || v744 >= *(void *)(a2 + *v6)) {
              goto LABEL_728;
            }
            int v745 = *(char *)(*(void *)(a2 + *v10) + v744);
            *(void *)(a2 + v743) = v744 + 1;
            if ((v745 & 0x80000000) == 0) {
              goto LABEL_727;
            }
            uint64_t v746 = *v3;
            unint64_t v747 = *(void *)(a2 + v746);
            if (v747 == -1 || v747 >= *(void *)(a2 + *v6)) {
              goto LABEL_728;
            }
            int v748 = *(char *)(*(void *)(a2 + *v10) + v747);
            *(void *)(a2 + v746) = v747 + 1;
            if ((v748 & 0x80000000) == 0) {
              goto LABEL_727;
            }
            uint64_t v749 = *v3;
            unint64_t v750 = *(void *)(a2 + v749);
            if (v750 == -1 || v750 >= *(void *)(a2 + *v6)) {
              goto LABEL_728;
            }
            int v751 = *(char *)(*(void *)(a2 + *v10) + v750);
            *(void *)(a2 + v749) = v750 + 1;
            if ((v751 & 0x80000000) == 0) {
              goto LABEL_727;
            }
            uint64_t v752 = *v3;
            unint64_t v753 = *(void *)(a2 + v752);
            if (v753 == -1 || v753 >= *(void *)(a2 + *v6)) {
              goto LABEL_728;
            }
            unint64_t v754 = v753 + 1;
            int v755 = *(char *)(*(void *)(a2 + *v10) + v753);
            *(void *)(a2 + v752) = v754;
            if ((v755 & 0x80000000) == 0) {
              goto LABEL_727;
            }
            uint64_t v756 = *v3;
            unint64_t v757 = *(void *)(a2 + v756);
            if (v757 == -1 || v757 >= *(void *)(a2 + *v6)) {
              goto LABEL_728;
            }
            unint64_t v758 = v757 + 1;
            int v759 = *(char *)(*(void *)(a2 + *v10) + v757);
            *(void *)(a2 + v756) = v758;
            if ((v759 & 0x80000000) == 0) {
              goto LABEL_727;
            }
            uint64_t v760 = *v3;
            unint64_t v761 = *(void *)(a2 + v760);
            if (v761 == -1 || v761 >= *(void *)(a2 + *v6)) {
              goto LABEL_728;
            }
            unint64_t v762 = v761 + 1;
            int v763 = *(char *)(*(void *)(a2 + *v10) + v761);
            *(void *)(a2 + v760) = v762;
            if ((v763 & 0x80000000) == 0) {
              goto LABEL_727;
            }
            uint64_t v764 = *v3;
            unint64_t v765 = *(void *)(a2 + v764);
            if (v765 == -1 || v765 >= *(void *)(a2 + *v6)) {
              goto LABEL_728;
            }
            unint64_t v766 = v765 + 1;
            int v767 = *(char *)(*(void *)(a2 + *v10) + v765);
            *(void *)(a2 + v764) = v766;
            if ((v767 & 0x80000000) == 0) {
              goto LABEL_727;
            }
            uint64_t v768 = *v3;
            unint64_t v769 = *(void *)(a2 + v768);
            if (v769 == -1 || v769 >= *(void *)(a2 + *v6)) {
              goto LABEL_728;
            }
            unint64_t v770 = v769 + 1;
            int v771 = *(char *)(*(void *)(a2 + *v10) + v769);
            *(void *)(a2 + v768) = v770;
            if ((v771 & 0x80000000) == 0)
            {
LABEL_727:
              PBRepeatedInt32Add();
              goto LABEL_5;
            }
            uint64_t v772 = *v3;
            unint64_t v773 = *(void *)(a2 + v772);
            if (v773 != -1 && v773 < *(void *)(a2 + *v6))
            {
              *(void *)(a2 + v772) = v773 + 1;
              goto LABEL_727;
            }
LABEL_728:
            os_log_type_t v57 = (unsigned char *)(a2 + *v8);
          }
          *os_log_type_t v57 = 1;
          goto LABEL_727;
        }
        uint64_t v774 = 0;
        uint64_t v775 = 0;
        uint64_t result = PBReaderPlaceMark();
        if (!result) {
          return result;
        }
        uint64_t v702 = *v3;
        unint64_t v703 = *(void *)(a2 + v702);
        for (unint64_t i = *(void *)(a2 + *v6); v703 < i; unint64_t i = *(void *)(a2 + *v6))
        {
          v705 = (unsigned char *)(a2 + *v8);
          if (*v705) {
            break;
          }
          if (v703 >= i) {
            goto LABEL_607;
          }
          char v706 = *(unsigned char *)(*(void *)(a2 + *v10) + v703);
          *(void *)(a2 + (int)v702) = v703 + 1;
          if (v706 < 0)
          {
            uint64_t v707 = *v3;
            unint64_t v708 = *(void *)(a2 + v707);
            if (v708 == -1 || v708 >= *(void *)(a2 + *v6))
            {
LABEL_606:
              v705 = (unsigned char *)(a2 + *v8);
LABEL_607:
              unsigned char *v705 = 1;
              goto LABEL_608;
            }
            int v709 = *(char *)(*(void *)(a2 + *v10) + v708);
            *(void *)(a2 + v707) = v708 + 1;
            if (v709 < 0)
            {
              uint64_t v710 = *v3;
              unint64_t v711 = *(void *)(a2 + v710);
              if (v711 == -1 || v711 >= *(void *)(a2 + *v6)) {
                goto LABEL_606;
              }
              int v712 = *(char *)(*(void *)(a2 + *v10) + v711);
              *(void *)(a2 + v710) = v711 + 1;
              if (v712 < 0)
              {
                uint64_t v713 = *v3;
                unint64_t v714 = *(void *)(a2 + v713);
                if (v714 == -1 || v714 >= *(void *)(a2 + *v6)) {
                  goto LABEL_606;
                }
                int v715 = *(char *)(*(void *)(a2 + *v10) + v714);
                *(void *)(a2 + v713) = v714 + 1;
                if (v715 < 0)
                {
                  uint64_t v716 = *v3;
                  unint64_t v717 = *(void *)(a2 + v716);
                  if (v717 == -1 || v717 >= *(void *)(a2 + *v6)) {
                    goto LABEL_606;
                  }
                  unint64_t v718 = v717 + 1;
                  int v719 = *(char *)(*(void *)(a2 + *v10) + v717);
                  *(void *)(a2 + v716) = v718;
                  if (v719 < 0)
                  {
                    uint64_t v720 = *v3;
                    unint64_t v721 = *(void *)(a2 + v720);
                    if (v721 == -1 || v721 >= *(void *)(a2 + *v6)) {
                      goto LABEL_606;
                    }
                    unint64_t v722 = v721 + 1;
                    int v723 = *(char *)(*(void *)(a2 + *v10) + v721);
                    *(void *)(a2 + v720) = v722;
                    if (v723 < 0)
                    {
                      uint64_t v724 = *v3;
                      unint64_t v725 = *(void *)(a2 + v724);
                      if (v725 == -1 || v725 >= *(void *)(a2 + *v6)) {
                        goto LABEL_606;
                      }
                      unint64_t v726 = v725 + 1;
                      int v727 = *(char *)(*(void *)(a2 + *v10) + v725);
                      *(void *)(a2 + v724) = v726;
                      if (v727 < 0)
                      {
                        uint64_t v728 = *v3;
                        unint64_t v729 = *(void *)(a2 + v728);
                        if (v729 == -1 || v729 >= *(void *)(a2 + *v6)) {
                          goto LABEL_606;
                        }
                        unint64_t v730 = v729 + 1;
                        int v731 = *(char *)(*(void *)(a2 + *v10) + v729);
                        *(void *)(a2 + v728) = v730;
                        if (v731 < 0)
                        {
                          uint64_t v732 = *v3;
                          unint64_t v733 = *(void *)(a2 + v732);
                          if (v733 == -1 || v733 >= *(void *)(a2 + *v6)) {
                            goto LABEL_606;
                          }
                          unint64_t v734 = v733 + 1;
                          int v735 = *(char *)(*(void *)(a2 + *v10) + v733);
                          *(void *)(a2 + v732) = v734;
                          if (v735 < 0)
                          {
                            uint64_t v736 = *v3;
                            unint64_t v737 = *(void *)(a2 + v736);
                            if (v737 == -1 || v737 >= *(void *)(a2 + *v6)) {
                              goto LABEL_606;
                            }
                            *(void *)(a2 + v736) = v737 + 1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_608:
          PBRepeatedInt32Add();
          uint64_t v702 = *v3;
          unint64_t v703 = *(void *)(a2 + v702);
        }
LABEL_609:
        PBReaderRecallMark();
LABEL_5:
        uint64_t v4 = *v3;
        unint64_t v5 = *(void *)(a2 + v4);
        unint64_t v7 = *(void *)(a2 + *v6);
        if (v5 >= v7) {
          return *(unsigned char *)(a2 + *v8) == 0;
        }
        break;
      case 0x19u:
        uint64_t v58 = objc_alloc_init(NWPBInterface);
        if (a1)
        {
          int v267 = *(void **)(a1 + 136);
          if (!v267)
          {
            id v268 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            uint64_t v269 = *(void **)(a1 + 136);
            *(void *)(a1 + 136) = v268;

            int v267 = *(void **)(a1 + 136);
          }
          objc_msgSend(v267, "addObject:", v58, v774, v775);
        }

LABEL_345:
        uint64_t v774 = 0;
        uint64_t v775 = 0;
        if (!PBReaderPlaceMark() || (NWPBInterfaceReadFrom((uint64_t)v58, a2) & 1) == 0) {
          goto LABEL_740;
        }
        goto LABEL_620;
      case 0x1Au:
        uint64_t v58 = objc_alloc_init(NWPBAgentClass);
        if (!a1) {
          goto LABEL_618;
        }
        id v59 = *(void **)(a1 + 128);
        if (v59) {
          goto LABEL_617;
        }
        id v265 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        uint64_t v266 = *(void **)(a1 + 128);
        *(void *)(a1 + 128) = v265;

        uint64_t v62 = 128;
        goto LABEL_616;
      case 0x1Bu:
        uint64_t v58 = objc_alloc_init(NWPBAgentClass);
        if (!a1) {
          goto LABEL_618;
        }
        id v59 = *(void **)(a1 + 152);
        if (v59) {
          goto LABEL_617;
        }
        id v738 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        v739 = *(void **)(a1 + 152);
        *(void *)(a1 + 152) = v738;

        uint64_t v62 = 152;
        goto LABEL_616;
      case 0x1Cu:
        uint64_t v58 = objc_alloc_init(NWPBAgentClass);
        if (!a1) {
          goto LABEL_618;
        }
        id v59 = *(void **)(a1 + 120);
        if (v59) {
          goto LABEL_617;
        }
        id v60 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        id v61 = *(void **)(a1 + 120);
        *(void *)(a1 + 120) = v60;

        uint64_t v62 = 120;
LABEL_616:
        id v59 = *(void **)(a1 + v62);
LABEL_617:
        objc_msgSend(v59, "addObject:", v58, v774, v775);
LABEL_618:

        uint64_t v774 = 0;
        uint64_t v775 = 0;
        if (PBReaderPlaceMark() && NWPBAgentClassReadFrom((uint64_t)v58, a2))
        {
LABEL_620:
          PBReaderRecallMark();

          goto LABEL_5;
        }
LABEL_740:

        return 0;
      case 0x1Du:
        uint64_t v11 = PBReaderReadData();
        uint64_t v12 = 104;
LABEL_4:
        unint64_t v13 = *(void **)(a1 + v12);
        *(void *)(a1 + v12) = v11;

        goto LABEL_5;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_5;
    }
  }
  unint64_t v16 = 0;
LABEL_39:
  *uint64_t v14 = 1;
  goto LABEL_40;
}

void sub_18390B370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_socks5_server_create(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  nw_allow_use_of_dispatch_internal();
  if (v4)
  {
    unint64_t v5 = (char *)-[NWConcrete_nw_socks5_server initWithParameters:clientQueue:]([NWConcrete_nw_socks5_server alloc], v3, v4);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v6 = (id)gLogObj;
    unint64_t v7 = v6;
    if (v5)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v29 = "nw_socks5_server_create";
        __int16 v30 = 2114;
        unint64_t v31 = v5;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ created", buf, 0x16u);
      }

      uint64_t v8 = v5;
      goto LABEL_17;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_socks5_server_create";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v9, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_socks5_server_create";
        uint64_t v12 = "%{public}s [nw_socks5_server initWithParameters:clientQueue:] failed";
LABEL_21:
        uint64_t v17 = v10;
        os_log_type_t v18 = v11;
        goto LABEL_22;
      }
      if (!v26)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_socks5_server_create";
        uint64_t v12 = "%{public}s [nw_socks5_server initWithParameters:clientQueue:] failed, backtrace limit exceeded";
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v10 = (id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_23:

          if (!v9) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_socks5_server_create";
        uint64_t v12 = "%{public}s [nw_socks5_server initWithParameters:clientQueue:] failed, no backtrace";
        uint64_t v17 = v10;
        os_log_type_t v18 = v14;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v17, v18, v12, buf, 0xCu);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v29 = "nw_socks5_server_create";
        __int16 v30 = 2082;
        unint64_t v31 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s [nw_socks5_server initWithParameters:clientQueue:] failed, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v9)
    {
LABEL_17:

      goto LABEL_18;
    }
LABEL_16:
    free(v9);
    goto LABEL_17;
  }
  unint64_t v19 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v29 = "nw_socks5_server_create";
  int v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v20, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_socks5_server_create";
        unint64_t v23 = "%{public}s called with null queue";
LABEL_40:
        _os_log_impl(&dword_1830D4000, v21, v22, v23, buf, 0xCu);
      }
    }
    else
    {
      if (v26)
      {
        int v24 = (char *)__nw_create_backtrace_string();
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = type;
        BOOL v25 = os_log_type_enabled(v21, type);
        if (v24)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v29 = "nw_socks5_server_create";
            __int16 v30 = 2082;
            unint64_t v31 = v24;
            _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v24);
          goto LABEL_42;
        }
        if (!v25) {
          goto LABEL_41;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_socks5_server_create";
        unint64_t v23 = "%{public}s called with null queue, no backtrace";
        goto LABEL_40;
      }
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_socks5_server_create";
        unint64_t v23 = "%{public}s called with null queue, backtrace limit exceeded";
        goto LABEL_40;
      }
    }
LABEL_41:
  }
LABEL_42:
  if (v20) {
    free(v20);
  }
  unint64_t v5 = 0;
LABEL_18:

  return v5;
}

id nw_socks5_server_copy_parameters(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = *(void **)(a1 + 40);
    return v1;
  }
  id v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v13 = "nw_socks5_server_copy_parameters";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v13 = "nw_socks5_server_copy_parameters";
        unint64_t v7 = "%{public}s called with null server";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v13 = "nw_socks5_server_copy_parameters";
            __int16 v14 = 2082;
            BOOL v15 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v9) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v13 = "nw_socks5_server_copy_parameters";
        unint64_t v7 = "%{public}s called with null server, no backtrace";
        goto LABEL_18;
      }
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v13 = "nw_socks5_server_copy_parameters";
        unint64_t v7 = "%{public}s called with null server, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
  return 0;
}

uint64_t nw_socks5_server_get_port(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    __int16 v19 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_socks5_server_get_port_block_invoke;
    v13[3] = &unk_1E524B978;
    BOOL v15 = buf;
    __int16 v14 = v1;
    os_unfair_lock_lock(v2 + 6);
    __nw_socks5_server_get_port_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 6);
    uint64_t v3 = *(unsigned __int16 *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_socks5_server_get_port";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socks5_server_get_port";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_socks5_server_get_port";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socks5_server_get_port";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socks5_server_get_port";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_socks5_server_get_port_block_invoke(uint64_t a1)
{
  uint64_t result = nw_listener_get_port(*(nw_listener_t *)(*(void *)(a1 + 32) + 72));
  *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void nw_socks5_server_cancel_connections(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __nw_socks5_server_cancel_connections_block_invoke;
    v10[3] = &unk_1E524BAA8;
    BOOL v11 = v1;
    os_unfair_lock_lock(v2 + 6);
    __nw_socks5_server_cancel_connections_block_invoke((uint64_t)v10);
    os_unfair_lock_unlock(v2 + 6);

    goto LABEL_3;
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_socks5_server_cancel_connections";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v4, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_socks5_server_cancel_connections";
        unint64_t v7 = "%{public}s called with null server";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v15 = "nw_socks5_server_cancel_connections";
            __int16 v16 = 2082;
            uint64_t v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v9) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_socks5_server_cancel_connections";
        unint64_t v7 = "%{public}s called with null server, no backtrace";
        goto LABEL_17;
      }
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_socks5_server_cancel_connections";
        unint64_t v7 = "%{public}s called with null server, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v4) {
    free(v4);
  }
LABEL_3:
}

void __nw_socks5_server_cancel_connections_block_invoke(uint64_t a1)
{
}

void nw_socks5_server_cancel_connections_locked(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 136446466;
    id v4 = "nw_socks5_server_cancel_connections_locked";
    __int16 v5 = 2048;
    os_log_type_t v6 = v1;
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %p", (uint8_t *)&v3, 0x16u);
  }

  nw_array_apply(v1[10], (uint64_t)&__block_literal_global_36740);
}

uint64_t __nw_socks5_server_cancel_connections_locked_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v3 = a3;
  id v4 = v3;
  if (v3)
  {
    __int16 v5 = v3[5];
    *(void *)block = MEMORY[0x1E4F143A8];
    *(void *)&block[8] = 3221225472;
    *(void *)&block[16] = __nw_socks5_connection_cancel_block_invoke;
    uint64_t v18 = &unk_1E524BAA8;
    __int16 v19 = v3;
    dispatch_async(v5, block);

    goto LABEL_3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  *(_DWORD *)block = 136446210;
  *(void *)&block[4] = "nw_socks5_connection_cancel";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = (id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "nw_socks5_connection_cancel";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", block, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)block = 136446466;
          *(void *)&block[4] = "nw_socks5_connection_cancel";
          *(_WORD *)&block[12] = 2082;
          *(void *)&block[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", block, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "nw_socks5_connection_cancel";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, no backtrace", block, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = (id)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "nw_socks5_connection_cancel";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", block, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:

  return 1;
}

void nw_socks5_server_set_error_handler(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  id v4 = a2;
  __int16 v5 = v4;
  if (!v3)
  {
    os_log_type_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_socks5_server_set_error_handler";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v7, &v20, &v19)) {
      goto LABEL_34;
    }
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v20;
      if (os_log_type_enabled(v8, v20))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_socks5_server_set_error_handler";
        os_log_type_t v10 = "%{public}s called with null server";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v20;
      BOOL v13 = os_log_type_enabled(v8, v20);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_socks5_server_set_error_handler";
          __int16 v23 = 2082;
          int v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_35:
        free(v7);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_socks5_server_set_error_handler";
        os_log_type_t v10 = "%{public}s called with null server, no backtrace";
        goto LABEL_32;
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v20;
      if (os_log_type_enabled(v8, v20))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_socks5_server_set_error_handler";
        os_log_type_t v10 = "%{public}s called with null server, backtrace limit exceeded";
        goto LABEL_32;
      }
    }
LABEL_33:

    goto LABEL_34;
  }
  if (v4)
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_socks5_server_set_error_handler_block_invoke;
    v16[3] = &unk_1E524B950;
    uint64_t v17 = v3;
    id v18 = v5;
    os_unfair_lock_lock(v3 + 6);
    __nw_socks5_server_set_error_handler_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v3 + 6);

    goto LABEL_4;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_socks5_server_set_error_handler";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v20 = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v7, &v20, &v19)) {
    goto LABEL_34;
  }
  if (v20 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = v20;
    if (os_log_type_enabled(v8, v20))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_socks5_server_set_error_handler";
      os_log_type_t v10 = "%{public}s called with null handler";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  if (!v19)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = v20;
    if (os_log_type_enabled(v8, v20))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_socks5_server_set_error_handler";
      os_log_type_t v10 = "%{public}s called with null handler, backtrace limit exceeded";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v9 = v20;
  BOOL v15 = os_log_type_enabled(v8, v20);
  if (!v14)
  {
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_socks5_server_set_error_handler";
      os_log_type_t v10 = "%{public}s called with null handler, no backtrace";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v22 = "nw_socks5_server_set_error_handler";
    __int16 v23 = 2082;
    int v24 = v14;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v7) {
    goto LABEL_35;
  }
LABEL_4:
}

void __nw_socks5_server_set_error_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 64);
  *(void *)(v3 + 64) = v2;
}

void nw_socks5_server_set_state_changed_handler(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  __int16 v5 = v4;
  if (!v3)
  {
    os_log_type_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_socks5_server_set_state_changed_handler";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v7, &v20, &v19)) {
      goto LABEL_34;
    }
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v20;
      if (os_log_type_enabled(v8, v20))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_socks5_server_set_state_changed_handler";
        os_log_type_t v10 = "%{public}s called with null server";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v20;
      BOOL v13 = os_log_type_enabled(v8, v20);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_socks5_server_set_state_changed_handler";
          __int16 v23 = 2082;
          int v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_35:
        free(v7);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_socks5_server_set_state_changed_handler";
        os_log_type_t v10 = "%{public}s called with null server, no backtrace";
        goto LABEL_32;
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v20;
      if (os_log_type_enabled(v8, v20))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_socks5_server_set_state_changed_handler";
        os_log_type_t v10 = "%{public}s called with null server, backtrace limit exceeded";
        goto LABEL_32;
      }
    }
LABEL_33:

    goto LABEL_34;
  }
  if (v4)
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_socks5_server_set_state_changed_handler_block_invoke;
    v16[3] = &unk_1E524B950;
    uint64_t v17 = v3;
    id v18 = v5;
    os_unfair_lock_lock(v3 + 6);
    __nw_socks5_server_set_state_changed_handler_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v3 + 6);

    goto LABEL_4;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_socks5_server_set_state_changed_handler";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v20 = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v7, &v20, &v19)) {
    goto LABEL_34;
  }
  if (v20 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = v20;
    if (os_log_type_enabled(v8, v20))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_socks5_server_set_state_changed_handler";
      os_log_type_t v10 = "%{public}s called with null handler";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  if (!v19)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = v20;
    if (os_log_type_enabled(v8, v20))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_socks5_server_set_state_changed_handler";
      os_log_type_t v10 = "%{public}s called with null handler, backtrace limit exceeded";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v9 = v20;
  BOOL v15 = os_log_type_enabled(v8, v20);
  if (!v14)
  {
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_socks5_server_set_state_changed_handler";
      os_log_type_t v10 = "%{public}s called with null handler, no backtrace";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v22 = "nw_socks5_server_set_state_changed_handler";
    __int16 v23 = 2082;
    int v24 = v14;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v7) {
    goto LABEL_35;
  }
LABEL_4:
}

void __nw_socks5_server_set_state_changed_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 56);
  *(void *)(v3 + 56) = v2;
}

void nw_socks5_server_register_udp_associate_request(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  os_log_type_t v9 = a1;
  id v10 = a2;
  id v11 = a3;
  os_log_type_t v12 = a4;
  id v13 = a5;
  os_log_type_t v14 = v13;
  if (!v9)
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
    __int16 v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v47 = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v16, &v47, &v46)) {
      goto LABEL_66;
    }
    if (v47 != OS_LOG_TYPE_FAULT)
    {
      if (v46)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v18 = v47;
        BOOL v28 = os_log_type_enabled(v17, v47);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
            __int16 v50 = 2082;
            unint64_t v51 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_66:
          if (!v16) {
            goto LABEL_6;
          }
LABEL_67:
          free(v16);
          goto LABEL_6;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
          char v19 = "%{public}s called with null server, no backtrace";
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v18 = v47;
        if (os_log_type_enabled(v17, v47))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
          char v19 = "%{public}s called with null server, backtrace limit exceeded";
          goto LABEL_64;
        }
      }
      goto LABEL_65;
    }
    uint64_t v17 = __nwlog_obj();
    os_log_type_t v18 = v47;
    if (!os_log_type_enabled(v17, v47)) {
      goto LABEL_65;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
    char v19 = "%{public}s called with null server";
    goto LABEL_64;
  }
  if (!v13)
  {
    os_log_type_t v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
    __int16 v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v47 = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v16, &v47, &v46)) {
      goto LABEL_66;
    }
    if (v47 != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v18 = v47;
        if (os_log_type_enabled(v17, v47))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
          char v19 = "%{public}s called with null handler, backtrace limit exceeded";
          goto LABEL_64;
        }
        goto LABEL_65;
      }
      uint64_t v29 = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = v47;
      BOOL v30 = os_log_type_enabled(v17, v47);
      if (!v29)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
          char v19 = "%{public}s called with null handler, no backtrace";
          goto LABEL_64;
        }
        goto LABEL_65;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
        __int16 v50 = 2082;
        unint64_t v51 = v29;
        unint64_t v31 = "%{public}s called with null handler, dumping backtrace:%{public}s";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v17, v18, v31, buf, 0x16u);
      }
LABEL_37:

      free(v29);
      if (!v16) {
        goto LABEL_6;
      }
      goto LABEL_67;
    }
    uint64_t v17 = __nwlog_obj();
    os_log_type_t v18 = v47;
    if (!os_log_type_enabled(v17, v47)) {
      goto LABEL_65;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
    char v19 = "%{public}s called with null handler";
LABEL_64:
    _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
    goto LABEL_65;
  }
  if (!v12)
  {
    uint64_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
    __int16 v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v47 = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v16, &v47, &v46)) {
      goto LABEL_66;
    }
    if (v47 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
        char v19 = "%{public}s called with null queue";
        goto LABEL_64;
      }
LABEL_65:

      goto LABEL_66;
    }
    if (!v46)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
        char v19 = "%{public}s called with null queue, backtrace limit exceeded";
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    uint64_t v29 = (char *)__nw_create_backtrace_string();
    uint64_t v17 = __nwlog_obj();
    os_log_type_t v18 = v47;
    BOOL v32 = os_log_type_enabled(v17, v47);
    if (!v29)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
        char v19 = "%{public}s called with null queue, no backtrace";
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
      __int16 v50 = 2082;
      unint64_t v51 = v29;
      unint64_t v31 = "%{public}s called with null queue, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (!v10)
  {
    os_log_type_t v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
    __int16 v23 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t v47 = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault((const char *)v23, &v47, &v46))
    {
LABEL_55:
      if (v23) {
        free(v23);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __nw_socks5_server_register_udp_associate_request_block_invoke;
      block[3] = &unk_1E524AFA8;
      id v45 = v14;
      dispatch_async(v12, block);

      goto LABEL_5;
    }
    if (v47 == OS_LOG_TYPE_FAULT)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v25 = v47;
      if (os_log_type_enabled(v24, v47))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
        char v26 = "%{public}s called with null socks5_connection";
LABEL_52:
        unint64_t v35 = v24;
        os_log_type_t v36 = v25;
LABEL_53:
        _os_log_impl(&dword_1830D4000, v35, v36, v26, buf, 0xCu);
      }
    }
    else
    {
      if (v46)
      {
        uint64_t v33 = (char *)__nw_create_backtrace_string();
        int v24 = __nwlog_obj();
        os_log_type_t type = v47;
        BOOL v34 = os_log_type_enabled(v24, v47);
        if (v33)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
            __int16 v50 = 2082;
            unint64_t v51 = v33;
            _os_log_impl(&dword_1830D4000, v24, type, "%{public}s called with null socks5_connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v33);
          goto LABEL_55;
        }
        if (!v34) {
          goto LABEL_54;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
        char v26 = "%{public}s called with null socks5_connection, no backtrace";
        unint64_t v35 = v24;
        os_log_type_t v36 = type;
        goto LABEL_53;
      }
      int v24 = __nwlog_obj();
      os_log_type_t v25 = v47;
      if (os_log_type_enabled(v24, v47))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v49 = "nw_socks5_server_register_udp_associate_request";
        char v26 = "%{public}s called with null socks5_connection, backtrace limit exceeded";
        goto LABEL_52;
      }
    }
LABEL_54:

    goto LABEL_55;
  }
LABEL_5:
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  v38[2] = __nw_socks5_server_register_udp_associate_request_block_invoke_2;
  v38[3] = &unk_1E5243390;
  unint64_t v39 = v9;
  id v40 = v11;
  id v41 = v10;
  unint64_t v42 = v12;
  id v43 = v14;
  os_unfair_lock_lock(v9 + 6);
  __nw_socks5_server_register_udp_associate_request_block_invoke_2((uint64_t)v38);
  os_unfair_lock_unlock(v9 + 6);

LABEL_6:
}

uint64_t __nw_socks5_server_register_udp_associate_request_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __nw_socks5_server_register_udp_associate_request_block_invoke_2(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 88))
  {
    uint64_t v2 = nw_dictionary_create();
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 88);
    *(void *)(v3 + 88) = v2;
  }
  hostname = nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 40));
  if (nw_endpoint_get_address_family(*(void **)(a1 + 40)) == 30) {
    os_log_type_t v6 = ".";
  }
  else {
    os_log_type_t v6 = ":";
  }
  int port = nw_endpoint_get_port(*(nw_endpoint_t *)(a1 + 40));
  nw_endpoint_get_description(*(void **)(a1 + 40));
  xpc_object_t v8 = xpc_string_create_with_format("%s%s%u", hostname, v6, port);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 88);
  string_ptr = xpc_string_get_string_ptr(v8);
  id v11 = nw_dictionary_copy_value(v9, (uint64_t)string_ptr);
  os_log_type_t v12 = *(void **)(a1 + 32);
  if (v11)
  {
    id v13 = (void *)v12[4];
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = __nw_socks5_server_register_udp_associate_request_block_invoke_4;
    v25[3] = &unk_1E5240910;
    os_log_type_t v14 = (id *)&v26;
    char v26 = v12;
    id v27 = *(id *)(a1 + 48);
    id v28 = v8;
    id v29 = *(id *)(a1 + 56);
    id v30 = *(id *)(a1 + 64);
    BOOL v15 = v11;
    id v16 = v13;
    uint64_t v17 = v25;
    os_log_type_t v18 = v15[5];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __nw_socks5_connection_validate_udp_association_block_invoke_2;
    block[3] = &unk_1E5248030;
    char v19 = v15;
    id v34 = v19;
    id v20 = v16;
    id v35 = v20;
    uint64_t v21 = v17;
    id v36 = v21;
    dispatch_async(v18, block);
  }
  else
  {
    uint64_t v22 = v12[11];
    __int16 v23 = xpc_string_get_string_ptr(v8);
    nw_dictionary_set_value(v22, v23, *(void **)(a1 + 48));
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    v31[2] = __nw_socks5_server_register_udp_associate_request_block_invoke_3;
    v31[3] = &unk_1E524AFA8;
    os_log_type_t v14 = &v32;
    int v24 = *(NSObject **)(a1 + 56);
    id v32 = *(id *)(a1 + 64);
    dispatch_async(v24, v31);
  }
}

uint64_t __nw_socks5_server_register_udp_associate_request_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __nw_socks5_server_register_udp_associate_request_block_invoke_4(uint64_t a1, char a2)
{
  id v4 = *(os_unfair_lock_s **)(a1 + 32);
  __int16 v5 = v4 + 6;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __nw_socks5_server_register_udp_associate_request_block_invoke_5;
  v6[3] = &unk_1E52408E8;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  char v12 = a2;
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  os_unfair_lock_lock(v5);
  __nw_socks5_server_register_udp_associate_request_block_invoke_5((uint64_t)v6);
  os_unfair_lock_unlock(v5);
}

void __nw_socks5_server_register_udp_associate_request_block_invoke_5(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  if (v1[9])
  {
    uint64_t v3 = v1[10];
    uint64_t v4 = *(void *)(a1 + 40);
    if (v3 && v4 != 0)
    {
      id v7 = *(void **)(v3 + 16);
      os_log_type_t v6 = *(void **)(v3 + 24);
      if (v7 != v6)
      {
        while (*v7 != v4)
        {
          if (++v7 == v6)
          {
            id v7 = v6;
            break;
          }
        }
      }
      if (v7 != v6)
      {
        char v8 = *(unsigned char *)(a1 + 72) ^ 1;
        if (!*(unsigned char *)(a1 + 72))
        {
          uint64_t v9 = v1[11];
          string_ptr = xpc_string_get_string_ptr(*(xpc_object_t *)(a1 + 48));
          nw_dictionary_set_value(v9, string_ptr, *(void **)(a1 + 40));
        }
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 3221225472;
        v12[2] = __nw_socks5_server_register_udp_associate_request_block_invoke_6;
        v12[3] = &unk_1E5249BD0;
        id v11 = *(NSObject **)(a1 + 56);
        id v13 = *(id *)(a1 + 64);
        char v14 = v8;
        dispatch_async(v11, v12);
      }
    }
  }
}

uint64_t __nw_socks5_server_register_udp_associate_request_block_invoke_6(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void nw_socks5_server_call_outer_connection_handler(void *a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  __int16 v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5)
  {
    uint64_t v8 = v5[12];
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v6, v7);
    }
    goto LABEL_4;
  }
  uint64_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_socks5_server_call_outer_connection_handler";
  id v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_socks5_server_call_outer_connection_handler";
        id v13 = "%{public}s called with null server";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            char v19 = "nw_socks5_server_call_outer_connection_handler";
            __int16 v20 = 2082;
            uint64_t v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v15) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_socks5_server_call_outer_connection_handler";
        id v13 = "%{public}s called with null server, no backtrace";
        goto LABEL_18;
      }
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_socks5_server_call_outer_connection_handler";
        id v13 = "%{public}s called with null server, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v10) {
    free(v10);
  }
LABEL_4:
}

void nw_socks5_server_start(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v3 = (id)gLogObj;
  uint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      int v24 = "nw_socks5_server_start";
      __int16 v25 = 2114;
      char v26 = v2;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ start", buf, 0x16u);
    }

    __int16 v5 = v2[9];
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = __nw_socks5_server_start_block_invoke;
    handler[3] = &unk_1E524BA60;
    id v6 = v2;
    __int16 v20 = v6;
    nw_listener_set_state_changed_handler(v5, handler);
    id v7 = v2[9];
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __nw_socks5_server_start_block_invoke_10;
    v17[3] = &unk_1E5240938;
    uint64_t v8 = v6;
    os_log_type_t v18 = v8;
    nw_listener_set_new_connection_handler(v7, v17);
    nw_listener_set_queue(v2[9], v8[4]);
    nw_listener_start(v2[9]);
    nw_listener_t v10 = v8[2];
    uint64_t v9 = (id *)(v8 + 2);
    if (!v10) {
      objc_storeStrong(v9, a1);
    }

    goto LABEL_7;
  }
  *(_DWORD *)buf = 136446210;
  int v24 = "nw_socks5_server_start";
  id v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v22 = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v11, &v22, &v21))
  {
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v22;
      if (os_log_type_enabled(v12, v22))
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_socks5_server_start";
        char v14 = "%{public}s called with null server";
LABEL_21:
        _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = v22;
        BOOL v16 = os_log_type_enabled(v12, v22);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            int v24 = "nw_socks5_server_start";
            __int16 v25 = 2082;
            char v26 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (!v16) {
          goto LABEL_22;
        }
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_socks5_server_start";
        char v14 = "%{public}s called with null server, no backtrace";
        goto LABEL_21;
      }
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v22;
      if (os_log_type_enabled(v12, v22))
      {
        *(_DWORD *)buf = 136446210;
        int v24 = "nw_socks5_server_start";
        char v14 = "%{public}s called with null server, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
LABEL_22:
  }
LABEL_23:
  if (v11) {
    free(v11);
  }
LABEL_7:
}

void __nw_socks5_server_start_block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = *(os_unfair_lock_s **)(a1 + 32);
  id v7 = v6 + 6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __nw_socks5_server_start_block_invoke_2;
  v9[3] = &unk_1E524BA38;
  int v12 = a2;
  nw_listener_t v10 = v6;
  id v11 = v5;
  id v8 = v5;
  os_unfair_lock_lock(v7);
  __nw_socks5_server_start_block_invoke_2((uint64_t)v9);
  os_unfair_lock_unlock(v7);
}

void __nw_socks5_server_start_block_invoke_10(uint64_t a1, void *a2)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 40);
  uint64_t v76 = a1;
  if (v6)
  {
    id v7 = v6;
    int v8 = (*(unsigned __int16 *)(v7[13] + 108) >> 1) & 1;

    uint64_t v5 = *(void *)(a1 + 32);
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v9 = *(void **)(v5 + 32);
  char v10 = *(unsigned char *)(v5 + 136);
  id v11 = v4;
  id v12 = v9;
  id v77 = (id)v5;
  if (v11)
  {
    if (v12)
    {
      os_log_type_t v13 = [NWConcrete_nw_socks5_connection alloc];
      char v14 = v11;
      id v15 = v12;
      id v16 = v77;
      if (!v13) {
        goto LABEL_15;
      }
      v86.os_log_type_t receiver = v13;
      v86.super_class = (Class)NWConcrete_nw_socks5_connection;
      uint64_t v17 = (NWConcrete_nw_socks5_connection *)objc_msgSendSuper2(&v86, sel_init);
      os_log_type_t v13 = v17;
      if (v17)
      {
        v17->sc_id = atomic_fetch_add(&s_last_connection_id, 1uLL);
        objc_storeStrong((id *)&v17->sc_in_connection, a2);
        objc_storeStrong((id *)&v13->sc_queue, v9);
        if (v10) {
          char v18 = 101;
        }
        else {
          char v18 = 1;
        }
        v13->sc_state = v18;
        if (v8) {
          char v19 = 4;
        }
        else {
          char v19 = 0;
        }
        *((unsigned char *)v13 + 160) = *((unsigned char *)v13 + 160) & 0xFB | v19;
        objc_storeWeak((id *)&v13->sc_parent, v16);
        goto LABEL_15;
      }
      id v61 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_socks5_connection initWithConnection:queue:parent:shoes:disableProxy:]";
      uint64_t v62 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v84 = 0;
      if (__nwlog_fault(v62, &type, &v84))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v63 = __nwlog_obj();
          os_log_type_t v64 = type;
          if (os_log_type_enabled(v63, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_socks5_connection initWithConnection:queue:parent:shoes:disableProxy:]";
            _os_log_impl(&dword_1830D4000, v63, v64, "%{public}s [super init] failed", buf, 0xCu);
          }
        }
        else if (v84)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v63 = __nwlog_obj();
          os_log_type_t v71 = type;
          BOOL v72 = os_log_type_enabled(v63, type);
          if (backtrace_string)
          {
            if (v72)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_socks5_connection initWithConnection:queue:parent:shoes:disableProxy:]";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v63, v71, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_114;
          }
          if (v72)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_socks5_connection initWithConnection:queue:parent:shoes:disableProxy:]";
            _os_log_impl(&dword_1830D4000, v63, v71, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v63 = __nwlog_obj();
          os_log_type_t v75 = type;
          if (os_log_type_enabled(v63, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_socks5_connection initWithConnection:queue:parent:shoes:disableProxy:]";
            _os_log_impl(&dword_1830D4000, v63, v75, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_114:
      if (v62) {
        free(v62);
      }
      os_log_type_t v13 = 0;
LABEL_15:

      if (v13)
      {
        __int16 v20 = v13;
LABEL_36:

        goto LABEL_37;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v21 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
      os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(v86.receiver) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v22, &v86, &type))
      {
        if (LOBYTE(v86.receiver) == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v23 = (id)gLogObj;
          os_log_type_t receiver = (os_log_type_t)v86.receiver;
          if (os_log_type_enabled(v23, (os_log_type_t)v86.receiver))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
            _os_log_impl(&dword_1830D4000, v23, receiver, "%{public}s [nw_socks5_connection initWithConnection:queue:shoes:] failed", buf, 0xCu);
          }
        }
        else if (type)
        {
          __int16 v25 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v23 = (id)gLogObj;
          os_log_type_t v26 = (os_log_type_t)v86.receiver;
          BOOL v27 = os_log_type_enabled(v23, (os_log_type_t)v86.receiver);
          if (v25)
          {
            if (v27)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v25;
              _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s [nw_socks5_connection initWithConnection:queue:shoes:] failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v25);
            if (!v22) {
              goto LABEL_36;
            }
            goto LABEL_35;
          }
          if (v27)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
            _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s [nw_socks5_connection initWithConnection:queue:shoes:] failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v23 = (id)gLogObj;
          os_log_type_t v28 = (os_log_type_t)v86.receiver;
          if (os_log_type_enabled(v23, (os_log_type_t)v86.receiver))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
            _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s [nw_socks5_connection initWithConnection:queue:shoes:] failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v22) {
        goto LABEL_36;
      }
LABEL_35:
      free(v22);
      goto LABEL_36;
    }
    id v59 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
    BOOL v56 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v86.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v56, &v86, &type))
    {
      if (LOBYTE(v86.receiver) == 17)
      {
        os_log_type_t v57 = __nwlog_obj();
        os_log_type_t v60 = (os_log_type_t)v86.receiver;
        if (os_log_type_enabled(v57, (os_log_type_t)v86.receiver))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
          _os_log_impl(&dword_1830D4000, v57, v60, "%{public}s called with null queue", buf, 0xCu);
        }
LABEL_107:

        goto LABEL_108;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v57 = __nwlog_obj();
        os_log_type_t v74 = (os_log_type_t)v86.receiver;
        if (os_log_type_enabled(v57, (os_log_type_t)v86.receiver))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
          _os_log_impl(&dword_1830D4000, v57, v74, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_107;
      }
      unint64_t v65 = (char *)__nw_create_backtrace_string();
      os_log_type_t v57 = __nwlog_obj();
      os_log_type_t v68 = (os_log_type_t)v86.receiver;
      BOOL v69 = os_log_type_enabled(v57, (os_log_type_t)v86.receiver);
      if (!v65)
      {
        if (v69)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
          _os_log_impl(&dword_1830D4000, v57, v68, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }
        goto LABEL_107;
      }
      if (v69)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v65;
        _os_log_impl(&dword_1830D4000, v57, v68, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_87;
    }
  }
  else
  {
    int v55 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
    BOOL v56 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v86.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v56, &v86, &type))
    {
      if (LOBYTE(v86.receiver) == 17)
      {
        os_log_type_t v57 = __nwlog_obj();
        os_log_type_t v58 = (os_log_type_t)v86.receiver;
        if (os_log_type_enabled(v57, (os_log_type_t)v86.receiver))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
          _os_log_impl(&dword_1830D4000, v57, v58, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_107;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v57 = __nwlog_obj();
        os_log_type_t v73 = (os_log_type_t)v86.receiver;
        if (os_log_type_enabled(v57, (os_log_type_t)v86.receiver))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
          _os_log_impl(&dword_1830D4000, v57, v73, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_107;
      }
      unint64_t v65 = (char *)__nw_create_backtrace_string();
      os_log_type_t v57 = __nwlog_obj();
      os_log_type_t v66 = (os_log_type_t)v86.receiver;
      BOOL v67 = os_log_type_enabled(v57, (os_log_type_t)v86.receiver);
      if (!v65)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
          _os_log_impl(&dword_1830D4000, v57, v66, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_107;
      }
      if (v67)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v65;
        _os_log_impl(&dword_1830D4000, v57, v66, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_87:

      free(v65);
    }
  }
LABEL_108:
  if (v56) {
    free(v56);
  }
  os_log_type_t v13 = 0;
LABEL_37:

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v29 = (id)gLogObj;
  id v30 = v29;
  if (v13)
  {
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(void *)(v76 + 32);
      nw_endpoint_t v32 = nw_connection_copy_endpoint(v11);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_socks5_server_start_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v31;
      *(_WORD *)&unsigned char buf[22] = 2112;
      uint64_t v88 = v13;
      LOWORD(v89) = 2112;
      *(void *)((char *)&v89 + 2) = v32;
      _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s %@ received new connection %@ from %@", buf, 0x2Au);
    }
    uint64_t v33 = *(os_unfair_lock_s **)(v76 + 32);
    id v34 = v33 + 6;
    v81[0] = MEMORY[0x1E4F143A8];
    v81[1] = 3221225472;
    v81[2] = __nw_socks5_server_start_block_invoke_11;
    v81[3] = &unk_1E524B9A0;
    unint64_t v82 = v33;
    id v35 = v13;
    int v83 = v35;
    os_unfair_lock_lock(v34);
    __nw_socks5_server_start_block_invoke_11((uint64_t)v81);
    os_unfair_lock_unlock(v34);
    v78[0] = MEMORY[0x1E4F143A8];
    v78[1] = 3221225472;
    v78[2] = __nw_socks5_server_start_block_invoke_2_12;
    v78[3] = &unk_1E524B9A0;
    id v79 = *(id *)(v76 + 32);
    uint64_t v80 = v35;
    id v36 = v80;
    uint64_t v37 = v78;
    unint64_t v39 = v36 + 5;
    unint64_t v38 = v36[5];
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_socks5_connection_set_cancel_handler_block_invoke;
    uint64_t v88 = (NWConcrete_nw_socks5_connection *)&unk_1E524B950;
    id v40 = v36;
    *(void *)&long long v89 = v40;
    id v41 = v37;
    *((void *)&v89 + 1) = v41;
    dispatch_async(v38, buf);

    unint64_t v42 = v40;
    id v43 = *v39;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_socks5_connection_start_block_invoke;
    uint64_t v88 = (NWConcrete_nw_socks5_connection *)&unk_1E524BAA8;
    int v44 = v42;
    *(void *)&long long v89 = v44;
    dispatch_async(v43, buf);

    goto LABEL_62;
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    uint64_t v45 = *(void *)(v76 + 32);
    nw_endpoint_t v46 = nw_connection_copy_endpoint(v11);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_socks5_server_start_block_invoke";
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v45;
    *(_WORD *)&unsigned char buf[22] = 2112;
    uint64_t v88 = (NWConcrete_nw_socks5_connection *)v46;
    _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_ERROR, "%{public}s %@ failed to create new connection from %@", buf, 0x20u);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v47 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_socks5_server_start_block_invoke";
  int v48 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v86.receiver) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v48, &v86, &type)) {
    goto LABEL_60;
  }
  if (LOBYTE(v86.receiver) == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v49 = (id)gLogObj;
    os_log_type_t v50 = (os_log_type_t)v86.receiver;
    if (os_log_type_enabled(v49, (os_log_type_t)v86.receiver))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socks5_server_start_block_invoke";
      _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s nw_socks5_connection_create failed", buf, 0xCu);
    }
LABEL_59:

LABEL_60:
    if (!v48) {
      goto LABEL_62;
    }
LABEL_61:
    free(v48);
    goto LABEL_62;
  }
  if (type == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v49 = (id)gLogObj;
    os_log_type_t v54 = (os_log_type_t)v86.receiver;
    if (os_log_type_enabled(v49, (os_log_type_t)v86.receiver))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socks5_server_start_block_invoke";
      _os_log_impl(&dword_1830D4000, v49, v54, "%{public}s nw_socks5_connection_create failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_59;
  }
  unint64_t v51 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v49 = (id)gLogObj;
  os_log_type_t v52 = (os_log_type_t)v86.receiver;
  BOOL v53 = os_log_type_enabled(v49, (os_log_type_t)v86.receiver);
  if (!v51)
  {
    if (v53)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socks5_server_start_block_invoke";
      _os_log_impl(&dword_1830D4000, v49, v52, "%{public}s nw_socks5_connection_create failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_59;
  }
  if (v53)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_socks5_server_start_block_invoke";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v51;
    _os_log_impl(&dword_1830D4000, v49, v52, "%{public}s nw_socks5_connection_create failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v51);
  if (v48) {
    goto LABEL_61;
  }
LABEL_62:
}

void sub_18390F5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void __nw_socks5_server_start_block_invoke_11(uint64_t a1)
{
  nw_array_append(*(void *)(*(void *)(a1 + 32) + 80), *(void **)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 108);
  if (v3 != -1)
  {
    *(_DWORD *)(v2 + 108) = v3 + 1;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v4 = *(void *)(v2 + 80);
  if (v4)
  {
    unint64_t v5 = (uint64_t)(*(void *)(v4 + 24) - *(void *)(v4 + 16)) >> 3;
    if (v5 > *(unsigned int *)(v2 + 104))
    {
      if (v5 >= 0xFFFFFFFF) {
        LODWORD(v5) = -1;
      }
      *(_DWORD *)(v2 + 104) = v5;
    }
  }
}

void __nw_socks5_server_start_block_invoke_2_12(uint64_t a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  int v3 = v2 + 6;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __nw_socks5_server_start_block_invoke_3;
  v4[3] = &unk_1E524B9A0;
  unint64_t v5 = v2;
  id v6 = *(id *)(a1 + 40);
  os_unfair_lock_lock(v3);
  __nw_socks5_server_start_block_invoke_3((uint64_t)v4);
  os_unfair_lock_unlock(v3);
}

void __nw_socks5_server_start_block_invoke_3(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  BOOL v2 = nw_array_duplicate_array_without_object(*(void *)(*(void *)(a1 + 32) + 80), *(void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 80);
  *(void *)(v3 + 80) = v2;

  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 80);
  if (v5) {
    uint64_t v6 = (uint64_t)(*(void *)(v5 + 24) - *(void *)(v5 + 16)) >> 3;
  }
  else {
    uint64_t v6 = 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 40);
    int v10 = *(_DWORD *)(v8 + 132);
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_socks5_server_start_block_invoke_3";
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v8;
    *(_WORD *)&unsigned char buf[22] = 2112;
    uint64_t v31 = v9;
    LOWORD(v32) = 2048;
    *(void *)((char *)&v32 + 2) = v6;
    WORD5(v32) = 1024;
    HIDWORD(v32) = v10;
    _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %@ cancelled connection %@, %zu remaining, busy count %u", buf, 0x30u);
  }

  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 88);
  if (v11)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v31 = __Block_byref_object_copy__36823;
    *(void *)&long long v32 = __Block_byref_object_dispose__36824;
    *((void *)&v32 + 1) = 0;
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __nw_socks5_server_start_block_invoke_13;
    v19[3] = &unk_1E524A1A8;
    id v20 = *(id *)(a1 + 40);
    id v21 = buf;
    nw_dictionary_apply(v11, (uint64_t)v19);
    id v12 = *(void **)(*(void *)&buf[8] + 40);
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 88);
      string_ptr = xpc_string_get_string_ptr(v12);
      nw_dictionary_set_value(v13, string_ptr, 0);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v15 = (id)gLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        uint64_t v16 = *(void *)(a1 + 40);
        size_t count = nw_dictionary_get_count(*(void *)(v17 + 88));
        *(_DWORD *)os_log_type_t v22 = 136446978;
        __int16 v23 = "nw_socks5_server_start_block_invoke_2";
        __int16 v24 = 2112;
        uint64_t v25 = v17;
        __int16 v26 = 2112;
        uint64_t v27 = v16;
        __int16 v28 = 2048;
        size_t v29 = count;
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s %@ removed connection %@ from udp associate %zu remaining", v22, 0x2Au);
      }
    }
    _Block_object_dispose(buf, 8);
  }
}

void sub_18390FA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36823(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__36824(uint64_t a1)
{
}

BOOL __nw_socks5_server_start_block_invoke_13(uint64_t a1, char *string, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 == a3)
  {
    xpc_object_t v6 = xpc_string_create(string);
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  return v4 != a3;
}

void __nw_socks5_server_start_block_invoke_2(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(id *)(a1 + 32);
  id v5 = v3;
  xpc_object_t v6 = (const void *)v4[7];
  if (v6)
  {
    uint64_t v7 = _Block_copy(v6);
    if (v2 == 4)
    {
      uint64_t v8 = (void *)v4[7];
      v4[7] = 0;
    }
    uint64_t v9 = v4[6];
    *(void *)block = MEMORY[0x1E4F143A8];
    *(void *)&block[8] = 3221225472;
    *(void *)&block[16] = __nw_socks5_server_call_state_handler_locked_block_invoke;
    uint64_t v33 = &unk_1E524BB48;
    id v35 = v7;
    int v36 = v2;
    id v34 = v5;
    id v10 = v7;
    dispatch_async(v9, block);
  }
  if (*(_DWORD *)(a1 + 48) == 3)
  {
    uint64_t v11 = *(void **)(a1 + 40);
    if (v11)
    {
      id v12 = *(void **)(a1 + 32);
      id v13 = v11;
      char v14 = (const void *)v12[8];
      if (v14)
      {
        id v15 = v12;
        uint64_t v16 = _Block_copy(v14);
        uint64_t v17 = v15[6];
        *(void *)block = MEMORY[0x1E4F143A8];
        *(void *)&block[8] = 3221225472;
        *(void *)&block[16] = __nw_socks5_server_call_error_handler_locked_block_invoke;
        uint64_t v33 = &unk_1E524B950;
        id v35 = v16;
        id v34 = v13;
        id v18 = v16;
        dispatch_async(v17, block);
        char v19 = (void *)v12[8];
        v12[8] = 0;
      }
      nw_socks5_server_cancel_locked(*(void **)(a1 + 32));
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v20 = (id)gLogObj;
    *(_DWORD *)block = 136446210;
    *(void *)&void block[4] = "nw_socks5_server_start_block_invoke_2";
    id v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v21, &type, &v30)) {
      goto LABEL_24;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v22 = (id)gLogObj;
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_socks5_server_start_block_invoke";
        __int16 v24 = "%{public}s listener reported state of failed with NULL error";
LABEL_21:
        __int16 v28 = v22;
        os_log_type_t v29 = v23;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v28, v29, v24, block, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v22 = (id)gLogObj;
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)block = 136446466;
          *(void *)&void block[4] = "nw_socks5_server_start_block_invoke";
          *(_WORD *)&block[12] = 2082;
          *(void *)&block[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v26, "%{public}s listener reported state of failed with NULL error, dumping backtrace:%{public}s", block, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v27)
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_socks5_server_start_block_invoke";
        __int16 v24 = "%{public}s listener reported state of failed with NULL error, no backtrace";
        __int16 v28 = v22;
        os_log_type_t v29 = v26;
        goto LABEL_22;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v22 = (id)gLogObj;
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_socks5_server_start_block_invoke";
        __int16 v24 = "%{public}s listener reported state of failed with NULL error, backtrace limit exceeded";
        goto LABEL_21;
      }
    }

LABEL_24:
    if (v21) {
      free(v21);
    }
  }
}

uint64_t __nw_socks5_server_call_state_handler_locked_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 32));
}

uint64_t __nw_socks5_server_call_error_handler_locked_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void nw_socks5_server_cancel_locked(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 136446466;
    uint64_t v16 = "nw_socks5_server_cancel_locked";
    __int16 v17 = 2048;
    id v18 = v1;
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %p", (uint8_t *)&v15, 0x16u);
  }

  uint64_t v3 = (void *)*((void *)v1 + 8);
  *((void *)v1 + 8) = 0;

  uint64_t v4 = *((void *)v1 + 9);
  if (v4)
  {
    nw_listener_cancel(v4);
    id v5 = (void *)*((void *)v1 + 9);
    *((void *)v1 + 9) = 0;
  }
  nw_socks5_server_cancel_connections_locked(v1);
  xpc_object_t v6 = *((void *)v1 + 15);
  if (v6)
  {
    dispatch_source_cancel(v6);
    if ((*((unsigned char *)v1 + 136) & 2) == 0)
    {
      *((unsigned char *)v1 + 136) |= 2u;
      dispatch_resume(*((dispatch_object_t *)v1 + 15));
    }
    uint64_t v7 = (void *)*((void *)v1 + 15);
    *((void *)v1 + 15) = 0;
  }
  IOPMAssertionID v8 = *((_DWORD *)v1 + 32);
  if (v8)
  {
    IOPMAssertionRelease(v8);
    uint64_t v9 = mach_continuous_time();
    if (v9 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v9;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = *((_DWORD *)v1 + 32);
      unint64_t v13 = nw_delta_nanos(*((void *)v1 + 14), v10);
      uint64_t v16 = "nw_socks5_server_cancel_locked";
      __int16 v17 = 2112;
      int v15 = 136446978;
      id v18 = v1;
      __int16 v19 = 1024;
      int v20 = v12;
      __int16 v21 = 2048;
      unint64_t v22 = v13 / 0x3B9ACA00;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s %@ released power assertion: %u after %llus", (uint8_t *)&v15, 0x26u);
    }

    *((void *)v1 + 14) = v10;
    *((_DWORD *)v1 + 32) = 0;
  }
  char v14 = (void *)*((void *)v1 + 2);
  if (v14)
  {
    *((void *)v1 + 2) = 0;
  }
}

void nw_socks5_server_cancel(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v2 = (id)gLogObj;
  uint64_t v3 = v2;
  if (v1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v16 = "nw_socks5_server_cancel";
      __int16 v17 = 2114;
      id v18 = (char *)v1;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ cancel", buf, 0x16u);
    }

    uint64_t v4 = v1[4];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __nw_socks5_server_cancel_block_invoke;
    block[3] = &unk_1E524BAA8;
    int v12 = v1;
    dispatch_async(v4, block);

    goto LABEL_5;
  }
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_socks5_server_cancel";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_socks5_server_cancel";
        IOPMAssertionID v8 = "%{public}s called with null server";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        xpc_object_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v16 = "nw_socks5_server_cancel";
            __int16 v17 = 2082;
            id v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v10) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_socks5_server_cancel";
        IOPMAssertionID v8 = "%{public}s called with null server, no backtrace";
        goto LABEL_19;
      }
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_socks5_server_cancel";
        IOPMAssertionID v8 = "%{public}s called with null server, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v5) {
    free(v5);
  }
LABEL_5:
}

void __nw_socks5_server_cancel_block_invoke(uint64_t a1)
{
  id v1 = *(os_unfair_lock_s **)(a1 + 32);
  int v2 = v1 + 6;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __nw_socks5_server_cancel_block_invoke_2;
  v3[3] = &unk_1E524BAA8;
  uint64_t v4 = v1;
  os_unfair_lock_lock(v2);
  __nw_socks5_server_cancel_block_invoke_2((uint64_t)v3);
  os_unfair_lock_unlock(v2);
}

void __nw_socks5_server_cancel_block_invoke_2(uint64_t a1)
{
}

void __nw_socks5_server_handle_busy_changed_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1E4F2EEB0])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (*(_DWORD *)(v2 + 132))
    {
      uint64_t v3 = *(NSObject **)(v2 + 120);
      if (v3 && (*(unsigned char *)(v2 + 136) & 2) != 0)
      {
        dispatch_suspend(v3);
        *(unsigned char *)(*(void *)(a1 + 32) + 136) &= ~2u;
        uint64_t v2 = *(void *)(a1 + 32);
      }
      if (!*(_DWORD *)(v2 + 128))
      {
        uint64_t v4 = (uint64_t *)(id)v2;
        keys[0] = xmmword_1E5240958;
        keys[1] = *(_OWORD *)off_1E5240968;
        os_log_type_t v50 = @"TimeoutAction";
        int v36 = 10800;
        int valuePtr = 255;
        CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
        CFStringRef v7 = CFStringCreateWithFormat(v5, 0, @"%@", v4);
        CFNumberRef v8 = CFNumberCreate(v5, kCFNumberIntType, &v36);
        CFNumberRef v9 = v8;
        values[0] = @"PreventUserIdleSystemSleep";
        values[1] = v6;
        values[2] = (void *)v7;
        values[3] = v8;
        values[4] = @"TimeoutActionTurnOff";
        if (v6 && v7 && v8)
        {
          CFDictionaryRef v10 = CFDictionaryCreate(v5, (const void **)keys, (const void **)values, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        else
        {
          CFDictionaryRef v10 = 0;
          CFDictionaryRef v18 = 0;
          if (!v6) {
            goto LABEL_18;
          }
        }
        CFRelease(v6);
        CFDictionaryRef v18 = v10;
LABEL_18:
        if (v7) {
          CFRelease(v7);
        }
        if (v9) {
          CFRelease(v9);
        }
        if (!v18)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v22 = (id)gLogObj;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v39 = "nw_socks5_server_create_power_assertion";
            __int16 v40 = 2112;
            id v41 = v4;
            _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, "%{public}s %@ Failed to create power assertion properties", buf, 0x16u);
          }

          IOPMAssertionID v21 = 0;
          goto LABEL_40;
        }
        IOPMAssertionID AssertionID = 0;
        unsigned int v19 = IOPMAssertionCreateWithProperties(v18, &AssertionID);
        CFRelease(v18);
        if (v19)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v20 = (id)gLogObj;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136447490;
            unint64_t v39 = "nw_socks5_server_create_power_assertion";
            __int16 v40 = 2112;
            id v41 = v4;
            __int16 v42 = 1024;
            IOPMAssertionID v43 = v19;
            __int16 v44 = 1024;
            *(_DWORD *)uint64_t v45 = v19 >> 26;
            *(_WORD *)&v45[4] = 1024;
            *(_DWORD *)&v45[6] = (v19 >> 14) & 0xFFF;
            __int16 v46 = 1024;
            int v47 = v19 & 0x3FFF;
            _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s %@ IOPMAssertionCreateWithProperties failed: %x (system: %d, subsystem: %d, code: %d)", buf, 0x2Eu);
          }

          IOPMAssertionID v21 = 0;
          goto LABEL_40;
        }
        uint64_t v23 = mach_continuous_time();
        if (v23 <= 1) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = v23;
        }
        uint64_t v25 = v4[14];
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v26 = (id)gLogObj;
        BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
        if (v25)
        {
          if (v27)
          {
            IOPMAssertionID v28 = AssertionID;
            unint64_t v29 = nw_delta_nanos(v4[14], v24);
            unint64_t v39 = "nw_socks5_server_create_power_assertion";
            __int16 v40 = 2112;
            *(_DWORD *)buf = 136446978;
            id v41 = v4;
            __int16 v42 = 1024;
            IOPMAssertionID v43 = v28;
            __int16 v44 = 2048;
            *(void *)uint64_t v45 = v29 / 0x3B9ACA00;
            char v30 = "%{public}s %@ created power assertion: %u after %llus";
            uint64_t v31 = v26;
            uint32_t v32 = 38;
LABEL_38:
            _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEFAULT, v30, buf, v32);
          }
        }
        else if (v27)
        {
          *(_DWORD *)buf = 136446722;
          unint64_t v39 = "nw_socks5_server_create_power_assertion";
          __int16 v40 = 2112;
          id v41 = v4;
          __int16 v42 = 1024;
          IOPMAssertionID v43 = AssertionID;
          char v30 = "%{public}s %@ created power assertion: %u";
          uint64_t v31 = v26;
          uint32_t v32 = 28;
          goto LABEL_38;
        }

        v4[14] = v24;
        IOPMAssertionID v21 = AssertionID;
LABEL_40:

        *(_DWORD *)(*(void *)(a1 + 32) + 128) = v21;
      }
    }
    else if (*(_DWORD *)(v2 + 128))
    {
      uint64_t v11 = *(NSObject **)(v2 + 120);
      if (v11) {
        goto LABEL_14;
      }
      dispatch_source_t v12 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v2 + 32));
      uint64_t v13 = *(void *)(a1 + 32);
      char v14 = *(void **)(v13 + 120);
      *(void *)(v13 + 120) = v12;

      *(unsigned char *)(*(void *)(a1 + 32) + 136) &= ~2u;
      int v15 = *(void **)(a1 + 32);
      uint64_t v16 = v15[15];
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = __nw_socks5_server_handle_busy_changed_block_invoke_2;
      handler[3] = &unk_1E524BAA8;
      id v34 = v15;
      dispatch_source_set_event_handler(v16, handler);

      uint64_t v2 = *(void *)(a1 + 32);
      uint64_t v11 = *(NSObject **)(v2 + 120);
      if (v11)
      {
LABEL_14:
        if ((*(unsigned char *)(v2 + 136) & 2) == 0)
        {
          dispatch_time_t v17 = dispatch_time(0, 5000000000);
          dispatch_source_set_timer(v11, v17, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
          dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 120));
          *(unsigned char *)(*(void *)(a1 + 32) + 136) |= 2u;
        }
      }
    }
  }
}

void __nw_socks5_server_handle_busy_changed_block_invoke_2(uint64_t a1)
{
  id v1 = *(os_unfair_lock_s **)(a1 + 32);
  uint64_t v2 = v1 + 6;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __nw_socks5_server_handle_busy_changed_block_invoke_3;
  v3[3] = &unk_1E524BAA8;
  uint64_t v4 = v1;
  os_unfair_lock_lock(v2);
  __nw_socks5_server_handle_busy_changed_block_invoke_3((uint64_t)v3);
  os_unfair_lock_unlock(v2);
}

void __nw_socks5_server_handle_busy_changed_block_invoke_3(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 120);
  if (v3 && (*(unsigned char *)(v2 + 136) & 2) != 0)
  {
    dispatch_suspend(v3);
    *(unsigned char *)(*(void *)(a1 + 32) + 136) &= ~2u;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  if (!*(_DWORD *)(v2 + 132))
  {
    IOPMAssertionID v4 = *(_DWORD *)(v2 + 128);
    if (v4)
    {
      IOPMAssertionRelease(v4);
      uint64_t v5 = mach_continuous_time();
      if (v5 <= 1) {
        uint64_t v6 = 1;
      }
      else {
        uint64_t v6 = v5;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      CFStringRef v7 = (id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        int v9 = *(_DWORD *)(v8 + 128);
        unint64_t v10 = nw_delta_nanos(*(void *)(v8 + 112), v6);
        dispatch_source_t v12 = "nw_socks5_server_handle_busy_changed_block_invoke_3";
        __int16 v13 = 2112;
        int v11 = 136446978;
        uint64_t v14 = v8;
        __int16 v15 = 1024;
        int v16 = v9;
        __int16 v17 = 2048;
        unint64_t v18 = v10 / 0x3B9ACA00;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %@ released power assertion: %u after %llus", (uint8_t *)&v11, 0x26u);
      }

      *(void *)(*(void *)(a1 + 32) + 112) = v6;
      *(_DWORD *)(*(void *)(a1 + 32) + 128) = 0;
    }
  }
}

char *nw_shoes_server_create(void *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = nw_socks5_server_create(a1, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[136] |= 1u;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    IOPMAssertionID v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136446466;
      uint64_t v8 = "nw_shoes_server_create";
      __int16 v9 = 2114;
      unint64_t v10 = v3;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ created", (uint8_t *)&v7, 0x16u);
    }

    uint64_t v5 = v3;
  }

  return v3;
}

void nw_shoes_server_set_error_handler(void *a1, void *a2)
{
  id v3 = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __nw_shoes_server_set_error_handler_block_invoke;
  v5[3] = &unk_1E52485F8;
  id v6 = v3;
  id v4 = v3;
  nw_socks5_server_set_error_handler(a1, v5);
}

void __nw_shoes_server_set_error_handler_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = v3;
  if (v3) {
    CFErrorRef v4 = nw_error_copy_cf_error(v3);
  }
  else {
    CFErrorRef v4 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t nw_shoes_server_fillout_statistics(void *a1, void *a2, unint64_t a3, char a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v7 = a1;
  uint64_t v8 = v7;
  if (!v7)
  {
    __int16 v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v14, &type, &v23)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
        __int16 v17 = "%{public}s called with null server";
LABEL_39:
        _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
      }
LABEL_40:

LABEL_41:
      if (v14) {
        free(v14);
      }
      goto LABEL_11;
    }
    if (!v23)
    {
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
        __int16 v17 = "%{public}s called with null server, backtrace limit exceeded";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v20 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
        __int16 v17 = "%{public}s called with null server, no backtrace";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      IOPMAssertionID v21 = "%{public}s called with null server, dumping backtrace:%{public}s";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v15, v16, v21, buf, 0x16u);
    }
LABEL_30:

    free(backtrace_string);
    goto LABEL_41;
  }
  if (!a2)
  {
    unint64_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v14, &type, &v23)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
        __int16 v17 = "%{public}s called with null out_stats";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (!v23)
    {
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
        __int16 v17 = "%{public}s called with null out_stats, backtrace limit exceeded";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v22 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
        __int16 v17 = "%{public}s called with null out_stats, no backtrace";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      IOPMAssertionID v21 = "%{public}s called with null out_stats, dumping backtrace:%{public}s";
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  if (a3 != 8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a3;
      *(_WORD *)&unsigned char buf[22] = 2048;
      uint64_t v26 = 8;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s Unsupported stats size: %zu, expected %zu", buf, 0x20u);
    }

    if (a3 >= 8) {
      size_t v11 = 8;
    }
    else {
      size_t v11 = a3;
    }
    bzero(a2, v11);
LABEL_11:
    uint64_t v9 = 0;
    goto LABEL_12;
  }
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = __nw_socks5_server_fillout_statistics_block_invoke;
  uint64_t v26 = (uint64_t)&unk_1E524AE68;
  IOPMAssertionID v28 = a2;
  BOOL v27 = v7;
  char v29 = a4;
  os_unfair_lock_lock(v8 + 6);
  __nw_socks5_server_fillout_statistics_block_invoke((uint64_t)buf);
  os_unfair_lock_unlock(v8 + 6);

  uint64_t v9 = 1;
LABEL_12:

  return v9;
}

uint64_t __nw_socks5_server_fillout_statistics_block_invoke(uint64_t result)
{
  **(void **)(result + 40) = *(void *)(*(void *)(result + 32) + 104);
  if (*(unsigned char *)(result + 48)) {
    *(void *)(*(void *)(result + 32) + 104) = 0;
  }
  return result;
}

void sub_183911DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183912F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_fallback_start_fallback_child(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    unint64_t v94 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v132 = "nw_endpoint_fallback_start_fallback_child";
    int v95 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v129 = 0;
    if (__nwlog_fault(v95, &type, &v129))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v96 = __nwlog_obj();
        os_log_type_t v97 = type;
        if (os_log_type_enabled(v96, type))
        {
          *(_DWORD *)buf = 136446210;
          int v132 = "nw_endpoint_fallback_start_fallback_child";
          _os_log_impl(&dword_1830D4000, v96, v97, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v129)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v96 = __nwlog_obj();
        os_log_type_t v99 = type;
        BOOL v100 = os_log_type_enabled(v96, type);
        if (backtrace_string)
        {
          if (v100)
          {
            *(_DWORD *)buf = 136446466;
            int v132 = "nw_endpoint_fallback_start_fallback_child";
            __int16 v133 = 2082;
            unint64_t v134 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v96, v99, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_111;
        }
        if (v100)
        {
          *(_DWORD *)buf = 136446210;
          int v132 = "nw_endpoint_fallback_start_fallback_child";
          _os_log_impl(&dword_1830D4000, v96, v99, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v96 = __nwlog_obj();
        os_log_type_t v101 = type;
        if (os_log_type_enabled(v96, type))
        {
          *(_DWORD *)buf = 136446210;
          int v132 = "nw_endpoint_fallback_start_fallback_child";
          _os_log_impl(&dword_1830D4000, v96, v101, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_111:
    if (v95) {
      free(v95);
    }
    goto LABEL_94;
  }
  id v3 = v1;
  uint64_t mode = v3->mode;

  if (mode == 4)
  {
    uint64_t v5 = nw_endpoint_handler_copy_fallback(v3);
    id v6 = v5;
    if ((*((unsigned char *)v5 + 108) & 0x40) != 0)
    {
      BOOL v27 = v3;
      char v28 = *((unsigned char *)v27 + 268);

      if ((v28 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v13 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          int v120 = v13;
          char v29 = v27;

          uint64_t v30 = v29;
          char v31 = *((unsigned char *)v27 + 268);

          if (v31) {
            uint32_t v32 = "dry-run ";
          }
          else {
            uint32_t v32 = "";
          }
          uint64_t v125 = v6;
          nw_endpoint_t v33 = nw_endpoint_handler_copy_endpoint(v30);
          logging_description = nw_endpoint_get_logging_description(v33);
          id_str = v29->id_str;
          int v36 = v30;
          uint64_t v37 = v36;
          uint64_t v38 = v36[30];
          if (v38 > 5) {
            unint64_t v39 = "unknown-state";
          }
          else {
            unint64_t v39 = off_1E523FB38[v38];
          }

          os_log_type_t v66 = v37;
          BOOL v67 = v66;
          int v68 = v3->mode;
          BOOL v69 = "path";
          switch(v68)
          {
            case 0:
              break;
            case 1:
              BOOL v69 = "resolver";
              break;
            case 2:
              BOOL v69 = nw_endpoint_flow_mode_string(v66[31]);
              break;
            case 3:
              BOOL v69 = "proxy";
              break;
            case 4:
              BOOL v69 = "fallback";
              break;
            case 5:
              BOOL v69 = "transform";
              break;
            default:
              BOOL v69 = "unknown-mode";
              break;
          }

          uint64_t v88 = v67;
          os_unfair_lock_lock((os_unfair_lock_t)v88 + 28);
          id v89 = v88[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v88 + 28);

          *(_DWORD *)buf = 136447746;
          int v132 = "nw_endpoint_fallback_start_fallback_child";
          __int16 v133 = 2082;
          unint64_t v134 = id_str;
          __int16 v135 = 2082;
          int v136 = v32;
          __int16 v137 = 2082;
          unint64_t v138 = logging_description;
          __int16 v139 = 2082;
          int v140 = v39;
          __int16 v141 = 2082;
          unint64_t v142 = v69;
          __int16 v143 = 2114;
          id v144 = v89;
          __int16 v13 = v120;
          _os_log_impl(&dword_1830D4000, v120, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Already started fallback, skipping", buf, 0x48u);

          id v6 = v125;
        }
        goto LABEL_92;
      }
      goto LABEL_93;
    }
    uint64_t v7 = *((void *)v5 + 9);
    if (v7)
    {
      nw_queue_cancel_source(v7);
      *((void *)v6 + 9) = 0;
    }
    uint64_t v8 = (void *)*((void *)v6 + 5);
    if (!v8)
    {
      __int16 v40 = v3;
      char v41 = *((unsigned char *)v40 + 268);

      if ((v41 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v13 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          uint64_t v121 = v13;
          __int16 v42 = v40;

          IOPMAssertionID v43 = v42;
          char v44 = *((unsigned char *)v40 + 268);

          if (v44) {
            uint64_t v45 = "dry-run ";
          }
          else {
            uint64_t v45 = "";
          }
          unint64_t v126 = v6;
          nw_endpoint_t v46 = nw_endpoint_handler_copy_endpoint(v43);
          int v47 = nw_endpoint_get_logging_description(v46);
          int v48 = v42->id_str;
          uint64_t v49 = v43;
          os_log_type_t v50 = v49;
          uint64_t v51 = v49[30];
          if (v51 > 5) {
            os_log_type_t v52 = "unknown-state";
          }
          else {
            os_log_type_t v52 = off_1E523FB38[v51];
          }

          uint64_t v80 = v50;
          unint64_t v81 = v80;
          int v82 = v3->mode;
          int v83 = "path";
          switch(v82)
          {
            case 0:
              break;
            case 1:
              int v83 = "resolver";
              break;
            case 2:
              int v83 = nw_endpoint_flow_mode_string(v80[31]);
              break;
            case 3:
              int v83 = "proxy";
              break;
            case 4:
              int v83 = "fallback";
              break;
            case 5:
              int v83 = "transform";
              break;
            default:
              int v83 = "unknown-mode";
              break;
          }

          uint64_t v90 = v81;
          os_unfair_lock_lock((os_unfair_lock_t)v90 + 28);
          id v91 = v90[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v90 + 28);

          *(_DWORD *)buf = 136447746;
          int v132 = "nw_endpoint_fallback_start_fallback_child";
          __int16 v133 = 2082;
          unint64_t v134 = v48;
          __int16 v135 = 2082;
          int v136 = v45;
          __int16 v137 = 2082;
          unint64_t v138 = v47;
          __int16 v139 = 2082;
          int v140 = v52;
          __int16 v141 = 2082;
          unint64_t v142 = v83;
          __int16 v143 = 2114;
          id v144 = v91;
          __int16 v13 = v121;
          _os_log_impl(&dword_1830D4000, v121, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No fallback child found", buf, 0x48u);

          id v6 = v126;
        }
        goto LABEL_92;
      }
      goto LABEL_93;
    }
    uint64_t v9 = v8;
    int v10 = v9[30];

    if (v10 == 5)
    {
      size_t v11 = v3;
      char v12 = *((unsigned char *)v11 + 268);

      if ((v12 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v13 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          unint64_t v119 = v13;
          uint64_t v14 = v11;

          __int16 v15 = v14;
          char v16 = *((unsigned char *)v11 + 268);

          if (v16) {
            __int16 v17 = "dry-run ";
          }
          else {
            __int16 v17 = "";
          }
          int v124 = v6;
          nw_endpoint_t v18 = nw_endpoint_handler_copy_endpoint(v15);
          uint64_t v19 = nw_endpoint_get_logging_description(v18);
          BOOL v20 = v14->id_str;
          IOPMAssertionID v21 = v15;
          BOOL v22 = v21;
          uint64_t v23 = v21[30];
          if (v23 > 5) {
            uint64_t v24 = "unknown-state";
          }
          else {
            uint64_t v24 = off_1E523FB38[v23];
          }

          char v84 = v22;
          unint64_t v85 = v84;
          int v86 = v3->mode;
          int v87 = "path";
          switch(v86)
          {
            case 0:
              break;
            case 1:
              int v87 = "resolver";
              break;
            case 2:
              int v87 = nw_endpoint_flow_mode_string(v84[31]);
              break;
            case 3:
              int v87 = "proxy";
              break;
            case 4:
              int v87 = "fallback";
              break;
            case 5:
              int v87 = "transform";
              break;
            default:
              int v87 = "unknown-mode";
              break;
          }

          uint64_t v92 = v85;
          os_unfair_lock_lock((os_unfair_lock_t)v92 + 28);
          id v93 = v92[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v92 + 28);

          *(_DWORD *)buf = 136447746;
          int v132 = "nw_endpoint_fallback_start_fallback_child";
          __int16 v133 = 2082;
          unint64_t v134 = v20;
          __int16 v135 = 2082;
          int v136 = v17;
          __int16 v137 = 2082;
          unint64_t v138 = v19;
          __int16 v139 = 2082;
          int v140 = v24;
          __int16 v141 = 2082;
          unint64_t v142 = v87;
          __int16 v143 = 2114;
          id v144 = v93;
          __int16 v13 = v119;
          _os_log_impl(&dword_1830D4000, v119, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Fallback child already cancelled", buf, 0x48u);

          id v6 = v124;
        }
        goto LABEL_92;
      }
LABEL_93:

      goto LABEL_94;
    }
    if (*((_DWORD *)v6 + 26))
    {
      char v53 = *((unsigned char *)v6 + 108);
      if ((v53 & 0x20) != 0)
      {
        os_log_type_t v54 = nw_endpoint_handler_copy_current_path(*((void **)v6 + 4));
        __int16 v13 = v54;
        if (v54)
        {
          int v55 = v54[12].isa;
          BOOL v56 = v55;
          if (v55 && nw_interface_get_type(v55) == nw_interface_type_cellular)
          {
            int minimize_logging = nw_endpoint_handler_get_minimize_logging(v3);
            char logging_disabled = nw_endpoint_handler_get_logging_disabled(v3);
            if (minimize_logging)
            {
              if (logging_disabled) {
                goto LABEL_53;
              }
              os_log_t v123 = v13;
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              uint64_t v109 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
              {
                loga = nw_endpoint_handler_get_id_string(v3);
                int v116 = nw_endpoint_handler_dry_run_string(v3);
                nw_endpoint_t v110 = nw_endpoint_handler_copy_endpoint(v3);
                unint64_t v111 = nw_endpoint_get_logging_description(v110);
                int v112 = nw_endpoint_handler_state_string(v3);
                uint64_t v113 = nw_endpoint_handler_mode_string(v3);
                id v114 = nw_endpoint_handler_copy_current_path(v3);
                *(_DWORD *)buf = 136447746;
                int v132 = "nw_endpoint_fallback_start_fallback_child";
                __int16 v133 = 2082;
                unint64_t v134 = (void *)loga;
                __int16 v135 = 2082;
                int v136 = v116;
                __int16 v137 = 2082;
                unint64_t v138 = v111;
                __int16 v139 = 2082;
                int v140 = v112;
                __int16 v141 = 2082;
                unint64_t v142 = v113;
                __int16 v143 = 2114;
                id v144 = v114;
                id v59 = v109;
                _os_log_impl(&dword_1830D4000, v109, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting fallback child, because the primary child already uses cellular", buf, 0x48u);

                __int16 v13 = v123;
              }
              else
              {
                id v59 = v109;
              }
            }
            else
            {
              if (logging_disabled)
              {
LABEL_53:
                nw_endpoint_handler_cancel(*((void **)v6 + 5), 0, 1);

LABEL_92:
                goto LABEL_93;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              id v59 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
              {
                id_string = nw_endpoint_handler_get_id_string(v3);
                log = v59;
                unint64_t v122 = nw_endpoint_handler_dry_run_string(v3);
                id v61 = id_string;
                nw_endpoint_t v115 = nw_endpoint_handler_copy_endpoint(v3);
                uint64_t v62 = nw_endpoint_get_logging_description(v115);
                uint64_t v63 = nw_endpoint_handler_state_string(v3);
                os_log_type_t v64 = nw_endpoint_handler_mode_string(v3);
                id v65 = nw_endpoint_handler_copy_current_path(v3);
                *(_DWORD *)buf = 136447746;
                int v132 = "nw_endpoint_fallback_start_fallback_child";
                __int16 v133 = 2082;
                unint64_t v134 = (void *)v61;
                __int16 v135 = 2082;
                int v136 = v122;
                __int16 v137 = 2082;
                unint64_t v138 = v62;
                __int16 v139 = 2082;
                int v140 = v63;
                __int16 v141 = 2082;
                unint64_t v142 = v64;
                __int16 v143 = 2114;
                id v144 = v65;
                id v59 = log;
                _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting fallback child, because the primary child already uses cellular", buf, 0x48u);
              }
            }

            goto LABEL_53;
          }
        }
        else
        {
          BOOL v56 = 0;
        }

        char v53 = *((unsigned char *)v6 + 108);
      }
      *((unsigned char *)v6 + 108) = v53 | 0x40;
      v3->event = (nw_endpoint_handler_event_s)131077;
      nw_endpoint_handler_report(v3, 0, &v3->event.domain, 0);
      nw_endpoint_handler_start(*((void **)v6 + 5));
      goto LABEL_93;
    }
    if (nw_endpoint_handler_get_minimize_logging(v3))
    {
      if (nw_endpoint_handler_get_logging_disabled(v3)) {
        goto LABEL_64;
      }
      int v128 = v6;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v72 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v102 = nw_endpoint_handler_get_id_string(v3);
        uint64_t v103 = nw_endpoint_handler_dry_run_string(v3);
        nw_endpoint_t v104 = nw_endpoint_handler_copy_endpoint(v3);
        unint64_t v105 = nw_endpoint_get_logging_description(v104);
        unint64_t v106 = nw_endpoint_handler_state_string(v3);
        char v107 = nw_endpoint_handler_mode_string(v3);
        id v108 = nw_endpoint_handler_copy_current_path(v3);
        *(_DWORD *)buf = 136447746;
        int v132 = "nw_endpoint_fallback_start_fallback_child";
        __int16 v133 = 2082;
        unint64_t v134 = (void *)v102;
        __int16 v135 = 2082;
        int v136 = v103;
        __int16 v137 = 2082;
        unint64_t v138 = v105;
        __int16 v139 = 2082;
        int v140 = v106;
        __int16 v141 = 2082;
        unint64_t v142 = v107;
        __int16 v143 = 2114;
        id v144 = v108;
        _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting fallback child, disposition is set to no", buf, 0x48u);

        id v6 = v128;
      }
    }
    else
    {
      unint64_t v70 = v3;
      char v71 = *((unsigned char *)v70 + 268);

      if ((v71 & 0x20) != 0)
      {
LABEL_64:
        nw_endpoint_handler_cancel(*((void **)v6 + 5), 0, 1);
        goto LABEL_93;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v72 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v73 = nw_endpoint_handler_get_id_string(v70);
        os_log_type_t v74 = nw_endpoint_handler_dry_run_string(v70);
        unint64_t v127 = v6;
        nw_endpoint_t v75 = nw_endpoint_handler_copy_endpoint(v70);
        uint64_t v76 = nw_endpoint_get_logging_description(v75);
        id v77 = nw_endpoint_handler_state_string(v70);
        unint64_t v78 = nw_endpoint_handler_mode_string(v70);
        id v79 = nw_endpoint_handler_copy_current_path(v70);
        *(_DWORD *)buf = 136447746;
        int v132 = "nw_endpoint_fallback_start_fallback_child";
        __int16 v133 = 2082;
        unint64_t v134 = (void *)v73;
        __int16 v135 = 2082;
        int v136 = v74;
        __int16 v137 = 2082;
        unint64_t v138 = v76;
        __int16 v139 = 2082;
        int v140 = v77;
        __int16 v141 = 2082;
        unint64_t v142 = v78;
        __int16 v143 = 2114;
        id v144 = v79;
        _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting fallback child, disposition is set to no", buf, 0x48u);

        id v6 = v127;
      }
    }

    goto LABEL_64;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v25 = (id)gLogObj;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    if (mode > 5) {
      uint64_t v26 = "unknown-mode";
    }
    else {
      uint64_t v26 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446722;
    int v132 = "nw_endpoint_fallback_start_fallback_child";
    __int16 v133 = 2082;
    unint64_t v134 = (void *)v26;
    __int16 v135 = 2082;
    int v136 = "fallback";
    _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

LABEL_94:
}

void sub_183914024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183914808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183916B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  _Unwind_Resume(a1);
}

void ___ZL32nw_endpoint_fallback_start_timerP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1)
{
}

uint64_t nw_endpoint_fallback_receive_report(void *a1, uint64_t a2, int a3, _WORD *a4, void *a5, void *a6)
{
  uint64_t v309 = *MEMORY[0x1E4F143B8];
  int v10 = a1;
  id v279 = a5;
  id v11 = a6;
  int v278 = v10;
  unint64_t v280 = v11;
  if (!v11)
  {
    unint64_t v183 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v284 = "nw_endpoint_fallback_receive_report";
    unint64_t v184 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(type) = 16;
    char v281 = 0;
    if (__nwlog_fault(v184, &type, &v281))
    {
      if (type == 17)
      {
        uint64_t v185 = __nwlog_obj();
        os_log_type_t v186 = type;
        if (os_log_type_enabled(v185, (os_log_type_t)type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v284 = "nw_endpoint_fallback_receive_report";
          _os_log_impl(&dword_1830D4000, v185, v186, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else
      {
        if (v281)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          unint64_t v188 = __nwlog_obj();
          os_log_type_t v189 = type;
          BOOL v190 = os_log_type_enabled(v188, (os_log_type_t)type);
          if (backtrace_string)
          {
            if (v190)
            {
              *(_DWORD *)buf = 136446466;
              unint64_t v284 = "nw_endpoint_fallback_receive_report";
              __int16 v285 = 2082;
              int v286 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v188, v189, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
          }
          else
          {
            if (v190)
            {
              *(_DWORD *)buf = 136446210;
              unint64_t v284 = "nw_endpoint_fallback_receive_report";
              _os_log_impl(&dword_1830D4000, v188, v189, "%{public}s called with null handler, no backtrace", buf, 0xCu);
            }
          }
          goto LABEL_214;
        }
        uint64_t v185 = __nwlog_obj();
        os_log_type_t v191 = type;
        if (os_log_type_enabled(v185, (os_log_type_t)type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v284 = "nw_endpoint_fallback_receive_report";
          _os_log_impl(&dword_1830D4000, v185, v191, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_214:
    if (v184) {
      free(v184);
    }
    goto LABEL_28;
  }
  char v12 = (NWConcrete_nw_endpoint_handler *)v11;
  uint64_t mode = v12->mode;

  if (mode == 4)
  {
    uint64_t v274 = v12;
    nw_endpoint_handler_report(v12, v10, a4, v279);
    uint64_t v14 = nw_endpoint_handler_copy_fallback(v12);
    if ((*((unsigned char *)v14 + 108) & 0x40) == 0 && (a3 & 0xFFFFFFFE) == 4)
    {
      if (v279)
      {
        __int16 v15 = v279;
        int v16 = v15[2];

        if (v16 == 1)
        {
          __int16 v17 = v15;
          int v18 = v17[3];

          if (v18 == 89) {
            *((unsigned char *)v14 + 108) |= 1u;
          }
        }
      }
    }
    BOOL v20 = *((void *)v14 + 4);
    uint64_t v19 = *((void *)v14 + 5);
    unint64_t v277 = v14;
    if (v20 == v10)
    {
      uint64_t v25 = v19;
      uint64_t v275 = v25;
      int v273 = a3;
      if (!nw_endpoint_handler_get_minimize_logging(v12))
      {
        uint64_t v26 = v12;
        char v27 = *((unsigned char *)v26 + 268);

        if ((v27 & 0x20) != 0) {
          goto LABEL_59;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        char v28 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          log = v28;
          char v29 = v26;

          uint64_t v30 = v29;
          char v31 = *((unsigned char *)v26 + 268);

          if (v31) {
            uint32_t v32 = "dry-run ";
          }
          else {
            uint32_t v32 = "";
          }
          nw_endpoint_t v253 = nw_endpoint_handler_copy_endpoint(v30);
          logging_description = nw_endpoint_get_logging_description(v253);
          nw_endpoint_t v33 = v30;
          id v34 = v33;
          uint64_t v35 = v33[30];
          if (v35 > 5) {
            int v36 = "unknown-state";
          }
          else {
            int v36 = off_1E523FB38[v35];
          }
          uint64_t v241 = v36;

          int v47 = v34;
          int v48 = v47;
          int v49 = v12->mode;
          id v268 = a4;
          uint64_t v245 = v32;
          os_log_type_t v50 = "path";
          switch(v49)
          {
            case 0:
              break;
            case 1:
              os_log_type_t v50 = "resolver";
              break;
            case 2:
              os_log_type_t v50 = nw_endpoint_flow_mode_string(v47[31]);
              break;
            case 3:
              os_log_type_t v50 = "proxy";
              break;
            case 4:
              os_log_type_t v50 = "fallback";
              break;
            case 5:
              os_log_type_t v50 = "transform";
              break;
            default:
              os_log_type_t v50 = "unknown-mode";
              break;
          }

          int v55 = v48;
          os_unfair_lock_lock((os_unfair_lock_t)v55 + 28);
          id v56 = v55[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v55 + 28);

          id v57 = v56;
          id_string = nw_endpoint_handler_get_id_string(v10);
          id v59 = nw_endpoint_handler_dry_run_string(v10);
          nw_endpoint_t v60 = nw_endpoint_handler_copy_endpoint(v10);
          os_log_t v257 = v20;
          id v61 = nw_endpoint_get_logging_description(v60);
          id_str = v29->id_str;
          uint64_t v63 = nw_endpoint_handler_state_string(v10);
          os_log_type_t v64 = nw_endpoint_handler_mode_string(v278);
          id v65 = nw_endpoint_handler_copy_current_path(v278);
          *(_DWORD *)buf = 136449282;
          unint64_t v284 = "nw_endpoint_fallback_receive_report";
          __int16 v285 = 2082;
          int v286 = id_str;
          __int16 v287 = 2082;
          unint64_t v288 = v245;
          __int16 v289 = 2082;
          int v290 = logging_description;
          __int16 v291 = 2082;
          unint64_t v292 = v241;
          __int16 v293 = 2082;
          int v294 = v50;
          __int16 v295 = 2114;
          id v296 = v57;
          __int16 v297 = 2082;
          unint64_t v298 = (unint64_t)id_string;
          __int16 v299 = 2082;
          unint64_t v300 = v59;
          __int16 v301 = 2082;
          int v302 = v61;
          __int16 v303 = 2082;
          unint64_t v304 = v63;
          __int16 v305 = 2082;
          int v306 = v64;
          __int16 v307 = 2114;
          id v308 = v65;
          char v28 = log;
          _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received primary child report:[C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x84u);

          BOOL v20 = v257;
          a4 = v268;
        }
        goto LABEL_57;
      }
      unint64_t v271 = a4;
      if ((nw_endpoint_handler_get_logging_disabled(v12) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        unint64_t v192 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v192, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v193 = nw_endpoint_handler_get_id_string(v12);
          int v260 = nw_endpoint_handler_dry_run_string(v12);
          os_log_t logc = nw_endpoint_handler_copy_endpoint(v12);
          unint64_t v255 = nw_endpoint_get_logging_description(logc);
          unint64_t v251 = nw_endpoint_handler_state_string(v12);
          unint64_t v247 = nw_endpoint_handler_mode_string(v12);
          id v194 = nw_endpoint_handler_copy_current_path(v12);
          unint64_t v243 = nw_endpoint_handler_get_id_string(v278);
          uint64_t v195 = nw_endpoint_handler_dry_run_string(v278);
          nw_endpoint_t v196 = nw_endpoint_handler_copy_endpoint(v278);
          unint64_t v197 = nw_endpoint_get_logging_description(v196);
          int v198 = nw_endpoint_handler_state_string(v278);
          uint64_t v199 = nw_endpoint_handler_mode_string(v278);
          id v200 = nw_endpoint_handler_copy_current_path(v278);
          *(_DWORD *)buf = 136449282;
          unint64_t v284 = "nw_endpoint_fallback_receive_report";
          __int16 v285 = 2082;
          int v286 = (void *)v193;
          __int16 v287 = 2082;
          unint64_t v288 = v260;
          __int16 v289 = 2082;
          int v290 = v255;
          __int16 v291 = 2082;
          unint64_t v292 = v251;
          __int16 v293 = 2082;
          int v294 = v247;
          __int16 v295 = 2114;
          id v296 = v194;
          __int16 v297 = 2082;
          unint64_t v298 = (unint64_t)v243;
          __int16 v299 = 2082;
          unint64_t v300 = v195;
          __int16 v301 = 2082;
          int v302 = v197;
          __int16 v303 = 2082;
          unint64_t v304 = v198;
          __int16 v305 = 2082;
          int v306 = v199;
          __int16 v307 = 2114;
          id v308 = v200;
          char v28 = v192;
          _os_log_impl(&dword_1830D4000, v192, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received primary child report:[C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x84u);

          a4 = v271;
LABEL_57:

          int v10 = v278;
          uint64_t v25 = v275;
          uint64_t v14 = v277;
          char v12 = v274;
LABEL_58:
          a3 = v273;
LABEL_59:
          unint64_t v276 = v25;
          if (a3 < 2)
          {
            if (a3 != 1) {
              goto LABEL_71;
            }
            if (v20 != v10)
            {
              id v77 = (char *)v14 + 109;
              char v78 = *((unsigned char *)v14 + 109);
              if ((v78 & 1) == 0) {
                goto LABEL_63;
              }
              char v79 = 4;
LABEL_62:
              *id v77 = v78 & 0xFA | v79;
LABEL_63:
              unint64_t v81 = (_DWORD *)((char *)v14 + 48);
              int v80 = *((_DWORD *)v14 + 12);
              BOOL v82 = 1;
              goto LABEL_73;
            }
            int v84 = *((char *)v14 + 108);
            if ((v84 & 0x80000000) == 0)
            {
LABEL_71:
              unint64_t v81 = (_DWORD *)((char *)v14 + 48);
              int v80 = *((_DWORD *)v14 + 12);
              BOOL v82 = v20 != v10;
              if (v20 == v10 && v80 == 1) {
                goto LABEL_75;
              }
LABEL_73:
              if (v20 != v10 && v80 == 2)
              {
LABEL_75:
                if ((a3 - 3) <= 1)
                {
                  uint64_t v85 = *((void *)v14 + 10);
                  if (v85)
                  {
                    nw_queue_cancel_source(v85);
                    *((void *)v277 + 10) = 0;
                    char v12 = v274;
                  }
                }
                int v86 = v12;
                v86->state = a3;

                nw_endpoint_handler_report(v86, 0, a4, 0);
                goto LABEL_190;
              }
              int v87 = v12;
              os_log_t logb = v87->parameters;

              if (networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_no_fallback_full_stack))
              {
                int no_fullstack_fallback = 1;
                if (a3 != 2) {
                  goto LABEL_85;
                }
              }
              else
              {
                int no_fullstack_fallback = nw_parameters_get_no_fullstack_fallback(logb);
                if (a3 != 2) {
                  goto LABEL_85;
                }
              }
              if (*a4 == 3)
              {
                BOOL v89 = a4[1] == 5;
                goto LABEL_86;
              }
LABEL_85:
              BOOL v89 = 0;
LABEL_86:
              BOOL v90 = a3 == 3;
              if (no_fullstack_fallback) {
                BOOL v90 = v89;
              }
              if (a3 != 3 && !v90)
              {
                if (a3 == 4
                  || (v20 != v278 ? (char v91 = 4) : (char v91 = 2), (*((unsigned char *)v277 + 109) & v91) != 0))
                {
                  if (!v25) {
                    goto LABEL_170;
                  }
                  uint64_t v92 = v25;
                  int isa = (int)v92[15].isa;

                  if ((isa & 0xFFFFFFFE) == 4) {
                    goto LABEL_170;
                  }
                  if (v20 != v278)
                  {
                    if ((*((unsigned char *)v277 + 109) & 2) == 0)
                    {
LABEL_178:
                      __int16 v174 = 4;
LABEL_188:
                      v87->event.domain = 5;
                      v87->event.event = v174;
                      nw_endpoint_handler_report(v87, 0, &v87->event.domain, 0);
                      goto LABEL_189;
                    }
LABEL_170:
                    if (nw_endpoint_handler_get_minimize_logging(v87))
                    {
                      if (nw_endpoint_handler_get_logging_disabled(v87))
                      {
LABEL_177:
                        nw_endpoint_handler_handle_failure(v87);
                        if (v20 != v278) {
                          goto LABEL_178;
                        }
LABEL_187:
                        __int16 v174 = 3;
                        goto LABEL_188;
                      }
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                      }
                      uint64_t v166 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v166, OS_LOG_TYPE_DEBUG))
                      {
                        unint64_t v209 = nw_endpoint_handler_get_id_string(v87);
                        int v210 = nw_endpoint_handler_dry_run_string(v87);
                        nw_endpoint_t v211 = nw_endpoint_handler_copy_endpoint(v87);
                        unint64_t v212 = nw_endpoint_get_logging_description(v211);
                        unint64_t v213 = nw_endpoint_handler_state_string(v87);
                        int v214 = nw_endpoint_handler_mode_string(v87);
                        id v215 = nw_endpoint_handler_copy_current_path(v87);
                        *(_DWORD *)buf = 136447746;
                        unint64_t v284 = "nw_endpoint_fallback_receive_report";
                        __int16 v285 = 2082;
                        int v286 = (void *)v209;
                        __int16 v287 = 2082;
                        unint64_t v288 = v210;
                        __int16 v289 = 2082;
                        int v290 = v212;
                        __int16 v291 = 2082;
                        unint64_t v292 = v213;
                        __int16 v293 = 2082;
                        int v294 = v214;
                        __int16 v295 = 2114;
                        id v296 = v215;
                        _os_log_impl(&dword_1830D4000, v166, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed", buf, 0x48u);
                      }
                    }
                    else
                    {
                      unint64_t v164 = v87;
                      BOOL v165 = (*((unsigned char *)v164 + 268) & 0x20) == 0;

                      if (!v165) {
                        goto LABEL_177;
                      }
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                      }
                      uint64_t v166 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v166, OS_LOG_TYPE_INFO))
                      {
                        unint64_t v167 = nw_endpoint_handler_get_id_string(v164);
                        unint64_t v168 = nw_endpoint_handler_dry_run_string(v164);
                        nw_endpoint_t v169 = nw_endpoint_handler_copy_endpoint(v164);
                        uint64_t v170 = nw_endpoint_get_logging_description(v169);
                        unint64_t v171 = nw_endpoint_handler_state_string(v164);
                        unint64_t v172 = nw_endpoint_handler_mode_string(v164);
                        id v173 = nw_endpoint_handler_copy_current_path(v164);
                        *(_DWORD *)buf = 136447746;
                        unint64_t v284 = "nw_endpoint_fallback_receive_report";
                        __int16 v285 = 2082;
                        int v286 = (void *)v167;
                        __int16 v287 = 2082;
                        unint64_t v288 = v168;
                        __int16 v289 = 2082;
                        int v290 = v170;
                        __int16 v291 = 2082;
                        unint64_t v292 = v171;
                        __int16 v293 = 2082;
                        int v294 = v172;
                        __int16 v295 = 2114;
                        id v296 = v173;
                        _os_log_impl(&dword_1830D4000, v166, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed", buf, 0x48u);
                      }
                    }

                    goto LABEL_177;
                  }
                  if ((*((unsigned char *)v277 + 109) & 4) != 0) {
                    goto LABEL_170;
                  }
                  if ((*((unsigned char *)v277 + 108) & 1) == 0 || !*((void *)v277 + 5))
                  {
                    nw_endpoint_fallback_start_fallback_child(v87);
                    goto LABEL_187;
                  }
                  int minimize_logging = nw_endpoint_handler_get_minimize_logging(v87);
                  char logging_disabled = nw_endpoint_handler_get_logging_disabled(v87);
                  if (minimize_logging)
                  {
                    if (logging_disabled) {
                      goto LABEL_169;
                    }
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    unint64_t v156 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v156, OS_LOG_TYPE_DEBUG))
                    {
                      int v234 = nw_endpoint_handler_get_id_string(v87);
                      uint64_t v235 = nw_endpoint_handler_dry_run_string(v87);
                      nw_endpoint_t v236 = nw_endpoint_handler_copy_endpoint(v87);
                      int v237 = nw_endpoint_get_logging_description(v236);
                      uint64_t v238 = nw_endpoint_handler_state_string(v87);
                      unint64_t v239 = nw_endpoint_handler_mode_string(v87);
                      id v240 = nw_endpoint_handler_copy_current_path(v87);
                      *(_DWORD *)buf = 136447746;
                      unint64_t v284 = "nw_endpoint_fallback_receive_report";
                      __int16 v285 = 2082;
                      int v286 = (void *)v234;
                      __int16 v287 = 2082;
                      unint64_t v288 = v235;
                      __int16 v289 = 2082;
                      int v290 = v237;
                      __int16 v291 = 2082;
                      unint64_t v292 = v238;
                      __int16 v293 = 2082;
                      int v294 = v239;
                      __int16 v295 = 2114;
                      id v296 = v240;
                      _os_log_impl(&dword_1830D4000, v156, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received ECANCELED from primary child, cancelling race", buf, 0x48u);
                    }
                  }
                  else
                  {
                    if (logging_disabled)
                    {
LABEL_169:
                      nw_endpoint_handler_cancel(*((void **)v277 + 5), 0, 1);
                      goto LABEL_187;
                    }
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    unint64_t v156 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v156, OS_LOG_TYPE_INFO))
                    {
                      int v157 = nw_endpoint_handler_get_id_string(v87);
                      uint64_t v158 = nw_endpoint_handler_dry_run_string(v87);
                      nw_endpoint_t v159 = nw_endpoint_handler_copy_endpoint(v87);
                      unint64_t v160 = nw_endpoint_get_logging_description(v159);
                      int v161 = nw_endpoint_handler_state_string(v87);
                      uint64_t v162 = nw_endpoint_handler_mode_string(v87);
                      id v163 = nw_endpoint_handler_copy_current_path(v87);
                      *(_DWORD *)buf = 136447746;
                      unint64_t v284 = "nw_endpoint_fallback_receive_report";
                      __int16 v285 = 2082;
                      int v286 = (void *)v157;
                      __int16 v287 = 2082;
                      unint64_t v288 = v158;
                      __int16 v289 = 2082;
                      int v290 = v160;
                      __int16 v291 = 2082;
                      unint64_t v292 = v161;
                      __int16 v293 = 2082;
                      int v294 = v162;
                      __int16 v295 = 2114;
                      id v296 = v163;
                      _os_log_impl(&dword_1830D4000, v156, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received ECANCELED from primary child, cancelling race", buf, 0x48u);
                    }
                  }

                  goto LABEL_169;
                }
                if (v82 || !v89 || (*((unsigned char *)v277 + 108) & 0x42) != 2 || !*((void *)v277 + 9)) {
                  goto LABEL_189;
                }
                int v96 = nw_endpoint_handler_get_minimize_logging(v87);
                char v97 = nw_endpoint_handler_get_logging_disabled(v87);
                if (v96)
                {
                  if (v97) {
                    goto LABEL_119;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  unint64_t v98 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v226 = nw_endpoint_handler_get_id_string(v87);
                    uint64_t v227 = nw_endpoint_handler_dry_run_string(v87);
                    nw_endpoint_t v228 = nw_endpoint_handler_copy_endpoint(v87);
                    unint64_t v229 = nw_endpoint_get_logging_description(v228);
                    char v230 = nw_endpoint_handler_state_string(v87);
                    unsigned int v231 = nw_endpoint_handler_mode_string(v87);
                    id v232 = nw_endpoint_handler_copy_current_path(v87);
                    unint64_t v233 = *((void *)v277 + 3) / 0xF4240uLL;
                    *(_DWORD *)buf = 136448002;
                    unint64_t v284 = "nw_endpoint_fallback_receive_report";
                    __int16 v285 = 2082;
                    int v286 = (void *)v226;
                    __int16 v287 = 2082;
                    unint64_t v288 = v227;
                    __int16 v289 = 2082;
                    int v290 = v229;
                    __int16 v291 = 2082;
                    unint64_t v292 = v230;
                    __int16 v293 = 2082;
                    int v294 = v231;
                    __int16 v295 = 2114;
                    id v296 = v232;
                    __int16 v297 = 2048;
                    unint64_t v298 = v233;
                    _os_log_impl(&dword_1830D4000, v98, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] pushing out fallback endpoint start by %llums", buf, 0x52u);
                  }
                }
                else
                {
                  if (v97)
                  {
LABEL_119:
                    uint64_t v107 = *((void *)v277 + 9);
                    dispatch_time_t v108 = dispatch_time(0x8000000000000000, *((void *)v277 + 3));
                    nw_queue_set_timer_values(v107, v108, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
LABEL_189:

LABEL_190:
                    uint64_t v22 = 1;
                    IOPMAssertionID v21 = v276;
                    goto LABEL_191;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  unint64_t v98 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
                  {
                    os_log_type_t v99 = nw_endpoint_handler_get_id_string(v87);
                    BOOL v100 = nw_endpoint_handler_dry_run_string(v87);
                    nw_endpoint_t v101 = nw_endpoint_handler_copy_endpoint(v87);
                    unint64_t v102 = nw_endpoint_get_logging_description(v101);
                    uint64_t v103 = nw_endpoint_handler_state_string(v87);
                    nw_endpoint_t v104 = nw_endpoint_handler_mode_string(v87);
                    id v105 = nw_endpoint_handler_copy_current_path(v87);
                    unint64_t v106 = *((void *)v277 + 3) / 0xF4240uLL;
                    *(_DWORD *)buf = 136448002;
                    unint64_t v284 = "nw_endpoint_fallback_receive_report";
                    __int16 v285 = 2082;
                    int v286 = (void *)v99;
                    __int16 v287 = 2082;
                    unint64_t v288 = v100;
                    __int16 v289 = 2082;
                    int v290 = v102;
                    __int16 v291 = 2082;
                    unint64_t v292 = v103;
                    __int16 v293 = 2082;
                    int v294 = v104;
                    __int16 v295 = 2114;
                    id v296 = v105;
                    __int16 v297 = 2048;
                    unint64_t v298 = v106;
                    _os_log_impl(&dword_1830D4000, v98, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] pushing out fallback endpoint start by %llums", buf, 0x52u);
                  }
                }

                goto LABEL_119;
              }
              uint64_t v94 = *((void *)v277 + 9);
              if (v94)
              {
                nw_queue_cancel_source(v94);
                *((void *)v277 + 9) = 0;
              }
              if (!*v81)
              {
                if (v20 == v278)
                {
                  *((_DWORD *)v277 + 12) = 1;
                  uint64_t v109 = (void *)*((void *)v277 + 5);
                  if (v109) {
                    nw_endpoint_handler_cancel(v109, 0, 0);
                  }
                  if (a3 == 2) {
                    nw_endpoint_fallback_start_post_transport_timer(v87);
                  }
                }
                else
                {
                  *((_DWORD *)v277 + 12) = 2;
                  int v95 = (void *)*((void *)v277 + 4);
                  if (v95) {
                    nw_endpoint_handler_cancel(v95, 0, 0);
                  }
                  if (*((_DWORD *)v277 + 26) == 2) {
                    nw_endpoint_fallback_start_usage_cap_timer(v87);
                  }
                }
                if (!nw_endpoint_handler_get_minimize_logging(v87))
                {
                  nw_endpoint_t v110 = v87;
                  BOOL v111 = (*((unsigned char *)v110 + 268) & 0x20) == 0;

                  if (!v111) {
                    goto LABEL_134;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  int v112 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
                  {
                    unint64_t v259 = v112;
                    uint64_t v270 = a4;
                    uint64_t v113 = nw_endpoint_handler_get_id_string(v110);
                    id v114 = nw_endpoint_handler_dry_run_string(v110);
                    nw_endpoint_t v115 = nw_endpoint_handler_copy_endpoint(v110);
                    int v116 = nw_endpoint_get_logging_description(v115);
                    uint64_t v117 = nw_endpoint_handler_state_string(v110);
                    unint64_t v118 = nw_endpoint_handler_mode_string(v110);
                    id v119 = nw_endpoint_handler_copy_current_path(v110);
                    int v120 = v119;
                    unint64_t v121 = *((void *)v277 + 7);
                    unint64_t v122 = (const char *)*((void *)v277 + 8);
                    if (v20 == v278) {
                      os_log_t v123 = (const char *)*((void *)v277 + 7);
                    }
                    else {
                      os_log_t v123 = (const char *)*((void *)v277 + 8);
                    }
                    *(_DWORD *)buf = 136448514;
                    unint64_t v284 = "nw_endpoint_fallback_receive_report";
                    __int16 v285 = 2082;
                    int v286 = (void *)v113;
                    __int16 v287 = 2082;
                    unint64_t v288 = v114;
                    __int16 v289 = 2082;
                    int v290 = v116;
                    __int16 v291 = 2082;
                    unint64_t v292 = v117;
                    __int16 v293 = 2082;
                    int v294 = v118;
                    __int16 v295 = 2114;
                    id v296 = v119;
                    __int16 v297 = 2112;
                    unint64_t v298 = v121;
                    __int16 v299 = 2112;
                    unint64_t v300 = v122;
                    __int16 v301 = 2112;
                    int v302 = v123;
                    _os_log_impl(&dword_1830D4000, v259, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback complete: primary child (%@), fallback child (%@), %@ connected", buf, 0x66u);

                    a4 = v270;
                    int v112 = v259;
                  }
                  goto LABEL_133;
                }
                if ((nw_endpoint_handler_get_logging_disabled(v87) & 1) == 0)
                {
                  unint64_t v272 = a4;
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  int v112 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
                  {
                    unint64_t v262 = nw_endpoint_handler_get_id_string(v87);
                    unint64_t v216 = nw_endpoint_handler_dry_run_string(v87);
                    nw_endpoint_t v217 = nw_endpoint_handler_copy_endpoint(v87);
                    int v218 = nw_endpoint_get_logging_description(v217);
                    uint64_t v219 = nw_endpoint_handler_state_string(v87);
                    unint64_t v220 = nw_endpoint_handler_mode_string(v87);
                    id v221 = nw_endpoint_handler_copy_current_path(v87);
                    int v222 = v221;
                    unint64_t v223 = *((void *)v277 + 7);
                    unint64_t v224 = (const char *)*((void *)v277 + 8);
                    if (v20 == v278) {
                      unint64_t v225 = (const char *)*((void *)v277 + 7);
                    }
                    else {
                      unint64_t v225 = (const char *)*((void *)v277 + 8);
                    }
                    *(_DWORD *)buf = 136448514;
                    unint64_t v284 = "nw_endpoint_fallback_receive_report";
                    __int16 v285 = 2082;
                    int v286 = (void *)v262;
                    __int16 v287 = 2082;
                    unint64_t v288 = v216;
                    __int16 v289 = 2082;
                    int v290 = v218;
                    __int16 v291 = 2082;
                    unint64_t v292 = v219;
                    __int16 v293 = 2082;
                    int v294 = v220;
                    __int16 v295 = 2114;
                    id v296 = v221;
                    __int16 v297 = 2112;
                    unint64_t v298 = v223;
                    __int16 v299 = 2112;
                    unint64_t v300 = v224;
                    __int16 v301 = 2112;
                    int v302 = v225;
                    _os_log_impl(&dword_1830D4000, v112, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback complete: primary child (%@), fallback child (%@), %@ connected", buf, 0x66u);

                    a4 = v272;
                  }
LABEL_133:
                }
              }
LABEL_134:
              if (a3 == 3)
              {
                int v124 = v87;
                v124->state = 3;
              }
              nw_endpoint_handler_report(v87, 0, a4, 0);
              char v125 = *((unsigned char *)v277 + 108);
              v87->event.domain = 5;
              p_event = &v87->event;
              if (v20 == v278)
              {
                v87->event.event = 3;
                nw_endpoint_handler_report(v87, 0, p_event, 0);
                if ((v125 & 0x10) == 0) {
                  goto LABEL_189;
                }
              }
              else
              {
                v87->event.event = 4;
                nw_endpoint_handler_report(v87, 0, p_event, 0);
                if ((v125 & 0x10) != 0) {
                  goto LABEL_189;
                }
              }
              unint64_t v127 = v87;
              os_unfair_lock_lock(&v127->lock);
              int v128 = v127->current_path;
              os_unfair_lock_unlock(&v127->lock);

              if (!v128)
              {
                if ((nw_endpoint_handler_get_logging_disabled(v127) & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  __int16 v139 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
                  {
                    int v140 = nw_endpoint_handler_get_id_string(v127);
                    __int16 v141 = nw_endpoint_handler_dry_run_string(v127);
                    nw_endpoint_t v142 = nw_endpoint_handler_copy_endpoint(v127);
                    __int16 v143 = nw_endpoint_get_logging_description(v142);
                    id v144 = nw_endpoint_handler_state_string(v127);
                    uint64_t v145 = nw_endpoint_handler_mode_string(v127);
                    id v146 = nw_endpoint_handler_copy_current_path(v127);
                    *(_DWORD *)buf = 136447746;
                    unint64_t v284 = "nw_endpoint_fallback_receive_report";
                    __int16 v285 = 2082;
                    int v286 = (void *)v140;
                    __int16 v287 = 2082;
                    unint64_t v288 = v141;
                    __int16 v289 = 2082;
                    int v290 = v143;
                    __int16 v291 = 2082;
                    unint64_t v292 = v144;
                    __int16 v293 = 2082;
                    int v294 = v145;
                    __int16 v295 = 2114;
                    id v296 = v146;
                    _os_log_impl(&dword_1830D4000, v139, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] could not get fallback path", buf, 0x48u);
                  }
                }
                goto LABEL_185;
              }
              long long type = 0uLL;
              if (nw_path_get_fallback_agent(v128, &type))
              {
                BOOL v129 = nw_path_agent_action(v128, (const unsigned __int8 *)&type, 131);
                char v130 = nw_endpoint_handler_get_logging_disabled(v127);
                if (v129)
                {
                  if ((v130 & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    unint64_t v131 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
                    {
                      int v132 = nw_endpoint_handler_get_id_string(v127);
                      __int16 v133 = nw_endpoint_handler_dry_run_string(v127);
                      nw_endpoint_t v134 = nw_endpoint_handler_copy_endpoint(v127);
                      __int16 v135 = nw_endpoint_get_logging_description(v134);
                      int v136 = nw_endpoint_handler_state_string(v127);
                      __int16 v137 = nw_endpoint_handler_mode_string(v127);
                      id v138 = nw_endpoint_handler_copy_current_path(v127);
                      *(_DWORD *)buf = 136447746;
                      unint64_t v284 = "nw_endpoint_fallback_receive_report";
                      __int16 v285 = 2082;
                      int v286 = (void *)v132;
                      __int16 v287 = 2082;
                      unint64_t v288 = v133;
                      __int16 v289 = 2082;
                      int v290 = v135;
                      __int16 v291 = 2082;
                      unint64_t v292 = v136;
                      __int16 v293 = 2082;
                      int v294 = v137;
                      __int16 v295 = 2114;
                      id v296 = v138;
                      _os_log_impl(&dword_1830D4000, v131, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] asserted fallback agent", buf, 0x48u);
                    }
LABEL_184:
                  }
                }
                else if ((v130 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  unint64_t v131 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
                  {
                    unint64_t v175 = nw_endpoint_handler_get_id_string(v127);
                    unint64_t v176 = nw_endpoint_handler_dry_run_string(v127);
                    nw_endpoint_t v177 = nw_endpoint_handler_copy_endpoint(v127);
                    uint64_t v178 = nw_endpoint_get_logging_description(v177);
                    unint64_t v179 = nw_endpoint_handler_state_string(v127);
                    unint64_t v180 = nw_endpoint_handler_mode_string(v127);
                    id v181 = nw_endpoint_handler_copy_current_path(v127);
                    *(_DWORD *)buf = 136447746;
                    unint64_t v284 = "nw_endpoint_fallback_receive_report";
                    __int16 v285 = 2082;
                    int v286 = (void *)v175;
                    __int16 v287 = 2082;
                    unint64_t v288 = v176;
                    __int16 v289 = 2082;
                    int v290 = v178;
                    __int16 v291 = 2082;
                    unint64_t v292 = v179;
                    __int16 v293 = 2082;
                    int v294 = v180;
                    __int16 v295 = 2114;
                    id v296 = v181;
                    _os_log_impl(&dword_1830D4000, v131, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] could not assert fallback agent", buf, 0x48u);
                  }
                  goto LABEL_184;
                }
              }
              else if ((nw_endpoint_handler_get_logging_disabled(v127) & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                unint64_t v131 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
                {
                  unint64_t v147 = nw_endpoint_handler_get_id_string(v127);
                  char v148 = nw_endpoint_handler_dry_run_string(v127);
                  nw_endpoint_t v149 = nw_endpoint_handler_copy_endpoint(v127);
                  uint64_t v150 = nw_endpoint_get_logging_description(v149);
                  unint64_t v151 = nw_endpoint_handler_state_string(v127);
                  unint64_t v152 = nw_endpoint_handler_mode_string(v127);
                  id v153 = nw_endpoint_handler_copy_current_path(v127);
                  *(_DWORD *)buf = 136447746;
                  unint64_t v284 = "nw_endpoint_fallback_receive_report";
                  __int16 v285 = 2082;
                  int v286 = (void *)v147;
                  __int16 v287 = 2082;
                  unint64_t v288 = v148;
                  __int16 v289 = 2082;
                  int v290 = v150;
                  __int16 v291 = 2082;
                  unint64_t v292 = v151;
                  __int16 v293 = 2082;
                  int v294 = v152;
                  __int16 v295 = 2114;
                  id v296 = v153;
                  _os_log_impl(&dword_1830D4000, v131, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] could not get fallback agent", buf, 0x48u);
                }
                goto LABEL_184;
              }
LABEL_185:

              goto LABEL_189;
            }
            *((unsigned char *)v14 + 108) = v84 & 0x7F;
            char v83 = *((unsigned char *)v14 + 109) | 2;
          }
          else
          {
            if (v20 != v10)
            {
              id v77 = (char *)v14 + 109;
              char v78 = *((unsigned char *)v14 + 109);
              char v79 = 1;
              goto LABEL_62;
            }
            *((unsigned char *)v14 + 108) |= 0x80u;
            char v83 = *((unsigned char *)v14 + 109) & 0xFD;
          }
          *((unsigned char *)v14 + 109) = v83;
          goto LABEL_71;
        }
LABEL_221:
        a4 = v271;
        char v28 = v192;
        goto LABEL_57;
      }
    }
    else
    {
      if (v19 != v10)
      {
        IOPMAssertionID v21 = 0;
        uint64_t v22 = 0;
LABEL_191:

        goto LABEL_192;
      }
      uint64_t v25 = v20;
      uint64_t v275 = v25;
      int v273 = a3;
      if (!nw_endpoint_handler_get_minimize_logging(v12))
      {
        uint64_t v37 = v12;
        char v38 = *((unsigned char *)v37 + 268);

        if ((v38 & 0x20) != 0) {
          goto LABEL_59;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        char v28 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          loga = v28;
          unint64_t v39 = v37;

          __int16 v40 = v39;
          char v41 = *((unsigned char *)v37 + 268);

          if (v41) {
            __int16 v42 = "dry-run ";
          }
          else {
            __int16 v42 = "";
          }
          nw_endpoint_t v254 = nw_endpoint_handler_copy_endpoint(v40);
          unint64_t v250 = nw_endpoint_get_logging_description(v254);
          IOPMAssertionID v43 = v40;
          char v44 = v43;
          uint64_t v45 = v43[30];
          if (v45 > 5) {
            nw_endpoint_t v46 = "unknown-state";
          }
          else {
            nw_endpoint_t v46 = off_1E523FB38[v45];
          }
          unint64_t v242 = v46;

          uint64_t v51 = v44;
          os_log_type_t v52 = v51;
          int v53 = v12->mode;
          uint64_t v269 = a4;
          unint64_t v246 = v42;
          os_log_type_t v54 = "path";
          switch(v53)
          {
            case 0:
              break;
            case 1:
              os_log_type_t v54 = "resolver";
              break;
            case 2:
              os_log_type_t v54 = nw_endpoint_flow_mode_string(v51[31]);
              break;
            case 3:
              os_log_type_t v54 = "proxy";
              break;
            case 4:
              os_log_type_t v54 = "fallback";
              break;
            case 5:
              os_log_type_t v54 = "transform";
              break;
            default:
              os_log_type_t v54 = "unknown-mode";
              break;
          }

          os_log_type_t v66 = v52;
          os_unfair_lock_lock((os_unfair_lock_t)v66 + 28);
          id v67 = v66[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v66 + 28);

          id v68 = v67;
          BOOL v69 = nw_endpoint_handler_get_id_string(v10);
          unint64_t v70 = nw_endpoint_handler_dry_run_string(v10);
          nw_endpoint_t v71 = nw_endpoint_handler_copy_endpoint(v10);
          os_log_t v258 = v20;
          BOOL v72 = nw_endpoint_get_logging_description(v71);
          os_log_type_t v73 = v39->id_str;
          os_log_type_t v74 = nw_endpoint_handler_state_string(v10);
          nw_endpoint_t v75 = nw_endpoint_handler_mode_string(v278);
          id v76 = nw_endpoint_handler_copy_current_path(v278);
          *(_DWORD *)buf = 136449282;
          unint64_t v284 = "nw_endpoint_fallback_receive_report";
          __int16 v285 = 2082;
          int v286 = v73;
          __int16 v287 = 2082;
          unint64_t v288 = v246;
          __int16 v289 = 2082;
          int v290 = v250;
          __int16 v291 = 2082;
          unint64_t v292 = v242;
          __int16 v293 = 2082;
          int v294 = v54;
          __int16 v295 = 2114;
          id v296 = v68;
          __int16 v297 = 2082;
          unint64_t v298 = (unint64_t)v69;
          __int16 v299 = 2082;
          unint64_t v300 = v70;
          __int16 v301 = 2082;
          int v302 = v72;
          __int16 v303 = 2082;
          unint64_t v304 = v74;
          __int16 v305 = 2082;
          int v306 = v75;
          __int16 v307 = 2114;
          id v308 = v76;
          char v28 = loga;
          _os_log_impl(&dword_1830D4000, loga, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received fallback child report:[C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x84u);

          BOOL v20 = v258;
          a4 = v269;
        }
        goto LABEL_57;
      }
      unint64_t v271 = a4;
      if ((nw_endpoint_handler_get_logging_disabled(v12) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        unint64_t v192 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v192, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v261 = nw_endpoint_handler_get_id_string(v12);
          int v256 = nw_endpoint_handler_dry_run_string(v12);
          os_log_t logd = nw_endpoint_handler_copy_endpoint(v12);
          int v252 = nw_endpoint_get_logging_description(logd);
          int v248 = nw_endpoint_handler_state_string(v12);
          int v244 = nw_endpoint_handler_mode_string(v12);
          id v201 = nw_endpoint_handler_copy_current_path(v12);
          int v202 = nw_endpoint_handler_get_id_string(v10);
          uint64_t v203 = nw_endpoint_handler_dry_run_string(v10);
          nw_endpoint_t v204 = nw_endpoint_handler_copy_endpoint(v10);
          unint64_t v205 = nw_endpoint_get_logging_description(v204);
          int v206 = nw_endpoint_handler_state_string(v10);
          uint64_t v207 = nw_endpoint_handler_mode_string(v10);
          id v208 = nw_endpoint_handler_copy_current_path(v278);
          *(_DWORD *)buf = 136449282;
          unint64_t v284 = "nw_endpoint_fallback_receive_report";
          __int16 v285 = 2082;
          int v286 = (void *)v261;
          __int16 v287 = 2082;
          unint64_t v288 = v256;
          __int16 v289 = 2082;
          int v290 = v252;
          __int16 v291 = 2082;
          unint64_t v292 = v248;
          __int16 v293 = 2082;
          int v294 = v244;
          __int16 v295 = 2114;
          id v296 = v201;
          __int16 v297 = 2082;
          unint64_t v298 = (unint64_t)v202;
          __int16 v299 = 2082;
          unint64_t v300 = v203;
          __int16 v301 = 2082;
          int v302 = v205;
          __int16 v303 = 2082;
          unint64_t v304 = v206;
          __int16 v305 = 2082;
          int v306 = v207;
          __int16 v307 = 2114;
          id v308 = v208;
          char v28 = v192;
          _os_log_impl(&dword_1830D4000, v192, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received fallback child report:[C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x84u);

          a4 = v271;
          goto LABEL_57;
        }
        goto LABEL_221;
      }
    }
    uint64_t v25 = v275;
    a4 = v271;
    goto LABEL_58;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v23 = (id)gLogObj;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if (mode > 5) {
      uint64_t v24 = "unknown-mode";
    }
    else {
      uint64_t v24 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446722;
    unint64_t v284 = "nw_endpoint_fallback_receive_report";
    __int16 v285 = 2082;
    int v286 = (void *)v24;
    __int16 v287 = 2082;
    unint64_t v288 = "fallback";
    _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

LABEL_28:
  uint64_t v22 = 0;
LABEL_192:

  return v22;
}

void sub_183918EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_fallback_start_post_transport_timer(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = (uint64_t *)nw_endpoint_handler_copy_fallback(v1);
  uint64_t v3 = v2[10];
  if (v3)
  {
    nw_queue_cancel_source(v3);
    v2[10] = 0;
  }
  int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_fallback_post_transport_timeout, 3000);
  if ((nw_endpoint_handler_get_logging_disabled(v1) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v5 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(v1);
      uint64_t v7 = nw_endpoint_handler_dry_run_string(v1);
      uint64_t v25 = v2;
      nw_endpoint_t v8 = nw_endpoint_handler_copy_endpoint(v1);
      logging_description = nw_endpoint_get_logging_description(v8);
      int v10 = nw_endpoint_handler_state_string(v1);
      id v11 = nw_endpoint_handler_mode_string(v1);
      id v12 = nw_endpoint_handler_copy_current_path(v1);
      *(_DWORD *)buf = 136448002;
      char v31 = "nw_endpoint_fallback_start_post_transport_timer";
      __int16 v32 = 2082;
      nw_endpoint_t v33 = (void *)id_string;
      __int16 v34 = 2082;
      uint64_t v35 = v7;
      __int16 v36 = 2082;
      uint64_t v37 = logging_description;
      __int16 v38 = 2082;
      unint64_t v39 = v10;
      __int16 v40 = 2082;
      char v41 = v11;
      __int16 v42 = 2114;
      id v43 = v12;
      __int16 v44 = 2048;
      int64_t v45 = int64_with_default;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting post-transport fallback timer for %llums", buf, 0x52u);

      uint64_t v2 = v25;
    }
  }
  id v13 = nw_endpoint_handler_copy_context(v1);
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = ___ZL47nw_endpoint_fallback_start_post_transport_timerP30NWConcrete_nw_endpoint_handler_block_invoke;
  v28[3] = &unk_1E524BAA8;
  uint64_t v14 = v1;
  char v29 = v14;
  v2[10] = nw_queue_context_create_source(v13, 2, 3, 0, v28, 0);

  uint64_t v15 = v2[10];
  if (v15)
  {
    dispatch_time_t v16 = dispatch_time(0x8000000000000000, 1000000 * int64_with_default);
    if (*(void *)v15)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    }
    else
    {
      *(void *)(v15 + 32) = v16;
      *(void *)(v15 + 40) = -1;
      if (*(unsigned char *)(v15 + 48) && *(unsigned char *)(v15 + 49)) {
        nw_queue_source_run_timer(v15);
      }
    }
    nw_queue_activate_source(v2[10]);
    goto LABEL_20;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v17 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  char v31 = "nw_endpoint_fallback_start_post_transport_timer";
  int v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v18, &type, &v26)) {
    goto LABEL_18;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v19 = (id)gLogObj;
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      char v31 = "nw_endpoint_fallback_start_post_transport_timer";
      _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s nw_queue_context_create_source(timer) failed", buf, 0xCu);
    }
LABEL_17:

LABEL_18:
    if (!v18) {
      goto LABEL_20;
    }
LABEL_19:
    free(v18);
    goto LABEL_20;
  }
  if (!v26)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v19 = (id)gLogObj;
    os_log_type_t v24 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      char v31 = "nw_endpoint_fallback_start_post_transport_timer";
      _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_17;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v19 = (id)gLogObj;
  os_log_type_t v22 = type;
  BOOL v23 = os_log_type_enabled(v19, type);
  if (!backtrace_string)
  {
    if (v23)
    {
      *(_DWORD *)buf = 136446210;
      char v31 = "nw_endpoint_fallback_start_post_transport_timer";
      _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s nw_queue_context_create_source(timer) failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_17;
  }
  if (v23)
  {
    *(_DWORD *)buf = 136446466;
    char v31 = "nw_endpoint_fallback_start_post_transport_timer";
    __int16 v32 = 2082;
    nw_endpoint_t v33 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v18) {
    goto LABEL_19;
  }
LABEL_20:
}

void sub_18391968C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_fallback_start_usage_cap_timer(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = nw_endpoint_handler_copy_fallback(v1);
  uint64_t v3 = *((void *)v2 + 11);
  if (v3)
  {
    nw_queue_cancel_source(v3);
    *((void *)v2 + 11) = 0;
  }
  *((void *)v2 + 2) = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_fallback_usage_cap_interval, 3000);
  int minimize_logging = nw_endpoint_handler_get_minimize_logging(v1);
  char logging_disabled = nw_endpoint_handler_get_logging_disabled(v1);
  if (!minimize_logging)
  {
    if (logging_disabled) {
      goto LABEL_10;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id_string = nw_endpoint_handler_get_id_string(v1);
      nw_endpoint_t v8 = nw_endpoint_handler_dry_run_string(v1);
      nw_endpoint_t v9 = nw_endpoint_handler_copy_endpoint(v1);
      logging_description = nw_endpoint_get_logging_description(v9);
      id v11 = nw_endpoint_handler_state_string(v1);
      id v12 = nw_endpoint_handler_mode_string(v1);
      id v13 = nw_endpoint_handler_copy_current_path(v1);
      uint64_t v14 = *((void *)v2 + 1);
      uint64_t v15 = *((void *)v2 + 2);
      *(_DWORD *)buf = 136448258;
      __int16 v42 = "nw_endpoint_fallback_start_usage_cap_timer";
      __int16 v43 = 2082;
      __int16 v44 = (void *)id_string;
      __int16 v45 = 2082;
      uint64_t v46 = v8;
      __int16 v47 = 2082;
      int v48 = logging_description;
      __int16 v49 = 2082;
      os_log_type_t v50 = v11;
      __int16 v51 = 2082;
      os_log_type_t v52 = v12;
      __int16 v53 = 2114;
      id v54 = v13;
      __int16 v55 = 2048;
      uint64_t v56 = v14;
      __int16 v57 = 2048;
      uint64_t v58 = v15;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] applying data cap of %llu to fallback child, checking every %llums", buf, 0x5Cu);
    }
    goto LABEL_9;
  }
  if ((logging_disabled & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      char v28 = nw_endpoint_handler_get_id_string(v1);
      char v29 = nw_endpoint_handler_dry_run_string(v1);
      nw_endpoint_t v30 = nw_endpoint_handler_copy_endpoint(v1);
      char v31 = nw_endpoint_get_logging_description(v30);
      __int16 v32 = nw_endpoint_handler_state_string(v1);
      nw_endpoint_t v33 = nw_endpoint_handler_mode_string(v1);
      id v34 = nw_endpoint_handler_copy_current_path(v1);
      uint64_t v35 = *((void *)v2 + 1);
      uint64_t v36 = *((void *)v2 + 2);
      *(_DWORD *)buf = 136448258;
      __int16 v42 = "nw_endpoint_fallback_start_usage_cap_timer";
      __int16 v43 = 2082;
      __int16 v44 = (void *)v28;
      __int16 v45 = 2082;
      uint64_t v46 = v29;
      __int16 v47 = 2082;
      int v48 = v31;
      __int16 v49 = 2082;
      os_log_type_t v50 = v32;
      __int16 v51 = 2082;
      os_log_type_t v52 = v33;
      __int16 v53 = 2114;
      id v54 = v34;
      __int16 v55 = 2048;
      uint64_t v56 = v35;
      __int16 v57 = 2048;
      uint64_t v58 = v36;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] applying data cap of %llu to fallback child, checking every %llums", buf, 0x5Cu);
    }
LABEL_9:
  }
LABEL_10:
  id v16 = nw_endpoint_handler_copy_context(v1);
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3221225472;
  v39[2] = ___ZL42nw_endpoint_fallback_start_usage_cap_timerP30NWConcrete_nw_endpoint_handler_block_invoke;
  v39[3] = &unk_1E524BAA8;
  id v17 = v1;
  __int16 v40 = v17;
  *((void *)v2 + 11) = nw_queue_context_create_source(v16, 2, 3, 0, v39, 0);

  uint64_t v18 = *((void *)v2 + 11);
  if (v18)
  {
    dispatch_time_t v19 = dispatch_time(0x8000000000000000, 1000000 * *((void *)v2 + 2));
    if (*(void *)v18)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)v18, v19, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    }
    else
    {
      *(void *)(v18 + 32) = v19;
      *(void *)(v18 + 40) = -1;
      if (*(unsigned char *)(v18 + 48) && *(unsigned char *)(v18 + 49)) {
        nw_queue_source_run_timer(v18);
      }
    }
    nw_queue_activate_source(*((void *)v2 + 11));
    goto LABEL_36;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v20 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  __int16 v42 = "nw_endpoint_fallback_start_usage_cap_timer";
  IOPMAssertionID v21 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (!__nwlog_fault(v21, &type, &v37)) {
    goto LABEL_34;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v22 = (id)gLogObj;
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v22, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "nw_endpoint_fallback_start_usage_cap_timer";
      _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s nw_queue_context_create_source(timer) failed", buf, 0xCu);
    }
LABEL_33:

LABEL_34:
    if (!v21) {
      goto LABEL_36;
    }
LABEL_35:
    free(v21);
    goto LABEL_36;
  }
  if (!v37)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v22 = (id)gLogObj;
    os_log_type_t v27 = type;
    if (os_log_type_enabled(v22, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "nw_endpoint_fallback_start_usage_cap_timer";
      _os_log_impl(&dword_1830D4000, v22, v27, "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_33;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v22 = (id)gLogObj;
  os_log_type_t v25 = type;
  BOOL v26 = os_log_type_enabled(v22, type);
  if (!backtrace_string)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "nw_endpoint_fallback_start_usage_cap_timer";
      _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s nw_queue_context_create_source(timer) failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_33;
  }
  if (v26)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v42 = "nw_endpoint_fallback_start_usage_cap_timer";
    __int16 v43 = 2082;
    __int16 v44 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v21) {
    goto LABEL_35;
  }
LABEL_36:
}

void sub_183919DA4(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void ___ZL42nw_endpoint_fallback_start_usage_cap_timerP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1)
{
  uint64_t v195 = *MEMORY[0x1E4F143B8];
  id v167 = *(id *)(a1 + 32);
  if (!v167)
  {
    __int16 v133 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
    nw_endpoint_t v134 = (char *)_os_log_send_and_compose_impl();

    v170[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v178) = 0;
    if (__nwlog_fault(v134, v170, &v178))
    {
      if (v170[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v135 = __nwlog_obj();
        os_log_type_t v136 = v170[0];
        if (os_log_type_enabled(v135, v170[0]))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
          _os_log_impl(&dword_1830D4000, v135, v136, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if ((_BYTE)v178)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v135 = __nwlog_obj();
        os_log_type_t v138 = v170[0];
        BOOL v139 = os_log_type_enabled(v135, v170[0]);
        if (backtrace_string)
        {
          if (v139)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
            __int16 v181 = 2082;
            id_str = backtrace_string;
            _os_log_impl(&dword_1830D4000, v135, v138, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_155;
        }
        if (v139)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
          _os_log_impl(&dword_1830D4000, v135, v138, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v135 = __nwlog_obj();
        os_log_type_t v147 = v170[0];
        if (os_log_type_enabled(v135, v170[0]))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
          _os_log_impl(&dword_1830D4000, v135, v147, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_155:
    if (v134) {
      free(v134);
    }
    goto LABEL_128;
  }
  id v1 = (NWConcrete_nw_endpoint_handler *)v167;
  uint64_t mode = v1->mode;

  if (mode == 4)
  {
    uint64_t v3 = nw_endpoint_handler_copy_fallback(v1);
    uint64_t v176 = 0;
    nw_endpoint_t v177 = 0;
    char v175 = 0;
    uint64_t v166 = v3;
    if (nw_endpoint_handler_fillout_data_transfer_snapshot(*((void **)v3 + 5), (uint64_t *)&v177, &v176, &v175, 2)
      && v177 != 0
      && v176 != 0)
    {
      unint64_t v21 = *((void *)v177 + 6);
      unint64_t v22 = *((void *)v3 + 1);
      BOOL v23 = v22 >= v21;
      unint64_t v24 = v22 - v21;
      if (v23 && *((void *)v177 + 9) <= v24)
      {
        uint64_t v38 = *((void *)v3 + 11);
        dispatch_time_t v39 = dispatch_time(0x8000000000000000, 1000000 * *((void *)v3 + 2));
        nw_queue_set_timer_values(v38, v39, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
        goto LABEL_124;
      }
      BOOL v165 = v1;
      if (nw_endpoint_handler_get_minimize_logging(v1))
      {
        if (nw_endpoint_handler_get_logging_disabled(v1))
        {
LABEL_63:
          __int16 v57 = v165;
          id v163 = v57[4];

          long long v178 = 0uLL;
          nw_parameters_get_e_proc_uuid(v163, &v178);
          nw_parameters_get_pid(v163);
          nw_parameters_get_effective_bundle_id(v163);
          BOOL v58 = nw_queue_copy_current_workloop();
          *(void *)uint64_t v170 = MEMORY[0x1E4F143A8];
          uint64_t v171 = 3221225472;
          unint64_t v172 = ___ZL36nw_endpoint_fallback_check_usage_capP30NWConcrete_nw_endpoint_handler_block_invoke;
          id v173 = &unk_1E5240988;
          uint64_t v59 = v57;
          __int16 v174 = v59;
          char v60 = _symptoms_daemon_fallback_subseq_disposition();

          if (v60)
          {
LABEL_123:

            uint64_t v3 = v166;
LABEL_124:
            if (v175 && v177) {
              free(v177);
            }

            goto LABEL_128;
          }
          id v61 = v59;
          BOOL v62 = (*((unsigned char *)v61 + 268) & 0x20) == 0;

          uint64_t v63 = v166;
          if (!v62)
          {
LABEL_120:
            uint64_t v132 = *((void *)v63 + 11);
            if (v132)
            {
              nw_queue_cancel_source(v132);
              uint64_t v63 = v166;
              *((void *)v166 + 11) = 0;
            }
            nw_endpoint_handler_cancel(*((void **)v63 + 5), 0, 1);
            goto LABEL_123;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          id v64 = (id)gconnectionLogObj;
          id v65 = v61;

          os_log_type_t v66 = v65;
          BOOL v67 = (*((unsigned char *)v61 + 268) & 1) == 0;

          if (v67) {
            id v68 = "";
          }
          else {
            id v68 = "dry-run ";
          }
          nw_endpoint_t v69 = nw_endpoint_handler_copy_endpoint(v66);
          logging_description = nw_endpoint_get_logging_description(v69);
          nw_endpoint_t v71 = v66;
          uint64_t v72 = v71[30];
          if (v72 > 5) {
            os_log_type_t v73 = "unknown-state";
          }
          else {
            os_log_type_t v73 = off_1E523FB38[v72];
          }
          uint64_t v158 = v73;
          unint64_t v160 = v71;

          os_log_type_t v74 = v160;
          nw_endpoint_t v75 = v74;
          id v76 = "path";
          switch(v165->mode)
          {
            case 0:
              break;
            case 1:
              id v76 = "resolver";
              break;
            case 2:
              id v76 = nw_endpoint_flow_mode_string(*((void **)v74 + 31));
              break;
            case 3:
              id v76 = "proxy";
              break;
            case 4:
              id v76 = "fallback";
              break;
            case 5:
              id v76 = "transform";
              break;
            default:
              id v76 = "unknown-mode";
              break;
          }

          nw_endpoint_t v77 = v69;
          char v78 = v61;
          char v79 = v68;
          int v80 = v64;
          unint64_t v81 = v75;
          os_unfair_lock_lock((os_unfair_lock_t)v81 + 28);
          id v82 = *((id *)v81 + 8);
          lock = (os_unfair_lock_s *)(v81 + 112);
          os_unfair_lock_unlock((os_unfair_lock_t)v81 + 28);
          int v157 = (id *)v81;

          char v83 = v79;
          int v84 = v78;
          *(_DWORD *)buf = 136447746;
          unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
          __int16 v181 = 2082;
          uint64_t v85 = v65 + 168;
          id_str = v65 + 168;
          __int16 v183 = 2082;
          unint64_t v184 = v83;
          __int16 v185 = 2082;
          os_log_type_t v186 = logging_description;
          __int16 v187 = 2082;
          unint64_t v188 = v158;
          __int16 v189 = 2082;
          BOOL v190 = v76;
          __int16 v191 = 2114;
          id v192 = v82;
          int v161 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v168 = 0;
          int v86 = (char *)v161;
          if (!__nwlog_fault(v161, &type, &v168))
          {
LABEL_118:
            uint64_t v63 = v166;
            if (v86) {
              free(v86);
            }
            goto LABEL_120;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v87 = (id)gconnectionLogObj;
            os_log_type_t v88 = type;
            if (os_log_type_enabled(v87, type))
            {
              BOOL v89 = v157;

              BOOL v90 = v89;
              BOOL v91 = (*((unsigned char *)v84 + 268) & 1) == 0;

              if (v91) {
                uint64_t v92 = "";
              }
              else {
                uint64_t v92 = "dry-run ";
              }
              nw_endpoint_t v93 = nw_endpoint_handler_copy_endpoint(v90);
              uint64_t v94 = nw_endpoint_get_logging_description(v93);
              nw_endpoint_t v159 = v92;
              int v95 = v90;
              int v96 = v95;
              uint64_t v97 = v160[30];
              unint64_t v98 = v94;
              if (v97 > 5) {
                os_log_type_t v99 = "unknown-state";
              }
              else {
                os_log_type_t v99 = off_1E523FB38[v97];
              }

              id v119 = v96;
              int v120 = v119;
              unint64_t v121 = "path";
              switch(v165->mode)
              {
                case 0:
                  break;
                case 1:
                  unint64_t v121 = "resolver";
                  break;
                case 2:
                  unint64_t v121 = nw_endpoint_flow_mode_string(v119[31]);
                  break;
                case 3:
                  unint64_t v121 = "proxy";
                  break;
                case 4:
                  unint64_t v121 = "fallback";
                  break;
                case 5:
                  unint64_t v121 = "transform";
                  break;
                default:
                  unint64_t v121 = "unknown-mode";
                  break;
              }

              char v130 = v120;
              os_unfair_lock_lock(lock);
              id v131 = v157[8];
              os_unfair_lock_unlock(lock);

              *(_DWORD *)buf = 136447746;
              unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
              __int16 v181 = 2082;
              id_str = v85;
              __int16 v183 = 2082;
              unint64_t v184 = v159;
              __int16 v185 = 2082;
              os_log_type_t v186 = v98;
              __int16 v187 = 2082;
              unint64_t v188 = v99;
              __int16 v189 = 2082;
              BOOL v190 = v121;
              __int16 v191 = 2114;
              id v192 = v131;
              _os_log_impl(&dword_1830D4000, v87, v88, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] _symptoms_daemon_fallback_subseq_disposition failed, cancelling fallback", buf, 0x48u);
            }
          }
          else if (v168)
          {
            BOOL v100 = __nw_create_backtrace_string();
            if (v100)
            {
              nw_endpoint_t v101 = (char *)v100;
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              unint64_t v102 = (id)gconnectionLogObj;
              os_log_type_t v103 = type;
              if (os_log_type_enabled(v102, type))
              {
                id_string = nw_endpoint_handler_get_id_string(v157);
                id v105 = nw_endpoint_handler_dry_run_string(v157);
                nw_endpoint_t v106 = nw_endpoint_handler_copy_endpoint(v157);
                uint64_t v107 = nw_endpoint_get_logging_description(v106);
                dispatch_time_t v108 = nw_endpoint_handler_state_string(v157);
                uint64_t v109 = nw_endpoint_handler_mode_string(v157);
                id v110 = nw_endpoint_handler_copy_current_path(v157);
                *(_DWORD *)buf = 136448002;
                unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
                __int16 v181 = 2082;
                id_str = (char *)id_string;
                __int16 v183 = 2082;
                unint64_t v184 = v105;
                __int16 v185 = 2082;
                os_log_type_t v186 = v107;
                __int16 v187 = 2082;
                unint64_t v188 = v108;
                __int16 v189 = 2082;
                BOOL v190 = v109;
                __int16 v191 = 2114;
                id v192 = v110;
                __int16 v193 = 2082;
                id v194 = v101;
                _os_log_impl(&dword_1830D4000, v102, v103, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] _symptoms_daemon_fallback_subseq_disposition failed, cancelling fallback, dumping backtrace:%{public}s", buf, 0x52u);
              }
              free(v101);
              goto LABEL_117;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v87 = (id)gconnectionLogObj;
            os_log_type_t v122 = type;
            if (os_log_type_enabled(v87, type))
            {
              os_log_t v123 = nw_endpoint_handler_get_id_string(v157);
              int v124 = nw_endpoint_handler_dry_run_string(v157);
              nw_endpoint_t v125 = nw_endpoint_handler_copy_endpoint(v157);
              unint64_t v126 = nw_endpoint_get_logging_description(v125);
              unint64_t v127 = nw_endpoint_handler_state_string(v157);
              int v128 = nw_endpoint_handler_mode_string(v157);
              id v129 = nw_endpoint_handler_copy_current_path(v157);
              *(_DWORD *)buf = 136447746;
              unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
              __int16 v181 = 2082;
              id_str = (char *)v123;
              __int16 v183 = 2082;
              unint64_t v184 = v124;
              __int16 v185 = 2082;
              os_log_type_t v186 = v126;
              __int16 v187 = 2082;
              unint64_t v188 = v127;
              __int16 v189 = 2082;
              BOOL v190 = v128;
              __int16 v191 = 2114;
              id v192 = v129;
              _os_log_impl(&dword_1830D4000, v87, v122, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] _symptoms_daemon_fallback_subseq_disposition failed, cancelling fallback, no backtrace", buf, 0x48u);
            }
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v87 = (id)gconnectionLogObj;
            os_log_type_t v111 = type;
            if (os_log_type_enabled(v87, type))
            {
              int v112 = nw_endpoint_handler_get_id_string(v157);
              uint64_t v113 = nw_endpoint_handler_dry_run_string(v157);
              nw_endpoint_t v114 = nw_endpoint_handler_copy_endpoint(v157);
              nw_endpoint_t v115 = nw_endpoint_get_logging_description(v114);
              int v116 = nw_endpoint_handler_state_string(v157);
              uint64_t v117 = nw_endpoint_handler_mode_string(v157);
              id v118 = nw_endpoint_handler_copy_current_path(v157);
              *(_DWORD *)buf = 136447746;
              unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
              __int16 v181 = 2082;
              id_str = (char *)v112;
              __int16 v183 = 2082;
              unint64_t v184 = v113;
              __int16 v185 = 2082;
              os_log_type_t v186 = v115;
              __int16 v187 = 2082;
              unint64_t v188 = v116;
              __int16 v189 = 2082;
              BOOL v190 = v117;
              __int16 v191 = 2114;
              id v192 = v118;
              _os_log_impl(&dword_1830D4000, v87, v111, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] _symptoms_daemon_fallback_subseq_disposition failed, cancelling fallback, backtrace limit exceeded", buf, 0x48u);
            }
          }

LABEL_117:
          int v86 = (char *)v161;
          goto LABEL_118;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v27 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          char v148 = nw_endpoint_handler_get_id_string(v1);
          nw_endpoint_t v149 = nw_endpoint_handler_dry_run_string(v1);
          nw_endpoint_t v150 = nw_endpoint_handler_copy_endpoint(v1);
          unint64_t v151 = nw_endpoint_get_logging_description(v150);
          unint64_t v152 = nw_endpoint_handler_state_string(v1);
          id v153 = nw_endpoint_handler_mode_string(v1);
          id v154 = nw_endpoint_handler_copy_current_path(v1);
          unint64_t v155 = (char *)*((void *)v166 + 1);
          *(_DWORD *)buf = 136448002;
          unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
          __int16 v181 = 2082;
          id_str = (char *)v148;
          __int16 v183 = 2082;
          unint64_t v184 = v149;
          __int16 v185 = 2082;
          os_log_type_t v186 = v151;
          __int16 v187 = 2082;
          unint64_t v188 = v152;
          __int16 v189 = 2082;
          BOOL v190 = v153;
          __int16 v191 = 2114;
          id v192 = v154;
          __int16 v193 = 2048;
          id v194 = v155;
          _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback reached usage cap of %llu bytes, asking for an update from symptoms", buf, 0x52u);
        }
      }
      else
      {
        os_log_type_t v25 = v1;
        BOOL v26 = (*((unsigned char *)v25 + 268) & 0x20) == 0;

        if (!v26) {
          goto LABEL_63;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v27 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          char v28 = v25;

          char v29 = v28;
          BOOL v30 = (*((unsigned char *)v25 + 268) & 1) == 0;

          if (v30) {
            char v31 = "";
          }
          else {
            char v31 = "dry-run ";
          }
          nw_endpoint_t v32 = nw_endpoint_handler_copy_endpoint(v29);
          nw_endpoint_t v33 = nw_endpoint_get_logging_description(v32);
          id v34 = v29;
          uint64_t v35 = v34;
          uint64_t v36 = v34[30];
          if (v36 > 5) {
            char v37 = "unknown-state";
          }
          else {
            char v37 = off_1E523FB38[v36];
          }

          __int16 v43 = v35;
          __int16 v44 = "path";
          switch(v165->mode)
          {
            case 0:
              break;
            case 1:
              __int16 v44 = "resolver";
              break;
            case 2:
              __int16 v44 = nw_endpoint_flow_mode_string(v43[31]);
              break;
            case 3:
              __int16 v44 = "proxy";
              break;
            case 4:
              __int16 v44 = "fallback";
              break;
            case 5:
              __int16 v44 = "transform";
              break;
            default:
              __int16 v44 = "unknown-mode";
              break;
          }
          uint64_t v162 = v44;

          int v48 = v27;
          nw_endpoint_t v49 = v32;
          os_log_type_t v50 = v33;
          __int16 v51 = v37;
          os_log_type_t v52 = v31;
          __int16 v53 = v43;
          os_unfair_lock_lock((os_unfair_lock_t)v53 + 28);
          id v54 = v53[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v53 + 28);

          nw_endpoint_t v55 = v49;
          os_log_type_t v27 = v48;
          uint64_t v56 = (char *)*((void *)v166 + 1);
          *(_DWORD *)buf = 136448002;
          unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
          __int16 v181 = 2082;
          id_str = v28->id_str;
          __int16 v183 = 2082;
          unint64_t v184 = v52;
          __int16 v185 = 2082;
          os_log_type_t v186 = v50;
          __int16 v187 = 2082;
          unint64_t v188 = v51;
          __int16 v189 = 2082;
          BOOL v190 = v162;
          __int16 v191 = 2114;
          id v192 = v54;
          __int16 v193 = 2048;
          id v194 = v56;
          _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback reached usage cap of %llu bytes, asking for an update from symptoms", buf, 0x52u);
        }
      }

      goto LABEL_63;
    }
    unint64_t v164 = v1;
    if (nw_endpoint_handler_get_minimize_logging(v1))
    {
      if (nw_endpoint_handler_get_logging_disabled(v1))
      {
LABEL_54:
        uint64_t v3 = v166;
        uint64_t v47 = *((void *)v166 + 11);
        if (v47)
        {
          nw_queue_cancel_source(v47);
          *((void *)v166 + 11) = 0;
        }
        goto LABEL_124;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      nw_endpoint_t v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v140 = nw_endpoint_handler_get_id_string(v1);
        __int16 v141 = nw_endpoint_handler_dry_run_string(v1);
        nw_endpoint_t v142 = nw_endpoint_handler_copy_endpoint(v1);
        __int16 v143 = nw_endpoint_get_logging_description(v142);
        id v144 = nw_endpoint_handler_state_string(v1);
        uint64_t v145 = nw_endpoint_handler_mode_string(v1);
        id v146 = nw_endpoint_handler_copy_current_path(v1);
        *(_DWORD *)buf = 136447746;
        unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
        __int16 v181 = 2082;
        id_str = (char *)v140;
        __int16 v183 = 2082;
        unint64_t v184 = v141;
        __int16 v185 = 2082;
        os_log_type_t v186 = v143;
        __int16 v187 = 2082;
        unint64_t v188 = v144;
        __int16 v189 = 2082;
        BOOL v190 = v145;
        __int16 v191 = 2114;
        id v192 = v146;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failed to get byte count for fallback connection with data cap, ignoring", buf, 0x48u);
      }
    }
    else
    {
      id v6 = v1;
      BOOL v7 = (*((unsigned char *)v6 + 268) & 0x20) == 0;

      if (!v7) {
        goto LABEL_54;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      nw_endpoint_t v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        nw_endpoint_t v9 = v6;

        int v10 = v9;
        BOOL v11 = (*((unsigned char *)v6 + 268) & 1) == 0;

        if (v11) {
          id v12 = "";
        }
        else {
          id v12 = "dry-run ";
        }
        nw_endpoint_t v13 = nw_endpoint_handler_copy_endpoint(v10);
        uint64_t v14 = nw_endpoint_get_logging_description(v13);
        uint64_t v15 = v10;
        id v16 = v15;
        uint64_t v17 = v15[30];
        if (v17 > 5) {
          uint64_t v18 = "unknown-state";
        }
        else {
          uint64_t v18 = off_1E523FB38[v17];
        }

        __int16 v40 = v16;
        char v41 = v40;
        __int16 v42 = "path";
        switch(v164->mode)
        {
          case 0:
            break;
          case 1:
            __int16 v42 = "resolver";
            break;
          case 2:
            __int16 v42 = nw_endpoint_flow_mode_string(v40[31]);
            break;
          case 3:
            __int16 v42 = "proxy";
            break;
          case 4:
            __int16 v42 = "fallback";
            break;
          case 5:
            __int16 v42 = "transform";
            break;
          default:
            __int16 v42 = "unknown-mode";
            break;
        }

        __int16 v45 = v41;
        os_unfair_lock_lock((os_unfair_lock_t)v45 + 28);
        id v46 = v45[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v45 + 28);

        *(_DWORD *)buf = 136447746;
        unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
        __int16 v181 = 2082;
        id_str = v9->id_str;
        __int16 v183 = 2082;
        unint64_t v184 = v12;
        __int16 v185 = 2082;
        os_log_type_t v186 = v14;
        __int16 v187 = 2082;
        unint64_t v188 = v18;
        __int16 v189 = 2082;
        BOOL v190 = v42;
        __int16 v191 = 2114;
        id v192 = v46;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failed to get byte count for fallback connection with data cap, ignoring", buf, 0x48u);
      }
    }

    goto LABEL_54;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  dispatch_time_t v19 = (id)gLogObj;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (mode > 5) {
      id v20 = "unknown-mode";
    }
    else {
      id v20 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446722;
    unint64_t v180 = "nw_endpoint_fallback_check_usage_cap";
    __int16 v181 = 2082;
    id_str = (char *)v20;
    __int16 v183 = 2082;
    unint64_t v184 = "fallback";
    _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

LABEL_128:
}

void sub_18391B2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_endpoint_fallback_check_usage_capP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1 + 32);
  if (!v3)
  {
    uint64_t v38 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v56 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
    dispatch_time_t v39 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (__nwlog_fault(v39, &type, &v53))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v40 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v56 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v53)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v40 = __nwlog_obj();
        os_log_type_t v43 = type;
        BOOL v44 = os_log_type_enabled(v40, type);
        if (backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v56 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
            __int16 v57 = 2082;
            BOOL v58 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v40, v43, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_58;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v56 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
          _os_log_impl(&dword_1830D4000, v40, v43, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v40 = __nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v56 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
          _os_log_impl(&dword_1830D4000, v40, v45, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_58:
    if (v39) {
      free(v39);
    }
    return;
  }
  BOOL v7 = v3;
  uint64_t v8 = v7[29];

  if (v8 == 4)
  {
    nw_endpoint_t v9 = nw_endpoint_handler_copy_fallback(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
    int v10 = v9;
    uint64_t v11 = *((void *)v9 + 1);
    BOOL v12 = __CFADD__(v11, a3);
    uint64_t v13 = v11 + a3;
    if (v12) {
      int v14 = 1;
    }
    else {
      int v14 = a2;
    }
    if (v12) {
      uint64_t v13 = -1;
    }
    *((_DWORD *)v9 + 26) = v14;
    *((void *)v9 + 1) = v13;
    if (a2 == 2)
    {
      uint64_t v36 = *((void *)v9 + 11);
      dispatch_time_t v37 = dispatch_time(0x8000000000000000, 1000000 * *((void *)v9 + 2));
      nw_queue_set_timer_values(v36, v37, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
      goto LABEL_32;
    }
    if (a2 != 1)
    {
      if (!a2)
      {
        if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v15 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
            uint64_t v17 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
            nw_endpoint_t v18 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
            logging_description = nw_endpoint_get_logging_description(v18);
            id v20 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
            unint64_t v21 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
            id v22 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
            *(_DWORD *)buf = 136447746;
            uint64_t v56 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
            __int16 v57 = 2082;
            BOOL v58 = (void *)id_string;
            __int16 v59 = 2082;
            char v60 = v17;
            __int16 v61 = 2082;
            BOOL v62 = logging_description;
            __int16 v63 = 2082;
            id v64 = v20;
            __int16 v65 = 2082;
            os_log_type_t v66 = v21;
            __int16 v67 = 2114;
            id v68 = v22;
            _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback no longer allowed for connection, cancelling", buf, 0x48u);
          }
        }
        uint64_t v23 = *((void *)v10 + 11);
        if (v23)
        {
          nw_queue_cancel_source(v23);
          *((void *)v10 + 11) = 0;
        }
        nw_endpoint_handler_cancel(*((void **)v10 + 5), 0, 1);
      }
      goto LABEL_32;
    }
    int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    if (minimize_logging)
    {
      if (logging_disabled) {
        goto LABEL_32;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v28 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        id v46 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        uint64_t v47 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v48 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        nw_endpoint_t v49 = nw_endpoint_get_logging_description(v48);
        os_log_type_t v50 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        __int16 v51 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v52 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136447746;
        uint64_t v56 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
        __int16 v57 = 2082;
        BOOL v58 = (void *)v46;
        __int16 v59 = 2082;
        char v60 = v47;
        __int16 v61 = 2082;
        BOOL v62 = v49;
        __int16 v63 = 2082;
        id v64 = v50;
        __int16 v65 = 2082;
        os_log_type_t v66 = v51;
        __int16 v67 = 2114;
        id v68 = v52;
        _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback now allowed for connection with no cap", buf, 0x48u);
      }
    }
    else
    {
      if (logging_disabled)
      {
LABEL_32:

        return;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v28 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        char v29 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        BOOL v30 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v31 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        nw_endpoint_t v32 = nw_endpoint_get_logging_description(v31);
        nw_endpoint_t v33 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        id v34 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v35 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136447746;
        uint64_t v56 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
        __int16 v57 = 2082;
        BOOL v58 = (void *)v29;
        __int16 v59 = 2082;
        char v60 = v30;
        __int16 v61 = 2082;
        BOOL v62 = v32;
        __int16 v63 = 2082;
        id v64 = v33;
        __int16 v65 = 2082;
        os_log_type_t v66 = v34;
        __int16 v67 = 2114;
        id v68 = v35;
        _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback now allowed for connection with no cap", buf, 0x48u);
      }
    }

    goto LABEL_32;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unint64_t v24 = (id)gLogObj;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    if (v8 > 5) {
      os_log_type_t v25 = "unknown-mode";
    }
    else {
      os_log_type_t v25 = off_1E523FB08[v8];
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v56 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
    __int16 v57 = 2082;
    BOOL v58 = (void *)v25;
    __int16 v59 = 2082;
    char v60 = "fallback";
    _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }
}

void sub_18391BB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL47nw_endpoint_fallback_start_post_transport_timerP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1)
{
  id v1 = *(_WORD **)(a1 + 32);
  *((_DWORD *)v1 + 20) = 327685;
  nw_endpoint_handler_report(v1, 0, v1 + 40, 0);
}

uint64_t nw_endpoint_fallback_get_timeout_nanos_for_path(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1;
    char v4 = v3[473];

    if (v4)
    {
      unint64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_weak_fallback_delay, 200);
      unint64_t v5 = networkd_settings_get_int64_with_default(nw_setting_tcpconn_fallback_delay_cap_ms, 500);
      uint64_t v7 = 2 * int64_with_default;
      if (2 * int64_with_default >= v5) {
        uint64_t v7 = v5;
      }
      if (int64_with_default <= 0x7FFFFFFFFFFFFFFELL) {
        unint64_t v5 = v7;
      }
    }
    else
    {
      unint64_t v5 = networkd_settings_get_int64_with_default(nw_setting_tcpconn_strong_fallback_delay, 100);
    }
    uint64_t v8 = 1000000 * v5;
    goto LABEL_9;
  }
  int v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v21 = "nw_endpoint_fallback_get_timeout_nanos_for_path";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v21 = "nw_endpoint_fallback_get_timeout_nanos_for_path";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v21 = "nw_endpoint_fallback_get_timeout_nanos_for_path";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v21 = "nw_endpoint_fallback_get_timeout_nanos_for_path";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v21 = "nw_endpoint_fallback_get_timeout_nanos_for_path";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_26:
  if (v11) {
    free(v11);
  }
  uint64_t v8 = 0;
LABEL_9:

  return v8;
}

void nw_endpoint_fallback_reset_expected_progress_target(void *a1, uint64_t a2)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  char v4 = v3;
  if (!v3)
  {
    os_log_type_t v43 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v77 = "nw_endpoint_handler_get_mode";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (__nwlog_fault(v44, &type, &v74))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v45 = __nwlog_obj();
        os_log_type_t v46 = type;
        if (os_log_type_enabled(v45, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v77 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v74)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v45 = __nwlog_obj();
        os_log_type_t v48 = type;
        BOOL v49 = os_log_type_enabled(v45, type);
        if (backtrace_string)
        {
          if (v49)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v77 = "nw_endpoint_handler_get_mode";
            __int16 v78 = 2082;
            char v79 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v45, v48, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_55;
        }
        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v77 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v45, v48, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v45 = __nwlog_obj();
        os_log_type_t v50 = type;
        if (os_log_type_enabled(v45, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v77 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v45, v50, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_55:
    if (v44) {
      free(v44);
    }
    unsigned int mode = 0;
    goto LABEL_58;
  }
  unsigned int mode = v3->mode;

  if (mode == 4)
  {
    id v6 = nw_endpoint_handler_copy_fallback(v4);
    uint64_t v7 = v6;
    if ((*((unsigned char *)v6 + 108) & 0x42) != 2 || !a2 || !*((void *)v6 + 9)) {
      goto LABEL_38;
    }
    int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_progress_target_fallback_leeway, 2500);
    uint64_t v9 = *((void *)v7 + 12);
    uint64_t v10 = mach_continuous_time();
    if (v10 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v10;
    }
    unint64_t v12 = nw_delta_nanos(v9, v11);
    unint64_t v13 = *((void *)v7 + 3);
    BOOL v14 = v13 >= v12;
    unint64_t v15 = v13 - v12;
    if (!v14) {
      unint64_t v15 = 0;
    }
    unint64_t v16 = v15 + 1000000 * int64_with_default;
    unsigned int v17 = dword_1EB267624;
    if (!dword_1EB267624)
    {
      mach_timebase_info((mach_timebase_info_t)&time_base);
      unsigned int v17 = dword_1EB267624;
    }
    unint64_t v18 = time_base;
    if (mach_continuous_time() + v16 * v17 / v18 <= a2) {
      goto LABEL_38;
    }
    int64_t v19 = networkd_settings_get_int64_with_default(nw_setting_tcpconn_strong_fallback_delay, 100);
    if (1000000 * v19 >= v12) {
      int64_t v20 = 1000000 * v19 - v12;
    }
    else {
      int64_t v20 = 0;
    }
    if (nw_endpoint_handler_get_minimize_logging(v4))
    {
      if (nw_endpoint_handler_get_logging_disabled(v4)) {
        goto LABEL_37;
      }
      unint64_t v64 = v20;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v23 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v4);
        __int16 v65 = nw_endpoint_handler_dry_run_string(v4);
        nw_endpoint_t v66 = nw_endpoint_handler_copy_endpoint(v4);
        logging_description = nw_endpoint_get_logging_description(v66);
        id v68 = nw_endpoint_handler_state_string(v4);
        uint64_t v69 = nw_endpoint_handler_mode_string(v4);
        id v70 = nw_endpoint_handler_copy_current_path(v4);
        *(_DWORD *)buf = 136448002;
        nw_endpoint_t v77 = "nw_endpoint_fallback_reset_expected_progress_target";
        __int16 v78 = 2082;
        char v79 = (void *)id_string;
        __int16 v80 = 2082;
        unint64_t v81 = v65;
        __int16 v82 = 2082;
        char v83 = (void *)logging_description;
        __int16 v84 = 2082;
        uint64_t v85 = v68;
        __int16 v86 = 2082;
        int v87 = v69;
        int64_t v20 = v64;
        __int16 v88 = 2114;
        id v89 = v70;
        __int16 v90 = 2048;
        unint64_t v91 = v64 / 0xF4240;
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] target time set, resetting fallback timer to %llums", buf, 0x52u);
      }
    }
    else
    {
      unint64_t v21 = v4;
      char v22 = *((unsigned char *)v21 + 268);

      if ((v22 & 0x20) != 0)
      {
LABEL_37:
        uint64_t v41 = *((void *)v7 + 9);
        dispatch_time_t v42 = dispatch_time(0x8000000000000000, v20);
        nw_queue_set_timer_values(v41, v42, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
LABEL_38:

        goto LABEL_92;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v23 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = v21;

        os_log_type_t v25 = v24;
        char v26 = *((unsigned char *)v21 + 268);

        if (v26) {
          os_log_type_t v27 = "dry-run ";
        }
        else {
          os_log_type_t v27 = "";
        }
        nw_endpoint_t v28 = nw_endpoint_handler_copy_endpoint(v25);
        char v29 = nw_endpoint_get_logging_description(v28);
        id_str = v24->id_str;
        nw_endpoint_t v31 = v25;
        nw_endpoint_t v32 = v31;
        uint64_t v33 = v31[30];
        if (v33 > 5) {
          id v34 = "unknown-state";
        }
        else {
          id v34 = off_1E523FB38[v33];
        }
        nw_endpoint_t v71 = v34;

        id v35 = v32;
        uint64_t v36 = v35;
        log = v23;
        unint64_t v37 = v20;
        uint64_t v38 = "path";
        switch(v4->mode)
        {
          case 0:
            break;
          case 1:
            uint64_t v38 = "resolver";
            break;
          case 2:
            uint64_t v38 = nw_endpoint_flow_mode_string(v35[31]);
            break;
          case 3:
            uint64_t v38 = "proxy";
            break;
          case 4:
            uint64_t v38 = "fallback";
            break;
          case 5:
            uint64_t v38 = "transform";
            break;
          default:
            uint64_t v38 = "unknown-mode";
            break;
        }

        dispatch_time_t v39 = v36;
        os_unfair_lock_lock((os_unfair_lock_t)v39 + 28);
        id v40 = v39[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v39 + 28);

        *(_DWORD *)buf = 136448002;
        nw_endpoint_t v77 = "nw_endpoint_fallback_reset_expected_progress_target";
        __int16 v78 = 2082;
        char v79 = id_str;
        __int16 v80 = 2082;
        unint64_t v81 = v27;
        __int16 v82 = 2082;
        char v83 = (void *)v29;
        __int16 v84 = 2082;
        uint64_t v85 = v71;
        __int16 v86 = 2082;
        int v87 = v38;
        int64_t v20 = v37;
        __int16 v88 = 2114;
        id v89 = v40;
        __int16 v90 = 2048;
        unint64_t v91 = v37 / 0xF4240;
        uint64_t v23 = log;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] target time set, resetting fallback timer to %llums", buf, 0x52u);
      }
    }

    goto LABEL_37;
  }
LABEL_58:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v51 = (id)gLogObj;
  if (mode > 5) {
    id v52 = "unknown-mode";
  }
  else {
    id v52 = off_1E523FB08[mode];
  }
  *(_DWORD *)buf = 136446722;
  nw_endpoint_t v77 = "nw_endpoint_fallback_reset_expected_progress_target";
  __int16 v78 = 2082;
  char v79 = (void *)v52;
  __int16 v80 = 2082;
  unint64_t v81 = "fallback";
  char v53 = (void *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v74 = 0;
  if (!__nwlog_fault((const char *)v53, &type, &v74))
  {
LABEL_90:
    if (!v53) {
      goto LABEL_92;
    }
LABEL_91:
    free(v53);
    goto LABEL_92;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v54 = (id)gLogObj;
    os_log_type_t v55 = type;
    if (os_log_type_enabled(v54, type))
    {
      if (mode > 5) {
        uint64_t v56 = "unknown-mode";
      }
      else {
        uint64_t v56 = off_1E523FB08[mode];
      }
      *(_DWORD *)buf = 136446722;
      nw_endpoint_t v77 = "nw_endpoint_fallback_reset_expected_progress_target";
      __int16 v78 = 2082;
      char v79 = (void *)v56;
      __int16 v80 = 2082;
      unint64_t v81 = "fallback";
      _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_89:

    goto LABEL_90;
  }
  if (!v74)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v54 = (id)gLogObj;
    os_log_type_t v61 = type;
    if (os_log_type_enabled(v54, type))
    {
      if (mode > 5) {
        BOOL v62 = "unknown-mode";
      }
      else {
        BOOL v62 = off_1E523FB08[mode];
      }
      *(_DWORD *)buf = 136446722;
      nw_endpoint_t v77 = "nw_endpoint_fallback_reset_expected_progress_target";
      __int16 v78 = 2082;
      char v79 = (void *)v62;
      __int16 v80 = 2082;
      unint64_t v81 = "fallback";
      _os_log_impl(&dword_1830D4000, v54, v61, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_89;
  }
  __int16 v57 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v54 = (id)gLogObj;
  os_log_type_t v58 = type;
  BOOL v59 = os_log_type_enabled(v54, type);
  if (!v57)
  {
    if (v59)
    {
      if (mode > 5) {
        __int16 v63 = "unknown-mode";
      }
      else {
        __int16 v63 = off_1E523FB08[mode];
      }
      *(_DWORD *)buf = 136446722;
      nw_endpoint_t v77 = "nw_endpoint_fallback_reset_expected_progress_target";
      __int16 v78 = 2082;
      char v79 = (void *)v63;
      __int16 v80 = 2082;
      unint64_t v81 = "fallback";
      _os_log_impl(&dword_1830D4000, v54, v58, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_89;
  }
  if (v59)
  {
    if (mode > 5) {
      char v60 = "unknown-mode";
    }
    else {
      char v60 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446978;
    nw_endpoint_t v77 = "nw_endpoint_fallback_reset_expected_progress_target";
    __int16 v78 = 2082;
    char v79 = (void *)v60;
    __int16 v80 = 2082;
    unint64_t v81 = "fallback";
    __int16 v82 = 2082;
    char v83 = v57;
    _os_log_impl(&dword_1830D4000, v54, v58, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v57);
  if (v53) {
    goto LABEL_91;
  }
LABEL_92:
}

void sub_18391CCB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

long long *nw_protocol_http2_transport_identifier()
{
  if (nw_protocol_http2_transport_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http2_transport_identifier::onceToken, &__block_literal_global_37312);
  }
  return &g_http2_transport_protocol_identifier;
}

BOOL __nw_protocol_http2_transport_identifier_block_invoke()
{
  qword_1E8F697A0 = 0x200000003;
  qword_1E8F69770 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F69760 = (uint64_t)nw_protocol_default_get_message_properties;
  qword_1E8F696D0 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F696E8 = (uint64_t)nw_protocol_default_get_local;
  qword_1E8F696E0 = (uint64_t)nw_protocol_default_get_path;
  qword_1E8F69710 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F69730 = (uint64_t)nw_protocol_default_get_output_local;
  qword_1E8F69738 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F69768 = (uint64_t)nw_protocol_default_reset;
  qword_1E8F69718 = (uint64_t)nw_protocol_default_supports_external_data;
  qword_1E8F69740 = (uint64_t)nw_protocol_default_waiting_for_output;
  qword_1E8F69748 = (uint64_t)nw_protocol_default_copy_info;
  qword_1E8F696F8 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F69700 = (uint64_t)nw_protocol_default_unregister_notification;
  qword_1E8F69680 = (uint64_t)nw_protocol_http2_transport_connect;
  qword_1E8F69690 = (uint64_t)nw_protocol_http2_transport_connected;
  qword_1E8F69688 = (uint64_t)nw_protocol_http2_transport_disconnect;
  qword_1E8F69698 = (uint64_t)nw_protocol_http2_transport_disconnected;
  qword_1E8F69728 = (uint64_t)nw_protocol_http2_transport_output_finished;
  qword_1E8F69720 = (uint64_t)nw_protocol_http2_transport_input_finished;
  g_http2_transport_protocol_callbacks = (uint64_t)nw_protocol_http2_transport_add_input_handler;
  qword_1E8F69670 = (uint64_t)nw_protocol_http2_transport_remove_input_handler;
  qword_1E8F69678 = (uint64_t)nw_protocol_http2_replace_input_handler;
  qword_1E8F696A8 = (uint64_t)nw_protocol_http2_transport_input_available;
  qword_1E8F696B0 = (uint64_t)nw_protocol_http2_transport_output_available;
  qword_1E8F696B8 = (uint64_t)nw_protocol_http2_transport_get_input_frames;
  qword_1E8F696C0 = (uint64_t)nw_protocol_http2_transport_get_output_frames;
  qword_1E8F696D8 = (uint64_t)nw_protocol_http2_transport_get_parameters;
  qword_1E8F696C8 = (uint64_t)nw_protocol_http2_transport_finalize_output_frames;
  qword_1E8F69750 = (uint64_t)nw_protocol_http2_transport_add_listen_handler;
  qword_1E8F69758 = (uint64_t)nw_protocol_http2_transport_remove_listen_handler;
  qword_1E8F696F0 = (uint64_t)nw_protocol_http2_transport_get_remote_endpoint;
  qword_1E8F696A0 = (uint64_t)nw_protocol_http2_transport_error;
  qword_1E8F69708 = (uint64_t)nw_protocol_http2_transport_notify;
  return nw_protocol_register_many_to_one((uint64_t)&g_http2_transport_protocol_identifier, (uint64_t)nw_protocol_http2_transport_create, (uint64_t)nw_protocol_http2_transport_accept);
}

BOOL nw_protocol_http2_transport_accept(nw_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v18 = "nw_protocol_http2_transport_accept";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v18 = "nw_protocol_http2_transport_accept";
      uint64_t v9 = "%{public}s called with null protocol";
      goto LABEL_39;
    }
    if (!v15)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v18 = "nw_protocol_http2_transport_accept";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v12 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (!v12) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v18 = "nw_protocol_http2_transport_accept";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_39;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v18 = "nw_protocol_http2_transport_accept";
      __int16 v19 = 2082;
      int64_t v20 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_40:
    if (!v6) {
      return 0;
    }
LABEL_41:
    free(v6);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v18 = "nw_protocol_http2_transport_accept";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v18 = "nw_protocol_http2_transport_accept";
      uint64_t v9 = "%{public}s called with null http2_transport";
      goto LABEL_39;
    }
    if (!v15)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v18 = "nw_protocol_http2_transport_accept";
      uint64_t v9 = "%{public}s called with null http2_transport, backtrace limit exceeded";
      goto LABEL_39;
    }
    unint64_t v13 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v14 = os_log_type_enabled(v7, type);
    if (v13)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v18 = "nw_protocol_http2_transport_accept";
        __int16 v19 = 2082;
        int64_t v20 = v13;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v13);
      if (!v6) {
        return 0;
      }
      goto LABEL_41;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446210;
      unint64_t v18 = "nw_protocol_http2_transport_accept";
      uint64_t v9 = "%{public}s called with null http2_transport, no backtrace";
LABEL_39:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      goto LABEL_40;
    }
    goto LABEL_40;
  }
  if (gLogDatapath)
  {
    uint64_t v10 = __nwlog_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v18 = "nw_protocol_http2_transport_accept";
      __int16 v19 = 2082;
      int64_t v20 = handle + 205;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if ((handle[204] & 4) == 0) {
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unint64_t v5 = gLogObj;
  BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    unint64_t v18 = "nw_protocol_http2_transport_accept";
    __int16 v19 = 2082;
    int64_t v20 = handle + 205;
    _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s %{public}s cannot accept new streams after the tunnel is closed", buf, 0x16u);
    return 0;
  }
  return result;
}

BOOL nw_protocol_http2_transport_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v36 = __nwlog_obj();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v49 = "nw_protocol_http2_transport_create";
      _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 0x128uLL, 0x68FF3B34uLL))
  {
    char v4 = memptr;
    if (memptr)
    {
LABEL_4:
      *((void *)v4 + 36) = 0;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      unint64_t v5 = v4 + 176;
      *((_OWORD *)v4 + 10) = 0u;
      id v6 = v4 + 160;
      *((_OWORD *)v4 + 9) = 0u;
      uint64_t v7 = v4 + 144;
      *((_OWORD *)v4 + 8) = 0u;
      os_log_type_t v8 = v4 + 128;
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *(_OWORD *)char v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((void *)v4 + 2) = &g_http2_transport_protocol_identifier;
      *((void *)v4 + 3) = &g_http2_transport_protocol_callbacks;
      *((void *)v4 + 5) = v4;
      *((void *)v4 + 8) = -1;
      if (nw_parameters_get_server_mode(a3)) {
        char v9 = 16;
      }
      else {
        char v9 = 0;
      }
      v4[204] = v4[204] & 0xEF | v9;
      void *v8 = 0;
      *((void *)v4 + 17) = v8;
      *uint64_t v7 = 0;
      *((void *)v4 + 19) = v7;
      *id v6 = 0;
      *((void *)v4 + 21) = v6;
      *unint64_t v5 = 0;
      *((void *)v4 + 23) = v5;
      *((void *)v4 + 24) = 0;
      memptr = 0;
      if (nghttp2_session_callbacks_new())
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = nghttp2_strerror();
        *(_DWORD *)buf = 136446466;
        BOOL v49 = "nw_protocol_http2_transport_create";
        __int16 v50 = 2082;
        uint64_t v51 = v10;
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v46 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v11, type, &v46)) {
          goto LABEL_31;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v12 = gLogObj;
          os_log_type_t v13 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_31;
          }
          uint64_t v14 = nghttp2_strerror();
          *(_DWORD *)buf = 136446466;
          BOOL v49 = "nw_protocol_http2_transport_create";
          __int16 v50 = 2082;
          uint64_t v51 = v14;
          char v15 = "%{public}s nghttp2_session_callbacks_new: %{public}s failed";
LABEL_29:
          os_log_type_t v25 = v12;
          os_log_type_t v26 = v13;
          uint32_t v27 = 22;
LABEL_30:
          _os_log_impl(&dword_1830D4000, v25, v26, v15, buf, v27);
          goto LABEL_31;
        }
        if (v46 == OS_LOG_TYPE_DEFAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v12 = gLogObj;
          os_log_type_t v13 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_31;
          }
          uint64_t v23 = nghttp2_strerror();
          *(_DWORD *)buf = 136446466;
          BOOL v49 = "nw_protocol_http2_transport_create";
          __int16 v50 = 2082;
          uint64_t v51 = v23;
          char v15 = "%{public}s nghttp2_session_callbacks_new: %{public}s failed, backtrace limit exceeded";
          goto LABEL_29;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v12 = gLogObj;
        os_log_type_t v13 = type[0];
        BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (!backtrace_string)
        {
          if (!v21) {
            goto LABEL_31;
          }
          uint64_t v24 = nghttp2_strerror();
          *(_DWORD *)buf = 136446466;
          BOOL v49 = "nw_protocol_http2_transport_create";
          __int16 v50 = 2082;
          uint64_t v51 = v24;
          char v15 = "%{public}s nghttp2_session_callbacks_new: %{public}s failed, no backtrace";
          goto LABEL_29;
        }
        if (v21)
        {
          uint64_t v22 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          BOOL v49 = "nw_protocol_http2_transport_create";
          __int16 v50 = 2082;
          uint64_t v51 = v22;
          __int16 v52 = 2082;
          uint64_t v53 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s nghttp2_session_callbacks_new: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(backtrace_string);
LABEL_31:
        if (!v11)
        {
LABEL_33:
          free(v4);
          return 0;
        }
LABEL_32:
        free(v11);
        goto LABEL_33;
      }
      nghttp2_session_callbacks_set_before_frame_send_callback();
      nghttp2_session_callbacks_set_on_header_callback();
      nghttp2_session_callbacks_set_on_begin_headers_callback();
      nghttp2_session_callbacks_set_on_frame_recv_callback();
      nghttp2_session_callbacks_set_on_data_chunk_recv_callback();
      nghttp2_session_callbacks_set_on_stream_close_callback();
      nghttp2_session_callbacks_set_on_frame_send_callback();
      nghttp2_session_callbacks_set_send_callback();
      nghttp2_session_callbacks_set_send_data_callback();
      nghttp2_session_callbacks_set_on_frame_not_send_callback();
      nghttp2_session_callbacks_set_on_invalid_frame_recv_callback();
      nghttp2_session_callbacks_set_error_callback2();
      nghttp2_set_debug_vprintf_callback();
      *(void *)os_log_type_t type = 0;
      nghttp2_option_new();
      nghttp2_option_set_no_auto_window_update();
      nghttp2_option_set_peer_max_concurrent_streams();
      nghttp2_option_set_no_http_messaging();
      nghttp2_option_set_no_http_semantics();
      nghttp2_option_set_no_closed_streams();
      if ((v4[204] & 0x10) != 0)
      {
        if ((nghttp2_session_server_new2() & 0x80000000) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v29 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          BOOL v49 = "nw_protocol_http2_transport_create";
          __int16 v50 = 2082;
          uint64_t v51 = (uint64_t)(v4 + 205);
          __int16 v52 = 2082;
          uint64_t v53 = v29;
          uint64_t v11 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t v46 = OS_LOG_TYPE_ERROR;
          char v44 = 0;
          if (!__nwlog_fault(v11, &v46, &v44)) {
            goto LABEL_31;
          }
          if (v46 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unsigned int v17 = gLogObj;
            os_log_type_t v18 = v46;
            if (!os_log_type_enabled((os_log_t)gLogObj, v46)) {
              goto LABEL_31;
            }
            goto LABEL_17;
          }
          if (v44)
          {
            BOOL v30 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unsigned int v17 = gLogObj;
            os_log_type_t v18 = v46;
            BOOL v32 = os_log_type_enabled((os_log_t)gLogObj, v46);
            if (v30)
            {
              if (!v32) {
                goto LABEL_48;
              }
              goto LABEL_47;
            }
            if (!v32) {
              goto LABEL_31;
            }
LABEL_57:
            uint64_t v35 = nghttp2_strerror();
            *(_DWORD *)buf = 136446722;
            BOOL v49 = "nw_protocol_http2_transport_create";
            __int16 v50 = 2082;
            uint64_t v51 = (uint64_t)(v4 + 205);
            __int16 v52 = 2082;
            uint64_t v53 = v35;
            char v15 = "%{public}s %{public}s nghttp2_session_server_new2 failed: %{public}s, no backtrace";
            goto LABEL_58;
          }
          unsigned int v17 = __nwlog_obj();
          os_log_type_t v18 = v46;
          if (!os_log_type_enabled(v17, v46)) {
            goto LABEL_31;
          }
LABEL_51:
          uint64_t v34 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          BOOL v49 = "nw_protocol_http2_transport_create";
          __int16 v50 = 2082;
          uint64_t v51 = (uint64_t)(v4 + 205);
          __int16 v52 = 2082;
          uint64_t v53 = v34;
          char v15 = "%{public}s %{public}s nghttp2_session_server_new2 failed: %{public}s, backtrace limit exceeded";
          goto LABEL_58;
        }
      }
      else if ((nghttp2_session_client_new2() & 0x80000000) != 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        BOOL v49 = "nw_protocol_http2_transport_create";
        __int16 v50 = 2082;
        uint64_t v51 = (uint64_t)(v4 + 205);
        __int16 v52 = 2082;
        uint64_t v53 = v16;
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v46 = OS_LOG_TYPE_ERROR;
        char v44 = 0;
        if (!__nwlog_fault(v11, &v46, &v44)) {
          goto LABEL_31;
        }
        if (v46 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unsigned int v17 = gLogObj;
          os_log_type_t v18 = v46;
          if (!os_log_type_enabled((os_log_t)gLogObj, v46)) {
            goto LABEL_31;
          }
LABEL_17:
          uint64_t v19 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          BOOL v49 = "nw_protocol_http2_transport_create";
          __int16 v50 = 2082;
          uint64_t v51 = (uint64_t)(v4 + 205);
          __int16 v52 = 2082;
          uint64_t v53 = v19;
          char v15 = "%{public}s %{public}s nghttp2_session_server_new2 failed: %{public}s";
LABEL_58:
          os_log_type_t v25 = v17;
          os_log_type_t v26 = v18;
          uint32_t v27 = 32;
          goto LABEL_30;
        }
        if (v44)
        {
          BOOL v30 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unsigned int v17 = gLogObj;
          os_log_type_t v18 = v46;
          BOOL v31 = os_log_type_enabled((os_log_t)gLogObj, v46);
          if (v30)
          {
            if (!v31) {
              goto LABEL_48;
            }
LABEL_47:
            uint64_t v33 = nghttp2_strerror();
            *(_DWORD *)buf = 136446978;
            BOOL v49 = "nw_protocol_http2_transport_create";
            __int16 v50 = 2082;
            uint64_t v51 = (uint64_t)(v4 + 205);
            __int16 v52 = 2082;
            uint64_t v53 = v33;
            __int16 v54 = 2082;
            os_log_type_t v55 = v30;
            _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s %{public}s nghttp2_session_server_new2 failed: %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
LABEL_48:
            free(v30);
            if (!v11) {
              goto LABEL_33;
            }
            goto LABEL_32;
          }
          if (!v31) {
            goto LABEL_31;
          }
          goto LABEL_57;
        }
        unsigned int v17 = __nwlog_obj();
        os_log_type_t v18 = v46;
        if (!os_log_type_enabled(v17, v46)) {
          goto LABEL_31;
        }
        goto LABEL_51;
      }
      MEMORY[0x1853174A0](memptr);
      MEMORY[0x185317410](*(void *)type);
      return (BOOL)v4;
    }
  }
  unint64_t v37 = __nwlog_obj();
  os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v49 = "strict_memalign";
  __int16 v50 = 2048;
  uint64_t v51 = 8;
  __int16 v52 = 2048;
  uint64_t v53 = 296;
  uint64_t v38 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v38);
  if (!result)
  {
    free(v38);
    char v4 = memptr;
    if (memptr) {
      goto LABEL_4;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    BOOL v49 = "nw_protocol_http2_transport_create";
    __int16 v50 = 2048;
    uint64_t v51 = 296;
    char v4 = (unsigned char *)_os_log_send_and_compose_impl();
    LOBYTE(memptr) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v4, &memptr, type))
    {
      if (memptr == 17)
      {
        dispatch_time_t v39 = __nwlog_obj();
        os_log_type_t v40 = memptr;
        if (!os_log_type_enabled(v39, (os_log_type_t)memptr)) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446466;
        BOOL v49 = "nw_protocol_http2_transport_create";
        __int16 v50 = 2048;
        uint64_t v51 = 296;
        uint64_t v41 = "%{public}s calloc(%zu) failed";
LABEL_76:
        _os_log_impl(&dword_1830D4000, v39, v40, v41, buf, 0x16u);
        goto LABEL_77;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        dispatch_time_t v39 = __nwlog_obj();
        os_log_type_t v40 = memptr;
        if (!os_log_type_enabled(v39, (os_log_type_t)memptr)) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446466;
        BOOL v49 = "nw_protocol_http2_transport_create";
        __int16 v50 = 2048;
        uint64_t v51 = 296;
        uint64_t v41 = "%{public}s calloc(%zu) failed, backtrace limit exceeded";
        goto LABEL_76;
      }
      dispatch_time_t v42 = (char *)__nw_create_backtrace_string();
      dispatch_time_t v39 = __nwlog_obj();
      os_log_type_t v40 = memptr;
      BOOL v43 = os_log_type_enabled(v39, (os_log_type_t)memptr);
      if (!v42)
      {
        if (!v43) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446466;
        BOOL v49 = "nw_protocol_http2_transport_create";
        __int16 v50 = 2048;
        uint64_t v51 = 296;
        uint64_t v41 = "%{public}s calloc(%zu) failed, no backtrace";
        goto LABEL_76;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446722;
        BOOL v49 = "nw_protocol_http2_transport_create";
        __int16 v50 = 2048;
        uint64_t v51 = 296;
        __int16 v52 = 2082;
        uint64_t v53 = (uint64_t)v42;
        _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s calloc(%zu) failed, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v42);
    }
LABEL_77:
    if (!v4) {
      return 0;
    }
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

void nghttp2_debug_logging_callback(const char *a1, va_list a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v4 = 0;
  vasprintf(&v4, a1, a2);
  uint64_t v2 = v4;
  if (v4)
  {
    if (!gLogDatapath) {
      goto LABEL_3;
    }
    uint64_t v3 = __nwlog_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      id v6 = "nghttp2_debug_logging_callback";
      __int16 v7 = 2082;
      os_log_type_t v8 = v4;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s", buf, 0x16u);
    }
    uint64_t v2 = v4;
    if (v4) {
LABEL_3:
    }
      free(v2);
  }
}

uint64_t error_callback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v8 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    int64_t v20 = "error_callback";
    __int16 v21 = 1024;
    *(_DWORD *)uint64_t v22 = a2;
    *(_WORD *)&uint8_t v22[4] = 2080;
    *(void *)&v22[6] = a3;
    _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s called with error %d, message %s", buf, 0x1Cu);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v9 = gLogObj;
  if (a5)
  {
    uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446978;
      int64_t v20 = "error_callback";
      __int16 v21 = 2082;
      *(void *)uint64_t v22 = a5 + 205;
      *(_WORD *)&v22[8] = 1024;
      *(_DWORD *)&v22[10] = a2;
      __int16 v23 = 2080;
      uint64_t v24 = a3;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s %{public}s error (%d: %s)", buf, 0x26u);
      return 0;
    }
    return result;
  }
  *(_DWORD *)buf = 136446210;
  int64_t v20 = "error_callback";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v11, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        int64_t v20 = "error_callback";
        uint64_t v14 = "%{public}s nghttp2 user data is NULL, not http2_transport";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          int64_t v20 = "error_callback";
          __int16 v21 = 2082;
          *(void *)uint64_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_21;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        int64_t v20 = "error_callback";
        uint64_t v14 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
        goto LABEL_20;
      }
    }
    else
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        int64_t v20 = "error_callback";
        uint64_t v14 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
  }
LABEL_21:
  if (v11) {
    free(v11);
  }
  return 4294966394;
}

{
  NSObject *v8;
  NSObject *v9;
  uint64_t result;
  int v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  BOOL v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  unsigned char v23[18];
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  BOOL v30 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v8 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    __int16 v21 = "error_callback";
    uint64_t v22 = 1024;
    *(_DWORD *)__int16 v23 = a2;
    *(_WORD *)&v23[4] = 2080;
    *(void *)&v23[6] = a3;
    _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s called with error %d, message %s", buf, 0x1Cu);
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "error_callback";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v18 = 0;
    if (__nwlog_fault(v12, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v13 = __nwlog_obj();
        uint64_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v21 = "error_callback";
          char v15 = "%{public}s nghttp2 user data is NULL, not http2";
LABEL_24:
          _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v13 = __nwlog_obj();
        uint64_t v14 = type;
        char v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v21 = "error_callback";
            uint64_t v22 = 2082;
            *(void *)__int16 v23 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_25;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v21 = "error_callback";
          char v15 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
          goto LABEL_24;
        }
      }
      else
      {
        os_log_type_t v13 = __nwlog_obj();
        uint64_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v21 = "error_callback";
          char v15 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
          goto LABEL_24;
        }
      }
    }
LABEL_25:
    if (v12) {
      free(v12);
    }
    return 4294966394;
  }
  if (*(__int16 *)(a5 + 388) < 0) {
    return 0;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  uint64_t v9 = gconnectionLogObj;
  uint64_t result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v11 = *(_DWORD *)(a5 + 368);
    *(_DWORD *)buf = 136447490;
    __int16 v21 = "error_callback";
    uint64_t v22 = 2082;
    *(void *)__int16 v23 = a5 + 390;
    *(_WORD *)&v23[8] = 2080;
    *(void *)&v23[10] = " ";
    uint64_t v24 = 1024;
    uint64_t v25 = v11;
    os_log_type_t v26 = 1024;
    uint32_t v27 = a2;
    nw_endpoint_t v28 = 2080;
    uint64_t v29 = a3;
    _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> error (%d: %s)", buf, 0x36u);
    return 0;
  }
  return result;
}

uint64_t on_invalid_frame_recv_callback(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "on_invalid_frame_recv_callback";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "on_invalid_frame_recv_callback";
      os_log_type_t v13 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v23 = "on_invalid_frame_recv_callback";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_36;
      }
      if (!v18)
      {
LABEL_36:
        if (v10) {
          free(v10);
        }
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "on_invalid_frame_recv_callback";
      os_log_type_t v13 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "on_invalid_frame_recv_callback";
      os_log_type_t v13 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    goto LABEL_36;
  }
  if (gLogDatapath)
  {
    char v15 = __nwlog_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      __int16 v23 = "on_invalid_frame_recv_callback";
      __int16 v24 = 2082;
      uint64_t v25 = (char *)(a4 + 205);
      __int16 v26 = 1024;
      int v27 = a3;
      __int16 v28 = 2080;
      uint64_t v29 = nghttp2_strerror();
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called with error %d (%s)", buf, 0x26u);
    }
  }
  if (!a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v23 = "on_invalid_frame_recv_callback";
      __int16 v24 = 2082;
      uint64_t v25 = (char *)(a4 + 205);
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s %{public}s no frame, closing", buf, 0x16u);
    }
    goto LABEL_10;
  }
  int v6 = *(_DWORD *)(a2 + 8);
  if (gLogDatapath)
  {
    BOOL v16 = __nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v23 = "on_invalid_frame_recv_callback";
      __int16 v24 = 2082;
      uint64_t v25 = (char *)(a4 + 205);
      __int16 v26 = 1024;
      int v27 = v6;
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s error on stream %d", buf, 0x1Cu);
    }
  }
  if (v6 == -1)
  {
    nw_http2_transport_connection_close(a4);
    return 0;
  }
  uint64_t stream_from_id = nw_http2_transport_get_stream_from_id(a4, v6, 0);
  if (stream_from_id)
  {
    nw_http2_transport_stream_close(a4, stream_from_id);
LABEL_10:
    *(unsigned char *)(a4 + 204) |= 8u;
    return 4294966394;
  }
  if (!gLogDatapath) {
    return 0;
  }
  uint64_t v19 = __nwlog_obj();
  uint64_t result = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    *(_DWORD *)buf = 136446722;
    __int16 v23 = "on_invalid_frame_recv_callback";
    __int16 v24 = 2082;
    uint64_t v25 = (char *)(a4 + 205);
    __int16 v26 = 1024;
    int v27 = v6;
    _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s No stream found for id %d, ignoring", buf, 0x1Cu);
    return 0;
  }
  return result;
}

{
  int v6;
  uint64_t stream_from_id;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t result;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  NSObject *v17;
  int v18;
  uint64_t v19;
  int v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char *backtrace_string;
  BOOL v28;
  NSObject *v29;
  int v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  os_log_type_t v45 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v34 = "on_invalid_frame_recv_callback";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v31 = 0;
    if (!__nwlog_fault(v12, &type, &v31)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      uint64_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v34 = "on_invalid_frame_recv_callback";
      char v15 = "%{public}s nghttp2 user data is NULL, not http2";
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      uint64_t v14 = type;
      __int16 v28 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v34 = "on_invalid_frame_recv_callback";
          uint64_t v35 = 2082;
          uint64_t v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_55;
      }
      if (!v28)
      {
LABEL_55:
        if (v12) {
          free(v12);
        }
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v34 = "on_invalid_frame_recv_callback";
      char v15 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      uint64_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v34 = "on_invalid_frame_recv_callback";
      char v15 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_55;
  }
  if ((*(__int16 *)(a4 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    char v17 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      BOOL v18 = *(_DWORD *)(a4 + 368);
      *(_DWORD *)buf = 136447490;
      uint64_t v34 = "on_invalid_frame_recv_callback";
      uint64_t v35 = 2082;
      uint64_t v36 = (char *)(a4 + 390);
      unint64_t v37 = 2080;
      uint64_t v38 = " ";
      dispatch_time_t v39 = 1024;
      os_log_type_t v40 = v18;
      uint64_t v41 = 1024;
      dispatch_time_t v42 = a3;
      BOOL v43 = 2080;
      char v44 = nghttp2_strerror();
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called with error %d (%s)", buf, 0x36u);
    }
  }
  if (!a2)
  {
    if ((*(__int16 *)(a4 + 388) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v9 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = *(_DWORD *)(a4 + 368);
        *(_DWORD *)buf = 136446978;
        uint64_t v34 = "on_invalid_frame_recv_callback";
        uint64_t v35 = 2082;
        uint64_t v36 = (char *)(a4 + 390);
        unint64_t v37 = 2080;
        uint64_t v38 = " ";
        dispatch_time_t v39 = 1024;
        os_log_type_t v40 = v10;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> no frame, closing", buf, 0x26u);
      }
    }
    goto LABEL_16;
  }
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t stream_from_id = nw_http2_get_stream_from_id(a4, v6, 0);
  os_log_type_t v8 = stream_from_id;
  if (stream_from_id)
  {
    if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) == 0
      && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v24 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        __int16 v26 = *(_DWORD *)(v8 + 176);
        uint64_t v25 = *(_DWORD *)(v8 + 180);
        *(_DWORD *)buf = 136447490;
        uint64_t v34 = "on_invalid_frame_recv_callback";
        uint64_t v35 = 2082;
        uint64_t v36 = (char *)(v8 + 191);
        unint64_t v37 = 2080;
        uint64_t v38 = " ";
        dispatch_time_t v39 = 1024;
        os_log_type_t v40 = v25;
        uint64_t v41 = 1024;
        dispatch_time_t v42 = v26;
        BOOL v43 = 1024;
        LODWORD(v44) = v6;
        __int16 v21 = "%{public}s %{public}s%s<i%u:s%d> error on stream %d";
        uint64_t v22 = v24;
        __int16 v23 = 50;
        goto LABEL_40;
      }
    }
  }
  else if ((*(__int16 *)(a4 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v19 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      char v20 = *(_DWORD *)(a4 + 368);
      *(_DWORD *)buf = 136447234;
      uint64_t v34 = "on_invalid_frame_recv_callback";
      uint64_t v35 = 2082;
      uint64_t v36 = (char *)(a4 + 390);
      unint64_t v37 = 2080;
      uint64_t v38 = " ";
      dispatch_time_t v39 = 1024;
      os_log_type_t v40 = v20;
      uint64_t v41 = 1024;
      dispatch_time_t v42 = v6;
      __int16 v21 = "%{public}s %{public}s%s<i%u> error on stream %d";
      uint64_t v22 = v19;
      __int16 v23 = 44;
LABEL_40:
      _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, v21, buf, v23);
    }
  }
  if (v6 == -1)
  {
    nw_http2_connection_close(a4);
    return 0;
  }
  else
  {
    if (v8)
    {
      nw_http2_stream_close(a4, v8);
LABEL_16:
      *(_WORD *)(a4 + 388) |= 0x10u;
      return 4294966394;
    }
    uint64_t result = 0;
    if ((*(__int16 *)(a4 + 388) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v29 = gconnectionLogObj;
      uint64_t result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        uint64_t v30 = *(_DWORD *)(a4 + 368);
        *(_DWORD *)buf = 136447234;
        uint64_t v34 = "on_invalid_frame_recv_callback";
        uint64_t v35 = 2082;
        uint64_t v36 = (char *)(a4 + 390);
        unint64_t v37 = 2080;
        uint64_t v38 = " ";
        dispatch_time_t v39 = 1024;
        os_log_type_t v40 = v30;
        uint64_t v41 = 1024;
        dispatch_time_t v42 = v6;
        _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> No stream found for id %d, ignoring", buf, 0x2Cu);
        return 0;
      }
    }
  }
  return result;
}

void nw_http2_transport_connection_close(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v34 = __nwlog_obj();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = "";
      if (a1) {
        uint64_t v35 = (const char *)(a1 + 205);
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v53 = "nw_http2_transport_connection_close";
      __int16 v54 = 2082;
      uint64_t v55 = (uint64_t)v35;
      _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v53 = "nw_http2_transport_connection_close";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v25, &type, &v50)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v36 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (!os_log_type_enabled(v36, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v53 = "nw_http2_transport_connection_close";
      __int16 v28 = "%{public}s called with null http2_transport";
    }
    else if (v50)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v36 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v41 = os_log_type_enabled(v36, type);
      if (backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v53 = "nw_http2_transport_connection_close";
          __int16 v54 = 2082;
          uint64_t v55 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_62;
      }
      if (!v41) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v53 = "nw_http2_transport_connection_close";
      __int16 v28 = "%{public}s called with null http2_transport, no backtrace";
    }
    else
    {
      uint64_t v36 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (!os_log_type_enabled(v36, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v53 = "nw_http2_transport_connection_close";
      __int16 v28 = "%{public}s called with null http2_transport, backtrace limit exceeded";
    }
    BOOL v31 = v36;
    os_log_type_t v32 = v37;
    uint32_t v33 = 12;
    goto LABEL_61;
  }
  char v2 = *(unsigned char *)(a1 + 204);
  *(unsigned char *)(a1 + 204) = v2 & 0xF9 | 4;
  uint64_t v3 = *(char **)(a1 + 120);
  if (v3)
  {
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 0x40000000;
    v49[2] = ___ZL35nw_http2_transport_connection_closeP27nw_protocol_http2_transport_block_invoke;
    v49[3] = &__block_descriptor_tmp_19_37442;
    v49[4] = a1;
    nw_hash_table_apply(v3, (uint64_t)v49);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v53 = "nw_http2_transport_connection_close";
      __int16 v54 = 2082;
      uint64_t v55 = a1 + 205;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}s id table is NULL, cannot close streams", buf, 0x16u);
    }
  }
  if ((v2 & 2) == 0)
  {
    if (gLogDatapath)
    {
      unint64_t v5 = __nwlog_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v53 = "nw_http2_transport_connection_close";
        __int16 v54 = 2082;
        uint64_t v55 = a1 + 205;
        int v6 = "%{public}s %{public}s not sending GOAWAY since tunnel was not connected";
LABEL_23:
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, v6, buf, 0x16u);
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  if (gLogDatapath)
  {
    uint64_t v38 = __nwlog_obj();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = nghttp2_http2_strerror();
      *(_DWORD *)buf = 136446978;
      uint64_t v53 = "nw_http2_transport_send_goaway";
      __int16 v54 = 2082;
      uint64_t v55 = a1 + 205;
      __int16 v56 = 1024;
      *(_DWORD *)__int16 v57 = 0;
      *(_WORD *)&v57[4] = 2082;
      *(void *)&v57[6] = v39;
      _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called with error %u (%{public}s)", buf, 0x26u);
    }
  }
  if ((*(unsigned char *)(a1 + 204) & 1) == 0)
  {
    int v7 = *(_DWORD *)(a1 + 200);
    if (!v7) {
      goto LABEL_25;
    }
    if ((*(unsigned char *)(a1 + 204) & 0x10) != 0)
    {
      if (v7) {
        goto LABEL_25;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446722;
      uint64_t v53 = "nw_http2_transport_send_goaway";
      __int16 v54 = 2082;
      uint64_t v55 = a1 + 205;
      __int16 v56 = 1024;
      *(_DWORD *)__int16 v57 = v7;
      os_log_type_t v8 = (void *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v50 = 0;
      if (__nwlog_fault((const char *)v8, &type, &v50))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v9 = __nwlog_obj();
          os_log_type_t v10 = type;
          if (!os_log_type_enabled(v9, type)) {
            goto LABEL_111;
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v53 = "nw_http2_transport_send_goaway";
          __int16 v54 = 2082;
          uint64_t v55 = a1 + 205;
          __int16 v56 = 1024;
          *(_DWORD *)__int16 v57 = v7;
          uint64_t v11 = "%{public}s %{public}s Last stream value %d is even, but we are the server";
          goto LABEL_110;
        }
        if (!v50)
        {
          uint64_t v9 = __nwlog_obj();
          os_log_type_t v10 = type;
          if (!os_log_type_enabled(v9, type)) {
            goto LABEL_111;
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v53 = "nw_http2_transport_send_goaway";
          __int16 v54 = 2082;
          uint64_t v55 = a1 + 205;
          __int16 v56 = 1024;
          *(_DWORD *)__int16 v57 = v7;
          uint64_t v11 = "%{public}s %{public}s Last stream value %d is even, but we are the server, backtrace limit exceeded";
          goto LABEL_110;
        }
        os_log_type_t v46 = (char *)__nw_create_backtrace_string();
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v47 = os_log_type_enabled(v9, type);
        if (v46)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446978;
            uint64_t v53 = "nw_http2_transport_send_goaway";
            __int16 v54 = 2082;
            uint64_t v55 = a1 + 205;
            __int16 v56 = 1024;
            *(_DWORD *)__int16 v57 = v7;
            *(_WORD *)&v57[4] = 2082;
            *(void *)&v57[6] = v46;
            _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s %{public}s Last stream value %d is even, but we are the server, dumping backtrace:%{public}s", buf, 0x26u);
          }
          free(v46);
          if (!v8)
          {
LABEL_25:
            *(unsigned char *)(a1 + 204) |= 1u;
            if (!nghttp2_submit_goaway())
            {
LABEL_42:
              if (gLogDatapath)
              {
                dispatch_time_t v42 = __nwlog_obj();
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v43 = nghttp2_http2_strerror();
                  *(_DWORD *)buf = 136447234;
                  uint64_t v53 = "nw_http2_transport_send_goaway";
                  __int16 v54 = 2082;
                  uint64_t v55 = a1 + 205;
                  __int16 v56 = 1024;
                  *(_DWORD *)__int16 v57 = v7;
                  *(_WORD *)&v57[4] = 1024;
                  *(_DWORD *)&v57[6] = 0;
                  *(_WORD *)&v57[10] = 2082;
                  *(void *)&v57[12] = v43;
                  _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s submitted GOAWAY frame with last_stream %d and error %u (%{public}s)", buf, 0x2Cu);
                }
              }
              nw_http2_transport_session_send(a1);
              goto LABEL_44;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v12 = nghttp2_strerror();
            *(_DWORD *)buf = 136446466;
            uint64_t v53 = "nw_http2_transport_send_goaway";
            __int16 v54 = 2082;
            uint64_t v55 = v12;
            os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v50 = 0;
            if (__nwlog_fault(v13, &type, &v50))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v14 = gLogObj;
                os_log_type_t v15 = type;
                if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
                  goto LABEL_40;
                }
                uint64_t v16 = nghttp2_strerror();
                *(_DWORD *)buf = 136446466;
                uint64_t v53 = "nw_http2_transport_send_goaway";
                __int16 v54 = 2082;
                uint64_t v55 = v16;
                char v17 = "%{public}s nghttp2_submit_goaway: %{public}s failed";
                goto LABEL_39;
              }
              if (!v50)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v14 = gLogObj;
                os_log_type_t v15 = type;
                if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
                  goto LABEL_40;
                }
                uint64_t v21 = nghttp2_strerror();
                *(_DWORD *)buf = 136446466;
                uint64_t v53 = "nw_http2_transport_send_goaway";
                __int16 v54 = 2082;
                uint64_t v55 = v21;
                char v17 = "%{public}s nghttp2_submit_goaway: %{public}s failed, backtrace limit exceeded";
                goto LABEL_39;
              }
              BOOL v18 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v14 = gLogObj;
              os_log_type_t v15 = type;
              BOOL v19 = os_log_type_enabled((os_log_t)gLogObj, type);
              if (v18)
              {
                if (v19)
                {
                  uint64_t v20 = nghttp2_strerror();
                  *(_DWORD *)buf = 136446722;
                  uint64_t v53 = "nw_http2_transport_send_goaway";
                  __int16 v54 = 2082;
                  uint64_t v55 = v20;
                  __int16 v56 = 2082;
                  *(void *)__int16 v57 = v18;
                  _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s nghttp2_submit_goaway: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
                }
                free(v18);
                goto LABEL_40;
              }
              if (v19)
              {
                uint64_t v22 = nghttp2_strerror();
                *(_DWORD *)buf = 136446466;
                uint64_t v53 = "nw_http2_transport_send_goaway";
                __int16 v54 = 2082;
                uint64_t v55 = v22;
                char v17 = "%{public}s nghttp2_submit_goaway: %{public}s failed, no backtrace";
LABEL_39:
                _os_log_impl(&dword_1830D4000, v14, v15, v17, buf, 0x16u);
              }
            }
LABEL_40:
            if (v13) {
              free(v13);
            }
            goto LABEL_42;
          }
LABEL_112:
          free(v8);
          goto LABEL_25;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v53 = "nw_http2_transport_send_goaway";
          __int16 v54 = 2082;
          uint64_t v55 = a1 + 205;
          __int16 v56 = 1024;
          *(_DWORD *)__int16 v57 = v7;
          uint64_t v11 = "%{public}s %{public}s Last stream value %d is even, but we are the server, no backtrace";
LABEL_110:
          _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0x1Cu);
        }
      }
    }
    else
    {
      if ((v7 & 1) == 0) {
        goto LABEL_25;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446722;
      uint64_t v53 = "nw_http2_transport_send_goaway";
      __int16 v54 = 2082;
      uint64_t v55 = a1 + 205;
      __int16 v56 = 1024;
      *(_DWORD *)__int16 v57 = v7;
      os_log_type_t v8 = (void *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v50 = 0;
      if (__nwlog_fault((const char *)v8, &type, &v50))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v9 = __nwlog_obj();
          os_log_type_t v10 = type;
          if (!os_log_type_enabled(v9, type)) {
            goto LABEL_111;
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v53 = "nw_http2_transport_send_goaway";
          __int16 v54 = 2082;
          uint64_t v55 = a1 + 205;
          __int16 v56 = 1024;
          *(_DWORD *)__int16 v57 = v7;
          uint64_t v11 = "%{public}s %{public}s Last stream value %d is odd, but we are the client";
          goto LABEL_110;
        }
        if (!v50)
        {
          uint64_t v9 = __nwlog_obj();
          os_log_type_t v10 = type;
          if (!os_log_type_enabled(v9, type)) {
            goto LABEL_111;
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v53 = "nw_http2_transport_send_goaway";
          __int16 v54 = 2082;
          uint64_t v55 = a1 + 205;
          __int16 v56 = 1024;
          *(_DWORD *)__int16 v57 = v7;
          uint64_t v11 = "%{public}s %{public}s Last stream value %d is odd, but we are the client, backtrace limit exceeded";
          goto LABEL_110;
        }
        char v44 = (char *)__nw_create_backtrace_string();
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v45 = os_log_type_enabled(v9, type);
        if (!v44)
        {
          if (!v45) {
            goto LABEL_111;
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v53 = "nw_http2_transport_send_goaway";
          __int16 v54 = 2082;
          uint64_t v55 = a1 + 205;
          __int16 v56 = 1024;
          *(_DWORD *)__int16 v57 = v7;
          uint64_t v11 = "%{public}s %{public}s Last stream value %d is odd, but we are the client, no backtrace";
          goto LABEL_110;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446978;
          uint64_t v53 = "nw_http2_transport_send_goaway";
          __int16 v54 = 2082;
          uint64_t v55 = a1 + 205;
          __int16 v56 = 1024;
          *(_DWORD *)__int16 v57 = v7;
          *(_WORD *)&v57[4] = 2082;
          *(void *)&v57[6] = v44;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s %{public}s Last stream value %d is odd, but we are the client, dumping backtrace:%{public}s", buf, 0x26u);
        }
        free(v44);
      }
    }
LABEL_111:
    if (!v8) {
      goto LABEL_25;
    }
    goto LABEL_112;
  }
  if (gLogDatapath)
  {
    unint64_t v5 = __nwlog_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v53 = "nw_http2_transport_send_goaway";
      __int16 v54 = 2082;
      uint64_t v55 = a1 + 205;
      int v6 = "%{public}s %{public}s already sent goaway, skipping";
      goto LABEL_23;
    }
  }
LABEL_44:
  __int16 v23 = *(char **)(a1 + 112);
  if (v23)
  {
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 0x40000000;
    v48[2] = ___ZL35nw_http2_transport_connection_closeP27nw_protocol_http2_transport_block_invoke_20;
    v48[3] = &__block_descriptor_tmp_21_37467;
    v48[4] = a1;
    nw_hash_table_apply(v23, (uint64_t)v48);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v24 = a1 + 205;
  *(_DWORD *)buf = 136446466;
  uint64_t v53 = "nw_http2_transport_connection_close";
  __int16 v54 = 2082;
  uint64_t v55 = a1 + 205;
  uint64_t v25 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v50 = 0;
  if (!__nwlog_fault(v25, &type, &v50))
  {
LABEL_62:
    if (!v25) {
      return;
    }
    goto LABEL_63;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v26 = gLogObj;
    os_log_type_t v27 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v53 = "nw_http2_transport_connection_close";
    __int16 v54 = 2082;
    uint64_t v55 = v24;
    __int16 v28 = "%{public}s %{public}s protocol table is NULL, cannot notify input handlers";
LABEL_60:
    BOOL v31 = v26;
    os_log_type_t v32 = v27;
    uint32_t v33 = 22;
LABEL_61:
    _os_log_impl(&dword_1830D4000, v31, v32, v28, buf, v33);
    goto LABEL_62;
  }
  if (!v50)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v26 = gLogObj;
    os_log_type_t v27 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v53 = "nw_http2_transport_connection_close";
    __int16 v54 = 2082;
    uint64_t v55 = v24;
    __int16 v28 = "%{public}s %{public}s protocol table is NULL, cannot notify input handlers, backtrace limit exceeded";
    goto LABEL_60;
  }
  uint64_t v29 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v26 = gLogObj;
  os_log_type_t v27 = type;
  BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v29)
  {
    if (!v30) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v53 = "nw_http2_transport_connection_close";
    __int16 v54 = 2082;
    uint64_t v55 = v24;
    __int16 v28 = "%{public}s %{public}s protocol table is NULL, cannot notify input handlers, no backtrace";
    goto LABEL_60;
  }
  if (v30)
  {
    *(_DWORD *)buf = 136446722;
    uint64_t v53 = "nw_http2_transport_connection_close";
    __int16 v54 = 2082;
    uint64_t v55 = v24;
    __int16 v56 = 2082;
    *(void *)__int16 v57 = v29;
    _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s %{public}s protocol table is NULL, cannot notify input handlers, dumping backtrace:%{public}s", buf, 0x20u);
  }
  free(v29);
  if (v25) {
LABEL_63:
  }
    free(v25);
}

void nw_http2_transport_stream_close(uint64_t a1, uint64_t a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v43 = __nwlog_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
    {
      char v44 = "";
      if (a1) {
        char v44 = (const char *)(a1 + 205);
      }
      *(_DWORD *)buf = 136446466;
      __int16 v63 = "nw_http2_transport_stream_close";
      __int16 v64 = 2082;
      __int16 v65 = (void *)v44;
      _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v63 = "nw_http2_transport_stream_close";
    BOOL v45 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (!__nwlog_fault(v45, &type, &v60)) {
      goto LABEL_100;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v46 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (!os_log_type_enabled(v46, type)) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v63 = "nw_http2_transport_stream_close";
      os_log_type_t v48 = "%{public}s called with null http2_transport";
      goto LABEL_99;
    }
    if (!v60)
    {
      os_log_type_t v46 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (!os_log_type_enabled(v46, type)) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v63 = "nw_http2_transport_stream_close";
      os_log_type_t v48 = "%{public}s called with null http2_transport, backtrace limit exceeded";
      goto LABEL_99;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v46 = __nwlog_obj();
    os_log_type_t v47 = type;
    BOOL v54 = os_log_type_enabled(v46, type);
    if (!backtrace_string)
    {
      if (!v54) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v63 = "nw_http2_transport_stream_close";
      os_log_type_t v48 = "%{public}s called with null http2_transport, no backtrace";
      goto LABEL_99;
    }
    if (v54)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v63 = "nw_http2_transport_stream_close";
      __int16 v64 = 2082;
      __int16 v65 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_100:
    if (!v45) {
      return;
    }
    goto LABEL_101;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v63 = "nw_http2_transport_stream_close";
    BOOL v45 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (!__nwlog_fault(v45, &type, &v60)) {
      goto LABEL_100;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v46 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (!os_log_type_enabled(v46, type)) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v63 = "nw_http2_transport_stream_close";
      os_log_type_t v48 = "%{public}s called with null stream";
      goto LABEL_99;
    }
    if (!v60)
    {
      os_log_type_t v46 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (!os_log_type_enabled(v46, type)) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v63 = "nw_http2_transport_stream_close";
      os_log_type_t v48 = "%{public}s called with null stream, backtrace limit exceeded";
      goto LABEL_99;
    }
    __int16 v57 = (char *)__nw_create_backtrace_string();
    os_log_type_t v46 = __nwlog_obj();
    os_log_type_t v47 = type;
    BOOL v58 = os_log_type_enabled(v46, type);
    if (v57)
    {
      if (v58)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v63 = "nw_http2_transport_stream_close";
        __int16 v64 = 2082;
        __int16 v65 = v57;
        _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v57);
      if (!v45) {
        return;
      }
LABEL_101:
      free(v45);
      return;
    }
    if (v58)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v63 = "nw_http2_transport_stream_close";
      os_log_type_t v48 = "%{public}s called with null stream, no backtrace";
LABEL_99:
      _os_log_impl(&dword_1830D4000, v46, v47, v48, buf, 0xCu);
      goto LABEL_100;
    }
    goto LABEL_100;
  }
  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v55 = __nwlog_obj();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
      {
        int v56 = *(_DWORD *)(a2 + 32);
        *(_DWORD *)buf = 136446722;
        __int16 v63 = "nw_http2_transport_stream_close";
        __int16 v64 = 2082;
        __int16 v65 = (void *)(a1 + 205);
        __int16 v66 = 1024;
        int v67 = v56;
        _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s closing stream %d that is already closed", buf, 0x1Cu);
      }
    }
  }
  char v4 = (int *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 36);
  if (*(_DWORD *)(a2 + 32) != -1)
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0)
    {
      if (!gLogDatapath) {
        goto LABEL_27;
      }
      int v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v63 = "nw_http2_transport_stream_close";
        __int16 v64 = 2082;
        __int16 v65 = (void *)(a1 + 205);
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s not sending RST_STREAM, since we are already closed from nghttp2's perspective", buf, 0x16u);
      }
LABEL_26:
      if (gLogDatapath)
      {
        BOOL v49 = __nwlog_obj();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          int v50 = *(_DWORD *)(a2 + 32);
          *(_DWORD *)buf = 136446978;
          __int16 v63 = "nw_http2_transport_remove_from_id_table";
          __int16 v64 = 2082;
          __int16 v65 = (void *)(a1 + 205);
          __int16 v66 = 1024;
          int v67 = v50;
          __int16 v68 = 2048;
          uint64_t v69 = a2;
          _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for stream %d (%p)", buf, 0x26u);
        }
      }
LABEL_27:
      uint64_t v19 = *(void *)(a1 + 120);
      if (v19)
      {
        BOOL node = nw_hash_table_get_node(v19, a2 + 32, 4);
        if (node)
        {
          if (nw_hash_table_remove_node(*(void *)(a1 + 120), node))
          {
            if (!gLogDatapath)
            {
LABEL_58:
              *char v4 = -1;
              return;
            }
            uint64_t v21 = __nwlog_obj();
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
LABEL_57:
              if (gLogDatapath)
              {
                uint64_t v51 = __nwlog_obj();
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
                {
                  int v52 = *v4;
                  *(_DWORD *)buf = 136446722;
                  __int16 v63 = "nw_http2_transport_stream_close";
                  __int16 v64 = 2082;
                  __int16 v65 = (void *)(a1 + 205);
                  __int16 v66 = 1024;
                  int v67 = v52;
                  _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s removed stream %d from id based table", buf, 0x1Cu);
                }
              }
              goto LABEL_58;
            }
            int v22 = *v4;
            *(_DWORD *)buf = 136446722;
            __int16 v63 = "nw_http2_transport_remove_from_id_table";
            __int16 v64 = 2082;
            __int16 v65 = (void *)(a1 + 205);
            __int16 v66 = 1024;
            int v67 = v22;
            __int16 v23 = "%{public}s %{public}s removed stream %d from id based table";
LABEL_56:
            _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, v23, buf, 0x1Cu);
            goto LABEL_57;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v31 = *v4;
          *(_DWORD *)buf = 136446722;
          __int16 v63 = "nw_http2_transport_remove_from_id_table";
          __int16 v64 = 2082;
          __int16 v65 = (void *)(a1 + 205);
          __int16 v66 = 1024;
          int v67 = v31;
          os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v60 = 0;
          if (!__nwlog_fault(v32, &type, &v60)) {
            goto LABEL_52;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint32_t v33 = gLogObj;
            os_log_type_t v34 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
              goto LABEL_52;
            }
            int v35 = *v4;
            *(_DWORD *)buf = 136446722;
            __int16 v63 = "nw_http2_transport_remove_from_id_table";
            __int16 v64 = 2082;
            __int16 v65 = (void *)(a1 + 205);
            __int16 v66 = 1024;
            int v67 = v35;
            uint64_t v36 = "%{public}s %{public}s failed to remove id node for stream %d from table";
          }
          else if (v60)
          {
            os_log_type_t v37 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint32_t v33 = gLogObj;
            os_log_type_t v34 = type;
            BOOL v38 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (v37)
            {
              if (v38)
              {
                int v39 = *v4;
                *(_DWORD *)buf = 136446978;
                __int16 v63 = "nw_http2_transport_remove_from_id_table";
                __int16 v64 = 2082;
                __int16 v65 = (void *)(a1 + 205);
                __int16 v66 = 1024;
                int v67 = v39;
                __int16 v68 = 2082;
                uint64_t v69 = (uint64_t)v37;
                _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s %{public}s failed to remove id node for stream %d from table, dumping backtrace:%{public}s", buf, 0x26u);
              }
              free(v37);
              goto LABEL_52;
            }
            if (!v38)
            {
LABEL_52:
              if (v32) {
                free(v32);
              }
              goto LABEL_54;
            }
            int v41 = *v4;
            *(_DWORD *)buf = 136446722;
            __int16 v63 = "nw_http2_transport_remove_from_id_table";
            __int16 v64 = 2082;
            __int16 v65 = (void *)(a1 + 205);
            __int16 v66 = 1024;
            int v67 = v41;
            uint64_t v36 = "%{public}s %{public}s failed to remove id node for stream %d from table, no backtrace";
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint32_t v33 = gLogObj;
            os_log_type_t v34 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
              goto LABEL_52;
            }
            int v40 = *v4;
            *(_DWORD *)buf = 136446722;
            __int16 v63 = "nw_http2_transport_remove_from_id_table";
            __int16 v64 = 2082;
            __int16 v65 = (void *)(a1 + 205);
            __int16 v66 = 1024;
            int v67 = v40;
            uint64_t v36 = "%{public}s %{public}s failed to remove id node for stream %d from table, backtrace limit exceeded";
          }
          _os_log_impl(&dword_1830D4000, v33, v34, v36, buf, 0x1Cu);
          goto LABEL_52;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v29 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          int v30 = *v4;
          *(_DWORD *)buf = 136446722;
          __int16 v63 = "nw_http2_transport_remove_from_id_table";
          __int16 v64 = 2082;
          __int16 v65 = (void *)(a1 + 205);
          __int16 v66 = 1024;
          int v67 = v30;
          __int16 v26 = "%{public}s %{public}s stream %d is not present in id based table, will not remove";
          os_log_type_t v27 = v29;
          os_log_type_t v28 = OS_LOG_TYPE_INFO;
          goto LABEL_37;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v24 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          int v25 = *v4;
          *(_DWORD *)buf = 136446722;
          __int16 v63 = "nw_http2_transport_remove_from_id_table";
          __int16 v64 = 2082;
          __int16 v65 = (void *)(a1 + 205);
          __int16 v66 = 1024;
          int v67 = v25;
          __int16 v26 = "%{public}s %{public}s id based table is NULL, cannot remove stream %d";
          os_log_type_t v27 = v24;
          os_log_type_t v28 = OS_LOG_TYPE_ERROR;
LABEL_37:
          _os_log_impl(&dword_1830D4000, v27, v28, v26, buf, 0x1Cu);
        }
      }
LABEL_54:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v21 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_57;
      }
      int v42 = *v4;
      *(_DWORD *)buf = 136446722;
      __int16 v63 = "nw_http2_transport_stream_close";
      __int16 v64 = 2082;
      __int16 v65 = (void *)(a1 + 205);
      __int16 v66 = 1024;
      int v67 = v42;
      __int16 v23 = "%{public}s %{public}s did not remove stream %d from id table";
      goto LABEL_56;
    }
    *(unsigned char *)(a2 + 36) = v5 & 0xFE;
    if (gLogDatapath)
    {
      BOOL v59 = __nwlog_obj();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v63 = "nw_http2_transport_stream_send_rst_stream";
        __int16 v64 = 2082;
        __int16 v65 = (void *)(a1 + 205);
        _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
      }
    }
    if (*v4 == -1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_25;
      }
      int v17 = *v4;
      *(_DWORD *)buf = 136446722;
      __int16 v63 = "nw_http2_transport_stream_send_rst_stream";
      __int16 v64 = 2082;
      __int16 v65 = (void *)(a1 + 205);
      __int16 v66 = 1024;
      int v67 = v17;
      uint64_t v12 = "%{public}s %{public}s cannot send RST_STREAM for stream with invalid stream id %d";
      os_log_type_t v13 = v16;
      os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      int v8 = nghttp2_submit_rst_stream();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = gLogObj;
      if (v8)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          int v10 = *v4;
          uint64_t v11 = nghttp2_strerror();
          *(_DWORD *)buf = 136446978;
          __int16 v63 = "nw_http2_transport_stream_send_rst_stream";
          __int16 v64 = 2082;
          __int16 v65 = (void *)(a1 + 205);
          __int16 v66 = 1024;
          int v67 = v10;
          __int16 v68 = 2082;
          uint64_t v69 = v11;
          uint64_t v12 = "%{public}s %{public}s Failed to submit RST_STREAM on stream %d: %{public}s";
          os_log_type_t v13 = v9;
          os_log_type_t v14 = OS_LOG_TYPE_ERROR;
          uint32_t v15 = 38;
LABEL_24:
          _os_log_impl(&dword_1830D4000, v13, v14, v12, buf, v15);
        }
LABEL_25:
        nw_http2_transport_session_send(a1);
        goto LABEL_26;
      }
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_25;
      }
      int v18 = *v4;
      *(_DWORD *)buf = 136446722;
      __int16 v63 = "nw_http2_transport_stream_send_rst_stream";
      __int16 v64 = 2082;
      __int16 v65 = (void *)(a1 + 205);
      __int16 v66 = 1024;
      int v67 = v18;
      uint64_t v12 = "%{public}s %{public}s Submitted RST_STREAM on stream %d";
      os_log_type_t v13 = v9;
      os_log_type_t v14 = OS_LOG_TYPE_INFO;
    }
    uint32_t v15 = 28;
    goto LABEL_24;
  }
  *(unsigned char *)(a2 + 36) = v5 & 0xFE;
  *(_DWORD *)(a2 + 32) = -1;
  if (gLogDatapath)
  {
    int v7 = __nwlog_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v63 = "nw_http2_transport_stream_close";
      __int16 v64 = 2082;
      __int16 v65 = (void *)(a1 + 205);
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s stream id is -1, skipping rst_stream and removal from id based table", buf, 0x16u);
    }
  }
}

uint64_t ___ZL35nw_http2_transport_connection_closeP27nw_protocol_http2_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v5 = object;
    uint64_t v6 = *(void *)nw_hash_node_get_extra(a2);
    int v7 = *(_DWORD *)(v5 + 32);
    if (gLogDatapath)
    {
      uint64_t v20 = __nwlog_obj();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v21 = *(void *)(a1 + 32);
        int v22 = (const char *)(v21 + 205);
        BOOL v10 = v21 == 0;
        int v23 = *(_DWORD *)(v5 + 32);
        if (v10) {
          int v22 = "";
        }
        int v27 = 136446722;
        os_log_type_t v28 = "nw_http2_transport_connection_close_block_invoke";
        __int16 v29 = 2082;
        int v30 = v22;
        __int16 v31 = 1024;
        LODWORD(v32[0]) = v23;
        _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s closing stream %d", (uint8_t *)&v27, 0x1Cu);
      }
    }
    nw_http2_transport_stream_close(*(void *)(a1 + 32), v5);
    if (v6)
    {
      if (gLogDatapath)
      {
        int v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = *(void *)(a1 + 32);
          BOOL v10 = v9 == 0;
          int v27 = 136446978;
          uint64_t v11 = (const char *)(v9 + 205);
          os_log_type_t v28 = "nw_http2_transport_connection_close_block_invoke";
          if (v10) {
            uint64_t v11 = "";
          }
          __int16 v29 = 2082;
          int v30 = v11;
          __int16 v31 = 1024;
          LODWORD(v32[0]) = v7;
          WORD2(v32[0]) = 2048;
          *(void *)((char *)v32 + 6) = v5;
          uint64_t v12 = "%{public}s %{public}s deferring release of stream %d (%p), has associated input handler";
          os_log_type_t v13 = v8;
          os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
          uint32_t v15 = 38;
          goto LABEL_14;
        }
      }
    }
    else
    {
      if (gLogDatapath)
      {
        uint64_t v24 = __nwlog_obj();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v25 = *(void *)(a1 + 32);
          BOOL v10 = v25 == 0;
          int v27 = 136446978;
          __int16 v26 = (const char *)(v25 + 205);
          os_log_type_t v28 = "nw_http2_transport_connection_close_block_invoke";
          if (v10) {
            __int16 v26 = "";
          }
          __int16 v29 = 2082;
          int v30 = v26;
          __int16 v31 = 1024;
          LODWORD(v32[0]) = v7;
          WORD2(v32[0]) = 2048;
          *(void *)((char *)v32 + 6) = v5;
          _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s destroying stream %d (%p) immediately, no associated input handler", (uint8_t *)&v27, 0x26u);
        }
      }
      nw_http2_transport_release_frame_array((nw_frame_array_s *)v5);
      nw_http2_transport_release_frame_array((nw_frame_array_s *)(v5 + 16));
      free((void *)v5);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v16 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v27 = 136446722;
      os_log_type_t v28 = "nw_http2_transport_connection_close_block_invoke";
      if (v17) {
        int v18 = (const char *)(v17 + 205);
      }
      else {
        int v18 = "";
      }
      __int16 v29 = 2082;
      int v30 = v18;
      __int16 v31 = 2048;
      v32[0] = a2;
      uint64_t v12 = "%{public}s %{public}s stream in node %p in id table is NULL, skipping rst stream";
      os_log_type_t v13 = v16;
      os_log_type_t v14 = OS_LOG_TYPE_ERROR;
      uint32_t v15 = 32;
LABEL_14:
      _os_log_impl(&dword_1830D4000, v13, v14, v12, (uint8_t *)&v27, v15);
    }
  }
  return 1;
}

uint64_t ___ZL35nw_http2_transport_connection_closeP27nw_protocol_http2_transport_block_invoke_20(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    nw_http2_transport_protocol_close(*(void *)(a1 + 32), object);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v9 = 136446722;
      BOOL v10 = "nw_http2_transport_connection_close_block_invoke";
      if (v6) {
        int v7 = (const char *)(v6 + 205);
      }
      else {
        int v7 = "";
      }
      __int16 v11 = 2082;
      uint64_t v12 = v7;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s input protocol in node %p in protocol table is NULL, skipping", (uint8_t *)&v9, 0x20u);
    }
  }
  return 1;
}

void nw_http2_transport_protocol_close(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    int v7 = __nwlog_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v8 = "";
      if (a1) {
        int v8 = (const char *)(a1 + 205);
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v21 = "nw_http2_transport_protocol_close";
      __int16 v22 = 2082;
      int v23 = (void *)v8;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_http2_transport_protocol_close";
    int v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v9, &type, &v18)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v21 = "nw_http2_transport_protocol_close";
      uint64_t v12 = "%{public}s called with null http2_transport";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v15 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v21 = "nw_http2_transport_protocol_close";
          __int16 v22 = 2082;
          int v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_45:
        if (!v9) {
          return;
        }
LABEL_46:
        free(v9);
        return;
      }
      if (!v15) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v21 = "nw_http2_transport_protocol_close";
      uint64_t v12 = "%{public}s called with null http2_transport, no backtrace";
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v21 = "nw_http2_transport_protocol_close";
      uint64_t v12 = "%{public}s called with null http2_transport, backtrace limit exceeded";
    }
LABEL_44:
    _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
    goto LABEL_45;
  }
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (v4)
    {
      uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 184);
      if (!v5 || (v5(a2, a1), (uint64_t v4 = *(void *)(a2 + 24)) != 0))
      {
        uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 48);
        if (v6) {
          v6(a2, a1);
        }
      }
    }
    if (gLogDatapath)
    {
      __int16 v13 = __nwlog_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v21 = "nw_http2_transport_protocol_close";
        __int16 v22 = 2082;
        int v23 = (void *)(a1 + 205);
        __int16 v24 = 2048;
        uint64_t v25 = a2;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s sent input_finished and disconnected to protocol %p", buf, 0x20u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v21 = "nw_http2_transport_protocol_close";
  int v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (!__nwlog_fault(v9, &type, &v18)) {
    goto LABEL_45;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_45;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_http2_transport_protocol_close";
    uint64_t v12 = "%{public}s called with null input_protocol";
    goto LABEL_44;
  }
  if (!v18)
  {
    BOOL v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_45;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_http2_transport_protocol_close";
    uint64_t v12 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    goto LABEL_44;
  }
  uint64_t v16 = (char *)__nw_create_backtrace_string();
  BOOL v10 = __nwlog_obj();
  os_log_type_t v11 = type;
  BOOL v17 = os_log_type_enabled(v10, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_45;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_http2_transport_protocol_close";
    uint64_t v12 = "%{public}s called with null input_protocol, no backtrace";
    goto LABEL_44;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v21 = "nw_http2_transport_protocol_close";
    __int16 v22 = 2082;
    int v23 = v16;
    _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v16);
  if (v9) {
    goto LABEL_46;
  }
}

void nw_http2_transport_release_frame_array(nw_frame_array_s *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    char v2 = __nwlog_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136446210;
      int v8 = "nw_http2_transport_release_frame_array";
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v7, 0xCu);
    }
  }
  while (1)
  {
    tqh_first = a1->tqh_first;
    if (!a1->tqh_first) {
      break;
    }
    uint64_t v4 = *((void *)tqh_first + 2);
    uint64_t v5 = (nw_frame **)*((void *)tqh_first + 3);
    if (v4)
    {
      *(void *)(v4 + 24) = v5;
      uint64_t v5 = (nw_frame **)*((void *)tqh_first + 3);
    }
    else
    {
      a1->tqh_last = v5;
    }
    *uint64_t v5 = (nw_frame *)v4;
    *((void *)tqh_first + 2) = 0;
    *((void *)tqh_first + 3) = 0;
    buffer = (void *)nw_frame_get_buffer((uint64_t)tqh_first, 0);
    if (buffer) {
      free(buffer);
    }
    nw_frame_reset((uint64_t)tqh_first, 0, 0, 0, 0);
    os_release(tqh_first);
  }
}

uint64_t on_frame_not_send_callback(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = gLogObj;
    BOOL v8 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (a2)
    {
      if (v8)
      {
        uint64_t v9 = nghttp2_strerror();
        int v10 = *((unsigned __int8 *)a2 + 12);
        int v11 = *((_DWORD *)a2 + 2);
        uint64_t v12 = *a2;
        *(_DWORD *)buf = 136447746;
        uint64_t v26 = "on_frame_not_send_callback";
        __int16 v27 = 2082;
        os_log_type_t v28 = (char *)(a4 + 205);
        __int16 v29 = 1024;
        int v30 = a3;
        __int16 v31 = 2080;
        uint64_t v32 = v9;
        __int16 v33 = 1024;
        int v34 = v10;
        __int16 v35 = 1024;
        int v36 = v11;
        __int16 v37 = 2048;
        uint64_t v38 = v12;
        __int16 v13 = "%{public}s %{public}s called with error %d (%s) for frame type %u on stream %d length (no header) %zu";
        uint64_t v14 = v7;
        uint32_t v15 = 60;
LABEL_7:
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
      }
    }
    else if (v8)
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v26 = "on_frame_not_send_callback";
      __int16 v27 = 2082;
      os_log_type_t v28 = (char *)(a4 + 205);
      __int16 v29 = 1024;
      int v30 = a3;
      __int16 v13 = "%{public}s %{public}s called with error %d";
      uint64_t v14 = v7;
      uint32_t v15 = 28;
      goto LABEL_7;
    }
    *(unsigned char *)(a4 + 204) |= 8u;
    return 4294966394;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v26 = "on_frame_not_send_callback";
  BOOL v17 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v17, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "on_frame_not_send_callback";
      uint64_t v20 = "%{public}s nghttp2 user data is NULL, not http2_transport";
      goto LABEL_23;
    }
    if (!v23)
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "on_frame_not_send_callback";
      uint64_t v20 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
      goto LABEL_23;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v22 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v26 = "on_frame_not_send_callback";
        __int16 v27 = 2082;
        os_log_type_t v28 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_24;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "on_frame_not_send_callback";
      uint64_t v20 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
LABEL_23:
      _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
    }
  }
LABEL_24:
  if (v17) {
    free(v17);
  }
  return 4294966394;
}

{
  int v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  int v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  int v24;
  int v25;
  NSObject *v26;
  int v27;
  int v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  char *backtrace_string;
  BOOL v34;
  os_log_type_t type[15];
  char v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;

  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v38 = "on_frame_not_send_callback";
    __int16 v29 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    int v36 = 0;
    if (!__nwlog_fault(v29, type, &v36)) {
      goto LABEL_46;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v30 = __nwlog_obj();
      __int16 v31 = type[0];
      if (!os_log_type_enabled(v30, type[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v38 = "on_frame_not_send_callback";
      uint64_t v32 = "%{public}s nghttp2 user data is NULL, not http2";
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v30 = __nwlog_obj();
      __int16 v31 = type[0];
      int v34 = os_log_type_enabled(v30, type[0]);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v38 = "on_frame_not_send_callback";
          uint64_t v39 = 2082;
          int v40 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_46;
      }
      if (!v34)
      {
LABEL_46:
        if (v29) {
          free(v29);
        }
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v38 = "on_frame_not_send_callback";
      uint64_t v32 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
    }
    else
    {
      int v30 = __nwlog_obj();
      __int16 v31 = type[0];
      if (!os_log_type_enabled(v30, type[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v38 = "on_frame_not_send_callback";
      uint64_t v32 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0xCu);
    goto LABEL_46;
  }
  uint64_t v7 = *(__int16 *)(a4 + 388);
  if (a2)
  {
    if ((v7 & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v8 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(_DWORD *)(a4 + 368);
        int v10 = nghttp2_strerror();
        int v11 = *((unsigned __int8 *)a2 + 12);
        uint64_t v12 = *((_DWORD *)a2 + 2);
        __int16 v13 = *a2;
        *(_DWORD *)buf = 136448258;
        uint64_t v38 = "on_frame_not_send_callback";
        uint64_t v39 = 2082;
        int v40 = (char *)(a4 + 390);
        int v41 = 2080;
        int v42 = " ";
        uint64_t v43 = 1024;
        char v44 = v9;
        BOOL v45 = 1024;
        os_log_type_t v46 = a3;
        os_log_type_t v47 = 2080;
        os_log_type_t v48 = v10;
        BOOL v49 = 1024;
        int v50 = v11;
        uint64_t v51 = 1024;
        int v52 = v12;
        uint64_t v53 = 2048;
        BOOL v54 = v13;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> called with error %d (%s) for frame type %u on stream %d length (no header) %zu", buf, 0x4Cu);
      }
    }
    *(void *)os_log_type_t type = 0;
    uint64_t result = nw_http2_get_stream_from_id(a4, *((_DWORD *)a2 + 2), type);
    if (result)
    {
      uint32_t v15 = result;
      uint64_t v16 = *(void **)type;
      BOOL v17 = *(unsigned __int16 *)(v15 + 188) | (*(unsigned __int8 *)(v15 + 190) << 16);
      if (*(void *)type)
      {
        if ((*(_WORD *)(v15 + 188) & 0x40) == 0)
        {
          *(unsigned char *)(v15 + 190) = BYTE2(v17);
          *(_WORD *)(v15 + 188) = v17 | 0x40;
          nw_protocol_error(v16, a4);
          nw_protocol_disconnected(*(void **)type, a4);
        }
        return 0;
      }
      if ((v17 & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v26 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v28 = *(_DWORD *)(v15 + 176);
          __int16 v27 = *(_DWORD *)(v15 + 180);
          *(_DWORD *)buf = 136447746;
          uint64_t v38 = "on_frame_not_send_callback";
          uint64_t v39 = 2082;
          int v40 = (char *)(v15 + 191);
          int v41 = 2080;
          int v42 = " ";
          uint64_t v43 = 1024;
          char v44 = v27;
          BOOL v45 = 1024;
          os_log_type_t v46 = v28;
          os_log_type_t v47 = 2048;
          os_log_type_t v48 = v15;
          BOOL v49 = 1024;
          int v50 = v28;
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%d> stream (%pm %d) did not have protocol extra", buf, 0x3Cu);
        }
      }
      return 4294966394;
    }
    if ((*(__int16 *)(a4 + 388) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v23 = gconnectionLogObj;
      uint64_t result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        __int16 v24 = *(_DWORD *)(a4 + 368);
        uint64_t v25 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        uint64_t v38 = "on_frame_not_send_callback";
        uint64_t v39 = 2082;
        int v40 = (char *)(a4 + 390);
        int v41 = 2080;
        int v42 = " ";
        uint64_t v43 = 1024;
        char v44 = v24;
        BOOL v45 = 1024;
        os_log_type_t v46 = v25;
        uint64_t v20 = "%{public}s %{public}s%s<i%u> failed to find stream %d";
        uint64_t v21 = v23;
        BOOL v22 = OS_LOG_TYPE_DEBUG;
        goto LABEL_17;
      }
    }
  }
  else
  {
    if (v7 < 0) {
      return 0;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    char v18 = gconnectionLogObj;
    uint64_t result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
    if (result)
    {
      os_log_type_t v19 = *(_DWORD *)(a4 + 368);
      *(_DWORD *)buf = 136447234;
      uint64_t v38 = "on_frame_not_send_callback";
      uint64_t v39 = 2082;
      int v40 = (char *)(a4 + 390);
      int v41 = 2080;
      int v42 = " ";
      uint64_t v43 = 1024;
      char v44 = v19;
      BOOL v45 = 1024;
      os_log_type_t v46 = a3;
      uint64_t v20 = "%{public}s %{public}s%s<i%u> called with error %d";
      uint64_t v21 = v18;
      BOOL v22 = OS_LOG_TYPE_ERROR;
LABEL_17:
      _os_log_impl(&dword_1830D4000, v21, v22, v20, buf, 0x2Cu);
      return 0;
    }
  }
  return result;
}

uint64_t ___ZL18send_data_callbackP15nghttp2_sessionP13nghttp2_framePKhmP19nghttp2_data_sourcePv_block_invoke_57(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t send_callback(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "send_callback";
    char v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v66[0]) = 0;
    if (!__nwlog_fault(v23, type, v66)) {
      goto LABEL_76;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v33 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      if (!os_log_type_enabled(v33, type[0])) {
        goto LABEL_76;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "send_callback";
      uint64_t v26 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (LOBYTE(v66[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v33 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      BOOL v43 = os_log_type_enabled(v33, type[0]);
      if (backtrace_string)
      {
        if (v43)
        {
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "send_callback";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = backtrace_string;
          __int16 v29 = "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s";
          int v30 = v33;
          os_log_type_t v31 = v34;
          uint32_t v32 = 22;
          goto LABEL_52;
        }
LABEL_53:
        free(backtrace_string);
        goto LABEL_76;
      }
      if (!v43) {
        goto LABEL_76;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "send_callback";
      uint64_t v26 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      __int16 v33 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      if (!os_log_type_enabled(v33, type[0])) {
        goto LABEL_76;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "send_callback";
      uint64_t v26 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    BOOL v49 = v33;
    os_log_type_t v50 = v34;
    uint32_t v51 = 12;
    goto LABEL_75;
  }
  p_cache = NWConcrete_nw_resolution_report.cache;
  if (gLogDatapath)
  {
    __int16 v35 = __nwlog_obj();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "send_callback";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = a5 + 205;
      _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", (uint8_t *)buf, 0x16u);
    }
    if (gLogDatapath)
    {
      int v36 = __nwlog_obj();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136446722;
        *(void *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a5 + 205;
        HIWORD(buf[2]) = 2048;
        char v74 = a3;
        _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s asked to write %lu bytes by nghttp2", (uint8_t *)buf, 0x20u);
      }
    }
  }
  v66[0] = 0;
  v66[1] = v66;
  v65[0] = 0;
  v65[1] = v65;
  uint64_t v9 = *(void *)(a5 + 32);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 24);
    if (v10)
    {
      int v11 = *(unsigned int (**)(void, uint64_t, uint64_t, char *, uint64_t, void *))(v10 + 88);
      if (v11)
      {
        if (!v11(*(void *)(a5 + 32), a5, 1, a3, 0xFFFFFFFFLL, v66)) {
          return -504;
        }
        uint64_t v12 = v66[0];
        if (!v66[0]) {
          return -504;
        }
        buf[0] = 0;
        buf[1] = buf;
        LODWORD(v74) = 0;
        buf[2] = 0x2000000000;
        v55[0] = MEMORY[0x1E4F143A8];
        v55[1] = 0x40000000;
        int v56 = ___ZL13send_callbackP15nghttp2_sessionPKhmiPv_block_invoke;
        __int16 v57 = &unk_1E5240CA8;
        BOOL v58 = buf;
        BOOL v59 = a3;
        uint64_t v60 = a2;
        uint64_t v61 = a5;
        BOOL v62 = v66;
        __int16 v63 = v65;
        do
        {
          if (!v12) {
            break;
          }
          uint64_t v13 = *(void *)(v12 + 32);
          char v14 = ((uint64_t (*)(void *))v56)(v55);
          uint64_t v12 = v13;
        }
        while ((v14 & 1) != 0);
        uint64_t v15 = *(void *)(v9 + 24);
        if (v15)
        {
          uint64_t v16 = *(void (**)(uint64_t, void *))(v15 + 96);
          if (v16)
          {
            v16(v9, v65);
LABEL_14:
            uint64_t v17 = v66[0];
            do
            {
              if (!v17) {
                break;
              }
              uint64_t v18 = *(void *)(v17 + 32);
              char v19 = ___ZL13send_callbackP15nghttp2_sessionPKhmiPv_block_invoke_52((uint64_t)&__block_literal_global_55_37726, v17);
              uint64_t v17 = v18;
            }
            while ((v19 & 1) != 0);
            if (*((unsigned char *)p_cache + 3665))
            {
              char v44 = __nwlog_obj();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
              {
                int v45 = *(_DWORD *)(buf[1] + 24);
                *(_DWORD *)os_log_type_t type = 136446722;
                __int16 v68 = "send_callback";
                __int16 v69 = 2082;
                uint64_t v70 = (const char *)(a5 + 205);
                __int16 v71 = 1024;
                LODWORD(v72) = v45;
                _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s wrote %u bytes", (uint8_t *)type, 0x1Cu);
              }
            }
            uint64_t v20 = *(unsigned int *)(buf[1] + 24);
            _Block_object_dispose(buf, 8);
            return v20;
          }
        }
        __nwlog_obj();
        __int16 v37 = *(const char **)(v9 + 16);
        if (!v37) {
          __int16 v37 = "invalid";
        }
        *(_DWORD *)os_log_type_t type = 136446466;
        __int16 v68 = "send_callback";
        __int16 v69 = 2082;
        uint64_t v70 = v37;
        uint64_t v38 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v64 = OS_LOG_TYPE_ERROR;
        char v54 = 0;
        if (__nwlog_fault(v38, &v64, &v54))
        {
          if (v64 == OS_LOG_TYPE_FAULT)
          {
            uint64_t v39 = __nwlog_obj();
            os_log_type_t v40 = v64;
            if (!os_log_type_enabled(v39, v64)) {
              goto LABEL_84;
            }
            int v41 = *(const char **)(v9 + 16);
            if (!v41) {
              int v41 = "invalid";
            }
            *(_DWORD *)os_log_type_t type = 136446466;
            __int16 v68 = "send_callback";
            __int16 v69 = 2082;
            uint64_t v70 = v41;
            int v42 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
            goto LABEL_83;
          }
          if (!v54)
          {
            uint64_t v39 = __nwlog_obj();
            os_log_type_t v40 = v64;
            if (!os_log_type_enabled(v39, v64)) {
              goto LABEL_84;
            }
            int v52 = *(const char **)(v9 + 16);
            if (!v52) {
              int v52 = "invalid";
            }
            *(_DWORD *)os_log_type_t type = 136446466;
            __int16 v68 = "send_callback";
            __int16 v69 = 2082;
            uint64_t v70 = v52;
            int v42 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
            goto LABEL_83;
          }
          os_log_type_t v46 = (char *)__nw_create_backtrace_string();
          uint64_t v39 = __nwlog_obj();
          os_log_type_t v40 = v64;
          BOOL v47 = os_log_type_enabled(v39, v64);
          if (v46)
          {
            if (v47)
            {
              os_log_type_t v48 = *(const char **)(v9 + 16);
              if (!v48) {
                os_log_type_t v48 = "invalid";
              }
              *(_DWORD *)os_log_type_t type = 136446722;
              __int16 v68 = "send_callback";
              __int16 v69 = 2082;
              uint64_t v70 = v48;
              __int16 v71 = 2082;
              uint64_t v72 = v46;
              _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s", (uint8_t *)type, 0x20u);
            }
            free(v46);
            p_cache = (void **)(NWConcrete_nw_resolution_report + 16);
            goto LABEL_84;
          }
          p_cache = (void **)(NWConcrete_nw_resolution_report + 16);
          if (v47)
          {
            uint64_t v53 = *(const char **)(v9 + 16);
            if (!v53) {
              uint64_t v53 = "invalid";
            }
            *(_DWORD *)os_log_type_t type = 136446466;
            __int16 v68 = "send_callback";
            __int16 v69 = 2082;
            uint64_t v70 = v53;
            int v42 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
LABEL_83:
            _os_log_impl(&dword_1830D4000, v39, v40, v42, (uint8_t *)type, 0x16u);
          }
        }
LABEL_84:
        if (v38) {
          free(v38);
        }
        goto LABEL_14;
      }
    }
  }
  __nwlog_obj();
  uint64_t v22 = a5 + 205;
  LODWORD(buf[0]) = 136446466;
  *(void *)((char *)buf + 4) = "send_callback";
  WORD2(buf[1]) = 2082;
  *(void *)((char *)&buf[1] + 6) = a5 + 205;
  char v23 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v64 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v23, type, &v64)) {
    goto LABEL_76;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __int16 v24 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    if (os_log_type_enabled(v24, type[0]))
    {
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "send_callback";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v22;
      uint64_t v26 = "%{public}s %{public}s output handler has no get_output_frames callback";
LABEL_65:
      BOOL v49 = v24;
      os_log_type_t v50 = v25;
      uint32_t v51 = 22;
LABEL_75:
      _os_log_impl(&dword_1830D4000, v49, v50, v26, (uint8_t *)buf, v51);
      goto LABEL_76;
    }
    goto LABEL_76;
  }
  if (v64)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v24 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v28 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (v28)
      {
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v22;
        uint64_t v26 = "%{public}s %{public}s output handler has no get_output_frames callback, no backtrace";
        goto LABEL_65;
      }
      goto LABEL_76;
    }
    if (v28)
    {
      LODWORD(buf[0]) = 136446722;
      *(void *)((char *)buf + 4) = "send_callback";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v22;
      HIWORD(buf[2]) = 2082;
      char v74 = backtrace_string;
      __int16 v29 = "%{public}s %{public}s output handler has no get_output_frames callback, dumping backtrace:%{public}s";
      int v30 = v24;
      os_log_type_t v31 = v25;
      uint32_t v32 = 32;
LABEL_52:
      _os_log_impl(&dword_1830D4000, v30, v31, v29, (uint8_t *)buf, v32);
      goto LABEL_53;
    }
    goto LABEL_53;
  }
  __int16 v24 = __nwlog_obj();
  os_log_type_t v25 = type[0];
  if (os_log_type_enabled(v24, type[0]))
  {
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "send_callback";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = v22;
    uint64_t v26 = "%{public}s %{public}s output handler has no get_output_frames callback, backtrace limit exceeded";
    goto LABEL_65;
  }
LABEL_76:
  if (v23) {
    free(v23);
  }
  return -902;
}

uint64_t ___ZL13send_callbackP15nghttp2_sessionPKhmiPv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unsigned int v19 = 0;
  uint64_t v4 = (void *)nw_frame_unclaimed_bytes(a2, &v19);
  uint64_t v5 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  unsigned int v6 = *(_DWORD *)(a1 + 40) - v5;
  if (v6 >= v19) {
    size_t v7 = v19;
  }
  else {
    size_t v7 = v6;
  }
  memcpy(v4, (const void *)(*(void *)(a1 + 48) + v5), v7);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v7;
  nw_frame_claim(a2, v8, v7, 0);
  nw_frame_collapse(a2);
  nw_frame_unclaim(a2, v9, v7, 0);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void **)(a2 + 40);
  uint64_t v10 = (void *)(a2 + 32);
  if (v11)
  {
    *(void *)(v11 + 40) = v12;
    uint64_t v12 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 64) + 8) = v12;
  }
  *uint64_t v12 = v11;
  *uint64_t v10 = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v13 = *(void *)(a1 + 72);
  char v14 = *(uint64_t **)(v13 + 8);
  *(void *)(a2 + 40) = v14;
  *char v14 = a2;
  *(void *)(v13 + 8) = v10;
  if (gLogDatapath)
  {
    uint64_t v16 = __nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 136446722;
      uint64_t v21 = "send_callback_block_invoke";
      if (v17) {
        uint64_t v18 = (const char *)(v17 + 205);
      }
      else {
        uint64_t v18 = "";
      }
      __int16 v22 = 2082;
      char v23 = v18;
      __int16 v24 = 1024;
      int v25 = v7;
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s copied %u bytes into output frame", buf, 0x1Cu);
    }
  }
  return 1;
}

uint64_t ___ZL13send_callbackP15nghttp2_sessionPKhmiPv_block_invoke_52(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_http2_transport_drain_next_frame_for_stream(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v17 = __nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = "";
      if (a1) {
        uint64_t v18 = (const char *)(a1 + 205);
      }
      *(_DWORD *)buf = 136446466;
      int v52 = "nw_http2_transport_drain_next_frame_for_stream";
      __int16 v53 = 2082;
      char v54 = (void *)v18;
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v52 = "nw_http2_transport_drain_next_frame_for_stream";
    unsigned int v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v19, &type, &v49)) {
      goto LABEL_89;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v49)
      {
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (!os_log_type_enabled(v20, type)) {
          goto LABEL_89;
        }
        *(_DWORD *)buf = 136446210;
        int v52 = "nw_http2_transport_drain_next_frame_for_stream";
        __int16 v22 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_88;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v28 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (!v28) {
          goto LABEL_89;
        }
        *(_DWORD *)buf = 136446210;
        int v52 = "nw_http2_transport_drain_next_frame_for_stream";
        __int16 v22 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_88;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        int v52 = "nw_http2_transport_drain_next_frame_for_stream";
        __int16 v53 = 2082;
        char v54 = backtrace_string;
        __int16 v29 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
LABEL_55:
        _os_log_impl(&dword_1830D4000, v20, v21, v29, buf, 0x16u);
      }
LABEL_56:
      free(backtrace_string);
      goto LABEL_89;
    }
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_89;
    }
    *(_DWORD *)buf = 136446210;
    int v52 = "nw_http2_transport_drain_next_frame_for_stream";
    __int16 v22 = "%{public}s called with null http2_transport";
LABEL_88:
    _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0xCu);
LABEL_89:
    if (v19) {
      free(v19);
    }
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v52 = "nw_http2_transport_drain_next_frame_for_stream";
    unsigned int v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v19, &type, &v49)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      int v52 = "nw_http2_transport_drain_next_frame_for_stream";
      __int16 v22 = "%{public}s called with null input_handler";
      goto LABEL_88;
    }
    if (!v49)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      int v52 = "nw_http2_transport_drain_next_frame_for_stream";
      __int16 v22 = "%{public}s called with null input_handler, backtrace limit exceeded";
      goto LABEL_88;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v30 = os_log_type_enabled(v20, type);
    if (backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        int v52 = "nw_http2_transport_drain_next_frame_for_stream";
        __int16 v53 = 2082;
        char v54 = backtrace_string;
        __int16 v29 = "%{public}s called with null input_handler, dumping backtrace:%{public}s";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    if (!v30) {
      goto LABEL_89;
    }
    *(_DWORD *)buf = 136446210;
    int v52 = "nw_http2_transport_drain_next_frame_for_stream";
    __int16 v22 = "%{public}s called with null input_handler, no backtrace";
    goto LABEL_88;
  }
  uint64_t v8 = *(void *)(a3 + 16);
  if (!v8)
  {
    if (gLogDatapath)
    {
      __int16 v37 = __nwlog_obj();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        int v52 = "nw_http2_transport_drain_next_frame_for_stream";
        __int16 v53 = 2082;
        char v54 = (void *)(a1 + 205);
        _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s no next frame to drain", buf, 0x16u);
        return 0;
      }
    }
    return 0;
  }
  if (gLogDatapath)
  {
    char v23 = __nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      int v24 = *(_DWORD *)(v8 + 52);
      if (v24) {
        v24 -= *(_DWORD *)(v8 + 56) + *(_DWORD *)(v8 + 60);
      }
      *(_DWORD *)buf = 136446722;
      int v52 = "nw_http2_transport_drain_next_frame_for_stream";
      __int16 v53 = 2082;
      char v54 = (void *)(a1 + 205);
      __int16 v55 = 1024;
      *(_DWORD *)int v56 = v24;
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s draining output frame of %u bytes", buf, 0x1Cu);
    }
  }
  BOOL v9 = nw_http2_transport_submit_data(a1, v8);
  int v10 = gLogDatapath;
  if (v9)
  {
    if (gLogDatapath)
    {
      uint64_t v38 = __nwlog_obj();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        int v39 = *(_DWORD *)(v8 + 52);
        if (v39) {
          v39 -= *(_DWORD *)(v8 + 56) + *(_DWORD *)(v8 + 60);
        }
        int v40 = *(_DWORD *)(a3 + 32);
        *(_DWORD *)buf = 136446978;
        int v52 = "nw_http2_transport_drain_next_frame_for_stream";
        __int16 v53 = 2082;
        char v54 = (void *)(a1 + 205);
        __int16 v55 = 1024;
        *(_DWORD *)int v56 = v39;
        *(_WORD *)&v56[4] = 1024;
        *(_DWORD *)&v56[6] = v40;
        _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s drained %u output bytes for stream %d", buf, 0x22u);
      }
    }
    uint64_t v11 = *(void *)(v8 + 16);
    uint64_t v12 = *(void **)(v8 + 24);
    if (v11)
    {
      *(void *)(v11 + 24) = v12;
      uint64_t v12 = *(void **)(v8 + 24);
    }
    else
    {
      *(void *)(a3 + 24) = v12;
    }
    *uint64_t v12 = v11;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 24) = 0;
    int v10 = gLogDatapath;
  }
  if (v10)
  {
    int v25 = __nwlog_obj();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 0;
      nw_frame_array_get_frame_count((uint64_t *)(a3 + 16), 0, buf);
      int v26 = *(_DWORD *)buf;
      *(_DWORD *)buf = 136446722;
      int v52 = "nw_http2_transport_drain_next_frame_for_stream";
      __int16 v53 = 2082;
      char v54 = (void *)(a1 + 205);
      __int16 v55 = 1024;
      *(_DWORD *)int v56 = v26;
      _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s stream now has %u bytes pending", buf, 0x1Cu);
    }
  }
  if (a4) {
    nw_http2_transport_session_send(a1);
  }
  uint64_t v13 = *(void *)(a3 + 16);
  if (!v9)
  {
LABEL_23:
    if (v13) {
      return v9;
    }
    goto LABEL_24;
  }
  if (v13) {
    return 1;
  }
  if ((*(unsigned char *)(a3 + 36) & 4) != 0)
  {
    if (gLogDatapath)
    {
      BOOL v47 = __nwlog_obj();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        int v52 = "nw_http2_transport_drain_next_frame_for_stream";
        __int16 v53 = 2082;
        char v54 = (void *)(a1 + 205);
        _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s sending deferred end stream", buf, 0x16u);
      }
    }
    nw_http2_transport_send_end_stream(a1, a3);
    uint64_t v13 = *(void *)(a3 + 16);
    goto LABEL_23;
  }
LABEL_24:
  if (gLogDatapath)
  {
    int v41 = __nwlog_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      int v42 = *(_DWORD *)(a3 + 32);
      *(_DWORD *)buf = 136446978;
      int v52 = "nw_http2_transport_drain_next_frame_for_stream";
      __int16 v53 = 2082;
      char v54 = (void *)(a1 + 205);
      __int16 v55 = 2048;
      *(void *)int v56 = a2;
      *(_WORD *)&v56[8] = 1024;
      int v57 = v42;
      _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s delivering output available to protocol %p for stream %d", buf, 0x26u);
    }
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (v14)
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 72);
    if (v15)
    {
      v15(a2, a1);
      return v9;
    }
  }
  __nwlog_obj();
  os_log_type_t v31 = *(const char **)(a2 + 16);
  if (!v31) {
    os_log_type_t v31 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  int v52 = "nw_http2_transport_drain_next_frame_for_stream";
  __int16 v53 = 2082;
  char v54 = (void *)v31;
  uint32_t v32 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v49 = 0;
  if (!__nwlog_fault(v32, &type, &v49)) {
    goto LABEL_102;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    __int16 v33 = __nwlog_obj();
    os_log_type_t v34 = type;
    if (!os_log_type_enabled(v33, type)) {
      goto LABEL_102;
    }
    __int16 v35 = *(const char **)(a2 + 16);
    if (!v35) {
      __int16 v35 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    int v52 = "nw_http2_transport_drain_next_frame_for_stream";
    __int16 v53 = 2082;
    char v54 = (void *)v35;
    int v36 = "%{public}s protocol %{public}s has invalid output_available callback";
    goto LABEL_101;
  }
  if (!v49)
  {
    __int16 v33 = __nwlog_obj();
    os_log_type_t v34 = type;
    if (!os_log_type_enabled(v33, type)) {
      goto LABEL_102;
    }
    os_log_type_t v46 = *(const char **)(a2 + 16);
    if (!v46) {
      os_log_type_t v46 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    int v52 = "nw_http2_transport_drain_next_frame_for_stream";
    __int16 v53 = 2082;
    char v54 = (void *)v46;
    int v36 = "%{public}s protocol %{public}s has invalid output_available callback, backtrace limit exceeded";
    goto LABEL_101;
  }
  BOOL v43 = (char *)__nw_create_backtrace_string();
  __int16 v33 = __nwlog_obj();
  os_log_type_t v34 = type;
  BOOL v44 = os_log_type_enabled(v33, type);
  if (v43)
  {
    if (v44)
    {
      int v45 = *(const char **)(a2 + 16);
      if (!v45) {
        int v45 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      int v52 = "nw_http2_transport_drain_next_frame_for_stream";
      __int16 v53 = 2082;
      char v54 = (void *)v45;
      __int16 v55 = 2082;
      *(void *)int v56 = v43;
      _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s protocol %{public}s has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v43);
    goto LABEL_102;
  }
  if (v44)
  {
    os_log_type_t v48 = *(const char **)(a2 + 16);
    if (!v48) {
      os_log_type_t v48 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    int v52 = "nw_http2_transport_drain_next_frame_for_stream";
    __int16 v53 = 2082;
    char v54 = (void *)v48;
    int v36 = "%{public}s protocol %{public}s has invalid output_available callback, no backtrace";
LABEL_101:
    _os_log_impl(&dword_1830D4000, v33, v34, v36, buf, 0x16u);
  }
LABEL_102:
  if (v32) {
    free(v32);
  }
  return v9;
}

void nw_http2_transport_send_end_stream(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    char v23 = __nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v31 = "nw_http2_transport_send_end_stream";
      __int16 v32 = 2082;
      uint64_t v33 = a1 + 205;
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v31 = "nw_http2_transport_send_end_stream";
      __int16 v32 = 2082;
      uint64_t v33 = a1 + 205;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}s ERROR: Cannot send end stream on a closed stream", buf, 0x16u);
    }
    return;
  }
  if (*(void *)(a2 + 16))
  {
    if (!gLogDatapath) {
      goto LABEL_7;
    }
    int v24 = __nwlog_obj();
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_7;
    }
    *(_DWORD *)buf = 0;
    nw_frame_array_get_frame_count((uint64_t *)(a2 + 16), 0, buf);
    int v25 = *(_DWORD *)buf;
    *(_DWORD *)buf = 136446722;
    os_log_type_t v31 = "nw_http2_transport_send_end_stream";
    __int16 v32 = 2082;
    uint64_t v33 = a1 + 205;
    __int16 v34 = 1024;
    LODWORD(v35) = v25;
    BOOL v9 = "%{public}s %{public}s deferring end stream until all pending bytes (%u) are sent";
    int v10 = v24;
    uint32_t v11 = 28;
LABEL_38:
    _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, v9, buf, v11);
LABEL_7:
    *(unsigned char *)(a2 + 36) |= 4u;
    return;
  }
  if (gLogDatapath)
  {
    int v26 = __nwlog_obj();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      int v27 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446722;
      os_log_type_t v31 = "nw_http2_transport_send_end_stream";
      __int16 v32 = 2082;
      uint64_t v33 = a1 + 205;
      __int16 v34 = 1024;
      LODWORD(v35) = v27;
      _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s writing end stream on stream %d", buf, 0x1Cu);
    }
  }
  int v5 = nghttp2_submit_data();
  if ((v5 & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446722;
      os_log_type_t v31 = "nw_http2_transport_send_end_stream";
      __int16 v32 = 2082;
      uint64_t v33 = a1 + 205;
      __int16 v34 = 1024;
      LODWORD(v35) = v7;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s submitted end stream for stream %d", buf, 0x1Cu);
    }
    *(unsigned char *)(a2 + 36) &= ~4u;
    nw_http2_transport_session_send(a1);
    return;
  }
  if (v5 == -529)
  {
    if (!gLogDatapath) {
      goto LABEL_7;
    }
    uint64_t v8 = __nwlog_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_7;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v31 = "nw_http2_transport_send_end_stream";
    __int16 v32 = 2082;
    uint64_t v33 = a1 + 205;
    BOOL v9 = "%{public}s %{public}s continuing (or starting) to defer end stream until all pending bytes are sent";
    int v10 = v8;
    uint32_t v11 = 22;
    goto LABEL_38;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v12 = nghttp2_strerror();
  *(_DWORD *)buf = 136446466;
  os_log_type_t v31 = "nw_http2_transport_send_end_stream";
  __int16 v32 = 2082;
  uint64_t v33 = v12;
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (__nwlog_fault(v13, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = gLogObj;
      os_log_type_t v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_32;
      }
      uint64_t v16 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      os_log_type_t v31 = "nw_http2_transport_send_end_stream";
      __int16 v32 = 2082;
      uint64_t v33 = v16;
      uint64_t v17 = "%{public}s nghttp2_submit_data: %{public}s failed";
      goto LABEL_31;
    }
    if (!v28)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_32;
      }
      uint64_t v21 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      os_log_type_t v31 = "nw_http2_transport_send_end_stream";
      __int16 v32 = 2082;
      uint64_t v33 = v21;
      uint64_t v17 = "%{public}s nghttp2_submit_data: %{public}s failed, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v19 = os_log_type_enabled(v14, type);
    if (backtrace_string)
    {
      if (v19)
      {
        uint64_t v20 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        os_log_type_t v31 = "nw_http2_transport_send_end_stream";
        __int16 v32 = 2082;
        uint64_t v33 = v20;
        __int16 v34 = 2082;
        __int16 v35 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s nghttp2_submit_data: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_32;
    }
    if (v19)
    {
      uint64_t v22 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      os_log_type_t v31 = "nw_http2_transport_send_end_stream";
      __int16 v32 = 2082;
      uint64_t v33 = v22;
      uint64_t v17 = "%{public}s nghttp2_submit_data: %{public}s failed, no backtrace";
LABEL_31:
      _os_log_impl(&dword_1830D4000, v14, v15, v17, buf, 0x16u);
    }
  }
LABEL_32:
  if (v13) {
    free(v13);
  }
}

uint64_t nw_http2_transport_empty_frame_data_source_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    *a5 = 1;
    return 0;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_http2_transport_empty_frame_data_source_callback";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_http2_transport_empty_frame_data_source_callback";
      BOOL v9 = "%{public}s called with null data_flags";
      goto LABEL_17;
    }
    if (!v12)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_http2_transport_empty_frame_data_source_callback";
      BOOL v9 = "%{public}s called with null data_flags, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v15 = "nw_http2_transport_empty_frame_data_source_callback";
        __int16 v16 = 2082;
        uint64_t v17 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null data_flags, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_http2_transport_empty_frame_data_source_callback";
      BOOL v9 = "%{public}s called with null data_flags, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_18:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t on_stream_close_callback(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    __int16 v34 = __nwlog_obj();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      BOOL v43 = "on_stream_close_callback";
      __int16 v44 = 1024;
      LODWORD(v45) = a2;
      _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s called for stream %d", buf, 0x12u);
    }
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v43 = "on_stream_close_callback";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v11, &type, &v40)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v35 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (!os_log_type_enabled(v35, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v43 = "on_stream_close_callback";
      uint64_t v14 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v35 = __nwlog_obj();
      os_log_type_t v36 = type;
      BOOL v37 = os_log_type_enabled(v35, type);
      if (backtrace_string)
      {
        if (!v37) {
          goto LABEL_38;
        }
        *(_DWORD *)buf = 136446466;
        BOOL v43 = "on_stream_close_callback";
        __int16 v44 = 2082;
        int v45 = backtrace_string;
        int v27 = "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s";
        char v28 = v35;
        os_log_type_t v29 = v36;
        uint32_t v30 = 22;
        goto LABEL_37;
      }
      if (!v37) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v43 = "on_stream_close_callback";
      uint64_t v14 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      __int16 v35 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (!os_log_type_enabled(v35, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v43 = "on_stream_close_callback";
      uint64_t v14 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    os_log_type_t v31 = v35;
    os_log_type_t v32 = v36;
    uint32_t v33 = 12;
    goto LABEL_49;
  }
  uint64_t stream_node_from_id = nw_http2_transport_get_stream_node_from_id(a4, a2);
  if (!stream_node_from_id)
  {
    if (gLogDatapath)
    {
      os_log_type_t v15 = __nwlog_obj();
      uint64_t result = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v43 = "on_stream_close_callback";
      __int16 v44 = 2082;
      int v45 = (char *)(a4 + 205);
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for stream that is not in id based table, ignoring", buf, 0x16u);
    }
    return 0;
  }
  int v7 = (char *)stream_node_from_id;
  uint64_t v8 = *(void *)(stream_node_from_id + 16);
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v17 = a4 + 205;
    *(_DWORD *)buf = 136446722;
    BOOL v43 = "on_stream_close_callback";
    __int16 v44 = 2082;
    int v45 = (char *)(a4 + 205);
    __int16 v46 = 2048;
    BOOL v47 = v7;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v11, &type, &v40)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = gLogObj;
      os_log_type_t v19 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v43 = "on_stream_close_callback";
      __int16 v44 = 2082;
      int v45 = (char *)v17;
      __int16 v46 = 2048;
      BOOL v47 = v7;
      uint64_t v14 = "%{public}s %{public}s no stream found in id hash node %p";
    }
    else if (v40)
    {
      char v23 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = gLogObj;
      os_log_type_t v19 = type;
      BOOL v24 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v23)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446978;
          BOOL v43 = "on_stream_close_callback";
          __int16 v44 = 2082;
          int v45 = (char *)v17;
          __int16 v46 = 2048;
          BOOL v47 = v7;
          __int16 v48 = 2082;
          char v49 = v23;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s %{public}s no stream found in id hash node %p, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v23);
        goto LABEL_50;
      }
      if (!v24) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v43 = "on_stream_close_callback";
      __int16 v44 = 2082;
      int v45 = (char *)v17;
      __int16 v46 = 2048;
      BOOL v47 = v7;
      uint64_t v14 = "%{public}s %{public}s no stream found in id hash node %p, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = gLogObj;
      os_log_type_t v19 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v43 = "on_stream_close_callback";
      __int16 v44 = 2082;
      int v45 = (char *)v17;
      __int16 v46 = 2048;
      BOOL v47 = v7;
      uint64_t v14 = "%{public}s %{public}s no stream found in id hash node %p, backtrace limit exceeded";
    }
    os_log_type_t v31 = v18;
    os_log_type_t v32 = v19;
    uint32_t v33 = 32;
LABEL_49:
    _os_log_impl(&dword_1830D4000, v31, v32, v14, buf, v33);
    goto LABEL_50;
  }
  uint64_t v9 = *(void *)(stream_node_from_id + 32);
  if (!v9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v20 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      int v21 = *(_DWORD *)(v8 + 32);
      *(_DWORD *)buf = 136446722;
      BOOL v43 = "on_stream_close_callback";
      __int16 v44 = 2082;
      int v45 = (char *)(a4 + 205);
      __int16 v46 = 1024;
      LODWORD(v47) = v21;
      _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_INFO, "%{public}s %{public}s closing stream %d that has no input handler", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  if (*(void *)(v9 + 24))
  {
LABEL_20:
    if (*(unsigned char *)(v8 + 36))
    {
      if (gLogDatapath)
      {
        uint64_t v38 = __nwlog_obj();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
          int v39 = *(_DWORD *)(v8 + 32);
          *(_DWORD *)buf = 136446722;
          BOOL v43 = "on_stream_close_callback";
          __int16 v44 = 2082;
          int v45 = (char *)(a4 + 205);
          __int16 v46 = 1024;
          LODWORD(v47) = v39;
          _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s closing stream %d", buf, 0x1Cu);
        }
      }
      *(unsigned char *)(v8 + 36) &= ~1u;
      nw_http2_transport_stream_close(a4, v8);
    }
    else if (gLogDatapath)
    {
      uint64_t v22 = __nwlog_obj();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v43 = "on_stream_close_callback";
        __int16 v44 = 2082;
        int v45 = (char *)(a4 + 205);
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s not closing already closed stream", buf, 0x16u);
      }
    }
    nw_http2_transport_protocol_close(a4, v9);
    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v10 = a4 + 205;
  *(_DWORD *)buf = 136446466;
  BOOL v43 = "on_stream_close_callback";
  __int16 v44 = 2082;
  int v45 = (char *)(a4 + 205);
  BOOL v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v40 = 0;
  if (!__nwlog_fault(v11, &type, &v40)) {
    goto LABEL_50;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v12 = gLogObj;
    os_log_type_t v13 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446466;
      BOOL v43 = "on_stream_close_callback";
      __int16 v44 = 2082;
      int v45 = (char *)v10;
      uint64_t v14 = "%{public}s %{public}s protocol has null callbacks";
LABEL_48:
      os_log_type_t v31 = v12;
      os_log_type_t v32 = v13;
      uint32_t v33 = 22;
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v40)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v12 = gLogObj;
    os_log_type_t v13 = type;
    BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v43 = "on_stream_close_callback";
        __int16 v44 = 2082;
        int v45 = (char *)v10;
        uint64_t v14 = "%{public}s %{public}s protocol has null callbacks, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_50;
    }
    if (!v26)
    {
LABEL_38:
      free(backtrace_string);
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446722;
    BOOL v43 = "on_stream_close_callback";
    __int16 v44 = 2082;
    int v45 = (char *)v10;
    __int16 v46 = 2082;
    BOOL v47 = backtrace_string;
    int v27 = "%{public}s %{public}s protocol has null callbacks, dumping backtrace:%{public}s";
    char v28 = v12;
    os_log_type_t v29 = v13;
    uint32_t v30 = 32;
LABEL_37:
    _os_log_impl(&dword_1830D4000, v28, v29, v27, buf, v30);
    goto LABEL_38;
  }
  char v12 = __nwlog_obj();
  os_log_type_t v13 = type;
  if (os_log_type_enabled(v12, type))
  {
    *(_DWORD *)buf = 136446466;
    BOOL v43 = "on_stream_close_callback";
    __int16 v44 = 2082;
    int v45 = (char *)v10;
    uint64_t v14 = "%{public}s %{public}s protocol has null callbacks, backtrace limit exceeded";
    goto LABEL_48;
  }
LABEL_50:
  if (v11) {
    free(v11);
  }
  return 4294966394;
}

{
  uint64_t stream_from_id;
  uint64_t v7;
  int v8;
  int v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  int v14;
  const char *v15;
  NSObject *v16;
  uint64_t result;
  int v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  int v24;
  int v25;
  NSObject *v26;
  int v27;
  uint64_t v28;
  char *v29;
  BOOL v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  char *v40;
  NSObject *v41;
  const char *v42;
  NSObject *v43;
  os_log_type_t v44;
  const char *v45;
  char *backtrace_string;
  BOOL v47;
  NSObject *v48;
  int v49;
  int v50;
  char v51;
  os_log_type_t v52[8];
  os_log_type_t type;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  char *v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unsigned char v63[18];
  uint64_t v64;

  os_log_type_t v64 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    int v41 = __nwlog_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v55 = "on_stream_close_callback";
      int v56 = 1024;
      LODWORD(v57) = a2;
      _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s called for stream %d", buf, 0x12u);
    }
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v55 = "on_stream_close_callback";
    int v42 = (const char *)_os_log_send_and_compose_impl();
    v52[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v42, v52, &type))
    {
      if (v52[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v43 = __nwlog_obj();
        __int16 v44 = v52[0];
        if (os_log_type_enabled(v43, v52[0]))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v55 = "on_stream_close_callback";
          int v45 = "%{public}s nghttp2 user data is NULL, not http2";
LABEL_87:
          _os_log_impl(&dword_1830D4000, v43, v44, v45, buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v43 = __nwlog_obj();
        __int16 v44 = v52[0];
        BOOL v47 = os_log_type_enabled(v43, v52[0]);
        if (backtrace_string)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v55 = "on_stream_close_callback";
            int v56 = 2082;
            int v57 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_88;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v55 = "on_stream_close_callback";
          int v45 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
          goto LABEL_87;
        }
      }
      else
      {
        BOOL v43 = __nwlog_obj();
        __int16 v44 = v52[0];
        if (os_log_type_enabled(v43, v52[0]))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v55 = "on_stream_close_callback";
          int v45 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
          goto LABEL_87;
        }
      }
    }
LABEL_88:
    if (!v42) {
      return 4294966394;
    }
    char v40 = (char *)v42;
    goto LABEL_66;
  }
  *(void *)int v52 = 0;
  uint64_t stream_from_id = nw_http2_get_stream_from_id(a4, a2, v52);
  if (stream_from_id)
  {
    int v7 = stream_from_id;
    if (*(void *)v52)
    {
      if (!*(void *)(*(void *)v52 + 24))
      {
        if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) != 0) {
          return 4294966394;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v9 = *(_DWORD *)(v7 + 176);
        uint64_t v8 = *(_DWORD *)(v7 + 180);
        *(_DWORD *)buf = 136447234;
        __int16 v55 = "on_stream_close_callback";
        int v56 = 2082;
        int v57 = (char *)(v7 + 191);
        uint64_t v58 = 2080;
        BOOL v59 = " ";
        uint64_t v60 = 1024;
        uint64_t v61 = v8;
        BOOL v62 = 1024;
        *(_DWORD *)__int16 v63 = v9;
        uint64_t v10 = (const char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        uint32_t v51 = 0;
        if (__nwlog_fault(v10, &type, &v51))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            BOOL v11 = gconnectionLogObj;
            char v12 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              uint64_t v14 = *(_DWORD *)(v7 + 176);
              os_log_type_t v13 = *(_DWORD *)(v7 + 180);
              *(_DWORD *)buf = 136447234;
              __int16 v55 = "on_stream_close_callback";
              int v56 = 2082;
              int v57 = (char *)(v7 + 191);
              uint64_t v58 = 2080;
              BOOL v59 = " ";
              uint64_t v60 = 1024;
              uint64_t v61 = v13;
              BOOL v62 = 1024;
              *(_DWORD *)__int16 v63 = v14;
              os_log_type_t v15 = "%{public}s %{public}s%s<i%u:s%d> protocol has null callbacks";
LABEL_63:
              _os_log_impl(&dword_1830D4000, v11, v12, v15, buf, 0x2Cu);
            }
          }
          else if (v51)
          {
            os_log_type_t v29 = (char *)__nw_create_backtrace_string();
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            BOOL v11 = gconnectionLogObj;
            char v12 = type;
            uint32_t v30 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
            if (!v29)
            {
              if (!v30) {
                goto LABEL_64;
              }
              int v39 = *(_DWORD *)(v7 + 176);
              uint64_t v38 = *(_DWORD *)(v7 + 180);
              *(_DWORD *)buf = 136447234;
              __int16 v55 = "on_stream_close_callback";
              int v56 = 2082;
              int v57 = (char *)(v7 + 191);
              uint64_t v58 = 2080;
              BOOL v59 = " ";
              uint64_t v60 = 1024;
              uint64_t v61 = v38;
              BOOL v62 = 1024;
              *(_DWORD *)__int16 v63 = v39;
              os_log_type_t v15 = "%{public}s %{public}s%s<i%u:s%d> protocol has null callbacks, no backtrace";
              goto LABEL_63;
            }
            if (v30)
            {
              os_log_type_t v32 = *(_DWORD *)(v7 + 176);
              os_log_type_t v31 = *(_DWORD *)(v7 + 180);
              *(_DWORD *)buf = 136447490;
              __int16 v55 = "on_stream_close_callback";
              int v56 = 2082;
              int v57 = (char *)(v7 + 191);
              uint64_t v58 = 2080;
              BOOL v59 = " ";
              uint64_t v60 = 1024;
              uint64_t v61 = v31;
              BOOL v62 = 1024;
              *(_DWORD *)__int16 v63 = v32;
              *(_WORD *)&v63[4] = 2082;
              *(void *)&v63[6] = v29;
              _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s %{public}s%s<i%u:s%d> protocol has null callbacks, dumping backtrace:%{public}s", buf, 0x36u);
            }
            free(v29);
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            BOOL v11 = gconnectionLogObj;
            char v12 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              BOOL v37 = *(_DWORD *)(v7 + 176);
              os_log_type_t v36 = *(_DWORD *)(v7 + 180);
              *(_DWORD *)buf = 136447234;
              __int16 v55 = "on_stream_close_callback";
              int v56 = 2082;
              int v57 = (char *)(v7 + 191);
              uint64_t v58 = 2080;
              BOOL v59 = " ";
              uint64_t v60 = 1024;
              uint64_t v61 = v36;
              BOOL v62 = 1024;
              *(_DWORD *)__int16 v63 = v37;
              os_log_type_t v15 = "%{public}s %{public}s%s<i%u:s%d> protocol has null callbacks, backtrace limit exceeded";
              goto LABEL_63;
            }
          }
        }
LABEL_64:
        if (v10)
        {
          char v40 = (char *)v10;
LABEL_66:
          free(v40);
        }
        return 4294966394;
      }
    }
    else if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v19 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        int v21 = *(_DWORD *)(v7 + 176);
        uint64_t v20 = *(_DWORD *)(v7 + 180);
        *(_DWORD *)buf = 136447490;
        __int16 v55 = "on_stream_close_callback";
        int v56 = 2082;
        int v57 = (char *)(v7 + 191);
        uint64_t v58 = 2080;
        BOOL v59 = " ";
        uint64_t v60 = 1024;
        uint64_t v61 = v20;
        BOOL v62 = 1024;
        *(_DWORD *)__int16 v63 = v21;
        *(_WORD *)&v63[4] = 1024;
        *(_DWORD *)&v63[6] = v21;
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%d> closing stream %d that has no input handler", buf, 0x32u);
      }
    }
    if (*(unsigned char *)(v7 + 72) && *(void *)(v7 + 64) != *(void *)(v7 + 80))
    {
      if ((*(__int16 *)(a4 + 388) & 0x80000000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        BOOL v26 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          int v27 = *(_DWORD *)(a4 + 368);
          if (*(unsigned char *)(v7 + 72)) {
            char v28 = *(void *)(v7 + 64);
          }
          else {
            char v28 = -1;
          }
          uint32_t v33 = *(void *)(v7 + 80);
          *(_DWORD *)buf = 136447490;
          __int16 v55 = "on_stream_close_callback";
          int v56 = 2082;
          int v57 = (char *)(a4 + 390);
          uint64_t v58 = 2080;
          BOOL v59 = " ";
          uint64_t v60 = 1024;
          uint64_t v61 = v27;
          BOOL v62 = 2048;
          *(void *)__int16 v63 = v28;
          *(_WORD *)&v63[8] = 2048;
          *(void *)&v63[10] = v33;
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Content length header %llu does not equal body size %llu", buf, 0x3Au);
        }
      }
      __int16 v34 = *(unsigned __int16 *)(v7 + 188);
      __int16 v35 = v34 | (*(unsigned __int8 *)(v7 + 190) << 16);
      if ((v34 & 0x40) == 0)
      {
        *(unsigned char *)(v7 + 190) = BYTE2(v35);
        *(_WORD *)(v7 + 188) = v35 | 0x40;
        nw_protocol_error(*(void **)v52, a4);
        nw_protocol_disconnected(*(void **)v52, a4);
      }
    }
    else
    {
      uint64_t v22 = (*(unsigned __int8 *)(v7 + 190) >> 3) & 1;
      if (!gLogDatapath) {
        LOBYTE(v22) = 1;
      }
      if (*(_WORD *)(v7 + 188))
      {
        if ((v22 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          __int16 v48 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v50 = *(_DWORD *)(v7 + 176);
            char v49 = *(_DWORD *)(v7 + 180);
            *(_DWORD *)buf = 136447490;
            __int16 v55 = "on_stream_close_callback";
            int v56 = 2082;
            int v57 = (char *)(v7 + 191);
            uint64_t v58 = 2080;
            BOOL v59 = " ";
            uint64_t v60 = 1024;
            uint64_t v61 = v49;
            BOOL v62 = 1024;
            *(_DWORD *)__int16 v63 = v50;
            *(_WORD *)&v63[4] = 1024;
            *(_DWORD *)&v63[6] = v50;
            _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> closing stream %d", buf, 0x32u);
          }
        }
        *(_WORD *)(v7 + 188) &= ~1u;
        nw_http2_stream_close(a4, v7);
      }
      else if ((v22 & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        char v23 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v25 = *(_DWORD *)(v7 + 176);
          BOOL v24 = *(_DWORD *)(v7 + 180);
          *(_DWORD *)buf = 136447234;
          __int16 v55 = "on_stream_close_callback";
          int v56 = 2082;
          int v57 = (char *)(v7 + 191);
          uint64_t v58 = 2080;
          BOOL v59 = " ";
          uint64_t v60 = 1024;
          uint64_t v61 = v24;
          BOOL v62 = 1024;
          *(_DWORD *)__int16 v63 = v25;
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> not closing already closed stream", buf, 0x2Cu);
        }
      }
      nw_http2_protocol_close(a4, v7, *(uint64_t *)v52);
    }
    return 0;
  }
  if (*(__int16 *)(a4 + 388) < 0) {
    return 0;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  __int16 v16 = gconnectionLogObj;
  uint64_t result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
  if (result)
  {
    uint64_t v18 = *(_DWORD *)(a4 + 368);
    *(_DWORD *)buf = 136447234;
    __int16 v55 = "on_stream_close_callback";
    int v56 = 2082;
    int v57 = (char *)(a4 + 390);
    uint64_t v58 = 2080;
    BOOL v59 = " ";
    uint64_t v60 = 1024;
    uint64_t v61 = v18;
    BOOL v62 = 1024;
    *(_DWORD *)__int16 v63 = a2;
    _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> did not find stream %d", buf, 0x2Cu);
    return 0;
  }
  return result;
}

uint64_t nw_http2_transport_get_protocol_from_stream_id(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2 <= 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v16 = "nw_http2_transport_get_protocol_from_stream_id";
      __int16 v17 = 2082;
      uint64_t v18 = a1 + 205;
      __int16 v19 = 1024;
      int v20 = a2;
      uint64_t v9 = "%{public}s %{public}s requested stream id (%d) is not valid, returning NULL protocol";
      uint64_t v10 = v11;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
LABEL_11:
      _os_log_impl(&dword_1830D4000, v10, v12, v9, buf, 0x1Cu);
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t stream_from_id = nw_http2_transport_get_stream_from_id(a1, a2, &v14);
    if (stream_from_id)
    {
      uint64_t v5 = stream_from_id;
      uint64_t result = v14;
      if (v14) {
        return result;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        int v8 = *(_DWORD *)(v5 + 32);
        *(_DWORD *)buf = 136446722;
        __int16 v16 = "nw_http2_transport_get_protocol_from_stream_id";
        __int16 v17 = 2082;
        uint64_t v18 = a1 + 205;
        __int16 v19 = 1024;
        int v20 = v8;
        uint64_t v9 = "%{public}s %{public}s no input handler attached to stream %d";
        uint64_t v10 = v7;
LABEL_10:
        os_log_type_t v12 = OS_LOG_TYPE_INFO;
        goto LABEL_11;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446722;
        __int16 v16 = "nw_http2_transport_get_protocol_from_stream_id";
        __int16 v17 = 2082;
        uint64_t v18 = a1 + 205;
        __int16 v19 = 1024;
        int v20 = a2;
        uint64_t v9 = "%{public}s %{public}s could not find stream for stream %d";
        uint64_t v10 = v13;
        goto LABEL_10;
      }
    }
  }
  return 0;
}

uint64_t on_begin_headers_callback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v92 = "on_begin_headers_callback";
    BOOL v59 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v90 = 0;
    if (!__nwlog_fault(v59, type, &v90)) {
      goto LABEL_128;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v60 = __nwlog_obj();
      os_log_type_t v61 = type[0];
      if (!os_log_type_enabled(v60, type[0])) {
        goto LABEL_128;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v92 = "on_begin_headers_callback";
      BOOL v62 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (v90)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v60 = __nwlog_obj();
      os_log_type_t v61 = type[0];
      BOOL v65 = os_log_type_enabled(v60, type[0]);
      if (backtrace_string)
      {
        if (v65)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v92 = "on_begin_headers_callback";
          __int16 v93 = 2082;
          uint64_t v94 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_1830D4000, v60, v61, "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_128;
      }
      if (!v65)
      {
LABEL_128:
        if (v59) {
          free(v59);
        }
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v92 = "on_begin_headers_callback";
      BOOL v62 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      uint64_t v60 = __nwlog_obj();
      os_log_type_t v61 = type[0];
      if (!os_log_type_enabled(v60, type[0])) {
        goto LABEL_128;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v92 = "on_begin_headers_callback";
      BOOL v62 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v60, v61, v62, buf, 0xCu);
    goto LABEL_128;
  }
  if (gLogDatapath)
  {
    __int16 v63 = __nwlog_obj();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v92 = "on_begin_headers_callback";
      __int16 v93 = 2082;
      uint64_t v94 = a3 + 205;
      _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  int v5 = *(unsigned __int8 *)(a2 + 12);
  if (v5 == 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v15 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 4294966775;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v92 = "on_begin_headers_callback";
    __int16 v93 = 2082;
    uint64_t v94 = a3 + 205;
    __int16 v16 = "%{public}s %{public}s push promise frames currently not supported";
    __int16 v17 = v15;
    uint32_t v18 = 22;
    goto LABEL_20;
  }
  if (v5 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v19 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v92 = "on_begin_headers_callback";
      __int16 v93 = 2082;
      uint64_t v94 = a3 + 205;
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s returning callback failure with unknown error", buf, 0x16u);
    }
    return 4294966394;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unsigned int v6 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136446722;
    uint64_t v92 = "on_begin_headers_callback";
    __int16 v93 = 2082;
    uint64_t v94 = a3 + 205;
    __int16 v95 = 1024;
    *(_DWORD *)int v96 = v7;
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s got header frame on stream %d", buf, 0x1Cu);
  }
  uint64_t stream_node_from_id = nw_http2_transport_get_stream_node_from_id(a3, *(_DWORD *)(a2 + 8));
  if (!stream_node_from_id)
  {
    if (*(void *)(a3 + 104))
    {
      if (!*(void *)(a3 + 96))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v44 = a3 + 205;
        *(_DWORD *)buf = 136446466;
        uint64_t v92 = "on_begin_headers_callback";
        __int16 v93 = 2082;
        uint64_t v94 = a3 + 205;
        __int16 v34 = (const char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        char v90 = 0;
        if (!__nwlog_fault(v34, type, &v90)) {
          goto LABEL_107;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          int v45 = __nwlog_obj();
          os_log_type_t v46 = type[0];
          if (!os_log_type_enabled(v45, type[0])) {
            goto LABEL_107;
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v92 = "on_begin_headers_callback";
          __int16 v93 = 2082;
          uint64_t v94 = v44;
          uint64_t v38 = "%{public}s %{public}s http2_transport has no remote endpoint when new stream is being opened";
LABEL_105:
          char v54 = v45;
          os_log_type_t v55 = v46;
          uint32_t v56 = 22;
          goto LABEL_106;
        }
        if (!v90)
        {
          int v45 = __nwlog_obj();
          os_log_type_t v46 = type[0];
          if (!os_log_type_enabled(v45, type[0])) {
            goto LABEL_107;
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v92 = "on_begin_headers_callback";
          __int16 v93 = 2082;
          uint64_t v94 = v44;
          uint64_t v38 = "%{public}s %{public}s http2_transport has no remote endpoint when new stream is being opened, backtrace limit exceeded";
          goto LABEL_105;
        }
        __int16 v48 = (char *)__nw_create_backtrace_string();
        int v45 = __nwlog_obj();
        os_log_type_t v46 = type[0];
        BOOL v49 = os_log_type_enabled(v45, type[0]);
        if (!v48)
        {
          if (!v49) {
            goto LABEL_107;
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v92 = "on_begin_headers_callback";
          __int16 v93 = 2082;
          uint64_t v94 = v44;
          uint64_t v38 = "%{public}s %{public}s http2_transport has no remote endpoint when new stream is being opened, no backtrace";
          goto LABEL_105;
        }
        if (v49)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v92 = "on_begin_headers_callback";
          __int16 v93 = 2082;
          uint64_t v94 = v44;
          __int16 v95 = 2082;
          *(void *)int v96 = v48;
          uint64_t v50 = "%{public}s %{public}s http2_transport has no remote endpoint when new stream is being opened, dumping ba"
                "cktrace:%{public}s";
LABEL_95:
          _os_log_impl(&dword_1830D4000, v45, v46, v50, buf, 0x20u);
        }
LABEL_96:
        free(v48);
        goto LABEL_107;
      }
      int v20 = *(_DWORD *)(a2 + 8);
      if (gLogDatapath)
      {
        int v67 = __nwlog_obj();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v92 = "on_begin_headers_callback";
          __int16 v93 = 2082;
          uint64_t v94 = a3 + 205;
          _os_log_impl(&dword_1830D4000, v67, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s detected new stream initiated from remote side of the connection, allocating new stream", buf, 0x16u);
        }
      }
      uint64_t v21 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
      if (v21)
      {
        uint64_t v22 = *(void **)(a3 + 88);
        if (v22) {
          goto LABEL_29;
        }
      }
      else
      {
        __int16 v68 = __nwlog_obj();
        os_log_type_enabled(v68, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446722;
        uint64_t v92 = "strict_calloc";
        __int16 v93 = 2048;
        uint64_t v94 = 1;
        __int16 v95 = 2048;
        *(void *)int v96 = 40;
        __int16 v69 = (void *)_os_log_send_and_compose_impl();
        uint64_t result = __nwlog_abort((uint64_t)v69);
        if (result)
        {
          __break(1u);
          return result;
        }
        free(v69);
        uint64_t v22 = *(void **)(a3 + 88);
        if (v22)
        {
LABEL_29:
          id v23 = v22;
          BOOL v24 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v23, 0, 0);

          nw_http2_transport_stream_init((uint64_t)v21);
          v21[8] = v20;
          *((unsigned char *)v21 + 36) |= 8u;
          if (v20 > *(_DWORD *)(a3 + 200) && (*(unsigned char *)(a3 + 204) & 1) == 0) {
            *(_DWORD *)(a3 + 200) = v20;
          }
          if (!nw_http2_transport_add_to_id_table(a3, (uint64_t)v21, 0))
          {
            int v52 = __nwlog_obj();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v92 = "on_begin_headers_callback";
              __int16 v93 = 2082;
              uint64_t v94 = a3 + 205;
              _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_ERROR, "%{public}s %{public}s failed to add new stream to the id based hash table", buf, 0x16u);
            }
            free(v21);
            if (v24) {
              os_release((void *)v24);
            }
            return 4294966775;
          }
          nw_parameters_set_server_mode((void *)v24, 1);
          *(void *)os_log_type_t type = 0;
          int v87 = type;
          uint64_t v88 = 0x2000000000;
          uint64_t v89 = 0;
          if (nw_protocol_http2_transport_identifier::onceToken != -1) {
            dispatch_once(&nw_protocol_http2_transport_identifier::onceToken, &__block_literal_global_37312);
          }
          v85[0] = MEMORY[0x1E4F143A8];
          v85[1] = 0x40000000;
          v85[2] = ___ZL25on_begin_headers_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke;
          v85[3] = &unk_1E5240C30;
          v85[4] = type;
          nw_protocol_parameters_iterate_stack((void *)v24, 4, &g_http2_transport_protocol_identifier, v85);
          if (!*((void *)v87 + 3))
          {
            if (nw_protocol_http2_transport_identifier::onceToken != -1) {
              dispatch_once(&nw_protocol_http2_transport_identifier::onceToken, &__block_literal_global_37312);
            }
            v84[0] = MEMORY[0x1E4F143A8];
            v84[1] = 0x40000000;
            v84[2] = ___ZL25on_begin_headers_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke_2;
            v84[3] = &unk_1E5240C58;
            v84[4] = type;
            nw_protocol_parameters_iterate_stack((void *)v24, 3, &g_http2_transport_protocol_identifier, v84);
            if (!*((void *)v87 + 3))
            {
              if (nw_protocol_http2_transport_identifier::onceToken != -1) {
                dispatch_once(&nw_protocol_http2_transport_identifier::onceToken, &__block_literal_global_37312);
              }
              v83[0] = MEMORY[0x1E4F143A8];
              v83[1] = 0x40000000;
              v83[2] = ___ZL25on_begin_headers_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke_3;
              v83[3] = &unk_1E5240C80;
              v83[4] = type;
              nw_protocol_parameters_iterate_stack((void *)v24, 2, &g_http2_transport_protocol_identifier, v83);
            }
          }
          xpc_object_t v25 = xpc_int64_create(v20);
          nw_parameters_set_protocol_value(*((void **)v87 + 3), "incomingStreamId", v25);
          if (v25) {
            xpc_release(v25);
          }
          if (gLogDatapath)
          {
            char v79 = __nwlog_obj();
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v80 = *((void *)v87 + 3);
              *(_DWORD *)buf = 136446978;
              uint64_t v92 = "on_begin_headers_callback";
              __int16 v93 = 2082;
              uint64_t v94 = a3 + 205;
              __int16 v95 = 2048;
              *(void *)int v96 = v24;
              *(_WORD *)&v96[8] = 2048;
              *(void *)&v96[10] = v80;
              _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s using parameters %p, protocol parameters %p on new incoming stream", buf, 0x2Au);
            }
          }
          BOOL v26 = v87;
          int v27 = (void *)*((void *)v87 + 3);
          if (v27)
          {
            os_release(v27);
            BOOL v26 = v87;
            *((void *)v87 + 3) = 0;
          }
          *((void *)v26 + 3) = 0;
          char v28 = *(void ***)(a3 + 104);
          if (v28 && (os_log_type_t v29 = *v28) != 0 && *v29)
          {
            if (gLogDatapath)
            {
              unint64_t v81 = __nwlog_obj();
              if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                uint64_t v92 = "on_begin_headers_callback";
                __int16 v93 = 2082;
                uint64_t v94 = a3 + 205;
                __int16 v95 = 1024;
                *(_DWORD *)int v96 = v20;
                _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s calling listen handler for new stream %d", buf, 0x1Cu);
              }
            }
            char v30 = (***(uint64_t (****)(void, void, BOOL))(a3 + 104))(*(void *)(a3 + 104), *(void *)(a3 + 96), v24);
            if (gLogDatapath)
            {
              __int16 v82 = __nwlog_obj();
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                uint64_t v92 = "on_begin_headers_callback";
                __int16 v93 = 2082;
                uint64_t v94 = a3 + 205;
                __int16 v95 = 1024;
                *(_DWORD *)int v96 = v20;
                _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called into listen handler for new stream %d", buf, 0x1Cu);
              }
            }
            if ((v30 & 1) == 0)
            {
              os_log_type_t v31 = __nwlog_obj();
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446722;
                uint64_t v92 = "on_begin_headers_callback";
                __int16 v93 = 2082;
                uint64_t v94 = a3 + 205;
                __int16 v95 = 1024;
                *(_DWORD *)int v96 = v20;
                _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_ERROR, "%{public}s %{public}s listen handler didn't accept the new flow for stream id %d", buf, 0x1Cu);
              }
              nw_http2_transport_stream_close(a3, (uint64_t)v21);
            }
            if (!v24) {
              goto LABEL_58;
            }
          }
          else
          {
            __int16 v66 = __nwlog_obj();
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v92 = "on_begin_headers_callback";
              __int16 v93 = 2082;
              uint64_t v94 = a3 + 205;
              _os_log_impl(&dword_1830D4000, v66, OS_LOG_TYPE_ERROR, "%{public}s %{public}s listen handler has no new_flow callback, ignoring incoming flow", buf, 0x16u);
            }
            nw_http2_transport_stream_close(a3, (uint64_t)v21);
            if (!v24) {
              goto LABEL_58;
            }
          }
          os_release((void *)v24);
LABEL_58:
          _Block_object_dispose(type, 8);
          return 0;
        }
      }
      __nwlog_obj();
      uint64_t v70 = a3 + 205;
      *(_DWORD *)buf = 136446466;
      uint64_t v92 = "on_begin_headers_callback";
      __int16 v93 = 2082;
      uint64_t v94 = a3 + 205;
      __int16 v71 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      char v90 = 0;
      if (__nwlog_fault(v71, type, &v90))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v72 = __nwlog_obj();
          os_log_type_t v73 = type[0];
          if (os_log_type_enabled(v72, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v92 = "on_begin_headers_callback";
            __int16 v93 = 2082;
            uint64_t v94 = v70;
            char v74 = "%{public}s %{public}s http2_transport->parameters is NULL when opening responder stream";
LABEL_151:
            _os_log_impl(&dword_1830D4000, v72, v73, v74, buf, 0x16u);
          }
        }
        else if (v90)
        {
          uint64_t v75 = (char *)__nw_create_backtrace_string();
          uint64_t v72 = __nwlog_obj();
          os_log_type_t v73 = type[0];
          BOOL v76 = os_log_type_enabled(v72, type[0]);
          if (v75)
          {
            if (v76)
            {
              *(_DWORD *)buf = 136446722;
              uint64_t v92 = "on_begin_headers_callback";
              __int16 v93 = 2082;
              uint64_t v94 = v70;
              __int16 v95 = 2082;
              *(void *)int v96 = v75;
              _os_log_impl(&dword_1830D4000, v72, v73, "%{public}s %{public}s http2_transport->parameters is NULL when opening responder stream, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v75);
            goto LABEL_152;
          }
          if (v76)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v92 = "on_begin_headers_callback";
            __int16 v93 = 2082;
            uint64_t v94 = v70;
            char v74 = "%{public}s %{public}s http2_transport->parameters is NULL when opening responder stream, no backtrace";
            goto LABEL_151;
          }
        }
        else
        {
          uint64_t v72 = __nwlog_obj();
          os_log_type_t v73 = type[0];
          if (os_log_type_enabled(v72, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v92 = "on_begin_headers_callback";
            __int16 v93 = 2082;
            uint64_t v94 = v70;
            char v74 = "%{public}s %{public}s http2_transport->parameters is NULL when opening responder stream, backtrace limit exceeded";
            goto LABEL_151;
          }
        }
      }
LABEL_152:
      if (v71) {
        free(v71);
      }
      if (!v21) {
        return 4294966775;
      }
      uint64_t v58 = (char *)v21;
      goto LABEL_109;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v39 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 4294966775;
    }
    int v40 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136446722;
    uint64_t v92 = "on_begin_headers_callback";
    __int16 v93 = 2082;
    uint64_t v94 = a3 + 205;
    __int16 v95 = 1024;
    *(_DWORD *)int v96 = v40;
    __int16 v16 = "%{public}s %{public}s http2_transport has no listen handler when new stream (%d) is being opened, closing";
    __int16 v17 = v39;
    uint32_t v18 = 28;
LABEL_20:
    _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    return 4294966775;
  }
  uint64_t v9 = stream_node_from_id;
  uint64_t v10 = *(void *)(stream_node_from_id + 16);
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v32 = a3 + 205;
    int v33 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136446722;
    uint64_t v92 = "on_begin_headers_callback";
    __int16 v93 = 2082;
    uint64_t v94 = a3 + 205;
    __int16 v95 = 1024;
    *(_DWORD *)int v96 = v33;
    __int16 v34 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v90 = 0;
    if (!__nwlog_fault(v34, type, &v90)) {
      goto LABEL_107;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v35 = gLogObj;
      os_log_type_t v36 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_107;
      }
      int v37 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)buf = 136446722;
      uint64_t v92 = "on_begin_headers_callback";
      __int16 v93 = 2082;
      uint64_t v94 = v32;
      __int16 v95 = 1024;
      *(_DWORD *)int v96 = v37;
      uint64_t v38 = "%{public}s %{public}s could not get stream (%d) from node";
    }
    else if (v90)
    {
      int v41 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v35 = gLogObj;
      os_log_type_t v36 = type[0];
      BOOL v42 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v41)
      {
        if (v42)
        {
          int v43 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446978;
          uint64_t v92 = "on_begin_headers_callback";
          __int16 v93 = 2082;
          uint64_t v94 = v32;
          __int16 v95 = 1024;
          *(_DWORD *)int v96 = v43;
          *(_WORD *)&v96[4] = 2082;
          *(void *)&v96[6] = v41;
          _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s %{public}s could not get stream (%d) from node, dumping backtrace:%{public}s", buf, 0x26u);
        }
        free(v41);
LABEL_107:
        if (v34)
        {
          uint64_t v58 = (char *)v34;
LABEL_109:
          free(v58);
        }
        return 4294966775;
      }
      if (!v42) {
        goto LABEL_107;
      }
      int v53 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)buf = 136446722;
      uint64_t v92 = "on_begin_headers_callback";
      __int16 v93 = 2082;
      uint64_t v94 = v32;
      __int16 v95 = 1024;
      *(_DWORD *)int v96 = v53;
      uint64_t v38 = "%{public}s %{public}s could not get stream (%d) from node, no backtrace";
    }
    else
    {
      __int16 v35 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      if (!os_log_type_enabled(v35, type[0])) {
        goto LABEL_107;
      }
      int v47 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)buf = 136446722;
      uint64_t v92 = "on_begin_headers_callback";
      __int16 v93 = 2082;
      uint64_t v94 = v32;
      __int16 v95 = 1024;
      *(_DWORD *)int v96 = v47;
      uint64_t v38 = "%{public}s %{public}s could not get stream (%d) from node, backtrace limit exceeded";
    }
    char v54 = v35;
    os_log_type_t v55 = v36;
    uint32_t v56 = 28;
LABEL_106:
    _os_log_impl(&dword_1830D4000, v54, v55, v38, buf, v56);
    goto LABEL_107;
  }
  if (*(_DWORD *)(v10 + 32) != 1 || (~*(unsigned __int8 *)(v10 + 36) & 0xA) != 0) {
    return 0;
  }
  if (gLogDatapath)
  {
    nw_endpoint_t v77 = __nwlog_obj();
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v92 = "on_begin_headers_callback";
      __int16 v93 = 2082;
      uint64_t v94 = a3 + 205;
      _os_log_impl(&dword_1830D4000, v77, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s calling connect for initial responder stream upon receipt of headers from remote client", buf, 0x16u);
    }
  }
  uint64_t v11 = *(void *)(v9 + 32);
  if (!v11)
  {
    __nwlog_obj();
    uint64_t v51 = a3 + 205;
    *(_DWORD *)buf = 136446466;
    uint64_t v92 = "on_begin_headers_callback";
    __int16 v93 = 2082;
    uint64_t v94 = a3 + 205;
    __int16 v34 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v90 = 0;
    if (!__nwlog_fault(v34, type, &v90)) {
      goto LABEL_107;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v92 = "on_begin_headers_callback";
      __int16 v93 = 2082;
      uint64_t v94 = v51;
      uint64_t v38 = "%{public}s %{public}s no input handler yet attached to initial responder stream, closing stream 1";
      goto LABEL_105;
    }
    if (!v90)
    {
      int v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v92 = "on_begin_headers_callback";
      __int16 v93 = 2082;
      uint64_t v94 = v51;
      uint64_t v38 = "%{public}s %{public}s no input handler yet attached to initial responder stream, closing stream 1, backtrace limit exceeded";
      goto LABEL_105;
    }
    __int16 v48 = (char *)__nw_create_backtrace_string();
    int v45 = __nwlog_obj();
    os_log_type_t v46 = type[0];
    BOOL v57 = os_log_type_enabled(v45, type[0]);
    if (!v48)
    {
      if (!v57) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v92 = "on_begin_headers_callback";
      __int16 v93 = 2082;
      uint64_t v94 = v51;
      uint64_t v38 = "%{public}s %{public}s no input handler yet attached to initial responder stream, closing stream 1, no backtrace";
      goto LABEL_105;
    }
    if (v57)
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v92 = "on_begin_headers_callback";
      __int16 v93 = 2082;
      uint64_t v94 = v51;
      __int16 v95 = 2082;
      *(void *)int v96 = v48;
      uint64_t v50 = "%{public}s %{public}s no input handler yet attached to initial responder stream, closing stream 1, dumping b"
            "acktrace:%{public}s";
      goto LABEL_95;
    }
    goto LABEL_96;
  }
  if (!nw_http2_transport_stream_connect(a3, v10, v11))
  {
    os_log_type_t v12 = __nwlog_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = *(_DWORD *)(v10 + 32);
      *(_DWORD *)buf = 136446978;
      uint64_t v92 = "on_begin_headers_callback";
      __int16 v93 = 2082;
      uint64_t v94 = a3 + 205;
      __int16 v95 = 1024;
      *(_DWORD *)int v96 = v13;
      *(_WORD *)&v96[4] = 2048;
      *(void *)&v96[6] = v10;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s %{public}s nw_http2_transport_stream_connect failed for stream id %d (%p)", buf, 0x26u);
    }
  }
  if (!gLogDatapath) {
    return 0;
  }
  __int16 v78 = __nwlog_obj();
  uint64_t result = os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v92 = "on_begin_headers_callback";
    __int16 v93 = 2082;
    uint64_t v94 = a3 + 205;
    _os_log_impl(&dword_1830D4000, v78, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s connected initial responder stream", buf, 0x16u);
    return 0;
  }
  return result;
}

{
  int v5;
  uint64_t stream_node_from_id;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  void *v19;
  id v20;
  BOOL v21;
  int v22;
  int v23;
  unsigned int v24;
  void **v25;
  void *v26;
  char v27;
  NSObject *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  int v37;
  const char *v38;
  uint64_t v39;
  int v40;
  int v41;
  char *v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  const char *v50;
  int v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  int v55;
  const char *v56;
  int v57;
  int v58;
  char *v59;
  BOOL v60;
  int v61;
  NSObject *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  void *v67;
  char *v68;
  BOOL v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  const char *v78;
  NSObject *v79;
  int v80;
  char *backtrace_string;
  BOOL v82;
  NSObject *v83;
  int v84;
  int v85;
  NSObject *v86;
  int v87;
  int v88;
  NSObject *v89;
  void *v90;
  NSObject *v91;
  int v92;
  NSObject *v93;
  int v94;
  int v95;
  NSObject *v96;
  int v97;
  int v98;
  char v99;
  NSObject *v100;
  BOOL v101;
  int v102;
  int v103;
  char v104;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  int v113;
  __int16 v114;
  void v115[3];

  v115[2] = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v107 = "on_begin_headers_callback";
    uint64_t v75 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    nw_endpoint_t v104 = 0;
    if (!__nwlog_fault(v75, &type, &v104)) {
      goto LABEL_164;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v76 = __nwlog_obj();
      nw_endpoint_t v77 = type;
      if (!os_log_type_enabled(v76, type)) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v107 = "on_begin_headers_callback";
      __int16 v78 = "%{public}s nghttp2 user data is NULL, not http2";
    }
    else if (v104)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v76 = __nwlog_obj();
      nw_endpoint_t v77 = type;
      __int16 v82 = os_log_type_enabled(v76, type);
      if (backtrace_string)
      {
        if (v82)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v107 = "on_begin_headers_callback";
          dispatch_time_t v108 = 2082;
          uint64_t v109 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_1830D4000, v76, v77, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_164;
      }
      if (!v82)
      {
LABEL_164:
        if (v75) {
          free(v75);
        }
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v107 = "on_begin_headers_callback";
      __int16 v78 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
    }
    else
    {
      BOOL v76 = __nwlog_obj();
      nw_endpoint_t v77 = type;
      if (!os_log_type_enabled(v76, type)) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v107 = "on_begin_headers_callback";
      __int16 v78 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v76, v77, v78, buf, 0xCu);
    goto LABEL_164;
  }
  if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    char v79 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v80 = *(_DWORD *)(a3 + 368);
      *(_DWORD *)buf = 136446978;
      uint64_t v107 = "on_begin_headers_callback";
      dispatch_time_t v108 = 2082;
      uint64_t v109 = a3 + 390;
      id v110 = 2080;
      os_log_type_t v111 = (uint64_t)" ";
      int v112 = 1024;
      uint64_t v113 = v80;
      _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }
  }
  int v5 = *(unsigned __int8 *)(a2 + 12);
  if (v5 == 5)
  {
    if (*(__int16 *)(a3 + 388) < 0) {
      return 4294966775;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v9 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return 4294966775;
    }
    uint64_t v10 = *(_DWORD *)(a3 + 368);
    *(_DWORD *)buf = 136446978;
    uint64_t v107 = "on_begin_headers_callback";
    dispatch_time_t v108 = 2082;
    uint64_t v109 = a3 + 390;
    id v110 = 2080;
    os_log_type_t v111 = (uint64_t)" ";
    int v112 = 1024;
    uint64_t v113 = v10;
    uint64_t v11 = "%{public}s %{public}s%s<i%u> push promise frames currently not supported";
    os_log_type_t v12 = v9;
    int v13 = 38;
LABEL_16:
    _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    return 4294966775;
  }
  if (v5 != 1)
  {
    if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v14 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        uint64_t v107 = "on_begin_headers_callback";
        dispatch_time_t v108 = 2082;
        uint64_t v109 = a3 + 390;
        id v110 = 2080;
        os_log_type_t v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v15;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> returning callback failure with unknown error", buf, 0x26u);
      }
    }
    return 4294966394;
  }
  if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    char v83 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      __int16 v84 = *(_DWORD *)(a3 + 368);
      uint64_t v85 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)buf = 136447234;
      uint64_t v107 = "on_begin_headers_callback";
      dispatch_time_t v108 = 2082;
      uint64_t v109 = a3 + 390;
      id v110 = 2080;
      os_log_type_t v111 = (uint64_t)" ";
      int v112 = 1024;
      uint64_t v113 = v84;
      nw_endpoint_t v114 = 1024;
      LODWORD(v115[0]) = v85;
      _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> got header frame on stream %d", buf, 0x2Cu);
    }
  }
  uint64_t stream_node_from_id = nw_http2_get_stream_node_from_id(a3, *(_DWORD *)(a2 + 8));
  if (stream_node_from_id)
  {
    int v7 = stream_node_from_id;
    nw_http_connection_metadata_increment_inbound_message_count(*(void **)(a3 + 256));
    if (*(void *)(v7 + 16)) {
      return 0;
    }
    if (*(__int16 *)(a3 + 388) < 0) {
      return 4294966775;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v31 = *(_DWORD *)(a3 + 368);
    uint64_t v32 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136447234;
    uint64_t v107 = "on_begin_headers_callback";
    dispatch_time_t v108 = 2082;
    uint64_t v109 = a3 + 390;
    id v110 = 2080;
    os_log_type_t v111 = (uint64_t)" ";
    int v112 = 1024;
    uint64_t v113 = v31;
    nw_endpoint_t v114 = 1024;
    LODWORD(v115[0]) = v32;
    int v33 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    nw_endpoint_t v104 = 0;
    if (__nwlog_fault(v33, &type, &v104))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v34 = gconnectionLogObj;
        __int16 v35 = type;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        {
          os_log_type_t v36 = *(_DWORD *)(a3 + 368);
          int v37 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136447234;
          uint64_t v107 = "on_begin_headers_callback";
          dispatch_time_t v108 = 2082;
          uint64_t v109 = a3 + 390;
          id v110 = 2080;
          os_log_type_t v111 = (uint64_t)" ";
          int v112 = 1024;
          uint64_t v113 = v36;
          nw_endpoint_t v114 = 1024;
          LODWORD(v115[0]) = v37;
          uint64_t v38 = "%{public}s %{public}s%s<i%u> could not get stream (%d) from node";
LABEL_110:
          _os_log_impl(&dword_1830D4000, v34, v35, v38, buf, 0x2Cu);
        }
      }
      else if (v104)
      {
        BOOL v42 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v34 = gconnectionLogObj;
        __int16 v35 = type;
        int v43 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (!v42)
        {
          if (!v43) {
            goto LABEL_111;
          }
          BOOL v65 = *(_DWORD *)(a3 + 368);
          __int16 v66 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136447234;
          uint64_t v107 = "on_begin_headers_callback";
          dispatch_time_t v108 = 2082;
          uint64_t v109 = a3 + 390;
          id v110 = 2080;
          os_log_type_t v111 = (uint64_t)" ";
          int v112 = 1024;
          uint64_t v113 = v65;
          nw_endpoint_t v114 = 1024;
          LODWORD(v115[0]) = v66;
          uint64_t v38 = "%{public}s %{public}s%s<i%u> could not get stream (%d) from node, no backtrace";
          goto LABEL_110;
        }
        if (v43)
        {
          uint64_t v44 = *(_DWORD *)(a3 + 368);
          int v45 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136447490;
          uint64_t v107 = "on_begin_headers_callback";
          dispatch_time_t v108 = 2082;
          uint64_t v109 = a3 + 390;
          id v110 = 2080;
          os_log_type_t v111 = (uint64_t)" ";
          int v112 = 1024;
          uint64_t v113 = v44;
          nw_endpoint_t v114 = 1024;
          LODWORD(v115[0]) = v45;
          WORD2(v115[0]) = 2082;
          *(void *)((char *)v115 + 6) = v42;
          _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s %{public}s%s<i%u> could not get stream (%d) from node, dumping backtrace:%{public}s", buf, 0x36u);
        }
        free(v42);
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v34 = gconnectionLogObj;
        __int16 v35 = type;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        {
          BOOL v57 = *(_DWORD *)(a3 + 368);
          uint64_t v58 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136447234;
          uint64_t v107 = "on_begin_headers_callback";
          dispatch_time_t v108 = 2082;
          uint64_t v109 = a3 + 390;
          id v110 = 2080;
          os_log_type_t v111 = (uint64_t)" ";
          int v112 = 1024;
          uint64_t v113 = v57;
          nw_endpoint_t v114 = 1024;
          LODWORD(v115[0]) = v58;
          uint64_t v38 = "%{public}s %{public}s%s<i%u> could not get stream (%d) from node, backtrace limit exceeded";
          goto LABEL_110;
        }
      }
    }
LABEL_111:
    if (v33)
    {
      int v67 = (void *)v33;
LABEL_140:
      free(v67);
    }
    return 4294966775;
  }
  if (!*(void *)(a3 + 144))
  {
    if (*(__int16 *)(a3 + 388) < 0) {
      return 4294966775;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v39 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return 4294966775;
    }
    int v40 = *(_DWORD *)(a3 + 368);
    int v41 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136447234;
    uint64_t v107 = "on_begin_headers_callback";
    dispatch_time_t v108 = 2082;
    uint64_t v109 = a3 + 390;
    id v110 = 2080;
    os_log_type_t v111 = (uint64_t)" ";
    int v112 = 1024;
    uint64_t v113 = v40;
    nw_endpoint_t v114 = 1024;
    LODWORD(v115[0]) = v41;
    uint64_t v11 = "%{public}s %{public}s%s<i%u> http2 has no listen handler when new stream (%d) is being opened, closing";
    os_log_type_t v12 = v39;
    int v13 = 44;
    goto LABEL_16;
  }
  __int16 v16 = *(__int16 *)(a3 + 388);
  if (!*(void *)(a3 + 112))
  {
    if (v16 < 0) {
      return 4294966775;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v46 = *(_DWORD *)(a3 + 368);
    *(_DWORD *)buf = 136446978;
    uint64_t v107 = "on_begin_headers_callback";
    dispatch_time_t v108 = 2082;
    uint64_t v109 = a3 + 390;
    id v110 = 2080;
    os_log_type_t v111 = (uint64_t)" ";
    int v112 = 1024;
    uint64_t v113 = v46;
    uint32_t v18 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    nw_endpoint_t v104 = 0;
    if (!__nwlog_fault((const char *)v18, &type, &v104)) {
      goto LABEL_127;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v47 = gconnectionLogObj;
      __int16 v48 = type;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
      {
        BOOL v49 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        uint64_t v107 = "on_begin_headers_callback";
        dispatch_time_t v108 = 2082;
        uint64_t v109 = a3 + 390;
        id v110 = 2080;
        os_log_type_t v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v49;
        uint64_t v50 = "%{public}s %{public}s%s<i%u> http2 has no remote endpoint when new stream is being opened";
LABEL_126:
        _os_log_impl(&dword_1830D4000, v47, v48, v50, buf, 0x26u);
      }
    }
    else if (v104)
    {
      BOOL v59 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v47 = gconnectionLogObj;
      __int16 v48 = type;
      uint64_t v60 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (!v59)
      {
        if (!v60) {
          goto LABEL_127;
        }
        uint64_t v72 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        uint64_t v107 = "on_begin_headers_callback";
        dispatch_time_t v108 = 2082;
        uint64_t v109 = a3 + 390;
        id v110 = 2080;
        os_log_type_t v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v72;
        uint64_t v50 = "%{public}s %{public}s%s<i%u> http2 has no remote endpoint when new stream is being opened, no backtrace";
        goto LABEL_126;
      }
      if (v60)
      {
        os_log_type_t v61 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136447234;
        uint64_t v107 = "on_begin_headers_callback";
        dispatch_time_t v108 = 2082;
        uint64_t v109 = a3 + 390;
        id v110 = 2080;
        os_log_type_t v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v61;
        nw_endpoint_t v114 = 2082;
        v115[0] = v59;
        _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s %{public}s%s<i%u> http2 has no remote endpoint when new stream is being opened, dumping backtrace:%{public}s", buf, 0x30u);
      }
      free(v59);
    }
    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v47 = gconnectionLogObj;
      __int16 v48 = type;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
      {
        __int16 v71 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        uint64_t v107 = "on_begin_headers_callback";
        dispatch_time_t v108 = 2082;
        uint64_t v109 = a3 + 390;
        id v110 = 2080;
        os_log_type_t v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v71;
        uint64_t v50 = "%{public}s %{public}s%s<i%u> http2 has no remote endpoint when new stream is being opened, backtrace limit exceeded";
        goto LABEL_126;
      }
    }
LABEL_127:
    if (!v18) {
      return 4294966775;
    }
    goto LABEL_139;
  }
  __int16 v17 = *(_DWORD *)(a2 + 8);
  if ((v16 & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    unint64_t v91 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v92 = *(_DWORD *)(a3 + 368);
      *(_DWORD *)buf = 136446978;
      uint64_t v107 = "on_begin_headers_callback";
      dispatch_time_t v108 = 2082;
      uint64_t v109 = a3 + 390;
      id v110 = 2080;
      os_log_type_t v111 = (uint64_t)" ";
      int v112 = 1024;
      uint64_t v113 = v92;
      _os_log_impl(&dword_1830D4000, v91, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> detected new stream initiated from remote side of the connection, allocating new stream", buf, 0x26u);
    }
  }
  uint32_t v18 = (uint64_t)malloc_type_calloc(1uLL, 0x118uLL, 0xEAFB8F1AuLL);
  if (!v18)
  {
    uint64_t v89 = __nwlog_obj();
    os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    uint64_t v107 = "strict_calloc";
    dispatch_time_t v108 = 2048;
    uint64_t v109 = 1;
    id v110 = 2048;
    os_log_type_t v111 = 280;
    char v90 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v90);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v90);
  }
  *(void *)(v18 + 272) = 0;
  *(_OWORD *)(v18 + 240) = 0u;
  *(_OWORD *)(v18 + 256) = 0u;
  *(_OWORD *)(v18 + 208) = 0u;
  *(_OWORD *)(v18 + 224) = 0u;
  *(_OWORD *)(v18 + 176) = 0u;
  *(_OWORD *)(v18 + 192) = 0u;
  *(_OWORD *)(v18 + 144) = 0u;
  *(_OWORD *)(v18 + 160) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)uint32_t v18 = 0u;
  __int16 v19 = *(void **)(a3 + 104);
  if (!v19)
  {
    if (*(__int16 *)(a3 + 388) < 0)
    {
LABEL_138:
      std::destroy_at[abi:nn180100]<http2_stream,0>(v18);
LABEL_139:
      int v67 = (void *)v18;
      goto LABEL_140;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v51 = *(_DWORD *)(a3 + 368);
    *(_DWORD *)buf = 136446978;
    uint64_t v107 = "on_begin_headers_callback";
    dispatch_time_t v108 = 2082;
    uint64_t v109 = a3 + 390;
    id v110 = 2080;
    os_log_type_t v111 = (uint64_t)" ";
    int v112 = 1024;
    uint64_t v113 = v51;
    int v52 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    nw_endpoint_t v104 = 0;
    if (__nwlog_fault(v52, &type, &v104))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v53 = gconnectionLogObj;
        char v54 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_136;
        }
        os_log_type_t v55 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        uint64_t v107 = "on_begin_headers_callback";
        dispatch_time_t v108 = 2082;
        uint64_t v109 = a3 + 390;
        id v110 = 2080;
        os_log_type_t v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v55;
        uint32_t v56 = "%{public}s %{public}s%s<i%u> http2->parameters is NULL when opening responder stream";
        goto LABEL_135;
      }
      if (!v104)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v53 = gconnectionLogObj;
        char v54 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_136;
        }
        os_log_type_t v73 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        uint64_t v107 = "on_begin_headers_callback";
        dispatch_time_t v108 = 2082;
        uint64_t v109 = a3 + 390;
        id v110 = 2080;
        os_log_type_t v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v73;
        uint32_t v56 = "%{public}s %{public}s%s<i%u> http2->parameters is NULL when opening responder stream, backtrace limit exceeded";
        goto LABEL_135;
      }
      __int16 v68 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v53 = gconnectionLogObj;
      char v54 = type;
      __int16 v69 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (v68)
      {
        if (v69)
        {
          uint64_t v70 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)buf = 136447234;
          uint64_t v107 = "on_begin_headers_callback";
          dispatch_time_t v108 = 2082;
          uint64_t v109 = a3 + 390;
          id v110 = 2080;
          os_log_type_t v111 = (uint64_t)" ";
          int v112 = 1024;
          uint64_t v113 = v70;
          nw_endpoint_t v114 = 2082;
          v115[0] = v68;
          _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s %{public}s%s<i%u> http2->parameters is NULL when opening responder stream, dumping backtrace:%{public}s", buf, 0x30u);
        }
        free(v68);
        goto LABEL_136;
      }
      if (v69)
      {
        char v74 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        uint64_t v107 = "on_begin_headers_callback";
        dispatch_time_t v108 = 2082;
        uint64_t v109 = a3 + 390;
        id v110 = 2080;
        os_log_type_t v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v74;
        uint32_t v56 = "%{public}s %{public}s%s<i%u> http2->parameters is NULL when opening responder stream, no backtrace";
LABEL_135:
        _os_log_impl(&dword_1830D4000, v53, v54, v56, buf, 0x26u);
      }
    }
LABEL_136:
    if (v52) {
      free(v52);
    }
    goto LABEL_138;
  }
  int v20 = v19;
  uint64_t v21 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v20, 0, 0);

  nw_http2_stream_init(v18);
  uint64_t v22 = *(unsigned __int16 *)(v18 + 188);
  *(unsigned char *)(v18 + 88) = (*(_WORD *)(a3 + 388) & 0x80) != 0;
  *(_DWORD *)(v18 + 176) = v17;
  id v23 = v22 | (*(unsigned __int8 *)(v18 + 190) << 16) | 0x80;
  *(_WORD *)(v18 + 188) = v22 | 0x80;
  BOOL v24 = (16 * *(unsigned __int16 *)(a3 + 388)) & 0x80000 | v23 & 0xFFF7FFFF;
  *(_WORD *)(v18 + 188) = v23;
  *(unsigned char *)(v18 + 190) = BYTE2(v24);
  *(_DWORD *)(v18 + 180) = *(_DWORD *)(a3 + 368);
  if (v17 > *(_DWORD *)(a3 + 364) && (*(_WORD *)(a3 + 388) & 1) == 0) {
    *(_DWORD *)(a3 + 364) = v17;
  }
  if (!nw_http2_add_to_id_table(a3, v18, 0))
  {
    if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v62 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v64 = *(_DWORD *)(v18 + 176);
        __int16 v63 = *(_DWORD *)(v18 + 180);
        *(_DWORD *)buf = 136447234;
        uint64_t v107 = "on_begin_headers_callback";
        dispatch_time_t v108 = 2082;
        uint64_t v109 = v18 + 191;
        id v110 = 2080;
        os_log_type_t v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v63;
        nw_endpoint_t v114 = 1024;
        LODWORD(v115[0]) = v64;
        _os_log_impl(&dword_1830D4000, v62, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%d> failed to add new stream to the id based hash table", buf, 0x2Cu);
      }
    }
    std::destroy_at[abi:nn180100]<http2_stream,0>(v18);
    free((void *)v18);
    if (v21) {
      os_release((void *)v21);
    }
    return 4294966775;
  }
  nw_parameters_set_server_mode((void *)v21, 1);
  if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    __int16 v93 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      __int16 v95 = *(_DWORD *)(v18 + 176);
      uint64_t v94 = *(_DWORD *)(v18 + 180);
      *(_DWORD *)buf = 136447490;
      uint64_t v107 = "on_begin_headers_callback";
      dispatch_time_t v108 = 2082;
      uint64_t v109 = v18 + 191;
      id v110 = 2080;
      os_log_type_t v111 = (uint64_t)" ";
      int v112 = 1024;
      uint64_t v113 = v94;
      nw_endpoint_t v114 = 1024;
      LODWORD(v115[0]) = v95;
      WORD2(v115[0]) = 2048;
      *(void *)((char *)v115 + 6) = v21;
      _os_log_impl(&dword_1830D4000, v93, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> using parameters %p on new incoming stream", buf, 0x36u);
    }
  }
  xpc_object_t v25 = *(void ***)(a3 + 144);
  if (v25 && (BOOL v26 = *v25) != 0 && *v26)
  {
    if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v96 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v98 = *(_DWORD *)(v18 + 176);
        uint64_t v97 = *(_DWORD *)(v18 + 180);
        *(_DWORD *)buf = 136447490;
        uint64_t v107 = "on_begin_headers_callback";
        dispatch_time_t v108 = 2082;
        uint64_t v109 = v18 + 191;
        id v110 = 2080;
        os_log_type_t v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v97;
        nw_endpoint_t v114 = 1024;
        LODWORD(v115[0]) = v98;
        WORD2(v115[0]) = 1024;
        *(_DWORD *)((char *)v115 + 6) = v17;
        _os_log_impl(&dword_1830D4000, v96, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> calling listen handler for new stream %d", buf, 0x32u);
      }
    }
    *(_DWORD *)(a3 + 360) = v17;
    int v27 = (***(uint64_t (****)(void, void, BOOL))(a3 + 144))(*(void *)(a3 + 144), *(void *)(a3 + 112), v21);
    *(_DWORD *)(a3 + 360) = -1;
    if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      os_log_type_t v99 = v27;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v100 = gconnectionLogObj;
      nw_endpoint_t v101 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      int v27 = v99;
      if (v101)
      {
        os_log_type_t v103 = *(_DWORD *)(v18 + 176);
        unint64_t v102 = *(_DWORD *)(v18 + 180);
        *(_DWORD *)buf = 136447490;
        uint64_t v107 = "on_begin_headers_callback";
        dispatch_time_t v108 = 2082;
        uint64_t v109 = v18 + 191;
        id v110 = 2080;
        os_log_type_t v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v102;
        nw_endpoint_t v114 = 1024;
        LODWORD(v115[0]) = v103;
        WORD2(v115[0]) = 1024;
        *(_DWORD *)((char *)v115 + 6) = v17;
        _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called into listen handler for new stream %d", buf, 0x32u);
        int v27 = v99;
      }
    }
    if ((v27 & 1) == 0)
    {
      if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        char v28 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          char v30 = *(_DWORD *)(v18 + 176);
          os_log_type_t v29 = *(_DWORD *)(v18 + 180);
          *(_DWORD *)buf = 136447490;
          uint64_t v107 = "on_begin_headers_callback";
          dispatch_time_t v108 = 2082;
          uint64_t v109 = v18 + 191;
          id v110 = 2080;
          os_log_type_t v111 = (uint64_t)" ";
          int v112 = 1024;
          uint64_t v113 = v29;
          nw_endpoint_t v114 = 1024;
          LODWORD(v115[0]) = v30;
          WORD2(v115[0]) = 1024;
          *(_DWORD *)((char *)v115 + 6) = v17;
          _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%d> listen handler didn't accept the new flow for stream id %d", buf, 0x32u);
        }
      }
      nw_http2_stream_close(a3, v18);
    }
    if (!v21) {
      return 0;
    }
  }
  else
  {
    if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v86 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v88 = *(_DWORD *)(v18 + 176);
        int v87 = *(_DWORD *)(v18 + 180);
        *(_DWORD *)buf = 136447234;
        uint64_t v107 = "on_begin_headers_callback";
        dispatch_time_t v108 = 2082;
        uint64_t v109 = v18 + 191;
        id v110 = 2080;
        os_log_type_t v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v87;
        nw_endpoint_t v114 = 1024;
        LODWORD(v115[0]) = v88;
        _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%d> listen handler has no new_flow callback, ignoring incoming flow", buf, 0x2Cu);
      }
    }
    nw_http2_stream_close(a3, v18);
    if (!v21) {
      return 0;
    }
  }
  os_release((void *)v21);
  return 0;
}

void sub_183926848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_http2_transport_stream_init(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = a1;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = a1 + 16;
    *(_DWORD *)(a1 + 32) = -1;
    *(unsigned char *)(a1 + 36) &= 0xF0u;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v10 = "nw_http2_transport_stream_init";
  id v1 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v1, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v2 = __nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v10 = "nw_http2_transport_stream_init";
      uint64_t v4 = "%{public}s called with null stream";
      goto LABEL_17;
    }
    if (!v7)
    {
      char v2 = __nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v10 = "nw_http2_transport_stream_init";
      uint64_t v4 = "%{public}s called with null stream, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v2 = __nwlog_obj();
    os_log_type_t v3 = type;
    BOOL v6 = os_log_type_enabled(v2, type);
    if (backtrace_string)
    {
      if (v6)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v10 = "nw_http2_transport_stream_init";
        __int16 v11 = 2082;
        os_log_type_t v12 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v2, v3, "%{public}s called with null stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v6)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v10 = "nw_http2_transport_stream_init";
      uint64_t v4 = "%{public}s called with null stream, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v2, v3, v4, buf, 0xCu);
    }
  }
LABEL_18:
  if (v1) {
    free(v1);
  }
}

uint64_t nw_http2_transport_add_to_id_table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v44 = "nw_http2_transport_add_to_id_table";
    __int16 v19 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t v42 = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v19, &v42, &type)) {
      goto LABEL_40;
    }
    if (v42 == OS_LOG_TYPE_FAULT)
    {
      int v20 = __nwlog_obj();
      os_log_type_t v21 = v42;
      if (!os_log_type_enabled(v20, v42)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v44 = "nw_http2_transport_add_to_id_table";
      uint64_t v22 = "%{public}s called with null stream";
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v20 = __nwlog_obj();
      os_log_type_t v21 = v42;
      BOOL v38 = os_log_type_enabled(v20, v42);
      if (backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v44 = "nw_http2_transport_add_to_id_table";
          __int16 v45 = 2082;
          os_log_type_t v46 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_40;
      }
      if (!v38) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v44 = "nw_http2_transport_add_to_id_table";
      uint64_t v22 = "%{public}s called with null stream, no backtrace";
    }
    else
    {
      int v20 = __nwlog_obj();
      os_log_type_t v21 = v42;
      if (!os_log_type_enabled(v20, v42)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v44 = "nw_http2_transport_add_to_id_table";
      uint64_t v22 = "%{public}s called with null stream, backtrace limit exceeded";
    }
LABEL_38:
    char v30 = v20;
    os_log_type_t v31 = v21;
LABEL_39:
    _os_log_impl(&dword_1830D4000, v30, v31, v22, buf, 0xCu);
    goto LABEL_40;
  }
  if (gLogDatapath)
  {
    int v33 = __nwlog_obj();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446978;
      uint64_t v44 = "nw_http2_transport_add_to_id_table";
      __int16 v45 = 2082;
      os_log_type_t v46 = (char *)(a1 + 205);
      __int16 v47 = 1024;
      *(_DWORD *)__int16 v48 = v34;
      *(_WORD *)&v48[4] = 2048;
      *(void *)&void v48[6] = a2;
      _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for stream %d (%p)", buf, 0x26u);
    }
  }
  os_log_type_t v42 = OS_LOG_TYPE_DEFAULT;
  uint64_t internal = *(void *)(a1 + 120);
  if (!internal)
  {
    uint64_t internal = nw_hash_table_create_internal(0x11u, 8, (const void *(*)(const void *, unsigned int *))stream_get_key, (unsigned int (*)(const void *, unsigned int))stream_key_hash, (BOOL (*)(const void *, const void *, unsigned int))stream_matches_key, 0);
    if (internal)
    {
      *(_DWORD *)(internal + 48) &= ~2u;
      *(void *)(a1 + 120) = internal;
      goto LABEL_6;
    }
    *(void *)(a1 + 120) = 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint64_t v44 = "nw_http2_transport_add_to_id_table";
    __int16 v19 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (__nwlog_fault(v19, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v20 = gLogObj;
        os_log_type_t v21 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v44 = "nw_http2_transport_add_to_id_table";
        uint64_t v22 = "%{public}s nw_hash_table_create_no_lock failed";
        goto LABEL_38;
      }
      if (!v40)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v20 = gLogObj;
        os_log_type_t v21 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v44 = "nw_http2_transport_add_to_id_table";
        uint64_t v22 = "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded";
        goto LABEL_38;
      }
      id v23 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v24 = gLogObj;
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v23)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v44 = "nw_http2_transport_add_to_id_table";
          __int16 v45 = 2082;
          os_log_type_t v46 = v23;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v23);
      }
      else if (v26)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v44 = "nw_http2_transport_add_to_id_table";
        uint64_t v22 = "%{public}s nw_hash_table_create_no_lock failed, no backtrace";
        char v30 = v24;
        os_log_type_t v31 = v25;
        goto LABEL_39;
      }
    }
LABEL_40:
    if (v19)
    {
      os_log_type_t v29 = (char *)v19;
      goto LABEL_42;
    }
    return 0;
  }
LABEL_6:
  BOOL v7 = nw_hash_table_add_object(internal, a2, (char *)&v42);
  if (v42 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = (char *)(a1 + 205);
    int v10 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)buf = 136446722;
    uint64_t v44 = "nw_http2_transport_add_to_id_table";
    __int16 v45 = 2082;
    os_log_type_t v46 = (char *)(a1 + 205);
    __int16 v47 = 1024;
    *(_DWORD *)__int16 v48 = v10;
    __int16 v11 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v11, &type, &v40)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = gLogObj;
      os_log_type_t v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_34;
      }
      int v14 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446722;
      uint64_t v44 = "nw_http2_transport_add_to_id_table";
      __int16 v45 = 2082;
      os_log_type_t v46 = v9;
      __int16 v47 = 1024;
      *(_DWORD *)__int16 v48 = v14;
      uint64_t v15 = "%{public}s %{public}s http2_transport already has stream id registered for %d";
    }
    else if (v40)
    {
      __int16 v16 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = gLogObj;
      os_log_type_t v13 = type;
      BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v16)
      {
        if (v17)
        {
          int v18 = *(_DWORD *)(a2 + 32);
          *(_DWORD *)buf = 136446978;
          uint64_t v44 = "nw_http2_transport_add_to_id_table";
          __int16 v45 = 2082;
          os_log_type_t v46 = v9;
          __int16 v47 = 1024;
          *(_DWORD *)__int16 v48 = v18;
          *(_WORD *)&v48[4] = 2082;
          *(void *)&void v48[6] = v16;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s %{public}s http2_transport already has stream id registered for %d, dumping backtrace:%{public}s", buf, 0x26u);
        }
        free(v16);
LABEL_34:
        if (v11)
        {
          os_log_type_t v29 = (char *)v11;
LABEL_42:
          free(v29);
          return 0;
        }
        return 0;
      }
      if (!v17) {
        goto LABEL_34;
      }
      int v28 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446722;
      uint64_t v44 = "nw_http2_transport_add_to_id_table";
      __int16 v45 = 2082;
      os_log_type_t v46 = v9;
      __int16 v47 = 1024;
      *(_DWORD *)__int16 v48 = v28;
      uint64_t v15 = "%{public}s %{public}s http2_transport already has stream id registered for %d, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = gLogObj;
      os_log_type_t v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_34;
      }
      int v27 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446722;
      uint64_t v44 = "nw_http2_transport_add_to_id_table";
      __int16 v45 = 2082;
      os_log_type_t v46 = v9;
      __int16 v47 = 1024;
      *(_DWORD *)__int16 v48 = v27;
      uint64_t v15 = "%{public}s %{public}s http2_transport already has stream id registered for %d, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v12, v13, v15, buf, 0x1Cu);
    goto LABEL_34;
  }
  uint64_t v8 = v7;
  if (gLogDatapath)
  {
    __int16 v35 = __nwlog_obj();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      int v36 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446722;
      uint64_t v44 = "nw_http2_transport_add_to_id_table";
      __int16 v45 = 2082;
      os_log_type_t v46 = (char *)(a1 + 205);
      __int16 v47 = 1024;
      *(_DWORD *)__int16 v48 = v36;
      _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s added stream %d to stream id hash table", buf, 0x1Cu);
    }
  }
  if (a3)
  {
    if (gLogDatapath)
    {
      uint64_t v39 = __nwlog_obj();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447234;
        uint64_t v44 = "nw_http2_transport_add_to_id_table";
        __int16 v45 = 2082;
        os_log_type_t v46 = (char *)(a1 + 205);
        __int16 v47 = 2048;
        *(void *)__int16 v48 = a2;
        *(_WORD *)&v48[8] = 2048;
        *(void *)&v48[10] = v8;
        __int16 v49 = 2048;
        uint64_t v50 = a3;
        _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s connecting stream %p node %p with protocol %p", buf, 0x34u);
      }
    }
    *(void *)nw_hash_node_get_extra(v8) = a3;
  }
  return v8;
}

uint64_t ___ZL25on_begin_headers_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke(uint64_t a1, int a2, void *object)
{
  if (object) {
    uint64_t v4 = os_retain(object);
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
  return 0;
}

uint64_t ___ZL25on_begin_headers_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke_2(uint64_t a1, int a2, void *object)
{
  if (object) {
    uint64_t v4 = os_retain(object);
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
  return 0;
}

uint64_t ___ZL25on_begin_headers_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke_3(uint64_t a1, int a2, void *object)
{
  if (object) {
    uint64_t v4 = os_retain(object);
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
  return 0;
}

BOOL nw_http2_transport_stream_connect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v64 = "nw_http2_transport_stream_connect";
    int v37 = (char *)_os_log_send_and_compose_impl();
    v62[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v37, v62, &type))
    {
      if (v62[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v38 = __nwlog_obj();
        os_log_type_t v39 = v62[0];
        if (os_log_type_enabled(v38, v62[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v64 = "nw_http2_transport_stream_connect";
          char v40 = "%{public}s called with null http2_transport";
LABEL_111:
          _os_log_impl(&dword_1830D4000, v38, v39, v40, buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v38 = __nwlog_obj();
        os_log_type_t v39 = v62[0];
        BOOL v52 = os_log_type_enabled(v38, v62[0]);
        if (backtrace_string)
        {
          if (v52)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v64 = "nw_http2_transport_stream_connect";
            __int16 v65 = 2082;
            uint64_t v66 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_112;
        }
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v64 = "nw_http2_transport_stream_connect";
          char v40 = "%{public}s called with null http2_transport, no backtrace";
          goto LABEL_111;
        }
      }
      else
      {
        BOOL v38 = __nwlog_obj();
        os_log_type_t v39 = v62[0];
        if (os_log_type_enabled(v38, v62[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v64 = "nw_http2_transport_stream_connect";
          char v40 = "%{public}s called with null http2_transport, backtrace limit exceeded";
          goto LABEL_111;
        }
      }
    }
LABEL_112:
    if (v37) {
      free(v37);
    }
    return 0;
  }
  if (gLogDatapath)
  {
    int v41 = __nwlog_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      int v42 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446978;
      os_log_type_t v64 = "nw_http2_transport_stream_connect";
      __int16 v65 = 2082;
      uint64_t v66 = a1 + 205;
      __int16 v67 = 1024;
      *(_DWORD *)__int16 v68 = v42;
      *(_WORD *)&v68[4] = 2048;
      *(void *)&v68[6] = a2;
      _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for stream %d (%p)", buf, 0x26u);
    }
  }
  if (*(unsigned char *)(a2 + 36))
  {
    if (gLogDatapath)
    {
      __int16 v49 = __nwlog_obj();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        int v50 = *(_DWORD *)(a2 + 32);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v64 = "nw_http2_transport_stream_connect";
        __int16 v65 = 2082;
        uint64_t v66 = a1 + 205;
        __int16 v67 = 1024;
        *(_DWORD *)__int16 v68 = v50;
        _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s stream %d is already connected", buf, 0x1Cu);
      }
    }
    uint64_t v12 = *(void *)(a3 + 24);
    if (v12)
    {
      os_log_type_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 40);
      if (v13)
      {
        v13(a3, a1);
        return 1;
      }
    }
    __nwlog_obj();
    int v43 = *(const char **)(a3 + 16);
    if (!v43) {
      int v43 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v64 = "nw_http2_transport_stream_connect";
    __int16 v65 = 2082;
    uint64_t v66 = (uint64_t)v43;
    uint64_t v44 = (char *)_os_log_send_and_compose_impl();
    v62[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v44, v62, &type))
    {
      if (v62[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v45 = __nwlog_obj();
        os_log_type_t v46 = v62[0];
        if (!os_log_type_enabled(v45, v62[0])) {
          goto LABEL_120;
        }
        __int16 v47 = *(const char **)(a3 + 16);
        if (!v47) {
          __int16 v47 = "invalid";
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v64 = "nw_http2_transport_stream_connect";
        __int16 v65 = 2082;
        uint64_t v66 = (uint64_t)v47;
        __int16 v48 = "%{public}s protocol %{public}s has invalid connected callback";
        goto LABEL_119;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __int16 v45 = __nwlog_obj();
        os_log_type_t v46 = v62[0];
        if (!os_log_type_enabled(v45, v62[0])) {
          goto LABEL_120;
        }
        uint64_t v58 = *(const char **)(a3 + 16);
        if (!v58) {
          uint64_t v58 = "invalid";
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v64 = "nw_http2_transport_stream_connect";
        __int16 v65 = 2082;
        uint64_t v66 = (uint64_t)v58;
        __int16 v48 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_119;
      }
      int v53 = (char *)__nw_create_backtrace_string();
      __int16 v45 = __nwlog_obj();
      os_log_type_t v46 = v62[0];
      BOOL v54 = os_log_type_enabled(v45, v62[0]);
      if (v53)
      {
        if (v54)
        {
          os_log_type_t v55 = *(const char **)(a3 + 16);
          if (!v55) {
            os_log_type_t v55 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v64 = "nw_http2_transport_stream_connect";
          __int16 v65 = 2082;
          uint64_t v66 = (uint64_t)v55;
          __int16 v67 = 2082;
          *(void *)__int16 v68 = v53;
          _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v53);
        goto LABEL_120;
      }
      if (v54)
      {
        BOOL v59 = *(const char **)(a3 + 16);
        if (!v59) {
          BOOL v59 = "invalid";
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v64 = "nw_http2_transport_stream_connect";
        __int16 v65 = 2082;
        uint64_t v66 = (uint64_t)v59;
        __int16 v48 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_119:
        _os_log_impl(&dword_1830D4000, v45, v46, v48, buf, 0x16u);
      }
    }
LABEL_120:
    if (v44) {
      free(v44);
    }
    return 1;
  }
  *(void *)BOOL v62 = a2;
  int v6 = nghttp2_submit_headers();
  if (v6 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v14 = nghttp2_strerror();
    *(_DWORD *)buf = 136446466;
    os_log_type_t v64 = "nw_http2_transport_send_headers";
    __int16 v65 = 2082;
    uint64_t v66 = v14;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (!__nwlog_fault(v15, &type, &v60)) {
      goto LABEL_65;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v16 = gLogObj;
      os_log_type_t v17 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_65;
      }
      uint64_t v18 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      os_log_type_t v64 = "nw_http2_transport_send_headers";
      __int16 v65 = 2082;
      uint64_t v66 = v18;
      __int16 v19 = "%{public}s nghttp2_submit_headers: %{public}s failed";
    }
    else if (v60)
    {
      int v20 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v16 = gLogObj;
      os_log_type_t v17 = type;
      BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v20)
      {
        if (v21)
        {
          uint64_t v22 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          os_log_type_t v64 = "nw_http2_transport_send_headers";
          __int16 v65 = 2082;
          uint64_t v66 = v22;
          __int16 v67 = 2082;
          *(void *)__int16 v68 = v20;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s nghttp2_submit_headers: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v20);
        goto LABEL_65;
      }
      if (!v21) {
        goto LABEL_65;
      }
      uint64_t v31 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      os_log_type_t v64 = "nw_http2_transport_send_headers";
      __int16 v65 = 2082;
      uint64_t v66 = v31;
      __int16 v19 = "%{public}s nghttp2_submit_headers: %{public}s failed, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v16 = gLogObj;
      os_log_type_t v17 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_65;
      }
      uint64_t v28 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      os_log_type_t v64 = "nw_http2_transport_send_headers";
      __int16 v65 = 2082;
      uint64_t v66 = v28;
      __int16 v19 = "%{public}s nghttp2_submit_headers: %{public}s failed, backtrace limit exceeded";
    }
    uint64_t v32 = v16;
    os_log_type_t v33 = v17;
LABEL_64:
    _os_log_impl(&dword_1830D4000, v32, v33, v19, buf, 0x16u);
    goto LABEL_65;
  }
  uint64_t v7 = *(void *)v62;
  int v8 = *(_DWORD *)(*(void *)v62 + 32);
  if (v8 == -1)
  {
    if ((*(unsigned char *)(*(void *)v62 + 36) & 8) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      os_log_type_t v64 = "nw_http2_transport_send_headers";
      __int16 v65 = 2082;
      uint64_t v66 = a1 + 205;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v60 = 0;
      if (!__nwlog_fault(v15, &type, &v60)) {
        goto LABEL_65;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v23 = gLogObj;
        os_log_type_t v24 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_65;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v64 = "nw_http2_transport_send_headers";
        __int16 v65 = 2082;
        uint64_t v66 = a1 + 205;
        __int16 v19 = "%{public}s %{public}s Responder stream cannot have id of -1 after opening";
        goto LABEL_63;
      }
      if (!v60)
      {
        id v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_65;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v64 = "nw_http2_transport_send_headers";
        __int16 v65 = 2082;
        uint64_t v66 = a1 + 205;
        __int16 v19 = "%{public}s %{public}s Responder stream cannot have id of -1 after opening, backtrace limit exceeded";
        goto LABEL_63;
      }
      os_log_type_t v25 = (char *)__nw_create_backtrace_string();
      id v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v29 = os_log_type_enabled(v23, type);
      if (!v25)
      {
        if (!v29) {
          goto LABEL_65;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v64 = "nw_http2_transport_send_headers";
        __int16 v65 = 2082;
        uint64_t v66 = a1 + 205;
        __int16 v19 = "%{public}s %{public}s Responder stream cannot have id of -1 after opening, no backtrace";
        goto LABEL_63;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v64 = "nw_http2_transport_send_headers";
        __int16 v65 = 2082;
        uint64_t v66 = a1 + 205;
        __int16 v67 = 2082;
        *(void *)__int16 v68 = v25;
        int v27 = "%{public}s %{public}s Responder stream cannot have id of -1 after opening, dumping backtrace:%{public}s";
        goto LABEL_46;
      }
LABEL_47:
      free(v25);
      if (!v15) {
        goto LABEL_67;
      }
      goto LABEL_66;
    }
    *(_DWORD *)(*(void *)v62 + 32) = v6;
    if (!nw_http2_transport_add_to_id_table(a1, v7, a3))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v30 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v64 = "nw_http2_transport_send_headers";
        __int16 v65 = 2082;
        uint64_t v66 = a1 + 205;
        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Failed to add new stream to the id based hash table", buf, 0x16u);
      }
      *(_DWORD *)(*(void *)v62 + 32) = -1;
      goto LABEL_67;
    }
    int v8 = *(_DWORD *)(*(void *)v62 + 32);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v9 = gLogObj;
  if (v8 > 0)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v10 = "server";
      int v11 = *(_DWORD *)(*(void *)v62 + 32);
      if ((*(unsigned char *)(a1 + 204) & 0x10) == 0) {
        int v10 = "client";
      }
      *(_DWORD *)buf = 136446978;
      os_log_type_t v64 = "nw_http2_transport_send_headers";
      __int16 v65 = 2082;
      uint64_t v66 = a1 + 205;
      __int16 v67 = 2082;
      *(void *)__int16 v68 = v10;
      *(_WORD *)&v68[8] = 1024;
      *(_DWORD *)&v68[10] = v11;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s %{public}s submitted headers for stream %d", buf, 0x26u);
    }
    nw_http2_transport_session_send(a1);
    goto LABEL_67;
  }
  *(_DWORD *)buf = 136446466;
  os_log_type_t v64 = "nw_http2_transport_send_headers";
  __int16 v65 = 2082;
  uint64_t v66 = a1 + 205;
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v60 = 0;
  if (__nwlog_fault(v15, &type, &v60))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v23 = gLogObj;
      os_log_type_t v24 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v64 = "nw_http2_transport_send_headers";
      __int16 v65 = 2082;
      uint64_t v66 = a1 + 205;
      __int16 v19 = "%{public}s %{public}s Stream has invalid id";
LABEL_63:
      uint64_t v32 = v23;
      os_log_type_t v33 = v24;
      goto LABEL_64;
    }
    if (!v60)
    {
      id v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v64 = "nw_http2_transport_send_headers";
      __int16 v65 = 2082;
      uint64_t v66 = a1 + 205;
      __int16 v19 = "%{public}s %{public}s Stream has invalid id, backtrace limit exceeded";
      goto LABEL_63;
    }
    os_log_type_t v25 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = gLogObj;
    os_log_type_t v24 = type;
    BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v25)
    {
      if (!v26) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v64 = "nw_http2_transport_send_headers";
      __int16 v65 = 2082;
      uint64_t v66 = a1 + 205;
      __int16 v19 = "%{public}s %{public}s Stream has invalid id, no backtrace";
      goto LABEL_63;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v64 = "nw_http2_transport_send_headers";
      __int16 v65 = 2082;
      uint64_t v66 = a1 + 205;
      __int16 v67 = 2082;
      *(void *)__int16 v68 = v25;
      int v27 = "%{public}s %{public}s Stream has invalid id, dumping backtrace:%{public}s";
LABEL_46:
      _os_log_impl(&dword_1830D4000, v23, v24, v27, buf, 0x20u);
      goto LABEL_47;
    }
    goto LABEL_47;
  }
LABEL_65:
  if (v15) {
LABEL_66:
  }
    free(v15);
LABEL_67:
  if ((*(_DWORD *)(a2 + 32) & 0x80000000) == 0)
  {
    *(unsigned char *)(a2 + 36) &= ~2u;
    if (gLogDatapath)
    {
      uint32_t v56 = __nwlog_obj();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        int v57 = *(_DWORD *)(a2 + 32);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v64 = "nw_http2_transport_stream_connect";
        __int16 v65 = 2082;
        uint64_t v66 = a1 + 205;
        __int16 v67 = 1024;
        *(_DWORD *)__int16 v68 = v57;
        _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s connect complete for stream %d", buf, 0x1Cu);
      }
    }
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v35 = gLogObj;
  BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v36 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)buf = 136446978;
    os_log_type_t v64 = "nw_http2_transport_stream_connect";
    __int16 v65 = 2082;
    uint64_t v66 = a1 + 205;
    __int16 v67 = 2048;
    *(void *)__int16 v68 = a2;
    *(_WORD *)&v68[8] = 1024;
    *(_DWORD *)&v68[10] = v36;
    _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_ERROR, "%{public}s %{public}s failed to open stream %p (id still %d)", buf, 0x26u);
    return 0;
  }
  return result;
}

uint64_t stream_get_key(const void *a1, unsigned int *a2)
{
  *a2 = 4;
  return (uint64_t)a1 + 32;
}

uint64_t on_header_callback(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v22 = __nwlog_obj();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v35 = "on_header_callback";
      __int16 v36 = 2082;
      int v37 = a3;
      __int16 v38 = 2082;
      *(void *)os_log_type_t v39 = a5;
      _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, "%{public}s called name %{public}s value %{public}s", buf, 0x20u);
    }
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v35 = "on_header_callback";
    id v23 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v23, &type, &v32)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v35 = "on_header_callback";
      BOOL v26 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v28 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v35 = "on_header_callback";
          __int16 v36 = 2082;
          int v37 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_35;
      }
      if (!v28)
      {
LABEL_35:
        if (v23) {
          free(v23);
        }
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v35 = "on_header_callback";
      BOOL v26 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v35 = "on_header_callback";
      BOOL v26 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v24, v25, v26, buf, 0xCu);
    goto LABEL_35;
  }
  int v12 = *(unsigned __int8 *)(a2 + 12);
  if (v12 == 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v15 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 4294966775;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v35 = "on_header_callback";
    __int16 v36 = 2082;
    int v37 = (char *)(a8 + 205);
    __int16 v16 = "%{public}s %{public}s push promise frames currently not supported";
    os_log_type_t v17 = v15;
    uint32_t v18 = 22;
LABEL_16:
    _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    return 4294966775;
  }
  if (v12 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v19 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v35 = "on_header_callback";
      __int16 v36 = 2082;
      int v37 = (char *)(a8 + 205);
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s returning callback failure with unknown error", buf, 0x16u);
    }
    return 4294966394;
  }
  if (*(_DWORD *)(a2 + 56) != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v20 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 4294966775;
    }
    int v21 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136446722;
    __int16 v35 = "on_header_callback";
    __int16 v36 = 2082;
    int v37 = (char *)(a8 + 205);
    __int16 v38 = 1024;
    *(_DWORD *)os_log_type_t v39 = v21;
    __int16 v16 = "%{public}s %{public}s ERROR: Got headers for stream %d, a stream that doesn't exist.";
    os_log_type_t v17 = v20;
    uint32_t v18 = 28;
    goto LABEL_16;
  }
  uint64_t stream_from_id = nw_http2_transport_get_stream_from_id(a8, *(_DWORD *)(a2 + 8), 0);
  if (!stream_from_id) {
    return 4294966775;
  }
  if (!gLogDatapath) {
    return 0;
  }
  uint64_t v29 = stream_from_id;
  char v30 = __nwlog_obj();
  uint64_t result = os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    int v31 = *(_DWORD *)(v29 + 32);
    *(_DWORD *)buf = 136447234;
    __int16 v35 = "on_header_callback";
    __int16 v36 = 2082;
    int v37 = (char *)(a8 + 205);
    __int16 v38 = 1024;
    *(_DWORD *)os_log_type_t v39 = v31;
    *(_WORD *)&void v39[4] = 2082;
    *(void *)&v39[6] = a3;
    __int16 v40 = 2082;
    uint64_t v41 = a5;
    _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s received header response on stream %d: name: %{public}s value: %{public}s", buf, 0x30u);
    return 0;
  }
  return result;
}

uint64_t before_frame_send_callback(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    os_log_type_t v24 = __nwlog_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      int v25 = *((_DWORD *)a2 + 2);
      uint64_t v26 = *a2;
      *(_DWORD *)buf = 136446722;
      int v34 = "before_frame_send_callback";
      __int16 v35 = 1024;
      *(_DWORD *)__int16 v36 = v25;
      *(_WORD *)&v36[4] = 2048;
      *(void *)&v36[6] = v26;
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s called for frame on stream %d, length (no header) %zu", buf, 0x1Cu);
    }
  }
  int v5 = *((_DWORD *)a2 + 2);
  if (v5)
  {
    if (*((unsigned char *)a2 + 12) != 1 || *((_DWORD *)a2 + 14) > 1u) {
      return 0;
    }
    if (a3)
    {
      if (*(void *)(a3 + 120))
      {
        *(void *)os_log_type_t type = 0;
        uint64_t stream_from_id = nw_http2_transport_get_stream_from_id(a3, v5, type);
        if (stream_from_id)
        {
          uint64_t v7 = stream_from_id;
          if (*(unsigned char *)(stream_from_id + 36)) {
            return 0;
          }
          if (*(void *)type)
          {
            nw_http2_transport_stream_connected(a3, stream_from_id, *(uint64_t *)type);
            return 0;
          }
          uint64_t v20 = __nwlog_obj();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            int v34 = "before_frame_send_callback";
            __int16 v35 = 2082;
            *(void *)__int16 v36 = a3 + 205;
            *(_WORD *)&v36[8] = 2048;
            *(void *)&v36[10] = v7;
            _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}s stream (%p) did not have protocol extra", buf, 0x20u);
          }
        }
        return 4294966775;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = a3 + 205;
      *(_DWORD *)buf = 136446466;
      int v34 = "before_frame_send_callback";
      __int16 v35 = 2082;
      *(void *)__int16 v36 = a3 + 205;
      int v10 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      char v32 = 0;
      if (!__nwlog_fault(v10, type, &v32)) {
        goto LABEL_33;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v11 = gLogObj;
        os_log_type_t v12 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          int v34 = "before_frame_send_callback";
          __int16 v35 = 2082;
          *(void *)__int16 v36 = v9;
          os_log_type_t v13 = "%{public}s %{public}s id based hash table has not yet been created, failing connection";
LABEL_31:
          int v21 = v11;
          os_log_type_t v22 = v12;
          uint32_t v23 = 22;
LABEL_32:
          _os_log_impl(&dword_1830D4000, v21, v22, v13, buf, v23);
          goto LABEL_33;
        }
        goto LABEL_33;
      }
      if (!v32)
      {
        int v11 = __nwlog_obj();
        os_log_type_t v12 = type[0];
        if (os_log_type_enabled(v11, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          int v34 = "before_frame_send_callback";
          __int16 v35 = 2082;
          *(void *)__int16 v36 = v9;
          os_log_type_t v13 = "%{public}s %{public}s id based hash table has not yet been created, failing connection, backtrace limit exceeded";
          goto LABEL_31;
        }
LABEL_33:
        if (v10) {
          free(v10);
        }
        return 4294966394;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      BOOL v15 = os_log_type_enabled(v11, type[0]);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          int v34 = "before_frame_send_callback";
          __int16 v35 = 2082;
          *(void *)__int16 v36 = v9;
          os_log_type_t v13 = "%{public}s %{public}s id based hash table has not yet been created, failing connection, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_33;
      }
      if (!v15)
      {
LABEL_23:
        free(backtrace_string);
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446722;
      int v34 = "before_frame_send_callback";
      __int16 v35 = 2082;
      *(void *)__int16 v36 = v9;
      *(_WORD *)&v36[8] = 2082;
      *(void *)&v36[10] = backtrace_string;
      __int16 v16 = "%{public}s %{public}s id based hash table has not yet been created, failing connection, dumping backtrace:%{public}s";
      os_log_type_t v17 = v11;
      os_log_type_t v18 = v12;
      uint32_t v19 = 32;
LABEL_22:
      _os_log_impl(&dword_1830D4000, v17, v18, v16, buf, v19);
      goto LABEL_23;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v34 = "before_frame_send_callback";
    int v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v10, type, &v32)) {
      goto LABEL_33;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (!os_log_type_enabled(v28, type[0])) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      int v34 = "before_frame_send_callback";
      os_log_type_t v13 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      BOOL v30 = os_log_type_enabled(v28, type[0]);
      if (backtrace_string)
      {
        if (!v30) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446466;
        int v34 = "before_frame_send_callback";
        __int16 v35 = 2082;
        *(void *)__int16 v36 = backtrace_string;
        __int16 v16 = "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s";
        os_log_type_t v17 = v28;
        os_log_type_t v18 = v29;
        uint32_t v19 = 22;
        goto LABEL_22;
      }
      if (!v30) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      int v34 = "before_frame_send_callback";
      os_log_type_t v13 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (!os_log_type_enabled(v28, type[0])) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      int v34 = "before_frame_send_callback";
      os_log_type_t v13 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    int v21 = v28;
    os_log_type_t v22 = v29;
    uint32_t v23 = 12;
    goto LABEL_32;
  }
  if (!gLogDatapath) {
    return 0;
  }
  int v27 = __nwlog_obj();
  uint64_t result = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    *(_DWORD *)buf = 136446210;
    int v34 = "before_frame_send_callback";
    _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s ignoring frame on stream 0", buf, 0xCu);
    return 0;
  }
  return result;
}

{
  int v5;
  unsigned int v6;
  uint64_t stream_from_id;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  int v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  const char *v18;
  int v19;
  int v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  int v25;
  const char *v26;
  char *v27;
  BOOL v28;
  int v29;
  char *backtrace_string;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  NSObject *v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  NSObject *v44;
  int v45;
  uint64_t v46;
  NSObject *v47;
  const char *v48;
  NSObject *v49;
  os_log_type_t v50;
  const char *v51;
  char *v52;
  BOOL v53;
  NSObject *v54;
  int v55;
  int v56;
  NSObject *v57;
  int v58;
  int v59;
  char v60;
  os_log_type_t type[8];
  os_log_type_t v62;
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  unsigned char v66[18];
  __int16 v67;
  int v68;
  __int16 v69;
  void v70[3];

  v70[2] = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v44 = __nwlog_obj();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      __int16 v45 = *((_DWORD *)a2 + 2);
      os_log_type_t v46 = *a2;
      *(_DWORD *)buf = 136446722;
      os_log_type_t v64 = "before_frame_send_callback";
      __int16 v65 = 1024;
      *(_DWORD *)uint64_t v66 = v45;
      *(_WORD *)&v66[4] = 2048;
      *(void *)&v66[6] = v46;
      _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_DEBUG, "%{public}s called for frame on stream %d, length (no header) %zu", buf, 0x1Cu);
    }
  }
  int v5 = *((_DWORD *)a2 + 2);
  if (v5)
  {
    if (*((unsigned char *)a2 + 12) != 1) {
      return 0;
    }
    int v6 = *((_DWORD *)a2 + 14);
    if (v6 > 3 || v6 == 2) {
      return 0;
    }
    if (a3)
    {
      if (*(void *)(a3 + 160))
      {
        *(void *)os_log_type_t type = 0;
        uint64_t stream_from_id = nw_http2_get_stream_from_id(a3, v5, type);
        if (stream_from_id)
        {
          uint64_t v9 = stream_from_id;
          if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) == 0
            && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            BOOL v54 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              uint32_t v56 = *(_DWORD *)(v9 + 176);
              os_log_type_t v55 = *(_DWORD *)(v9 + 180);
              *(_DWORD *)buf = 136447490;
              os_log_type_t v64 = "before_frame_send_callback";
              __int16 v65 = 2082;
              *(void *)uint64_t v66 = v9 + 191;
              *(_WORD *)&v66[8] = 2080;
              *(void *)&v66[10] = " ";
              __int16 v67 = 1024;
              __int16 v68 = v55;
              uint64_t v69 = 1024;
              LODWORD(v70[0]) = v56;
              WORD2(v70[0]) = 1024;
              *(_DWORD *)((char *)v70 + 6) = v56;
              _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> outgoing headers for stream %d", buf, 0x32u);
            }
          }
          nw_http_connection_metadata_increment_outbound_message_count(*(void **)(a3 + 256));
          if ((*(_WORD *)(v9 + 188) & 0x2002) != 0) {
            return 0;
          }
          if (((*(unsigned __int16 *)(v9 + 188) | (*(unsigned __int8 *)(v9 + 190) << 16)) & 0x80000) == 0
            && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v57 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              BOOL v59 = *(_DWORD *)(v9 + 176);
              uint64_t v58 = *(_DWORD *)(v9 + 180);
              *(_DWORD *)buf = 136447234;
              os_log_type_t v64 = "before_frame_send_callback";
              __int16 v65 = 2082;
              *(void *)uint64_t v66 = v9 + 191;
              *(_WORD *)&v66[8] = 2080;
              *(void *)&v66[10] = " ";
              __int16 v67 = 1024;
              __int16 v68 = v58;
              uint64_t v69 = 1024;
              LODWORD(v70[0]) = v59;
              _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> stream is now open, sending body", buf, 0x2Cu);
            }
          }
          int v10 = *(unsigned __int16 *)(v9 + 188);
          int v11 = *(unsigned __int8 *)(v9 + 190);
          *(_WORD *)(v9 + 188) = v10 | 2;
          if (*(void *)type)
          {
            while ((nw_http2_drain_next_frame_for_stream(a3, *(uint64_t *)type, v9, 0) & 1) != 0)
              ;
            return 0;
          }
          if (((v10 | (v11 << 16)) & 0x80000) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            __int16 v35 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
            {
              uint64_t v37 = *(_DWORD *)(v9 + 176);
              __int16 v36 = *(_DWORD *)(v9 + 180);
              *(_DWORD *)buf = 136447490;
              os_log_type_t v64 = "before_frame_send_callback";
              __int16 v65 = 2082;
              *(void *)uint64_t v66 = v9 + 191;
              *(_WORD *)&v66[8] = 2080;
              *(void *)&v66[10] = " ";
              __int16 v67 = 1024;
              __int16 v68 = v36;
              uint64_t v69 = 1024;
              LODWORD(v70[0]) = v37;
              WORD2(v70[0]) = 2048;
              *(void *)((char *)v70 + 6) = v9;
              _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%d> stream (%p) did not have protocol extra", buf, 0x36u);
            }
          }
          return 4294966775;
        }
        if (*(__int16 *)(a3 + 388) < 0) {
          return 4294966775;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint32_t v19 = *(_DWORD *)(a3 + 368);
        uint64_t v20 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        os_log_type_t v64 = "before_frame_send_callback";
        __int16 v65 = 2082;
        *(void *)uint64_t v66 = a3 + 390;
        *(_WORD *)&v66[8] = 2080;
        *(void *)&v66[10] = " ";
        __int16 v67 = 1024;
        __int16 v68 = v19;
        uint64_t v69 = 1024;
        LODWORD(v70[0]) = v20;
        int v21 = (char *)_os_log_send_and_compose_impl();
        BOOL v62 = OS_LOG_TYPE_ERROR;
        char v60 = 0;
        if (__nwlog_fault(v21, &v62, &v60))
        {
          if (v62 == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v22 = gconnectionLogObj;
            uint32_t v23 = v62;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v62)) {
              goto LABEL_77;
            }
            os_log_type_t v24 = *(_DWORD *)(a3 + 368);
            int v25 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447234;
            os_log_type_t v64 = "before_frame_send_callback";
            __int16 v65 = 2082;
            *(void *)uint64_t v66 = a3 + 390;
            *(_WORD *)&v66[8] = 2080;
            *(void *)&v66[10] = " ";
            __int16 v67 = 1024;
            __int16 v68 = v24;
            uint64_t v69 = 1024;
            LODWORD(v70[0]) = v25;
            uint64_t v26 = "%{public}s %{public}s%s<i%u> failed to find stream %d";
            goto LABEL_76;
          }
          if (!v60)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v22 = gconnectionLogObj;
            uint32_t v23 = v62;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v62)) {
              goto LABEL_77;
            }
            __int16 v40 = *(_DWORD *)(a3 + 368);
            uint64_t v41 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447234;
            os_log_type_t v64 = "before_frame_send_callback";
            __int16 v65 = 2082;
            *(void *)uint64_t v66 = a3 + 390;
            *(_WORD *)&v66[8] = 2080;
            *(void *)&v66[10] = " ";
            __int16 v67 = 1024;
            __int16 v68 = v40;
            uint64_t v69 = 1024;
            LODWORD(v70[0]) = v41;
            uint64_t v26 = "%{public}s %{public}s%s<i%u> failed to find stream %d, backtrace limit exceeded";
            goto LABEL_76;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v22 = gconnectionLogObj;
          uint32_t v23 = v62;
          int v31 = os_log_type_enabled((os_log_t)gconnectionLogObj, v62);
          if (backtrace_string)
          {
            if (v31)
            {
              char v32 = *(_DWORD *)(a3 + 368);
              os_log_type_t v33 = *((_DWORD *)a2 + 2);
              *(_DWORD *)buf = 136447490;
              os_log_type_t v64 = "before_frame_send_callback";
              __int16 v65 = 2082;
              *(void *)uint64_t v66 = a3 + 390;
              *(_WORD *)&v66[8] = 2080;
              *(void *)&v66[10] = " ";
              __int16 v67 = 1024;
              __int16 v68 = v32;
              uint64_t v69 = 1024;
              LODWORD(v70[0]) = v33;
              WORD2(v70[0]) = 2082;
              *(void *)((char *)v70 + 6) = backtrace_string;
              _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s %{public}s%s<i%u> failed to find stream %d, dumping backtrace:%{public}s", buf, 0x36u);
            }
            free(backtrace_string);
            goto LABEL_77;
          }
          if (v31)
          {
            uint64_t v42 = *(_DWORD *)(a3 + 368);
            int v43 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447234;
            os_log_type_t v64 = "before_frame_send_callback";
            __int16 v65 = 2082;
            *(void *)uint64_t v66 = a3 + 390;
            *(_WORD *)&v66[8] = 2080;
            *(void *)&v66[10] = " ";
            __int16 v67 = 1024;
            __int16 v68 = v42;
            uint64_t v69 = 1024;
            LODWORD(v70[0]) = v43;
            uint64_t v26 = "%{public}s %{public}s%s<i%u> failed to find stream %d, no backtrace";
LABEL_76:
            _os_log_impl(&dword_1830D4000, v22, v23, v26, buf, 0x2Cu);
          }
        }
LABEL_77:
        if (v21) {
          free(v21);
        }
        return 4294966775;
      }
      if (*(__int16 *)(a3 + 388) < 0) {
        return 4294966394;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v13 = *(_DWORD *)(a3 + 368);
      *(_DWORD *)buf = 136446978;
      os_log_type_t v64 = "before_frame_send_callback";
      __int16 v65 = 2082;
      *(void *)uint64_t v66 = a3 + 390;
      *(_WORD *)&v66[8] = 2080;
      *(void *)&v66[10] = " ";
      __int16 v67 = 1024;
      __int16 v68 = v13;
      uint64_t v14 = (const char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      BOOL v62 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v14, type, &v62))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v15 = gconnectionLogObj;
          __int16 v16 = type[0];
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]))
          {
            os_log_type_t v17 = *(_DWORD *)(a3 + 368);
            *(_DWORD *)buf = 136446978;
            os_log_type_t v64 = "before_frame_send_callback";
            __int16 v65 = 2082;
            *(void *)uint64_t v66 = a3 + 390;
            *(_WORD *)&v66[8] = 2080;
            *(void *)&v66[10] = " ";
            __int16 v67 = 1024;
            __int16 v68 = v17;
            os_log_type_t v18 = "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection";
LABEL_65:
            _os_log_impl(&dword_1830D4000, v15, v16, v18, buf, 0x26u);
          }
        }
        else if (v62)
        {
          int v27 = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v15 = gconnectionLogObj;
          __int16 v16 = type[0];
          BOOL v28 = os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]);
          if (!v27)
          {
            if (!v28) {
              goto LABEL_66;
            }
            __int16 v38 = *(_DWORD *)(a3 + 368);
            *(_DWORD *)buf = 136446978;
            os_log_type_t v64 = "before_frame_send_callback";
            __int16 v65 = 2082;
            *(void *)uint64_t v66 = a3 + 390;
            *(_WORD *)&v66[8] = 2080;
            *(void *)&v66[10] = " ";
            __int16 v67 = 1024;
            __int16 v68 = v38;
            os_log_type_t v18 = "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection, no backtrace";
            goto LABEL_65;
          }
          if (v28)
          {
            os_log_type_t v29 = *(_DWORD *)(a3 + 368);
            *(_DWORD *)buf = 136447234;
            os_log_type_t v64 = "before_frame_send_callback";
            __int16 v65 = 2082;
            *(void *)uint64_t v66 = a3 + 390;
            *(_WORD *)&v66[8] = 2080;
            *(void *)&v66[10] = " ";
            __int16 v67 = 1024;
            __int16 v68 = v29;
            uint64_t v69 = 2082;
            v70[0] = v27;
            _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection, dumping backtrace:%{public}s", buf, 0x30u);
          }
          free(v27);
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v15 = gconnectionLogObj;
          __int16 v16 = type[0];
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]))
          {
            int v34 = *(_DWORD *)(a3 + 368);
            *(_DWORD *)buf = 136446978;
            os_log_type_t v64 = "before_frame_send_callback";
            __int16 v65 = 2082;
            *(void *)uint64_t v66 = a3 + 390;
            *(_WORD *)&v66[8] = 2080;
            *(void *)&v66[10] = " ";
            __int16 v67 = 1024;
            __int16 v68 = v34;
            os_log_type_t v18 = "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection, backtra"
                  "ce limit exceeded";
            goto LABEL_65;
          }
        }
      }
LABEL_66:
      if (v14)
      {
        os_log_type_t v39 = (char *)v14;
LABEL_68:
        free(v39);
      }
      return 4294966394;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v64 = "before_frame_send_callback";
    __int16 v48 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    BOOL v62 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v48, type, &v62))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v49 = __nwlog_obj();
        int v50 = type[0];
        if (os_log_type_enabled(v49, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v64 = "before_frame_send_callback";
          uint64_t v51 = "%{public}s nghttp2 user data is NULL, not http2";
LABEL_105:
          _os_log_impl(&dword_1830D4000, v49, v50, v51, buf, 0xCu);
        }
      }
      else if (v62)
      {
        BOOL v52 = (char *)__nw_create_backtrace_string();
        __int16 v49 = __nwlog_obj();
        int v50 = type[0];
        int v53 = os_log_type_enabled(v49, type[0]);
        if (v52)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v64 = "before_frame_send_callback";
            __int16 v65 = 2082;
            *(void *)uint64_t v66 = v52;
            _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v52);
          goto LABEL_106;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v64 = "before_frame_send_callback";
          uint64_t v51 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
          goto LABEL_105;
        }
      }
      else
      {
        __int16 v49 = __nwlog_obj();
        int v50 = type[0];
        if (os_log_type_enabled(v49, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v64 = "before_frame_send_callback";
          uint64_t v51 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
          goto LABEL_105;
        }
      }
    }
LABEL_106:
    if (!v48) {
      return 4294966394;
    }
    os_log_type_t v39 = (char *)v48;
    goto LABEL_68;
  }
  if (!gLogDatapath) {
    return 0;
  }
  __int16 v47 = __nwlog_obj();
  uint64_t result = os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v64 = "before_frame_send_callback";
    _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s ignoring frame on stream 0", buf, 0xCu);
    return 0;
  }
  return result;
}

void nw_http2_transport_stream_connected(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v45[2] = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    os_log_type_t v22 = __nwlog_obj();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      int v23 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446978;
      uint64_t v41 = "nw_http2_transport_stream_connected";
      __int16 v42 = 2082;
      int v43 = (const char *)(a1 + 205);
      __int16 v44 = 1024;
      LODWORD(v45[0]) = v23;
      WORD2(v45[0]) = 2048;
      *(void *)((char *)v45 + 6) = a2;
      _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for stream %d (%p)", buf, 0x26u);
    }
  }
  *(unsigned char *)(a2 + 36) |= 1u;
  uint64_t v6 = *(void *)(a3 + 24);
  if (v6)
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 40);
    if (v7)
    {
      v7(a3, a1);
      goto LABEL_5;
    }
  }
  __nwlog_obj();
  int v10 = *(const char **)(a3 + 16);
  if (!v10) {
    int v10 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  uint64_t v41 = "nw_http2_transport_stream_connected";
  __int16 v42 = 2082;
  int v43 = v10;
  int v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v38 = 0;
  if (__nwlog_fault(v11, &type, &v38))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_57;
      }
      uint64_t v14 = *(const char **)(a3 + 16);
      if (!v14) {
        uint64_t v14 = "invalid";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v41 = "nw_http2_transport_stream_connected";
      __int16 v42 = 2082;
      int v43 = v14;
      BOOL v15 = "%{public}s protocol %{public}s has invalid connected callback";
      goto LABEL_56;
    }
    if (!v38)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_57;
      }
      int v34 = *(const char **)(a3 + 16);
      if (!v34) {
        int v34 = "invalid";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v41 = "nw_http2_transport_stream_connected";
      __int16 v42 = 2082;
      int v43 = v34;
      BOOL v15 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v27 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v27)
      {
        BOOL v28 = *(const char **)(a3 + 16);
        if (!v28) {
          BOOL v28 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v41 = "nw_http2_transport_stream_connected";
        __int16 v42 = 2082;
        int v43 = v28;
        __int16 v44 = 2082;
        v45[0] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_57;
    }
    if (v27)
    {
      __int16 v35 = *(const char **)(a3 + 16);
      if (!v35) {
        __int16 v35 = "invalid";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v41 = "nw_http2_transport_stream_connected";
      __int16 v42 = 2082;
      int v43 = v35;
      BOOL v15 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_56:
      _os_log_impl(&dword_1830D4000, v12, v13, v15, buf, 0x16u);
    }
  }
LABEL_57:
  if (v11) {
    free(v11);
  }
LABEL_5:
  if (gLogDatapath)
  {
    os_log_type_t v24 = __nwlog_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      int v25 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446978;
      uint64_t v41 = "nw_http2_transport_stream_connected";
      __int16 v42 = 2082;
      int v43 = (const char *)(a1 + 205);
      __int16 v44 = 1024;
      LODWORD(v45[0]) = v25;
      WORD2(v45[0]) = 2048;
      *(void *)((char *)v45 + 6) = a3;
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s stream %d (protocol %p) connected", buf, 0x26u);
    }
  }
  if (*(void *)a2)
  {
    if (gLogDatapath)
    {
      os_log_type_t v29 = __nwlog_obj();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        int v30 = *(_DWORD *)(a2 + 32);
        *(_DWORD *)buf = 136446722;
        uint64_t v41 = "nw_http2_transport_stream_connected";
        __int16 v42 = 2082;
        int v43 = (const char *)(a1 + 205);
        __int16 v44 = 1024;
        LODWORD(v45[0]) = v30;
        _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s calling input_available with input_frames pending for stream %d", buf, 0x1Cu);
      }
    }
    uint64_t v8 = *(void *)(a3 + 24);
    if (v8)
    {
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
      if (v9)
      {
        v9(a3, a1);
        goto LABEL_11;
      }
    }
    __nwlog_obj();
    __int16 v16 = *(const char **)(a3 + 16);
    if (!v16) {
      __int16 v16 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v41 = "nw_http2_transport_stream_connected";
    __int16 v42 = 2082;
    int v43 = v16;
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (!__nwlog_fault(v17, &type, &v38)) {
      goto LABEL_68;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_68;
      }
      uint64_t v20 = *(const char **)(a3 + 16);
      if (!v20) {
        uint64_t v20 = "invalid";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v41 = "nw_http2_transport_stream_connected";
      __int16 v42 = 2082;
      int v43 = v20;
      int v21 = "%{public}s protocol %{public}s has invalid input_available callback";
    }
    else if (v38)
    {
      int v31 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v32 = os_log_type_enabled(v18, type);
      if (v31)
      {
        if (v32)
        {
          os_log_type_t v33 = *(const char **)(a3 + 16);
          if (!v33) {
            os_log_type_t v33 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v41 = "nw_http2_transport_stream_connected";
          __int16 v42 = 2082;
          int v43 = v33;
          __int16 v44 = 2082;
          v45[0] = v31;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v31);
        goto LABEL_68;
      }
      if (!v32)
      {
LABEL_68:
        if (v17) {
          free(v17);
        }
        goto LABEL_11;
      }
      uint64_t v37 = *(const char **)(a3 + 16);
      if (!v37) {
        uint64_t v37 = "invalid";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v41 = "nw_http2_transport_stream_connected";
      __int16 v42 = 2082;
      int v43 = v37;
      int v21 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
    }
    else
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_68;
      }
      __int16 v36 = *(const char **)(a3 + 16);
      if (!v36) {
        __int16 v36 = "invalid";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v41 = "nw_http2_transport_stream_connected";
      __int16 v42 = 2082;
      int v43 = v36;
      int v21 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v18, v19, v21, buf, 0x16u);
    goto LABEL_68;
  }
LABEL_11:
  nw_http2_transport_session_send(a1);
}

void nw_protocol_http2_transport_notify(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_protocol_http2_transport_notify";
    int v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v11, &v26, &v25)) {
      goto LABEL_63;
    }
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v26;
      if (!os_log_type_enabled(v12, v26)) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_protocol_http2_transport_notify";
      uint64_t v14 = "%{public}s called with null protocol";
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v26;
      BOOL v17 = os_log_type_enabled(v12, v26);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v28 = "nw_protocol_http2_transport_notify";
          __int16 v29 = 2082;
          int v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_63:
        if (!v11) {
          return;
        }
        goto LABEL_64;
      }
      if (!v17) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_protocol_http2_transport_notify";
      uint64_t v14 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v26;
      if (!os_log_type_enabled(v12, v26)) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_protocol_http2_transport_notify";
      uint64_t v14 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_62;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_protocol_http2_transport_notify";
    int v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v11, &v26, &v25)) {
      goto LABEL_63;
    }
    if (v26 != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = v26;
        if (!os_log_type_enabled(v12, v26)) {
          goto LABEL_63;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_protocol_http2_transport_notify";
        uint64_t v14 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_62;
      }
      os_log_type_t v18 = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v26;
      BOOL v19 = os_log_type_enabled(v12, v26);
      if (!v18)
      {
        if (!v19) {
          goto LABEL_63;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_protocol_http2_transport_notify";
        uint64_t v14 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_62;
      }
      if (!v19) {
        goto LABEL_44;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v28 = "nw_protocol_http2_transport_notify";
      __int16 v29 = 2082;
      int v30 = v18;
      uint64_t v20 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
      goto LABEL_43;
    }
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v13 = v26;
    if (!os_log_type_enabled(v12, v26)) {
      goto LABEL_63;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_protocol_http2_transport_notify";
    uint64_t v14 = "%{public}s called with null http2_transport";
LABEL_62:
    _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
    goto LABEL_63;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_protocol_http2_transport_notify";
    int v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v11, &v26, &v25)) {
      goto LABEL_63;
    }
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v26;
      if (!os_log_type_enabled(v12, v26)) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_protocol_http2_transport_notify";
      uint64_t v14 = "%{public}s called with null other_protocol";
      goto LABEL_62;
    }
    if (!v25)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v26;
      if (!os_log_type_enabled(v12, v26)) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_protocol_http2_transport_notify";
      uint64_t v14 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_62;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v13 = v26;
    BOOL v21 = os_log_type_enabled(v12, v26);
    if (!v18)
    {
      if (!v21) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_protocol_http2_transport_notify";
      uint64_t v14 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_62;
    }
    if (!v21) {
      goto LABEL_44;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v28 = "nw_protocol_http2_transport_notify";
    __int16 v29 = 2082;
    int v30 = v18;
    uint64_t v20 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_43:
    _os_log_impl(&dword_1830D4000, v12, v13, v20, buf, 0x16u);
    goto LABEL_44;
  }
  if (!*(void *)(v5 + 112))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_protocol_http2_transport_notify";
    int v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v11, &v26, &v25)) {
      goto LABEL_63;
    }
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v26;
      if (!os_log_type_enabled(v12, v26)) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_protocol_http2_transport_notify";
      uint64_t v14 = "%{public}s called with null http2_transport->http2_transport_streams_protocol";
      goto LABEL_62;
    }
    if (!v25)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v26;
      if (!os_log_type_enabled(v12, v26)) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_protocol_http2_transport_notify";
      uint64_t v14 = "%{public}s called with null http2_transport->http2_transport_streams_protocol, backtrace limit exceeded";
      goto LABEL_62;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v13 = v26;
    BOOL v22 = os_log_type_enabled(v12, v26);
    if (!v18)
    {
      if (!v22) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v28 = "nw_protocol_http2_transport_notify";
      uint64_t v14 = "%{public}s called with null http2_transport->http2_transport_streams_protocol, no backtrace";
      goto LABEL_62;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v28 = "nw_protocol_http2_transport_notify";
      __int16 v29 = 2082;
      int v30 = v18;
      uint64_t v20 = "%{public}s called with null http2_transport->http2_transport_streams_protocol, dumping backtrace:%{public}s";
      goto LABEL_43;
    }
LABEL_44:
    free(v18);
    if (!v11) {
      return;
    }
LABEL_64:
    free(v11);
    return;
  }
  if (gLogDatapath)
  {
    BOOL v15 = __nwlog_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      BOOL v28 = "nw_protocol_http2_transport_notify";
      __int16 v29 = 2082;
      int v30 = (char *)(v5 + 205);
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  int v10 = *(char **)(v5 + 112);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 0x40000000;
  v23[2] = ___ZL34nw_protocol_http2_transport_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke;
  v23[3] = &__block_descriptor_tmp_46_38160;
  v23[4] = v5;
  v23[5] = a2;
  int v24 = a3;
  v23[6] = a4;
  v23[7] = a5;
  nw_hash_table_apply(v10, (uint64_t)v23);
}

uint64_t ___ZL34nw_protocol_http2_transport_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v37 = "nw_protocol_http2_transport_notify_block_invoke";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v9, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v37 = "nw_protocol_http2_transport_notify_block_invoke";
          uint64_t v14 = "%{public}s called with null node";
LABEL_58:
          int v23 = v30;
          os_log_type_t v24 = v31;
          uint32_t v25 = 12;
          goto LABEL_36;
        }
      }
      else if (v34)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v33 = os_log_type_enabled(v30, type);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v37 = "nw_protocol_http2_transport_notify_block_invoke";
            __int16 v38 = 2082;
            os_log_type_t v39 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null node, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
        }
        else if (v33)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v37 = "nw_protocol_http2_transport_notify_block_invoke";
          uint64_t v14 = "%{public}s called with null node, no backtrace";
          goto LABEL_58;
        }
      }
      else
      {
        int v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v37 = "nw_protocol_http2_transport_notify_block_invoke";
          uint64_t v14 = "%{public}s called with null node, backtrace limit exceeded";
          goto LABEL_58;
        }
      }
    }
LABEL_37:
    if (!v9) {
      return 1;
    }
LABEL_38:
    free(v9);
    return 1;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5 && (uint64_t v6 = *(void (**)(uint64_t, void, void, void, void))(v5 + 160)) != 0)
    {
      v6(v4, *(void *)(a1 + 40), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      BOOL v27 = __nwlog_obj();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        uint64_t v37 = "nw_protocol_http2_transport_notify_block_invoke";
        if (v28) {
          __int16 v29 = (const char *)(v28 + 205);
        }
        else {
          __int16 v29 = "";
        }
        __int16 v38 = 2082;
        os_log_type_t v39 = (void *)v29;
        __int16 v40 = 2048;
        uint64_t v41 = v4;
        _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_INFO, "%{public}s %{public}s notify callback not set on input handler %p, skipping notify", buf, 0x20u);
      }
    }
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    uint64_t v8 = (const char *)(v7 + 205);
  }
  else {
    uint64_t v8 = "";
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v37 = "nw_protocol_http2_transport_notify_block_invoke";
  __int16 v38 = 2082;
  os_log_type_t v39 = (void *)v8;
  __int16 v40 = 2048;
  uint64_t v41 = a2;
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  if (!__nwlog_fault(v9, &type, &v34)) {
    goto LABEL_37;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v10 = gLogObj;
    os_log_type_t v11 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_37;
    }
    uint64_t v12 = *(void *)(a1 + 32);
    if (v12) {
      os_log_type_t v13 = (const char *)(v12 + 205);
    }
    else {
      os_log_type_t v13 = "";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v37 = "nw_protocol_http2_transport_notify_block_invoke";
    __int16 v38 = 2082;
    os_log_type_t v39 = (void *)v13;
    __int16 v40 = 2048;
    uint64_t v41 = a2;
    uint64_t v14 = "%{public}s %{public}s no object for hash node %p, skipping notify";
LABEL_35:
    int v23 = v10;
    os_log_type_t v24 = v11;
    uint32_t v25 = 32;
LABEL_36:
    _os_log_impl(&dword_1830D4000, v23, v24, v14, buf, v25);
    goto LABEL_37;
  }
  if (!v34)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v10 = gLogObj;
    os_log_type_t v11 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_37;
    }
    uint64_t v19 = *(void *)(a1 + 32);
    if (v19) {
      uint64_t v20 = (const char *)(v19 + 205);
    }
    else {
      uint64_t v20 = "";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v37 = "nw_protocol_http2_transport_notify_block_invoke";
    __int16 v38 = 2082;
    os_log_type_t v39 = (void *)v20;
    __int16 v40 = 2048;
    uint64_t v41 = a2;
    uint64_t v14 = "%{public}s %{public}s no object for hash node %p, skipping notify, backtrace limit exceeded";
    goto LABEL_35;
  }
  BOOL v15 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v10 = gLogObj;
  os_log_type_t v11 = type;
  BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v15)
  {
    if (!v16) {
      goto LABEL_37;
    }
    uint64_t v21 = *(void *)(a1 + 32);
    if (v21) {
      BOOL v22 = (const char *)(v21 + 205);
    }
    else {
      BOOL v22 = "";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v37 = "nw_protocol_http2_transport_notify_block_invoke";
    __int16 v38 = 2082;
    os_log_type_t v39 = (void *)v22;
    __int16 v40 = 2048;
    uint64_t v41 = a2;
    uint64_t v14 = "%{public}s %{public}s no object for hash node %p, skipping notify, no backtrace";
    goto LABEL_35;
  }
  if (v16)
  {
    uint64_t v17 = *(void *)(a1 + 32);
    if (v17) {
      os_log_type_t v18 = (const char *)(v17 + 205);
    }
    else {
      os_log_type_t v18 = "";
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v37 = "nw_protocol_http2_transport_notify_block_invoke";
    __int16 v38 = 2082;
    os_log_type_t v39 = (void *)v18;
    __int16 v40 = 2048;
    uint64_t v41 = a2;
    __int16 v42 = 2082;
    int v43 = v15;
    _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s %{public}s no object for hash node %p, skipping notify, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v15);
  if (v9) {
    goto LABEL_38;
  }
  return 1;
}

void nw_protocol_http2_transport_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_protocol_http2_transport_error";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v12, &type, &v24)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "nw_protocol_http2_transport_error";
      BOOL v15 = "%{public}s called with null protocol";
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v27 = "nw_protocol_http2_transport_error";
          __int16 v28 = 2082;
          __int16 v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_55:
        if (!v12) {
          return;
        }
        goto LABEL_56;
      }
      if (!v17) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "nw_protocol_http2_transport_error";
      BOOL v15 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "nw_protocol_http2_transport_error";
      BOOL v15 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_54;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_protocol_http2_transport_error";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v12, &type, &v24)) {
      goto LABEL_55;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_55;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_protocol_http2_transport_error";
        BOOL v15 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_54;
      }
      os_log_type_t v18 = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (!v18)
      {
        if (!v19) {
          goto LABEL_55;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_protocol_http2_transport_error";
        BOOL v15 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_54;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v27 = "nw_protocol_http2_transport_error";
        __int16 v28 = 2082;
        __int16 v29 = v18;
        uint64_t v20 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
LABEL_39:
        _os_log_impl(&dword_1830D4000, v13, v14, v20, buf, 0x16u);
      }
LABEL_40:
      free(v18);
      if (!v12) {
        return;
      }
LABEL_56:
      free(v12);
      return;
    }
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_55;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_protocol_http2_transport_error";
    BOOL v15 = "%{public}s called with null http2_transport";
LABEL_54:
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_55;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_protocol_http2_transport_error";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v12, &type, &v24)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "nw_protocol_http2_transport_error";
      BOOL v15 = "%{public}s called with null other_protocol";
      goto LABEL_54;
    }
    if (!v24)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "nw_protocol_http2_transport_error";
      BOOL v15 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_54;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v21 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v21) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "nw_protocol_http2_transport_error";
      BOOL v15 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v27 = "nw_protocol_http2_transport_error";
      __int16 v28 = 2082;
      __int16 v29 = v18;
      uint64_t v20 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  if (a3)
  {
    uint64_t v5 = (char *)*((void *)handle + 14);
    if (v5)
    {
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 0x40000000;
      v22[2] = ___ZL33nw_protocol_http2_transport_errorP11nw_protocolS0_i_block_invoke;
      v22[3] = &__block_descriptor_tmp_45_38189;
      uint8_t v22[4] = handle;
      int v23 = a3;
      nw_hash_table_apply(v5, (uint64_t)v22);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      BOOL v27 = "nw_protocol_http2_transport_error";
      __int16 v28 = 2082;
      __int16 v29 = handle + 205;
      __int16 v30 = 1024;
      int v31 = a3;
      uint64_t v7 = "%{public}s %{public}s cannot pass error %d up the stack, protocol table is NULL";
      uint64_t v8 = v11;
      os_log_type_t v9 = OS_LOG_TYPE_ERROR;
      uint32_t v10 = 28;
      goto LABEL_12;
    }
  }
  else if (gLogDatapath)
  {
    uint64_t v6 = __nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      BOOL v27 = "nw_protocol_http2_transport_error";
      __int16 v28 = 2082;
      __int16 v29 = handle + 205;
      uint64_t v7 = "%{public}s %{public}s suppressing error 0";
      uint64_t v8 = v6;
      os_log_type_t v9 = OS_LOG_TYPE_DEBUG;
      uint32_t v10 = 22;
LABEL_12:
      _os_log_impl(&dword_1830D4000, v8, v9, v7, buf, v10);
    }
  }
}

uint64_t ___ZL33nw_protocol_http2_transport_errorP11nw_protocolS0_i_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v5 = object;
    uint64_t v6 = *(void *)(object + 24);
    if (v6 && *(void *)(v6 + 56))
    {
      if (gLogDatapath)
      {
        __int16 v29 = __nwlog_obj();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v30 = *(void *)(a1 + 32);
          int v31 = (const char *)(v30 + 205);
          BOOL v27 = v30 == 0;
          int v32 = *(_DWORD *)(a1 + 40);
          if (v27) {
            int v31 = "";
          }
          *(_DWORD *)buf = 136446978;
          __int16 v36 = "nw_protocol_http2_transport_error_block_invoke";
          __int16 v37 = 2082;
          __int16 v38 = v31;
          __int16 v39 = 1024;
          *(_DWORD *)__int16 v40 = v32;
          *(_WORD *)&v40[4] = 2048;
          *(void *)&v40[6] = v5;
          _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s passing error %d to input protocol %p", buf, 0x26u);
        }
      }
      (*(void (**)(uint64_t, void, void))(*(void *)(v5 + 24) + 56))(v5, *(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
    }
    else
    {
      char v24 = __nwlog_obj();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = *(void *)(a1 + 32);
        os_log_type_t v26 = (const char *)(v25 + 205);
        BOOL v27 = v25 == 0;
        int v28 = *(_DWORD *)(a1 + 40);
        if (v27) {
          os_log_type_t v26 = "";
        }
        *(_DWORD *)buf = 136446978;
        __int16 v36 = "nw_protocol_http2_transport_error_block_invoke";
        __int16 v37 = 2082;
        __int16 v38 = v26;
        __int16 v39 = 2048;
        *(void *)__int16 v40 = v5;
        *(_WORD *)&v40[8] = 1024;
        *(_DWORD *)&v40[10] = v28;
        _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_ERROR, "%{public}s %{public}s callbacks on protocol %p not set, cannot pass error %d", buf, 0x26u);
      }
    }
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    uint64_t v8 = (const char *)(v7 + 205);
  }
  else {
    uint64_t v8 = "";
  }
  *(_DWORD *)buf = 136446722;
  __int16 v36 = "nw_protocol_http2_transport_error_block_invoke";
  __int16 v37 = 2082;
  __int16 v38 = v8;
  __int16 v39 = 2048;
  *(void *)__int16 v40 = a2;
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (__nwlog_fault(v9, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint32_t v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_35;
      }
      uint64_t v12 = *(void *)(a1 + 32);
      if (v12) {
        os_log_type_t v13 = (const char *)(v12 + 205);
      }
      else {
        os_log_type_t v13 = "";
      }
      *(_DWORD *)buf = 136446722;
      __int16 v36 = "nw_protocol_http2_transport_error_block_invoke";
      __int16 v37 = 2082;
      __int16 v38 = v13;
      __int16 v39 = 2048;
      *(void *)__int16 v40 = a2;
      os_log_type_t v14 = "%{public}s %{public}s node %p did not contain protocol";
      goto LABEL_34;
    }
    if (!v33)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint32_t v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_35;
      }
      uint64_t v19 = *(void *)(a1 + 32);
      if (v19) {
        uint64_t v20 = (const char *)(v19 + 205);
      }
      else {
        uint64_t v20 = "";
      }
      *(_DWORD *)buf = 136446722;
      __int16 v36 = "nw_protocol_http2_transport_error_block_invoke";
      __int16 v37 = 2082;
      __int16 v38 = v20;
      __int16 v39 = 2048;
      *(void *)__int16 v40 = a2;
      os_log_type_t v14 = "%{public}s %{public}s node %p did not contain protocol, backtrace limit exceeded";
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v10 = gLogObj;
    os_log_type_t v11 = type;
    BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v16)
      {
        uint64_t v17 = *(void *)(a1 + 32);
        if (v17) {
          os_log_type_t v18 = (const char *)(v17 + 205);
        }
        else {
          os_log_type_t v18 = "";
        }
        *(_DWORD *)buf = 136446978;
        __int16 v36 = "nw_protocol_http2_transport_error_block_invoke";
        __int16 v37 = 2082;
        __int16 v38 = v18;
        __int16 v39 = 2048;
        *(void *)__int16 v40 = a2;
        *(_WORD *)&v40[8] = 2082;
        *(void *)&v40[10] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s %{public}s node %p did not contain protocol, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(backtrace_string);
      goto LABEL_35;
    }
    if (v16)
    {
      uint64_t v21 = *(void *)(a1 + 32);
      if (v21) {
        BOOL v22 = (const char *)(v21 + 205);
      }
      else {
        BOOL v22 = "";
      }
      *(_DWORD *)buf = 136446722;
      __int16 v36 = "nw_protocol_http2_transport_error_block_invoke";
      __int16 v37 = 2082;
      __int16 v38 = v22;
      __int16 v39 = 2048;
      *(void *)__int16 v40 = a2;
      os_log_type_t v14 = "%{public}s %{public}s node %p did not contain protocol, no backtrace";
LABEL_34:
      _os_log_impl(&dword_1830D4000, v10, v11, v14, buf, 0x20u);
    }
  }
LABEL_35:
  if (v9) {
    free(v9);
  }
  return 1;
}

uint64_t nw_protocol_http2_transport_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      uint64_t v2 = handle[6];
      if (!v2) {
        return handle[12];
      }
      uint64_t v3 = *(void *)(v2 + 24);
      if (!v3) {
        return handle[12];
      }
      uint64_t v4 = *(uint64_t (**)(nw_protocol *))(v3 + 136);
      if (!v4) {
        return handle[12];
      }
      default_input_handler = a1->default_input_handler;
      return v4(default_input_handler);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_protocol_http2_transport_get_remote_endpoint";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_http2_transport_get_remote_endpoint";
        uint32_t v10 = "%{public}s called with null http2_transport";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (!v15)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_http2_transport_get_remote_endpoint";
        uint32_t v10 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_http2_transport_get_remote_endpoint";
        uint32_t v10 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v18 = "nw_protocol_http2_transport_get_remote_endpoint";
      __int16 v19 = 2082;
      uint64_t v20 = backtrace_string;
      os_log_type_t v13 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_protocol_http2_transport_get_remote_endpoint";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15)) {
    goto LABEL_37;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_http2_transport_get_remote_endpoint";
        uint32_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_http2_transport_get_remote_endpoint";
        uint32_t v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v18 = "nw_protocol_http2_transport_get_remote_endpoint";
      __int16 v19 = 2082;
      uint64_t v20 = backtrace_string;
      os_log_type_t v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_1830D4000, v8, v9, v13, buf, 0x16u);
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_37;
  }
  uint64_t v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_protocol_http2_transport_get_remote_endpoint";
    uint32_t v10 = "%{public}s called with null protocol";
LABEL_36:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
  }
LABEL_37:
  if (v7) {
    free(v7);
  }
  return 0;
}

uint64_t nw_protocol_http2_transport_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((nw_listen_protocol *)handle[13] == a2)
      {
        handle[13] = 0;
        a2->uint64_t protocol_handler = 0;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v16 = "nw_protocol_http2_transport_remove_listen_handler";
        __int16 v17 = 2082;
        os_log_type_t v18 = (char *)handle + 205;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s removed protocol listen handler", buf, 0x16u);
      }
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_protocol_http2_transport_remove_listen_handler";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_http2_transport_remove_listen_handler";
        uint64_t v8 = "%{public}s called with null http2_transport";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v13)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_http2_transport_remove_listen_handler";
        uint64_t v8 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_http2_transport_remove_listen_handler";
        uint64_t v8 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v16 = "nw_protocol_http2_transport_remove_listen_handler";
      __int16 v17 = 2082;
      os_log_type_t v18 = backtrace_string;
      os_log_type_t v11 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_http2_transport_remove_listen_handler";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13)) {
    goto LABEL_36;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v13)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_http2_transport_remove_listen_handler";
        uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_http2_transport_remove_listen_handler";
        uint64_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v16 = "nw_protocol_http2_transport_remove_listen_handler";
      __int16 v17 = 2082;
      os_log_type_t v18 = backtrace_string;
      os_log_type_t v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v6, v7, v11, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    goto LABEL_36;
  }
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_protocol_http2_transport_remove_listen_handler";
    uint64_t v8 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
  }
LABEL_36:
  if (v5) {
    free(v5);
  }
  return 0;
}

BOOL nw_protocol_http2_transport_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = (char *)a1->handle;
    if (handle)
    {
      if (*((void *)handle + 13))
      {
        if ((handle[204] & 0x40) == 0)
        {
LABEL_37:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v17 = gLogObj;
          BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          if (result)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 205;
            _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, "%{public}s %{public}s already have a listen handler, ignoring add", buf, 0x16u);
            return 0;
          }
          return result;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 205;
        uint64_t v4 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        char v31 = 0;
        if (__nwlog_fault(v4, type, &v31))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v5 = gLogObj;
            os_log_type_t v6 = type[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
              goto LABEL_35;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 205;
            os_log_type_t v7 = "%{public}s %{public}s cannot have listen handler and be waiting for listen handler at the same time";
            goto LABEL_34;
          }
          if (!v31)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v5 = gLogObj;
            os_log_type_t v6 = type[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
              goto LABEL_35;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 205;
            os_log_type_t v7 = "%{public}s %{public}s cannot have listen handler and be waiting for listen handler at the same time, ba"
                 "cktrace limit exceeded";
            goto LABEL_34;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v5 = gLogObj;
          os_log_type_t v6 = type[0];
          BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (backtrace_string)
          {
            if (v13)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = handle + 205;
              *(_WORD *)&unsigned char buf[22] = 2082;
              char v33 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s %{public}s cannot have listen handler and be waiting for listen handler at the same time, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(backtrace_string);
            goto LABEL_35;
          }
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 205;
            os_log_type_t v7 = "%{public}s %{public}s cannot have listen handler and be waiting for listen handler at the same time, no backtrace";
LABEL_34:
            _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0x16u);
          }
        }
LABEL_35:
        if (v4) {
          free(v4);
        }
        goto LABEL_37;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 205;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s added protocol listen handler", buf, 0x16u);
      }
      *((void *)handle + 13) = a2;
      a2->uint64_t protocol_handler = a1;
      if ((handle[204] & 0x40) == 0) {
        return 1;
      }
      if (gLogDatapath)
      {
        int v28 = __nwlog_obj();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 205;
          _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s waiting for listen handler, resuming processing of connected", buf, 0x16u);
        }
        if (gLogDatapath)
        {
          __int16 v29 = __nwlog_obj();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            __int16 v36 = "nw_protocol_http2_transport_process_connected";
            __int16 v37 = 2082;
            __int16 v38 = handle + 205;
            _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", (uint8_t *)type, 0x16u);
          }
        }
      }
      if ((handle[204] & 0x10) != 0)
      {
        if (!*((void *)handle + 13))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v19 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            __int16 v36 = "nw_protocol_http2_transport_process_connected";
            __int16 v37 = 2082;
            __int16 v38 = handle + 205;
            _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_INFO, "%{public}s %{public}s no listen handler on server, deferring processing of input and connected state until listen handler is present", (uint8_t *)type, 0x16u);
          }
          handle[204] |= 0x40u;
          return 1;
        }
        if (!gLogDatapath) {
          goto LABEL_24;
        }
        BOOL v10 = __nwlog_obj();
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_24;
        }
        *(_DWORD *)os_log_type_t type = 136446466;
        __int16 v36 = "nw_protocol_http2_transport_process_connected";
        __int16 v37 = 2082;
        __int16 v38 = handle + 205;
        os_log_type_t v11 = "%{public}s %{public}s listen handler present, processing input without waiting";
      }
      else
      {
        if (!gLogDatapath || (BOOL v10 = __nwlog_obj(), !os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)))
        {
LABEL_24:
          char v14 = handle[204];
          handle[204] = v14 & 0xBF;
          if ((v14 & 6) != 0)
          {
            if (gLogDatapath)
            {
              char v15 = __nwlog_obj();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)os_log_type_t type = 136446466;
                __int16 v36 = "nw_protocol_http2_transport_process_connected";
                __int16 v37 = 2082;
                __int16 v38 = handle + 205;
                _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s tunnel already connected or closed, ignoring connected event", (uint8_t *)type, 0x16u);
              }
            }
          }
          else
          {
            nw_http2_transport_send_settings((uint64_t)handle);
            handle[204] |= 2u;
            if (gLogDatapath)
            {
              uint64_t v30 = __nwlog_obj();
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)os_log_type_t type = 136446466;
                __int16 v36 = "nw_protocol_http2_transport_process_connected";
                __int16 v37 = 2082;
                __int16 v38 = handle + 205;
                _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s http2 tunnel is now connected", (uint8_t *)type, 0x16u);
              }
            }
            nw_protocol_http2_transport_process_input((uint64_t)handle);
            BOOL v16 = (char *)*((void *)handle + 14);
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 0x40000000;
            *(void *)&buf[16] = ___ZL45nw_protocol_http2_transport_process_connectedP27nw_protocol_http2_transport_block_invoke;
            char v33 = (char *)&__block_descriptor_tmp_22_38241;
            char v34 = handle;
            nw_hash_table_apply(v16, (uint64_t)buf);
          }
          return 1;
        }
        *(_DWORD *)os_log_type_t type = 136446466;
        __int16 v36 = "nw_protocol_http2_transport_process_connected";
        __int16 v37 = 2082;
        __int16 v38 = handle + 205;
        os_log_type_t v11 = "%{public}s %{public}s not server, processing input without waiting";
      }
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, v11, (uint8_t *)type, 0x16u);
      goto LABEL_24;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v20, type, &v31)) {
      goto LABEL_76;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        int v23 = "%{public}s called with null http2_transport";
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (!v31)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        int v23 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    char v24 = (char *)__nw_create_backtrace_string();
    uint64_t v21 = __nwlog_obj();
    os_log_type_t v22 = type[0];
    BOOL v27 = os_log_type_enabled(v21, type[0]);
    if (!v24)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        int v23 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v24;
      os_log_type_t v26 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
  uint64_t v20 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (!__nwlog_fault(v20, type, &v31)) {
    goto LABEL_76;
  }
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!v31)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        int v23 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    char v24 = (char *)__nw_create_backtrace_string();
    uint64_t v21 = __nwlog_obj();
    os_log_type_t v22 = type[0];
    BOOL v25 = os_log_type_enabled(v21, type[0]);
    if (!v24)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        int v23 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v24;
      os_log_type_t v26 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_60:
      _os_log_impl(&dword_1830D4000, v21, v22, v26, buf, 0x16u);
    }
LABEL_61:
    free(v24);
    goto LABEL_76;
  }
  uint64_t v21 = __nwlog_obj();
  os_log_type_t v22 = type[0];
  if (os_log_type_enabled(v21, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_add_listen_handler";
    int v23 = "%{public}s called with null protocol";
LABEL_75:
    _os_log_impl(&dword_1830D4000, v21, v22, v23, buf, 0xCu);
  }
LABEL_76:
  if (v20) {
    free(v20);
  }
  return 0;
}

void nw_http2_transport_send_settings(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v30 = __nwlog_obj();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v36 = "nw_http2_transport_send_settings";
      __int16 v37 = 2082;
      uint64_t v38 = a1 + 205;
      _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  id v2 = nw_parameters_copy_protocol_value(*(void **)(a1 + 88), a1, "streamReceiveWindow");
  if (v2)
  {
    uint64_t v3 = v2;
    int value = xpc_uint64_get_value(v2);
    xpc_release(v3);
  }
  else
  {
    int value = 0xFFFF;
  }
  id v5 = nw_parameters_copy_protocol_value(*(void **)(a1 + 88), a1, "connectionReceiveWindow");
  if (v5)
  {
    os_log_type_t v6 = v5;
    int v7 = xpc_uint64_get_value(v5);
    xpc_release(v6);
  }
  else
  {
    int v7 = 0xFFFF;
  }
  uint64_t v41 = 0x6400000003;
  int v42 = 4;
  int v43 = value;
  if (nghttp2_submit_settings())
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = nghttp2_strerror();
    *(_DWORD *)buf = 136446466;
    __int16 v36 = "nw_http2_transport_send_settings";
    __int16 v37 = 2082;
    uint64_t v38 = v8;
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v9, &type, &v33)) {
      goto LABEL_23;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_23;
      }
      uint64_t v12 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      __int16 v36 = "nw_http2_transport_send_settings";
      __int16 v37 = 2082;
      uint64_t v38 = v12;
      BOOL v13 = "%{public}s nghttp2_submit_settings: %{public}s failed";
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = gLogObj;
      os_log_type_t v11 = type;
      BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v15)
        {
          uint64_t v16 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          __int16 v36 = "nw_http2_transport_send_settings";
          __int16 v37 = 2082;
          uint64_t v38 = v16;
          __int16 v39 = 2082;
          __int16 v40 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s nghttp2_submit_settings: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(backtrace_string);
        goto LABEL_23;
      }
      if (!v15)
      {
LABEL_23:
        if (v9) {
          free(v9);
        }
        goto LABEL_25;
      }
      uint64_t v18 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      __int16 v36 = "nw_http2_transport_send_settings";
      __int16 v37 = 2082;
      uint64_t v38 = v18;
      BOOL v13 = "%{public}s nghttp2_submit_settings: %{public}s failed, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_23;
      }
      uint64_t v17 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      __int16 v36 = "nw_http2_transport_send_settings";
      __int16 v37 = 2082;
      uint64_t v38 = v17;
      BOOL v13 = "%{public}s nghttp2_submit_settings: %{public}s failed, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v10, v11, v13, buf, 0x16u);
    goto LABEL_23;
  }
LABEL_25:
  if (v7 == 0xFFFF || !nghttp2_session_set_local_window_size()) {
    goto LABEL_43;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v19 = nghttp2_strerror();
  *(_DWORD *)buf = 136446466;
  __int16 v36 = "nw_http2_transport_send_settings";
  __int16 v37 = 2082;
  uint64_t v38 = v19;
  uint64_t v20 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (__nwlog_fault(v20, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v21 = gLogObj;
      os_log_type_t v22 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_41;
      }
      uint64_t v23 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      __int16 v36 = "nw_http2_transport_send_settings";
      __int16 v37 = 2082;
      uint64_t v38 = v23;
      char v24 = "%{public}s nghttp2_session_set_local_window_size: %{public}s failed";
      goto LABEL_40;
    }
    if (!v33)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v21 = gLogObj;
      os_log_type_t v22 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_41;
      }
      uint64_t v28 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      __int16 v36 = "nw_http2_transport_send_settings";
      __int16 v37 = 2082;
      uint64_t v38 = v28;
      char v24 = "%{public}s nghttp2_session_set_local_window_size: %{public}s failed, backtrace limit exceeded";
      goto LABEL_40;
    }
    BOOL v25 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v21 = gLogObj;
    os_log_type_t v22 = type;
    BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v25)
    {
      if (v26)
      {
        uint64_t v27 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        __int16 v36 = "nw_http2_transport_send_settings";
        __int16 v37 = 2082;
        uint64_t v38 = v27;
        __int16 v39 = 2082;
        __int16 v40 = v25;
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s nghttp2_session_set_local_window_size: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v25);
      goto LABEL_41;
    }
    if (v26)
    {
      uint64_t v29 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      __int16 v36 = "nw_http2_transport_send_settings";
      __int16 v37 = 2082;
      uint64_t v38 = v29;
      char v24 = "%{public}s nghttp2_session_set_local_window_size: %{public}s failed, no backtrace";
LABEL_40:
      _os_log_impl(&dword_1830D4000, v21, v22, v24, buf, 0x16u);
    }
  }
LABEL_41:
  if (v20) {
    free(v20);
  }
LABEL_43:
  if (gLogDatapath)
  {
    char v31 = __nwlog_obj();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v36 = "nw_http2_transport_send_settings";
      __int16 v37 = 2082;
      uint64_t v38 = a1 + 205;
      _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s submitted settings to nghttp2", buf, 0x16u);
    }
  }
  nw_http2_transport_session_send(a1);
  if (gLogDatapath)
  {
    int v32 = __nwlog_obj();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v36 = "nw_http2_transport_send_settings";
      __int16 v37 = 2082;
      uint64_t v38 = a1 + 205;
      _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s nghttp2_session_send complete with settings", buf, 0x16u);
    }
  }
}

uint64_t ___ZL45nw_protocol_http2_transport_process_connectedP27nw_protocol_http2_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)nw_hash_node_get_extra(a2);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v12 = *(void *)(a1 + 32);
    if (v12) {
      BOOL v13 = (const char *)(v12 + 205);
    }
    else {
      BOOL v13 = "";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
    __int16 v59 = 2082;
    char v60 = v13;
    __int16 v61 = 2048;
    *(void *)BOOL v62 = a2;
    char v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (__nwlog_fault(v14, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v15 = gLogObj;
        os_log_type_t v16 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_59;
        }
        uint64_t v17 = *(void *)(a1 + 32);
        if (v17) {
          uint64_t v18 = (const char *)(v17 + 205);
        }
        else {
          uint64_t v18 = "";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
        __int16 v59 = 2082;
        char v60 = v18;
        __int16 v61 = 2048;
        *(void *)BOOL v62 = a2;
        uint64_t v19 = "%{public}s %{public}s protocol hash node %p didn't have stream extra";
        goto LABEL_58;
      }
      if (!v55)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v15 = gLogObj;
        os_log_type_t v16 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_59;
        }
        uint64_t v30 = *(void *)(a1 + 32);
        if (v30) {
          char v31 = (const char *)(v30 + 205);
        }
        else {
          char v31 = "";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
        __int16 v59 = 2082;
        char v60 = v31;
        __int16 v61 = 2048;
        *(void *)BOOL v62 = a2;
        uint64_t v19 = "%{public}s %{public}s protocol hash node %p didn't have stream extra, backtrace limit exceeded";
        goto LABEL_58;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v15 = gLogObj;
      os_log_type_t v16 = type;
      BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v21) {
          goto LABEL_59;
        }
        uint64_t v36 = *(void *)(a1 + 32);
        if (v36) {
          __int16 v37 = (const char *)(v36 + 205);
        }
        else {
          __int16 v37 = "";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
        __int16 v59 = 2082;
        char v60 = v37;
        __int16 v61 = 2048;
        *(void *)BOOL v62 = a2;
        uint64_t v19 = "%{public}s %{public}s protocol hash node %p didn't have stream extra, no backtrace";
        goto LABEL_58;
      }
      if (v21)
      {
        uint64_t v22 = *(void *)(a1 + 32);
        if (v22) {
          uint64_t v23 = (const char *)(v22 + 205);
        }
        else {
          uint64_t v23 = "";
        }
        *(_DWORD *)buf = 136446978;
        uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
        __int16 v59 = 2082;
        char v60 = v23;
        __int16 v61 = 2048;
        *(void *)BOOL v62 = a2;
        *(_WORD *)&os_log_type_t v62[8] = 2082;
        *(void *)&v62[10] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s %{public}s protocol hash node %p didn't have stream extra, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(backtrace_string);
    }
    goto LABEL_59;
  }
  if (gLogDatapath)
  {
    __int16 v47 = __nwlog_obj();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v48 = *(void *)(a1 + 32);
      __int16 v49 = (const char *)(v48 + 205);
      BOOL v28 = v48 == 0;
      int v50 = *(_DWORD *)(v4 + 32);
      if (v28) {
        __int16 v49 = "";
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
      __int16 v59 = 2082;
      char v60 = v49;
      __int16 v61 = 1024;
      *(_DWORD *)BOOL v62 = v50;
      _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s checking existing stream %d to see if waiting_for_connect", buf, 0x1Cu);
    }
  }
  if ((*(unsigned char *)(v4 + 36) & 2) == 0) {
    return 1;
  }
  if ((*(unsigned char *)(v4 + 36) & 8) != 0 && *(_DWORD *)(v4 + 32) == 1)
  {
    if (gLogDatapath)
    {
      id v5 = __nwlog_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        if (v6) {
          int v7 = (const char *)(v6 + 205);
        }
        else {
          int v7 = "";
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
        __int16 v59 = 2082;
        char v60 = v7;
        uint64_t v8 = "%{public}s %{public}s deferring stream connect for initial responder stream";
        os_log_type_t v9 = v5;
        os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
        uint32_t v11 = 22;
LABEL_37:
        _os_log_impl(&dword_1830D4000, v9, v10, v8, buf, v11);
        return 1;
      }
    }
    return 1;
  }
  if (gLogDatapath)
  {
    uint64_t v51 = __nwlog_obj();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v52 = *(void *)(a1 + 32);
      int v53 = (const char *)(v52 + 205);
      BOOL v28 = v52 == 0;
      int v54 = *(_DWORD *)(v4 + 32);
      if (v28) {
        int v53 = "";
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
      __int16 v59 = 2082;
      char v60 = v53;
      __int16 v61 = 1024;
      *(_DWORD *)BOOL v62 = v54;
      _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s calling connect on waiting stream %d", buf, 0x1Cu);
    }
  }
  uint64_t object = nw_hash_node_get_object(a2);
  if (!object)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v32 = *(void *)(a1 + 32);
    if (v32) {
      char v33 = (const char *)(v32 + 205);
    }
    else {
      char v33 = "";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
    __int16 v59 = 2082;
    char v60 = v33;
    __int16 v61 = 2048;
    *(void *)BOOL v62 = a2;
    char v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (__nwlog_fault(v14, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v15 = gLogObj;
        os_log_type_t v16 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_59;
        }
        uint64_t v34 = *(void *)(a1 + 32);
        if (v34) {
          __int16 v35 = (const char *)(v34 + 205);
        }
        else {
          __int16 v35 = "";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
        __int16 v59 = 2082;
        char v60 = v35;
        __int16 v61 = 2048;
        *(void *)BOOL v62 = a2;
        uint64_t v19 = "%{public}s %{public}s protocol hash node %p didn't have object";
        goto LABEL_58;
      }
      if (v55)
      {
        __int16 v39 = (char *)__nw_create_backtrace_string();
        BOOL v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v40 = os_log_type_enabled(v15, type);
        if (v39)
        {
          if (v40)
          {
            uint64_t v41 = *(void *)(a1 + 32);
            if (v41) {
              int v42 = (const char *)(v41 + 205);
            }
            else {
              int v42 = "";
            }
            *(_DWORD *)buf = 136446978;
            uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
            __int16 v59 = 2082;
            char v60 = v42;
            __int16 v61 = 2048;
            *(void *)BOOL v62 = a2;
            *(_WORD *)&os_log_type_t v62[8] = 2082;
            *(void *)&v62[10] = v39;
            _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s %{public}s protocol hash node %p didn't have object, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v39);
          if (!v14) {
            return 1;
          }
LABEL_60:
          free(v14);
          return 1;
        }
        if (v40)
        {
          uint64_t v45 = *(void *)(a1 + 32);
          if (v45) {
            os_log_type_t v46 = (const char *)(v45 + 205);
          }
          else {
            os_log_type_t v46 = "";
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
          __int16 v59 = 2082;
          char v60 = v46;
          __int16 v61 = 2048;
          *(void *)BOOL v62 = a2;
          uint64_t v19 = "%{public}s %{public}s protocol hash node %p didn't have object, no backtrace";
LABEL_58:
          _os_log_impl(&dword_1830D4000, v15, v16, v19, buf, 0x20u);
        }
      }
      else
      {
        BOOL v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          uint64_t v43 = *(void *)(a1 + 32);
          if (v43) {
            uint64_t v44 = (const char *)(v43 + 205);
          }
          else {
            uint64_t v44 = "";
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
          __int16 v59 = 2082;
          char v60 = v44;
          __int16 v61 = 2048;
          *(void *)BOOL v62 = a2;
          uint64_t v19 = "%{public}s %{public}s protocol hash node %p didn't have object, backtrace limit exceeded";
          goto LABEL_58;
        }
      }
    }
LABEL_59:
    if (!v14) {
      return 1;
    }
    goto LABEL_60;
  }
  if (!nw_http2_transport_stream_connect(*(void *)(a1 + 32), v4, object))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v25 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v27 = (const char *)(v26 + 205);
      BOOL v28 = v26 == 0;
      int v29 = *(_DWORD *)(v4 + 32);
      if (v28) {
        uint64_t v27 = "";
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
      __int16 v59 = 2082;
      char v60 = v27;
      __int16 v61 = 1024;
      *(_DWORD *)BOOL v62 = v29;
      *(_WORD *)&v62[4] = 2048;
      *(void *)&v62[6] = v4;
      uint64_t v8 = "%{public}s %{public}s nw_http2_transport_stream_connect failed for stream id %d (%p)";
      os_log_type_t v9 = v25;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
      uint32_t v11 = 38;
      goto LABEL_37;
    }
  }
  return 1;
}

uint64_t nw_protocol_http2_transport_get_parameters(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[11];
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_http2_transport_get_parameters";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http2_transport_get_parameters";
        uint64_t v6 = "%{public}s called with null http2_transport";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http2_transport_get_parameters";
        uint64_t v6 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http2_transport_get_parameters";
        uint64_t v6 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      char v14 = "nw_protocol_http2_transport_get_parameters";
      __int16 v15 = 2082;
      os_log_type_t v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_protocol_http2_transport_get_parameters";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http2_transport_get_parameters";
        uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http2_transport_get_parameters";
        uint64_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      char v14 = "nw_protocol_http2_transport_get_parameters";
      __int16 v15 = 2082;
      os_log_type_t v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_http2_transport_get_parameters";
    uint64_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

__n128 __Block_byref_object_copy__38426(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZL44nw_protocol_http2_transport_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v3;
  }
  void *v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return 1;
}

void nw_protocol_http2_transport_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = (char *)a1->handle;
    if (handle)
    {
      if (gLogDatapath)
      {
        BOOL v10 = __nwlog_obj();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 205;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
        }
      }
      if (nghttp2_session_want_write())
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v3 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 205;
          _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}s session send wanted by nghttp2 library", buf, 0x16u);
        }
        nw_http2_transport_session_send((uint64_t)handle);
        if (!gLogDatapath) {
          goto LABEL_11;
        }
        uint64_t v4 = __nwlog_obj();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 205;
          _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called session send for nghttp2 session", buf, 0x16u);
        }
      }
      if (gLogDatapath)
      {
        char v11 = __nwlog_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)BOOL v21 = 136446466;
          uint64_t v22 = "nw_http2_transport_drain_output_frames";
          __int16 v23 = 2082;
          char v24 = handle + 205;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", v21, 0x16u);
        }
        if (gLogDatapath)
        {
          uint64_t v12 = __nwlog_obj();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)BOOL v21 = 136446466;
            uint64_t v22 = "nw_http2_transport_drain_output_frames";
            __int16 v23 = 2082;
            char v24 = handle + 205;
            _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s draining output frames", v21, 0x16u);
          }
        }
      }
LABEL_11:
      os_log_type_t v5 = (char *)*((void *)handle + 14);
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL38nw_http2_transport_drain_output_framesP27nw_protocol_http2_transport_block_invoke;
      uint64_t v19 = &__block_descriptor_tmp_38_38466;
      uint64_t v20 = handle;
      nw_hash_table_apply(v5, (uint64_t)buf);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    v21[0] = 16;
    char v17 = 0;
    if (__nwlog_fault(v6, v21, &v17))
    {
      if (v21[0] == 17)
      {
        int v7 = __nwlog_obj();
        os_log_type_t v8 = v21[0];
        if (!os_log_type_enabled(v7, (os_log_type_t)v21[0])) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
        os_log_type_t v9 = "%{public}s called with null http2_transport";
        goto LABEL_47;
      }
      if (!v17)
      {
        int v7 = __nwlog_obj();
        os_log_type_t v8 = v21[0];
        if (!os_log_type_enabled(v7, (os_log_type_t)v21[0])) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
        os_log_type_t v9 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_47;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v8 = v21[0];
      BOOL v16 = os_log_type_enabled(v7, (os_log_type_t)v21[0]);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v6) {
          goto LABEL_49;
        }
        return;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
        os_log_type_t v9 = "%{public}s called with null http2_transport, no backtrace";
LABEL_47:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    v21[0] = 16;
    char v17 = 0;
    if (!__nwlog_fault(v6, v21, &v17)) {
      goto LABEL_48;
    }
    if (v21[0] == 17)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = v21[0];
      if (!os_log_type_enabled(v7, (os_log_type_t)v21[0])) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
      os_log_type_t v9 = "%{public}s called with null protocol";
      goto LABEL_47;
    }
    if (!v17)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = v21[0];
      if (!os_log_type_enabled(v7, (os_log_type_t)v21[0])) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
      os_log_type_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_47;
    }
    BOOL v13 = (char *)__nw_create_backtrace_string();
    int v7 = __nwlog_obj();
    os_log_type_t v8 = v21[0];
    BOOL v14 = os_log_type_enabled(v7, (os_log_type_t)v21[0]);
    if (!v13)
    {
      if (!v14) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
      os_log_type_t v9 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_47;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v13;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v13);
  }
LABEL_48:
  if (v6) {
LABEL_49:
  }
    free(v6);
}

uint64_t ___ZL38nw_http2_transport_drain_output_framesP27nw_protocol_http2_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  if (!object)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    uint64_t v8 = *(void *)(a1 + 32);
    int v17 = 136446722;
    uint64_t v18 = "nw_http2_transport_drain_output_frames_block_invoke";
    if (v8) {
      os_log_type_t v9 = (const char *)(v8 + 205);
    }
    else {
      os_log_type_t v9 = "";
    }
    __int16 v19 = 2082;
    uint64_t v20 = v9;
    __int16 v21 = 2048;
    uint64_t v22 = a2;
    BOOL v10 = "%{public}s %{public}s input protocol in node %p in protocol table is NULL, skipping";
    char v11 = v7;
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
LABEL_16:
    _os_log_impl(&dword_1830D4000, v11, v12, v10, (uint8_t *)&v17, 0x20u);
    return 1;
  }
  uint64_t v5 = object;
  uint64_t v6 = *(void *)nw_hash_node_get_extra(a2);
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v13 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
      return 1;
    }
    uint64_t v14 = *(void *)(a1 + 32);
    int v17 = 136446722;
    uint64_t v18 = "nw_http2_transport_drain_output_frames_block_invoke";
    if (v14) {
      __int16 v15 = (const char *)(v14 + 205);
    }
    else {
      __int16 v15 = "";
    }
    __int16 v19 = 2082;
    uint64_t v20 = v15;
    __int16 v21 = 2048;
    uint64_t v22 = v5;
    BOOL v10 = "%{public}s %{public}s stream not found for input protocol %p, not draining output frames";
    char v11 = v13;
    os_log_type_t v12 = OS_LOG_TYPE_INFO;
    goto LABEL_16;
  }
  if (nw_http2_transport_drain_next_frame_for_stream(*(void *)(a1 + 32), v5, v6, 1))
  {
    while ((nw_http2_transport_drain_next_frame_for_stream(*(void *)(a1 + 32), v5, v6, 1) & 1) != 0)
      ;
  }
  return 1;
}

BOOL nw_protocol_http2_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  v47[1] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)os_log_type_t v46 = 136446210;
    *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
    char v24 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v37 = 0;
    if (!__nwlog_fault(v24, buf, &v37)) {
      goto LABEL_86;
    }
    if (buf[0] == 17)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0])) {
        goto LABEL_86;
      }
      *(_DWORD *)os_log_type_t v46 = 136446210;
      *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
      uint64_t v27 = "%{public}s called with null protocol";
      goto LABEL_85;
    }
    if (!v37)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0])) {
        goto LABEL_86;
      }
      *(_DWORD *)os_log_type_t v46 = 136446210;
      *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
      uint64_t v27 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v25 = __nwlog_obj();
    os_log_type_t v26 = buf[0];
    BOOL v30 = os_log_type_enabled(v25, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (!v30) {
        goto LABEL_86;
      }
      *(_DWORD *)os_log_type_t v46 = 136446210;
      *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
      uint64_t v27 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_85;
    }
    if (!v30) {
      goto LABEL_66;
    }
    *(_DWORD *)os_log_type_t v46 = 136446466;
    *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
    *(_WORD *)&v46[12] = 2082;
    *(void *)&v46[14] = backtrace_string;
    char v31 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_65:
    _os_log_impl(&dword_1830D4000, v25, v26, v31, v46, 0x16u);
    goto LABEL_66;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)os_log_type_t v46 = 136446210;
    *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
    char v24 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v37 = 0;
    if (!__nwlog_fault(v24, buf, &v37)) {
      goto LABEL_86;
    }
    if (buf[0] == 17)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0])) {
        goto LABEL_86;
      }
      *(_DWORD *)os_log_type_t v46 = 136446210;
      *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
      uint64_t v27 = "%{public}s called with null http2_transport";
      goto LABEL_85;
    }
    if (!v37)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0])) {
        goto LABEL_86;
      }
      *(_DWORD *)os_log_type_t v46 = 136446210;
      *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
      uint64_t v27 = "%{public}s called with null http2_transport, backtrace limit exceeded";
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v25 = __nwlog_obj();
    os_log_type_t v26 = buf[0];
    BOOL v32 = os_log_type_enabled(v25, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (!v32) {
        goto LABEL_86;
      }
      *(_DWORD *)os_log_type_t v46 = 136446210;
      *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
      uint64_t v27 = "%{public}s called with null http2_transport, no backtrace";
      goto LABEL_85;
    }
    if (!v32) {
      goto LABEL_66;
    }
    *(_DWORD *)os_log_type_t v46 = 136446466;
    *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
    *(_WORD *)&v46[12] = 2082;
    *(void *)&v46[14] = backtrace_string;
    char v31 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
    goto LABEL_65;
  }
  if (gLogDatapath)
  {
    BOOL v28 = __nwlog_obj();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)os_log_type_t v46 = 136446466;
      *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
      *(_WORD *)&v46[12] = 2082;
      *(void *)&v46[14] = (char *)handle + 205;
      _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", v46, 0x16u);
    }
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)os_log_type_t v46 = 136446210;
    *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
    char v24 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v37 = 0;
    if (!__nwlog_fault(v24, buf, &v37)) {
      goto LABEL_86;
    }
    if (buf[0] == 17)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0])) {
        goto LABEL_86;
      }
      *(_DWORD *)os_log_type_t v46 = 136446210;
      *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
      uint64_t v27 = "%{public}s called with null old_input_protocol";
      goto LABEL_85;
    }
    if (!v37)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0])) {
        goto LABEL_86;
      }
      *(_DWORD *)os_log_type_t v46 = 136446210;
      *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
      uint64_t v27 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v25 = __nwlog_obj();
    os_log_type_t v26 = buf[0];
    BOOL v33 = os_log_type_enabled(v25, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (!v33) {
        goto LABEL_86;
      }
      *(_DWORD *)os_log_type_t v46 = 136446210;
      *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
      uint64_t v27 = "%{public}s called with null old_input_protocol, no backtrace";
      goto LABEL_85;
    }
    if (!v33) {
      goto LABEL_66;
    }
    *(_DWORD *)os_log_type_t v46 = 136446466;
    *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
    *(_WORD *)&v46[12] = 2082;
    *(void *)&v46[14] = backtrace_string;
    char v31 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
    goto LABEL_65;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)os_log_type_t v46 = 136446210;
    *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
    char v24 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v37 = 0;
    if (!__nwlog_fault(v24, buf, &v37)) {
      goto LABEL_86;
    }
    if (buf[0] == 17)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0])) {
        goto LABEL_86;
      }
      *(_DWORD *)os_log_type_t v46 = 136446210;
      *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
      uint64_t v27 = "%{public}s called with null new_input_protocol";
      goto LABEL_85;
    }
    if (!v37)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0])) {
        goto LABEL_86;
      }
      *(_DWORD *)os_log_type_t v46 = 136446210;
      *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
      uint64_t v27 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v25 = __nwlog_obj();
    os_log_type_t v26 = buf[0];
    BOOL v34 = os_log_type_enabled(v25, (os_log_type_t)buf[0]);
    if (backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)os_log_type_t v46 = 136446466;
        *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
        *(_WORD *)&v46[12] = 2082;
        *(void *)&v46[14] = backtrace_string;
        char v31 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
        goto LABEL_65;
      }
LABEL_66:
      free(backtrace_string);
      goto LABEL_86;
    }
    if (!v34) {
      goto LABEL_86;
    }
    *(_DWORD *)os_log_type_t v46 = 136446210;
    *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
    uint64_t v27 = "%{public}s called with null new_input_protocol, no backtrace";
LABEL_85:
    _os_log_impl(&dword_1830D4000, v25, v26, v27, v46, 0xCu);
LABEL_86:
    if (v24) {
      free(v24);
    }
    return 0;
  }
  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)os_log_type_t v46 = 136446466;
    *(void *)&v46[4] = "nw_protocol_http2_replace_input_handler";
    *(_WORD *)&v46[12] = 2082;
    *(void *)&v46[14] = (char *)handle + 205;
    uint64_t v13 = "%{public}s %{public}s Failed to find old node";
    uint64_t v14 = v46;
    __int16 v15 = v11;
    uint32_t v16 = 22;
LABEL_28:
    _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, v13, v14, v16);
    return 0;
  }
  uint64_t v8 = output_handler_context[4];
  v47[0] = 0;
  memset(v46, 0, sizeof(v46));
  nw_http2_transport_copy_stream(v8, (uint64_t)v46);
  nw_hash_table_remove_node(handle[14], (uint64_t)output_handler_context);
  uint64_t v9 = handle[15];
  if (v9)
  {
    BOOL node = nw_hash_table_get_node(v9, (uint64_t)v47, 4);
    if (node) {
      nw_hash_table_remove_node(handle[15], node);
    }
  }
  else
  {
    BOOL node = 0;
  }
  char v37 = 0;
  BOOL v17 = nw_hash_table_add_object(handle[14], (uint64_t)a3, &v37);
  if (!v37)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v20 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446978;
    __int16 v39 = "nw_protocol_http2_replace_input_handler";
    __int16 v40 = 2082;
    uint64_t v41 = (char *)handle + 205;
    __int16 v42 = 1042;
    int v43 = 16;
    __int16 v44 = 2098;
    uint64_t v45 = a3;
    uint64_t v13 = "%{public}s %{public}s HTTP/2 already has input handler registered for %{public,uuid_t}.16P";
    uint64_t v14 = buf;
    __int16 v15 = v20;
    uint32_t v16 = 38;
    goto LABEL_28;
  }
  uint64_t v18 = (void *)v17;
  uint64_t v19 = *(void *)nw_hash_node_get_extra(v17);
  nw_http2_transport_copy_stream((uint64_t)v46, v19);
  a3->output_handler_context = v18;
  if (!a3->output_handler) {
    nw_protocol_set_output_handler((uint64_t)a3, (uint64_t)a1);
  }
  if (a1->default_input_handler != a2)
  {
    if (!node) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a3);
  *(_OWORD *)handle = *(_OWORD *)a3->flow_id;
  if (node)
  {
LABEL_22:
    BOOL v21 = nw_hash_table_add_object(handle[15], v19, &v37);
    if (v37)
    {
      *(void *)nw_hash_node_get_extra(v21) = a3;
      goto LABEL_24;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v22 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v23 = *(_DWORD *)(v19 + 32);
    *(_DWORD *)buf = 136446722;
    __int16 v39 = "nw_protocol_http2_replace_input_handler";
    __int16 v40 = 2082;
    uint64_t v41 = (char *)handle + 205;
    __int16 v42 = 1024;
    int v43 = v23;
    uint64_t v13 = "%{public}s %{public}s HTTP/2 already has stream id registered for %d";
    uint64_t v14 = buf;
    __int16 v15 = v22;
    uint32_t v16 = 28;
    goto LABEL_28;
  }
LABEL_24:
  if (gLogDatapath)
  {
    __int16 v35 = __nwlog_obj();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      int v36 = nw_hash_table_count(handle[14]);
      *(_DWORD *)buf = 136446722;
      __int16 v39 = "nw_protocol_http2_replace_input_handler";
      __int16 v40 = 2082;
      uint64_t v41 = (char *)handle + 205;
      __int16 v42 = 1024;
      int v43 = v36;
      _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s replaced input handler, have %u input handlers", buf, 0x1Cu);
    }
  }
  return 1;
}

void nw_http2_transport_copy_stream(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_http2_transport_copy_stream";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_http2_transport_copy_stream";
      uint64_t v9 = "%{public}s called with null old_stream";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_http2_transport_copy_stream";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null old_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_37:
        if (!v6) {
          return;
        }
LABEL_38:
        free(v6);
        return;
      }
      if (!v11) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_http2_transport_copy_stream";
      uint64_t v9 = "%{public}s called with null old_stream, no backtrace";
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_http2_transport_copy_stream";
      uint64_t v9 = "%{public}s called with null old_stream, backtrace limit exceeded";
    }
LABEL_36:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_37;
  }
  if (a2)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = a2;
    if (*(void *)a1)
    {
      *(void *)a2 = *(void *)a1;
      *(void *)(*(void *)a1 + 24) = a2;
      *(void *)(a2 + 8) = *(void *)(a1 + 8);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = a1;
    }
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = a2 + 16;
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      *(void *)(a2 + 16) = v2;
      *(void *)(*(void *)(a1 + 16) + 24) = a2 + 16;
      *(void *)(a2 + 24) = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = a1 + 16;
    }
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
    int v3 = *(unsigned char *)(a2 + 36) & 0xFE | *(unsigned char *)(a1 + 36) & 1;
    *(unsigned char *)(a2 + 36) = v3;
    unsigned int v4 = v3 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a1 + 36) >> 1) & 1));
    *(unsigned char *)(a2 + 36) = v4;
    unsigned int v5 = v4 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a1 + 36) >> 2) & 1));
    *(unsigned char *)(a2 + 36) = v5;
    *(unsigned char *)(a2 + 36) = v5 & 0xF7 | *(unsigned char *)(a1 + 36) & 8;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_http2_transport_copy_stream";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v6, &type, &v14)) {
    goto LABEL_37;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_http2_transport_copy_stream";
    uint64_t v9 = "%{public}s called with null new_stream";
    goto LABEL_36;
  }
  if (!v14)
  {
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_http2_transport_copy_stream";
    uint64_t v9 = "%{public}s called with null new_stream, backtrace limit exceeded";
    goto LABEL_36;
  }
  os_log_type_t v12 = (char *)__nw_create_backtrace_string();
  uint64_t v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  BOOL v13 = os_log_type_enabled(v7, type);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_http2_transport_copy_stream";
    uint64_t v9 = "%{public}s called with null new_stream, no backtrace";
    goto LABEL_36;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v17 = "nw_http2_transport_copy_stream";
    __int16 v18 = 2082;
    uint64_t v19 = v12;
    _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null new_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v12);
  if (v6) {
    goto LABEL_38;
  }
}

BOOL nw_protocol_http2_transport_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v41 = __nwlog_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
      __int16 v67 = 2048;
      __int16 v68 = a2;
      _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s called with input_protocol %p", buf, 0x16u);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v63 = 0;
    if (!__nwlog_fault(v20, &type, &v63)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
      int v23 = "%{public}s called with null protocol";
      goto LABEL_128;
    }
    if (!v63)
    {
      __int16 v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
      int v23 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_128;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v42 = __nwlog_obj();
    os_log_type_t v43 = type;
    BOOL v50 = os_log_type_enabled(v42, type);
    if (!backtrace_string)
    {
      if (!v50) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
      int v23 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_128;
    }
    if (!v50) {
      goto LABEL_104;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
    __int16 v67 = 2082;
    __int16 v68 = (nw_protocol *)backtrace_string;
    uint64_t v51 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_103;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v63 = 0;
    if (!__nwlog_fault(v20, &type, &v63)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
      int v23 = "%{public}s called with null http2_transport";
      goto LABEL_128;
    }
    if (!v63)
    {
      __int16 v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
      int v23 = "%{public}s called with null http2_transport, backtrace limit exceeded";
      goto LABEL_128;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v42 = __nwlog_obj();
    os_log_type_t v43 = type;
    BOOL v52 = os_log_type_enabled(v42, type);
    if (!backtrace_string)
    {
      if (!v52) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
      int v23 = "%{public}s called with null http2_transport, no backtrace";
      goto LABEL_128;
    }
    if (!v52) {
      goto LABEL_104;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
    __int16 v67 = 2082;
    __int16 v68 = (nw_protocol *)backtrace_string;
    uint64_t v51 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
LABEL_103:
    _os_log_impl(&dword_1830D4000, v42, v43, v51, buf, 0x16u);
    goto LABEL_104;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v63 = 0;
    if (!__nwlog_fault(v20, &type, &v63)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
      int v23 = "%{public}s called with null input_protocol";
      goto LABEL_128;
    }
    if (v63)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      BOOL v53 = os_log_type_enabled(v42, type);
      if (backtrace_string)
      {
        if (v53)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
          __int16 v67 = 2082;
          __int16 v68 = (nw_protocol *)backtrace_string;
          uint64_t v51 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
          goto LABEL_103;
        }
LABEL_104:
        free(backtrace_string);
        goto LABEL_62;
      }
      if (!v53) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
      int v23 = "%{public}s called with null input_protocol, no backtrace";
    }
    else
    {
      __int16 v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
      int v23 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }
LABEL_128:
    int v36 = v42;
    os_log_type_t v37 = v43;
    uint32_t v38 = 12;
    goto LABEL_61;
  }
  if (!*((void *)handle + 14))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v66 = "nw_http2_transport_remove_input_handler";
    __int16 v44 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v63 = 0;
    if (!__nwlog_fault(v44, &type, &v63)) {
      goto LABEL_132;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v45 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (!os_log_type_enabled(v45, type)) {
        goto LABEL_132;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v66 = "nw_http2_transport_remove_input_handler";
      __int16 v47 = "%{public}s called with null table";
    }
    else if (v63)
    {
      int v54 = (char *)__nw_create_backtrace_string();
      uint64_t v45 = __nwlog_obj();
      os_log_type_t v46 = type;
      BOOL v55 = os_log_type_enabled(v45, type);
      if (v54)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v66 = "nw_http2_transport_remove_input_handler";
          __int16 v67 = 2082;
          __int16 v68 = (nw_protocol *)v54;
          _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s called with null table, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v54);
        goto LABEL_132;
      }
      if (!v55)
      {
LABEL_132:
        if (v44) {
          free(v44);
        }
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v66 = "nw_http2_transport_remove_input_handler";
      __int16 v47 = "%{public}s called with null table, no backtrace";
    }
    else
    {
      uint64_t v45 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (!os_log_type_enabled(v45, type)) {
        goto LABEL_132;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v66 = "nw_http2_transport_remove_input_handler";
      __int16 v47 = "%{public}s called with null table, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v45, v46, v47, buf, 0xCu);
    goto LABEL_132;
  }
  if (gLogDatapath)
  {
    uint64_t v48 = __nwlog_obj();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v66 = "nw_http2_transport_remove_input_handler";
      __int16 v67 = 2082;
      __int16 v68 = (nw_protocol *)(handle + 205);
      _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  output_handler_context = a2->output_handler_context;
  if (output_handler_context)
  {
    uint64_t v6 = output_handler_context[4];
    if (v6)
    {
      if ((*(unsigned char *)(v6 + 36) & 1) != 0 || *(_DWORD *)(v6 + 32) != -1)
      {
        nw_http2_transport_stream_close((uint64_t)handle, v6);
LABEL_21:
        if (!nw_http2_transport_remove_from_protocol_table((uint64_t)handle, (uint64_t)a2))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v15 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v66 = "nw_http2_transport_remove_input_handler";
            __int16 v67 = 2082;
            __int16 v68 = (nw_protocol *)(handle + 205);
            __int16 v69 = 2048;
            *(void *)uint64_t v70 = a2;
            _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s %{public}s unable to remove protocol %p from protocol table", buf, 0x20u);
          }
        }
        if (a2->output_handler == a1) {
          nw_protocol_set_output_handler((uint64_t)a2, 0);
        }
        if (v6)
        {
          nw_http2_transport_release_frame_array((nw_frame_array_s *)v6);
          nw_http2_transport_release_frame_array((nw_frame_array_s *)(v6 + 16));
          free((void *)v6);
        }
        uint64_t v16 = *((void *)handle + 14);
        if (v16)
        {
          int v17 = *(_DWORD *)(v16 + 40);
          if (v17)
          {
            if (gLogDatapath)
            {
              uint32_t v56 = __nwlog_obj();
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
                __int16 v67 = 2082;
                __int16 v68 = (nw_protocol *)(handle + 205);
                __int16 v69 = 1024;
                *(_DWORD *)uint64_t v70 = v17;
                _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s not destroying, still have %u input handlers", buf, 0x1Cu);
              }
            }
            if (a1->default_input_handler == a2)
            {
              __int16 v18 = (char *)*((void *)handle + 14);
              v61[0] = MEMORY[0x1E4F143A8];
              v61[1] = 0x40000000;
              v61[2] = ___ZL48nw_protocol_http2_transport_remove_input_handlerP11nw_protocolS0_b_block_invoke_35;
              v61[3] = &__block_descriptor_tmp_36_38554;
              v61[4] = a1;
              v61[5] = handle;
              nw_hash_table_apply(v18, (uint64_t)v61);
            }
            return 1;
          }
          if (gLogDatapath)
          {
            int v57 = __nwlog_obj();
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
              __int16 v67 = 2082;
              __int16 v68 = (nw_protocol *)(handle + 205);
              _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s no more input handlers, scheduling destroy", buf, 0x16u);
            }
          }
          nw_protocol_set_input_handler((uint64_t)a1, 0);
          uint64_t v24 = *((void *)handle + 9);
          if (v24) {
            nw_queue_cancel_source(v24);
          }
          id v25 = nw_parameters_copy_context(*((void **)handle + 11));
          v62[0] = MEMORY[0x1E4F143A8];
          v62[1] = 0x40000000;
          v62[2] = ___ZL48nw_protocol_http2_transport_remove_input_handlerP11nw_protocolS0_b_block_invoke;
          v62[3] = &__block_descriptor_tmp_34_38548;
          v62[4] = a1;
          *((void *)handle + 9) = nw_queue_context_create_source(v25, 2, 3, 0, v62, 0);
          if (v25) {
            os_release(v25);
          }
          id v26 = nw_parameters_copy_protocol_value(*((void **)handle + 11), (uint64_t)handle, "tunnelTeardownDelay");
          if (v26)
          {
            uint64_t v27 = v26;
            *((void *)handle + 8) = xpc_uint64_get_value(v26);
            if (gLogDatapath)
            {
              uint64_t v58 = __nwlog_obj();
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v59 = *((void *)handle + 8);
                *(_DWORD *)buf = 136446722;
                uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
                __int16 v67 = 2082;
                __int16 v68 = (nw_protocol *)(handle + 205);
                __int16 v69 = 2048;
                *(void *)uint64_t v70 = v59;
                _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s destroy timeout set to %lld milliseconds via first stream parameters", buf, 0x20u);
              }
            }
            xpc_release(v27);
            goto LABEL_68;
          }
          BOOL v30 = (const char *)nw_setting_http2_transport_teardown_delay;
          networkd_settings_init();
          if (sCachedSettings)
          {
            pthread_mutex_lock(&sSettingsMutex);
            if (sCachedSettings)
            {
              int64_t int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v30);
              pthread_mutex_unlock(&sSettingsMutex);
              BOOL v32 = (int64_t *)(handle + 64);
              if (int64)
              {
                int64_t *v32 = int64;
                if (!gLogDatapath) {
                  goto LABEL_68;
                }
                BOOL v33 = __nwlog_obj();
                if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_68;
                }
                uint64_t v34 = *((void *)handle + 8);
                *(_DWORD *)buf = 136446722;
                uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
                __int16 v67 = 2082;
                __int16 v68 = (nw_protocol *)(handle + 205);
                __int16 v69 = 2048;
                *(void *)uint64_t v70 = v34;
                __int16 v35 = "%{public}s %{public}s destroy timeout set to %lld milliseconds via the defaults write";
LABEL_138:
                _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, v35, buf, 0x20u);
LABEL_68:
                uint64_t v39 = *((void *)handle + 9);
                dispatch_time_t v40 = dispatch_time(0x8000000000000000, 1000000 * *((void *)handle + 8));
                nw_queue_set_timer_values(v39, v40, 0xFFFFFFFFFFFFFFFFLL, 1000 * *((void *)handle + 8));
                nw_queue_activate_source(*((void *)handle + 9));
                return 1;
              }
LABEL_67:
              int64_t *v32 = 10000;
              if (!gLogDatapath) {
                goto LABEL_68;
              }
              BOOL v33 = __nwlog_obj();
              if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_68;
              }
              uint64_t v60 = *((void *)handle + 8);
              *(_DWORD *)buf = 136446722;
              uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
              __int16 v67 = 2082;
              __int16 v68 = (nw_protocol *)(handle + 205);
              __int16 v69 = 2048;
              *(void *)uint64_t v70 = v60;
              __int16 v35 = "%{public}s %{public}s destroy timeout set to %lld milliseconds by default";
              goto LABEL_138;
            }
            pthread_mutex_unlock(&sSettingsMutex);
          }
          BOOL v32 = (int64_t *)(handle + 64);
          goto LABEL_67;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = (nw_protocol *)(handle + 205);
        *(_DWORD *)buf = 136446722;
        uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
        __int16 v67 = 2082;
        __int16 v68 = (nw_protocol *)(handle + 205);
        __int16 v69 = 2048;
        *(void *)uint64_t v70 = a2;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v63 = 0;
        if (!__nwlog_fault(v20, &type, &v63)) {
          goto LABEL_62;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v21 = gLogObj;
          os_log_type_t v22 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
            __int16 v67 = 2082;
            __int16 v68 = v19;
            __int16 v69 = 2048;
            *(void *)uint64_t v70 = a2;
            int v23 = "%{public}s %{public}s http2_transport_streams_protocol NULL when removing input handler %p";
LABEL_60:
            int v36 = v21;
            os_log_type_t v37 = v22;
            uint32_t v38 = 32;
LABEL_61:
            _os_log_impl(&dword_1830D4000, v36, v37, v23, buf, v38);
          }
        }
        else if (v63)
        {
          BOOL v28 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v21 = gLogObj;
          os_log_type_t v22 = type;
          BOOL v29 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v28)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446978;
              uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
              __int16 v67 = 2082;
              __int16 v68 = v19;
              __int16 v69 = 2048;
              *(void *)uint64_t v70 = a2;
              *(_WORD *)&v70[8] = 2082;
              *(void *)&v70[10] = v28;
              _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s %{public}s http2_transport_streams_protocol NULL when removing input handler %p, dumping backtrace:%{public}s", buf, 0x2Au);
            }
            free(v28);
            goto LABEL_62;
          }
          if (v29)
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
            __int16 v67 = 2082;
            __int16 v68 = v19;
            __int16 v69 = 2048;
            *(void *)uint64_t v70 = a2;
            int v23 = "%{public}s %{public}s http2_transport_streams_protocol NULL when removing input handler %p, no backtrace";
            goto LABEL_60;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v21 = gLogObj;
          os_log_type_t v22 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
            __int16 v67 = 2082;
            __int16 v68 = v19;
            __int16 v69 = 2048;
            *(void *)uint64_t v70 = a2;
            int v23 = "%{public}s %{public}s http2_transport_streams_protocol NULL when removing input handler %p, backtrace limit exceeded";
            goto LABEL_60;
          }
        }
LABEL_62:
        if (v20) {
          free(v20);
        }
        return 0;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v66 = "nw_http2_transport_remove_input_handler";
      __int16 v67 = 2082;
      __int16 v68 = (nw_protocol *)(handle + 205);
      BOOL v11 = "%{public}s %{public}s not closing already closed stream";
      os_log_type_t v12 = v14;
      os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v10 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v66 = "nw_http2_transport_remove_input_handler";
      __int16 v67 = 2082;
      __int16 v68 = (nw_protocol *)(handle + 205);
      BOOL v11 = "%{public}s %{public}s stream not found as extra";
      os_log_type_t v12 = v10;
      os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    }
    _os_log_impl(&dword_1830D4000, v12, v13, v11, buf, 0x16u);
    goto LABEL_21;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    uint64_t v66 = "nw_http2_transport_remove_input_handler";
    __int16 v67 = 2082;
    __int16 v68 = (nw_protocol *)(handle + 205);
    __int16 v69 = 2048;
    *(void *)uint64_t v70 = a2;
    _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s output handler context doesn't exist on protocol %p", buf, 0x20u);
  }
LABEL_14:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v8 = gLogObj;
  BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446978;
    uint64_t v66 = "nw_protocol_http2_transport_remove_input_handler";
    __int16 v67 = 2082;
    __int16 v68 = (nw_protocol *)(handle + 205);
    __int16 v69 = 1042;
    *(_DWORD *)uint64_t v70 = 16;
    *(_WORD *)&v70[4] = 2098;
    *(void *)&v70[6] = a2;
    _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s http2_transport does not have input handler registered for %{public,uuid_t}.16P", buf, 0x26u);
    return 0;
  }
  return result;
}

BOOL nw_http2_transport_remove_from_protocol_table(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v16 = __nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      BOOL v21 = "nw_http2_transport_remove_from_protocol_table";
      __int16 v22 = 2082;
      uint64_t v23 = a1 + 205;
      __int16 v24 = 2048;
      uint64_t v25 = a2;
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for input handler %p", buf, 0x20u);
    }
  }
  uint64_t v4 = *(void *)(a1 + 112);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446722;
    BOOL v21 = "nw_http2_transport_remove_from_protocol_table";
    __int16 v22 = 2082;
    uint64_t v23 = a1 + 205;
    __int16 v24 = 2048;
    uint64_t v25 = a2;
    os_log_type_t v8 = "%{public}s %{public}s protocol based table is NULL, cannot remove protocol %p";
LABEL_11:
    _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, v8, buf, 0x20u);
    return 0;
  }
  BOOL node = nw_hash_table_get_node(v4, a2, 16);
  if (!node)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446722;
    BOOL v21 = "nw_http2_transport_remove_from_protocol_table";
    __int16 v22 = 2082;
    uint64_t v23 = a1 + 205;
    __int16 v24 = 2048;
    uint64_t v25 = a2;
    os_log_type_t v8 = "%{public}s %{public}s protocol %p is not present in id based table, cannot remove";
    goto LABEL_11;
  }
  if (!nw_hash_table_remove_node(*(void *)(a1 + 112), node))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = a1 + 205;
    *(_DWORD *)buf = 136446722;
    BOOL v21 = "nw_http2_transport_remove_from_protocol_table";
    __int16 v22 = 2082;
    uint64_t v23 = a1 + 205;
    __int16 v24 = 2048;
    uint64_t v25 = a2;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18)) {
      goto LABEL_26;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = gLogObj;
      os_log_type_t v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v21 = "nw_http2_transport_remove_from_protocol_table";
      __int16 v22 = 2082;
      uint64_t v23 = v9;
      __int16 v24 = 2048;
      uint64_t v25 = a2;
      os_log_type_t v13 = "%{public}s %{public}s failed to remove protocol node for protocol %p from table";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = gLogObj;
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446978;
          BOOL v21 = "nw_http2_transport_remove_from_protocol_table";
          __int16 v22 = 2082;
          uint64_t v23 = v9;
          __int16 v24 = 2048;
          uint64_t v25 = a2;
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s %{public}s failed to remove protocol node for protocol %p from table, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
        goto LABEL_26;
      }
      if (!v15)
      {
LABEL_26:
        if (v10) {
          free(v10);
        }
        return 0;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v21 = "nw_http2_transport_remove_from_protocol_table";
      __int16 v22 = 2082;
      uint64_t v23 = v9;
      __int16 v24 = 2048;
      uint64_t v25 = a2;
      os_log_type_t v13 = "%{public}s %{public}s failed to remove protocol node for protocol %p from table, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = gLogObj;
      os_log_type_t v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v21 = "nw_http2_transport_remove_from_protocol_table";
      __int16 v22 = 2082;
      uint64_t v23 = v9;
      __int16 v24 = 2048;
      uint64_t v25 = a2;
      os_log_type_t v13 = "%{public}s %{public}s failed to remove protocol node for protocol %p from table, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0x20u);
    goto LABEL_26;
  }
  *(void *)(a2 + 56) = 0;
  if (gLogDatapath)
  {
    int v17 = __nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      BOOL v21 = "nw_http2_transport_remove_from_protocol_table";
      __int16 v22 = 2082;
      uint64_t v23 = a1 + 205;
      __int16 v24 = 2048;
      uint64_t v25 = a2;
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s removed protocol %p from protocol based table", buf, 0x20u);
    }
  }
  return 1;
}

void ___ZL48nw_protocol_http2_transport_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
    uint64_t v2 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v67 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v2, type, &v67)) {
      goto LABEL_45;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (os_log_type_enabled(v28, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
        char v18 = "%{public}s called with null protocol";
LABEL_109:
        uint64_t v25 = v28;
        os_log_type_t v26 = v29;
        uint32_t v27 = 12;
        goto LABEL_44;
      }
LABEL_45:
      if (!v2) {
        return;
      }
      goto LABEL_46;
    }
    if (v67 == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (os_log_type_enabled(v28, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
        char v18 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_109;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v28 = __nwlog_obj();
    os_log_type_t v29 = type[0];
    BOOL v41 = os_log_type_enabled(v28, type[0]);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
        char v18 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_109;
      }
      goto LABEL_45;
    }
    if (!v41) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    BOOL v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_76:
    __int16 v22 = v28;
    os_log_type_t v23 = v29;
    uint32_t v24 = 22;
    goto LABEL_36;
  }
  uint64_t v2 = *(void *)(v1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
    uint64_t v2 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v67 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v2, type, &v67)) {
      goto LABEL_45;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (os_log_type_enabled(v28, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
        char v18 = "%{public}s called with null http2_transport";
        goto LABEL_109;
      }
      goto LABEL_45;
    }
    if (v67 == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (os_log_type_enabled(v28, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
        char v18 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_109;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v28 = __nwlog_obj();
    os_log_type_t v29 = type[0];
    BOOL v42 = os_log_type_enabled(v28, type[0]);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
        char v18 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_109;
      }
      goto LABEL_45;
    }
    if (!v42) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    BOOL v21 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
    goto LABEL_76;
  }
  if (gLogDatapath)
  {
    BOOL v30 = __nwlog_obj();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v2 + 205;
      _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    nw_queue_cancel_source(v3);
    *(void *)(v2 + 72) = 0;
  }
  uint64_t v4 = *(void *)(v2 + 112);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v15 = v2 + 205;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v2 + 205;
    uint64_t v2 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v67 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v2, type, &v67)) {
      goto LABEL_45;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = gLogObj;
      os_log_type_t v17 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v15;
      char v18 = "%{public}s %{public}s http2_transport_streams_protocol NULL when destroying";
LABEL_43:
      uint64_t v25 = v16;
      os_log_type_t v26 = v17;
      uint32_t v27 = 22;
LABEL_44:
      _os_log_impl(&dword_1830D4000, v25, v26, v18, buf, v27);
      goto LABEL_45;
    }
    if (v67 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = gLogObj;
      os_log_type_t v17 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v15;
      char v18 = "%{public}s %{public}s http2_transport_streams_protocol NULL when destroying, backtrace limit exceeded";
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v16 = gLogObj;
    os_log_type_t v17 = type[0];
    BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!backtrace_string)
    {
      if (!v20) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v15;
      char v18 = "%{public}s %{public}s http2_transport_streams_protocol NULL when destroying, no backtrace";
      goto LABEL_43;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v15;
      *(_WORD *)&unsigned char buf[22] = 2082;
      uint64_t v75 = backtrace_string;
      BOOL v21 = "%{public}s %{public}s http2_transport_streams_protocol NULL when destroying, dumping backtrace:%{public}s";
      __int16 v22 = v16;
      os_log_type_t v23 = v17;
      uint32_t v24 = 32;
LABEL_36:
      _os_log_impl(&dword_1830D4000, v22, v23, v21, buf, v24);
    }
LABEL_37:
    free(backtrace_string);
    if (!v2) {
      return;
    }
    goto LABEL_46;
  }
  if (*(_DWORD *)(v4 + 40)) {
    return;
  }
  nw_protocol_set_input_handler(v1, 0);
  if (gLogDatapath)
  {
    int v54 = __nwlog_obj();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v2 + 205;
      _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s no more input handlers, destroying", buf, 0x16u);
    }
  }
  unsigned int v5 = *(char **)(v2 + 120);
  if (v5)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL35nw_protocol_http2_transport_destroyP11nw_protocol_block_invoke;
    uint64_t v75 = (char *)&__block_descriptor_tmp_37_38573;
    uint64_t v76 = v2;
    nw_hash_table_apply(v5, (uint64_t)buf);
    uint64_t v6 = *(os_unfair_lock_s **)(v2 + 120);
    if (v6)
    {
      _nw_hash_table_release(v6);
      *(void *)(v2 + 120) = 0;
    }
  }
  uint64_t v7 = *(os_unfair_lock_s **)(v2 + 112);
  if (v7)
  {
    _nw_hash_table_release(v7);
    *(void *)(v2 + 112) = 0;
  }
  uint64_t v8 = *(void *)(v1 + 32);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 24);
    if (v9)
    {
      uint64_t v10 = *(void (**)(void))(v9 + 8);
      if (v10)
      {
        v10();
        goto LABEL_18;
      }
    }
  }
  __nwlog_obj();
  uint64_t v31 = *(void *)(v1 + 32);
  BOOL v32 = "invalid";
  if (v31)
  {
    BOOL v33 = *(const char **)(v31 + 16);
    if (v33) {
      BOOL v32 = v33;
    }
  }
  *(_DWORD *)os_log_type_t type = 136446466;
  __int16 v69 = "nw_protocol_http2_transport_destroy";
  __int16 v70 = 2082;
  uint64_t v71 = v32;
  uint64_t v34 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v67 = OS_LOG_TYPE_ERROR;
  char v66 = 0;
  if (__nwlog_fault(v34, &v67, &v66))
  {
    if (v67 == OS_LOG_TYPE_FAULT)
    {
      __int16 v35 = __nwlog_obj();
      os_log_type_t v36 = v67;
      if (!os_log_type_enabled(v35, v67)) {
        goto LABEL_116;
      }
      uint64_t v37 = *(void *)(v1 + 32);
      uint32_t v38 = "invalid";
      if (v37)
      {
        uint64_t v39 = *(const char **)(v37 + 16);
        if (v39) {
          uint32_t v38 = v39;
        }
      }
      *(_DWORD *)os_log_type_t type = 136446466;
      __int16 v69 = "nw_protocol_http2_transport_destroy";
      __int16 v70 = 2082;
      uint64_t v71 = v38;
      dispatch_time_t v40 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
      goto LABEL_115;
    }
    if (!v66)
    {
      __int16 v35 = __nwlog_obj();
      os_log_type_t v36 = v67;
      if (!os_log_type_enabled(v35, v67)) {
        goto LABEL_116;
      }
      uint64_t v58 = *(void *)(v1 + 32);
      uint64_t v59 = "invalid";
      if (v58)
      {
        uint64_t v60 = *(const char **)(v58 + 16);
        if (v60) {
          uint64_t v59 = v60;
        }
      }
      *(_DWORD *)os_log_type_t type = 136446466;
      __int16 v69 = "nw_protocol_http2_transport_destroy";
      __int16 v70 = 2082;
      uint64_t v71 = v59;
      dispatch_time_t v40 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
      goto LABEL_115;
    }
    os_log_type_t v43 = (char *)__nw_create_backtrace_string();
    __int16 v35 = __nwlog_obj();
    os_log_type_t v36 = v67;
    BOOL v44 = os_log_type_enabled(v35, v67);
    if (v43)
    {
      if (v44)
      {
        uint64_t v45 = *(void *)(v1 + 32);
        os_log_type_t v46 = "invalid";
        if (v45)
        {
          __int16 v47 = *(const char **)(v45 + 16);
          if (v47) {
            os_log_type_t v46 = v47;
          }
        }
        *(_DWORD *)os_log_type_t type = 136446722;
        __int16 v69 = "nw_protocol_http2_transport_destroy";
        __int16 v70 = 2082;
        uint64_t v71 = v46;
        __int16 v72 = 2082;
        os_log_type_t v73 = v43;
        _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", (uint8_t *)type, 0x20u);
      }
      free(v43);
      goto LABEL_116;
    }
    if (v44)
    {
      uint64_t v61 = *(void *)(v1 + 32);
      BOOL v62 = "invalid";
      if (v61)
      {
        char v63 = *(const char **)(v61 + 16);
        if (v63) {
          BOOL v62 = v63;
        }
      }
      *(_DWORD *)os_log_type_t type = 136446466;
      __int16 v69 = "nw_protocol_http2_transport_destroy";
      __int16 v70 = 2082;
      uint64_t v71 = v62;
      dispatch_time_t v40 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
LABEL_115:
      _os_log_impl(&dword_1830D4000, v35, v36, v40, (uint8_t *)type, 0x16u);
    }
  }
LABEL_116:
  if (v34) {
    free(v34);
  }
LABEL_18:
  nw_protocol_remove_instance(v1);
  uint64_t v11 = *(void *)(v2 + 104);
  if (v11)
  {
    if (*(void *)v11)
    {
      os_log_type_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)v11 + 8);
      if (v12)
      {
        v12(v11, v1);
LABEL_22:
        *(void *)(v2 + 104) = 0;
        goto LABEL_23;
      }
    }
    __nwlog_obj();
    uint64_t v48 = *(const char **)(v2 + 104);
    *(_DWORD *)os_log_type_t type = 136446466;
    __int16 v69 = "nw_protocol_http2_transport_destroy";
    __int16 v70 = 2048;
    uint64_t v71 = v48;
    __int16 v49 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v67 = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (__nwlog_fault(v49, &v67, &v66))
    {
      if (v67 == OS_LOG_TYPE_FAULT)
      {
        BOOL v50 = __nwlog_obj();
        os_log_type_t v51 = v67;
        if (!os_log_type_enabled(v50, v67)) {
          goto LABEL_123;
        }
        BOOL v52 = *(const char **)(v2 + 104);
        *(_DWORD *)os_log_type_t type = 136446466;
        __int16 v69 = "nw_protocol_http2_transport_destroy";
        __int16 v70 = 2048;
        uint64_t v71 = v52;
        BOOL v53 = "%{public}s listen protocol (%p) has invalid disconnected callback";
        goto LABEL_122;
      }
      if (!v66)
      {
        BOOL v50 = __nwlog_obj();
        os_log_type_t v51 = v67;
        if (!os_log_type_enabled(v50, v67)) {
          goto LABEL_123;
        }
        os_log_type_t v64 = *(const char **)(v2 + 104);
        *(_DWORD *)os_log_type_t type = 136446466;
        __int16 v69 = "nw_protocol_http2_transport_destroy";
        __int16 v70 = 2048;
        uint64_t v71 = v64;
        BOOL v53 = "%{public}s listen protocol (%p) has invalid disconnected callback, backtrace limit exceeded";
        goto LABEL_122;
      }
      BOOL v55 = (char *)__nw_create_backtrace_string();
      BOOL v50 = __nwlog_obj();
      os_log_type_t v51 = v67;
      BOOL v56 = os_log_type_enabled(v50, v67);
      if (v55)
      {
        if (v56)
        {
          int v57 = *(const char **)(v2 + 104);
          *(_DWORD *)os_log_type_t type = 136446722;
          __int16 v69 = "nw_protocol_http2_transport_destroy";
          __int16 v70 = 2048;
          uint64_t v71 = v57;
          __int16 v72 = 2082;
          os_log_type_t v73 = v55;
          _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s listen protocol (%p) has invalid disconnected callback, dumping backtrace:%{public}s", (uint8_t *)type, 0x20u);
        }
        free(v55);
        goto LABEL_123;
      }
      if (v56)
      {
        __int16 v65 = *(const char **)(v2 + 104);
        *(_DWORD *)os_log_type_t type = 136446466;
        __int16 v69 = "nw_protocol_http2_transport_destroy";
        __int16 v70 = 2048;
        uint64_t v71 = v65;
        BOOL v53 = "%{public}s listen protocol (%p) has invalid disconnected callback, no backtrace";
LABEL_122:
        _os_log_impl(&dword_1830D4000, v50, v51, v53, (uint8_t *)type, 0x16u);
      }
    }
LABEL_123:
    if (v49) {
      free(v49);
    }
    goto LABEL_22;
  }
LABEL_23:
  nw_http2_transport_release_frame_array((nw_frame_array_s *)(v2 + 144));
  nw_http2_transport_release_frame_array((nw_frame_array_s *)(v2 + 128));
  nw_http2_transport_release_frame_array((nw_frame_array_s *)(v2 + 160));
  nw_http2_transport_release_frame_array((nw_frame_array_s *)(v2 + 176));
  *(void *)(v2 + 192) = 0;
  os_log_type_t v13 = *(void **)(v2 + 88);
  if (v13)
  {
    os_release(v13);
    *(void *)(v2 + 88) = 0;
  }
  uint64_t v14 = *(void **)(v2 + 96);
  if (v14)
  {
    os_release(v14);
    *(void *)(v2 + 96) = 0;
  }
  nghttp2_session_del();
LABEL_46:
  free((void *)v2);
}

uint64_t ___ZL48nw_protocol_http2_transport_remove_input_handlerP11nw_protocolS0_b_block_invoke_35(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t object = nw_hash_node_get_object(a2);
  nw_protocol_set_input_handler(v3, object);
  *(_OWORD *)*(void *)(a1 + 40) = *(_OWORD *)*(void *)(*(void *)(a1 + 32) + 48);
  if (gLogDatapath)
  {
    uint64_t v6 = __nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      if (v7) {
        uint64_t v8 = (const char *)(v7 + 205);
      }
      else {
        uint64_t v8 = "";
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 48);
      int v10 = 136446722;
      uint64_t v11 = "nw_protocol_http2_transport_remove_input_handler_block_invoke";
      __int16 v12 = 2082;
      os_log_type_t v13 = v8;
      __int16 v14 = 2048;
      uint64_t v15 = v9;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s reset default input handler to %p", (uint8_t *)&v10, 0x20u);
    }
  }
  return 0;
}

uint64_t ___ZL35nw_protocol_http2_transport_destroyP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v5 = object;
    if ((*(unsigned char *)(object + 36) & 1) == 0 || *(_DWORD *)(object + 32) == -1)
    {
      if (gLogDatapath)
      {
        uint32_t v27 = __nwlog_obj();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v28 = *(void *)(a1 + 32);
          if (v28) {
            os_log_type_t v29 = (const char *)(v28 + 205);
          }
          else {
            os_log_type_t v29 = "";
          }
          *(_DWORD *)buf = 136446466;
          BOOL v33 = "nw_protocol_http2_transport_destroy_block_invoke";
          __int16 v34 = 2082;
          __int16 v35 = v29;
          _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s not closing already closed or invalid stream when destroying", buf, 0x16u);
        }
      }
      *(unsigned char *)(v5 + 36) &= ~1u;
      *(_DWORD *)(v5 + 32) = -1;
      nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 32) + 120), a2);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = (const char *)(v7 + 205);
        BOOL v9 = v7 == 0;
        int v10 = *(_DWORD *)(v5 + 32);
        if (v9) {
          uint64_t v8 = "";
        }
        *(_DWORD *)buf = 136446722;
        BOOL v33 = "nw_protocol_http2_transport_destroy_block_invoke";
        __int16 v34 = 2082;
        __int16 v35 = v8;
        __int16 v36 = 1024;
        LODWORD(v37) = v10;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}s closing stream %d during destroy, did not have an active input_handler", buf, 0x1Cu);
      }
      nw_http2_transport_stream_close(*(void *)(a1 + 32), v5);
    }
    nw_http2_transport_release_frame_array((nw_frame_array_s *)v5);
    nw_http2_transport_release_frame_array((nw_frame_array_s *)(v5 + 16));
    goto LABEL_43;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    __int16 v12 = (const char *)(v11 + 205);
  }
  else {
    __int16 v12 = "";
  }
  *(_DWORD *)buf = 136446722;
  BOOL v33 = "nw_protocol_http2_transport_destroy_block_invoke";
  __int16 v34 = 2082;
  __int16 v35 = v12;
  __int16 v36 = 2048;
  uint64_t v37 = a2;
  uint64_t v5 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v30 = 0;
  if (!__nwlog_fault((const char *)v5, &type, &v30)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v13 = gLogObj;
    os_log_type_t v14 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_42;
    }
    uint64_t v15 = *(void *)(a1 + 32);
    if (v15) {
      uint64_t v16 = (const char *)(v15 + 205);
    }
    else {
      uint64_t v16 = "";
    }
    *(_DWORD *)buf = 136446722;
    BOOL v33 = "nw_protocol_http2_transport_destroy_block_invoke";
    __int16 v34 = 2082;
    __int16 v35 = v16;
    __int16 v36 = 2048;
    uint64_t v37 = a2;
    os_log_type_t v17 = "%{public}s %{public}s hash node %p didn't have a stream as extra";
    goto LABEL_41;
  }
  if (!v30)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v13 = gLogObj;
    os_log_type_t v14 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_42;
    }
    uint64_t v22 = *(void *)(a1 + 32);
    if (v22) {
      os_log_type_t v23 = (const char *)(v22 + 205);
    }
    else {
      os_log_type_t v23 = "";
    }
    *(_DWORD *)buf = 136446722;
    BOOL v33 = "nw_protocol_http2_transport_destroy_block_invoke";
    __int16 v34 = 2082;
    __int16 v35 = v23;
    __int16 v36 = 2048;
    uint64_t v37 = a2;
    os_log_type_t v17 = "%{public}s %{public}s hash node %p didn't have a stream as extra, backtrace limit exceeded";
    goto LABEL_41;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v13 = gLogObj;
  os_log_type_t v14 = type;
  BOOL v19 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (backtrace_string)
  {
    if (v19)
    {
      uint64_t v20 = *(void *)(a1 + 32);
      if (v20) {
        BOOL v21 = (const char *)(v20 + 205);
      }
      else {
        BOOL v21 = "";
      }
      *(_DWORD *)buf = 136446978;
      BOOL v33 = "nw_protocol_http2_transport_destroy_block_invoke";
      __int16 v34 = 2082;
      __int16 v35 = v21;
      __int16 v36 = 2048;
      uint64_t v37 = a2;
      __int16 v38 = 2082;
      uint64_t v39 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s %{public}s hash node %p didn't have a stream as extra, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
    if (v5) {
      goto LABEL_43;
    }
    return 1;
  }
  if (v19)
  {
    uint64_t v24 = *(void *)(a1 + 32);
    if (v24) {
      uint64_t v25 = (const char *)(v24 + 205);
    }
    else {
      uint64_t v25 = "";
    }
    *(_DWORD *)buf = 136446722;
    BOOL v33 = "nw_protocol_http2_transport_destroy_block_invoke";
    __int16 v34 = 2082;
    __int16 v35 = v25;
    __int16 v36 = 2048;
    uint64_t v37 = a2;
    os_log_type_t v17 = "%{public}s %{public}s hash node %p didn't have a stream as extra, no backtrace";
LABEL_41:
    _os_log_impl(&dword_1830D4000, v13, v14, v17, buf, 0x20u);
  }
LABEL_42:
  if (v5) {
LABEL_43:
  }
    free((void *)v5);
  return 1;
}

BOOL nw_protocol_http2_transport_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v112 = "nw_protocol_http2_transport_add_input_handler";
    __int16 v86 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v109 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v86, &type, &v109)) {
      goto LABEL_198;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v87 = __nwlog_obj();
      os_log_type_t v88 = type;
      if (!os_log_type_enabled(v87, type)) {
        goto LABEL_198;
      }
      *(_DWORD *)buf = 136446210;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      uint64_t v89 = "%{public}s called with null protocol";
      goto LABEL_197;
    }
    if (v109 == OS_LOG_TYPE_DEFAULT)
    {
      int v87 = __nwlog_obj();
      os_log_type_t v88 = type;
      if (!os_log_type_enabled(v87, type)) {
        goto LABEL_198;
      }
      *(_DWORD *)buf = 136446210;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      uint64_t v89 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_197;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v87 = __nwlog_obj();
    os_log_type_t v88 = type;
    BOOL v93 = os_log_type_enabled(v87, type);
    if (!backtrace_string)
    {
      if (!v93) {
        goto LABEL_198;
      }
      *(_DWORD *)buf = 136446210;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      uint64_t v89 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_197;
    }
    if (!v93) {
      goto LABEL_180;
    }
    *(_DWORD *)buf = 136446466;
    int v112 = "nw_protocol_http2_transport_add_input_handler";
    __int16 v113 = 2082;
    uint64_t v114 = (uint64_t)backtrace_string;
    uint64_t v94 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_179:
    _os_log_impl(&dword_1830D4000, v87, v88, v94, buf, 0x16u);
    goto LABEL_180;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v112 = "nw_protocol_http2_transport_add_input_handler";
    __int16 v86 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v109 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v86, &type, &v109)) {
      goto LABEL_198;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v87 = __nwlog_obj();
      os_log_type_t v88 = type;
      if (!os_log_type_enabled(v87, type)) {
        goto LABEL_198;
      }
      *(_DWORD *)buf = 136446210;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      uint64_t v89 = "%{public}s called with null http2_transport";
      goto LABEL_197;
    }
    if (v109 == OS_LOG_TYPE_DEFAULT)
    {
      int v87 = __nwlog_obj();
      os_log_type_t v88 = type;
      if (!os_log_type_enabled(v87, type)) {
        goto LABEL_198;
      }
      *(_DWORD *)buf = 136446210;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      uint64_t v89 = "%{public}s called with null http2_transport, backtrace limit exceeded";
      goto LABEL_197;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v87 = __nwlog_obj();
    os_log_type_t v88 = type;
    BOOL v95 = os_log_type_enabled(v87, type);
    if (!backtrace_string)
    {
      if (!v95) {
        goto LABEL_198;
      }
      *(_DWORD *)buf = 136446210;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      uint64_t v89 = "%{public}s called with null http2_transport, no backtrace";
      goto LABEL_197;
    }
    if (!v95) {
      goto LABEL_180;
    }
    *(_DWORD *)buf = 136446466;
    int v112 = "nw_protocol_http2_transport_add_input_handler";
    __int16 v113 = 2082;
    uint64_t v114 = (uint64_t)backtrace_string;
    uint64_t v94 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
    goto LABEL_179;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v112 = "nw_protocol_http2_transport_add_input_handler";
    __int16 v86 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v109 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v86, &type, &v109)) {
      goto LABEL_198;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v87 = __nwlog_obj();
      os_log_type_t v88 = type;
      if (!os_log_type_enabled(v87, type)) {
        goto LABEL_198;
      }
      *(_DWORD *)buf = 136446210;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      uint64_t v89 = "%{public}s called with null input_protocol";
      goto LABEL_197;
    }
    if (v109 == OS_LOG_TYPE_DEFAULT)
    {
      int v87 = __nwlog_obj();
      os_log_type_t v88 = type;
      if (!os_log_type_enabled(v87, type)) {
        goto LABEL_198;
      }
      *(_DWORD *)buf = 136446210;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      uint64_t v89 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_197;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v87 = __nwlog_obj();
    os_log_type_t v88 = type;
    BOOL v96 = os_log_type_enabled(v87, type);
    if (backtrace_string)
    {
      if (v96)
      {
        *(_DWORD *)buf = 136446466;
        int v112 = "nw_protocol_http2_transport_add_input_handler";
        __int16 v113 = 2082;
        uint64_t v114 = (uint64_t)backtrace_string;
        uint64_t v94 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
        goto LABEL_179;
      }
LABEL_180:
      free(backtrace_string);
      goto LABEL_198;
    }
    if (!v96) {
      goto LABEL_198;
    }
    *(_DWORD *)buf = 136446210;
    int v112 = "nw_protocol_http2_transport_add_input_handler";
    uint64_t v89 = "%{public}s called with null input_protocol, no backtrace";
LABEL_197:
    _os_log_impl(&dword_1830D4000, v87, v88, v89, buf, 0xCu);
LABEL_198:
    if (v86) {
      free(v86);
    }
    return 0;
  }
  if (gLogDatapath)
  {
    char v90 = __nwlog_obj();
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)(handle + 205);
      _os_log_impl(&dword_1830D4000, v90, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
    if (gLogDatapath)
    {
      unint64_t v91 = __nwlog_obj();
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447234;
        int v112 = "nw_protocol_http2_transport_add_input_handler";
        __int16 v113 = 2082;
        uint64_t v114 = (uint64_t)(handle + 205);
        __int16 v115 = 2048;
        *(void *)int v116 = a2;
        *(_WORD *)&v116[8] = 1042;
        *(_DWORD *)&v116[10] = 16;
        *(_WORD *)&v116[14] = 2098;
        *(void *)&v116[16] = a2;
        _os_log_impl(&dword_1830D4000, v91, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s incoming protocol %p has flow id %{public,uuid_t}.16P", buf, 0x30u);
      }
    }
  }
  if (!*((void *)handle + 12))
  {
    callbacks = a2->callbacks;
    if (!callbacks
      || (get_uint64_t remote_endpoint = (uint64_t (*)(nw_protocol *))callbacks->get_remote_endpoint) == 0
      || (uint64_t v7 = (void *)get_remote_endpoint(a2)) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v19 = gLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_DWORD *)buf = 136446466;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)(handle + 205);
      BOOL v21 = "%{public}s %{public}s failed to get remote endpoint from input_handler";
      goto LABEL_137;
    }
    *((void *)handle + 12) = os_retain(v7);
  }
  uint64_t v8 = a2->callbacks;
  if (!v8
    || (get_uint64_t parameters = (uint64_t (*)(nw_protocol *))v8->get_parameters) == 0
    || (int v10 = (void *)get_parameters(a2)) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v19 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446466;
    int v112 = "nw_protocol_http2_transport_add_input_handler";
    __int16 v113 = 2082;
    uint64_t v114 = (uint64_t)(handle + 205);
    BOOL v21 = "%{public}s %{public}s couldn't get parameters from input_protocol";
LABEL_137:
    _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, v21, buf, 0x16u);
    return 0;
  }
  uint64_t v11 = v10;
  __int16 v12 = handle + 205;
  if (!handle[205])
  {
    os_log_type_t v13 = nw_parameters_copy_protocol_options_legacy(v10, a1);
    if (v13)
    {
      os_log_type_t v14 = v13;
      uint64_t v15 = v14;
      uint64_t v16 = 0;
      *__int16 v12 = 0;
      unint64_t v17 = 84;
      while (1)
      {
        int v18 = v14[v16 + 48];
        v12[v16] = v18;
        if (!v18) {
          break;
        }
        --v17;
        ++v16;
        if (v17 <= 1)
        {
          v12[v16] = 0;
          break;
        }
      }

      os_release(v15);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v22 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        int v112 = "nw_protocol_http2_transport_add_input_handler";
        __int16 v113 = 2082;
        uint64_t v114 = (uint64_t)(handle + 205);
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, "%{public}s %{public}s no http2_options found, cannot get log id", buf, 0x16u);
      }
    }
  }
  id v23 = nw_parameters_copy_protocol_value(v11, (uint64_t)a1, "incomingStreamId");
  if (!v23)
  {
    LODWORD(v26) = -1;
    goto LABEL_32;
  }
  uint64_t v24 = v23;
  unint64_t value = xpc_int64_get_value(v23);
  unint64_t v26 = value;
  if (HIDWORD(value))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    int v112 = "nw_protocol_http2_transport_add_input_handler";
    __int16 v113 = 2082;
    uint64_t v114 = (uint64_t)(handle + 205);
    __int16 v115 = 2048;
    *(void *)int v116 = v26;
    BOOL v41 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v109 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v41, &type, &v109)) {
      goto LABEL_92;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v42 = gLogObj;
      os_log_type_t v43 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_92;
      }
      *(_DWORD *)buf = 136446722;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)v12;
      __int16 v115 = 2048;
      *(void *)int v116 = v26;
      BOOL v44 = "%{public}s %{public}s invalid stream id supplied via protocol parameters: %lld";
    }
    else if (v109)
    {
      __int16 v49 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v42 = gLogObj;
      os_log_type_t v43 = type;
      BOOL v50 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v49)
      {
        if (v50)
        {
          *(_DWORD *)buf = 136446978;
          int v112 = "nw_protocol_http2_transport_add_input_handler";
          __int16 v113 = 2082;
          uint64_t v114 = (uint64_t)v12;
          __int16 v115 = 2048;
          *(void *)int v116 = v26;
          *(_WORD *)&v116[8] = 2082;
          *(void *)&v116[10] = v49;
          _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s %{public}s invalid stream id supplied via protocol parameters: %lld, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v49);
        goto LABEL_92;
      }
      if (!v50)
      {
LABEL_92:
        if (v41) {
          free(v41);
        }
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446722;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)v12;
      __int16 v115 = 2048;
      *(void *)int v116 = v26;
      BOOL v44 = "%{public}s %{public}s invalid stream id supplied via protocol parameters: %lld, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v42 = gLogObj;
      os_log_type_t v43 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_92;
      }
      *(_DWORD *)buf = 136446722;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)v12;
      __int16 v115 = 2048;
      *(void *)int v116 = v26;
      BOOL v44 = "%{public}s %{public}s invalid stream id supplied via protocol parameters: %lld, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v42, v43, v44, buf, 0x20u);
    goto LABEL_92;
  }
  if ((value & 0x80000000) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v51 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)(handle + 205);
      __int16 v115 = 1024;
      *(_DWORD *)int v116 = v26;
      _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_ERROR, "%{public}s %{public}s invalid incoming stream id detected: %d", buf, 0x1Cu);
    }
LABEL_94:
    xpc_release(v24);
    return 0;
  }
  if (gLogDatapath)
  {
    os_log_type_t v99 = __nwlog_obj();
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)(handle + 205);
      __int16 v115 = 1024;
      *(_DWORD *)int v116 = v26;
      _os_log_impl(&dword_1830D4000, v99, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s found incoming stream id: %d", buf, 0x1Cu);
    }
  }
  xpc_release(v24);
LABEL_32:
  if (gLogDatapath)
  {
    uint64_t v97 = __nwlog_obj();
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      int v112 = "nw_http2_transport_add_to_protocol_table";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)(handle + 205);
      __int16 v115 = 2048;
      *(void *)int v116 = a2;
      *(_WORD *)&v116[8] = 1024;
      *(_DWORD *)&v116[10] = -999;
      _os_log_impl(&dword_1830D4000, v97, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for protocol %p, stream %d", buf, 0x26u);
    }
  }
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  uint64_t internal = *((void *)handle + 14);
  if (!internal)
  {
    uint64_t internal = nw_hash_table_create_internal(0x11u, 8, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
    if (internal)
    {
      *(_DWORD *)(internal + 48) &= ~2u;
      *((void *)handle + 14) = internal;
      goto LABEL_36;
    }
    *((void *)handle + 14) = 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    int v112 = "nw_http2_transport_add_to_protocol_table";
    int v54 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t v109 = OS_LOG_TYPE_ERROR;
    char v108 = 0;
    if (__nwlog_fault(v54, &v109, &v108))
    {
      if (v109 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v55 = gLogObj;
        os_log_type_t v56 = v109;
        if (!os_log_type_enabled((os_log_t)gLogObj, v109)) {
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446210;
        int v112 = "nw_http2_transport_add_to_protocol_table";
        int v57 = "%{public}s nw_protocol_hash_table_create failed";
LABEL_131:
        _os_log_impl(&dword_1830D4000, v55, v56, v57, buf, 0xCu);
        goto LABEL_132;
      }
      if (!v108)
      {
        BOOL v55 = __nwlog_obj();
        os_log_type_t v56 = v109;
        if (!os_log_type_enabled(v55, v109)) {
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446210;
        int v112 = "nw_http2_transport_add_to_protocol_table";
        int v57 = "%{public}s nw_protocol_hash_table_create failed, backtrace limit exceeded";
        goto LABEL_131;
      }
      __int16 v68 = (char *)__nw_create_backtrace_string();
      BOOL v55 = __nwlog_obj();
      os_log_type_t v56 = v109;
      BOOL v69 = os_log_type_enabled(v55, v109);
      if (!v68)
      {
        if (!v69) {
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446210;
        int v112 = "nw_http2_transport_add_to_protocol_table";
        int v57 = "%{public}s nw_protocol_hash_table_create failed, no backtrace";
        goto LABEL_131;
      }
      if (v69)
      {
        *(_DWORD *)buf = 136446466;
        int v112 = "nw_http2_transport_add_to_protocol_table";
        __int16 v113 = 2082;
        uint64_t v114 = (uint64_t)v68;
        _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s nw_protocol_hash_table_create failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v68);
    }
LABEL_132:
    if (v54)
    {
      uint64_t v71 = (char *)v54;
      goto LABEL_134;
    }
LABEL_135:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v19 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446466;
    int v112 = "nw_protocol_http2_transport_add_input_handler";
    __int16 v113 = 2082;
    uint64_t v114 = (uint64_t)v12;
    BOOL v21 = "%{public}s %{public}s could not add protocol to protocol based hash table, cannot add input handler";
    goto LABEL_137;
  }
LABEL_36:
  BOOL v28 = nw_hash_table_add_object(internal, (uint64_t)a2, (char *)&type);
  if (type == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446978;
    int v112 = "nw_http2_transport_add_to_protocol_table";
    __int16 v113 = 2082;
    uint64_t v114 = (uint64_t)(handle + 205);
    __int16 v115 = 1042;
    *(_DWORD *)int v116 = 16;
    *(_WORD *)&v116[4] = 2098;
    *(void *)&v116[6] = a2;
    uint64_t v45 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t v109 = OS_LOG_TYPE_ERROR;
    char v108 = 0;
    if (!__nwlog_fault(v45, &v109, &v108)) {
      goto LABEL_103;
    }
    if (v109 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v46 = gLogObj;
      os_log_type_t v47 = v109;
      if (!os_log_type_enabled((os_log_t)gLogObj, v109)) {
        goto LABEL_103;
      }
      *(_DWORD *)buf = 136446978;
      int v112 = "nw_http2_transport_add_to_protocol_table";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)v12;
      __int16 v115 = 1042;
      *(_DWORD *)int v116 = 16;
      *(_WORD *)&v116[4] = 2098;
      *(void *)&v116[6] = a2;
      uint64_t v48 = "%{public}s %{public}s http2_transport already has input handler registered for %{public,uuid_t}.16P";
    }
    else if (v108)
    {
      BOOL v52 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v46 = gLogObj;
      os_log_type_t v47 = v109;
      BOOL v53 = os_log_type_enabled((os_log_t)gLogObj, v109);
      if (v52)
      {
        if (v53)
        {
          *(_DWORD *)buf = 136447234;
          int v112 = "nw_http2_transport_add_to_protocol_table";
          __int16 v113 = 2082;
          uint64_t v114 = (uint64_t)v12;
          __int16 v115 = 1042;
          *(_DWORD *)int v116 = 16;
          *(_WORD *)&v116[4] = 2098;
          *(void *)&v116[6] = a2;
          *(_WORD *)&v116[14] = 2082;
          *(void *)&v116[16] = v52;
          _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s %{public}s http2_transport already has input handler registered for %{public,uuid_t}.16P, dumping backtrace:%{public}s", buf, 0x30u);
        }
        free(v52);
LABEL_103:
        if (v45)
        {
          uint64_t v71 = (char *)v45;
LABEL_134:
          free(v71);
          goto LABEL_135;
        }
        goto LABEL_135;
      }
      if (!v53) {
        goto LABEL_103;
      }
      *(_DWORD *)buf = 136446978;
      int v112 = "nw_http2_transport_add_to_protocol_table";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)v12;
      __int16 v115 = 1042;
      *(_DWORD *)int v116 = 16;
      *(_WORD *)&v116[4] = 2098;
      *(void *)&v116[6] = a2;
      uint64_t v48 = "%{public}s %{public}s http2_transport already has input handler registered for %{public,uuid_t}.16P, no backtrace";
    }
    else
    {
      os_log_type_t v46 = __nwlog_obj();
      os_log_type_t v47 = v109;
      if (!os_log_type_enabled(v46, v109)) {
        goto LABEL_103;
      }
      *(_DWORD *)buf = 136446978;
      int v112 = "nw_http2_transport_add_to_protocol_table";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)v12;
      __int16 v115 = 1042;
      *(_DWORD *)int v116 = 16;
      *(_WORD *)&v116[4] = 2098;
      *(void *)&v116[6] = a2;
      uint64_t v48 = "%{public}s %{public}s http2_transport already has input handler registered for %{public,uuid_t}.16P, backtra"
            "ce limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v46, v47, v48, buf, 0x26u);
    goto LABEL_103;
  }
  os_log_type_t v29 = (void *)v28;
  if (gLogDatapath)
  {
    unint64_t v98 = __nwlog_obj();
    if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      int v112 = "nw_http2_transport_add_to_protocol_table";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)(handle + 205);
      __int16 v115 = 2048;
      *(void *)int v116 = a2;
      _os_log_impl(&dword_1830D4000, v98, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s added protocol %p to protocol hash table", buf, 0x20u);
    }
  }
  if (!v29) {
    goto LABEL_135;
  }
  if (v26 != -1)
  {
    uint64_t stream_node_from_id = nw_http2_transport_get_stream_node_from_id((uint64_t)handle, v26);
    if (stream_node_from_id)
    {
      uint64_t v31 = stream_node_from_id;
      uint64_t v32 = *(void *)(stream_node_from_id + 16);
      if (v32)
      {
        if (*(void *)(stream_node_from_id + 32))
        {
          __nwlog_obj();
          uint64_t v33 = *(void *)(v31 + 32);
          int v34 = *(_DWORD *)(v32 + 32);
          *(_DWORD *)buf = 136447490;
          int v112 = "nw_protocol_http2_transport_add_input_handler";
          __int16 v113 = 2082;
          uint64_t v114 = (uint64_t)(handle + 205);
          __int16 v115 = 2048;
          *(void *)int v116 = a2;
          *(_WORD *)&v116[8] = 2048;
          *(void *)&v116[10] = v33;
          *(_WORD *)&v116[18] = 2048;
          *(void *)&v116[20] = v32;
          __int16 v117 = 1024;
          int v118 = v34;
          __int16 v35 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          os_log_type_t v109 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v35, &type, &v109)) {
            goto LABEL_147;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            __int16 v36 = __nwlog_obj();
            os_log_type_t v37 = type;
            if (!os_log_type_enabled(v36, type)) {
              goto LABEL_147;
            }
            uint64_t v38 = *(void *)(v31 + 32);
            int v39 = *(_DWORD *)(v32 + 32);
            *(_DWORD *)buf = 136447490;
            int v112 = "nw_protocol_http2_transport_add_input_handler";
            __int16 v113 = 2082;
            uint64_t v114 = (uint64_t)(handle + 205);
            __int16 v115 = 2048;
            *(void *)int v116 = a2;
            *(_WORD *)&v116[8] = 2048;
            *(void *)&v116[10] = v38;
            *(_WORD *)&v116[18] = 2048;
            *(void *)&v116[20] = v32;
            __int16 v117 = 1024;
            int v118 = v39;
            uint64_t v40 = "%{public}s %{public}s adding new input handler %p, already have existing protocol pointer %p for stream (%p, id %d)";
          }
          else if (v109)
          {
            uint64_t v77 = (char *)__nw_create_backtrace_string();
            __int16 v36 = __nwlog_obj();
            os_log_type_t v37 = type;
            BOOL v78 = os_log_type_enabled(v36, type);
            if (v77)
            {
              if (v78)
              {
                uint64_t v79 = *(void *)(v31 + 32);
                int v80 = *(_DWORD *)(v32 + 32);
                *(_DWORD *)buf = 136447746;
                int v112 = "nw_protocol_http2_transport_add_input_handler";
                __int16 v113 = 2082;
                uint64_t v114 = (uint64_t)(handle + 205);
                __int16 v115 = 2048;
                *(void *)int v116 = a2;
                *(_WORD *)&v116[8] = 2048;
                *(void *)&v116[10] = v79;
                *(_WORD *)&v116[18] = 2048;
                *(void *)&v116[20] = v32;
                __int16 v117 = 1024;
                int v118 = v80;
                __int16 v119 = 2082;
                int v120 = v77;
                _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s %{public}s adding new input handler %p, already have existing protocol pointer %p for stream (%p, id %d), dumping backtrace:%{public}s", buf, 0x44u);
              }
              free(v77);
              goto LABEL_147;
            }
            if (!v78)
            {
LABEL_147:
              if (v35) {
                free(v35);
              }
              goto LABEL_149;
            }
            uint64_t v84 = *(void *)(v31 + 32);
            int v85 = *(_DWORD *)(v32 + 32);
            *(_DWORD *)buf = 136447490;
            int v112 = "nw_protocol_http2_transport_add_input_handler";
            __int16 v113 = 2082;
            uint64_t v114 = (uint64_t)(handle + 205);
            __int16 v115 = 2048;
            *(void *)int v116 = a2;
            *(_WORD *)&v116[8] = 2048;
            *(void *)&v116[10] = v84;
            *(_WORD *)&v116[18] = 2048;
            *(void *)&v116[20] = v32;
            __int16 v117 = 1024;
            int v118 = v85;
            uint64_t v40 = "%{public}s %{public}s adding new input handler %p, already have existing protocol pointer %p for strea"
                  "m (%p, id %d), no backtrace";
          }
          else
          {
            __int16 v36 = __nwlog_obj();
            os_log_type_t v37 = type;
            if (!os_log_type_enabled(v36, type)) {
              goto LABEL_147;
            }
            uint64_t v82 = *(void *)(v31 + 32);
            int v83 = *(_DWORD *)(v32 + 32);
            *(_DWORD *)buf = 136447490;
            int v112 = "nw_protocol_http2_transport_add_input_handler";
            __int16 v113 = 2082;
            uint64_t v114 = (uint64_t)(handle + 205);
            __int16 v115 = 2048;
            *(void *)int v116 = a2;
            *(_WORD *)&v116[8] = 2048;
            *(void *)&v116[10] = v82;
            *(_WORD *)&v116[18] = 2048;
            *(void *)&v116[20] = v32;
            __int16 v117 = 1024;
            int v118 = v83;
            uint64_t v40 = "%{public}s %{public}s adding new input handler %p, already have existing protocol pointer %p for strea"
                  "m (%p, id %d), backtrace limit exceeded";
          }
          _os_log_impl(&dword_1830D4000, v36, v37, v40, buf, 0x3Au);
          goto LABEL_147;
        }
        *(void *)(stream_node_from_id + 32) = a2;
        v29[4] = v32;
        if (gLogDatapath)
        {
          __int16 v72 = __nwlog_obj();
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
          {
            int v73 = *(_DWORD *)(v32 + 32);
            *(_DWORD *)buf = 136447234;
            int v112 = "nw_protocol_http2_transport_add_input_handler";
            __int16 v113 = 2082;
            uint64_t v114 = (uint64_t)(handle + 205);
            __int16 v115 = 1024;
            *(_DWORD *)int v116 = v26;
            *(_WORD *)&v116[4] = 1024;
            *(_DWORD *)&v116[6] = v73;
            *(_WORD *)&v116[10] = 2048;
            *(void *)&v116[12] = v32;
            char v74 = "%{public}s %{public}s connected incoming stream id %d to existing stream %d (%p)";
            uint64_t v75 = v72;
            uint32_t v76 = 44;
LABEL_212:
            _os_log_impl(&dword_1830D4000, v75, OS_LOG_TYPE_DEBUG, v74, buf, v76);
            goto LABEL_118;
          }
        }
        goto LABEL_118;
      }
      __int16 v70 = __nwlog_obj();
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        int v112 = "nw_protocol_http2_transport_add_input_handler";
        __int16 v113 = 2082;
        uint64_t v114 = (uint64_t)(handle + 205);
        __int16 v115 = 1024;
        *(_DWORD *)int v116 = v26;
        __int16 v65 = "%{public}s %{public}s stream (id %d) not found in hash node";
        char v66 = v70;
        uint32_t v67 = 28;
        goto LABEL_99;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v64 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        int v112 = "nw_protocol_http2_transport_add_input_handler";
        __int16 v113 = 2082;
        uint64_t v114 = (uint64_t)(handle + 205);
        __int16 v115 = 1024;
        *(_DWORD *)int v116 = v26;
        *(_WORD *)&v116[4] = 2048;
        *(void *)&v116[6] = a2;
        __int16 v65 = "%{public}s %{public}s could not find existing stream %d to connect protocol %p with";
        char v66 = v64;
        uint32_t v67 = 38;
LABEL_99:
        _os_log_impl(&dword_1830D4000, v66, OS_LOG_TYPE_ERROR, v65, buf, v67);
      }
    }
LABEL_149:
    nw_http2_transport_remove_from_protocol_table((uint64_t)handle, (uint64_t)a2);
    return 0;
  }
  if (gLogDatapath)
  {
    BOOL v100 = __nwlog_obj();
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)(handle + 205);
      _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s detected new stream initiated from this side of the connection, allocating new stream", buf, 0x16u);
    }
  }
  uint64_t v58 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  uint64_t v59 = (uint64_t)v58;
  if (v58)
  {
    *uint64_t v58 = 0;
    v58[1] = v58;
    v58[2] = 0;
    v58[3] = v58 + 2;
    *((unsigned char *)v58 + 36) &= 0xF0u;
  }
  else
  {
    nw_endpoint_t v101 = __nwlog_obj();
    os_log_type_enabled(v101, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    int v112 = "strict_calloc";
    __int16 v113 = 2048;
    uint64_t v114 = 1;
    __int16 v115 = 2048;
    *(void *)int v116 = 40;
    unint64_t v102 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v102);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v102);
    nw_http2_transport_stream_init(0);
  }
  *(_DWORD *)(v59 + 32) = -1;
  uint64_t v60 = v11;
  uint64_t v61 = v60[12];

  *(unsigned char *)(v59 + 36) = *(unsigned char *)(v59 + 36) & 0xF7 | (v61 >> 12) & 8;
  v29[4] = v59;
  if ((*(unsigned char *)(v59 + 36) & 8) == 0) {
    goto LABEL_118;
  }
  if (a1->default_input_handler)
  {
    BOOL v62 = __nwlog_obj();
    if (!os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
LABEL_79:
      nw_http2_transport_remove_from_protocol_table((uint64_t)handle, (uint64_t)a2);
      free((void *)v59);
      return 0;
    }
    *(_DWORD *)buf = 136446466;
    int v112 = "nw_protocol_http2_transport_add_input_handler";
    __int16 v113 = 2082;
    uint64_t v114 = (uint64_t)(handle + 205);
    char v63 = "%{public}s %{public}s http2_transport has default_input_handler on the first stream in a listening connection."
          " Is a connection trying to join while having server set on the parameters?";
LABEL_78:
    _os_log_impl(&dword_1830D4000, v62, OS_LOG_TYPE_ERROR, v63, buf, 0x16u);
    goto LABEL_79;
  }
  if (gLogDatapath)
  {
    id v105 = __nwlog_obj();
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)(handle + 205);
      _os_log_impl(&dword_1830D4000, v105, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s responder's first stream detected, overriding stream id to 1", buf, 0x16u);
    }
  }
  *(_DWORD *)(v59 + 32) = 1;
  if (!nw_http2_transport_add_to_id_table((uint64_t)handle, v59, (uint64_t)a2))
  {
    BOOL v62 = __nwlog_obj();
    if (!os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446466;
    int v112 = "nw_protocol_http2_transport_add_input_handler";
    __int16 v113 = 2082;
    uint64_t v114 = (uint64_t)(handle + 205);
    char v63 = "%{public}s %{public}s Failed to add new stream to the id based hash table";
    goto LABEL_78;
  }
  if (gLogDatapath)
  {
    nw_endpoint_t v106 = __nwlog_obj();
    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v107 = v29[4];
      *(_DWORD *)buf = 136446978;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)(handle + 205);
      __int16 v115 = 2048;
      *(void *)int v116 = v59;
      *(_WORD *)&v116[8] = 2048;
      *(void *)&v116[10] = v107;
      char v74 = "%{public}s %{public}s new stream is %p, stream pointer is %p";
      uint64_t v75 = v106;
      uint32_t v76 = 42;
      goto LABEL_212;
    }
  }
LABEL_118:
  a2->output_handler_context = v29;
  if (a2->output_handler)
  {
    if (a1->default_input_handler) {
      goto LABEL_120;
    }
LABEL_127:
    nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
    *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
    uint64_t v81 = *((void *)handle + 9);
    if (!v81) {
      goto LABEL_122;
    }
    goto LABEL_121;
  }
  nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
  if (!a1->default_input_handler) {
    goto LABEL_127;
  }
LABEL_120:
  uint64_t v81 = *((void *)handle + 9);
  if (v81)
  {
LABEL_121:
    nw_queue_cancel_source(v81);
    *((void *)handle + 9) = 0;
  }
LABEL_122:
  if (!*((void *)handle + 11)) {
    *((void *)handle + 11) = os_retain(v11);
  }
  if (gLogDatapath)
  {
    os_log_type_t v103 = __nwlog_obj();
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
    {
      int v104 = nw_hash_table_count(*((void *)handle + 14));
      *(_DWORD *)buf = 136446978;
      int v112 = "nw_protocol_http2_transport_add_input_handler";
      __int16 v113 = 2082;
      uint64_t v114 = (uint64_t)(handle + 205);
      __int16 v115 = 2048;
      *(void *)int v116 = a2;
      *(_WORD *)&v116[8] = 1024;
      *(_DWORD *)&v116[10] = v104;
      _os_log_impl(&dword_1830D4000, v103, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s added input handler %p, have %u input handlers", buf, 0x26u);
    }
  }
  return 1;
}

void nw_protocol_http2_transport_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_protocol_http2_transport_input_finished";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v5, &v18, &v17)) {
      goto LABEL_53;
    }
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v18;
      if (!os_log_type_enabled(v6, v18)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_protocol_http2_transport_input_finished";
      uint64_t v8 = "%{public}s called with null protocol";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v18;
      BOOL v11 = os_log_type_enabled(v6, v18);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_protocol_http2_transport_input_finished";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_53:
        if (!v5) {
          return;
        }
        goto LABEL_54;
      }
      if (!v11) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_protocol_http2_transport_input_finished";
      uint64_t v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v18;
      if (!os_log_type_enabled(v6, v18)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_protocol_http2_transport_input_finished";
      uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_52;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_protocol_http2_transport_input_finished";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v5, &v18, &v17)) {
      goto LABEL_53;
    }
    if (v18 != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        uint64_t v6 = __nwlog_obj();
        os_log_type_t v7 = v18;
        if (!os_log_type_enabled(v6, v18)) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_http2_transport_input_finished";
        uint64_t v8 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_52;
      }
      __int16 v12 = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v18;
      BOOL v13 = os_log_type_enabled(v6, v18);
      if (!v12)
      {
        if (!v13) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_http2_transport_input_finished";
        uint64_t v8 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_52;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "nw_protocol_http2_transport_input_finished";
        __int16 v21 = 2082;
        uint64_t v22 = v12;
        os_log_type_t v14 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
LABEL_37:
        _os_log_impl(&dword_1830D4000, v6, v7, v14, buf, 0x16u);
      }
LABEL_38:
      free(v12);
      if (!v5) {
        return;
      }
LABEL_54:
      free(v5);
      return;
    }
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = v18;
    if (!os_log_type_enabled(v6, v18)) {
      goto LABEL_53;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_protocol_http2_transport_input_finished";
    uint64_t v8 = "%{public}s called with null http2_transport";
LABEL_52:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_53;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_protocol_http2_transport_input_finished";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v5, &v18, &v17)) {
      goto LABEL_53;
    }
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v18;
      if (!os_log_type_enabled(v6, v18)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_protocol_http2_transport_input_finished";
      uint64_t v8 = "%{public}s called with null other_protocol";
      goto LABEL_52;
    }
    if (!v17)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v18;
      if (!os_log_type_enabled(v6, v18)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_protocol_http2_transport_input_finished";
      uint64_t v8 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_52;
    }
    __int16 v12 = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = v18;
    BOOL v15 = os_log_type_enabled(v6, v18);
    if (!v12)
    {
      if (!v15) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_protocol_http2_transport_input_finished";
      uint64_t v8 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_52;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v20 = "nw_protocol_http2_transport_input_finished";
      __int16 v21 = 2082;
      uint64_t v22 = v12;
      os_log_type_t v14 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (gLogDatapath)
  {
    BOOL v9 = __nwlog_obj();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v20 = "nw_protocol_http2_transport_input_finished";
      __int16 v21 = 2082;
      uint64_t v22 = handle + 205;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if ((handle[204] & 0x40) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v20 = "nw_protocol_http2_transport_input_finished";
      __int16 v21 = 2082;
      uint64_t v22 = handle + 205;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s %{public}s still waiting for listen handler, but input finished. Processing input anyway.", buf, 0x16u);
    }
  }
  nw_protocol_http2_transport_process_input((uint64_t)handle);
  uint64_t v4 = (char *)*((void *)handle + 14);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 0x40000000;
  v16[2] = ___ZL42nw_protocol_http2_transport_input_finishedP11nw_protocolS0__block_invoke;
  v16[3] = &__block_descriptor_tmp_32_38681;
  void v16[4] = handle;
  nw_hash_table_apply(v4, (uint64_t)v16);
}

uint64_t ___ZL42nw_protocol_http2_transport_input_finishedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  if (!object)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v15 = *(void *)(a1 + 32);
    if (v15) {
      uint64_t v16 = (const char *)(v15 + 205);
    }
    else {
      uint64_t v16 = "";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    __int16 v61 = 2082;
    BOOL v62 = v16;
    __int16 v63 = 2048;
    uint64_t v64 = a2;
    char v17 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v57 = 0;
    if (__nwlog_fault(v17, &type, &v57))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = gLogObj;
        os_log_type_t v19 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_56;
        }
        uint64_t v20 = *(void *)(a1 + 32);
        if (v20) {
          __int16 v21 = (const char *)(v20 + 205);
        }
        else {
          __int16 v21 = "";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
        __int16 v61 = 2082;
        BOOL v62 = v21;
        __int16 v63 = 2048;
        uint64_t v64 = a2;
        uint64_t v22 = "%{public}s %{public}s no object for hash node %p, skipping input_finished";
LABEL_55:
        _os_log_impl(&dword_1830D4000, v18, v19, v22, buf, 0x20u);
        goto LABEL_56;
      }
      if (!v57)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = gLogObj;
        os_log_type_t v19 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_56;
        }
        uint64_t v39 = *(void *)(a1 + 32);
        if (v39) {
          uint64_t v40 = (const char *)(v39 + 205);
        }
        else {
          uint64_t v40 = "";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
        __int16 v61 = 2082;
        BOOL v62 = v40;
        __int16 v63 = 2048;
        uint64_t v64 = a2;
        uint64_t v22 = "%{public}s %{public}s no object for hash node %p, skipping input_finished, backtrace limit exceeded";
        goto LABEL_55;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = gLogObj;
      os_log_type_t v19 = type;
      BOOL v36 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v36) {
          goto LABEL_56;
        }
        uint64_t v41 = *(void *)(a1 + 32);
        if (v41) {
          BOOL v42 = (const char *)(v41 + 205);
        }
        else {
          BOOL v42 = "";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
        __int16 v61 = 2082;
        BOOL v62 = v42;
        __int16 v63 = 2048;
        uint64_t v64 = a2;
        uint64_t v22 = "%{public}s %{public}s no object for hash node %p, skipping input_finished, no backtrace";
        goto LABEL_55;
      }
      if (v36)
      {
        uint64_t v37 = *(void *)(a1 + 32);
        if (v37) {
          uint64_t v38 = (const char *)(v37 + 205);
        }
        else {
          uint64_t v38 = "";
        }
        *(_DWORD *)buf = 136446978;
        uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
        __int16 v61 = 2082;
        BOOL v62 = v38;
        __int16 v63 = 2048;
        uint64_t v64 = a2;
        __int16 v65 = 2082;
        char v66 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s %{public}s no object for hash node %p, skipping input_finished, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(backtrace_string);
    }
LABEL_56:
    if (v17)
    {
      os_log_type_t v43 = (char *)v17;
LABEL_58:
      free(v43);
      return 1;
    }
    return 1;
  }
  uint64_t v5 = object;
  uint64_t v6 = *(void *)nw_hash_node_get_extra(a2);
  if (v6)
  {
    if (*(unsigned char *)(v6 + 36))
    {
      uint64_t v34 = *(void *)(v5 + 24);
      if (!v34 || (uint32_t v27 = *(void (**)(uint64_t, void))(v34 + 184)) == 0)
      {
        __nwlog_obj();
        uint64_t v48 = *(const char **)(v5 + 16);
        if (!v48) {
          uint64_t v48 = "invalid";
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
        __int16 v61 = 2082;
        BOOL v62 = v48;
        os_log_type_t v29 = (const char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v57 = 0;
        if (__nwlog_fault(v29, &type, &v57))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            char v30 = __nwlog_obj();
            os_log_type_t v31 = type;
            if (!os_log_type_enabled(v30, type)) {
              goto LABEL_100;
            }
            __int16 v49 = *(const char **)(v5 + 16);
            if (!v49) {
              __int16 v49 = "invalid";
            }
            *(_DWORD *)buf = 136446466;
            uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
            __int16 v61 = 2082;
            BOOL v62 = v49;
            uint64_t v33 = "%{public}s protocol %{public}s has invalid input_finished callback";
            goto LABEL_99;
          }
          if (!v57)
          {
            char v30 = __nwlog_obj();
            os_log_type_t v31 = type;
            if (!os_log_type_enabled(v30, type)) {
              goto LABEL_100;
            }
            BOOL v55 = *(const char **)(v5 + 16);
            if (!v55) {
              BOOL v55 = "invalid";
            }
            *(_DWORD *)buf = 136446466;
            uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
            __int16 v61 = 2082;
            BOOL v62 = v55;
            uint64_t v33 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
            goto LABEL_99;
          }
          BOOL v50 = (char *)__nw_create_backtrace_string();
          char v30 = __nwlog_obj();
          os_log_type_t v31 = type;
          BOOL v51 = os_log_type_enabled(v30, type);
          if (!v50)
          {
            if (!v51) {
              goto LABEL_100;
            }
            os_log_type_t v56 = *(const char **)(v5 + 16);
            if (!v56) {
              os_log_type_t v56 = "invalid";
            }
            *(_DWORD *)buf = 136446466;
            uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
            __int16 v61 = 2082;
            BOOL v62 = v56;
            uint64_t v33 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
            goto LABEL_99;
          }
          if (v51)
          {
            BOOL v52 = *(const char **)(v5 + 16);
            if (!v52) {
              BOOL v52 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
            __int16 v61 = 2082;
            BOOL v62 = v52;
            __int16 v63 = 2082;
            uint64_t v64 = (uint64_t)v50;
            _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v50);
        }
LABEL_100:
        if (!v29) {
          return 1;
        }
        goto LABEL_101;
      }
LABEL_36:
      v27(v5, *(void *)(a1 + 32));
      return 1;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      BOOL v9 = (const char *)(v8 + 205);
      BOOL v10 = v8 == 0;
      int v11 = *(_DWORD *)(v6 + 32);
      if (v10) {
        BOOL v9 = "";
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
      __int16 v61 = 2082;
      BOOL v62 = v9;
      __int16 v63 = 1024;
      LODWORD(v64) = v11;
      __int16 v12 = "%{public}s %{public}s stream %d not open, masking input_finished with disconnected";
      BOOL v13 = v7;
      uint32_t v14 = 28;
      goto LABEL_23;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v23 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = *(void *)(a1 + 32);
      if (v24) {
        uint64_t v25 = (const char *)(v24 + 205);
      }
      else {
        uint64_t v25 = "";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
      __int16 v61 = 2082;
      BOOL v62 = v25;
      __int16 v12 = "%{public}s %{public}s input protocol has no stream, masking input_finished with disconnected";
      BOOL v13 = v23;
      uint32_t v14 = 22;
LABEL_23:
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, v12, buf, v14);
    }
  }
  uint64_t v26 = *(void *)(v5 + 24);
  if (v26)
  {
    uint32_t v27 = *(void (**)(uint64_t, void))(v26 + 48);
    if (v27) {
      goto LABEL_36;
    }
  }
  __nwlog_obj();
  BOOL v28 = *(const char **)(v5 + 16);
  if (!v28) {
    BOOL v28 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
  __int16 v61 = 2082;
  BOOL v62 = v28;
  os_log_type_t v29 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v57 = 0;
  if (!__nwlog_fault(v29, &type, &v57)) {
    goto LABEL_100;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_100;
    }
    uint64_t v32 = *(const char **)(v5 + 16);
    if (!v32) {
      uint64_t v32 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    __int16 v61 = 2082;
    BOOL v62 = v32;
    uint64_t v33 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_99:
    _os_log_impl(&dword_1830D4000, v30, v31, v33, buf, 0x16u);
    goto LABEL_100;
  }
  if (!v57)
  {
    char v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_100;
    }
    BOOL v53 = *(const char **)(v5 + 16);
    if (!v53) {
      BOOL v53 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    __int16 v61 = 2082;
    BOOL v62 = v53;
    uint64_t v33 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
    goto LABEL_99;
  }
  uint64_t v45 = (char *)__nw_create_backtrace_string();
  char v30 = __nwlog_obj();
  os_log_type_t v31 = type;
  BOOL v46 = os_log_type_enabled(v30, type);
  if (!v45)
  {
    if (!v46) {
      goto LABEL_100;
    }
    int v54 = *(const char **)(v5 + 16);
    if (!v54) {
      int v54 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    __int16 v61 = 2082;
    BOOL v62 = v54;
    uint64_t v33 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
    goto LABEL_99;
  }
  if (v46)
  {
    os_log_type_t v47 = *(const char **)(v5 + 16);
    if (!v47) {
      os_log_type_t v47 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    __int16 v61 = 2082;
    BOOL v62 = v47;
    __int16 v63 = 2082;
    uint64_t v64 = (uint64_t)v45;
    _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
  }
  free(v45);
  if (v29)
  {
LABEL_101:
    os_log_type_t v43 = (char *)v29;
    goto LABEL_58;
  }
  return 1;
}

void nw_protocol_http2_transport_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_http2_transport_output_finished";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_http2_transport_output_finished";
      int v11 = "%{public}s called with null protocol";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v14 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_protocol_http2_transport_output_finished";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_60:
        if (!v8) {
          return;
        }
        goto LABEL_61;
      }
      if (!v14) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_http2_transport_output_finished";
      int v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_http2_transport_output_finished";
      int v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_59;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_http2_transport_output_finished";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_60;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        BOOL v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_60;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_http2_transport_output_finished";
        int v11 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_59;
      }
      uint64_t v15 = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v16 = os_log_type_enabled(v9, type);
      if (!v15)
      {
        if (!v16) {
          goto LABEL_60;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_http2_transport_output_finished";
        int v11 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_59;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_protocol_http2_transport_output_finished";
        __int16 v24 = 2082;
        uint64_t v25 = v15;
        char v17 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
LABEL_42:
        _os_log_impl(&dword_1830D4000, v9, v10, v17, buf, 0x16u);
      }
LABEL_43:
      free(v15);
      if (!v8) {
        return;
      }
LABEL_61:
      free(v8);
      return;
    }
    BOOL v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_60;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_http2_transport_output_finished";
    int v11 = "%{public}s called with null http2_transport";
LABEL_59:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_60;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_http2_transport_output_finished";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_http2_transport_output_finished";
      int v11 = "%{public}s called with null other_protocol";
      goto LABEL_59;
    }
    if (!v20)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_http2_transport_output_finished";
      int v11 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_59;
    }
    uint64_t v15 = (char *)__nw_create_backtrace_string();
    BOOL v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v18 = os_log_type_enabled(v9, type);
    if (!v15)
    {
      if (!v18) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_http2_transport_output_finished";
      int v11 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_59;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_protocol_http2_transport_output_finished";
      __int16 v24 = 2082;
      uint64_t v25 = v15;
      char v17 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  if (gLogDatapath)
  {
    __int16 v12 = __nwlog_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_protocol_http2_transport_output_finished";
      __int16 v24 = 2082;
      uint64_t v25 = handle + 205;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v23 = "nw_protocol_http2_transport_output_finished";
    __int16 v24 = 2082;
    uint64_t v25 = handle + 205;
    uint64_t v7 = "%{public}s %{public}s couldn't get output handler context during output_finished";
LABEL_13:
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, v7, buf, 0x16u);
    return;
  }
  uint64_t v5 = output_handler_context[4];
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v23 = "nw_protocol_http2_transport_output_finished";
    __int16 v24 = 2082;
    uint64_t v25 = handle + 205;
    uint64_t v7 = "%{public}s %{public}s couldn't get stream during output_finished";
    goto LABEL_13;
  }
  if (gLogDatapath)
  {
    os_log_type_t v19 = __nwlog_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_protocol_http2_transport_output_finished";
      __int16 v24 = 2082;
      uint64_t v25 = handle + 205;
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s sending non-deferred end stream", buf, 0x16u);
    }
  }
  nw_http2_transport_send_end_stream((uint64_t)handle, v5);
}

void nw_protocol_http2_transport_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v39 = "nw_protocol_http2_transport_disconnect";
    BOOL v13 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v13, &type, &v36)) {
      goto LABEL_79;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      BOOL v16 = "%{public}s called with null protocol";
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v25 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v39 = "nw_protocol_http2_transport_disconnect";
          __int16 v40 = 2082;
          uint64_t v41 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_79:
        if (!v13) {
          return;
        }
        goto LABEL_80;
      }
      if (!v25) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      BOOL v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      BOOL v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_78;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v39 = "nw_protocol_http2_transport_disconnect";
    BOOL v13 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v13, &type, &v36)) {
      goto LABEL_79;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v36)
      {
        BOOL v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_79;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v39 = "nw_protocol_http2_transport_disconnect";
        BOOL v16 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_78;
      }
      uint64_t v26 = (char *)__nw_create_backtrace_string();
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v27 = os_log_type_enabled(v14, type);
      if (!v26)
      {
        if (!v27) {
          goto LABEL_79;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v39 = "nw_protocol_http2_transport_disconnect";
        BOOL v16 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_78;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v39 = "nw_protocol_http2_transport_disconnect";
        __int16 v40 = 2082;
        uint64_t v41 = (nw_protocol_identifier *)v26;
        BOOL v28 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
LABEL_51:
        _os_log_impl(&dword_1830D4000, v14, v15, v28, buf, 0x16u);
      }
LABEL_52:
      free(v26);
      if (!v13) {
        return;
      }
LABEL_80:
      uint64_t v34 = (char *)v13;
LABEL_88:
      free(v34);
      return;
    }
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v39 = "nw_protocol_http2_transport_disconnect";
    BOOL v16 = "%{public}s called with null http2_transport";
LABEL_78:
    _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
    goto LABEL_79;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v39 = "nw_protocol_http2_transport_disconnect";
    BOOL v13 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v13, &type, &v36)) {
      goto LABEL_79;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      BOOL v16 = "%{public}s called with null other_protocol";
      goto LABEL_78;
    }
    if (!v36)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      BOOL v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_78;
    }
    uint64_t v26 = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v29 = os_log_type_enabled(v14, type);
    if (!v26)
    {
      if (!v29) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      BOOL v16 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_78;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      __int16 v40 = 2082;
      uint64_t v41 = (nw_protocol_identifier *)v26;
      BOOL v28 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_51;
    }
    goto LABEL_52;
  }
  if (gLogDatapath)
  {
    char v17 = __nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      __int16 v40 = 2082;
      uint64_t v41 = (nw_protocol_identifier *)(handle + 205);
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v39 = "nw_protocol_http2_transport_disconnect";
    __int16 v40 = 2082;
    uint64_t v41 = (nw_protocol_identifier *)(handle + 205);
    BOOL v9 = "%{public}s %{public}s attempting to disconnect on protocol that doesn't have entry in table, ignoring";
    os_log_type_t v10 = v8;
    uint32_t v11 = 22;
LABEL_14:
    _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    return;
  }
  uint64_t v5 = output_handler_context[4];
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v12 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v39 = "nw_protocol_http2_transport_disconnect";
    __int16 v40 = 2082;
    uint64_t v41 = (nw_protocol_identifier *)(handle + 205);
    __int16 v42 = 2048;
    os_log_type_t v43 = a2;
    __int16 v44 = 2048;
    uint64_t v45 = output_handler_context;
    BOOL v9 = "%{public}s %{public}s protocol (%p) node (%p) has no stream pointer as extra";
    os_log_type_t v10 = v12;
    uint32_t v11 = 42;
    goto LABEL_14;
  }
  nw_http2_transport_stream_close((uint64_t)handle, v5);
  callbacks = a2->callbacks;
  if (callbacks)
  {
    disconnected = (void (*)(nw_protocol *, char *))callbacks->disconnected;
    if (disconnected)
    {
      disconnected(a2, handle);
      return;
    }
  }
  __nwlog_obj();
  identifier = a2->identifier;
  if (!identifier) {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)buf = 136446466;
  uint64_t v39 = "nw_protocol_http2_transport_disconnect";
  __int16 v40 = 2082;
  uint64_t v41 = identifier;
  os_log_type_t v19 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (__nwlog_fault(v19, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_86;
      }
      uint64_t v22 = a2->identifier;
      if (!v22) {
        uint64_t v22 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      __int16 v40 = 2082;
      uint64_t v41 = v22;
      uint64_t v23 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_85:
      _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x16u);
      goto LABEL_86;
    }
    if (!v36)
    {
      char v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_86;
      }
      uint64_t v33 = a2->identifier;
      if (!v33) {
        uint64_t v33 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      __int16 v40 = 2082;
      uint64_t v41 = v33;
      uint64_t v23 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
      goto LABEL_85;
    }
    char v30 = (char *)__nw_create_backtrace_string();
    char v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v31 = os_log_type_enabled(v20, type);
    if (!v30)
    {
      if (!v31) {
        goto LABEL_86;
      }
      __int16 v35 = a2->identifier;
      if (!v35) {
        __int16 v35 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      __int16 v40 = 2082;
      uint64_t v41 = v35;
      uint64_t v23 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
      goto LABEL_85;
    }
    if (v31)
    {
      if (a2->identifier) {
        uint64_t v32 = a2->identifier;
      }
      else {
        uint64_t v32 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v39 = "nw_protocol_http2_transport_disconnect";
      __int16 v40 = 2082;
      uint64_t v41 = v32;
      __int16 v42 = 2082;
      os_log_type_t v43 = (nw_protocol *)v30;
      _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v30);
  }
LABEL_86:
  if (v19)
  {
    uint64_t v34 = (char *)v19;
    goto LABEL_88;
  }
}

void nw_protocol_http2_transport_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v19, &type, &v35)) {
      goto LABEL_98;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      uint64_t v22 = "%{public}s called with null protocol";
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v27 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_98:
        if (!v19) {
          return;
        }
        goto LABEL_99;
      }
      if (!v27) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      uint64_t v22 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      char v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      uint64_t v22 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_97;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v19, &type, &v35)) {
      goto LABEL_98;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        char v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (!os_log_type_enabled(v20, type)) {
          goto LABEL_98;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
        uint64_t v22 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_97;
      }
      BOOL v28 = (char *)__nw_create_backtrace_string();
      char v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v29 = os_log_type_enabled(v20, type);
      if (!v28)
      {
        if (!v29) {
          goto LABEL_98;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
        uint64_t v22 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_97;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v28;
        char v30 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
LABEL_68:
        _os_log_impl(&dword_1830D4000, v20, v21, v30, buf, 0x16u);
      }
LABEL_69:
      free(v28);
      if (!v19) {
        return;
      }
LABEL_99:
      free(v19);
      return;
    }
    char v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_98;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
    uint64_t v22 = "%{public}s called with null http2_transport";
LABEL_97:
    _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0xCu);
    goto LABEL_98;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v19, &type, &v35)) {
      goto LABEL_98;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      uint64_t v22 = "%{public}s called with null other_protocol";
      goto LABEL_97;
    }
    if (!v35)
    {
      char v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      uint64_t v22 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_97;
    }
    BOOL v28 = (char *)__nw_create_backtrace_string();
    char v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v31 = os_log_type_enabled(v20, type);
    if (!v28)
    {
      if (!v31) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      uint64_t v22 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_97;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v28;
      char v30 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_68;
    }
    goto LABEL_69;
  }
  if (gLogDatapath)
  {
    uint64_t v23 = __nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    callbacks = default_input_handler->callbacks;
    if (callbacks)
    {
      connected = (void (*)(void))callbacks->connected;
      if (connected)
      {
        connected();
        goto LABEL_9;
      }
    }
  }
  if (nw_hash_table_count(handle[14]))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v15, &type, &v35)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      BOOL v18 = "%{public}s %{public}s Have remaining input handlers, but no connected callback on the default input handler";
    }
    else if (v35)
    {
      __int16 v24 = (char *)__nw_create_backtrace_string();
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v25 = os_log_type_enabled(v16, type);
      if (v24)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = (char *)handle + 205;
          *(_WORD *)&unsigned char buf[22] = 2082;
          uint64_t v38 = v24;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s %{public}s Have remaining input handlers, but no connected callback on the default input handler, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v24);
        goto LABEL_78;
      }
      if (!v25)
      {
LABEL_78:
        if (v15) {
          free(v15);
        }
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      BOOL v18 = "%{public}s %{public}s Have remaining input handlers, but no connected callback on the default input handler, no backtrace";
    }
    else
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      BOOL v18 = "%{public}s %{public}s Have remaining input handlers, but no connected callback on the default input handler,"
            " backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0x16u);
    goto LABEL_78;
  }
LABEL_80:
  uint64_t v33 = __nwlog_obj();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
    _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_INFO, "%{public}s No default input handler, skipping connected callback", buf, 0xCu);
  }
LABEL_9:
  if (a1->output_handler != a2)
  {
    if (gLogDatapath)
    {
      uint64_t v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_connected";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = (char *)handle + 205;
        BOOL v9 = "%{public}s %{public}s connected protocol is not our output_handler, ignoring";
LABEL_24:
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, v9, buf, 0x16u);
        return;
      }
    }
    return;
  }
  if (gLogDatapath)
  {
    uint64_t v32 = __nwlog_obj();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_process_connected";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if ((*((unsigned char *)handle + 204) & 0x10) != 0)
  {
    if (!handle[13])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v14 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_process_connected";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = (char *)handle + 205;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s %{public}s no listen handler on server, deferring processing of input and connected state until listen handler is present", buf, 0x16u);
      }
      *((unsigned char *)handle + 204) |= 0x40u;
      return;
    }
    if (!gLogDatapath) {
      goto LABEL_20;
    }
    os_log_type_t v10 = __nwlog_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_20;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_process_connected";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    uint32_t v11 = "%{public}s %{public}s listen handler present, processing input without waiting";
    goto LABEL_92;
  }
  if (gLogDatapath)
  {
    os_log_type_t v10 = __nwlog_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_process_connected";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      uint32_t v11 = "%{public}s %{public}s not server, processing input without waiting";
LABEL_92:
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, v11, buf, 0x16u);
    }
  }
LABEL_20:
  char v12 = *((unsigned char *)handle + 204);
  *((unsigned char *)handle + 204) = v12 & 0xBF;
  if ((v12 & 6) != 0)
  {
    if (gLogDatapath)
    {
      uint64_t v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_process_connected";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = (char *)handle + 205;
        BOOL v9 = "%{public}s %{public}s tunnel already connected or closed, ignoring connected event";
        goto LABEL_24;
      }
    }
  }
  else
  {
    nw_http2_transport_send_settings((uint64_t)handle);
    *((unsigned char *)handle + 204) |= 2u;
    if (gLogDatapath)
    {
      uint64_t v34 = __nwlog_obj();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_process_connected";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = (char *)handle + 205;
        _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s http2 tunnel is now connected", buf, 0x16u);
      }
    }
    nw_protocol_http2_transport_process_input((uint64_t)handle);
    BOOL v13 = (char *)handle[14];
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL45nw_protocol_http2_transport_process_connectedP27nw_protocol_http2_transport_block_invoke;
    uint64_t v38 = (char *)&__block_descriptor_tmp_22_38241;
    uint64_t v39 = handle;
    nw_hash_table_apply(v13, (uint64_t)buf);
  }
}

BOOL nw_protocol_http2_transport_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v64 = "nw_protocol_http2_transport_connect";
    BOOL v27 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (!__nwlog_fault(v27, &type, &v61)) {
      goto LABEL_116;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_116;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v64 = "nw_protocol_http2_transport_connect";
      char v30 = "%{public}s called with null protocol";
LABEL_115:
      _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
      goto LABEL_116;
    }
    if (!v61)
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v64 = "nw_protocol_http2_transport_connect";
        char v30 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_115;
      }
      goto LABEL_116;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v43 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v64 = "nw_protocol_http2_transport_connect";
        char v30 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_115;
      }
      goto LABEL_116;
    }
    if (!v43) {
      goto LABEL_94;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v64 = "nw_protocol_http2_transport_connect";
    __int16 v65 = 2082;
    char v66 = backtrace_string;
    __int16 v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_93:
    _os_log_impl(&dword_1830D4000, v28, v29, v44, buf, 0x16u);
    goto LABEL_94;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v64 = "nw_protocol_http2_transport_connect";
    BOOL v27 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (!__nwlog_fault(v27, &type, &v61)) {
      goto LABEL_116;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_116;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v64 = "nw_protocol_http2_transport_connect";
      char v30 = "%{public}s called with null http2_transport";
      goto LABEL_115;
    }
    if (!v61)
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v64 = "nw_protocol_http2_transport_connect";
        char v30 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_115;
      }
      goto LABEL_116;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v45 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v64 = "nw_protocol_http2_transport_connect";
        char v30 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_115;
      }
      goto LABEL_116;
    }
    if (!v45) {
      goto LABEL_94;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v64 = "nw_protocol_http2_transport_connect";
    __int16 v65 = 2082;
    char v66 = backtrace_string;
    __int16 v44 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
    goto LABEL_93;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v64 = "nw_protocol_http2_transport_connect";
    BOOL v27 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (!__nwlog_fault(v27, &type, &v61)) {
      goto LABEL_116;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v64 = "nw_protocol_http2_transport_connect";
        char v30 = "%{public}s called with null other_protocol";
        goto LABEL_115;
      }
LABEL_116:
      if (!v27) {
        return 0;
      }
      uint64_t v26 = (char *)v27;
      goto LABEL_53;
    }
    if (!v61)
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v64 = "nw_protocol_http2_transport_connect";
        char v30 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_115;
      }
      goto LABEL_116;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v47 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v64 = "nw_protocol_http2_transport_connect";
        char v30 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_115;
      }
      goto LABEL_116;
    }
    if (v47)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v64 = "nw_protocol_http2_transport_connect";
      __int16 v65 = 2082;
      char v66 = backtrace_string;
      __int16 v44 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_93;
    }
LABEL_94:
    free(backtrace_string);
    goto LABEL_116;
  }
  if (gLogDatapath)
  {
    BOOL v31 = __nwlog_obj();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v64 = "nw_protocol_http2_transport_connect";
      __int16 v65 = 2082;
      char v66 = handle + 205;
      _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if ((handle[204] & 4) != 0)
  {
    if (gLogDatapath)
    {
      uint64_t v46 = __nwlog_obj();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v64 = "nw_protocol_http2_transport_connect";
        __int16 v65 = 2082;
        char v66 = handle + 205;
        _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s tunnel already closed, ignoring connect with success", buf, 0x16u);
      }
    }
    return 1;
  }
  output_handler_context = a2->output_handler_context;
  if ((handle[204] & 2) == 0)
  {
    if (!output_handler_context) {
      goto LABEL_10;
    }
    uint64_t v6 = output_handler_context[4];
    if (v6)
    {
      *(unsigned char *)(v6 + 36) |= 2u;
      if (gLogDatapath)
      {
        os_log_type_t v56 = __nwlog_obj();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
        {
          int v57 = *(_DWORD *)(v6 + 32);
          *(_DWORD *)buf = 136446978;
          uint64_t v64 = "nw_protocol_http2_transport_connect";
          __int16 v65 = 2082;
          char v66 = handle + 205;
          __int16 v67 = 1024;
          *(_DWORD *)__int16 v68 = v57;
          *(_WORD *)&v68[4] = 2048;
          *(void *)&v68[6] = v6;
          _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s marked stream id %d (%p) as waiting for connect", buf, 0x26u);
        }
      }
LABEL_10:
      output_handler = a1->output_handler;
      if (output_handler)
      {
        callbacks = output_handler->callbacks;
        if (callbacks)
        {
          connect = (void (*)(void))callbacks->connect;
          if (connect)
          {
            connect();
            return 1;
          }
        }
      }
      __nwlog_obj();
      uint64_t v32 = a1->output_handler;
      uint64_t v33 = "invalid";
      if (v32)
      {
        identifier = v32->identifier;
        if (identifier) {
          uint64_t v33 = (const char *)identifier;
        }
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v64 = "nw_protocol_http2_transport_connect";
      __int16 v65 = 2082;
      char v66 = (char *)v33;
      char v35 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v61 = 0;
      if (__nwlog_fault(v35, &type, &v61))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v36 = __nwlog_obj();
          os_log_type_t v37 = type;
          if (!os_log_type_enabled(v36, type)) {
            goto LABEL_131;
          }
          uint64_t v38 = a1->output_handler;
          uint64_t v39 = "invalid";
          if (v38)
          {
            uint64_t v40 = v38->identifier;
            if (v40) {
              uint64_t v39 = (const char *)v40;
            }
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v64 = "nw_protocol_http2_transport_connect";
          __int16 v65 = 2082;
          char v66 = (char *)v39;
          uint64_t v41 = "%{public}s protocol %{public}s has invalid connect callback";
          goto LABEL_130;
        }
        if (!v61)
        {
          char v36 = __nwlog_obj();
          os_log_type_t v37 = type;
          if (!os_log_type_enabled(v36, type)) {
            goto LABEL_131;
          }
          BOOL v53 = a1->output_handler;
          int v54 = "invalid";
          if (v53)
          {
            BOOL v55 = v53->identifier;
            if (v55) {
              int v54 = (const char *)v55;
            }
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v64 = "nw_protocol_http2_transport_connect";
          __int16 v65 = 2082;
          char v66 = (char *)v54;
          uint64_t v41 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
          goto LABEL_130;
        }
        uint64_t v48 = (char *)__nw_create_backtrace_string();
        char v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v49 = os_log_type_enabled(v36, type);
        if (v48)
        {
          if (v49)
          {
            BOOL v50 = a1->output_handler;
            BOOL v51 = "invalid";
            if (v50)
            {
              BOOL v52 = v50->identifier;
              if (v52) {
                BOOL v51 = (const char *)v52;
              }
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v64 = "nw_protocol_http2_transport_connect";
            __int16 v65 = 2082;
            char v66 = (char *)v51;
            __int16 v67 = 2082;
            *(void *)__int16 v68 = v48;
            _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v48);
          goto LABEL_131;
        }
        if (v49)
        {
          uint64_t v58 = a1->output_handler;
          uint64_t v59 = "invalid";
          if (v58)
          {
            uint64_t v60 = v58->identifier;
            if (v60) {
              uint64_t v59 = (const char *)v60;
            }
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v64 = "nw_protocol_http2_transport_connect";
          __int16 v65 = 2082;
          char v66 = (char *)v59;
          uint64_t v41 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
LABEL_130:
          _os_log_impl(&dword_1830D4000, v36, v37, v41, buf, 0x16u);
        }
      }
LABEL_131:
      if (v35) {
        free(v35);
      }
      return 1;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v18 = handle + 205;
    *(_DWORD *)buf = 136446722;
    uint64_t v64 = "nw_protocol_http2_transport_connect";
    __int16 v65 = 2082;
    char v66 = handle + 205;
    __int16 v67 = 2048;
    *(void *)__int16 v68 = a2;
    os_log_type_t v19 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (!__nwlog_fault(v19, &type, &v61)) {
      goto LABEL_51;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v20 = gLogObj;
      os_log_type_t v21 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
LABEL_28:
        *(_DWORD *)buf = 136446722;
        uint64_t v64 = "nw_protocol_http2_transport_connect";
        __int16 v65 = 2082;
        char v66 = v18;
        __int16 v67 = 2048;
        *(void *)__int16 v68 = a2;
        uint64_t v22 = "%{public}s %{public}s hash node for protocol %p did not have stream as extra";
LABEL_50:
        _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0x20u);
      }
LABEL_51:
      if (!v19) {
        return 0;
      }
      uint64_t v26 = (char *)v19;
LABEL_53:
      free(v26);
      return 0;
    }
    if (v61)
    {
      uint64_t v23 = (char *)__nw_create_backtrace_string();
      char v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v24 = os_log_type_enabled(v20, type);
      if (v23)
      {
        if (v24) {
          goto LABEL_40;
        }
        goto LABEL_41;
      }
      if (!v24) {
        goto LABEL_51;
      }
      goto LABEL_49;
    }
    char v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_51;
    }
    goto LABEL_43;
  }
  if (output_handler_context)
  {
    uint64_t v11 = output_handler_context[4];
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = handle + 205;
      *(_DWORD *)buf = 136446722;
      uint64_t v64 = "nw_protocol_http2_transport_connect";
      __int16 v65 = 2082;
      char v66 = handle + 205;
      __int16 v67 = 2048;
      *(void *)__int16 v68 = a2;
      os_log_type_t v19 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v61 = 0;
      if (!__nwlog_fault(v19, &type, &v61)) {
        goto LABEL_51;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v20 = gLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_28;
        }
        goto LABEL_51;
      }
      if (v61)
      {
        uint64_t v23 = (char *)__nw_create_backtrace_string();
        char v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v25 = os_log_type_enabled(v20, type);
        if (v23)
        {
          if (v25)
          {
LABEL_40:
            *(_DWORD *)buf = 136446978;
            uint64_t v64 = "nw_protocol_http2_transport_connect";
            __int16 v65 = 2082;
            char v66 = v18;
            __int16 v67 = 2048;
            *(void *)__int16 v68 = a2;
            *(_WORD *)&v68[8] = 2082;
            *(void *)&v68[10] = v23;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s %{public}s hash node for protocol %p did not have stream as extra, dumping backtrace:%{public}s", buf, 0x2Au);
          }
LABEL_41:
          free(v23);
          goto LABEL_51;
        }
        if (!v25) {
          goto LABEL_51;
        }
LABEL_49:
        *(_DWORD *)buf = 136446722;
        uint64_t v64 = "nw_protocol_http2_transport_connect";
        __int16 v65 = 2082;
        char v66 = v18;
        __int16 v67 = 2048;
        *(void *)__int16 v68 = a2;
        uint64_t v22 = "%{public}s %{public}s hash node for protocol %p did not have stream as extra, no backtrace";
        goto LABEL_50;
      }
      char v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_51;
      }
LABEL_43:
      *(_DWORD *)buf = 136446722;
      uint64_t v64 = "nw_protocol_http2_transport_connect";
      __int16 v65 = 2082;
      char v66 = v18;
      __int16 v67 = 2048;
      *(void *)__int16 v68 = a2;
      uint64_t v22 = "%{public}s %{public}s hash node for protocol %p did not have stream as extra, backtrace limit exceeded";
      goto LABEL_50;
    }
    if (nw_http2_transport_stream_connect((uint64_t)handle, output_handler_context[4], (uint64_t)a2)) {
      return 1;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v12 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v13 = *(_DWORD *)(v11 + 32);
      *(_DWORD *)buf = 136446978;
      uint64_t v64 = "nw_protocol_http2_transport_connect";
      __int16 v65 = 2082;
      char v66 = handle + 205;
      __int16 v67 = 1024;
      *(_DWORD *)__int16 v68 = v13;
      *(_WORD *)&v68[4] = 2048;
      *(void *)&v68[6] = v11;
      BOOL v14 = "%{public}s %{public}s nw_http2_transport_stream_connect failed for stream id %d (%p)";
      os_log_type_t v15 = v12;
      uint32_t v16 = 38;
LABEL_24:
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, v14, buf, v16);
      return 0;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v17 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v64 = "nw_protocol_http2_transport_connect";
      __int16 v65 = 2082;
      char v66 = handle + 205;
      __int16 v67 = 2048;
      *(void *)__int16 v68 = a2;
      BOOL v14 = "%{public}s %{public}s connect called on protocol %p which is not in protocol hash table";
      os_log_type_t v15 = v17;
      uint32_t v16 = 32;
      goto LABEL_24;
    }
  }
  return result;
}

void nw_protocol_http2_transport_parameters_set_stream_receive_window_size(void *a1, uint64_t value)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v3 = xpc_uint64_create(value);
    nw_parameters_set_protocol_value(a1, "streamReceiveWindow", v3);
    if (v3)
    {
      xpc_release(v3);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v13 = "nw_protocol_http2_transport_parameters_set_stream_receive_window_size";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      int v13 = "nw_protocol_http2_transport_parameters_set_stream_receive_window_size";
      uint64_t v7 = "%{public}s called with null protocol_parameters";
      goto LABEL_19;
    }
    if (!v10)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      int v13 = "nw_protocol_http2_transport_parameters_set_stream_receive_window_size";
      uint64_t v7 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        int v13 = "nw_protocol_http2_transport_parameters_set_stream_receive_window_size";
        __int16 v14 = 2082;
        os_log_type_t v15 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_20;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      int v13 = "nw_protocol_http2_transport_parameters_set_stream_receive_window_size";
      uint64_t v7 = "%{public}s called with null protocol_parameters, no backtrace";
LABEL_19:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
}

void nw_protocol_http2_transport_parameters_set_connection_receive_window_size(void *a1, uint64_t value)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v3 = xpc_uint64_create(value);
    nw_parameters_set_protocol_value(a1, "connectionReceiveWindow", v3);
    if (v3)
    {
      xpc_release(v3);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v13 = "nw_protocol_http2_transport_parameters_set_connection_receive_window_size";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      int v13 = "nw_protocol_http2_transport_parameters_set_connection_receive_window_size";
      uint64_t v7 = "%{public}s called with null protocol_parameters";
      goto LABEL_19;
    }
    if (!v10)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      int v13 = "nw_protocol_http2_transport_parameters_set_connection_receive_window_size";
      uint64_t v7 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        int v13 = "nw_protocol_http2_transport_parameters_set_connection_receive_window_size";
        __int16 v14 = 2082;
        os_log_type_t v15 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_20;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      int v13 = "nw_protocol_http2_transport_parameters_set_connection_receive_window_size";
      uint64_t v7 = "%{public}s called with null protocol_parameters, no backtrace";
LABEL_19:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
}

void nw_protocol_http2_transport_parameters_set_tunnel_teardown_delay(void *a1, uint64_t value)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v3 = xpc_uint64_create(value);
    nw_parameters_set_protocol_value(a1, "tunnelTeardownDelay", v3);
    if (v3)
    {
      xpc_release(v3);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v13 = "nw_protocol_http2_transport_parameters_set_tunnel_teardown_delay";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      int v13 = "nw_protocol_http2_transport_parameters_set_tunnel_teardown_delay";
      uint64_t v7 = "%{public}s called with null protocol_parameters";
      goto LABEL_19;
    }
    if (!v10)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      int v13 = "nw_protocol_http2_transport_parameters_set_tunnel_teardown_delay";
      uint64_t v7 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        int v13 = "nw_protocol_http2_transport_parameters_set_tunnel_teardown_delay";
        __int16 v14 = 2082;
        os_log_type_t v15 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_20;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      int v13 = "nw_protocol_http2_transport_parameters_set_tunnel_teardown_delay";
      uint64_t v7 = "%{public}s called with null protocol_parameters, no backtrace";
LABEL_19:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
}

void sub_1839378F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_183937AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_copy(void *a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_alloc_init(NWConcrete_nw_proxy_config);
    xpc_object_t v3 = v2;
    if (v2)
    {
      *(_OWORD *)v2->identifier = *(_OWORD *)(v1 + 56);
      *(_OWORD *)v2->fallback_agent_uuid = *(_OWORD *)(v1 + 72);
      objc_storeStrong((id *)&v2->fallback_config, *((id *)v1 + 11));
      objc_storeStrong((id *)&v3->endpoint, *((id *)v1 + 5));
      uint64_t v4 = *((void *)v1 + 6);
      if (v4)
      {
        uint64_t v5 = nw_array_create();
        if (v5 != v4)
        {
          uint64_t v6 = v5;
          std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v5 + 16, *(void ***)(v4 + 16), *(void ***)(v4 + 24), (uint64_t)(*(void *)(v4 + 24) - *(void *)(v4 + 16)) >> 3);
          uint64_t v4 = v6;
        }
        resolved_endpoints = v3->resolved_endpoints;
        v3->resolved_endpoints = (OS_nw_array *)v4;
      }
      if (*((void *)v1 + 1))
      {
        uint64_t v8 = (OS_nw_dictionary *)nw_dictionary_create();
        stacks = v3->stacks;
        v3->stacks = v8;

        uint64_t v10 = *((void *)v1 + 1);
        v47[0] = MEMORY[0x1E4F143A8];
        v47[1] = 3221225472;
        void v47[2] = __nw_proxy_config_copy_block_invoke;
        v47[3] = &unk_1E5247FE0;
        uint64_t v48 = v3;
        nw_dictionary_apply(v10, (uint64_t)v47);
      }
      objc_storeStrong((id *)&v3->proxied_transports, *((id *)v1 + 2));
      objc_storeStrong((id *)&v3->required_protocols, *((id *)v1 + 3));
      objc_storeStrong((id *)&v3->remove_protocols, *((id *)v1 + 4));
      int v11 = *((unsigned __int8 *)v3 + 171);
      *(void *)&v3->unsigned int mode = *((void *)v1 + 19);
      v3->config_epoch = *((_WORD *)v1 + 84);
      int v12 = *((unsigned char *)v3 + 170) & 0xFE | v1[170] & 1;
      *((unsigned char *)v3 + 170) = v12;
      unsigned int v13 = v12 & 0xFFFFFFFD | (2 * ((v1[170] >> 1) & 1));
      *((unsigned char *)v3 + 170) = v13;
      unsigned int v14 = v13 & 0xFFFFFFFB | (4 * ((v1[170] >> 2) & 1));
      *((unsigned char *)v3 + 170) = v14;
      unsigned int v15 = v11 & 0xFFFFFFDF | (32 * ((v1[171] >> 5) & 1));
      *((unsigned char *)v3 + 171) = v15;
      unsigned int v16 = v14 & 0xFFFFFFEF | (16 * ((v1[170] >> 4) & 1));
      *((unsigned char *)v3 + 170) = v16;
      unsigned int v17 = v16 & 0xFFFFFFDF | (32 * ((v1[170] >> 5) & 1));
      *((unsigned char *)v3 + 170) = v17;
      unsigned int v18 = v17 & 0xFFFFFFF7 | (8 * ((v1[170] >> 3) & 1));
      *((unsigned char *)v3 + 170) = v18;
      unsigned int v19 = v18 & 0xFFFFFFBF | (((v1[170] >> 6) & 1) << 6);
      *((unsigned char *)v3 + 170) = v19;
      *((unsigned char *)v3 + 170) = v1[170] & 0x80 | v19 & 0x7F;
      v3->multipath_service = *((_DWORD *)v1 + 40);
      unsigned int v20 = v15 & 0xFFFFFFFD | (2 * ((v1[171] >> 1) & 1));
      *((unsigned char *)v3 + 171) = v20;
      unsigned int v21 = v20 & 0xFFFFFFFE | v1[171] & 1;
      *((unsigned char *)v3 + 171) = v21;
      unsigned int v22 = v21 & 0xFFFFFFFB | (4 * ((v1[171] >> 2) & 1));
      *((unsigned char *)v3 + 171) = v22;
      unsigned int v23 = v22 & 0xFFFFFFF7 | (8 * ((v1[171] >> 3) & 1));
      *((unsigned char *)v3 + 171) = v23;
      *((unsigned char *)v3 + 171) = v23 & 0xEF | v1[171] & 0x10;
      objc_storeStrong((id *)&v3->match_domains, *((id *)v1 + 15));
      objc_storeStrong((id *)&v3->excluded_domains, *((id *)v1 + 16));
      objc_storeStrong((id *)&v3->preferred_domains, *((id *)v1 + 17));
      objc_storeStrong((id *)&v3->alternate_agents, *((id *)v1 + 18));
      objc_storeStrong((id *)&v3->pac_script, *((id *)v1 + 14));
      char v24 = *((unsigned char *)v3 + 171) & 0xBF | (((v1[171] & 0x40) != 0) << 6);
      *((unsigned char *)v3 + 171) = v24;
      *((unsigned char *)v3 + 171) = v1[171] & 0x80 | v24 & 0x7F;
      *((unsigned char *)v3 + 172) = *((unsigned char *)v3 + 172) & 0xFD | v1[172] & 2;
      BOOL v25 = (void *)*((void *)v1 + 13);
      if (v25)
      {
        uint64_t v26 = v25;
        BOOL v27 = (const char *)v26[2];

        password = (const char *)nw_authentication_credential_get_password(*((void **)v1 + 13));
        nw_proxy_config_set_username_and_password(&v3->super, v27, password);
      }
      os_log_type_t v29 = v3;
      goto LABEL_19;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v30 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v52 = "nw_proxy_config_copy";
    BOOL v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (__nwlog_fault(v31, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v32 = (id)gLogObj;
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v52 = "nw_proxy_config_copy";
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
        }
      }
      else if (v49)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v32 = (id)gLogObj;
        os_log_type_t v36 = type;
        BOOL v37 = os_log_type_enabled(v32, type);
        if (backtrace_string)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v52 = "nw_proxy_config_copy";
            __int16 v53 = 2082;
            int v54 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v32, v36, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v31) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v52 = "nw_proxy_config_copy";
          _os_log_impl(&dword_1830D4000, v32, v36, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v32 = (id)gLogObj;
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v52 = "nw_proxy_config_copy";
          _os_log_impl(&dword_1830D4000, v32, v38, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v31)
    {
LABEL_19:

      goto LABEL_20;
    }
LABEL_18:
    free(v31);
    goto LABEL_19;
  }
  uint64_t v39 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v52 = "nw_proxy_config_copy";
  uint64_t v40 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v49 = 0;
  if (__nwlog_fault(v40, &type, &v49))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v41 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v52 = "nw_proxy_config_copy";
        _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null existing_config", buf, 0xCu);
      }
    }
    else if (v49)
    {
      BOOL v43 = (char *)__nw_create_backtrace_string();
      uint64_t v41 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v45 = os_log_type_enabled(v41, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v52 = "nw_proxy_config_copy";
          __int16 v53 = 2082;
          int v54 = v43;
          _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null existing_config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        goto LABEL_49;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v52 = "nw_proxy_config_copy";
        _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null existing_config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v41 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v52 = "nw_proxy_config_copy";
        _os_log_impl(&dword_1830D4000, v41, v46, "%{public}s called with null existing_config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_49:
  if (v40) {
    free(v40);
  }
  xpc_object_t v3 = 0;
LABEL_20:

  return v3;
}

void sub_183938584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_copy_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v5 = nw_protocol_stack_copy(a3);
  nw_dictionary_set_value(*(void *)(*(void *)(a1 + 32) + 8), a2, v5);

  return 1;
}

void nw_proxy_config_set_username_and_password(nw_proxy_config_t proxy_config, const char *username, const char *password)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v5 = proxy_config;
  if (!v5)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_proxy_config_set_username_and_password";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_proxy_config_set_username_and_password";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v25 = "nw_proxy_config_set_username_and_password";
          __int16 v26 = 2082;
          BOOL v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_40:
        free(v9);
        goto LABEL_5;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_proxy_config_set_username_and_password";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_proxy_config_set_username_and_password";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (username)
  {
    uint64_t v6 = (objc_class *)-[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], 1);
    Class isa = v5[13].isa;
    v5[13].Class isa = v6;

    nw_authentication_credential_set_username(v5[13].isa, username);
    if (password) {
      nw_authentication_credential_set_password(v5[13].isa, password);
    }
    goto LABEL_5;
  }
  int v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v25 = "nw_proxy_config_set_username_and_password";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_proxy_config_set_username_and_password";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null username", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v22)
  {
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_proxy_config_set_username_and_password";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null username, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  unsigned int v17 = (char *)__nw_create_backtrace_string();
  uint64_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_proxy_config_set_username_and_password";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null username, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v25 = "nw_proxy_config_set_username_and_password";
    __int16 v26 = 2082;
    BOOL v27 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null username, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_183938AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_merged(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = a1;
  uint64_t v4 = a2;
  id v5 = v4;
  if (v3[38] == 1)
  {
    if (v4[38] == 1)
    {
      uint64_t v6 = nw_proxy_config_copy(v3);
      objc_storeStrong((id *)&v6->endpoint, *((id *)v5 + 5));
      char v7 = *((unsigned char *)v6 + 171) & 0x7F;
      *((unsigned char *)v6 + 171) = v7;
      if (*((unsigned char *)v5 + 170))
      {
        *((unsigned char *)v6 + 170) |= 1u;
        if ((*((unsigned char *)v5 + 170) & 2) == 0)
        {
LABEL_5:
          if ((*((unsigned char *)v5 + 171) & 0x20) == 0)
          {
LABEL_7:
            v6->multipath_service = *((_DWORD *)v5 + 40);
            char v8 = v7 & 0xFD | *((unsigned char *)v5 + 171) & 2;
            *((unsigned char *)v6 + 171) = v8;
            char v9 = v8 & 0x7E | *((unsigned char *)v5 + 171) & 1;
            *((unsigned char *)v6 + 171) = v9;
            char v10 = v9 & 0xFB | *((unsigned char *)v5 + 171) & 4;
            *((unsigned char *)v6 + 171) = v10;
            *((unsigned char *)v6 + 171) = v10 & 0xF7 | *((unsigned char *)v5 + 171) & 8;
            uint64_t stacks = (uint64_t)v6->stacks;
            v26[0] = MEMORY[0x1E4F143A8];
            v26[1] = 3221225472;
            v26[2] = __nw_proxy_config_create_merged_block_invoke;
            v26[3] = &unk_1E5247FE0;
            id v27 = v5;
            nw_dictionary_apply(stacks, (uint64_t)v26);

            goto LABEL_8;
          }
LABEL_6:
          v7 |= 0x20u;
          *((unsigned char *)v6 + 171) = v7;
          goto LABEL_7;
        }
      }
      else if ((*((unsigned char *)v5 + 170) & 2) == 0)
      {
        goto LABEL_5;
      }
      *((unsigned char *)v6 + 170) |= 2u;
      if ((*((unsigned char *)v5 + 171) & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    unsigned int v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v31 = "nw_proxy_config_create_merged";
    unsigned int v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v14, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v31 = "nw_proxy_config_create_merged";
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null (lower_config->mode == nw_proxy_mode_protocol)", buf, 0xCu);
        }
LABEL_43:

        goto LABEL_44;
      }
      if (!v28)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v31 = "nw_proxy_config_create_merged";
          _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null (lower_config->mode == nw_proxy_mode_protocol), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v31 = "nw_proxy_config_create_merged";
          _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null (lower_config->mode == nw_proxy_mode_protocol), no backtrace", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v31 = "nw_proxy_config_create_merged";
        __int16 v32 = 2082;
        os_log_type_t v33 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null (lower_config->mode == nw_proxy_mode_protocol), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_31;
    }
  }
  else
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v31 = "nw_proxy_config_create_merged";
    unsigned int v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v14, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v31 = "nw_proxy_config_create_merged";
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null (config->mode == nw_proxy_mode_protocol)", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (!v28)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v31 = "nw_proxy_config_create_merged";
          _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null (config->mode == nw_proxy_mode_protocol), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v31 = "nw_proxy_config_create_merged";
          _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null (config->mode == nw_proxy_mode_protocol), no backtrace", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v31 = "nw_proxy_config_create_merged";
        __int16 v32 = 2082;
        os_log_type_t v33 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null (config->mode == nw_proxy_mode_protocol), dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_31:

      free(backtrace_string);
    }
  }
LABEL_44:
  if (v14) {
    free(v14);
  }
  uint64_t v6 = 0;
LABEL_8:

  return v6;
}

void sub_1839390CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_create_merged_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  nw_protocol_options_t v5 = nw_protocol_stack_copy_transport_protocol(v4);
  nw_protocol_options_t v6 = v5;
  if (v5)
  {
    char v7 = v5;
    id v8 = v7[1];
  }
  else
  {
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
    }
    id v8 = (id)g_tcp_definition;
  }
  int v36 = 0;
  char v9 = nw_proxy_config_copy_protocol_stack(*(void **)(a1 + 32), v8, &v36);
  if (v9)
  {
    uint64_t v30 = 0;
    BOOL v31 = &v30;
    uint64_t v32 = 0x3032000000;
    os_log_type_t v33 = __Block_byref_object_copy__38978;
    uint64_t v34 = __Block_byref_object_dispose__38979;
    id v35 = 0;
    iterate_block[0] = MEMORY[0x1E4F143A8];
    iterate_block[1] = 3221225472;
    iterate_block[2] = __nw_proxy_config_create_merged_block_invoke_27;
    iterate_block[3] = &unk_1E5240D88;
    iterate_void block[4] = &v30;
    nw_protocol_stack_iterate_application_protocols(v4, iterate_block);
    v27[0] = 0;
    v27[1] = v27;
    v27[2] = 0x3032000000;
    v27[3] = __Block_byref_object_copy__38978;
    v27[4] = __Block_byref_object_dispose__38979;
    id v28 = 0;
    char v10 = (void *)v31[5];
    if (v10)
    {
      id v11 = v10;
      int v12 = [v11 type];

      if (v12 == 4)
      {
        BOOL v13 = nw_endpoint_copy_host_port_endpoint_for_url((void *)v31[5]);
        unsigned int v14 = (void *)v31[5];
        v31[5] = v13;
      }
      if (nw_endpoint_get_type((nw_endpoint_t)v31[5]) == nw_endpoint_type_host)
      {
        hostname = nw_endpoint_get_hostname((nw_endpoint_t)v31[5]);
        size_t v16 = strlen(hostname);
        uint16_t port = nw_endpoint_get_port((nw_endpoint_t)v31[5]);
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 3221225472;
        v25[2] = __nw_proxy_config_create_merged_block_invoke_2;
        v25[3] = &unk_1E5240DD8;
        uint16_t v26 = port;
        v25[5] = v16;
        v25[6] = hostname;
        void v25[4] = v27;
        nw_protocol_stack_iterate_application_protocols(v9, v25);
      }
    }
    if (v6 && v36 == 3) {
      nw_protocol_stack_append_application_protocol(v4, v6);
    }
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_proxy_config_create_merged_block_invoke_4;
    v22[3] = &unk_1E5240E00;
    os_log_type_t v24 = v27;
    os_log_type_t v18 = v4;
    BOOL v23 = v18;
    nw_protocol_stack_iterate_application_protocols(v9, v22);
    BOOL v19 = v9;
    os_log_type_t v20 = v19[3];

    nw_protocol_stack_set_transport_protocol(v18, v20);
    _Block_object_dispose(v27, 8);

    _Block_object_dispose(&v30, 8);
  }

  return 1;
}

void sub_183939434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);

  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

void *nw_proxy_config_copy_protocol_stack(void *a1, void *a2, _DWORD *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  char v7 = v6;
  if (!v5)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v45 = "nw_proxy_config_copy_protocol_stack";
    size_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault(v16, &type, &v42)) {
      goto LABEL_83;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null config", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (!v42)
    {
      unsigned int v17 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_1830D4000, v17, v37, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_82;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v17 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v29 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_1830D4000, v17, v28, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v45 = "nw_proxy_config_copy_protocol_stack";
      __int16 v46 = 2082;
      BOOL v47 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v17, v28, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_55;
  }
  if (!v6)
  {
    BOOL v19 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v45 = "nw_proxy_config_copy_protocol_stack";
    os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v20, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v21 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v45 = "nw_proxy_config_copy_protocol_stack";
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null transport_protocol", buf, 0xCu);
        }
      }
      else if (v42)
      {
        uint64_t v30 = (char *)__nw_create_backtrace_string();
        BOOL v21 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v21, type);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v45 = "nw_proxy_config_copy_protocol_stack";
            __int16 v46 = 2082;
            BOOL v47 = v30;
            _os_log_impl(&dword_1830D4000, v21, v31, "%{public}s called with null transport_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v30);
          goto LABEL_71;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v45 = "nw_proxy_config_copy_protocol_stack";
          _os_log_impl(&dword_1830D4000, v21, v31, "%{public}s called with null transport_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v21 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v45 = "nw_proxy_config_copy_protocol_stack";
          _os_log_impl(&dword_1830D4000, v21, v38, "%{public}s called with null transport_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_71:
    if (v20) {
      free(v20);
    }
    char v7 = 0;
    goto LABEL_85;
  }
  if (!a3)
  {
    BOOL v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v45 = "nw_proxy_config_copy_protocol_stack";
    size_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault(v16, &type, &v42)) {
      goto LABEL_83;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v17 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null proxy_protocol_level", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (!v42)
    {
      unsigned int v17 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_1830D4000, v17, v39, "%{public}s called with null proxy_protocol_level, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_82;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v17 = __nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v34 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_1830D4000, v17, v33, "%{public}s called with null proxy_protocol_level, no backtrace", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v45 = "nw_proxy_config_copy_protocol_stack";
      __int16 v46 = 2082;
      BOOL v47 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v17, v33, "%{public}s called with null proxy_protocol_level, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_55;
  }
  if (!*((void *)v5 + 1))
  {
LABEL_85:
    unsigned int v14 = 0;
    goto LABEL_86;
  }
  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
  }
  id v8 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8);

  if (is_equal_unsafe)
  {
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
    }
    id v10 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;

    char v7 = v10;
  }
  identifier = nw_protocol_definition_get_identifier(v7);
  if (!identifier)
  {
    os_log_type_t v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v45 = "nw_proxy_config_copy_protocol_stack";
    size_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault(v16, &type, &v42)) {
      goto LABEL_83;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v17 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null transport_identifier", buf, 0xCu);
      }
LABEL_82:

LABEL_83:
      if (v16) {
        free(v16);
      }
      goto LABEL_85;
    }
    if (!v42)
    {
      unsigned int v17 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_1830D4000, v17, v40, "%{public}s called with null transport_identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_82;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v17 = __nwlog_obj();
    os_log_type_t v35 = type;
    BOOL v36 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_1830D4000, v17, v35, "%{public}s called with null transport_identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v45 = "nw_proxy_config_copy_protocol_stack";
      __int16 v46 = 2082;
      BOOL v47 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v17, v35, "%{public}s called with null transport_identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_55:

    free(backtrace_string);
    goto LABEL_83;
  }
  int v12 = identifier;
  buf[0] = 0;
  *a3 = nw_proxy_config_should_proxy_transport_at_level((NWConcrete_nw_proxy_config *)v5, identifier, (BOOL *)buf);
  if (buf[0]) {
    BOOL v13 = "proxy-wildcard";
  }
  else {
    BOOL v13 = v12;
  }
  unsigned int v14 = nw_dictionary_copy_value(*((void *)v5 + 1), (uint64_t)v13);
LABEL_86:

  return v14;
}

void sub_183939E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__38978(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__38979(uint64_t a1)
{
}

void __nw_proxy_config_create_merged_block_invoke_27(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = nw_protocol_options_copy_proxy_endpoint(v4);
  if (v3)
  {
    if (!nw_protocol_options_proxy_endpoint_should_override_stack(v4)) {
      nw_protocol_options_set_proxy_endpoint(v4, v3, 1);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v3);
  }
}

void __nw_proxy_config_create_merged_block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __nw_proxy_config_create_merged_block_invoke_3;
  v7[3] = &unk_1E5240DB0;
  __int16 v8 = *(_WORD *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  v7[4] = &v9;
  v7[5] = v5;
  v7[6] = v6;
  nw_protocol_options_enumerate_proxy_next_hops(v4, v7);
  if (*((unsigned char *)v10 + 24)) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
  _Block_object_dispose(&v9, 8);
}

void __nw_proxy_config_create_merged_block_invoke_4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(id *)(v4 + 40);
  if (v5)
  {
    if (v5 != v3) {
      goto LABEL_7;
    }
    *(void *)(v4 + 40) = 0;
    id v7 = v3;

    id v3 = v7;
  }
  id v8 = v3;
  uint64_t v6 = nw_protocol_options_copy(v3);
  if (nw_protocol_options_is_masque(v6))
  {
    nw_masque_options_set_forced_protocol(v6, 0);
    nw_masque_options_set_target_endpoint(v6, 0);
  }
  nw_protocol_stack_append_application_protocol(*(void **)(a1 + 32), v6);

  id v3 = v8;
LABEL_7:
}

void sub_18393A090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __nw_proxy_config_create_merged_block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    endpoint = v3;
    nw_endpoint_type_t type = nw_endpoint_get_type(v3);
    uint64_t v4 = endpoint;
    if (type == nw_endpoint_type_host)
    {
      int v6 = *(unsigned __int16 *)(a1 + 56);
      int port = nw_endpoint_get_port(endpoint);
      uint64_t v4 = endpoint;
      if (v6 == port)
      {
        hostname = nw_endpoint_get_hostname(endpoint);
        size_t v9 = strlen(hostname);
        unint64_t v10 = *(void *)(a1 + 40);
        uint64_t v4 = endpoint;
        if (v9 > v10)
        {
          int v11 = strcmp(&hostname[v9 - v10], *(const char **)(a1 + 48));
          uint64_t v4 = endpoint;
          if (!v11) {
            goto LABEL_8;
          }
        }
        if (v9 == v10)
        {
          int v12 = strcmp(hostname, *(const char **)(a1 + 48));
          uint64_t v4 = endpoint;
          if (!v12) {
LABEL_8:
          }
            *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        }
      }
    }
  }
}

void sub_18393A19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_proxy_config_should_proxy_transport_at_level(NWConcrete_nw_proxy_config *a1, const char *a2, BOOL *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  p_Class isa = (xpc_object_t *)&v5->super.isa;
  if (v5)
  {
    if (a2)
    {
      proxied_transports = v5->proxied_transports;
      if (!proxied_transports) {
        goto LABEL_11;
      }
      uint64_t uint64 = xpc_dictionary_get_uint64(proxied_transports, a2);
      if (!uint64)
      {
        if (nw_proxy_config_default_transport(void)::onceToken[0] != -1) {
          dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_265);
        }
        if (!strcmp(a2, (const char *)nw_proxy_config_default_transport(void)::default_transport_string)) {
          goto LABEL_11;
        }
        uint64_t v9 = xpc_dictionary_get_uint64(p_isa[2], "proxy-wildcard");
        uint64_t uint64 = v9;
        if (a3) {
          *a3 = 1;
        }
        if (!v9) {
LABEL_11:
        }
          uint64_t uint64 = 4;
      }
      goto LABEL_12;
    }
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_proxy_config_should_proxy_transport_at_level";
    int v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          id v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null protocol_name", buf, 0xCu);
        }
LABEL_44:

        goto LABEL_45;
      }
      if (!v24)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          id v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null protocol_name, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_44;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          id v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null protocol_name, no backtrace", buf, 0xCu);
        }
        goto LABEL_44;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        id v27 = "nw_proxy_config_should_proxy_transport_at_level";
        __int16 v28 = 2082;
        BOOL v29 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null protocol_name, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_32;
    }
  }
  else
  {
    int v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_proxy_config_should_proxy_transport_at_level";
    int v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          id v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null config", buf, 0xCu);
        }
        goto LABEL_44;
      }
      if (!v24)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          id v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_44;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          id v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
        goto LABEL_44;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        id v27 = "nw_proxy_config_should_proxy_transport_at_level";
        __int16 v28 = 2082;
        BOOL v29 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_32:

      free(backtrace_string);
    }
  }
LABEL_45:
  if (v12) {
    free(v12);
  }
  uint64_t uint64 = 0;
LABEL_12:

  return uint64;
}

void sub_18393A6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL33nw_proxy_config_default_transportv_block_invoke()
{
  if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
  }
  id v0 = (id)g_tcp_definition;
  nw_proxy_config_default_transport(void)::default_transport_string = (uint64_t)nw_protocol_definition_get_identifier(v0);
}

uint64_t __nw_proxy_config_is_equal_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = nw_dictionary_copy_value(*(void *)(*(void *)(a1 + 32) + 8), a2);
  uint64_t is_equal = nw_protocol_stack_is_equal(v5, v6, 0);
  if ((is_equal & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }

  return is_equal;
}

void sub_18393A7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_is_equal_block_invoke_2(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = nw_array_get_object_at_index(*(void *)(*(void *)(a1 + 32) + 48), a2);
  uint64_t is_equal = nw_endpoint_is_equal(v5, v6, 0);
  if ((is_equal & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }

  return is_equal;
}

void sub_18393A868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

size_t nw_proxy_config_get_hash(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v24 = 0;
    os_log_type_t v25 = &v24;
    uint64_t v26 = 0x2020000000;
    uint64_t v27 = 0;
    uint64_t v3 = [*((id *)v1 + 5) getHash];
    v25[3] ^= v3;
    uint64_t v4 = v2[1];
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_proxy_config_get_hash_block_invoke;
    v23[3] = &unk_1E5240E28;
    v23[4] = &v24;
    nw_dictionary_apply(v4, (uint64_t)v23);
    id v5 = (void *)v2[2];
    if (v5)
    {
      size_t v6 = xpc_hash(v5);
      v25[3] ^= v6;
    }
    id v7 = (void *)v2[3];
    if (v7)
    {
      size_t v8 = xpc_hash(v7);
      v25[3] ^= v8;
    }
    uint64_t v9 = (void *)v2[4];
    if (v9)
    {
      size_t v10 = xpc_hash(v9);
      v25[3] ^= v10;
    }
    int v11 = (void *)v2[14];
    if (v11)
    {
      size_t v12 = xpc_hash(v11);
      v25[3] ^= v12;
    }
    BOOL v13 = (void *)v2[15];
    if (v13)
    {
      size_t v14 = xpc_hash(v13);
      v25[3] ^= v14;
    }
    os_log_type_t v15 = (void *)v2[16];
    if (v15)
    {
      size_t v16 = xpc_hash(v15);
      v25[3] ^= v16;
    }
    unsigned int v17 = (void *)v2[17];
    if (v17)
    {
      size_t v18 = xpc_hash(v17);
      v25[3] ^= v18;
    }
    BOOL v19 = (void *)v2[18];
    if (v19)
    {
      size_t v20 = xpc_hash(v19);
      size_t v21 = v25[3] ^ v20;
      v25[3] = v21;
    }
    else
    {
      size_t v21 = v25[3];
    }
    _Block_object_dispose(&v24, 8);
  }
  else
  {
    size_t v21 = 0;
  }

  return v21;
}

void sub_18393AA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_get_hash_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^= nw_protocol_stack_get_hash(v4);

  return 1;
}

void sub_18393AA9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_proxy_config_get_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[38];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  size_t v16 = "nw_proxy_config_get_mode";
  size_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v16 = "nw_proxy_config_get_mode";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          size_t v16 = "nw_proxy_config_get_mode";
          __int16 v17 = 2082;
          size_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        size_t v16 = "nw_proxy_config_get_mode";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v16 = "nw_proxy_config_get_mode";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_proxy_config_get_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = 1;
    switch(v1[38])
    {
      case 1u:
        uint64_t v3 = v1[39];
        break;
      case 2u:
        uint64_t v3 = 1002;
        break;
      case 3u:
        uint64_t v3 = 1001;
        break;
      case 4u:
        goto LABEL_7;
      default:
        goto LABEL_3;
    }
    goto LABEL_7;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  size_t v16 = "nw_proxy_config_get_type";
  size_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v16 = "nw_proxy_config_get_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          size_t v16 = "nw_proxy_config_get_type";
          __int16 v17 = 2082;
          size_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        size_t v16 = "nw_proxy_config_get_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v16 = "nw_proxy_config_get_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v6) {
    free(v6);
  }
LABEL_3:
  uint64_t v3 = 0;
LABEL_7:

  return v3;
}

void nw_proxy_config_set_type(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 39) = a2;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  size_t v16 = "nw_proxy_config_set_type";
  size_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v16 = "nw_proxy_config_set_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          size_t v16 = "nw_proxy_config_set_type";
          __int16 v17 = 2082;
          size_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        size_t v16 = "nw_proxy_config_set_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v16 = "nw_proxy_config_set_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

NWConcrete_nw_proxy_config *nw_proxy_config_create(void *a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  id v5 = a2;
  size_t v6 = v5;
  if (!v4)
  {
    os_log_type_t v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_proxy_config_create";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v24, &type, &v37)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null proxy_endpoint", buf, 0xCu);
      }
    }
    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v25, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "nw_proxy_config_create";
          __int16 v41 = 2082;
          char v42 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null proxy_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v24) {
          goto LABEL_63;
        }
        goto LABEL_62;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null proxy_endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_1830D4000, v25, v35, "%{public}s called with null proxy_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_60;
  }
  if (!v5)
  {
    uint64_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_proxy_config_create";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v24, &type, &v37)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null proxy_options", buf, 0xCu);
      }
    }
    else if (v37)
    {
      BOOL v32 = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v25, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "nw_proxy_config_create";
          __int16 v41 = 2082;
          char v42 = v32;
          _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s called with null proxy_options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v32);
LABEL_61:
        if (!v24)
        {
LABEL_63:
          os_log_type_t v8 = 0;
          goto LABEL_27;
        }
LABEL_62:
        free(v24);
        goto LABEL_63;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s called with null proxy_options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null proxy_options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_60:

    goto LABEL_61;
  }
  id v7 = objc_alloc_init(NWConcrete_nw_proxy_config);
  os_log_type_t v8 = v7;
  if (v7)
  {
    v7->unsigned int mode = 1;
    objc_storeStrong((id *)&v7->endpoint, a1);
    uint64_t v9 = (OS_nw_dictionary *)nw_dictionary_create();
    uint64_t stacks = v8->stacks;
    v8->uint64_t stacks = v9;

    BOOL v11 = objc_alloc_init(NWConcrete_nw_protocol_stack);
    nw_protocol_stack_append_application_protocol(v11, v6);
    uint64_t v12 = (uint64_t)v8->stacks;
    if (nw_proxy_config_default_transport(void)::onceToken[0] != -1) {
      dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_265);
    }
    nw_dictionary_set_value(v12, (const char *)nw_proxy_config_default_transport(void)::default_transport_string, v11);
    char v13 = v8;

    goto LABEL_26;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v14 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v40 = "nw_proxy_config_create";
  os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (__nwlog_fault(v15, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v16 = (id)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
      }
    }
    else if (v37)
    {
      size_t v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v16 = (id)gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "nw_proxy_config_create";
          __int16 v41 = 2082;
          char v42 = v18;
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v18);
        if (!v15) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v16 = (id)gLogObj;
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v15) {
LABEL_25:
  }
    free(v15);
LABEL_26:

LABEL_27:
  return v8;
}

void sub_18393BA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_with_stack(void *a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  id v5 = a2;
  size_t v6 = v5;
  if (v4)
  {
    if (v5)
    {
      id v7 = objc_alloc_init(NWConcrete_nw_proxy_config);
      os_log_type_t v8 = v7;
      if (v7)
      {
        v7->unsigned int mode = 1;
        objc_storeStrong((id *)&v7->endpoint, a1);
        uint64_t v9 = (OS_nw_dictionary *)nw_dictionary_create();
        uint64_t stacks = v8->stacks;
        v8->uint64_t stacks = v9;

        uint64_t v11 = (uint64_t)v8->stacks;
        if (nw_proxy_config_default_transport(void)::onceToken[0] != -1) {
          dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_265);
        }
        nw_dictionary_set_value(v11, (const char *)nw_proxy_config_default_transport(void)::default_transport_string, v6);
        uint64_t v12 = v8;
        goto LABEL_26;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v38 = "nw_proxy_config_create_with_stack";
      id v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v35 = 0;
      if (__nwlog_fault(v14, &type, &v35))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v15 = (id)gLogObj;
          os_log_type_t v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v38 = "nw_proxy_config_create_with_stack";
            _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
          }
        }
        else if (v35)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v15 = (id)gLogObj;
          os_log_type_t v18 = type;
          BOOL v19 = os_log_type_enabled(v15, type);
          if (backtrace_string)
          {
            if (v19)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v38 = "nw_proxy_config_create_with_stack";
              __int16 v39 = 2082;
              os_log_type_t v40 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v14) {
              goto LABEL_26;
            }
            goto LABEL_25;
          }
          if (v19)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v38 = "nw_proxy_config_create_with_stack";
            _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v15 = (id)gLogObj;
          os_log_type_t v20 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v38 = "nw_proxy_config_create_with_stack";
            _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v14)
      {
LABEL_26:

        goto LABEL_27;
      }
LABEL_25:
      free(v14);
      goto LABEL_26;
    }
    os_log_type_t v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_proxy_config_create_with_stack";
    os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v23, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v24 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null stack", buf, 0xCu);
        }
LABEL_59:

        goto LABEL_60;
      }
      if (!v35)
      {
        uint64_t v24 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_1830D4000, v24, v34, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_59;
      }
      os_log_type_t v28 = (char *)__nw_create_backtrace_string();
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v24, type);
      if (!v28)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
        goto LABEL_59;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v38 = "nw_proxy_config_create_with_stack";
        __int16 v39 = 2082;
        os_log_type_t v40 = v28;
        _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_47;
    }
  }
  else
  {
    os_log_type_t v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_proxy_config_create_with_stack";
    os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v23, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v24 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null proxy_endpoint", buf, 0xCu);
        }
        goto LABEL_59;
      }
      if (!v35)
      {
        uint64_t v24 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_1830D4000, v24, v33, "%{public}s called with null proxy_endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_59;
      }
      os_log_type_t v28 = (char *)__nw_create_backtrace_string();
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v24, type);
      if (!v28)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s called with null proxy_endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_59;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v38 = "nw_proxy_config_create_with_stack";
        __int16 v39 = 2082;
        os_log_type_t v40 = v28;
        _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s called with null proxy_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_47:

      free(v28);
    }
  }
LABEL_60:
  if (v23) {
    free(v23);
  }
  os_log_type_t v8 = 0;
LABEL_27:

  return v8;
}

void sub_18393C26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_direct()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v0 = objc_alloc_init(NWConcrete_nw_proxy_config);
  id v1 = v0;
  if (v0)
  {
    v0->unsigned int mode = 4;
    uint64_t v2 = v0;
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_proxy_config_create_direct";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_8;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    os_log_type_t v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_proxy_config_create_direct";
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
    }
LABEL_7:

LABEL_8:
    if (!v4) {
      goto LABEL_10;
    }
LABEL_9:
    free(v4);
    goto LABEL_10;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_proxy_config_create_direct";
      _os_log_impl(&dword_1830D4000, v5, v11, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_7;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  os_log_type_t v9 = type;
  BOOL v10 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_proxy_config_create_direct";
      _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_7;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v15 = "nw_proxy_config_create_direct";
    __int16 v16 = 2082;
    os_log_type_t v17 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v4) {
    goto LABEL_9;
  }
LABEL_10:

  return v1;
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_pac_url(void *a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v2 = a1;
  id v3 = v2;
  if (v2)
  {
    id v4 = v2;
    int v5 = [v4 type];

    if (v5 == 4)
    {
      os_log_type_t v6 = objc_alloc_init(NWConcrete_nw_proxy_config);
      id v7 = v6;
      if (v6)
      {
        v6->unsigned int mode = 2;
        objc_storeStrong((id *)&v6->endpoint, a1);
        os_log_type_t v8 = v7;
LABEL_24:

        goto LABEL_25;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_proxy_config_create_pac_url";
      BOOL v10 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v31 = 0;
      if (__nwlog_fault(v10, &type, &v31))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (id)gLogObj;
          os_log_type_t v12 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v34 = "nw_proxy_config_create_pac_url";
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
          }
        }
        else if (v31)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (id)gLogObj;
          os_log_type_t v14 = type;
          BOOL v15 = os_log_type_enabled(v11, type);
          if (backtrace_string)
          {
            if (v15)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v34 = "nw_proxy_config_create_pac_url";
              __int16 v35 = 2082;
              os_log_type_t v36 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v10) {
              goto LABEL_24;
            }
            goto LABEL_23;
          }
          if (v15)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v34 = "nw_proxy_config_create_pac_url";
            _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (id)gLogObj;
          os_log_type_t v16 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v34 = "nw_proxy_config_create_pac_url";
            _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v10) {
        goto LABEL_24;
      }
LABEL_23:
      free(v10);
      goto LABEL_24;
    }
    os_log_type_t v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_proxy_config_create_pac_url";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v19, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null (nw_endpoint_get_type(pac_url) == nw_endpoint_type_url)", buf, 0xCu);
        }
LABEL_57:

        goto LABEL_58;
      }
      if (!v31)
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s called with null (nw_endpoint_get_type(pac_url) == nw_endpoint_type_url), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_57;
      }
      uint64_t v24 = (char *)__nw_create_backtrace_string();
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v20, type);
      if (!v24)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null (nw_endpoint_get_type(pac_url) == nw_endpoint_type_url), no backtrace", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v34 = "nw_proxy_config_create_pac_url";
        __int16 v35 = 2082;
        os_log_type_t v36 = v24;
        _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null (nw_endpoint_get_type(pac_url) == nw_endpoint_type_url), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_proxy_config_create_pac_url";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v19, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null pac_url", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (!v31)
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s called with null pac_url, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_57;
      }
      uint64_t v24 = (char *)__nw_create_backtrace_string();
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v20, type);
      if (!v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null pac_url, no backtrace", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v34 = "nw_proxy_config_create_pac_url";
        __int16 v35 = 2082;
        os_log_type_t v36 = v24;
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null pac_url, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_45:

      free(v24);
    }
  }
LABEL_58:
  if (v19) {
    free(v19);
  }
  id v7 = 0;
LABEL_25:

  return v7;
}

void sub_18393CCFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_pac_script(const char *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v2 = objc_alloc_init(NWConcrete_nw_proxy_config);
    id v3 = v2;
    if (v2)
    {
      v2->unsigned int mode = 3;
      id v4 = (OS_xpc_object *)xpc_string_create(a1);
      pac_script = v3->pac_script;
      v3->pac_script = v4;

      os_log_type_t v6 = v3;
LABEL_11:

      return v3;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_proxy_config_create_pac_script";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v8, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_proxy_config_create_pac_script";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v9 = (id)gLogObj;
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v27 = "nw_proxy_config_create_pac_script";
            __int16 v28 = 2082;
            os_log_type_t v29 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v13, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v8) {
            goto LABEL_11;
          }
          goto LABEL_10;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_proxy_config_create_pac_script";
          _os_log_impl(&dword_1830D4000, v9, v13, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v9 = (id)gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_proxy_config_create_pac_script";
          _os_log_impl(&dword_1830D4000, v9, v15, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v8) {
      goto LABEL_11;
    }
LABEL_10:
    free(v8);
    goto LABEL_11;
  }
  os_log_type_t v16 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_proxy_config_create_pac_script";
  os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v17, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_proxy_config_create_pac_script";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null pac_script", buf, 0xCu);
      }
    }
    else if (v24)
    {
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_proxy_config_create_pac_script";
          __int16 v28 = 2082;
          os_log_type_t v29 = v20;
          _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null pac_script, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_41;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_proxy_config_create_pac_script";
        _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null pac_script, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_proxy_config_create_pac_script";
        _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null pac_script, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_41:
  if (v17) {
    free(v17);
  }
  return 0;
}

void sub_18393D25C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_proxy_config_copy_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = v1[5];
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_copy_endpoint";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_copy_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_enumerate_endpoints(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v9, &type, &v25)) {
      goto LABEL_44;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_44:
        if (!v9) {
          goto LABEL_10;
        }
LABEL_45:
        free(v9);
        goto LABEL_10;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_43:

    goto LABEL_44;
  }
  if (v4)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v28 = 0;
    uint64_t v6 = v3[1];
    if (v6 && nw_dictionary_get_count(v6))
    {
      uint64_t v7 = v3[1];
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_proxy_config_enumerate_endpoints_block_invoke;
      v22[3] = &unk_1E5240E78;
      os_log_type_t v23 = v5;
      char v24 = buf;
      nw_dictionary_apply(v7, (uint64_t)v22);
    }
    if (!*(unsigned char *)(*(void *)&buf[8] + 24) && v3[5]) {
      v5[2](v5);
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_10;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v9, &type, &v25)) {
    goto LABEL_44;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_43;
  }
  if (!v25)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_43;
  }
  __int16 v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_43;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_45;
  }
LABEL_10:
}

void sub_18393DA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_endpoints_block_invoke(uint64_t a1, uint64_t a2, NSObject *a3)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __nw_proxy_config_enumerate_endpoints_block_invoke_2;
  void v8[3] = &unk_1E5240E50;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v5;
  uint64_t v10 = v6;
  nw_protocol_stack_iterate_application_protocols(a3, v8);

  return 0;
}

void __nw_proxy_config_enumerate_endpoints_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = nw_protocol_options_copy_proxy_endpoint(a2);
  if (v3)
  {
    id v4 = v3;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    id v3 = v4;
  }
}

void sub_18393DBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_add_resolved_endpoint(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v26 = "nw_proxy_config_add_resolved_endpoint";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_proxy_config_add_resolved_endpoint";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v26 = "nw_proxy_config_add_resolved_endpoint";
          __int16 v27 = 2082;
          char v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v10) {
          goto LABEL_6;
        }
LABEL_41:
        free(v10);
        goto LABEL_6;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_proxy_config_add_resolved_endpoint";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_proxy_config_add_resolved_endpoint";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    uint64_t v6 = v3[6];
    if (!v6)
    {
      BOOL v7 = nw_array_create();
      os_log_type_t v8 = (void *)v3[6];
      v3[6] = v7;

      uint64_t v6 = v3[6];
    }
    nw_array_append(v6, v5);
    goto LABEL_6;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v26 = "nw_proxy_config_add_resolved_endpoint";
  uint64_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "nw_proxy_config_add_resolved_endpoint";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null resolved_endpoint", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v23)
  {
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "nw_proxy_config_add_resolved_endpoint";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null resolved_endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  os_log_type_t v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "nw_proxy_config_add_resolved_endpoint";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null resolved_endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v26 = "nw_proxy_config_add_resolved_endpoint";
    __int16 v27 = 2082;
    char v28 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null resolved_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_41;
  }
LABEL_6:
}

void nw_proxy_config_enumerate_resolved_endpoints(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    BOOL v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v26 = "nw_proxy_config_enumerate_resolved_endpoints";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_proxy_config_enumerate_resolved_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v26 = "nw_proxy_config_enumerate_resolved_endpoints";
          __int16 v27 = 2082;
          char v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_proxy_config_enumerate_resolved_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_proxy_config_enumerate_resolved_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    uint64_t v6 = (atomic_uchar *)v3[6];
    if (v6)
    {
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_proxy_config_enumerate_resolved_endpoints_block_invoke;
      v21[3] = &unk_1E524AE90;
      id v22 = v4;
      nw_array_apply(v6, (uint64_t)v21);
    }
    goto LABEL_5;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v26 = "nw_proxy_config_enumerate_resolved_endpoints";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "nw_proxy_config_enumerate_resolved_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "nw_proxy_config_enumerate_resolved_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  id v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "nw_proxy_config_enumerate_resolved_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v26 = "nw_proxy_config_enumerate_resolved_endpoints";
    __int16 v27 = 2082;
    char v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_40;
  }
LABEL_5:
}

uint64_t __nw_proxy_config_enumerate_resolved_endpoints_block_invoke(uint64_t a1)
{
  return 1;
}

void nw_proxy_config_add_match_domain(nw_proxy_config_t config, const char *match_domain)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v3 = config;
  p_Class isa = &v3->isa;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v25 = "nw_proxy_config_add_match_domain";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_proxy_config_add_match_domain";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          char v25 = "nw_proxy_config_add_match_domain";
          __int16 v26 = 2082;
          __int16 v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_proxy_config_add_match_domain";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_proxy_config_add_match_domain";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (match_domain)
  {
    Class isa = v3[15].isa;
    if (!isa)
    {
      xpc_object_t v6 = xpc_array_create(0, 0);
      BOOL v7 = (void *)p_isa[15];
      p_isa[15] = v6;

      Class isa = (Class)p_isa[15];
    }
    xpc_array_set_string(isa, 0xFFFFFFFFFFFFFFFFLL, match_domain);
    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v25 = "nw_proxy_config_add_match_domain";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      char v25 = "nw_proxy_config_add_match_domain";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null match_domain", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v22)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      char v25 = "nw_proxy_config_add_match_domain";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null match_domain, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      char v25 = "nw_proxy_config_add_match_domain";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null match_domain, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    char v25 = "nw_proxy_config_add_match_domain";
    __int16 v26 = 2082;
    __int16 v27 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null match_domain, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_18393EAA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_clear_match_domains(nw_proxy_config_t config)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v1 = config;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    Class isa = v1[15].isa;
    v1[15].Class isa = 0;

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_proxy_config_clear_match_domains";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_match_domains";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_proxy_config_clear_match_domains";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_match_domains";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_match_domains";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void nw_proxy_config_enumerate_match_domains(nw_proxy_config_t config, nw_proxy_domain_enumerator_t enumerator)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v3 = config;
  nw_proxy_domain_enumerator_t v4 = enumerator;
  id v5 = v4;
  if (!v3)
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_proxy_config_enumerate_match_domains";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_match_domains";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_proxy_config_enumerate_match_domains";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_match_domains";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_match_domains";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    Class isa = v3[15].isa;
    if (isa)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_config_enumerate_match_domains_block_invoke;
      applier[3] = &unk_1E5244348;
      id v22 = v4;
      xpc_array_apply(isa, applier);
    }
    goto LABEL_5;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v26 = "nw_proxy_config_enumerate_match_domains";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_proxy_config_enumerate_match_domains";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_proxy_config_enumerate_match_domains";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  __int16 v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_proxy_config_enumerate_match_domains";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v26 = "nw_proxy_config_enumerate_match_domains";
    __int16 v27 = 2082;
    uint64_t v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_18393F268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_match_domains_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F0])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    (*(void (**)(uint64_t, const char *))(v5 + 16))(v5, string_ptr);
  }

  return 1;
}

void sub_18393F2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_add_excluded_domain(nw_proxy_config_t config, const char *excluded_domain)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v3 = config;
  p_Class isa = &v3->isa;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v25 = "nw_proxy_config_add_excluded_domain";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_proxy_config_add_excluded_domain";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          char v25 = "nw_proxy_config_add_excluded_domain";
          __int16 v26 = 2082;
          __int16 v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_proxy_config_add_excluded_domain";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_proxy_config_add_excluded_domain";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (excluded_domain)
  {
    Class isa = v3[16].isa;
    if (!isa)
    {
      xpc_object_t v6 = xpc_array_create(0, 0);
      os_log_type_t v7 = (void *)p_isa[16];
      p_isa[16] = v6;

      Class isa = (Class)p_isa[16];
    }
    xpc_array_set_string(isa, 0xFFFFFFFFFFFFFFFFLL, excluded_domain);
    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v25 = "nw_proxy_config_add_excluded_domain";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      char v25 = "nw_proxy_config_add_excluded_domain";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null excluded_domain", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v22)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      char v25 = "nw_proxy_config_add_excluded_domain";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null excluded_domain, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      char v25 = "nw_proxy_config_add_excluded_domain";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null excluded_domain, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    char v25 = "nw_proxy_config_add_excluded_domain";
    __int16 v26 = 2082;
    __int16 v27 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null excluded_domain, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_18393F7D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_clear_excluded_domains(nw_proxy_config_t config)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v1 = config;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    Class isa = v1[16].isa;
    v1[16].Class isa = 0;

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_proxy_config_clear_excluded_domains";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_excluded_domains";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_proxy_config_clear_excluded_domains";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_excluded_domains";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_excluded_domains";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void nw_proxy_config_enumerate_excluded_domains(nw_proxy_config_t config, nw_proxy_domain_enumerator_t enumerator)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v3 = config;
  nw_proxy_domain_enumerator_t v4 = enumerator;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    Class isa = v3[16].isa;
    if (isa)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_config_enumerate_excluded_domains_block_invoke;
      applier[3] = &unk_1E5244348;
      id v22 = v4;
      xpc_array_apply(isa, applier);
    }
    goto LABEL_5;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  __int16 v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v26 = "nw_proxy_config_enumerate_excluded_domains";
    __int16 v27 = 2082;
    uint64_t v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_18393FF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_excluded_domains_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F0])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    (*(void (**)(uint64_t, const char *))(v5 + 16))(v5, string_ptr);
  }

  return 1;
}

void sub_183940018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_add_preferred_domain(void *a1, const char *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v25 = "nw_proxy_config_add_preferred_domain";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_proxy_config_add_preferred_domain";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          char v25 = "nw_proxy_config_add_preferred_domain";
          __int16 v26 = 2082;
          __int16 v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_proxy_config_add_preferred_domain";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_proxy_config_add_preferred_domain";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (a2)
  {
    uint64_t v5 = (void *)v3[17];
    if (!v5)
    {
      xpc_object_t v6 = xpc_array_create(0, 0);
      os_log_type_t v7 = (void *)v4[17];
      v4[17] = v6;

      uint64_t v5 = (void *)v4[17];
    }
    xpc_array_set_string(v5, 0xFFFFFFFFFFFFFFFFLL, a2);
    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v25 = "nw_proxy_config_add_preferred_domain";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      char v25 = "nw_proxy_config_add_preferred_domain";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null preferred_domain", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v22)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      char v25 = "nw_proxy_config_add_preferred_domain";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null preferred_domain, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      char v25 = "nw_proxy_config_add_preferred_domain";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null preferred_domain, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    char v25 = "nw_proxy_config_add_preferred_domain";
    __int16 v26 = 2082;
    __int16 v27 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null preferred_domain, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_1839404F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_clear_preferred_domains(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    nw_proxy_config_t v3 = (void *)*((void *)v1 + 17);
    *((void *)v1 + 17) = 0;

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_proxy_config_clear_preferred_domains";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_preferred_domains";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_proxy_config_clear_preferred_domains";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_preferred_domains";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_preferred_domains";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void nw_proxy_config_enumerate_preferred_domains(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    xpc_object_t v6 = (void *)v3[17];
    if (v6)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_config_enumerate_preferred_domains_block_invoke;
      applier[3] = &unk_1E5244348;
      id v22 = v4;
      xpc_array_apply(v6, applier);
    }
    goto LABEL_5;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  __int16 v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v26 = "nw_proxy_config_enumerate_preferred_domains";
    __int16 v27 = 2082;
    uint64_t v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_183940CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_preferred_domains_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F0])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    (*(void (**)(uint64_t, const char *))(v5 + 16))(v5, string_ptr);
  }

  return 1;
}

void sub_183940D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_add_alternate_agent(void *a1, const unsigned __int8 *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = (void *)v3[18];
    if (!v5)
    {
      xpc_object_t v6 = xpc_array_create(0, 0);
      os_log_type_t v7 = (void *)v4[18];
      v4[18] = v6;

      uint64_t v5 = (void *)v4[18];
    }
    xpc_array_set_uuid(v5, 0xFFFFFFFFFFFFFFFFLL, a2);
    goto LABEL_5;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v19 = "nw_proxy_config_add_alternate_agent";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_proxy_config_add_alternate_agent";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v19 = "nw_proxy_config_add_alternate_agent";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_proxy_config_add_alternate_agent";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_proxy_config_add_alternate_agent";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v9) {
    free(v9);
  }
LABEL_5:
}

void sub_18394100C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_clear_alternate_agents(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    nw_proxy_config_t v3 = (void *)*((void *)v1 + 18);
    *((void *)v1 + 18) = 0;

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_proxy_config_clear_alternate_agents";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_alternate_agents";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_proxy_config_clear_alternate_agents";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_alternate_agents";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_proxy_config_clear_alternate_agents";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void nw_proxy_config_enumerate_alternate_agents(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    xpc_object_t v6 = (void *)v3[18];
    if (v6)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_config_enumerate_alternate_agents_block_invoke;
      applier[3] = &unk_1E5244348;
      id v22 = v4;
      xpc_array_apply(v6, applier);
    }
    goto LABEL_5;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  __int16 v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v26 = "nw_proxy_config_enumerate_alternate_agents";
    __int16 v27 = 2082;
    uint64_t v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_1839417CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_alternate_agents_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F14600])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    bytes = xpc_uuid_get_bytes(v4);
    (*(void (**)(uint64_t, const uint8_t *))(v5 + 16))(v5, bytes);
  }

  return 1;
}

void sub_183941854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_proxy_config_has_alternate_agents(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (!v1)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_proxy_config_has_alternate_agents";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_proxy_config_has_alternate_agents";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v17 = "nw_proxy_config_has_alternate_agents";
            __int16 v18 = 2082;
            os_log_type_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_proxy_config_has_alternate_agents";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v17 = "nw_proxy_config_has_alternate_agents";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  nw_proxy_config_t v3 = (void *)*((void *)v1 + 18);
  if (!v3)
  {
LABEL_22:
    BOOL v4 = 0;
    goto LABEL_23;
  }
  BOOL v4 = xpc_array_get_count(v3) != 0;
LABEL_23:

  return v4;
}

void sub_183941B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_set_alternate_protocol_stack(void *a1, void *a2, void *a3, unsigned int a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  os_log_type_t v7 = a1;
  id v8 = a2;
  id v9 = a3;
  os_log_type_t v10 = v9;
  if (!v7)
  {
    __int16 v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v19, &type, &v40)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
          __int16 v44 = 2082;
          BOOL v45 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_59:
        if (!v19) {
          goto LABEL_15;
        }
LABEL_60:
        free(v19);
        goto LABEL_15;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_1830D4000, v20, v34, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_58:

    goto LABEL_59;
  }
  uint64_t v11 = v7[1];
  if (v11)
  {
    if (v9)
    {
      os_log_type_t v12 = (char *)v9;
      os_log_type_t v13 = v12 + 8;

      uint64_t v11 = v7[1];
      if (v8) {
        goto LABEL_11;
      }
    }
    else
    {
      os_log_type_t v13 = "proxy-wildcard";
      if (v8) {
        goto LABEL_11;
      }
    }
    if (nw_proxy_config_default_transport(void)::onceToken[0] != -1) {
      dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_265);
    }
    char v14 = nw_dictionary_copy_value(v11, nw_proxy_config_default_transport(void)::default_transport_string);
    if (v14)
    {
      id v8 = v14;
      uint64_t v11 = v7[1];
LABEL_11:
      nw_dictionary_set_value(v11, v13, v8);
      if (a4 - 2 <= 2)
      {
        BOOL v15 = (void *)v7[2];
        if (!v15)
        {
          xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
          os_log_type_t v17 = (void *)v7[2];
          v7[2] = v16;

          BOOL v15 = (void *)v7[2];
        }
        xpc_dictionary_set_uint64(v15, v13, a4);
      }
      goto LABEL_15;
    }
    uint64_t v30 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
    char v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v31, &type, &v40)) {
      goto LABEL_67;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v40)
    {
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      BOOL v32 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v38 = os_log_type_enabled(v32, type);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
          __int16 v44 = 2082;
          BOOL v45 = v36;
          _os_log_impl(&dword_1830D4000, v32, v37, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
        goto LABEL_67;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_1830D4000, v32, v37, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v32 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_1830D4000, v32, v39, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_67:
    if (v31) {
      free(v31);
    }
    id v8 = 0;
    goto LABEL_15;
  }
  id v22 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
  os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v40 = 0;
  if (!__nwlog_fault(v19, &type, &v40)) {
    goto LABEL_59;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
      _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null config->stacks", buf, 0xCu);
    }
    goto LABEL_58;
  }
  if (!v40)
  {
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v35 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
      _os_log_impl(&dword_1830D4000, v20, v35, "%{public}s called with null config->stacks, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_58;
  }
  __int16 v27 = (char *)__nw_create_backtrace_string();
  uint64_t v20 = __nwlog_obj();
  os_log_type_t v28 = type;
  BOOL v29 = os_log_type_enabled(v20, type);
  if (!v27)
  {
    if (v29)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
      _os_log_impl(&dword_1830D4000, v20, v28, "%{public}s called with null config->stacks, no backtrace", buf, 0xCu);
    }
    goto LABEL_58;
  }
  if (v29)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v43 = "nw_proxy_config_set_alternate_protocol_stack";
    __int16 v44 = 2082;
    BOOL v45 = v27;
    _os_log_impl(&dword_1830D4000, v20, v28, "%{public}s called with null config->stacks, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v27);
  if (v19) {
    goto LABEL_60;
  }
LABEL_15:
}

void sub_1839422AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_set_listener_protocol_stack(void *a1, void *a2, void *a3, unsigned int a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  os_log_type_t v7 = a1;
  id v8 = a2;
  id v9 = a3;
  os_log_type_t v10 = v9;
  if (!v7)
  {
    __int16 v18 = __nwlog_obj();
    *(_DWORD *)key = 136446210;
    *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
    os_log_type_t v19 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v19, &type, &v37)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null config", key, 0xCu);
      }
    }
    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)key = 136446466;
          *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
          __int16 v40 = 2082;
          uint64_t v41 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null config, dumping backtrace:%{public}s", key, 0x16u);
        }

        free(backtrace_string);
LABEL_64:
        if (!v19) {
          goto LABEL_14;
        }
        goto LABEL_65;
      }
      if (v28)
      {
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null config, no backtrace", key, 0xCu);
      }
    }
    else
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_1830D4000, v20, v34, "%{public}s called with null config, backtrace limit exceeded", key, 0xCu);
      }
    }
LABEL_63:

    goto LABEL_64;
  }
  if (!v9)
  {
    id v22 = __nwlog_obj();
    *(_DWORD *)key = 136446210;
    *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
    os_log_type_t v19 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v19, &type, &v37)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null transport_protocol", key, 0xCu);
      }
      goto LABEL_63;
    }
    if (!v37)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_1830D4000, v20, v35, "%{public}s called with null transport_protocol, backtrace limit exceeded", key, 0xCu);
      }
      goto LABEL_63;
    }
    BOOL v29 = (char *)__nw_create_backtrace_string();
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v30 = type;
    BOOL v31 = os_log_type_enabled(v20, type);
    if (!v29)
    {
      if (v31)
      {
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s called with null transport_protocol, no backtrace", key, 0xCu);
      }
      goto LABEL_63;
    }
    if (v31)
    {
      *(_DWORD *)key = 136446466;
      *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
      __int16 v40 = 2082;
      uint64_t v41 = v29;
      _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s called with null transport_protocol, dumping backtrace:%{public}s", key, 0x16u);
    }
    goto LABEL_44;
  }
  if (!v7[1])
  {
    char v24 = __nwlog_obj();
    *(_DWORD *)key = 136446210;
    *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
    os_log_type_t v19 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v19, &type, &v37)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null config->stacks", key, 0xCu);
      }
      goto LABEL_63;
    }
    if (!v37)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_1830D4000, v20, v36, "%{public}s called with null config->stacks, backtrace limit exceeded", key, 0xCu);
      }
      goto LABEL_63;
    }
    BOOL v29 = (char *)__nw_create_backtrace_string();
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v32 = type;
    BOOL v33 = os_log_type_enabled(v20, type);
    if (!v29)
    {
      if (v33)
      {
        *(_DWORD *)key = 136446210;
        *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_1830D4000, v20, v32, "%{public}s called with null config->stacks, no backtrace", key, 0xCu);
      }
      goto LABEL_63;
    }
    if (v33)
    {
      *(_DWORD *)key = 136446466;
      *(void *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
      __int16 v40 = 2082;
      uint64_t v41 = v29;
      _os_log_impl(&dword_1830D4000, v20, v32, "%{public}s called with null config->stacks, dumping backtrace:%{public}s", key, 0x16u);
    }
LABEL_44:

    free(v29);
    if (!v19) {
      goto LABEL_14;
    }
LABEL_65:
    os_log_type_t v17 = (char *)v19;
LABEL_13:
    free(v17);
    goto LABEL_14;
  }
  uint64_t v11 = (char *)v9;
  os_log_type_t v12 = v11 + 8;

  *(void *)key = 0;
  asprintf((char **)key, "%s%s", "LISTEN-", v12);
  if (v8) {
    goto LABEL_8;
  }
  uint64_t v13 = v7[1];
  if (nw_proxy_config_default_transport(void)::onceToken[0] != -1) {
    dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_265);
  }
  id v8 = nw_dictionary_copy_value(v13, nw_proxy_config_default_transport(void)::default_transport_string);
  if (v8)
  {
LABEL_8:
    nw_dictionary_set_value(v7[1], *(const char **)key, v8);
    if (a4 - 2 <= 2)
    {
      char v14 = (void *)v7[2];
      if (!v14)
      {
        xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
        xpc_object_t v16 = (void *)v7[2];
        v7[2] = (uint64_t)v15;

        char v14 = (void *)v7[2];
      }
      xpc_dictionary_set_uint64(v14, *(const char **)key, a4);
    }
  }
  os_log_type_t v17 = *(char **)key;
  if (*(void *)key) {
    goto LABEL_13;
  }
LABEL_14:
}

void sub_183942A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_set_fallback_proxy_agent(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v3 = a1;
  BOOL v4 = v3;
  if (!v3)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v22 = "nw_proxy_config_set_fallback_proxy_agent";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_proxy_config_set_fallback_proxy_agent";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          id v22 = "nw_proxy_config_set_fallback_proxy_agent";
          __int16 v23 = 2082;
          char v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_proxy_config_set_fallback_proxy_agent";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_proxy_config_set_fallback_proxy_agent";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *(_OWORD *)(v3 + 72) = *a2;
    goto LABEL_4;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v22 = "nw_proxy_config_set_fallback_proxy_agent";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      id v22 = "nw_proxy_config_set_fallback_proxy_agent";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null fallback_proxy_agent_uuid", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      id v22 = "nw_proxy_config_set_fallback_proxy_agent";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null fallback_proxy_agent_uuid, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  char v14 = (char *)__nw_create_backtrace_string();
  os_log_type_t v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      id v22 = "nw_proxy_config_set_fallback_proxy_agent";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null fallback_proxy_agent_uuid, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    id v22 = "nw_proxy_config_set_fallback_proxy_agent";
    __int16 v23 = 2082;
    char v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null fallback_proxy_agent_uuid, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

void nw_proxy_config_copy_fallback_proxy_agent(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_proxy_config_t v3 = a1;
  BOOL v4 = v3;
  if (!v3)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
          __int16 v23 = 2082;
          char v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *a2 = *(_OWORD *)(v3 + 72);
    goto LABEL_4;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null out_fallback_proxy_agent_uuid", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null out_fallback_proxy_agent_uuid, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  char v14 = (char *)__nw_create_backtrace_string();
  os_log_type_t v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null out_fallback_proxy_agent_uuid, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    id v22 = "nw_proxy_config_copy_fallback_proxy_agent";
    __int16 v23 = 2082;
    char v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null out_fallback_proxy_agent_uuid, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

BOOL nw_proxy_config_has_fallback_proxy_agent(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = (unsigned __int8 *)v1;
  if (v1)
  {
    BOOL v3 = uuid_is_null(v1 + 72) == 0;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_proxy_config_has_fallback_proxy_agent";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_proxy_config_has_fallback_proxy_agent";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_proxy_config_has_fallback_proxy_agent";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_proxy_config_has_fallback_proxy_agent";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_proxy_config_has_fallback_proxy_agent";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void sub_183943684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_set_fallback_proxy_config(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    xpc_object_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    objc_storeStrong(v3 + 11, a2);
    goto LABEL_4;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null fallback_proxy_config", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null fallback_proxy_config, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null fallback_proxy_config, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v23 = "nw_proxy_config_set_fallback_proxy_config";
    __int16 v24 = 2082;
    uint64_t v25 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null fallback_proxy_config, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

id nw_proxy_config_copy_fallback_proxy_config(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    id v3 = v1[11];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_copy_fallback_proxy_config";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_fallback_proxy_config";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_copy_fallback_proxy_config";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_fallback_proxy_config";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_fallback_proxy_config";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_proxy_config_has_fallback_proxy_config(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *((void *)v1 + 11) != 0;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_has_fallback_proxy_config";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_has_fallback_proxy_config";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_has_fallback_proxy_config";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_has_fallback_proxy_config";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_has_fallback_proxy_config";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_proxy_config_supports_listeners(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (!v1)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_listeners";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v6, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_listeners";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_listeners";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_listeners";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_listeners";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = v1[1];
  if (!v3)
  {
LABEL_22:
    BOOL v4 = 0;
    goto LABEL_23;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  char v18 = 0;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __nw_proxy_config_supports_listeners_block_invoke;
  v14[3] = &unk_1E5240E28;
  v14[4] = buf;
  nw_dictionary_apply(v3, (uint64_t)v14);
  BOOL v4 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
  _Block_object_dispose(buf, 8);
LABEL_23:

  return v4;
}

BOOL __nw_proxy_config_supports_listeners_block_invoke(uint64_t a1, const char *a2)
{
  int v3 = strncmp("LISTEN-", a2, 7uLL);
  if (!v3) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return v3 != 0;
}

id *nw_proxy_config_copy_parameters_to_proxy(void *a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (!v1)
  {
    __int16 v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v57 = "nw_proxy_config_copy_parameters_to_proxy";
    char v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v18, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v54)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            int v57 = "nw_proxy_config_copy_parameters_to_proxy";
            __int16 v58 = 2082;
            uint64_t v59 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v34, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_60;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_1830D4000, v19, v34, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_1830D4000, v19, v45, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_60:
    if (v18) {
      free(v18);
    }
    goto LABEL_62;
  }
  if (!v1[1])
  {
LABEL_62:
    os_log_type_t v16 = 0;
    goto LABEL_63;
  }
  nw_parameters_t v3 = nw_parameters_create();
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v57 = "nw_proxy_config_copy_parameters_to_proxy";
    id v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v22, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v54)
      {
        os_log_type_t v36 = (char *)__nw_create_backtrace_string();
        __int16 v23 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v23, type);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            int v57 = "nw_proxy_config_copy_parameters_to_proxy";
            __int16 v58 = 2082;
            uint64_t v59 = v36;
            _os_log_impl(&dword_1830D4000, v23, v37, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v36);
          goto LABEL_76;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_1830D4000, v23, v37, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v23 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_1830D4000, v23, v47, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_76:
    if (v22) {
      free(v22);
    }
    os_log_type_t v16 = 0;
    goto LABEL_13;
  }
  uint64_t v5 = v3;
  id v6 = v5[19];

  if (!v6)
  {
    uint64_t v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v57 = "nw_proxy_config_copy_parameters_to_proxy";
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v26, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null new_stack", buf, 0xCu);
        }
      }
      else if (v54)
      {
        os_log_type_t v39 = (char *)__nw_create_backtrace_string();
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v40 = type;
        BOOL v41 = os_log_type_enabled(v27, type);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            int v57 = "nw_proxy_config_copy_parameters_to_proxy";
            __int16 v58 = 2082;
            uint64_t v59 = v39;
            _os_log_impl(&dword_1830D4000, v27, v40, "%{public}s called with null new_stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v39);
          goto LABEL_82;
        }
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_1830D4000, v27, v40, "%{public}s called with null new_stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_1830D4000, v27, v48, "%{public}s called with null new_stack, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_82:
    if (v26) {
      free(v26);
    }
    os_log_type_t v16 = 0;
    goto LABEL_12;
  }
  uint64_t v7 = v2[1];
  if (nw_proxy_config_default_transport(void)::onceToken[0] != -1) {
    dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_265);
  }
  os_log_type_t v8 = nw_dictionary_copy_value(v7, nw_proxy_config_default_transport(void)::default_transport_string);
  if (!v8)
  {
    BOOL v29 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v57 = "nw_proxy_config_copy_parameters_to_proxy";
    os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v30, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null proxy_stack", buf, 0xCu);
        }
      }
      else if (v54)
      {
        uint64_t v42 = (char *)__nw_create_backtrace_string();
        BOOL v31 = __nwlog_obj();
        os_log_type_t v43 = type;
        BOOL v44 = os_log_type_enabled(v31, type);
        if (v42)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            int v57 = "nw_proxy_config_copy_parameters_to_proxy";
            __int16 v58 = 2082;
            uint64_t v59 = v42;
            _os_log_impl(&dword_1830D4000, v31, v43, "%{public}s called with null proxy_stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v42);
          goto LABEL_88;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_1830D4000, v31, v43, "%{public}s called with null proxy_stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v31 = __nwlog_obj();
        os_log_type_t v49 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_1830D4000, v31, v49, "%{public}s called with null proxy_stack, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_88:
    if (v30) {
      free(v30);
    }
    os_log_type_t v16 = 0;
    goto LABEL_11;
  }
  iterate_block[0] = MEMORY[0x1E4F143A8];
  iterate_block[1] = 3221225472;
  iterate_block[2] = __nw_proxy_config_copy_parameters_to_proxy_block_invoke;
  iterate_block[3] = &unk_1E5240EA0;
  BOOL v51 = v2;
  os_log_type_t v9 = v5;
  BOOL v52 = v9;
  id v10 = v6;
  id v53 = v10;
  nw_protocol_stack_iterate_application_protocols(v8, iterate_block);
  BOOL v11 = v8;
  Class isa = v11[3].isa;
  char v13 = isa;

  if (v13)
  {
    BOOL v14 = (id *)v10;
    char v15 = v13;
    objc_storeStrong(v14 + 3, isa);
  }
  os_log_type_t v16 = v9;

LABEL_11:
LABEL_12:

LABEL_13:
LABEL_63:

  return v16;
}

void sub_183944E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_proxy_config_copy_parameters_to_proxy_block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (nw_protocol_options_is_serializable_tls(v6))
  {
    options_from_serializable = nw_tls_create_options_from_serializable(v6, *(void *)(a1 + 32) + 56, 0);

    nw_parameters_t v4 = options_from_serializable;
  }
  else
  {
    nw_parameters_t v4 = v6;
  }
  uint64_t v7 = v4;
  if (nw_protocol_options_is_tls(v4)
    && nw_parameters_get_should_trust_invalid_certificates(*(void **)(a1 + 40)))
  {
    uint64_t v5 = v7;
    sec_protocol_options_set_peer_authentication_required(v5, 0);
  }
  nw_protocol_stack_append_application_protocol(*(void **)(a1 + 48), v7);
}

void sub_183944ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_proxy_config_copy_authentication_credential(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    id v3 = v1[13];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_copy_authentication_credential";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_authentication_credential";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_copy_authentication_credential";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_authentication_credential";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_copy_authentication_credential";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_proxy_config_get_multipath_service(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[40];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_get_multipath_service";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_get_multipath_service";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_multipath_service(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 40) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_set_multipath_service";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_set_multipath_service";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_proxy_config_set_force_multipath(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 171) = *((unsigned char *)v3 + 171) & 0xFD | v5;
    goto LABEL_6;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_force_multipath";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_force_multipath";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_force_multipath";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_force_multipath";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_force_multipath";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

uint64_t nw_proxy_config_get_apply_tfo(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[171] >> 2) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_get_apply_tfo";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_apply_tfo";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_get_apply_tfo";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_apply_tfo";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_apply_tfo";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_apply_tfo(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 4;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 171) = *((unsigned char *)v3 + 171) & 0xFB | v5;
    goto LABEL_6;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_apply_tfo";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_apply_tfo";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_apply_tfo";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_apply_tfo";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_apply_tfo";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

uint64_t nw_proxy_config_get_force_tfo(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 171) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_get_force_tfo";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_force_tfo";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_get_force_tfo";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_force_tfo";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_force_tfo";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_force_tfo(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *((unsigned char *)v3 + 171) = *((unsigned char *)v3 + 171) & 0xFE | a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_set_force_tfo";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_force_tfo";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_set_force_tfo";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_force_tfo";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_force_tfo";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_proxy_config_get_disable_tfo_cookie(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[171] >> 3) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_get_disable_tfo_cookie";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_disable_tfo_cookie";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_get_disable_tfo_cookie";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_disable_tfo_cookie";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_disable_tfo_cookie";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_disable_tfo_cookie(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 8;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 171) = *((unsigned char *)v3 + 171) & 0xF7 | v5;
    goto LABEL_6;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_disable_tfo_cookie";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_disable_tfo_cookie";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_disable_tfo_cookie";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_disable_tfo_cookie";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_disable_tfo_cookie";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

id nw_proxy_config_copy_pac_script(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 38) == 3)
    {
      id v3 = v1[14];
      goto LABEL_4;
    }
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null (config->mode == nw_proxy_mode_pac_script)", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null (config->mode == nw_proxy_mode_pac_script), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null (config->mode == nw_proxy_mode_pac_script), no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null (config->mode == nw_proxy_mode_pac_script), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    char v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_4:

  return v3;
}

id nw_proxy_configs_create_with_schema_array(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (!v1)
  {
    id v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_proxy_configs_create_with_schema_array";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v7, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_proxy_configs_create_with_schema_array";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v25 = "nw_proxy_configs_create_with_schema_array";
          __int16 v26 = 2082;
          os_log_type_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v7) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_proxy_configs_create_with_schema_array";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_proxy_configs_create_with_schema_array";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_37;
  }
  if (object_getClass(v1) != (Class)MEMORY[0x1E4F14568])
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_proxy_configs_create_with_schema_array";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v7, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_proxy_configs_create_with_schema_array";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null (xpc_get_type(array) == (&_xpc_type_array))", buf, 0xCu);
      }
    }
    else if (v22)
    {
      BOOL v15 = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v8, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v25 = "nw_proxy_configs_create_with_schema_array";
          __int16 v26 = 2082;
          os_log_type_t v27 = v15;
          _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null (xpc_get_type(array) == (&_xpc_type_array)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
LABEL_38:
        if (!v7)
        {
LABEL_40:
          id v4 = 0;
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_40;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_proxy_configs_create_with_schema_array";
        _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null (xpc_get_type(array) == (&_xpc_type_array)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_proxy_configs_create_with_schema_array";
        _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null (xpc_get_type(array) == (&_xpc_type_array)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  BOOL v3 = nw_array_create();
  applier[0] = MEMORY[0x1E4F143A8];
  applier[1] = 3221225472;
  applier[2] = __nw_proxy_configs_create_with_schema_array_block_invoke;
  applier[3] = &unk_1E524B4A0;
  id v4 = (id)v3;
  id v21 = v4;
  xpc_array_apply(v2, applier);

LABEL_4:
  return v4;
}

void sub_183947308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_configs_create_with_schema_array_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  char v5 = v4;
  if (!v4)
  {
    BOOL v62 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
    __int16 v63 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (!__nwlog_fault(v63, &type, &v80)) {
      goto LABEL_122;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v64 = __nwlog_obj();
      os_log_type_t v65 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)buf = 136446210;
        int v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_1830D4000, v64, v65, "%{public}s called with null dictionary", buf, 0xCu);
      }
    }
    else if (v80)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v64 = __nwlog_obj();
      os_log_type_t v69 = type;
      BOOL v70 = os_log_type_enabled(v64, type);
      if (backtrace_string)
      {
        if (v70)
        {
          *(_DWORD *)buf = 136446466;
          int v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
          __int16 v84 = 2082;
          int v85 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v64, v69, "%{public}s called with null dictionary, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v63) {
          goto LABEL_87;
        }
        goto LABEL_123;
      }
      if (v70)
      {
        *(_DWORD *)buf = 136446210;
        int v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_1830D4000, v64, v69, "%{public}s called with null dictionary, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v64 = __nwlog_obj();
      os_log_type_t v74 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)buf = 136446210;
        int v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_1830D4000, v64, v74, "%{public}s called with null dictionary, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_121;
  }
  if (object_getClass(v4) != (Class)MEMORY[0x1E4F14590])
  {
    char v66 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
    __int16 v63 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (!__nwlog_fault(v63, &type, &v80)) {
      goto LABEL_122;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v64 = __nwlog_obj();
      os_log_type_t v67 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)buf = 136446210;
        int v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_1830D4000, v64, v67, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary))", buf, 0xCu);
      }
    }
    else if (v80)
    {
      uint64_t v71 = (char *)__nw_create_backtrace_string();
      uint64_t v64 = __nwlog_obj();
      os_log_type_t v72 = type;
      BOOL v73 = os_log_type_enabled(v64, type);
      if (v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446466;
          int v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
          __int16 v84 = 2082;
          int v85 = v71;
          _os_log_impl(&dword_1830D4000, v64, v72, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v71);
LABEL_122:
        if (!v63) {
          goto LABEL_87;
        }
LABEL_123:
        free(v63);
        goto LABEL_87;
      }
      if (v73)
      {
        *(_DWORD *)buf = 136446210;
        int v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_1830D4000, v64, v72, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v64 = __nwlog_obj();
      os_log_type_t v75 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)buf = 136446210;
        int v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_1830D4000, v64, v75, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_121:

    goto LABEL_122;
  }
  if (nw_proxy_config_get_int64(v5, @"ProxyAutoConfigEnable", 1))
  {
    string = nw_proxy_config_get_string(v5);
    uint64_t v7 = nw_proxy_config_get_string(v5);
    if (string)
    {
      pac_script = nw_proxy_config_create_pac_script(string);
      pac_nw_endpoint_t url = pac_script;
      if (pac_script)
      {
        nw_proxy_config_apply_common_keys(pac_script, v5, 0);
LABEL_10:
        nw_array_append(*(void *)(a1 + 32), pac_url);

        goto LABEL_11;
      }
      goto LABEL_87;
    }
    if (v7)
    {
      nw_endpoint_t url = nw_endpoint_create_url(v7);
      pac_nw_endpoint_t url = nw_proxy_config_create_pac_url(url);

      if (pac_url)
      {
        nw_proxy_config_apply_common_keys(pac_url, v5, 0);
        goto LABEL_10;
      }
LABEL_87:
      uint64_t v60 = 0;
      goto LABEL_88;
    }
  }
LABEL_11:
  if (nw_proxy_config_get_int64(v5, @"HTTPEnable", 1))
  {
    os_log_type_t v11 = nw_proxy_config_get_string(v5);
    BOOL int64 = nw_proxy_config_get_int64(v5, @"HTTPPort", 80);
    if (v11)
    {
      if (int64)
      {
        host_with_numeric_int port = nw_endpoint_create_host_with_numeric_port(v11, int64);
        if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
          dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_102_35650);
        }
        id v14 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
        options = nw_proxy_create_options(v14);
        os_log_type_t v16 = nw_proxy_config_create((void *)host_with_numeric_port, options);

        if (!v16) {
          goto LABEL_87;
        }
        v16->os_log_type_t type = 2001;
        nw_proxy_config_apply_common_keys(v16, v5, 1);
        nw_array_append(*(void *)(a1 + 32), v16);
      }
    }
  }
  if (nw_proxy_config_get_int64(v5, @"HTTPSEnable", 1))
  {
    BOOL v17 = nw_proxy_config_get_string(v5);
    BOOL v18 = nw_proxy_config_get_int64(v5, @"HTTPSPort", 443);
    if (v17)
    {
      unsigned __int16 v19 = v18;
      if (v18)
      {
        uint64_t v20 = objc_alloc_init(NWConcrete_nw_protocol_stack);
        if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
          dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_102_35650);
        }
        id v21 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
        char v22 = nw_proxy_create_options(v21);
        nw_protocol_stack_append_application_protocol(v20, v22);

        if (nw_proxy_config_get_int64(v5, @"HTTPSOverTLSEnable", 0))
        {
          __int16 v23 = (void *)nw_protocol_boringssl_copy_definition();
          uint64_t v24 = nw_protocol_create_options(v23);

          nw_protocol_stack_append_application_protocol(v20, v24);
          int v25 = 4002;
        }
        else
        {
          int v25 = 4001;
        }
        BOOL v26 = nw_endpoint_create_host_with_numeric_port(v17, v19);
        os_log_type_t v27 = nw_proxy_config_create_with_stack((void *)v26, v20);

        if (!v27) {
          goto LABEL_86;
        }
        v27->os_log_type_t type = v25;
        nw_proxy_config_apply_common_keys(v27, v5, 1);
        if (nw_proxy_config_get_int64(v5, @"HTTPSTransparentEnable", 0)
          || nw_proxy_config_get_int64(v5, @"HTTPSOverTLSEnable", 0))
        {
          *((unsigned char *)v27 + 171) |= 0x10u;
        }
        uint64_t v28 = nw_proxy_config_get_string(v5);
        if (v28 || (uint64_t v28 = nw_proxy_config_get_string(v5)) != 0 || (uint64_t v28 = nw_proxy_config_get_string(v5)) != 0)
        {
          BOOL v29 = (OS_nw_authentication_credential *)-[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], 1);
          credential = v27->credential;
          v27->credential = v29;

          nw_authentication_credential_set_username(v27->credential, v28);
          BOOL v31 = nw_proxy_config_get_string(v5);
          if (v31 || (BOOL v31 = nw_proxy_config_get_string(v5)) != 0 || (BOOL v31 = nw_proxy_config_get_string(v5)) != 0) {
            nw_authentication_credential_set_password(v27->credential, v31);
          }
        }
        nw_array_append(*(void *)(a1 + 32), v27);
      }
    }
  }
  if (nw_proxy_config_get_int64(v5, @"SOCKSEnable", 1))
  {
    os_log_type_t v32 = nw_proxy_config_get_string(v5);
    BOOL v33 = nw_proxy_config_get_int64(v5, @"SOCKSPort", 0);
    if (v32)
    {
      if (v33)
      {
        uint64_t v20 = (NWConcrete_nw_protocol_stack *)nw_endpoint_create_host_with_numeric_port(v32, v33);
        os_log_type_t v34 = nw_proxy_config_get_string(v5);
        if (!v34) {
          goto LABEL_45;
        }
        BOOL v35 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        string_ptr = xpc_string_get_string_ptr(v35);
        if (!strcmp(v34, string_ptr))
        {
          if (nw_protocol_socksv4_copy_definition::onceToken != -1) {
            dispatch_once(&nw_protocol_socksv4_copy_definition::onceToken, &__block_literal_global_44786);
          }
          if (nw_protocol_socksv4_copy_definition::definition) {
            BOOL v38 = os_retain((void *)nw_protocol_socksv4_copy_definition::definition);
          }
          else {
            BOOL v38 = 0;
          }
          nw_protocol_options_t v42 = nw_framer_create_options(v38);
          os_log_type_t v40 = nw_proxy_config_create(v20, v42);

          if (v40)
          {
            v40->os_log_type_t type = 3001;
LABEL_72:

            goto LABEL_73;
          }
        }
        else
        {
          if (strcmp(v34, "shoes"))
          {

LABEL_45:
            if (nw_protocol_socksv5_copy_definition::onceToken != -1) {
              dispatch_once(&nw_protocol_socksv5_copy_definition::onceToken, &__block_literal_global_85297);
            }
            if (nw_protocol_socksv5_copy_definition::definition) {
              os_log_type_t v37 = os_retain((void *)nw_protocol_socksv5_copy_definition::definition);
            }
            else {
              os_log_type_t v37 = 0;
            }
            nw_protocol_options_t v39 = nw_framer_create_options(v37);
            os_log_type_t v40 = nw_proxy_config_create(v20, v39);

            if (v40)
            {
              v40->os_log_type_t type = 3002;
LABEL_73:
              nw_proxy_config_apply_common_keys(v40, v5, 1);
              *((unsigned char *)v40 + 170) |= 8u;
              uint64_t v55 = nw_proxy_config_get_string(v5);
              if (v55 || (uint64_t v55 = nw_proxy_config_get_string(v5)) != 0)
              {
                os_log_type_t v56 = (OS_nw_authentication_credential *)-[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], 1);
                int v57 = v40->credential;
                v40->credential = v56;

                nw_authentication_credential_set_username(v40->credential, v55);
                __int16 v58 = nw_proxy_config_get_string(v5);
                if (v58 || (__int16 v58 = nw_proxy_config_get_string(v5)) != 0) {
                  nw_authentication_credential_set_password(v40->credential, v58);
                }
              }
              nw_array_append(*(void *)(a1 + 32), v40);

              goto LABEL_79;
            }
            goto LABEL_86;
          }
          if (nw_protocol_shoes_get_definition(void)::onceToken != -1) {
            dispatch_once(&nw_protocol_shoes_get_definition(void)::onceToken, &__block_literal_global_33);
          }
          if (nw_protocol_shoes_get_definition(void)::proxy_definition) {
            BOOL v41 = os_retain((void *)nw_protocol_shoes_get_definition(void)::proxy_definition);
          }
          else {
            BOOL v41 = 0;
          }
          os_log_type_t v43 = nw_protocol_create_options(v41);

          BOOL v44 = nw_proxy_config_create(v20, v43);
          os_log_type_t v40 = v44;
          if (v44)
          {
            v44->os_log_type_t type = 3003;
            *((unsigned char *)v44 + 170) |= 0x10u;
            *((unsigned char *)v44 + 172) |= 2u;
            uint32_t v76 = v43;
            os_log_type_t v45 = objc_alloc_init(NWConcrete_nw_protocol_stack);
            uint64_t v46 = nw_protocol_shoes_copy_definition();
            os_log_type_t v47 = nw_protocol_create_options(v46);

            if (nw_proxy_config_get_int64(v5, @"SHOESUDPAssociate", 0) >= 1
              && _os_feature_enabled_impl())
            {
              nw_protocol_shoes_parameters_set_udp_associate_supported(v47);
              nw_protocol_options_t v48 = nw_udp_create_options();
              nw_protocol_definition_t v49 = nw_protocol_copy_quic_definition();
              nw_proxy_config_set_alternate_protocol_stack(v40, v45, v49, 3u);
              BOOL v50 = v48;
            }
            else
            {
              BOOL v51 = nw_shoes_copy_udp_framer_definition();
              nw_protocol_options_t v52 = nw_framer_create_options(v51);
              nw_protocol_stack_append_application_protocol(v45, v52);

              BOOL v50 = nw_tcp_create_options();
              nw_tcp_options_set_no_delay(v50, 1);
              nw_protocol_definition_t v49 = v51;
            }

            nw_protocol_shoes_parameters_set_udp(v47);
            nw_protocol_stack_append_application_protocol(v45, v47);
            nw_protocol_stack_set_transport_protocol(&v45->super, v50);
            nw_protocol_definition_t v53 = nw_protocol_copy_udp_definition();
            nw_proxy_config_set_alternate_protocol_stack(v40, v45, v53, 4u);

            char v54 = (char *)nw_proxy_config_get_string(v5);
            if (v54)
            {
              nw_protocol_shoes_parameters_set_fixed_bundle_id(v76, v54);
              *((unsigned char *)v40 + 170) |= 0x40u;
            }

            goto LABEL_72;
          }
        }
LABEL_86:

        goto LABEL_87;
      }
    }
  }
LABEL_79:
  if (nw_proxy_config_get_int64(v5, @"TransportConverterEnable", 0))
  {
    uint64_t v59 = nw_proxy_config_get_array(v5);
    if (v59)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_configs_create_with_schema_array_block_invoke_127;
      applier[3] = &unk_1E52480A8;
      id v78 = v5;
      id v79 = *(id *)(a1 + 32);
      xpc_array_apply(v59, applier);
    }
  }
  uint64_t v60 = 1;
LABEL_88:

  return v60;
}

void sub_1839480B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL nw_proxy_config_get_int64(void *a1, uint64_t a2, BOOL a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  char v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  id v6 = v5;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_proxy_config_get_int64";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26)) {
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_proxy_config_get_int64";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v29 = "nw_proxy_config_get_int64";
          __int16 v30 = 2082;
          BOOL v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v11) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_proxy_config_get_int64";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_proxy_config_get_int64";
        _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_28;
  }
  string_ptr = xpc_string_get_string_ptr(v5);
  if (!string_ptr)
  {
    uint64_t v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_proxy_config_get_int64";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v11, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v29 = "nw_proxy_config_get_int64";
          _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null key_string", buf, 0xCu);
        }
LABEL_28:

        goto LABEL_29;
      }
      if (!v26)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v29 = "nw_proxy_config_get_int64";
          _os_log_impl(&dword_1830D4000, v12, v25, "%{public}s called with null key_string, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_28;
      }
      char v22 = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v12, type);
      if (!v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v29 = "nw_proxy_config_get_int64";
          _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null key_string, no backtrace", buf, 0xCu);
        }
        goto LABEL_28;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v29 = "nw_proxy_config_get_int64";
        __int16 v30 = 2082;
        BOOL v31 = v22;
        _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null key_string, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v22);
    }
LABEL_29:
    if (!v11)
    {
LABEL_31:
      a3 = 0;
      goto LABEL_32;
    }
LABEL_30:
    free(v11);
    goto LABEL_31;
  }
  os_log_type_t v8 = xpc_dictionary_get_value(v4, string_ptr);
  os_log_type_t v9 = v8;
  if (v8)
  {
    if (object_getClass(v8) == (Class)MEMORY[0x1E4F145C0])
    {
      uint64_t value = xpc_int64_get_value(v9);
    }
    else
    {
      if (object_getClass(v9) != (Class)MEMORY[0x1E4F145F8])
      {
        if (object_getClass(v9) == (Class)MEMORY[0x1E4F14570]) {
          a3 = xpc_BOOL_get_value(v9);
        }
        goto LABEL_22;
      }
      uint64_t value = xpc_uint64_get_value(v9);
    }
    a3 = value;
  }
LABEL_22:

LABEL_32:
  return a3;
}

void sub_183948830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_proxy_config_get_string(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  BOOL v3 = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_proxy_config_get_string";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v7, &type, &v21)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_proxy_config_get_string";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v24 = "nw_proxy_config_get_string";
          __int16 v25 = 2082;
          char v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v7) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_proxy_config_get_string";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_proxy_config_get_string";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  string_ptr = xpc_string_get_string_ptr(v2);
  if (!string_ptr)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_proxy_config_get_string";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v24 = "nw_proxy_config_get_string";
          _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null key_string", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v21)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v24 = "nw_proxy_config_get_string";
          _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s called with null key_string, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      BOOL v17 = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v8, type);
      if (!v17)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v24 = "nw_proxy_config_get_string";
          _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null key_string, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v24 = "nw_proxy_config_get_string";
        __int16 v25 = 2082;
        char v26 = v17;
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null key_string, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v17);
    }
LABEL_21:
    if (!v7)
    {
LABEL_23:
      string = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v7);
    goto LABEL_23;
  }
  string = xpc_dictionary_get_string(v1, string_ptr);
LABEL_24:

  return string;
}

void sub_183948D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_apply_common_keys(void *a1, void *a2, int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  char v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v6)
  {
    string = xpc_dictionary_get_string(v6, "Identifier");
    if (string) {
      uuid_parse(string, v5 + 56);
    }
    uint64_t v9 = nw_proxy_config_get_array(v7);
    id v10 = (void *)*((void *)v5 + 16);
    *((void *)v5 + 16) = v9;

    v5[170] = v5[170] & 0xF7 | (8 * !nw_proxy_config_get_int64(v7, @"FallBackAllowed", a3 != 1));
    v5[170] = v5[170] & 0x7F | (nw_proxy_config_get_int64(v7, @"ExcludeSimpleHostnames", 0) << 7);
    goto LABEL_5;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v22 = "nw_proxy_config_apply_common_keys";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_proxy_config_apply_common_keys";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null dictionary", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          char v22 = "nw_proxy_config_apply_common_keys";
          __int16 v23 = 2082;
          BOOL v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null dictionary, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_proxy_config_apply_common_keys";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null dictionary, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_proxy_config_apply_common_keys";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null dictionary, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v12) {
    free(v12);
  }
LABEL_5:
}

void sub_1839490EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_proxy_config_get_array(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  BOOL v3 = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v26 = "nw_proxy_config_get_array";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v9, &type, &v23)) {
      goto LABEL_25;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_proxy_config_get_array";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (id)gLogObj;
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          char v26 = "nw_proxy_config_get_array";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v9) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_proxy_config_get_array";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (id)gLogObj;
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_proxy_config_get_array";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_24;
  }
  string_ptr = xpc_string_get_string_ptr(v2);
  if (!string_ptr)
  {
    BOOL v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v26 = "nw_proxy_config_get_array";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v9, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v10 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          char v26 = "nw_proxy_config_get_array";
          _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null key_string", buf, 0xCu);
        }
LABEL_24:

        goto LABEL_25;
      }
      if (!v23)
      {
        id v10 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          char v26 = "nw_proxy_config_get_array";
          _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null key_string, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_24;
      }
      char v19 = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v10, type);
      if (!v19)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          char v26 = "nw_proxy_config_get_array";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null key_string, no backtrace", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        char v26 = "nw_proxy_config_get_array";
        __int16 v27 = 2082;
        uint64_t v28 = v19;
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null key_string, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v19);
    }
LABEL_25:
    if (!v9)
    {
LABEL_27:
      id v7 = 0;
      goto LABEL_28;
    }
LABEL_26:
    free(v9);
    goto LABEL_27;
  }
  char v5 = xpc_dictionary_get_value(v1, string_ptr);
  id v6 = v5;
  if (v5 && object_getClass(v5) == (Class)MEMORY[0x1E4F14568]) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }

LABEL_28:

  return v7;
}

void sub_183949680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_configs_create_with_schema_array_block_invoke_127(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (string_ptr)
  {
    if (nw_protocol_tcpconverter_copy_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_tcpconverter_copy_definition::onceToken, &__block_literal_global_49303);
    }
    if (nw_protocol_tcpconverter_copy_definition::definition) {
      id v6 = os_retain((void *)nw_protocol_tcpconverter_copy_definition::definition);
    }
    else {
      id v6 = 0;
    }
    nw_protocol_options_t options = nw_framer_create_options(v6);

    unsigned __int16 int64 = nw_proxy_config_get_int64(*(void **)(a1 + 32), @"TransportConverterPort", 0);
    host_with_numeric_int port = nw_endpoint_create_host_with_numeric_port(string_ptr, int64);
    os_log_type_t v11 = nw_proxy_config_create((void *)host_with_numeric_port, options);

    BOOL v7 = v11 != 0;
    if (v11)
    {
      v11->os_log_type_t type = 3005;
      nw_proxy_config_apply_common_keys(v11, *(void **)(a1 + 32), 1);
      *((unsigned char *)v11 + 170) |= 0x68u;
      if (!nw_proxy_config_get_int64(*(void **)(a1 + 32), @"TransportConverterFallBackAllowed", 0)) {
        *((unsigned char *)v11 + 171) |= 3u;
      }
      *((unsigned char *)v11 + 171) = *((unsigned char *)v11 + 171) & 0xFB | (4
                                                            * nw_proxy_config_get_int64(*(void **)(a1 + 32), @"TransportConverterTFOMode", 0));
      *((unsigned char *)v11 + 171) = *((unsigned char *)v11 + 171) & 0xF7 | (8
                                                            * (nw_proxy_config_get_int64(*(void **)(a1 + 32), @"TransportConverterTFOMode", 0) == 2));
      v11->multipath_service = nw_proxy_config_get_int64(*(void **)(a1 + 32), @"TransportConverterMultipathServiceType", 0);
      nw_array_append(*(void *)(a1 + 40), v11);
    }
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

void sub_18394986C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_set_is_privacy_proxy(void *a1, char a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (v5)
  {
    if (a3) {
      char v7 = 2;
    }
    else {
      char v7 = 0;
    }
    *((unsigned char *)v5 + 170) = v7 | a2 | *((unsigned char *)v5 + 170) & 0xFC;
    goto LABEL_6;
  }
  id v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_proxy_config_set_is_privacy_proxy";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_proxy_config_set_is_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          char v19 = "nw_proxy_config_set_is_privacy_proxy";
          __int16 v20 = 2082;
          BOOL v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_proxy_config_set_is_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_proxy_config_set_is_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v9) {
    free(v9);
  }
LABEL_6:
}

uint64_t nw_proxy_config_is_privacy_proxy(void *a1, BOOL *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      *a2 = (*((unsigned char *)v3 + 170) & 2) != 0;
    }
    uint64_t v5 = *((unsigned char *)v3 + 170) & 1;
    goto LABEL_5;
  }
  char v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_proxy_config_is_privacy_proxy";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_proxy_config_is_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_proxy_config_is_privacy_proxy";
          __int16 v19 = 2082;
          __int16 v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_proxy_config_is_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_proxy_config_is_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0;
LABEL_5:

  return v5;
}

uint64_t nw_proxy_config_get_ignore_privacy_stance(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[170] >> 2) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_proxy_config_get_ignore_privacy_stance";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_get_ignore_privacy_stance";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_proxy_config_get_ignore_privacy_stance";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_get_ignore_privacy_stance";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_get_ignore_privacy_stance";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_ignore_privacy_stance(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 4;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 170) = *((unsigned char *)v3 + 170) & 0xFB | v5;
    goto LABEL_6;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_ignore_privacy_stance";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_ignore_privacy_stance";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_ignore_privacy_stance";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_ignore_privacy_stance";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_ignore_privacy_stance";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void nw_proxy_config_set_use_over_privacy_proxy(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 0x80;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 171) = v5 & 0x80 | *((unsigned char *)v3 + 171) & 0x7F;
    goto LABEL_6;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_use_over_privacy_proxy";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_use_over_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_use_over_privacy_proxy";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_use_over_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_use_over_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

BOOL nw_proxy_config_use_over_privacy_proxy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    BOOL v3 = v1[171] < 0;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_proxy_config_use_over_privacy_proxy";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_use_over_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_proxy_config_use_over_privacy_proxy";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_use_over_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_use_over_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_prohibit_direct(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 8;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 170) = *((unsigned char *)v3 + 170) & 0xF7 | v5;
    goto LABEL_6;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_prohibit_direct";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_prohibit_direct";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_prohibit_direct";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_prohibit_direct";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_prohibit_direct";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

uint64_t nw_proxy_config_prohibits_direct(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[170] >> 3) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_proxy_config_prohibits_direct";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_prohibits_direct";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_proxy_config_prohibits_direct";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_prohibits_direct";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_prohibits_direct";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_proxy_config_use_fast_fallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[171] >> 6) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_proxy_config_use_fast_fallback";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_use_fast_fallback";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_proxy_config_use_fast_fallback";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_use_fast_fallback";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_use_fast_fallback";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_use_fast_fallback(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 64;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 171) = *((unsigned char *)v3 + 171) & 0xBF | v5;
    goto LABEL_6;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_use_fast_fallback";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_use_fast_fallback";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_use_fast_fallback";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_use_fast_fallback";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_use_fast_fallback";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void nw_proxy_config_add_required_protocol(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  char v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_proxy_config_add_required_protocol";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_proxy_config_add_required_protocol";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_proxy_config_add_required_protocol";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v11) {
          goto LABEL_6;
        }
LABEL_41:
        free(v11);
        goto LABEL_6;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_proxy_config_add_required_protocol";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_proxy_config_add_required_protocol";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    if (!v3[3])
    {
      xpc_object_t v6 = xpc_array_create(0, 0);
      xpc_object_t v7 = v3[3];
      v3[3] = v6;
    }
    os_log_type_t v8 = v5;
    os_log_type_t v9 = v8 + 8;

    xpc_array_set_string(v3[3], 0xFFFFFFFFFFFFFFFFLL, v9);
    goto LABEL_6;
  }
  char v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v27 = "nw_proxy_config_add_required_protocol";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v11, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_proxy_config_add_required_protocol";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    BOOL v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_proxy_config_add_required_protocol";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  uint64_t v19 = (char *)__nw_create_backtrace_string();
  BOOL v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_proxy_config_add_required_protocol";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v27 = "nw_proxy_config_add_required_protocol";
    __int16 v28 = 2082;
    uint64_t v29 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_18394B81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_proxy_config_stack_requires_http_protocols(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (!v1)
  {
    xpc_object_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_stack_requires_http_protocols";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_stack_requires_http_protocols";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_stack_requires_http_protocols";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_stack_requires_http_protocols";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_stack_requires_http_protocols";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_22:
    if (v8) {
      free(v8);
    }
    goto LABEL_24;
  }
  if (!v1[3])
  {
LABEL_24:
    BOOL v6 = 0;
    goto LABEL_25;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  char v20 = 0;
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
  }
  id v3 = (id)nw_protocol_copy_http_messaging_definition_definition;
  identifier = nw_protocol_definition_get_identifier(v3);
  char v5 = (void *)v2[3];
  applier[0] = MEMORY[0x1E4F143A8];
  applier[1] = 3221225472;
  applier[2] = __nw_proxy_config_stack_requires_http_protocols_block_invoke;
  applier[3] = &unk_1E5248460;
  void applier[4] = buf;
  applier[5] = identifier;
  xpc_array_apply(v5, applier);
  BOOL v6 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;

  _Block_object_dispose(buf, 8);
LABEL_25:

  return v6;
}

void sub_18394BBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_config_stack_requires_http_protocols_block_invoke(uint64_t a1, int a2, xpc_object_t xstring)
{
  id v4 = *(const char **)(a1 + 40);
  string_ptr = xpc_string_get_string_ptr(xstring);
  int v6 = strcmp(v4, string_ptr);
  if (!v6) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return v6 != 0;
}

void nw_proxy_config_add_protocol_to_remove(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  char v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v11) {
          goto LABEL_6;
        }
LABEL_41:
        free(v11);
        goto LABEL_6;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    if (!v3[4])
    {
      xpc_object_t v6 = xpc_array_create(0, 0);
      xpc_object_t v7 = v3[4];
      void v3[4] = v6;
    }
    os_log_type_t v8 = v5;
    os_log_type_t v9 = v8 + 8;

    xpc_array_set_string(v3[4], 0xFFFFFFFFFFFFFFFFLL, v9);
    goto LABEL_6;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v11, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  uint64_t v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v27 = "nw_proxy_config_add_protocol_to_remove";
    __int16 v28 = 2082;
    uint64_t v29 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_18394C104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_remove_protocols_from_stack(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  char v5 = v4;
  if (!v3)
  {
    xpc_object_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v26 = "nw_proxy_config_remove_protocols_from_stack";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_proxy_config_remove_protocols_from_stack";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          char v26 = "nw_proxy_config_remove_protocols_from_stack";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_proxy_config_remove_protocols_from_stack";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_proxy_config_remove_protocols_from_stack";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    xpc_object_t v6 = (void *)v3[4];
    if (v6)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_config_remove_protocols_from_stack_block_invoke;
      applier[3] = &unk_1E524B4A0;
      id v22 = v4;
      xpc_array_apply(v6, applier);
    }
    goto LABEL_5;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v26 = "nw_proxy_config_remove_protocols_from_stack";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      char v26 = "nw_proxy_config_remove_protocols_from_stack";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null stack", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      char v26 = "nw_proxy_config_remove_protocols_from_stack";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  char v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      char v26 = "nw_proxy_config_remove_protocols_from_stack";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null stack, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    char v26 = "nw_proxy_config_remove_protocols_from_stack";
    __int16 v27 = 2082;
    __int16 v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_18394C638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_remove_protocols_from_stack_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (*string_ptr)
  {
    uint64_t v10 = 0;
    os_log_type_t v11 = &v10;
    uint64_t v12 = 0x3032000000;
    os_log_type_t v13 = __Block_byref_object_copy__38978;
    os_log_type_t v14 = __Block_byref_object_dispose__38979;
    id v15 = 0;
    xpc_object_t v6 = *(NSObject **)(a1 + 32);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __nw_proxy_config_remove_protocols_from_stack_block_invoke_2;
    v9[3] = &unk_1E5240EC8;
    void v9[4] = &v10;
    v9[5] = string_ptr;
    nw_protocol_stack_iterate_application_protocols(v6, v9);
    xpc_object_t v7 = (void *)v11[5];
    if (v7) {
      nw_protocol_stack_remove_protocol(*(void **)(a1 + 32), v7);
    }
    _Block_object_dispose(&v10, 8);
  }
  return 1;
}

void sub_18394C75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void __nw_proxy_config_remove_protocols_from_stack_block_invoke_2(uint64_t a1, void *a2)
{
  os_log_type_t v8 = a2;
  nw_protocol_definition_t v3 = nw_protocol_options_copy_definition(v8);
  identifier = nw_protocol_definition_get_identifier(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void *)(v5 + 40);
  xpc_object_t v6 = (id *)(v5 + 40);
  if (!v7 && !strcmp(identifier, *(const char **)(a1 + 40))) {
    objc_storeStrong(v6, v3);
  }
}

BOOL nw_proxy_config_supports_connection(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  uint64_t v10 = a4;
  if (!v7)
  {
    nw_protocol_definition_t v49 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
    BOOL v50 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (!__nwlog_fault(v50, type, &v80)) {
      goto LABEL_121;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v51 = __nwlog_obj();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s called with null config", buf, 0xCu);
      }
      goto LABEL_120;
    }
    if (!v80)
    {
      BOOL v51 = __nwlog_obj();
      os_log_type_t v64 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_1830D4000, v51, v64, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_120;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v51 = __nwlog_obj();
    os_log_type_t v58 = type[0];
    BOOL v59 = os_log_type_enabled(v51, type[0]);
    if (!backtrace_string)
    {
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_1830D4000, v51, v58, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
      goto LABEL_120;
    }
    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v51, v58, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_102;
  }
  if (!v8)
  {
    nw_protocol_definition_t v53 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
    BOOL v50 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (!__nwlog_fault(v50, type, &v80)) {
      goto LABEL_121;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v51 = __nwlog_obj();
      os_log_type_t v54 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_1830D4000, v51, v54, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_120;
    }
    if (!v80)
    {
      BOOL v51 = __nwlog_obj();
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_1830D4000, v51, v65, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_120;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v51 = __nwlog_obj();
    os_log_type_t v60 = type[0];
    BOOL v61 = os_log_type_enabled(v51, type[0]);
    if (!backtrace_string)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_1830D4000, v51, v60, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_120;
    }
    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v51, v60, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_102;
  }
  if (!v9)
  {
    uint64_t v55 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
    BOOL v50 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (!__nwlog_fault(v50, type, &v80)) {
      goto LABEL_121;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v51 = __nwlog_obj();
      os_log_type_t v56 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_1830D4000, v51, v56, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_120:

LABEL_121:
      if (v50) {
        free(v50);
      }
      goto LABEL_123;
    }
    if (!v80)
    {
      BOOL v51 = __nwlog_obj();
      os_log_type_t v66 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_1830D4000, v51, v66, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_120;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v51 = __nwlog_obj();
    os_log_type_t v62 = type[0];
    BOOL v63 = os_log_type_enabled(v51, type[0]);
    if (!backtrace_string)
    {
      if (v63)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_1830D4000, v51, v62, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_120;
    }
    if (v63)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_supports_connection";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v51, v62, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_102:

    free(backtrace_string);
    goto LABEL_121;
  }
  int v11 = *((_DWORD *)v7 + 38);
  if (!v11) {
    goto LABEL_123;
  }
  if (v11 != 4)
  {
    os_log_type_t v13 = v9;
    uint64_t v14 = v13[12];

    if ((v14 & 0x8000) == 0)
    {
      id v15 = v13;
      char v16 = v15[19];

      if ((*((_DWORD *)v7 + 38) & 0xFFFFFFFE) == 2)
      {
        if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
          dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
        }
        id v17 = (id)g_tcp_definition;
        char v18 = nw_protocol_stack_includes_protocol(v16, v17);

        if ((v18 & 1) == 0) {
          goto LABEL_62;
        }
      }
      os_log_type_t v19 = (void *)*((void *)v7 + 3);
      if (v19)
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2020000000;
        char v82 = 0;
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = __nw_proxy_config_supports_connection_block_invoke;
        applier[3] = &unk_1E5248210;
        void applier[4] = v16;
        applier[5] = buf;
        xpc_array_apply(v19, applier);
        int v20 = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
        _Block_object_dispose(buf, 8);
        if (v20) {
          goto LABEL_62;
        }
      }
      if (*((_DWORD *)v7 + 38) != 1)
      {
LABEL_28:
        if (*((_DWORD *)v7 + 39) == 3005)
        {
          if (nw_proxy_config_can_use_tcp_converter(void)::onceToken != -1) {
            dispatch_once(&nw_proxy_config_can_use_tcp_converter(void)::onceToken, &__block_literal_global_277);
          }
          if (nw_proxy_config_can_use_tcp_converter(void)::allowed != 1) {
            goto LABEL_62;
          }
          if (v10)
          {
            BOOL v31 = v10[12];
            uint64_t v32 = v31;
            if (v31 && nw_interface_get_type(v31) == nw_interface_type_other)
            {

              goto LABEL_62;
            }
          }
        }
        BOOL v33 = v8;
        int v34 = [v33 type];

        if ((v34 - 3) <= 0xFFFFFFFD)
        {
          BOOL v12 = 0;
          if ((*((unsigned char *)v7 + 170) & 0x10) == 0 || v34 != 3) {
            goto LABEL_63;
          }
        }
        if ((*((unsigned char *)v7 + 170) & 0x20) == 0)
        {
          if ((*((unsigned char *)v7 + 170) & 0x80) != 0 && v34 == 2)
          {
            hostname = (char *)nw_endpoint_get_hostname(v33);
            if (hostname)
            {
              if (!strchr(hostname, 46)) {
                goto LABEL_62;
              }
            }
          }
LABEL_66:
          *(void *)buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2020000000;
          char v82 = 0;
          os_log_type_t v47 = (void *)*((void *)v7 + 16);
          if (!v47) {
            goto LABEL_69;
          }
          v76[0] = MEMORY[0x1E4F143A8];
          v76[1] = 3221225472;
          v76[2] = __nw_proxy_config_supports_connection_block_invoke_3;
          v76[3] = &unk_1E5248210;
          uint64_t v77 = v33;
          id v78 = buf;
          xpc_array_apply(v47, v76);

          if (*(unsigned char *)(*(void *)&buf[8] + 24))
          {
            BOOL v12 = 0;
          }
          else
          {
LABEL_69:
            nw_protocol_options_t v48 = (void *)*((void *)v7 + 15);
            if (v48)
            {
              *(void *)os_log_type_t type = 0;
              BOOL v73 = type;
              uint64_t v74 = 0x2020000000;
              char v75 = 0;
              v69[0] = MEMORY[0x1E4F143A8];
              v69[1] = 3221225472;
              v69[2] = __nw_proxy_config_supports_connection_block_invoke_4;
              v69[3] = &unk_1E5248210;
              BOOL v70 = v33;
              uint64_t v71 = type;
              xpc_array_apply(v48, v69);
              BOOL v12 = *((unsigned char *)v73 + 24) != 0;

              _Block_object_dispose(type, 8);
            }
            else
            {
              BOOL v12 = (*((unsigned char *)v7 + 172) & 1) == 0;
            }
          }
          _Block_object_dispose(buf, 8);
          goto LABEL_63;
        }
        if (v34 != 1) {
          goto LABEL_62;
        }
        os_log_type_t v36 = *((void *)v7 + 5);
        if (!v36 || nw_endpoint_get_type(v36) != nw_endpoint_type_address) {
          goto LABEL_62;
        }
        if (!nw_path_has_nat64_prefixes(v10) || nw_endpoint_get_address_family(v33) != 30) {
          goto LABEL_65;
        }
        os_log_type_t v37 = (unsigned int *)nw_path_nat64_prefixes(v10);
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        *(_DWORD *)os_log_type_t type = 0;
        size_t v38 = v37[4];
        if (v38)
        {
          *(_DWORD *)buf = v37[4];
          memcpy(&buf[4], v37, v38);
          sockaddr address = nw_endpoint_get_address(v33);
          if (nw_nat64_extract_v4((unsigned int *)buf, &address->sa_data[6], (uint64_t)type)) {
            goto LABEL_58;
          }
        }
        size_t v40 = v37[9];
        if (v40)
        {
          *(_DWORD *)buf = v37[9];
          memcpy(&buf[4], v37, v40);
          BOOL v41 = nw_endpoint_get_address(v33);
          if (nw_nat64_extract_v4((unsigned int *)buf, &v41->sa_data[6], (uint64_t)type)) {
            goto LABEL_58;
          }
        }
        size_t v42 = v37[14];
        if (v42)
        {
          *(_DWORD *)buf = v37[14];
          memcpy(&buf[4], v37, v42);
          os_log_type_t v43 = nw_endpoint_get_address(v33);
          if (nw_nat64_extract_v4((unsigned int *)buf, &v43->sa_data[6], (uint64_t)type)) {
            goto LABEL_58;
          }
        }
        size_t v44 = v37[19];
        if (v44
          && (*(_DWORD *)buf = v37[19],
              memcpy(&buf[4], v37, v44),
              os_log_type_t v45 = nw_endpoint_get_address(v33),
              (nw_nat64_extract_v4((unsigned int *)buf, &v45->sa_data[6], (uint64_t)type) & 1) != 0))
        {
LABEL_58:
          if (nw_endpoint_get_address_family(*((void **)v7 + 5)) == 2) {
            goto LABEL_66;
          }
        }
        else
        {
LABEL_65:
          int address_family = nw_endpoint_get_address_family(v33);
          if (address_family == nw_endpoint_get_address_family(*((void **)v7 + 5))) {
            goto LABEL_66;
          }
        }
LABEL_62:
        BOOL v12 = 0;
LABEL_63:

        goto LABEL_124;
      }
      nw_protocol_options_t v21 = nw_protocol_stack_copy_transport_protocol(v16);
      nw_protocol_options_t v22 = v21;
      if (v21)
      {
        char v23 = v21;
        id v24 = v23[1];
        nw_protocol_options_t options = v23;

        if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
          dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
        }
        id v25 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
        BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v24, (uint64_t)v25);

        if (is_equal_unsafe)
        {
          id v27 = nw_protocol_copy_quic_stream_definition();

          id v24 = v27;
        }
        identifier = nw_protocol_definition_get_identifier(v24);
        buf[0] = 0;
        nw_proxy_config_should_proxy_transport_at_level((NWConcrete_nw_proxy_config *)v7, identifier, buf);
        if (buf[0]) {
          uint64_t v29 = "proxy-wildcard";
        }
        else {
          uint64_t v29 = identifier;
        }
        uint64_t v30 = nw_dictionary_copy_value(*((void *)v7 + 1), (uint64_t)v29);
        if ((*((unsigned char *)v7 + 172) & 2) != 0
          && nw_protocol_options_is_quic(options)
          && (_os_feature_enabled_impl() & 1) == 0)
        {
        }
        else
        {

          if (v30) {
            goto LABEL_27;
          }
        }

        goto LABEL_62;
      }
LABEL_27:

      goto LABEL_28;
    }
LABEL_123:
    BOOL v12 = 0;
    goto LABEL_124;
  }
  BOOL v12 = 1;
LABEL_124:

  return v12;
}

void sub_18394D490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_config_supports_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (*string_ptr)
  {
    uint64_t v10 = 0;
    int v11 = &v10;
    uint64_t v12 = 0x2020000000;
    char v13 = 0;
    xpc_object_t v6 = *(NSObject **)(a1 + 32);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __nw_proxy_config_supports_connection_block_invoke_2;
    v9[3] = &unk_1E5240EC8;
    void v9[4] = &v10;
    v9[5] = string_ptr;
    nw_protocol_stack_iterate_application_protocols(v6, v9);
    BOOL v7 = *((unsigned char *)v11 + 24) != 0;
    if (!*((unsigned char *)v11 + 24)) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
    _Block_object_dispose(&v10, 8);
  }
  else
  {
    BOOL v7 = 1;
  }

  return v7;
}

void sub_18394D640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_supports_connection_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4 && object_getClass(v4) == (Class)MEMORY[0x1E4F145F0])
  {
    string_ptr = xpc_string_get_string_ptr(v5);
    uint64_t v6 = 1;
    if (nw_endpoint_proxy_match_pattern_to_endpoint(*(void **)(a1 + 32), string_ptr))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

void sub_18394D6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_supports_connection_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4 && object_getClass(v4) == (Class)MEMORY[0x1E4F145F0])
  {
    string_ptr = xpc_string_get_string_ptr(v5);
    uint64_t v6 = 1;
    if (nw_endpoint_proxy_match_pattern_to_endpoint(*(void **)(a1 + 32), string_ptr))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

void sub_18394D774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_proxy_config_can_use_tcp_converterv_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  if ((result & 1) != 0 || (uint64_t result = MGGetBoolAnswer(), result)) {
    nw_proxy_config_can_use_tcp_converter(void)::allowed = 1;
  }
  return result;
}

void __nw_proxy_config_supports_connection_block_invoke_2(uint64_t a1, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4 = nw_protocol_options_copy_definition(options);
  identifier = nw_protocol_definition_get_identifier(v4);
  if (!strcmp(identifier, *(const char **)(a1 + 40))) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

uint64_t nw_proxy_config_get_is_companion_proxy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[172] >> 1) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_proxy_config_get_is_companion_proxy";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_get_is_companion_proxy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_proxy_config_get_is_companion_proxy";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_get_is_companion_proxy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_get_is_companion_proxy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_proxy_config_supports_unsatisfied_paths(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (*((unsigned char *)v1 + 170) & 0x40) == 0;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_proxy_config_supports_unsatisfied_paths";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_supports_unsatisfied_paths";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_proxy_config_supports_unsatisfied_paths";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_supports_unsatisfied_paths";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_supports_unsatisfied_paths";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_proxy_config_override_opaque_https(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_proxy_config_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[171] >> 4) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_proxy_config_override_opaque_https";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_override_opaque_https";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_proxy_config_override_opaque_https";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_override_opaque_https";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_proxy_config_override_opaque_https";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t *nw_proxy_config_create_with_agent_data(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  return nw_proxy_config_create_with_agent_data_extended(a1, a2, a3, 0);
}

uint64_t *nw_proxy_config_create_with_stack_internal(void *a1, void *a2, const char *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  os_log_type_t v8 = v7;
  if (v6)
  {
    if (v7)
    {
      id v9 = objc_alloc_init(NWConcrete_nw_proxy_config);
      os_log_type_t v10 = (uint64_t *)v9;
      if (v9)
      {
        v9->unsigned int mode = 1;
        objc_storeStrong((id *)&v9->endpoint, a1);
        BOOL v11 = nw_dictionary_create();
        os_log_type_t v12 = (void *)v10[1];
        v10[1] = (uint64_t)v11;

        nw_dictionary_set_value(v10[1], a3, v8);
        char v13 = v10;
LABEL_24:

        goto LABEL_25;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
      id v15 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v36 = 0;
      if (__nwlog_fault(v15, &type, &v36))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v16 = (id)gLogObj;
          os_log_type_t v17 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)buf = 136446210;
            nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
          }
        }
        else if (v36)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v16 = (id)gLogObj;
          os_log_type_t v19 = type;
          BOOL v20 = os_log_type_enabled(v16, type);
          if (backtrace_string)
          {
            if (v20)
            {
              *(_DWORD *)buf = 136446466;
              nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
              __int16 v40 = 2082;
              BOOL v41 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v15) {
              goto LABEL_24;
            }
            goto LABEL_23;
          }
          if (v20)
          {
            *(_DWORD *)buf = 136446210;
            nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
            _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v16 = (id)gLogObj;
          os_log_type_t v21 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)buf = 136446210;
            nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
            _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v15) {
        goto LABEL_24;
      }
LABEL_23:
      free(v15);
      goto LABEL_24;
    }
    id v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
    id v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v24, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v25 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null stack", buf, 0xCu);
        }
LABEL_57:

        goto LABEL_58;
      }
      if (!v36)
      {
        id v25 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_1830D4000, v25, v35, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_57;
      }
      uint64_t v29 = (char *)__nw_create_backtrace_string();
      id v25 = __nwlog_obj();
      os_log_type_t v32 = type;
      BOOL v33 = os_log_type_enabled(v25, type);
      if (!v29)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_1830D4000, v25, v32, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
        __int16 v40 = 2082;
        BOOL v41 = v29;
        _os_log_impl(&dword_1830D4000, v25, v32, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_45;
    }
  }
  else
  {
    char v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
    id v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v24, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null proxy_endpoint", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (!v36)
      {
        id v25 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_1830D4000, v25, v34, "%{public}s called with null proxy_endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_57;
      }
      uint64_t v29 = (char *)__nw_create_backtrace_string();
      id v25 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v25, type);
      if (!v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null proxy_endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        nw_protocol_options_t v39 = "nw_proxy_config_create_with_stack_internal";
        __int16 v40 = 2082;
        BOOL v41 = v29;
        _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null proxy_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_45:

      free(v29);
    }
  }
LABEL_58:
  if (v24) {
    free(v24);
  }
  os_log_type_t v10 = 0;
LABEL_25:

  return v10;
}

void sub_18394E7D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL42nw_proxy_config_initialize_known_protocolsv_block_invoke()
{
  if (nw_protocol_socksv4_copy_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_socksv4_copy_definition::onceToken, &__block_literal_global_44786);
  }
  id v0 = (void *)nw_protocol_socksv4_copy_definition::definition;
  if (nw_protocol_socksv4_copy_definition::definition) {
    id v0 = os_retain((void *)nw_protocol_socksv4_copy_definition::definition);
  }

  if (nw_protocol_socksv5_copy_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_socksv5_copy_definition::onceToken, &__block_literal_global_85297);
  }
  id v1 = (void *)nw_protocol_socksv5_copy_definition::definition;
  if (nw_protocol_socksv5_copy_definition::definition) {
    id v1 = os_retain((void *)nw_protocol_socksv5_copy_definition::definition);
  }

  if (nw_protocol_masque_get_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27403);
  }
  nw_proxy_config_t v2 = (void *)nw_protocol_masque_get_definition(void)::definition;
  if (nw_protocol_masque_get_definition(void)::definition)
  {
    nw_proxy_config_t v2 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
    if (v2) {
      nw_proxy_config_t v2 = os_retain(v2);
    }
  }

  if (nw_protocol_masque_listener_get_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_207);
  }
  uint64_t v3 = (void *)nw_protocol_masque_listener_get_definition(void)::definition;
  if (nw_protocol_masque_listener_get_definition(void)::definition)
  {
    uint64_t v3 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
    if (v3) {
      uint64_t v3 = os_retain(v3);
    }
  }

  if (nw_protocol_copy_serializable_tls_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_73554);
  }

  if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
  }

  if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1) {
    dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45806);
  }

  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
  }

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
  }

  if (nw_protocol_copy_http1_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_73800);
  }

  if (nw_protocol_copy_http2_definition_onceToken[0] != -1) {
    dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_4_73885);
  }

  if (nw_protocol_copy_http3_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_13_73886);
  }

  if (nw_protocol_demux_copy_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
  }
  nw_protocol_definition_t v4 = (void *)nw_protocol_demux_copy_definition::definition;
  if (nw_protocol_demux_copy_definition::definition) {
    nw_protocol_definition_t v4 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
  }

  if (nw_protocol_copy_oblivious_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_oblivious_http_definition_onceToken, &__block_literal_global_50_75176);
  }

  if (nw_protocol_copy_oblivious_http_contexts_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_oblivious_http_contexts_definition_onceToken, &__block_literal_global_52_75214);
  }

  if (nw_protocol_copy_qpod_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_qpod_definition::onceToken, &__block_literal_global_34_57241);
  }

  if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
    dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_102_35650);
  }
  id v5 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
}

BOOL nw_proxy_config_copy_agent_data(uint64_t a1)
{
  uint64_t v3 = (void *)MEMORY[0x1F4188790](a1);
  uint64_t v274 = *MEMORY[0x1E4F143B8];
  nw_protocol_definition_t v4 = v3;
  uint64_t v5 = (uint64_t)v4;
  if (!v4)
  {
    int v140 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v262 = "nw_proxy_config_copy_agent_data";
    __int16 v141 = (char *)_os_log_send_and_compose_impl();

    v265[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v141, v265, type)) {
      goto LABEL_322;
    }
    if (v265[0] == 17)
    {
      nw_endpoint_t v142 = __nwlog_obj();
      os_log_type_t v143 = v265[0];
      if (os_log_type_enabled(v142, (os_log_type_t)v265[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v262 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_1830D4000, v142, v143, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_endpoint_t v142 = __nwlog_obj();
      os_log_type_t v147 = v265[0];
      BOOL v148 = os_log_type_enabled(v142, (os_log_type_t)v265[0]);
      if (backtrace_string)
      {
        if (v148)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v262 = "nw_proxy_config_copy_agent_data";
          __int16 v263 = 2082;
          int v264 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v142, v147, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_322:
        if (!v141)
        {
LABEL_13:
          dispatch_data_t v31 = 0;
LABEL_216:

          return (BOOL)v31;
        }
LABEL_323:
        free(v141);
        goto LABEL_13;
      }
      if (v148)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v262 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_1830D4000, v142, v147, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_endpoint_t v142 = __nwlog_obj();
      os_log_type_t v173 = v265[0];
      if (os_log_type_enabled(v142, (os_log_type_t)v265[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v262 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_1830D4000, v142, v173, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_321:

    goto LABEL_322;
  }
  if (LODWORD(v4[19].isa) != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v30 = (id)gLogObj;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      unint64_t v262 = "nw_proxy_config_copy_agent_data";
      _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_ERROR, "%{public}s Only protocol proxies can be serialized", buf, 0xCu);
    }

    goto LABEL_13;
  }
  if (!v4[1].isa)
  {
    id v144 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v262 = "nw_proxy_config_copy_agent_data";
    __int16 v141 = (char *)_os_log_send_and_compose_impl();

    v265[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v141, v265, type)) {
      goto LABEL_322;
    }
    if (v265[0] == 17)
    {
      nw_endpoint_t v142 = __nwlog_obj();
      os_log_type_t v145 = v265[0];
      if (os_log_type_enabled(v142, (os_log_type_t)v265[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v262 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_1830D4000, v142, v145, "%{public}s called with null config->stacks", buf, 0xCu);
      }
    }
    else if (type[0])
    {
      int v157 = (char *)__nw_create_backtrace_string();
      nw_endpoint_t v142 = __nwlog_obj();
      os_log_type_t v158 = v265[0];
      BOOL v159 = os_log_type_enabled(v142, (os_log_type_t)v265[0]);
      if (v157)
      {
        if (v159)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v262 = "nw_proxy_config_copy_agent_data";
          __int16 v263 = 2082;
          int v264 = v157;
          _os_log_impl(&dword_1830D4000, v142, v158, "%{public}s called with null config->stacks, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v157);
        if (!v141) {
          goto LABEL_13;
        }
        goto LABEL_323;
      }
      if (v159)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v262 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_1830D4000, v142, v158, "%{public}s called with null config->stacks, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_endpoint_t v142 = __nwlog_obj();
      os_log_type_t v193 = v265[0];
      if (os_log_type_enabled(v142, (os_log_type_t)v265[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v262 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_1830D4000, v142, v193, "%{public}s called with null config->stacks, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_321;
  }
  uint64_t v246 = 0;
  unint64_t v247 = &v246;
  uint64_t v248 = 0x2020000000;
  uint64_t v249 = 0;
  enumerator[0] = MEMORY[0x1E4F143A8];
  enumerator[1] = 3221225472;
  enumerator[2] = __nw_proxy_config_copy_agent_data_block_invoke;
  enumerator[3] = &unk_1E5248FD0;
  enumerator[4] = &v246;
  nw_proxy_config_enumerate_match_domains(v4, enumerator);
  v244[0] = MEMORY[0x1E4F143A8];
  v244[1] = 3221225472;
  v244[2] = __nw_proxy_config_copy_agent_data_block_invoke_2;
  v244[3] = &unk_1E5248FD0;
  v244[4] = &v246;
  nw_proxy_config_enumerate_excluded_domains((nw_proxy_config_t)v5, v244);
  v243[0] = MEMORY[0x1E4F143A8];
  v243[1] = 3221225472;
  v243[2] = __nw_proxy_config_copy_agent_data_block_invoke_3;
  v243[3] = &unk_1E5248FD0;
  v243[4] = &v246;
  nw_proxy_config_enumerate_preferred_domains((void *)v5, v243);
  uint64_t v239 = 0;
  id v240 = &v239;
  uint64_t v241 = 0x2020000000;
  uint64_t v242 = 0;
  v238[0] = MEMORY[0x1E4F143A8];
  v238[1] = 3221225472;
  v238[2] = __nw_proxy_config_copy_agent_data_block_invoke_4;
  v238[3] = &unk_1E5248FD0;
  v238[4] = &v239;
  nw_proxy_config_enumerate_alternate_agents((void *)v5, v238);
  size_t v6 = 4028;
  id v7 = buf;
  bzero(buf, 0xFBCuLL);
  uint64_t v8 = v247[3];
  uint64_t v9 = v240[3];
  BOOL v215 = (v8 | v9) != 0;
  if (v8 | v9)
  {
    uint64_t v10 = v8 + v9;
    size_t v6 = v10 + 4028;
    if (v10 == -4028)
    {
      id v1 = __nwlog_obj();
      os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v265 = 136446210;
      uint64_t v266 = "strict_calloc";
      unint64_t v160 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v160);
      if (result) {
        goto LABEL_384;
      }
      free(v160);
    }
    id v7 = malloc_type_calloc(1uLL, v6, 0xEAFB8F1AuLL);
    if (!v7)
    {
      int v161 = __nwlog_obj();
      os_log_type_enabled(v161, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v265 = 136446722;
      uint64_t v266 = "strict_calloc";
      __int16 v267 = 2048;
      *(void *)id v268 = 1;
      *(_WORD *)&v268[8] = 2048;
      *(void *)uint64_t v269 = v6;
      uint64_t v5 = _os_log_send_and_compose_impl();

      __nwlog_abort(v5);
      __break(1u);
      goto LABEL_254;
    }
  }
  v7[20] = *(_DWORD *)(v5 + 152);
  *((_WORD *)v7 + 8) = *(_DWORD *)(v5 + 156);
  *((_WORD *)v7 + 9) = *(_WORD *)(v5 + 168);
  v7[21] = *(_DWORD *)(v5 + 160);
  int v11 = *((_WORD *)v7 + 11) & 0xFFFE | (v7[24] << 16) | *(unsigned char *)(v5 + 170) & 1;
  *((_WORD *)v7 + 11) = *((_WORD *)v7 + 11) & 0xFFFE | *(unsigned char *)(v5 + 170) & 1;
  unsigned int v12 = v11 & 0xFFFFDFFD | *(unsigned char *)(v5 + 170) & 2 | (((*(unsigned __int8 *)(v5 + 170) >> 2) & 1) << 13);
  *((_WORD *)v7 + 11) = v12;
  unsigned int v13 = v12 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(v5 + 170) >> 3) & 1));
  *((_WORD *)v7 + 11) = v13;
  unsigned int v14 = v13 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(v5 + 170) >> 4) & 1));
  *((_WORD *)v7 + 11) = v14;
  unsigned int v15 = v14 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(v5 + 170) >> 5) & 1));
  *((_WORD *)v7 + 11) = v15;
  unsigned int v16 = v15 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(v5 + 170) >> 6) & 1));
  *((_WORD *)v7 + 11) = v16;
  unsigned int v17 = v16 & 0xFFFFFFBF | (((*(unsigned __int8 *)(v5 + 170) >> 7) & 1) << 6);
  *((_WORD *)v7 + 11) = v17;
  unsigned int v18 = v17 & 0xFFFFFE7F | ((*(unsigned char *)(v5 + 171) & 1) << 7) | (((*(unsigned __int8 *)(v5 + 171) >> 1) & 1) << 8);
  *((_WORD *)v7 + 11) = v18;
  unsigned int v19 = v18 & 0xFFFFFDFF | (((*(unsigned __int8 *)(v5 + 171) >> 2) & 1) << 9);
  *((_WORD *)v7 + 11) = v19;
  unsigned int v20 = v19 & 0xFFFFFBFF | (((*(unsigned __int8 *)(v5 + 171) >> 3) & 1) << 10);
  *((_WORD *)v7 + 11) = v20;
  unsigned int v21 = v20 & 0xFFFFF7FF | (((*(unsigned __int8 *)(v5 + 171) >> 4) & 1) << 11);
  *((_WORD *)v7 + 11) = v21;
  unsigned int v22 = v21 & 0xFFFFEFFF | (((*(unsigned __int8 *)(v5 + 171) >> 6) & 1) << 12);
  *((_WORD *)v7 + 11) = v22;
  unsigned int v23 = v22 & 0xFFFFBFFF | (((*(unsigned __int8 *)(v5 + 171) >> 7) & 1) << 14);
  *((_WORD *)v7 + 11) = v23;
  unsigned int v24 = v23 & 0xFFFF7FFF | ((*(unsigned char *)(v5 + 172) & 1) << 15);
  *((_WORD *)v7 + 11) = v24;
  unsigned int v25 = v24 & 0xFFFEFFFF | (((*(unsigned __int8 *)(v5 + 172) >> 1) & 1) << 16);
  *((_WORD *)v7 + 11) = v24;
  v7[24] = BYTE2(v25);
  *(_OWORD *)id v7 = *(_OWORD *)(v5 + 72);
  uint64_t v234 = 0;
  uint64_t v235 = &v234;
  uint64_t v236 = 0x2020000000;
  int v237 = v7 + 25;
  int is_null = uuid_is_null((const unsigned __int8 *)(v5 + 56));
  unint64_t v27 = (unint64_t)&v7[v6];
  unint64_t v28 = v235[3];
  buffer = v7;
  unint64_t v220 = &v7[v6];
  if (!is_null)
  {
    if (v28)
    {
      if (v28 < v27)
      {
        if (v27 - v28 > 0x14)
        {
          *(unsigned char *)unint64_t v28 = 15;
          *(_DWORD *)(v28 + 1) = 16;
          *(_OWORD *)(v28 + 5) = *(_OWORD *)(v5 + 56);
          v28 += 21;
          goto LABEL_38;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v32 = (id)gLogObj;
        *(_DWORD *)id v265 = 136447490;
        uint64_t v266 = "nw_necp_append_tlv";
        __int16 v267 = 2048;
        *(void *)id v268 = v28;
        *(_WORD *)&v268[8] = 2048;
        *(void *)uint64_t v269 = 21;
        *(_WORD *)&v269[8] = 2048;
        *(void *)uint64_t v270 = &v7[v6];
        *(_WORD *)&v270[8] = 1024;
        *(_DWORD *)unint64_t v271 = 15;
        *(_WORD *)&v271[4] = 1024;
        *(_DWORD *)&v271[6] = 16;
        BOOL v33 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v255) = 0;
        if (__nwlog_fault(v33, type, &v255))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v34 = (id)gLogObj;
            os_log_type_t v35 = type[0];
            if (os_log_type_enabled(v34, type[0]))
            {
              *(_DWORD *)id v265 = 136447490;
              uint64_t v266 = "nw_necp_append_tlv";
              __int16 v267 = 2048;
              *(void *)id v268 = v28;
              *(_WORD *)&v268[8] = 2048;
              *(void *)uint64_t v269 = 21;
              *(_WORD *)&v269[8] = 2048;
              *(void *)uint64_t v270 = &v7[v6];
              *(_WORD *)&v270[8] = 1024;
              *(_DWORD *)unint64_t v271 = 15;
              *(_WORD *)&v271[4] = 1024;
              *(_DWORD *)&v271[6] = 16;
              _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", v265, 0x36u);
            }
          }
          else if ((_BYTE)v255)
          {
            char v36 = (char *)__nw_create_backtrace_string();
            os_log_type_t v34 = __nwlog_obj();
            os_log_type_t v37 = type[0];
            BOOL v38 = os_log_type_enabled(v34, type[0]);
            if (v36)
            {
              if (v38)
              {
                *(_DWORD *)id v265 = 136447746;
                uint64_t v266 = "nw_necp_append_tlv";
                __int16 v267 = 2048;
                *(void *)id v268 = v28;
                *(_WORD *)&v268[8] = 2048;
                *(void *)uint64_t v269 = 21;
                *(_WORD *)&v269[8] = 2048;
                *(void *)uint64_t v270 = &v7[v6];
                *(_WORD *)&v270[8] = 1024;
                *(_DWORD *)unint64_t v271 = 15;
                *(_WORD *)&v271[4] = 1024;
                *(_DWORD *)&v271[6] = 16;
                __int16 v272 = 2082;
                int v273 = v36;
                _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", v265, 0x40u);
              }

              free(v36);
              unint64_t v27 = (unint64_t)&v7[v6];
              if (!v33) {
                goto LABEL_37;
              }
              goto LABEL_36;
            }
            if (v38)
            {
              *(_DWORD *)id v265 = 136447490;
              uint64_t v266 = "nw_necp_append_tlv";
              __int16 v267 = 2048;
              *(void *)id v268 = v28;
              *(_WORD *)&v268[8] = 2048;
              *(void *)uint64_t v269 = 21;
              *(_WORD *)&v269[8] = 2048;
              *(void *)uint64_t v270 = &v7[v6];
              *(_WORD *)&v270[8] = 1024;
              *(_DWORD *)unint64_t v271 = 15;
              *(_WORD *)&v271[4] = 1024;
              *(_DWORD *)&v271[6] = 16;
              _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", v265, 0x36u);
            }
          }
          else
          {
            os_log_type_t v34 = __nwlog_obj();
            os_log_type_t v39 = type[0];
            if (os_log_type_enabled(v34, type[0]))
            {
              *(_DWORD *)id v265 = 136447490;
              uint64_t v266 = "nw_necp_append_tlv";
              __int16 v267 = 2048;
              *(void *)id v268 = v28;
              *(_WORD *)&v268[8] = 2048;
              *(void *)uint64_t v269 = 21;
              *(_WORD *)&v269[8] = 2048;
              *(void *)uint64_t v270 = &v7[v6];
              *(_WORD *)&v270[8] = 1024;
              *(_DWORD *)unint64_t v271 = 15;
              *(_WORD *)&v271[4] = 1024;
              *(_DWORD *)&v271[6] = 16;
              _os_log_impl(&dword_1830D4000, v34, v39, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", v265, 0x36u);
            }
          }
        }
        unint64_t v27 = (unint64_t)&v7[v6];
        if (!v33)
        {
LABEL_37:
          unint64_t v28 = 0;
          goto LABEL_38;
        }
LABEL_36:
        free(v33);
        goto LABEL_37;
      }
      long long v178 = __nwlog_obj();
      *(_DWORD *)id v265 = 136447234;
      uint64_t v266 = "nw_necp_append_tlv";
      __int16 v267 = 2048;
      *(void *)id v268 = v28;
      *(_WORD *)&v268[8] = 2048;
      *(void *)uint64_t v269 = &v7[v6];
      *(_WORD *)&v269[8] = 1024;
      *(_DWORD *)uint64_t v270 = 15;
      *(_WORD *)&v270[4] = 1024;
      *(_DWORD *)&v270[6] = 16;
      char v175 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v255) = 0;
      if (__nwlog_fault(v175, type, &v255))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          unint64_t v179 = __nwlog_obj();
          os_log_type_t v180 = type[0];
          if (os_log_type_enabled(v179, type[0]))
          {
            *(_DWORD *)id v265 = 136447234;
            uint64_t v266 = "nw_necp_append_tlv";
            __int16 v267 = 2048;
            *(void *)id v268 = v28;
            *(_WORD *)&v268[8] = 2048;
            *(void *)uint64_t v269 = &v7[v6];
            *(_WORD *)&v269[8] = 1024;
            *(_DWORD *)uint64_t v270 = 15;
            *(_WORD *)&v270[4] = 1024;
            *(_DWORD *)&v270[6] = 16;
            _os_log_impl(&dword_1830D4000, v179, v180, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", v265, 0x2Cu);
          }
        }
        else if ((_BYTE)v255)
        {
          unint64_t v197 = (char *)__nw_create_backtrace_string();
          unint64_t v179 = __nwlog_obj();
          os_log_type_t v198 = type[0];
          BOOL v199 = os_log_type_enabled(v179, type[0]);
          if (v197)
          {
            if (v199)
            {
              *(_DWORD *)id v265 = 136447490;
              uint64_t v266 = "nw_necp_append_tlv";
              __int16 v267 = 2048;
              *(void *)id v268 = v28;
              *(_WORD *)&v268[8] = 2048;
              *(void *)uint64_t v269 = &v7[v6];
              *(_WORD *)&v269[8] = 1024;
              *(_DWORD *)uint64_t v270 = 15;
              *(_WORD *)&v270[4] = 1024;
              *(_DWORD *)&v270[6] = 16;
              *(_WORD *)unint64_t v271 = 2082;
              *(void *)&v271[2] = v197;
              _os_log_impl(&dword_1830D4000, v179, v198, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", v265, 0x36u);
            }

            free(v197);
            if (!v175) {
              goto LABEL_374;
            }
            goto LABEL_373;
          }
          if (v199)
          {
            *(_DWORD *)id v265 = 136447234;
            uint64_t v266 = "nw_necp_append_tlv";
            __int16 v267 = 2048;
            *(void *)id v268 = v28;
            *(_WORD *)&v268[8] = 2048;
            *(void *)uint64_t v269 = &v7[v6];
            *(_WORD *)&v269[8] = 1024;
            *(_DWORD *)uint64_t v270 = 15;
            *(_WORD *)&v270[4] = 1024;
            *(_DWORD *)&v270[6] = 16;
            _os_log_impl(&dword_1830D4000, v179, v198, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", v265, 0x2Cu);
          }
        }
        else
        {
          unint64_t v179 = __nwlog_obj();
          os_log_type_t v208 = type[0];
          if (os_log_type_enabled(v179, type[0]))
          {
            *(_DWORD *)id v265 = 136447234;
            uint64_t v266 = "nw_necp_append_tlv";
            __int16 v267 = 2048;
            *(void *)id v268 = v28;
            *(_WORD *)&v268[8] = 2048;
            *(void *)uint64_t v269 = &v7[v6];
            *(_WORD *)&v269[8] = 1024;
            *(_DWORD *)uint64_t v270 = 15;
            *(_WORD *)&v270[4] = 1024;
            *(_DWORD *)&v270[6] = 16;
            _os_log_impl(&dword_1830D4000, v179, v208, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", v265, 0x2Cu);
          }
        }
      }
LABEL_372:
      if (!v175)
      {
LABEL_374:
        unint64_t v28 = 0;
        unint64_t v27 = (unint64_t)&v7[v6];
LABEL_38:
        v235[3] = v28;
        uint64_t v29 = *(void **)(v5 + 104);
        if (!v29) {
          goto LABEL_155;
        }
        goto LABEL_39;
      }
LABEL_373:
      free(v175);
      goto LABEL_374;
    }
    __int16 v174 = __nwlog_obj();
    *(_DWORD *)id v265 = 136446210;
    uint64_t v266 = "nw_necp_append_tlv";
    char v175 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v255) = 0;
    if (!__nwlog_fault(v175, type, &v255)) {
      goto LABEL_372;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v176 = __nwlog_obj();
      os_log_type_t v177 = type[0];
      if (os_log_type_enabled(v176, type[0]))
      {
        *(_DWORD *)id v265 = 136446210;
        uint64_t v266 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v176, v177, "%{public}s called with null tlv_start", v265, 0xCu);
      }
    }
    else if ((_BYTE)v255)
    {
      id v194 = (char *)__nw_create_backtrace_string();
      uint64_t v176 = __nwlog_obj();
      os_log_type_t v195 = type[0];
      BOOL v196 = os_log_type_enabled(v176, type[0]);
      if (v194)
      {
        if (v196)
        {
          *(_DWORD *)id v265 = 136446466;
          uint64_t v266 = "nw_necp_append_tlv";
          __int16 v267 = 2082;
          *(void *)id v268 = v194;
          _os_log_impl(&dword_1830D4000, v176, v195, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", v265, 0x16u);
        }

        free(v194);
        goto LABEL_372;
      }
      if (v196)
      {
        *(_DWORD *)id v265 = 136446210;
        uint64_t v266 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v176, v195, "%{public}s called with null tlv_start, no backtrace", v265, 0xCu);
      }
    }
    else
    {
      uint64_t v176 = __nwlog_obj();
      os_log_type_t v207 = type[0];
      if (os_log_type_enabled(v176, type[0]))
      {
        *(_DWORD *)id v265 = 136446210;
        uint64_t v266 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v176, v207, "%{public}s called with null tlv_start, backtrace limit exceeded", v265, 0xCu);
      }
    }

    goto LABEL_372;
  }
  uint64_t v29 = *(void **)(v5 + 104);
  if (!v29)
  {
LABEL_155:
    BOOL v107 = nw_path_evaluator_add_endpoint_to_necp_message(*(void **)(v5 + 40), 1, v28, v27, 0);
    v235[3] = v107;
    if (!v107)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v121 = (id)gLogObj;
      if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)id v265 = 136446210;
        uint64_t v266 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_1830D4000, v121, OS_LOG_TYPE_ERROR, "%{public}s Failed to serialize endpoint", v265, 0xCu);
      }

      if (v215) {
        free(buffer);
      }
      dispatch_data_t v31 = 0;
      goto LABEL_215;
    }
    if (nw_proxy_config_default_transport(void)::onceToken[0] != -1) {
      dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_265);
    }
    nw_proxy_config_t v2 = (const char *)nw_proxy_config_default_transport(void)::default_transport_string;
    id v1 = nw_dictionary_copy_value(*(void *)(v5 + 8), nw_proxy_config_default_transport(void)::default_transport_string);
    if (!v1)
    {
LABEL_198:
      uint64_t v128 = *(void *)(v5 + 8);
      v228[0] = MEMORY[0x1E4F143A8];
      v228[1] = 3221225472;
      v228[2] = __nw_proxy_config_copy_agent_data_block_invoke_143;
      v228[3] = &unk_1E5240EF0;
      id v232 = v2;
      id v129 = (id)v5;
      unint64_t v229 = v129;
      unsigned int v231 = &v234;
      unint64_t v233 = v27;
      char v130 = v1;
      char v230 = v130;
      nw_dictionary_apply(v128, (uint64_t)v228);
      Class isa = v129[3].isa;
      if (isa)
      {
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = __nw_proxy_config_copy_agent_data_block_invoke_2_144;
        applier[3] = &unk_1E5248460;
        void applier[4] = &v234;
        applier[5] = v27;
        xpc_array_apply(isa, applier);
      }
      Class v132 = v129[4].isa;
      if (v132)
      {
        v226[0] = MEMORY[0x1E4F143A8];
        v226[1] = 3221225472;
        v226[2] = __nw_proxy_config_copy_agent_data_block_invoke_3_145;
        v226[3] = &unk_1E5248460;
        v226[4] = &v234;
        v226[5] = v27;
        xpc_array_apply(v132, v226);
      }
      if (v235[3])
      {
        __int16 v133 = (atomic_uchar *)v129[6].isa;
        if (v133)
        {
          v225[0] = MEMORY[0x1E4F143A8];
          v225[1] = 3221225472;
          v225[2] = __nw_proxy_config_copy_agent_data_block_invoke_146;
          v225[3] = &unk_1E524BAD0;
          v225[4] = &v234;
          v225[5] = v27;
          nw_array_apply(v133, (uint64_t)v225);
        }
        v224[0] = MEMORY[0x1E4F143A8];
        v224[1] = 3221225472;
        v224[2] = __nw_proxy_config_copy_agent_data_block_invoke_147;
        v224[3] = &unk_1E5240F18;
        v224[4] = &v234;
        v224[5] = v27;
        nw_proxy_config_enumerate_match_domains(v129, v224);
        v223[0] = MEMORY[0x1E4F143A8];
        v223[1] = 3221225472;
        v223[2] = __nw_proxy_config_copy_agent_data_block_invoke_2_148;
        v223[3] = &unk_1E5240F18;
        v223[4] = &v234;
        v223[5] = v27;
        nw_proxy_config_enumerate_excluded_domains(v129, v223);
        v222[0] = MEMORY[0x1E4F143A8];
        v222[1] = 3221225472;
        v222[2] = __nw_proxy_config_copy_agent_data_block_invoke_3_149;
        v222[3] = &unk_1E5240F18;
        v222[4] = &v234;
        v222[5] = v27;
        nw_proxy_config_enumerate_preferred_domains(v129, v222);
        v221[0] = MEMORY[0x1E4F143A8];
        v221[1] = 3221225472;
        v221[2] = __nw_proxy_config_copy_agent_data_block_invoke_4_150;
        v221[3] = &unk_1E5240F18;
        v221[4] = &v234;
        v221[5] = v27;
        nw_proxy_config_enumerate_alternate_agents(v129, v221);
        size_t v134 = v235[3] - (void)buffer;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v135 = (id)gLogObj;
        if (os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)id v265 = 136446466;
          uint64_t v266 = "nw_proxy_config_copy_agent_data";
          __int16 v267 = 2048;
          *(void *)id v268 = v134;
          _os_log_impl(&dword_1830D4000, v135, OS_LOG_TYPE_INFO, "%{public}s Serialized %zu bytes of agent data", v265, 0x16u);
        }

        if (v247[3] || v240[3])
        {
          os_log_type_t v136 = (void *)*MEMORY[0x1E4F143F0];
          __int16 v137 = buffer;
          size_t v138 = v134;
        }
        else
        {
          __int16 v137 = buffer;
          size_t v138 = v134;
          os_log_type_t v136 = 0;
        }
        dispatch_data_t v31 = dispatch_data_create(v137, v138, 0, v136);
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v139 = (id)gLogObj;
        if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)id v265 = 136446210;
          uint64_t v266 = "nw_proxy_config_copy_agent_data";
          _os_log_impl(&dword_1830D4000, v139, OS_LOG_TYPE_ERROR, "%{public}s Failed to serialize protocols", v265, 0xCu);
        }

        dispatch_data_t v31 = 0;
      }

LABEL_215:
      _Block_object_dispose(&v234, 8);
      _Block_object_dispose(&v239, 8);
      _Block_object_dispose(&v246, 8);
      goto LABEL_216;
    }
    int should_proxy_transport_at_level = nw_proxy_config_should_proxy_transport_at_level((NWConcrete_nw_proxy_config *)v5, v2, 0);
    if (should_proxy_transport_at_level == 2) {
      char v109 = 10;
    }
    else {
      char v109 = 2;
    }
    if (should_proxy_transport_at_level == 3) {
      unsigned __int8 v110 = 3;
    }
    else {
      unsigned __int8 v110 = v109;
    }
    unint64_t v111 = v235[3];
    int v112 = strlen(v2);
    if (v111)
    {
      size_t v113 = (v112 + 1);
      if (v111 < v27)
      {
        if (v27 - v111 < v113 + 5)
        {
          nw_endpoint_t v217 = v1;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v114 = (id)gLogObj;
          unint64_t v115 = v27;
          id v116 = v114;
          int v117 = v110;
          *(_DWORD *)id v265 = 136447490;
          uint64_t v266 = "nw_necp_append_tlv";
          __int16 v267 = 2048;
          *(void *)id v268 = v111;
          *(_WORD *)&v268[8] = 2048;
          *(void *)uint64_t v269 = v113 + 5;
          *(_WORD *)&v269[8] = 2048;
          *(void *)uint64_t v270 = v115;
          *(_WORD *)&v270[8] = 1024;
          *(_DWORD *)unint64_t v271 = v110;
          *(_WORD *)&v271[4] = 1024;
          *(_DWORD *)&v271[6] = v113;
          int v118 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v255) = 0;
          if (__nwlog_fault(v118, type, &v255))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v119 = (id)gLogObj;
              os_log_type_t v120 = type[0];
              if (os_log_type_enabled(v119, type[0]))
              {
                *(_DWORD *)id v265 = 136447490;
                uint64_t v266 = "nw_necp_append_tlv";
                __int16 v267 = 2048;
                *(void *)id v268 = v111;
                *(_WORD *)&v268[8] = 2048;
                *(void *)uint64_t v269 = v113 + 5;
                *(_WORD *)&v269[8] = 2048;
                *(void *)uint64_t v270 = v220;
                *(_WORD *)&v270[8] = 1024;
                *(_DWORD *)unint64_t v271 = v117;
                *(_WORD *)&v271[4] = 1024;
                *(_DWORD *)&v271[6] = v113;
                _os_log_impl(&dword_1830D4000, v119, v120, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", v265, 0x36u);
              }
            }
            else if ((_BYTE)v255)
            {
              os_log_t v123 = (char *)__nw_create_backtrace_string();
              __int16 v119 = __nwlog_obj();
              os_log_type_t v124 = type[0];
              BOOL v125 = os_log_type_enabled(v119, type[0]);
              if (v123)
              {
                if (v125)
                {
                  *(_DWORD *)id v265 = 136447746;
                  uint64_t v266 = "nw_necp_append_tlv";
                  __int16 v267 = 2048;
                  *(void *)id v268 = v111;
                  *(_WORD *)&v268[8] = 2048;
                  *(void *)uint64_t v269 = v113 + 5;
                  *(_WORD *)&v269[8] = 2048;
                  *(void *)uint64_t v270 = v220;
                  *(_WORD *)&v270[8] = 1024;
                  *(_DWORD *)unint64_t v271 = v117;
                  *(_WORD *)&v271[4] = 1024;
                  *(_DWORD *)&v271[6] = v113;
                  __int16 v272 = 2082;
                  int v273 = v123;
                  _os_log_impl(&dword_1830D4000, v119, v124, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", v265, 0x40u);
                }

                free(v123);
                unint64_t v27 = (unint64_t)v220;
                if (!v118) {
                  goto LABEL_196;
                }
                goto LABEL_195;
              }
              if (v125)
              {
                *(_DWORD *)id v265 = 136447490;
                uint64_t v266 = "nw_necp_append_tlv";
                __int16 v267 = 2048;
                *(void *)id v268 = v111;
                *(_WORD *)&v268[8] = 2048;
                *(void *)uint64_t v269 = v113 + 5;
                *(_WORD *)&v269[8] = 2048;
                *(void *)uint64_t v270 = v220;
                *(_WORD *)&v270[8] = 1024;
                *(_DWORD *)unint64_t v271 = v117;
                *(_WORD *)&v271[4] = 1024;
                *(_DWORD *)&v271[6] = v113;
                _os_log_impl(&dword_1830D4000, v119, v124, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", v265, 0x36u);
              }
            }
            else
            {
              __int16 v119 = __nwlog_obj();
              os_log_type_t v126 = type[0];
              if (os_log_type_enabled(v119, type[0]))
              {
                *(_DWORD *)id v265 = 136447490;
                uint64_t v266 = "nw_necp_append_tlv";
                __int16 v267 = 2048;
                *(void *)id v268 = v111;
                *(_WORD *)&v268[8] = 2048;
                *(void *)uint64_t v269 = v113 + 5;
                *(_WORD *)&v269[8] = 2048;
                *(void *)uint64_t v270 = v220;
                *(_WORD *)&v270[8] = 1024;
                *(_DWORD *)unint64_t v271 = v117;
                *(_WORD *)&v271[4] = 1024;
                *(_DWORD *)&v271[6] = v113;
                _os_log_impl(&dword_1830D4000, v119, v126, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", v265, 0x36u);
              }
            }
          }
          unint64_t v27 = (unint64_t)v220;
          if (!v118)
          {
LABEL_196:
            uint64_t v122 = 0;
            id v1 = v217;
            goto LABEL_197;
          }
LABEL_195:
          free(v118);
          goto LABEL_196;
        }
        *(unsigned char *)unint64_t v111 = v110;
        *(_DWORD *)(v111 + 1) = v113;
        if (v112 == -1)
        {
LABEL_181:
          uint64_t v122 = v111 + v113 + 5;
LABEL_197:
          v235[3] = v122;
          BOOL v127 = nw_proxy_config_serialize_one_stack(v1, v122, v27);
          v235[3] = v127;
          goto LABEL_198;
        }
        if (v2)
        {
          memcpy((void *)(v111 + 5), v2, v113);
          goto LABEL_181;
        }
        int v218 = v1;
        id v200 = __nwlog_obj();
        int v201 = v110;
        *(_DWORD *)id v265 = 136446722;
        uint64_t v266 = "nw_necp_append_tlv";
        __int16 v267 = 1024;
        *(_DWORD *)id v268 = v110;
        *(_WORD *)&v268[4] = 1024;
        *(_DWORD *)&v268[6] = v113;
        uint64_t v170 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v255) = 0;
        if (__nwlog_fault(v170, type, &v255))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            uint64_t v171 = __nwlog_obj();
            os_log_type_t v202 = type[0];
            if (os_log_type_enabled(v171, type[0]))
            {
              *(_DWORD *)id v265 = 136446722;
              uint64_t v266 = "nw_necp_append_tlv";
              __int16 v267 = 1024;
              *(_DWORD *)id v268 = v201;
              *(_WORD *)&v268[4] = 1024;
              *(_DWORD *)&v268[6] = v113;
              _os_log_impl(&dword_1830D4000, v171, v202, "%{public}s type=%u length=%u but value is NULL", v265, 0x18u);
            }
          }
          else if ((_BYTE)v255)
          {
            unint64_t v209 = (char *)__nw_create_backtrace_string();
            uint64_t v171 = __nwlog_obj();
            os_log_type_t v210 = type[0];
            BOOL v211 = os_log_type_enabled(v171, type[0]);
            if (v209)
            {
              if (v211)
              {
                *(_DWORD *)id v265 = 136446978;
                uint64_t v266 = "nw_necp_append_tlv";
                __int16 v267 = 1024;
                *(_DWORD *)id v268 = v201;
                *(_WORD *)&v268[4] = 1024;
                *(_DWORD *)&v268[6] = v113;
                *(_WORD *)uint64_t v269 = 2082;
                *(void *)&v269[2] = v209;
                _os_log_impl(&dword_1830D4000, v171, v210, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", v265, 0x22u);
              }

              free(v209);
              if (!v170) {
                goto LABEL_383;
              }
              goto LABEL_382;
            }
            if (v211)
            {
              *(_DWORD *)id v265 = 136446722;
              uint64_t v266 = "nw_necp_append_tlv";
              __int16 v267 = 1024;
              *(_DWORD *)id v268 = v201;
              *(_WORD *)&v268[4] = 1024;
              *(_DWORD *)&v268[6] = v113;
              _os_log_impl(&dword_1830D4000, v171, v210, "%{public}s type=%u length=%u but value is NULL, no backtrace", v265, 0x18u);
            }
          }
          else
          {
            uint64_t v171 = __nwlog_obj();
            os_log_type_t v212 = type[0];
            if (os_log_type_enabled(v171, type[0]))
            {
              *(_DWORD *)id v265 = 136446722;
              uint64_t v266 = "nw_necp_append_tlv";
              __int16 v267 = 1024;
              *(_DWORD *)id v268 = v201;
              *(_WORD *)&v268[4] = 1024;
              *(_DWORD *)&v268[6] = v113;
              _os_log_impl(&dword_1830D4000, v171, v212, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", v265, 0x18u);
            }
          }
          goto LABEL_380;
        }
LABEL_381:
        if (!v170)
        {
LABEL_383:
          uint64_t v122 = 0;
          unint64_t v27 = (unint64_t)v220;
          id v1 = v218;
          goto LABEL_197;
        }
LABEL_382:
        free(v170);
        goto LABEL_383;
      }
      int v218 = v1;
      uint64_t v166 = __nwlog_obj();
      unint64_t v167 = v27;
      char v168 = (void *)v166;
      *(_DWORD *)id v265 = 136447234;
      int v169 = v110;
      uint64_t v266 = "nw_necp_append_tlv";
      __int16 v267 = 2048;
      *(void *)id v268 = v111;
      *(_WORD *)&v268[8] = 2048;
      *(void *)uint64_t v269 = v167;
      *(_WORD *)&v269[8] = 1024;
      *(_DWORD *)uint64_t v270 = v110;
      *(_WORD *)&v270[4] = 1024;
      *(_DWORD *)&v270[6] = v113;
      uint64_t v170 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v255) = 0;
      if (!__nwlog_fault(v170, type, &v255)) {
        goto LABEL_381;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v171 = __nwlog_obj();
        os_log_type_t v172 = type[0];
        if (os_log_type_enabled(v171, type[0]))
        {
          *(_DWORD *)id v265 = 136447234;
          uint64_t v266 = "nw_necp_append_tlv";
          __int16 v267 = 2048;
          *(void *)id v268 = v111;
          *(_WORD *)&v268[8] = 2048;
          *(void *)uint64_t v269 = v220;
          *(_WORD *)&v269[8] = 1024;
          *(_DWORD *)uint64_t v270 = v169;
          *(_WORD *)&v270[4] = 1024;
          *(_DWORD *)&v270[6] = v113;
          _os_log_impl(&dword_1830D4000, v171, v172, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", v265, 0x2Cu);
        }
      }
      else if ((_BYTE)v255)
      {
        BOOL v190 = (char *)__nw_create_backtrace_string();
        uint64_t v171 = __nwlog_obj();
        os_log_type_t v191 = type[0];
        BOOL v192 = os_log_type_enabled(v171, type[0]);
        if (v190)
        {
          if (v192)
          {
            *(_DWORD *)id v265 = 136447490;
            uint64_t v266 = "nw_necp_append_tlv";
            __int16 v267 = 2048;
            *(void *)id v268 = v111;
            *(_WORD *)&v268[8] = 2048;
            *(void *)uint64_t v269 = v220;
            *(_WORD *)&v269[8] = 1024;
            *(_DWORD *)uint64_t v270 = v169;
            *(_WORD *)&v270[4] = 1024;
            *(_DWORD *)&v270[6] = v113;
            *(_WORD *)unint64_t v271 = 2082;
            *(void *)&v271[2] = v190;
            _os_log_impl(&dword_1830D4000, v171, v191, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", v265, 0x36u);
          }

          free(v190);
          goto LABEL_381;
        }
        if (v192)
        {
          *(_DWORD *)id v265 = 136447234;
          uint64_t v266 = "nw_necp_append_tlv";
          __int16 v267 = 2048;
          *(void *)id v268 = v111;
          *(_WORD *)&v268[8] = 2048;
          *(void *)uint64_t v269 = v220;
          *(_WORD *)&v269[8] = 1024;
          *(_DWORD *)uint64_t v270 = v169;
          *(_WORD *)&v270[4] = 1024;
          *(_DWORD *)&v270[6] = v113;
          _os_log_impl(&dword_1830D4000, v171, v191, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", v265, 0x2Cu);
        }
      }
      else
      {
        uint64_t v171 = __nwlog_obj();
        os_log_type_t v206 = type[0];
        if (os_log_type_enabled(v171, type[0]))
        {
          *(_DWORD *)id v265 = 136447234;
          uint64_t v266 = "nw_necp_append_tlv";
          __int16 v267 = 2048;
          *(void *)id v268 = v111;
          *(_WORD *)&v268[8] = 2048;
          *(void *)uint64_t v269 = v220;
          *(_WORD *)&v269[8] = 1024;
          *(_DWORD *)uint64_t v270 = v169;
          *(_WORD *)&v270[4] = 1024;
          *(_DWORD *)&v270[6] = v113;
          _os_log_impl(&dword_1830D4000, v171, v206, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", v265, 0x2Cu);
        }
      }
LABEL_380:

      goto LABEL_381;
    }
LABEL_254:
    uint64_t v162 = __nwlog_obj();
    *(_DWORD *)id v265 = 136446210;
    uint64_t v266 = "nw_necp_append_tlv";
    id v163 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v255) = 0;
    if (__nwlog_fault(v163, type, &v255))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        unint64_t v164 = __nwlog_obj();
        os_log_type_t v165 = type[0];
        if (os_log_type_enabled(v164, type[0]))
        {
          *(_DWORD *)id v265 = 136446210;
          uint64_t v266 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v164, v165, "%{public}s called with null tlv_start", v265, 0xCu);
        }
      }
      else if ((_BYTE)v255)
      {
        __int16 v187 = (char *)__nw_create_backtrace_string();
        unint64_t v164 = __nwlog_obj();
        os_log_type_t v188 = type[0];
        BOOL v189 = os_log_type_enabled(v164, type[0]);
        if (v187)
        {
          if (v189)
          {
            *(_DWORD *)id v265 = 136446466;
            uint64_t v266 = "nw_necp_append_tlv";
            __int16 v267 = 2082;
            *(void *)id v268 = v187;
            _os_log_impl(&dword_1830D4000, v164, v188, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", v265, 0x16u);
          }

          free(v187);
          goto LABEL_360;
        }
        if (v189)
        {
          *(_DWORD *)id v265 = 136446210;
          uint64_t v266 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v164, v188, "%{public}s called with null tlv_start, no backtrace", v265, 0xCu);
        }
      }
      else
      {
        unint64_t v164 = __nwlog_obj();
        os_log_type_t v205 = type[0];
        if (os_log_type_enabled(v164, type[0]))
        {
          *(_DWORD *)id v265 = 136446210;
          uint64_t v266 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v164, v205, "%{public}s called with null tlv_start, backtrace limit exceeded", v265, 0xCu);
        }
      }
    }
LABEL_360:
    if (v163) {
      free(v163);
    }
    uint64_t v122 = 0;
    unint64_t v27 = (unint64_t)v220;
    goto LABEL_197;
  }
LABEL_39:
  __int16 v40 = v29;
  BOOL v41 = v40;
  if (!v28)
  {
    nw_endpoint_t v149 = __nwlog_obj();
    *(_DWORD *)id v265 = 136446210;
    uint64_t v266 = "nw_authentication_credential_add_to_tlv";
    nw_endpoint_t v150 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v255) = 0;
    if (__nwlog_fault(v150, type, &v255))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        unint64_t v151 = __nwlog_obj();
        os_log_type_t v152 = type[0];
        if (os_log_type_enabled(v151, type[0]))
        {
          *(_DWORD *)id v265 = 136446210;
          uint64_t v266 = "nw_authentication_credential_add_to_tlv";
          _os_log_impl(&dword_1830D4000, v151, v152, "%{public}s called with null cursor", v265, 0xCu);
        }
      }
      else if ((_BYTE)v255)
      {
        __int16 v181 = (char *)__nw_create_backtrace_string();
        unint64_t v151 = __nwlog_obj();
        os_log_type_t v182 = type[0];
        BOOL v183 = os_log_type_enabled(v151, type[0]);
        if (v181)
        {
          if (v183)
          {
            *(_DWORD *)id v265 = 136446466;
            uint64_t v266 = "nw_authentication_credential_add_to_tlv";
            __int16 v267 = 2082;
            *(void *)id v268 = v181;
            _os_log_impl(&dword_1830D4000, v151, v182, "%{public}s called with null cursor, dumping backtrace:%{public}s", v265, 0x16u);
          }

          free(v181);
          goto LABEL_333;
        }
        if (v183)
        {
          *(_DWORD *)id v265 = 136446210;
          uint64_t v266 = "nw_authentication_credential_add_to_tlv";
          _os_log_impl(&dword_1830D4000, v151, v182, "%{public}s called with null cursor, no backtrace", v265, 0xCu);
        }
      }
      else
      {
        unint64_t v151 = __nwlog_obj();
        os_log_type_t v203 = type[0];
        if (os_log_type_enabled(v151, type[0]))
        {
          *(_DWORD *)id v265 = 136446210;
          uint64_t v266 = "nw_authentication_credential_add_to_tlv";
          _os_log_impl(&dword_1830D4000, v151, v203, "%{public}s called with null cursor, backtrace limit exceeded", v265, 0xCu);
        }
      }
    }
LABEL_333:
    if (v150) {
      free(v150);
    }
    unint64_t v28 = 0;
    goto LABEL_154;
  }
  uint64_t v42 = v40[2];
  if (v42)
  {
    unsigned int v43 = strlen(v42);
    size_t v44 = v41[3];
    if (v44) {
      goto LABEL_42;
    }
LABEL_45:
    unsigned int v45 = 0;
    uint64_t v46 = (char *)v41[5];
    if (v46) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }
  unsigned int v43 = 0;
  size_t v44 = v41[3];
  if (!v44) {
    goto LABEL_45;
  }
LABEL_42:
  unsigned int v45 = strlen(v44);
  uint64_t v46 = (char *)v41[5];
  if (v46)
  {
LABEL_43:
    unsigned int count = xpc_array_get_count(v46);
    goto LABEL_47;
  }
LABEL_46:
  unsigned int count = 0;
LABEL_47:
  int v48 = *((_DWORD *)v41 + 2);
  unsigned int v213 = v43;
  unsigned int v214 = count;
  unsigned int v216 = v45;
  if (v48 != 2)
  {
    if (v48 != 1)
    {
      LODWORD(v56) = 2;
      goto LABEL_94;
    }
    unsigned int v49 = v43 + 1;
    uint64_t v50 = v43 + 3;
    if (v49 < 0xFFFFFFFE)
    {
LABEL_73:
      BOOL v63 = __CFADD__(v50, v45 + 1);
      uint64_t v56 = v50 + v45 + 1;
      if (!v63) {
        goto LABEL_94;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v64 = (id)gLogObj;
      *(_DWORD *)id v265 = 136446978;
      uint64_t v266 = "nw_authentication_credential_add_to_tlv";
      __int16 v267 = 2082;
      *(void *)id v268 = "buffer_size";
      *(_WORD *)&v268[8] = 2048;
      *(void *)uint64_t v269 = v45 + 1;
      *(_WORD *)&v269[8] = 2048;
      *(void *)uint64_t v270 = v56;
      os_log_type_t v65 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v255) = 0;
      if (!__nwlog_fault(v65, type, &v255)) {
        goto LABEL_91;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v66 = (id)gLogObj;
        os_log_type_t v67 = type[0];
        if (os_log_type_enabled(v66, type[0]))
        {
          *(_DWORD *)id v265 = 136446978;
          uint64_t v266 = "nw_authentication_credential_add_to_tlv";
          __int16 v267 = 2082;
          *(void *)id v268 = "buffer_size";
          *(_WORD *)&v268[8] = 2048;
          *(void *)uint64_t v269 = v45 + 1;
          *(_WORD *)&v269[8] = 2048;
          *(void *)uint64_t v270 = v56;
          _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s Overflow: %{public}s, increment %llu, result %llu", v265, 0x2Au);
        }
      }
      else if ((_BYTE)v255)
      {
        __int16 v68 = __nw_create_backtrace_string();
        if (v68)
        {
          os_log_type_t v69 = (char *)v68;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v70 = (id)gLogObj;
          os_log_type_t v71 = type[0];
          if (os_log_type_enabled(v70, type[0]))
          {
            *(_DWORD *)id v265 = 136447234;
            uint64_t v266 = "nw_authentication_credential_add_to_tlv";
            __int16 v267 = 2082;
            *(void *)id v268 = "buffer_size";
            *(_WORD *)&v268[8] = 2048;
            *(void *)uint64_t v269 = v45 + 1;
            *(_WORD *)&v269[8] = 2048;
            *(void *)uint64_t v270 = v56;
            *(_WORD *)&v270[8] = 2082;
            *(void *)unint64_t v271 = v69;
            _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", v265, 0x34u);
          }

          free(v69);
          goto LABEL_91;
        }
        os_log_type_t v66 = __nwlog_obj();
        os_log_type_t v73 = type[0];
        if (os_log_type_enabled(v66, type[0]))
        {
          *(_DWORD *)id v265 = 136446978;
          uint64_t v266 = "nw_authentication_credential_add_to_tlv";
          __int16 v267 = 2082;
          *(void *)id v268 = "buffer_size";
          *(_WORD *)&v268[8] = 2048;
          *(void *)uint64_t v269 = v45 + 1;
          *(_WORD *)&v269[8] = 2048;
          *(void *)uint64_t v270 = v56;
          _os_log_impl(&dword_1830D4000, v66, v73, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", v265, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v66 = (id)gLogObj;
        os_log_type_t v72 = type[0];
        if (os_log_type_enabled(v66, type[0]))
        {
          *(_DWORD *)id v265 = 136446978;
          uint64_t v266 = "nw_authentication_credential_add_to_tlv";
          __int16 v267 = 2082;
          *(void *)id v268 = "buffer_size";
          *(_WORD *)&v268[8] = 2048;
          *(void *)uint64_t v269 = v45 + 1;
          *(_WORD *)&v269[8] = 2048;
          *(void *)uint64_t v270 = v56;
          _os_log_impl(&dword_1830D4000, v66, v72, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", v265, 0x2Au);
        }
      }

LABEL_91:
      unsigned int count = v214;
      if (v65) {
        free(v65);
      }
      LODWORD(v56) = -1;
      unint64_t v27 = (unint64_t)v220;
      goto LABEL_94;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v51 = (id)gLogObj;
    *(_DWORD *)id v265 = 136446978;
    uint64_t v266 = "nw_authentication_credential_add_to_tlv";
    __int16 v267 = 2082;
    *(void *)id v268 = "buffer_size";
    *(_WORD *)&v268[8] = 2048;
    *(void *)uint64_t v269 = v213 + 1;
    *(_WORD *)&v269[8] = 2048;
    *(void *)uint64_t v270 = v50;
    os_log_type_t v52 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v255) = 0;
    if (__nwlog_fault(v52, type, &v255))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_protocol_definition_t v53 = (id)gLogObj;
        os_log_type_t v54 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)id v265 = 136446978;
          uint64_t v266 = "nw_authentication_credential_add_to_tlv";
          __int16 v267 = 2082;
          *(void *)id v268 = "buffer_size";
          *(_WORD *)&v268[8] = 2048;
          *(void *)uint64_t v269 = v213 + 1;
          *(_WORD *)&v269[8] = 2048;
          *(void *)uint64_t v270 = v50;
          _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s Overflow: %{public}s, increment %llu, result %llu", v265, 0x2Au);
        }
      }
      else if ((_BYTE)v255)
      {
        int v57 = __nw_create_backtrace_string();
        if (v57)
        {
          os_log_type_t v58 = (char *)v57;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v59 = (id)gLogObj;
          os_log_type_t v60 = type[0];
          if (os_log_type_enabled(v59, type[0]))
          {
            *(_DWORD *)id v265 = 136447234;
            uint64_t v266 = "nw_authentication_credential_add_to_tlv";
            __int16 v267 = 2082;
            *(void *)id v268 = "buffer_size";
            *(_WORD *)&v268[8] = 2048;
            *(void *)uint64_t v269 = v213 + 1;
            *(_WORD *)&v269[8] = 2048;
            *(void *)uint64_t v270 = v50;
            *(_WORD *)&v270[8] = 2082;
            *(void *)unint64_t v271 = v58;
            _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", v265, 0x34u);
          }

          free(v58);
          goto LABEL_70;
        }
        nw_protocol_definition_t v53 = __nwlog_obj();
        os_log_type_t v62 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)id v265 = 136446978;
          uint64_t v266 = "nw_authentication_credential_add_to_tlv";
          __int16 v267 = 2082;
          *(void *)id v268 = "buffer_size";
          *(_WORD *)&v268[8] = 2048;
          *(void *)uint64_t v269 = v213 + 1;
          *(_WORD *)&v269[8] = 2048;
          *(void *)uint64_t v270 = v50;
          _os_log_impl(&dword_1830D4000, v53, v62, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", v265, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_protocol_definition_t v53 = (id)gLogObj;
        os_log_type_t v61 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)id v265 = 136446978;
          uint64_t v266 = "nw_authentication_credential_add_to_tlv";
          __int16 v267 = 2082;
          *(void *)id v268 = "buffer_size";
          *(_WORD *)&v268[8] = 2048;
          *(void *)uint64_t v269 = v213 + 1;
          *(_WORD *)&v269[8] = 2048;
          *(void *)uint64_t v270 = v50;
          _os_log_impl(&dword_1830D4000, v53, v61, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", v265, 0x2Au);
        }
      }
    }
LABEL_70:
    unsigned int count = v214;
    if (v52) {
      free(v52);
    }
    LODWORD(v50) = -1;
    unint64_t v27 = (unint64_t)v220;
    goto LABEL_73;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v55 = (id)gLogObj;
  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)id v265 = 136446210;
    uint64_t v266 = "nw_authentication_credential_add_to_tlv";
    _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_ERROR, "%{public}s Unsupported credential type identity", v265, 0xCu);
  }

  LODWORD(v56) = 2;
  unint64_t v27 = (unint64_t)v220;
LABEL_94:
  uint64_t v74 = count + 4;
  unint64_t v75 = v74 + v56;
  size_t v76 = v75;
  if (HIDWORD(v75))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v77 = (id)gLogObj;
    *(_DWORD *)id v265 = 136446978;
    uint64_t v266 = "nw_authentication_credential_add_to_tlv";
    __int16 v267 = 2082;
    *(void *)id v268 = "buffer_size";
    *(_WORD *)&v268[8] = 2048;
    *(void *)uint64_t v269 = count + 4;
    *(_WORD *)&v269[8] = 2048;
    *(void *)uint64_t v270 = v75;
    id v78 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v255) = 0;
    if (!__nwlog_fault(v78, type, &v255)) {
      goto LABEL_115;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v79 = (id)gLogObj;
      os_log_type_t v80 = type[0];
      if (os_log_type_enabled(v79, type[0]))
      {
        *(_DWORD *)id v265 = 136446978;
        uint64_t v266 = "nw_authentication_credential_add_to_tlv";
        __int16 v267 = 2082;
        *(void *)id v268 = "buffer_size";
        *(_WORD *)&v268[8] = 2048;
        *(void *)uint64_t v269 = v74;
        *(_WORD *)&v269[8] = 2048;
        *(void *)uint64_t v270 = v75;
        _os_log_impl(&dword_1830D4000, v79, v80, "%{public}s Overflow: %{public}s, increment %llu, result %llu", v265, 0x2Au);
      }
    }
    else
    {
      if ((_BYTE)v255)
      {
        __int16 v84 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v85 = (id)gLogObj;
        os_log_type_t v86 = type[0];
        BOOL v87 = os_log_type_enabled(v85, type[0]);
        if (v84)
        {
          if (v87)
          {
            *(_DWORD *)id v265 = 136447234;
            uint64_t v266 = "nw_authentication_credential_add_to_tlv";
            __int16 v267 = 2082;
            *(void *)id v268 = "buffer_size";
            *(_WORD *)&v268[8] = 2048;
            *(void *)uint64_t v269 = v74;
            *(_WORD *)&v269[8] = 2048;
            *(void *)uint64_t v270 = v75;
            *(_WORD *)&v270[8] = 2082;
            *(void *)unint64_t v271 = v84;
            _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", v265, 0x34u);
          }

          free(v84);
          unint64_t v27 = (unint64_t)v220;
          if (!v78) {
            goto LABEL_117;
          }
          goto LABEL_116;
        }
        if (v87)
        {
          *(_DWORD *)id v265 = 136446978;
          uint64_t v266 = "nw_authentication_credential_add_to_tlv";
          __int16 v267 = 2082;
          *(void *)id v268 = "buffer_size";
          *(_WORD *)&v268[8] = 2048;
          *(void *)uint64_t v269 = v74;
          *(_WORD *)&v269[8] = 2048;
          *(void *)uint64_t v270 = v75;
          _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", v265, 0x2Au);
        }

LABEL_115:
        unint64_t v27 = (unint64_t)v220;
        if (!v78)
        {
LABEL_117:
          size_t v76 = 0xFFFFFFFFLL;
          LODWORD(v75) = -1;
LABEL_118:
          unsigned int count = v214;
          goto LABEL_119;
        }
LABEL_116:
        free(v78);
        goto LABEL_117;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v79 = (id)gLogObj;
      os_log_type_t v88 = type[0];
      if (os_log_type_enabled(v79, type[0]))
      {
        *(_DWORD *)id v265 = 136446978;
        uint64_t v266 = "nw_authentication_credential_add_to_tlv";
        __int16 v267 = 2082;
        *(void *)id v268 = "buffer_size";
        *(_WORD *)&v268[8] = 2048;
        *(void *)uint64_t v269 = v74;
        *(_WORD *)&v269[8] = 2048;
        *(void *)uint64_t v270 = v75;
        _os_log_impl(&dword_1830D4000, v79, v88, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", v265, 0x2Au);
      }
    }

    goto LABEL_115;
  }
  if (!v75)
  {
    uint64_t v81 = __nwlog_obj();
    os_log_type_enabled(v81, OS_LOG_TYPE_ERROR);
    *(_DWORD *)id v265 = 136446210;
    uint64_t v266 = "strict_calloc";
    char v82 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v82);
    if (result) {
      goto LABEL_384;
    }
    free(v82);
    size_t v76 = 0;
    unint64_t v27 = (unint64_t)v220;
    goto LABEL_118;
  }
LABEL_119:
  uint64_t v89 = malloc_type_calloc(1uLL, v76, 0xEAFB8F1AuLL);
  if (v89) {
    goto LABEL_120;
  }
  id v153 = __nwlog_obj();
  os_log_type_enabled(v153, OS_LOG_TYPE_ERROR);
  *(_DWORD *)id v265 = 136446722;
  uint64_t v266 = "strict_calloc";
  __int16 v267 = 2048;
  *(void *)id v268 = 1;
  *(_WORD *)&v268[8] = 2048;
  *(void *)uint64_t v269 = v76;
  id v154 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v154);
  if (!result)
  {
    free(v154);
    unint64_t v27 = (unint64_t)v220;
    unsigned int count = v214;
LABEL_120:
    uint64_t v255 = 0;
    int v256 = &v255;
    uint64_t v257 = 0x2020000000;
    char v90 = *((_DWORD *)v41 + 2);
    os_log_t v258 = v89 + 1;
    *uint64_t v89 = v90;
    char v91 = *((_DWORD *)v41 + 3);
    uint64_t v92 = (unsigned char *)v256[3];
    v256[3] = (uint64_t)(v92 + 1);
    *uint64_t v92 = v91;
    BOOL v93 = v256;
    if (*((_DWORD *)v41 + 2) != 1) {
      goto LABEL_126;
    }
    uint64_t v94 = (unsigned char *)v256[3];
    if (v213)
    {
      memcpy(v94, v41[2], v213 + 1);
      BOOL v95 = v256;
      BOOL v96 = (unsigned char *)(v256[3] + v213 + 1);
      v256[3] = (uint64_t)v96;
      if (v216)
      {
LABEL_123:
        memcpy(v96, v41[3], v216 + 1);
        BOOL v93 = v256;
        v256[3] += v216 + 1;
        goto LABEL_126;
      }
    }
    else
    {
      v256[3] = (uint64_t)(v94 + 1);
      unsigned char *v94 = 0;
      BOOL v95 = v256;
      BOOL v96 = (unsigned char *)v256[3];
      if (v216) {
        goto LABEL_123;
      }
    }
    v95[3] = (uint64_t)(v96 + 1);
    unsigned char *v96 = 0;
    BOOL v93 = v256;
LABEL_126:
    *(_DWORD *)v93[3] = count;
    v256[3] += 4;
    if (count)
    {
      uint64_t v97 = (char *)v41[5];
      *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
      uint64_t v251 = 3221225472;
      int v252 = __nw_authentication_credential_add_to_tlv_block_invoke;
      nw_endpoint_t v253 = &unk_1E52406D0;
      nw_endpoint_t v254 = &v255;
      xpc_array_apply(v97, type);
    }
    if (v28 < v27)
    {
      size_t v98 = v76 + 5;
      if (v27 - v28 >= v76 + 5)
      {
        *(unsigned char *)unint64_t v28 = 16;
        *(_DWORD *)(v28 + 1) = v75;
        if (v75) {
          memcpy((void *)(v28 + 5), v89, v76);
        }
        v28 += v98;
        goto LABEL_153;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v99 = (id)gLogObj;
      *(_DWORD *)id v265 = 136447490;
      uint64_t v266 = "nw_necp_append_tlv";
      __int16 v267 = 2048;
      *(void *)id v268 = v28;
      *(_WORD *)&v268[8] = 2048;
      *(void *)uint64_t v269 = v76 + 5;
      *(_WORD *)&v269[8] = 2048;
      *(void *)uint64_t v270 = v27;
      *(_WORD *)&v270[8] = 1024;
      *(_DWORD *)unint64_t v271 = 16;
      *(_WORD *)&v271[4] = 1024;
      *(_DWORD *)&v271[6] = v75;
      BOOL v100 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v260 = OS_LOG_TYPE_ERROR;
      char v259 = 0;
      if (__nwlog_fault(v100, &v260, &v259))
      {
        if (v260 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          nw_endpoint_t v101 = (id)gLogObj;
          os_log_type_t v102 = v260;
          if (os_log_type_enabled(v101, v260))
          {
            *(_DWORD *)id v265 = 136447490;
            uint64_t v266 = "nw_necp_append_tlv";
            __int16 v267 = 2048;
            *(void *)id v268 = v28;
            *(_WORD *)&v268[8] = 2048;
            *(void *)uint64_t v269 = v76 + 5;
            *(_WORD *)&v269[8] = 2048;
            *(void *)uint64_t v270 = v220;
            *(_WORD *)&v270[8] = 1024;
            *(_DWORD *)unint64_t v271 = 16;
            *(_WORD *)&v271[4] = 1024;
            *(_DWORD *)&v271[6] = v75;
            _os_log_impl(&dword_1830D4000, v101, v102, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", v265, 0x36u);
          }
        }
        else if (v259)
        {
          os_log_type_t v103 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          nw_endpoint_t v101 = (id)gLogObj;
          os_log_type_t v104 = v260;
          BOOL v105 = os_log_type_enabled(v101, v260);
          if (v103)
          {
            if (v105)
            {
              *(_DWORD *)id v265 = 136447746;
              uint64_t v266 = "nw_necp_append_tlv";
              __int16 v267 = 2048;
              *(void *)id v268 = v28;
              *(_WORD *)&v268[8] = 2048;
              *(void *)uint64_t v269 = v98;
              *(_WORD *)&v269[8] = 2048;
              *(void *)uint64_t v270 = v220;
              *(_WORD *)&v270[8] = 1024;
              *(_DWORD *)unint64_t v271 = 16;
              *(_WORD *)&v271[4] = 1024;
              *(_DWORD *)&v271[6] = v75;
              __int16 v272 = 2082;
              int v273 = v103;
              _os_log_impl(&dword_1830D4000, v101, v104, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", v265, 0x40u);
            }

            free(v103);
            if (!v100) {
              goto LABEL_152;
            }
            goto LABEL_151;
          }
          if (v105)
          {
            *(_DWORD *)id v265 = 136447490;
            uint64_t v266 = "nw_necp_append_tlv";
            __int16 v267 = 2048;
            *(void *)id v268 = v28;
            *(_WORD *)&v268[8] = 2048;
            *(void *)uint64_t v269 = v98;
            *(_WORD *)&v269[8] = 2048;
            *(void *)uint64_t v270 = v220;
            *(_WORD *)&v270[8] = 1024;
            *(_DWORD *)unint64_t v271 = 16;
            *(_WORD *)&v271[4] = 1024;
            *(_DWORD *)&v271[6] = v75;
            _os_log_impl(&dword_1830D4000, v101, v104, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", v265, 0x36u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          nw_endpoint_t v101 = (id)gLogObj;
          os_log_type_t v106 = v260;
          if (os_log_type_enabled(v101, v260))
          {
            *(_DWORD *)id v265 = 136447490;
            uint64_t v266 = "nw_necp_append_tlv";
            __int16 v267 = 2048;
            *(void *)id v268 = v28;
            *(_WORD *)&v268[8] = 2048;
            *(void *)uint64_t v269 = v76 + 5;
            *(_WORD *)&v269[8] = 2048;
            *(void *)uint64_t v270 = v220;
            *(_WORD *)&v270[8] = 1024;
            *(_DWORD *)unint64_t v271 = 16;
            *(_WORD *)&v271[4] = 1024;
            *(_DWORD *)&v271[6] = v75;
            _os_log_impl(&dword_1830D4000, v101, v106, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", v265, 0x36u);
          }
        }
        goto LABEL_149;
      }
LABEL_150:
      if (!v100)
      {
LABEL_152:
        unint64_t v28 = 0;
LABEL_153:
        free(v89);
        _Block_object_dispose(&v255, 8);
LABEL_154:

        v235[3] = v28;
        unint64_t v27 = (unint64_t)v220;
        goto LABEL_155;
      }
LABEL_151:
      free(v100);
      goto LABEL_152;
    }
    unint64_t v155 = __nwlog_obj();
    *(_DWORD *)id v265 = 136447234;
    uint64_t v266 = "nw_necp_append_tlv";
    __int16 v267 = 2048;
    *(void *)id v268 = v28;
    *(_WORD *)&v268[8] = 2048;
    *(void *)uint64_t v269 = v27;
    *(_WORD *)&v269[8] = 1024;
    *(_DWORD *)uint64_t v270 = 16;
    *(_WORD *)&v270[4] = 1024;
    *(_DWORD *)&v270[6] = v75;
    BOOL v100 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v260 = OS_LOG_TYPE_ERROR;
    char v259 = 0;
    if (!__nwlog_fault(v100, &v260, &v259)) {
      goto LABEL_150;
    }
    if (v260 == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_t v101 = __nwlog_obj();
      os_log_type_t v156 = v260;
      if (os_log_type_enabled(v101, v260))
      {
        *(_DWORD *)id v265 = 136447234;
        uint64_t v266 = "nw_necp_append_tlv";
        __int16 v267 = 2048;
        *(void *)id v268 = v28;
        *(_WORD *)&v268[8] = 2048;
        *(void *)uint64_t v269 = v220;
        *(_WORD *)&v269[8] = 1024;
        *(_DWORD *)uint64_t v270 = 16;
        *(_WORD *)&v270[4] = 1024;
        *(_DWORD *)&v270[6] = v75;
        _os_log_impl(&dword_1830D4000, v101, v156, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", v265, 0x2Cu);
      }
    }
    else if (v259)
    {
      unint64_t v184 = (char *)__nw_create_backtrace_string();
      nw_endpoint_t v101 = __nwlog_obj();
      os_log_type_t v185 = v260;
      BOOL v186 = os_log_type_enabled(v101, v260);
      if (v184)
      {
        if (v186)
        {
          *(_DWORD *)id v265 = 136447490;
          uint64_t v266 = "nw_necp_append_tlv";
          __int16 v267 = 2048;
          *(void *)id v268 = v28;
          *(_WORD *)&v268[8] = 2048;
          *(void *)uint64_t v269 = v220;
          *(_WORD *)&v269[8] = 1024;
          *(_DWORD *)uint64_t v270 = 16;
          *(_WORD *)&v270[4] = 1024;
          *(_DWORD *)&v270[6] = v75;
          *(_WORD *)unint64_t v271 = 2082;
          *(void *)&v271[2] = v184;
          _os_log_impl(&dword_1830D4000, v101, v185, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", v265, 0x36u);
        }

        free(v184);
        goto LABEL_150;
      }
      if (v186)
      {
        *(_DWORD *)id v265 = 136447234;
        uint64_t v266 = "nw_necp_append_tlv";
        __int16 v267 = 2048;
        *(void *)id v268 = v28;
        *(_WORD *)&v268[8] = 2048;
        *(void *)uint64_t v269 = v220;
        *(_WORD *)&v269[8] = 1024;
        *(_DWORD *)uint64_t v270 = 16;
        *(_WORD *)&v270[4] = 1024;
        *(_DWORD *)&v270[6] = v75;
        _os_log_impl(&dword_1830D4000, v101, v185, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", v265, 0x2Cu);
      }
    }
    else
    {
      nw_endpoint_t v101 = __nwlog_obj();
      os_log_type_t v204 = v260;
      if (os_log_type_enabled(v101, v260))
      {
        *(_DWORD *)id v265 = 136447234;
        uint64_t v266 = "nw_necp_append_tlv";
        __int16 v267 = 2048;
        *(void *)id v268 = v28;
        *(_WORD *)&v268[8] = 2048;
        *(void *)uint64_t v269 = v220;
        *(_WORD *)&v269[8] = 1024;
        *(_DWORD *)uint64_t v270 = 16;
        *(_WORD *)&v270[4] = 1024;
        *(_DWORD *)&v270[6] = v75;
        _os_log_impl(&dword_1830D4000, v101, v204, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", v265, 0x2Cu);
      }
    }
LABEL_149:

    goto LABEL_150;
  }
LABEL_384:
  __break(1u);
  return result;
}

void sub_1839527C8(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x338], 8);

  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x258], 8);
  _Block_object_dispose(&STACK[0x2F0], 8);

  _Unwind_Resume(a1);
}

size_t __nw_proxy_config_copy_agent_data_block_invoke(uint64_t a1, char *__s)
{
  size_t result = strlen(__s);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result + 6;
  return result;
}

size_t __nw_proxy_config_copy_agent_data_block_invoke_2(uint64_t a1, char *__s)
{
  size_t result = strlen(__s);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result + 6;
  return result;
}

size_t __nw_proxy_config_copy_agent_data_block_invoke_3(uint64_t a1, char *__s)
{
  size_t result = strlen(__s);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result + 6;
  return result;
}

uint64_t __nw_proxy_config_copy_agent_data_block_invoke_4(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += 21;
  return result;
}

BOOL nw_proxy_config_serialize_one_stack(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  size_t v6 = v5;
  if (!v5)
  {
    uint64_t v50 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v116 = "nw_proxy_config_serialize_one_stack";
    id v51 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v106) = 0;
    if (__nwlog_fault(v51, type, &v106))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v52 = __nwlog_obj();
        os_log_type_t v53 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          id v116 = "nw_proxy_config_serialize_one_stack";
          _os_log_impl(&dword_1830D4000, v52, v53, "%{public}s called with null protocol_stack", buf, 0xCu);
        }
      }
      else if ((_BYTE)v106)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v52 = __nwlog_obj();
        os_log_type_t v55 = type[0];
        BOOL v56 = os_log_type_enabled(v52, type[0]);
        if (backtrace_string)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            id v116 = "nw_proxy_config_serialize_one_stack";
            __int16 v117 = 2082;
            size_t v118 = (size_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v52, v55, "%{public}s called with null protocol_stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_150;
        }
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          id v116 = "nw_proxy_config_serialize_one_stack";
          _os_log_impl(&dword_1830D4000, v52, v55, "%{public}s called with null protocol_stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v52 = __nwlog_obj();
        os_log_type_t v77 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          id v116 = "nw_proxy_config_serialize_one_stack";
          _os_log_impl(&dword_1830D4000, v52, v77, "%{public}s called with null protocol_stack, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_150:
    if (v51) {
      free(v51);
    }
    uint64_t v48 = 0;
    goto LABEL_69;
  }
  uint64_t v106 = 0;
  BOOL v107 = &v106;
  uint64_t v108 = 0x2020000000;
  uint64_t v109 = a2;
  iterate_block[0] = MEMORY[0x1E4F143A8];
  iterate_block[1] = 3221225472;
  iterate_block[2] = ___ZL35nw_proxy_config_serialize_one_stackPU31objcproto20OS_nw_protocol_stack8NSObjectPhPKh_block_invoke;
  iterate_block[3] = &unk_1E5240EC8;
  iterate_void block[4] = &v106;
  iterate_void block[5] = a3;
  nw_protocol_stack_iterate_application_protocols(v5, iterate_block);
  id v7 = v6;
  id v103 = v7[3];

  uint64_t v8 = v103;
  if (!v103)
  {
LABEL_68:
    uint64_t v48 = v107[3];

    _Block_object_dispose(&v106, 8);
LABEL_69:

    return v48;
  }
  size_t __n = 0;
  __src = (void *)nw_protocol_options_copy_serialized_bytes(v103, (uint64_t)&__n, 0);
  if (!__src || !__n)
  {
    unsigned int v22 = (id *)v103;
    id v23 = v22[1];

    identifier = nw_protocol_definition_get_identifier(v23);
    *(_OWORD *)os_log_type_t type = *(_OWORD *)identifier;
    long long v113 = *((_OWORD *)identifier + 1);
    uint64_t v114 = *((void *)identifier + 4);
    unsigned int v25 = (unsigned char *)v107[3];
    if (v25)
    {
      if (a3)
      {
        if ((unint64_t)v25 >= a3)
        {
          os_log_type_t v73 = __nwlog_obj();
          *(_DWORD *)buf = 136447234;
          id v116 = "nw_necp_append_tlv";
          __int16 v117 = 2048;
          size_t v118 = (size_t)v25;
          __int16 v119 = 2048;
          uint64_t v120 = a3;
          __int16 v121 = 1024;
          *(_DWORD *)uint64_t v122 = 5;
          *(_WORD *)&v122[4] = 1024;
          *(_DWORD *)&v122[6] = 42;
          unint64_t v27 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v111 = OS_LOG_TYPE_ERROR;
          char v110 = 0;
          if (!__nwlog_fault(v27, &v111, &v110)) {
            goto LABEL_49;
          }
          if (v111 == OS_LOG_TYPE_FAULT)
          {
            unint64_t v28 = __nwlog_obj();
            os_log_type_t v74 = v111;
            if (os_log_type_enabled(v28, v111))
            {
              *(_DWORD *)buf = 136447234;
              id v116 = "nw_necp_append_tlv";
              __int16 v117 = 2048;
              size_t v118 = (size_t)v25;
              __int16 v119 = 2048;
              uint64_t v120 = a3;
              __int16 v121 = 1024;
              *(_DWORD *)uint64_t v122 = 5;
              *(_WORD *)&v122[4] = 1024;
              *(_DWORD *)&v122[6] = 42;
              _os_log_impl(&dword_1830D4000, v28, v74, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
            }
          }
          else if (v110)
          {
            uint64_t v89 = (char *)__nw_create_backtrace_string();
            unint64_t v28 = __nwlog_obj();
            os_log_type_t v90 = v111;
            BOOL v91 = os_log_type_enabled(v28, v111);
            if (v89)
            {
              if (v91)
              {
                *(_DWORD *)buf = 136447490;
                id v116 = "nw_necp_append_tlv";
                __int16 v117 = 2048;
                size_t v118 = (size_t)v25;
                __int16 v119 = 2048;
                uint64_t v120 = a3;
                __int16 v121 = 1024;
                *(_DWORD *)uint64_t v122 = 5;
                *(_WORD *)&v122[4] = 1024;
                *(_DWORD *)&v122[6] = 42;
                *(_WORD *)os_log_t v123 = 2082;
                *(void *)&v123[2] = v89;
                _os_log_impl(&dword_1830D4000, v28, v90, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
              }

              free(v89);
              goto LABEL_49;
            }
            if (v91)
            {
              *(_DWORD *)buf = 136447234;
              id v116 = "nw_necp_append_tlv";
              __int16 v117 = 2048;
              size_t v118 = (size_t)v25;
              __int16 v119 = 2048;
              uint64_t v120 = a3;
              __int16 v121 = 1024;
              *(_DWORD *)uint64_t v122 = 5;
              *(_WORD *)&v122[4] = 1024;
              *(_DWORD *)&v122[6] = 42;
              _os_log_impl(&dword_1830D4000, v28, v90, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
            }
          }
          else
          {
            unint64_t v28 = __nwlog_obj();
            os_log_type_t v99 = v111;
            if (os_log_type_enabled(v28, v111))
            {
              *(_DWORD *)buf = 136447234;
              id v116 = "nw_necp_append_tlv";
              __int16 v117 = 2048;
              size_t v118 = (size_t)v25;
              __int16 v119 = 2048;
              uint64_t v120 = a3;
              __int16 v121 = 1024;
              *(_DWORD *)uint64_t v122 = 5;
              *(_WORD *)&v122[4] = 1024;
              *(_DWORD *)&v122[6] = 42;
              _os_log_impl(&dword_1830D4000, v28, v99, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
            }
          }
        }
        else
        {
          if (a3 - (unint64_t)v25 > 0x2E)
          {
            *unsigned int v25 = 5;
            *(_DWORD *)(v25 + 1) = 42;
            *(_OWORD *)(v25 + 5) = *(_OWORD *)type;
            *(_OWORD *)(v25 + 21) = v113;
            *(void *)(v25 + 37) = v114;
            *(_WORD *)(v25 + 45) = 0;
            os_log_type_t v30 = v25 + 47;
            dispatch_data_t v31 = __src;
            goto LABEL_52;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v26 = (id)gLogObj;
          *(_DWORD *)buf = 136447490;
          id v116 = "nw_necp_append_tlv";
          __int16 v117 = 2048;
          size_t v118 = (size_t)v25;
          __int16 v119 = 2048;
          uint64_t v120 = 47;
          __int16 v121 = 2048;
          *(void *)uint64_t v122 = a3;
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)os_log_t v123 = 5;
          *(_WORD *)&v123[4] = 1024;
          *(_DWORD *)&v123[6] = 42;
          unint64_t v27 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v111 = OS_LOG_TYPE_ERROR;
          char v110 = 0;
          if (!__nwlog_fault(v27, &v111, &v110)) {
            goto LABEL_49;
          }
          if (v111 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unint64_t v28 = (id)gLogObj;
            os_log_type_t v29 = v111;
            if (os_log_type_enabled(v28, v111))
            {
              *(_DWORD *)buf = 136447490;
              id v116 = "nw_necp_append_tlv";
              __int16 v117 = 2048;
              size_t v118 = (size_t)v25;
              __int16 v119 = 2048;
              uint64_t v120 = 47;
              __int16 v121 = 2048;
              *(void *)uint64_t v122 = a3;
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)os_log_t v123 = 5;
              *(_WORD *)&v123[4] = 1024;
              *(_DWORD *)&v123[6] = 42;
              _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
            }
          }
          else if (v110)
          {
            BOOL v33 = __nw_create_backtrace_string();
            if (v33)
            {
              os_log_type_t v34 = (char *)v33;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v35 = (id)gLogObj;
              os_log_type_t v36 = v111;
              if (os_log_type_enabled(v35, v111))
              {
                *(_DWORD *)buf = 136447746;
                id v116 = "nw_necp_append_tlv";
                __int16 v117 = 2048;
                size_t v118 = (size_t)v25;
                __int16 v119 = 2048;
                uint64_t v120 = 47;
                __int16 v121 = 2048;
                *(void *)uint64_t v122 = a3;
                *(_WORD *)&v122[8] = 1024;
                *(_DWORD *)os_log_t v123 = 5;
                *(_WORD *)&v123[4] = 1024;
                *(_DWORD *)&v123[6] = 42;
                __int16 v124 = 2082;
                BOOL v125 = v34;
                _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
              }

              free(v34);
              goto LABEL_49;
            }
            unint64_t v28 = __nwlog_obj();
            os_log_type_t v43 = v111;
            if (os_log_type_enabled(v28, v111))
            {
              *(_DWORD *)buf = 136447490;
              id v116 = "nw_necp_append_tlv";
              __int16 v117 = 2048;
              size_t v118 = (size_t)v25;
              __int16 v119 = 2048;
              uint64_t v120 = 47;
              __int16 v121 = 2048;
              *(void *)uint64_t v122 = a3;
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)os_log_t v123 = 5;
              *(_WORD *)&v123[4] = 1024;
              *(_DWORD *)&v123[6] = 42;
              _os_log_impl(&dword_1830D4000, v28, v43, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unint64_t v28 = (id)gLogObj;
            os_log_type_t v41 = v111;
            if (os_log_type_enabled(v28, v111))
            {
              *(_DWORD *)buf = 136447490;
              id v116 = "nw_necp_append_tlv";
              __int16 v117 = 2048;
              size_t v118 = (size_t)v25;
              __int16 v119 = 2048;
              uint64_t v120 = 47;
              __int16 v121 = 2048;
              *(void *)uint64_t v122 = a3;
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)os_log_t v123 = 5;
              *(_WORD *)&v123[4] = 1024;
              *(_DWORD *)&v123[6] = 42;
              _os_log_impl(&dword_1830D4000, v28, v41, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
            }
          }
        }

LABEL_49:
        dispatch_data_t v31 = __src;
        if (v27) {
          free(v27);
        }
        os_log_type_t v30 = 0;
        goto LABEL_52;
      }
      os_log_type_t v69 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      id v116 = "nw_necp_append_tlv";
      os_log_type_t v60 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v111 = OS_LOG_TYPE_ERROR;
      char v110 = 0;
      if (__nwlog_fault(v60, &v111, &v110))
      {
        if (v111 == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v61 = __nwlog_obj();
          os_log_type_t v70 = v111;
          if (os_log_type_enabled(v61, v111))
          {
            *(_DWORD *)buf = 136446210;
            id v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v61, v70, "%{public}s called with null beyond", buf, 0xCu);
          }
LABEL_179:

          goto LABEL_180;
        }
        if (!v110)
        {
          os_log_type_t v61 = __nwlog_obj();
          os_log_type_t v97 = v111;
          if (os_log_type_enabled(v61, v111))
          {
            *(_DWORD *)buf = 136446210;
            id v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v61, v97, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_179;
        }
        id v78 = (char *)__nw_create_backtrace_string();
        os_log_type_t v61 = __nwlog_obj();
        os_log_type_t v85 = v111;
        BOOL v86 = os_log_type_enabled(v61, v111);
        if (!v78)
        {
          if (v86)
          {
            *(_DWORD *)buf = 136446210;
            id v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v61, v85, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
          }
          goto LABEL_179;
        }
        if (v86)
        {
          *(_DWORD *)buf = 136446466;
          id v116 = "nw_necp_append_tlv";
          __int16 v117 = 2082;
          size_t v118 = (size_t)v78;
          _os_log_impl(&dword_1830D4000, v61, v85, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_131;
      }
    }
    else
    {
      BOOL v59 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      id v116 = "nw_necp_append_tlv";
      os_log_type_t v60 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v111 = OS_LOG_TYPE_ERROR;
      char v110 = 0;
      if (__nwlog_fault(v60, &v111, &v110))
      {
        if (v111 == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v61 = __nwlog_obj();
          os_log_type_t v62 = v111;
          if (os_log_type_enabled(v61, v111))
          {
            *(_DWORD *)buf = 136446210;
            id v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v61, v62, "%{public}s called with null tlv_start", buf, 0xCu);
          }
          goto LABEL_179;
        }
        if (!v110)
        {
          os_log_type_t v61 = __nwlog_obj();
          os_log_type_t v95 = v111;
          if (os_log_type_enabled(v61, v111))
          {
            *(_DWORD *)buf = 136446210;
            id v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v61, v95, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_179;
        }
        id v78 = (char *)__nw_create_backtrace_string();
        os_log_type_t v61 = __nwlog_obj();
        os_log_type_t v79 = v111;
        BOOL v80 = os_log_type_enabled(v61, v111);
        if (!v78)
        {
          if (v80)
          {
            *(_DWORD *)buf = 136446210;
            id v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v61, v79, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
          }
          goto LABEL_179;
        }
        if (v80)
        {
          *(_DWORD *)buf = 136446466;
          id v116 = "nw_necp_append_tlv";
          __int16 v117 = 2082;
          size_t v118 = (size_t)v78;
          _os_log_impl(&dword_1830D4000, v61, v79, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_131:

        free(v78);
      }
    }
LABEL_180:
    dispatch_data_t v31 = __src;
    if (v60) {
      free(v60);
    }
    os_log_type_t v30 = 0;
LABEL_52:
    v107[3] = (uint64_t)v30;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v44 = (id)gLogObj;
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      id v116 = "nw_proxy_config_serialize_one_stack";
      __int16 v117 = 2112;
      size_t v118 = (size_t)v23;
      _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_DEBUG, "%{public}s Serialized proxy transport protocol %@", buf, 0x16u);
    }

    if (!v31) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  size_t v9 = __n + 42;
  if (__n == -42)
  {
    int v57 = __nwlog_obj();
    os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    id v116 = "strict_malloc";
    os_log_type_t v58 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v58);
    if (result) {
      goto LABEL_194;
    }
    free(v58);
  }
  uint64_t v10 = malloc_type_malloc(v9, 0xF2B69DE5uLL);
  if (v10) {
    goto LABEL_7;
  }
  BOOL v63 = __nwlog_obj();
  os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  id v116 = "strict_malloc";
  __int16 v117 = 2048;
  size_t v118 = v9;
  id v64 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v64);
  if (!result)
  {
    free(v64);
LABEL_7:
    int v11 = (id *)v103;
    id v101 = v11[1];

    unsigned int v12 = nw_protocol_definition_get_identifier(v101);
    uint64_t v13 = *((void *)v12 + 4);
    long long v14 = *((_OWORD *)v12 + 1);
    *uint64_t v10 = *(_OWORD *)v12;
    v10[1] = v14;
    *((void *)v10 + 4) = v13;
    size_t v15 = __n;
    *((_WORD *)v10 + 20) = __n;
    memcpy((char *)v10 + 42, __src, v15);
    unsigned int v16 = (char *)v107[3];
    if (v16)
    {
      if (a3)
      {
        if ((unint64_t)v16 < a3)
        {
          unint64_t v17 = v9 + 5;
          if (a3 - (unint64_t)v16 >= v17)
          {
            *unsigned int v16 = 5;
            *(_DWORD *)(v16 + 1) = v9;
            if (v9) {
              memcpy(v16 + 5, v10, v9);
            }
            id v32 = &v16[v17];
            goto LABEL_63;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v18 = (id)gLogObj;
          *(_DWORD *)buf = 136447490;
          id v116 = "nw_necp_append_tlv";
          __int16 v117 = 2048;
          size_t v118 = (size_t)v16;
          __int16 v119 = 2048;
          uint64_t v120 = v9 + 5;
          __int16 v121 = 2048;
          *(void *)uint64_t v122 = a3;
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)os_log_t v123 = 5;
          *(_WORD *)&v123[4] = 1024;
          *(_DWORD *)&v123[6] = v9;
          unsigned int v19 = (const char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          os_log_type_t v111 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v19, type, &v111))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              unsigned int v20 = (id)gLogObj;
              os_log_type_t v21 = type[0];
              if (os_log_type_enabled(v20, type[0]))
              {
                *(_DWORD *)buf = 136447490;
                id v116 = "nw_necp_append_tlv";
                __int16 v117 = 2048;
                size_t v118 = (size_t)v16;
                __int16 v119 = 2048;
                uint64_t v120 = v9 + 5;
                __int16 v121 = 2048;
                *(void *)uint64_t v122 = a3;
                *(_WORD *)&v122[8] = 1024;
                *(_DWORD *)os_log_t v123 = 5;
                *(_WORD *)&v123[4] = 1024;
                *(_DWORD *)&v123[6] = v9;
                _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
              }
            }
            else if (v111)
            {
              os_log_type_t v37 = __nw_create_backtrace_string();
              if (v37)
              {
                BOOL v38 = (char *)v37;
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v39 = (id)gLogObj;
                os_log_type_t v40 = type[0];
                if (os_log_type_enabled(v39, type[0]))
                {
                  *(_DWORD *)buf = 136447746;
                  id v116 = "nw_necp_append_tlv";
                  __int16 v117 = 2048;
                  size_t v118 = (size_t)v16;
                  __int16 v119 = 2048;
                  uint64_t v120 = v9 + 5;
                  __int16 v121 = 2048;
                  *(void *)uint64_t v122 = a3;
                  *(_WORD *)&v122[8] = 1024;
                  *(_DWORD *)os_log_t v123 = 5;
                  *(_WORD *)&v123[4] = 1024;
                  *(_DWORD *)&v123[6] = v9;
                  __int16 v124 = 2082;
                  BOOL v125 = v38;
                  _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
                }

                free(v38);
                if (!v19) {
                  goto LABEL_62;
                }
LABEL_60:
                uint64_t v46 = (char *)v19;
LABEL_61:
                free(v46);
                goto LABEL_62;
              }
              unsigned int v20 = __nwlog_obj();
              os_log_type_t v45 = type[0];
              if (os_log_type_enabled(v20, type[0]))
              {
                *(_DWORD *)buf = 136447490;
                id v116 = "nw_necp_append_tlv";
                __int16 v117 = 2048;
                size_t v118 = (size_t)v16;
                __int16 v119 = 2048;
                uint64_t v120 = v9 + 5;
                __int16 v121 = 2048;
                *(void *)uint64_t v122 = a3;
                *(_WORD *)&v122[8] = 1024;
                *(_DWORD *)os_log_t v123 = 5;
                *(_WORD *)&v123[4] = 1024;
                *(_DWORD *)&v123[6] = v9;
                _os_log_impl(&dword_1830D4000, v20, v45, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              unsigned int v20 = (id)gLogObj;
              os_log_type_t v42 = type[0];
              if (os_log_type_enabled(v20, type[0]))
              {
                *(_DWORD *)buf = 136447490;
                id v116 = "nw_necp_append_tlv";
                __int16 v117 = 2048;
                size_t v118 = (size_t)v16;
                __int16 v119 = 2048;
                uint64_t v120 = v9 + 5;
                __int16 v121 = 2048;
                *(void *)uint64_t v122 = a3;
                *(_WORD *)&v122[8] = 1024;
                *(_DWORD *)os_log_t v123 = 5;
                *(_WORD *)&v123[4] = 1024;
                *(_DWORD *)&v123[6] = v9;
                _os_log_impl(&dword_1830D4000, v20, v42, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
              }
            }
            goto LABEL_58;
          }
LABEL_59:
          if (!v19)
          {
LABEL_62:
            id v32 = 0;
LABEL_63:
            v107[3] = (uint64_t)v32;
            free(v10);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v47 = (id)gLogObj;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446466;
              id v116 = "nw_proxy_config_serialize_one_stack";
              __int16 v117 = 2112;
              size_t v118 = (size_t)v101;
              _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s Serialized proxy transport protocol %@", buf, 0x16u);
            }

LABEL_66:
            free(__src);
LABEL_67:
            uint64_t v8 = v103;
            goto LABEL_68;
          }
          goto LABEL_60;
        }
        unint64_t v75 = __nwlog_obj();
        *(_DWORD *)buf = 136447234;
        id v116 = "nw_necp_append_tlv";
        __int16 v117 = 2048;
        size_t v118 = (size_t)v16;
        __int16 v119 = 2048;
        uint64_t v120 = a3;
        __int16 v121 = 1024;
        *(_DWORD *)uint64_t v122 = 5;
        *(_WORD *)&v122[4] = 1024;
        *(_DWORD *)&v122[6] = v9;
        unsigned int v19 = (const char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v111 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v19, type, &v111)) {
          goto LABEL_59;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          unsigned int v20 = __nwlog_obj();
          os_log_type_t v76 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            *(_DWORD *)buf = 136447234;
            id v116 = "nw_necp_append_tlv";
            __int16 v117 = 2048;
            size_t v118 = (size_t)v16;
            __int16 v119 = 2048;
            uint64_t v120 = a3;
            __int16 v121 = 1024;
            *(_DWORD *)uint64_t v122 = 5;
            *(_WORD *)&v122[4] = 1024;
            *(_DWORD *)&v122[6] = v9;
            _os_log_impl(&dword_1830D4000, v20, v76, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
          }
        }
        else if (v111)
        {
          uint64_t v92 = (char *)__nw_create_backtrace_string();
          unsigned int v20 = __nwlog_obj();
          os_log_type_t v93 = type[0];
          BOOL v94 = os_log_type_enabled(v20, type[0]);
          if (v92)
          {
            if (v94)
            {
              *(_DWORD *)buf = 136447490;
              id v116 = "nw_necp_append_tlv";
              __int16 v117 = 2048;
              size_t v118 = (size_t)v16;
              __int16 v119 = 2048;
              uint64_t v120 = a3;
              __int16 v121 = 1024;
              *(_DWORD *)uint64_t v122 = 5;
              *(_WORD *)&v122[4] = 1024;
              *(_DWORD *)&v122[6] = v9;
              *(_WORD *)os_log_t v123 = 2082;
              *(void *)&v123[2] = v92;
              _os_log_impl(&dword_1830D4000, v20, v93, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
            }

            free(v92);
            goto LABEL_59;
          }
          if (v94)
          {
            *(_DWORD *)buf = 136447234;
            id v116 = "nw_necp_append_tlv";
            __int16 v117 = 2048;
            size_t v118 = (size_t)v16;
            __int16 v119 = 2048;
            uint64_t v120 = a3;
            __int16 v121 = 1024;
            *(_DWORD *)uint64_t v122 = 5;
            *(_WORD *)&v122[4] = 1024;
            *(_DWORD *)&v122[6] = v9;
            _os_log_impl(&dword_1830D4000, v20, v93, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
          }
        }
        else
        {
          unsigned int v20 = __nwlog_obj();
          os_log_type_t v100 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            *(_DWORD *)buf = 136447234;
            id v116 = "nw_necp_append_tlv";
            __int16 v117 = 2048;
            size_t v118 = (size_t)v16;
            __int16 v119 = 2048;
            uint64_t v120 = a3;
            __int16 v121 = 1024;
            *(_DWORD *)uint64_t v122 = 5;
            *(_WORD *)&v122[4] = 1024;
            *(_DWORD *)&v122[6] = v9;
            _os_log_impl(&dword_1830D4000, v20, v100, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
          }
        }
LABEL_58:

        goto LABEL_59;
      }
      os_log_type_t v71 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      id v116 = "nw_necp_append_tlv";
      os_log_type_t v66 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v111 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v66, type, &v111))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v67 = __nwlog_obj();
          os_log_type_t v72 = type[0];
          if (os_log_type_enabled(v67, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            id v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v67, v72, "%{public}s called with null beyond", buf, 0xCu);
          }
LABEL_164:

          goto LABEL_186;
        }
        if (v111 == OS_LOG_TYPE_DEFAULT)
        {
          os_log_type_t v67 = __nwlog_obj();
          os_log_type_t v98 = type[0];
          if (os_log_type_enabled(v67, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            id v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v67, v98, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_164;
        }
        uint64_t v81 = (char *)__nw_create_backtrace_string();
        char v82 = __nwlog_obj();
        os_log_type_t v87 = type[0];
        BOOL v88 = os_log_type_enabled(v82, type[0]);
        if (v81)
        {
          if (v88)
          {
            *(_DWORD *)buf = 136446466;
            id v116 = "nw_necp_append_tlv";
            __int16 v117 = 2082;
            size_t v118 = (size_t)v81;
            _os_log_impl(&dword_1830D4000, v82, v87, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
          }
LABEL_136:

          free(v81);
          goto LABEL_186;
        }
        if (v88)
        {
          *(_DWORD *)buf = 136446210;
          id v116 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v82, v87, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
        }
        goto LABEL_185;
      }
    }
    else
    {
      os_log_type_t v65 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      id v116 = "nw_necp_append_tlv";
      os_log_type_t v66 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v111 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v66, type, &v111))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v67 = __nwlog_obj();
          os_log_type_t v68 = type[0];
          if (os_log_type_enabled(v67, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            id v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v67, v68, "%{public}s called with null tlv_start", buf, 0xCu);
          }
          goto LABEL_164;
        }
        if (v111 == OS_LOG_TYPE_DEFAULT)
        {
          os_log_type_t v67 = __nwlog_obj();
          os_log_type_t v96 = type[0];
          if (os_log_type_enabled(v67, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            id v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v67, v96, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_164;
        }
        uint64_t v81 = (char *)__nw_create_backtrace_string();
        char v82 = __nwlog_obj();
        os_log_type_t v83 = type[0];
        BOOL v84 = os_log_type_enabled(v82, type[0]);
        if (v81)
        {
          if (v84)
          {
            *(_DWORD *)buf = 136446466;
            id v116 = "nw_necp_append_tlv";
            __int16 v117 = 2082;
            size_t v118 = (size_t)v81;
            _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
          }
          goto LABEL_136;
        }
        if (v84)
        {
          *(_DWORD *)buf = 136446210;
          id v116 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
LABEL_185:
      }
    }
LABEL_186:
    if (!v66) {
      goto LABEL_62;
    }
    uint64_t v46 = (char *)v66;
    goto LABEL_61;
  }
LABEL_194:
  __break(1u);
  return result;
}

void sub_183954658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_config_copy_agent_data_block_invoke_143(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  size_t v6 = strlen(a2);
  if (!v6 || (int v7 = v6, !strcmp(*(const char **)(a1 + 56), a2)))
  {
    BOOL v19 = 1;
    goto LABEL_41;
  }
  int should_proxy_transport_at_level = nw_proxy_config_should_proxy_transport_at_level(*(NWConcrete_nw_proxy_config **)(a1 + 32), a2, 0);
  if (should_proxy_transport_at_level == 2) {
    char v9 = 10;
  }
  else {
    char v9 = 2;
  }
  if (should_proxy_transport_at_level == 3) {
    unsigned __int8 v10 = 3;
  }
  else {
    unsigned __int8 v10 = v9;
  }
  unint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (!v11)
  {
    id v26 = v5;
    unint64_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v63 = "nw_necp_append_tlv";
    unint64_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (!__nwlog_fault(v28, &type, &v60)) {
      goto LABEL_98;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null tlv_start", buf, 0xCu);
      }
    }
    else if (v60)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v63 = "nw_necp_append_tlv";
          __int16 v64 = 2082;
          *(void *)os_log_type_t v65 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v39, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_98:
        if (!v28)
        {
LABEL_100:
          size_t v20 = 0;
          id v5 = v26;
          goto LABEL_38;
        }
LABEL_99:
        free(v28);
        goto LABEL_100;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v29, v39, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v52 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v29, v52, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_97:

    goto LABEL_98;
  }
  unint64_t v12 = *(void *)(a1 + 64);
  if (!v12)
  {
    id v26 = v5;
    dispatch_data_t v31 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v63 = "nw_necp_append_tlv";
    unint64_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (!__nwlog_fault(v28, &type, &v60)) {
      goto LABEL_98;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null beyond", buf, 0xCu);
      }
    }
    else if (v60)
    {
      os_log_type_t v41 = (char *)__nw_create_backtrace_string();
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v43 = os_log_type_enabled(v29, type);
      if (v41)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v63 = "nw_necp_append_tlv";
          __int16 v64 = 2082;
          *(void *)os_log_type_t v65 = v41;
          _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v41);
        if (!v28) {
          goto LABEL_100;
        }
        goto LABEL_99;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v53 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v29, v53, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_97;
  }
  size_t v13 = (v7 + 1);
  if (v11 >= v12)
  {
    BOOL v33 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    int v34 = v10;
    BOOL v63 = "nw_necp_append_tlv";
    __int16 v64 = 2048;
    *(void *)os_log_type_t v65 = v11;
    *(_WORD *)&v65[8] = 2048;
    *(void *)os_log_type_t v66 = v12;
    *(_WORD *)&v66[8] = 1024;
    *(_DWORD *)os_log_type_t v67 = v10;
    *(_WORD *)&v67[4] = 1024;
    *(_DWORD *)&v67[6] = v13;
    os_log_type_t v35 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (__nwlog_fault(v35, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136447234;
          BOOL v63 = "nw_necp_append_tlv";
          __int16 v64 = 2048;
          *(void *)os_log_type_t v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(void *)os_log_type_t v66 = v12;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)os_log_type_t v67 = v34;
          *(_WORD *)&v67[4] = 1024;
          *(_DWORD *)&v67[6] = v13;
          _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
        }
      }
      else if (v60)
      {
        size_t v44 = (char *)__nw_create_backtrace_string();
        os_log_type_t v36 = __nwlog_obj();
        os_log_type_t v45 = type;
        BOOL v46 = os_log_type_enabled(v36, type);
        if (v44)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136447490;
            BOOL v63 = "nw_necp_append_tlv";
            __int16 v64 = 2048;
            *(void *)os_log_type_t v65 = v11;
            *(_WORD *)&v65[8] = 2048;
            *(void *)os_log_type_t v66 = v12;
            *(_WORD *)&v66[8] = 1024;
            *(_DWORD *)os_log_type_t v67 = v34;
            *(_WORD *)&v67[4] = 1024;
            *(_DWORD *)&v67[6] = v13;
            *(_WORD *)os_log_type_t v68 = 2082;
            *(void *)&v68[2] = v44;
            _os_log_impl(&dword_1830D4000, v36, v45, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
          }

          free(v44);
          goto LABEL_104;
        }
        if (v46)
        {
          *(_DWORD *)buf = 136447234;
          BOOL v63 = "nw_necp_append_tlv";
          __int16 v64 = 2048;
          *(void *)os_log_type_t v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(void *)os_log_type_t v66 = v12;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)os_log_type_t v67 = v34;
          *(_WORD *)&v67[4] = 1024;
          *(_DWORD *)&v67[6] = v13;
          _os_log_impl(&dword_1830D4000, v36, v45, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
        }
      }
      else
      {
        os_log_type_t v36 = __nwlog_obj();
        os_log_type_t v54 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136447234;
          BOOL v63 = "nw_necp_append_tlv";
          __int16 v64 = 2048;
          *(void *)os_log_type_t v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(void *)os_log_type_t v66 = v12;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)os_log_type_t v67 = v34;
          *(_WORD *)&v67[4] = 1024;
          *(_DWORD *)&v67[6] = v13;
          _os_log_impl(&dword_1830D4000, v36, v54, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
        }
      }
    }
LABEL_104:
    if (v35) {
      free(v35);
    }
    size_t v20 = 0;
    goto LABEL_38;
  }
  if (v12 - v11 < v13 + 5)
  {
    id v59 = v5;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    int v15 = v10;
    *(_DWORD *)buf = 136447490;
    BOOL v63 = "nw_necp_append_tlv";
    __int16 v64 = 2048;
    *(void *)os_log_type_t v65 = v11;
    *(_WORD *)&v65[8] = 2048;
    *(void *)os_log_type_t v66 = v13 + 5;
    *(_WORD *)&v66[8] = 2048;
    *(void *)os_log_type_t v67 = v12;
    *(_WORD *)&v67[8] = 1024;
    *(_DWORD *)os_log_type_t v68 = v10;
    *(_WORD *)&v68[4] = 1024;
    *(_DWORD *)&v68[6] = v13;
    unsigned int v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (__nwlog_fault(v16, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v17 = (id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136447490;
          BOOL v63 = "nw_necp_append_tlv";
          __int16 v64 = 2048;
          *(void *)os_log_type_t v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(void *)os_log_type_t v66 = v13 + 5;
          *(_WORD *)&v66[8] = 2048;
          *(void *)os_log_type_t v67 = v12;
          *(_WORD *)&v67[8] = 1024;
          *(_DWORD *)os_log_type_t v68 = v15;
          *(_WORD *)&v68[4] = 1024;
          *(_DWORD *)&v68[6] = v13;
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
        }
      }
      else if (v60)
      {
        os_log_type_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v17 = (id)gLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v17, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136447746;
            BOOL v63 = "nw_necp_append_tlv";
            __int16 v64 = 2048;
            *(void *)os_log_type_t v65 = v11;
            *(_WORD *)&v65[8] = 2048;
            *(void *)os_log_type_t v66 = v13 + 5;
            *(_WORD *)&v66[8] = 2048;
            *(void *)os_log_type_t v67 = v12;
            *(_WORD *)&v67[8] = 1024;
            *(_DWORD *)os_log_type_t v68 = v15;
            *(_WORD *)&v68[4] = 1024;
            *(_DWORD *)&v68[6] = v13;
            __int16 v69 = 2082;
            os_log_type_t v70 = v21;
            _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
          }

          free(v21);
          if (!v16) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136447490;
          BOOL v63 = "nw_necp_append_tlv";
          __int16 v64 = 2048;
          *(void *)os_log_type_t v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(void *)os_log_type_t v66 = v13 + 5;
          *(_WORD *)&v66[8] = 2048;
          *(void *)os_log_type_t v67 = v12;
          *(_WORD *)&v67[8] = 1024;
          *(_DWORD *)os_log_type_t v68 = v15;
          *(_WORD *)&v68[4] = 1024;
          *(_DWORD *)&v68[6] = v13;
          _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v17 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136447490;
          BOOL v63 = "nw_necp_append_tlv";
          __int16 v64 = 2048;
          *(void *)os_log_type_t v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(void *)os_log_type_t v66 = v13 + 5;
          *(_WORD *)&v66[8] = 2048;
          *(void *)os_log_type_t v67 = v12;
          *(_WORD *)&v67[8] = 1024;
          *(_DWORD *)os_log_type_t v68 = v15;
          *(_WORD *)&v68[4] = 1024;
          *(_DWORD *)&v68[6] = v13;
          _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
        }
      }
    }
    if (!v16)
    {
LABEL_37:
      size_t v20 = 0;
      id v5 = v59;
      goto LABEL_38;
    }
LABEL_36:
    free(v16);
    goto LABEL_37;
  }
  *(unsigned char *)unint64_t v11 = v10;
  *(_DWORD *)(v11 + 1) = v13;
  if (v13)
  {
    if (a2)
    {
      memcpy((void *)(v11 + 5), a2, v13);
      goto LABEL_22;
    }
    os_log_type_t v47 = __nwlog_obj();
    int v48 = v10;
    *(_DWORD *)buf = 136446722;
    BOOL v63 = "nw_necp_append_tlv";
    __int16 v64 = 1024;
    *(_DWORD *)os_log_type_t v65 = v10;
    *(_WORD *)&v65[4] = 1024;
    *(_DWORD *)&v65[6] = v13;
    unsigned int v49 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (__nwlog_fault(v49, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v50 = __nwlog_obj();
        os_log_type_t v51 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446722;
          BOOL v63 = "nw_necp_append_tlv";
          __int16 v64 = 1024;
          *(_DWORD *)os_log_type_t v65 = v48;
          *(_WORD *)&v65[4] = 1024;
          *(_DWORD *)&v65[6] = v13;
          _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s type=%u length=%u but value is NULL", buf, 0x18u);
        }
      }
      else if (v60)
      {
        os_log_type_t v55 = (char *)__nw_create_backtrace_string();
        uint64_t v50 = __nwlog_obj();
        os_log_type_t v56 = type;
        BOOL v57 = os_log_type_enabled(v50, type);
        if (v55)
        {
          if (v57)
          {
            *(_DWORD *)buf = 136446978;
            BOOL v63 = "nw_necp_append_tlv";
            __int16 v64 = 1024;
            *(_DWORD *)os_log_type_t v65 = v48;
            *(_WORD *)&v65[4] = 1024;
            *(_DWORD *)&v65[6] = v13;
            *(_WORD *)os_log_type_t v66 = 2082;
            *(void *)&void v66[2] = v55;
            _os_log_impl(&dword_1830D4000, v50, v56, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(v55);
          goto LABEL_113;
        }
        if (v57)
        {
          *(_DWORD *)buf = 136446722;
          BOOL v63 = "nw_necp_append_tlv";
          __int16 v64 = 1024;
          *(_DWORD *)os_log_type_t v65 = v48;
          *(_WORD *)&v65[4] = 1024;
          *(_DWORD *)&v65[6] = v13;
          _os_log_impl(&dword_1830D4000, v50, v56, "%{public}s type=%u length=%u but value is NULL, no backtrace", buf, 0x18u);
        }
      }
      else
      {
        uint64_t v50 = __nwlog_obj();
        os_log_type_t v58 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446722;
          BOOL v63 = "nw_necp_append_tlv";
          __int16 v64 = 1024;
          *(_DWORD *)os_log_type_t v65 = v48;
          *(_WORD *)&v65[4] = 1024;
          *(_DWORD *)&v65[6] = v13;
          _os_log_impl(&dword_1830D4000, v50, v58, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", buf, 0x18u);
        }
      }
    }
LABEL_113:
    if (v49) {
      free(v49);
    }
    size_t v20 = 0;
    goto LABEL_38;
  }
LABEL_22:
  size_t v20 = v11 + v13 + 5;
LABEL_38:
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v20;
  if (*(id *)(a1 + 40) != v5) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = nw_proxy_config_serialize_one_stack(v5, *(void *)(*(void *)(*(void *)(a1 + 48) + 8)+ 24), *(void *)(a1 + 64));
  }
  BOOL v19 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) != 0;
LABEL_41:

  return v19;
}

void sub_183955534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_config_copy_agent_data_block_invoke_2_144(uint64_t a1, int a2, xpc_object_t xstring)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  string_ptr = xpc_string_get_string_ptr(xstring);
  size_t v5 = strlen(string_ptr);
  if (!v5) {
    return 1;
  }
  unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!v6)
  {
    size_t v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "nw_necp_append_tlv";
    os_log_type_t v21 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v21, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null tlv_start", buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (!v44)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v22, v38, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_87;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2082;
        *(void *)unsigned int v49 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_57:

      free(backtrace_string);
    }
LABEL_88:
    if (!v21) {
      goto LABEL_31;
    }
    BOOL v19 = (char *)v21;
    goto LABEL_30;
  }
  unint64_t v7 = *(void *)(a1 + 40);
  if (!v7)
  {
    os_log_type_t v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "nw_necp_append_tlv";
    os_log_type_t v21 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v21, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s called with null beyond", buf, 0xCu);
        }
LABEL_87:

        goto LABEL_88;
      }
      if (!v44)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v22, v39, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_87;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v22, v31, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2082;
        *(void *)unsigned int v49 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v22, v31, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_57;
    }
    goto LABEL_88;
  }
  size_t v8 = (v5 + 1);
  if (v6 >= v7)
  {
    id v26 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    os_log_type_t v47 = "nw_necp_append_tlv";
    __int16 v48 = 2048;
    *(void *)unsigned int v49 = v6;
    *(_WORD *)&v49[8] = 2048;
    *(void *)uint64_t v50 = v7;
    *(_WORD *)&v50[8] = 1024;
    *(_DWORD *)os_log_type_t v51 = 8;
    *(_WORD *)&v51[4] = 1024;
    *(_DWORD *)&v51[6] = v8;
    unsigned __int8 v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v10, &type, &v44)) {
      goto LABEL_28;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2048;
        *(void *)unsigned int v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(void *)uint64_t v50 = v7;
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)os_log_type_t v51 = 8;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
      }
      goto LABEL_27;
    }
    if (!v44)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2048;
        *(void *)unsigned int v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(void *)uint64_t v50 = v7;
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)os_log_type_t v51 = 8;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v40, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
      }
      goto LABEL_27;
    }
    BOOL v33 = (char *)__nw_create_backtrace_string();
    unint64_t v11 = __nwlog_obj();
    os_log_type_t v34 = type;
    BOOL v35 = os_log_type_enabled(v11, type);
    if (!v33)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2048;
        *(void *)unsigned int v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(void *)uint64_t v50 = v7;
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)os_log_type_t v51 = 8;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v34, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
      }
      goto LABEL_27;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136447490;
      os_log_type_t v47 = "nw_necp_append_tlv";
      __int16 v48 = 2048;
      *(void *)unsigned int v49 = v6;
      *(_WORD *)&v49[8] = 2048;
      *(void *)uint64_t v50 = v7;
      *(_WORD *)&v50[8] = 1024;
      *(_DWORD *)os_log_type_t v51 = 8;
      *(_WORD *)&v51[4] = 1024;
      *(_DWORD *)&v51[6] = v8;
      *(_WORD *)os_log_type_t v52 = 2082;
      *(void *)&v52[2] = v33;
      _os_log_impl(&dword_1830D4000, v11, v34, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
    }
    goto LABEL_81;
  }
  if (v7 - v6 < v8 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    os_log_type_t v47 = "nw_necp_append_tlv";
    __int16 v48 = 2048;
    *(void *)unsigned int v49 = v6;
    *(_WORD *)&v49[8] = 2048;
    *(void *)uint64_t v50 = v8 + 5;
    *(_WORD *)&v50[8] = 2048;
    *(void *)os_log_type_t v51 = v7;
    *(_WORD *)&v51[8] = 1024;
    *(_DWORD *)os_log_type_t v52 = 8;
    *(_WORD *)&v52[4] = 1024;
    *(_DWORD *)&v52[6] = v8;
    unsigned __int8 v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v10, &type, &v44)) {
      goto LABEL_28;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v11 = (id)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447490;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2048;
        *(void *)unsigned int v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(void *)uint64_t v50 = v8 + 5;
        *(_WORD *)&v50[8] = 2048;
        *(void *)os_log_type_t v51 = v7;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)os_log_type_t v52 = 8;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
      }
    }
    else if (v44)
    {
      int v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v11 = (id)gLogObj;
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136447746;
          os_log_type_t v47 = "nw_necp_append_tlv";
          __int16 v48 = 2048;
          *(void *)unsigned int v49 = v6;
          *(_WORD *)&v49[8] = 2048;
          *(void *)uint64_t v50 = v8 + 5;
          *(_WORD *)&v50[8] = 2048;
          *(void *)os_log_type_t v51 = v7;
          *(_WORD *)&v51[8] = 1024;
          *(_DWORD *)os_log_type_t v52 = 8;
          *(_WORD *)&v52[4] = 1024;
          *(_DWORD *)&v52[6] = v8;
          __int16 v53 = 2082;
          os_log_type_t v54 = v15;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
        }

        free(v15);
        if (!v10) {
          goto LABEL_31;
        }
LABEL_29:
        BOOL v19 = (char *)v10;
LABEL_30:
        free(v19);
        goto LABEL_31;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136447490;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2048;
        *(void *)unsigned int v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(void *)uint64_t v50 = v8 + 5;
        *(_WORD *)&v50[8] = 2048;
        *(void *)os_log_type_t v51 = v7;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)os_log_type_t v52 = 8;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v11 = (id)gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447490;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2048;
        *(void *)unsigned int v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(void *)uint64_t v50 = v8 + 5;
        *(_WORD *)&v50[8] = 2048;
        *(void *)os_log_type_t v51 = v7;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)os_log_type_t v52 = 8;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
      }
    }
    goto LABEL_27;
  }
  *(unsigned char *)unint64_t v6 = 8;
  *(_DWORD *)(v6 + 1) = v8;
  if (v5 != -1)
  {
    if (string_ptr)
    {
      memcpy((void *)(v6 + 5), string_ptr, v8);
      goto LABEL_15;
    }
    os_log_type_t v36 = __nwlog_obj();
    *(_DWORD *)buf = 136446722;
    os_log_type_t v47 = "nw_necp_append_tlv";
    __int16 v48 = 1024;
    *(_DWORD *)unsigned int v49 = 8;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v8;
    unsigned __int8 v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v10, &type, &v44))
    {
LABEL_28:
      if (!v10)
      {
LABEL_31:
        size_t v14 = 0;
        goto LABEL_32;
      }
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 1024;
        *(_DWORD *)unsigned int v49 = 8;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v37, "%{public}s type=%u length=%u but value is NULL", buf, 0x18u);
      }
LABEL_27:

      goto LABEL_28;
    }
    if (!v44)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 1024;
        *(_DWORD *)unsigned int v49 = 8;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v43, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", buf, 0x18u);
      }
      goto LABEL_27;
    }
    BOOL v33 = (char *)__nw_create_backtrace_string();
    unint64_t v11 = __nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v42 = os_log_type_enabled(v11, type);
    if (!v33)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 1024;
        *(_DWORD *)unsigned int v49 = 8;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v41, "%{public}s type=%u length=%u but value is NULL, no backtrace", buf, 0x18u);
      }
      goto LABEL_27;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446978;
      os_log_type_t v47 = "nw_necp_append_tlv";
      __int16 v48 = 1024;
      *(_DWORD *)unsigned int v49 = 8;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v8;
      *(_WORD *)uint64_t v50 = 2082;
      *(void *)&v50[2] = v33;
      _os_log_impl(&dword_1830D4000, v11, v41, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", buf, 0x22u);
    }
LABEL_81:

    free(v33);
    goto LABEL_28;
  }
LABEL_15:
  size_t v14 = v6 + v8 + 5;
LABEL_32:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v14;
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != 0;
}

BOOL __nw_proxy_config_copy_agent_data_block_invoke_3_145(uint64_t a1, int a2, xpc_object_t xstring)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  string_ptr = xpc_string_get_string_ptr(xstring);
  size_t v5 = strlen(string_ptr);
  if (!v5) {
    return 1;
  }
  unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!v6)
  {
    size_t v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "nw_necp_append_tlv";
    os_log_type_t v21 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v21, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null tlv_start", buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (!v44)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v22, v38, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_87;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2082;
        *(void *)unsigned int v49 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_57:

      free(backtrace_string);
    }
LABEL_88:
    if (!v21) {
      goto LABEL_31;
    }
    BOOL v19 = (char *)v21;
    goto LABEL_30;
  }
  unint64_t v7 = *(void *)(a1 + 40);
  if (!v7)
  {
    os_log_type_t v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "nw_necp_append_tlv";
    os_log_type_t v21 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v21, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s called with null beyond", buf, 0xCu);
        }
LABEL_87:

        goto LABEL_88;
      }
      if (!v44)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v22, v39, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_87;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v22, v31, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2082;
        *(void *)unsigned int v49 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v22, v31, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_57;
    }
    goto LABEL_88;
  }
  size_t v8 = (v5 + 1);
  if (v6 >= v7)
  {
    id v26 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    os_log_type_t v47 = "nw_necp_append_tlv";
    __int16 v48 = 2048;
    *(void *)unsigned int v49 = v6;
    *(_WORD *)&v49[8] = 2048;
    *(void *)uint64_t v50 = v7;
    *(_WORD *)&v50[8] = 1024;
    *(_DWORD *)os_log_type_t v51 = 9;
    *(_WORD *)&v51[4] = 1024;
    *(_DWORD *)&v51[6] = v8;
    unsigned __int8 v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v10, &type, &v44)) {
      goto LABEL_28;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2048;
        *(void *)unsigned int v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(void *)uint64_t v50 = v7;
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)os_log_type_t v51 = 9;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
      }
      goto LABEL_27;
    }
    if (!v44)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2048;
        *(void *)unsigned int v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(void *)uint64_t v50 = v7;
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)os_log_type_t v51 = 9;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v40, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
      }
      goto LABEL_27;
    }
    BOOL v33 = (char *)__nw_create_backtrace_string();
    unint64_t v11 = __nwlog_obj();
    os_log_type_t v34 = type;
    BOOL v35 = os_log_type_enabled(v11, type);
    if (!v33)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2048;
        *(void *)unsigned int v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(void *)uint64_t v50 = v7;
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)os_log_type_t v51 = 9;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v34, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
      }
      goto LABEL_27;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136447490;
      os_log_type_t v47 = "nw_necp_append_tlv";
      __int16 v48 = 2048;
      *(void *)unsigned int v49 = v6;
      *(_WORD *)&v49[8] = 2048;
      *(void *)uint64_t v50 = v7;
      *(_WORD *)&v50[8] = 1024;
      *(_DWORD *)os_log_type_t v51 = 9;
      *(_WORD *)&v51[4] = 1024;
      *(_DWORD *)&v51[6] = v8;
      *(_WORD *)os_log_type_t v52 = 2082;
      *(void *)&v52[2] = v33;
      _os_log_impl(&dword_1830D4000, v11, v34, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
    }
    goto LABEL_81;
  }
  if (v7 - v6 < v8 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    os_log_type_t v47 = "nw_necp_append_tlv";
    __int16 v48 = 2048;
    *(void *)unsigned int v49 = v6;
    *(_WORD *)&v49[8] = 2048;
    *(void *)uint64_t v50 = v8 + 5;
    *(_WORD *)&v50[8] = 2048;
    *(void *)os_log_type_t v51 = v7;
    *(_WORD *)&v51[8] = 1024;
    *(_DWORD *)os_log_type_t v52 = 9;
    *(_WORD *)&v52[4] = 1024;
    *(_DWORD *)&v52[6] = v8;
    unsigned __int8 v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v10, &type, &v44)) {
      goto LABEL_28;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v11 = (id)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447490;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2048;
        *(void *)unsigned int v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(void *)uint64_t v50 = v8 + 5;
        *(_WORD *)&v50[8] = 2048;
        *(void *)os_log_type_t v51 = v7;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)os_log_type_t v52 = 9;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
      }
    }
    else if (v44)
    {
      int v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v11 = (id)gLogObj;
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136447746;
          os_log_type_t v47 = "nw_necp_append_tlv";
          __int16 v48 = 2048;
          *(void *)unsigned int v49 = v6;
          *(_WORD *)&v49[8] = 2048;
          *(void *)uint64_t v50 = v8 + 5;
          *(_WORD *)&v50[8] = 2048;
          *(void *)os_log_type_t v51 = v7;
          *(_WORD *)&v51[8] = 1024;
          *(_DWORD *)os_log_type_t v52 = 9;
          *(_WORD *)&v52[4] = 1024;
          *(_DWORD *)&v52[6] = v8;
          __int16 v53 = 2082;
          os_log_type_t v54 = v15;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
        }

        free(v15);
        if (!v10) {
          goto LABEL_31;
        }
LABEL_29:
        BOOL v19 = (char *)v10;
LABEL_30:
        free(v19);
        goto LABEL_31;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136447490;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2048;
        *(void *)unsigned int v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(void *)uint64_t v50 = v8 + 5;
        *(_WORD *)&v50[8] = 2048;
        *(void *)os_log_type_t v51 = v7;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)os_log_type_t v52 = 9;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v11 = (id)gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447490;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 2048;
        *(void *)unsigned int v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(void *)uint64_t v50 = v8 + 5;
        *(_WORD *)&v50[8] = 2048;
        *(void *)os_log_type_t v51 = v7;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)os_log_type_t v52 = 9;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
      }
    }
    goto LABEL_27;
  }
  *(unsigned char *)unint64_t v6 = 9;
  *(_DWORD *)(v6 + 1) = v8;
  if (v5 != -1)
  {
    if (string_ptr)
    {
      memcpy((void *)(v6 + 5), string_ptr, v8);
      goto LABEL_15;
    }
    os_log_type_t v36 = __nwlog_obj();
    *(_DWORD *)buf = 136446722;
    os_log_type_t v47 = "nw_necp_append_tlv";
    __int16 v48 = 1024;
    *(_DWORD *)unsigned int v49 = 9;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v8;
    unsigned __int8 v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v10, &type, &v44))
    {
LABEL_28:
      if (!v10)
      {
LABEL_31:
        size_t v14 = 0;
        goto LABEL_32;
      }
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 1024;
        *(_DWORD *)unsigned int v49 = 9;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v37, "%{public}s type=%u length=%u but value is NULL", buf, 0x18u);
      }
LABEL_27:

      goto LABEL_28;
    }
    if (!v44)
    {
      unint64_t v11 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 1024;
        *(_DWORD *)unsigned int v49 = 9;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v43, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", buf, 0x18u);
      }
      goto LABEL_27;
    }
    BOOL v33 = (char *)__nw_create_backtrace_string();
    unint64_t v11 = __nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v42 = os_log_type_enabled(v11, type);
    if (!v33)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v47 = "nw_necp_append_tlv";
        __int16 v48 = 1024;
        *(_DWORD *)unsigned int v49 = 9;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v8;
        _os_log_impl(&dword_1830D4000, v11, v41, "%{public}s type=%u length=%u but value is NULL, no backtrace", buf, 0x18u);
      }
      goto LABEL_27;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446978;
      os_log_type_t v47 = "nw_necp_append_tlv";
      __int16 v48 = 1024;
      *(_DWORD *)unsigned int v49 = 9;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v8;
      *(_WORD *)uint64_t v50 = 2082;
      *(void *)&v50[2] = v33;
      _os_log_impl(&dword_1830D4000, v11, v41, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", buf, 0x22u);
    }
LABEL_81:

    free(v33);
    goto LABEL_28;
  }
LABEL_15:
  size_t v14 = v6 + v8 + 5;
LABEL_32:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v14;
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != 0;
}

BOOL __nw_proxy_config_copy_agent_data_block_invoke_146(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = nw_path_evaluator_add_endpoint_to_necp_message(v4, 11, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(void *)(a1 + 40), 0);
  BOOL v6 = v5;
  if (v5)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136446210;
      unsigned __int8 v10 = "nw_proxy_config_copy_agent_data_block_invoke";
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s Failed to serialize resolved endpoint", (uint8_t *)&v9, 0xCu);
    }
  }
  return v6;
}

void sub_183957240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_proxy_config_copy_agent_data_block_invoke_147(uint64_t a1, char *__s)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  int v6 = strlen(__s);
  if (!v5)
  {
    os_log_type_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v44 = "nw_necp_append_tlv";
    os_log_type_t v22 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null tlv_start";
LABEL_75:
          _os_log_impl(&dword_1830D4000, v23, v24, v25, buf, 0xCu);
        }
LABEL_76:

        goto LABEL_77;
      }
      if (!v41)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null tlv_start, backtrace limit exceeded";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null tlv_start, no backtrace";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v31) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446466;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2082;
      *(void *)BOOL v46 = backtrace_string;
      BOOL v32 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
      goto LABEL_51;
    }
LABEL_77:
    if (!v22) {
      goto LABEL_29;
    }
    size_t v20 = (char *)v22;
    goto LABEL_28;
  }
  if (!v4)
  {
    id v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v44 = "nw_necp_append_tlv";
    os_log_type_t v22 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null beyond";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v41)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null beyond, backtrace limit exceeded";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v33 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null beyond, no backtrace";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v33) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446466;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2082;
      *(void *)BOOL v46 = backtrace_string;
      BOOL v32 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
LABEL_51:
      _os_log_impl(&dword_1830D4000, v23, v24, v32, buf, 0x16u);
LABEL_52:

      free(backtrace_string);
      goto LABEL_77;
    }
    goto LABEL_77;
  }
  size_t v7 = (v6 + 1);
  if (v5 >= v4)
  {
    os_log_type_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    char v44 = "nw_necp_append_tlv";
    __int16 v45 = 2048;
    *(void *)BOOL v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(void *)os_log_type_t v47 = v4;
    *(_WORD *)&v47[8] = 1024;
    *(_DWORD *)__int16 v48 = 13;
    *(_WORD *)&v48[4] = 1024;
    *(_DWORD *)&void v48[6] = v7;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41)) {
      goto LABEL_19;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136447234;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)__int16 v48 = 13;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&void v48[6] = v7;
      os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }
    else if (v41)
    {
      size_t v14 = (char *)__nw_create_backtrace_string();
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v34 = os_log_type_enabled(v10, type);
      if (v14)
      {
        if (!v34) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136447490;
        char v44 = "nw_necp_append_tlv";
        __int16 v45 = 2048;
        *(void *)BOOL v46 = v5;
        *(_WORD *)&v46[8] = 2048;
        *(void *)os_log_type_t v47 = v4;
        *(_WORD *)&v47[8] = 1024;
        *(_DWORD *)__int16 v48 = 13;
        *(_WORD *)&v48[4] = 1024;
        *(_DWORD *)&void v48[6] = v7;
        *(_WORD *)unsigned int v49 = 2082;
        *(void *)&v49[2] = v14;
        os_log_type_t v16 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
        BOOL v17 = v10;
        os_log_type_t v18 = v28;
        uint32_t v19 = 54;
LABEL_17:
        _os_log_impl(&dword_1830D4000, v17, v18, v16, buf, v19);
LABEL_18:

        free(v14);
        goto LABEL_19;
      }
      if (!v34) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136447234;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)__int16 v48 = 13;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&void v48[6] = v7;
      os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
    }
    else
    {
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136447234;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)__int16 v48 = 13;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&void v48[6] = v7;
      os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }
    os_log_type_t v38 = v10;
    os_log_type_t v39 = v28;
    uint32_t v40 = 44;
LABEL_87:
    _os_log_impl(&dword_1830D4000, v38, v39, v29, buf, v40);
    goto LABEL_88;
  }
  if (v4 - v5 < v7 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    char v44 = "nw_necp_append_tlv";
    __int16 v45 = 2048;
    *(void *)BOOL v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(void *)os_log_type_t v47 = v7 + 5;
    *(_WORD *)&v47[8] = 2048;
    *(void *)__int16 v48 = v4;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)unsigned int v49 = 13;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v7;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41)) {
      goto LABEL_19;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned __int8 v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136447490;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(void *)__int16 v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)unsigned int v49 = 13;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      os_log_type_t v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
      goto LABEL_25;
    }
    if (!v41)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned __int8 v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136447490;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(void *)__int16 v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)unsigned int v49 = 13;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      os_log_type_t v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_25;
    }
    size_t v14 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned __int8 v10 = (id)gLogObj;
    os_log_type_t v11 = type;
    BOOL v15 = os_log_type_enabled(v10, type);
    if (!v14)
    {
      if (!v15) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136447490;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(void *)__int16 v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)unsigned int v49 = 13;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      os_log_type_t v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0x36u);
LABEL_26:

      if (!v9)
      {
LABEL_29:
        size_t v13 = 0;
        goto LABEL_30;
      }
      goto LABEL_27;
    }
    if (!v15) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 136447746;
    char v44 = "nw_necp_append_tlv";
    __int16 v45 = 2048;
    *(void *)BOOL v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(void *)os_log_type_t v47 = v7 + 5;
    *(_WORD *)&v47[8] = 2048;
    *(void *)__int16 v48 = v4;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)unsigned int v49 = 13;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v7;
    __int16 v50 = 2082;
    os_log_type_t v51 = v14;
    os_log_type_t v16 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s";
    BOOL v17 = v10;
    os_log_type_t v18 = v11;
    uint32_t v19 = 64;
    goto LABEL_17;
  }
  *(unsigned char *)unint64_t v5 = 13;
  *(_DWORD *)(v5 + 1) = v7;
  if (v6 != -1)
  {
    if (__s)
    {
      memcpy((void *)(v5 + 5), __s, v7);
      goto LABEL_12;
    }
    BOOL v35 = __nwlog_obj();
    *(_DWORD *)buf = 136446722;
    char v44 = "nw_necp_append_tlv";
    __int16 v45 = 1024;
    *(_DWORD *)BOOL v46 = 13;
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)&v46[6] = v7;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41))
    {
LABEL_19:
      if (!v9) {
        goto LABEL_29;
      }
LABEL_27:
      size_t v20 = (char *)v9;
LABEL_28:
      free(v20);
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        char v44 = "nw_necp_append_tlv";
        __int16 v45 = 1024;
        *(_DWORD *)BOOL v46 = 13;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        os_log_type_t v29 = "%{public}s type=%u length=%u but value is NULL";
LABEL_86:
        os_log_type_t v38 = v10;
        os_log_type_t v39 = v36;
        uint32_t v40 = 24;
        goto LABEL_87;
      }
    }
    else
    {
      if (v41)
      {
        size_t v14 = (char *)__nw_create_backtrace_string();
        unsigned __int8 v10 = __nwlog_obj();
        os_log_type_t v36 = type;
        BOOL v37 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (!v37) {
            goto LABEL_18;
          }
          *(_DWORD *)buf = 136446978;
          char v44 = "nw_necp_append_tlv";
          __int16 v45 = 1024;
          *(_DWORD *)BOOL v46 = 13;
          *(_WORD *)&v46[4] = 1024;
          *(_DWORD *)&v46[6] = v7;
          *(_WORD *)os_log_type_t v47 = 2082;
          *(void *)&void v47[2] = v14;
          os_log_type_t v16 = "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s";
          BOOL v17 = v10;
          os_log_type_t v18 = v36;
          uint32_t v19 = 34;
          goto LABEL_17;
        }
        if (!v37) {
          goto LABEL_88;
        }
        *(_DWORD *)buf = 136446722;
        char v44 = "nw_necp_append_tlv";
        __int16 v45 = 1024;
        *(_DWORD *)BOOL v46 = 13;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        os_log_type_t v29 = "%{public}s type=%u length=%u but value is NULL, no backtrace";
        goto LABEL_86;
      }
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        char v44 = "nw_necp_append_tlv";
        __int16 v45 = 1024;
        *(_DWORD *)BOOL v46 = 13;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        os_log_type_t v29 = "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded";
        goto LABEL_86;
      }
    }
LABEL_88:

    goto LABEL_19;
  }
LABEL_12:
  size_t v13 = v5 + v7 + 5;
LABEL_30:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v13;
}

void __nw_proxy_config_copy_agent_data_block_invoke_2_148(uint64_t a1, char *__s)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  int v6 = strlen(__s);
  if (!v5)
  {
    os_log_type_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v44 = "nw_necp_append_tlv";
    os_log_type_t v22 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null tlv_start";
LABEL_75:
          _os_log_impl(&dword_1830D4000, v23, v24, v25, buf, 0xCu);
        }
LABEL_76:

        goto LABEL_77;
      }
      if (!v41)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null tlv_start, backtrace limit exceeded";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null tlv_start, no backtrace";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v31) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446466;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2082;
      *(void *)BOOL v46 = backtrace_string;
      BOOL v32 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
      goto LABEL_51;
    }
LABEL_77:
    if (!v22) {
      goto LABEL_29;
    }
    size_t v20 = (char *)v22;
    goto LABEL_28;
  }
  if (!v4)
  {
    id v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v44 = "nw_necp_append_tlv";
    os_log_type_t v22 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null beyond";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v41)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null beyond, backtrace limit exceeded";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v33 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null beyond, no backtrace";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v33) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446466;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2082;
      *(void *)BOOL v46 = backtrace_string;
      BOOL v32 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
LABEL_51:
      _os_log_impl(&dword_1830D4000, v23, v24, v32, buf, 0x16u);
LABEL_52:

      free(backtrace_string);
      goto LABEL_77;
    }
    goto LABEL_77;
  }
  size_t v7 = (v6 + 1);
  if (v5 >= v4)
  {
    os_log_type_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    char v44 = "nw_necp_append_tlv";
    __int16 v45 = 2048;
    *(void *)BOOL v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(void *)os_log_type_t v47 = v4;
    *(_WORD *)&v47[8] = 1024;
    *(_DWORD *)__int16 v48 = 14;
    *(_WORD *)&v48[4] = 1024;
    *(_DWORD *)&void v48[6] = v7;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41)) {
      goto LABEL_19;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136447234;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)__int16 v48 = 14;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&void v48[6] = v7;
      os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }
    else if (v41)
    {
      size_t v14 = (char *)__nw_create_backtrace_string();
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v34 = os_log_type_enabled(v10, type);
      if (v14)
      {
        if (!v34) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136447490;
        char v44 = "nw_necp_append_tlv";
        __int16 v45 = 2048;
        *(void *)BOOL v46 = v5;
        *(_WORD *)&v46[8] = 2048;
        *(void *)os_log_type_t v47 = v4;
        *(_WORD *)&v47[8] = 1024;
        *(_DWORD *)__int16 v48 = 14;
        *(_WORD *)&v48[4] = 1024;
        *(_DWORD *)&void v48[6] = v7;
        *(_WORD *)unsigned int v49 = 2082;
        *(void *)&v49[2] = v14;
        os_log_type_t v16 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
        BOOL v17 = v10;
        os_log_type_t v18 = v28;
        uint32_t v19 = 54;
LABEL_17:
        _os_log_impl(&dword_1830D4000, v17, v18, v16, buf, v19);
LABEL_18:

        free(v14);
        goto LABEL_19;
      }
      if (!v34) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136447234;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)__int16 v48 = 14;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&void v48[6] = v7;
      os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
    }
    else
    {
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136447234;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)__int16 v48 = 14;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&void v48[6] = v7;
      os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }
    os_log_type_t v38 = v10;
    os_log_type_t v39 = v28;
    uint32_t v40 = 44;
LABEL_87:
    _os_log_impl(&dword_1830D4000, v38, v39, v29, buf, v40);
    goto LABEL_88;
  }
  if (v4 - v5 < v7 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    char v44 = "nw_necp_append_tlv";
    __int16 v45 = 2048;
    *(void *)BOOL v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(void *)os_log_type_t v47 = v7 + 5;
    *(_WORD *)&v47[8] = 2048;
    *(void *)__int16 v48 = v4;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)unsigned int v49 = 14;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v7;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41)) {
      goto LABEL_19;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned __int8 v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136447490;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(void *)__int16 v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)unsigned int v49 = 14;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      os_log_type_t v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
      goto LABEL_25;
    }
    if (!v41)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned __int8 v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136447490;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(void *)__int16 v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)unsigned int v49 = 14;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      os_log_type_t v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_25;
    }
    size_t v14 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned __int8 v10 = (id)gLogObj;
    os_log_type_t v11 = type;
    BOOL v15 = os_log_type_enabled(v10, type);
    if (!v14)
    {
      if (!v15) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136447490;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(void *)__int16 v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)unsigned int v49 = 14;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      os_log_type_t v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0x36u);
LABEL_26:

      if (!v9)
      {
LABEL_29:
        size_t v13 = 0;
        goto LABEL_30;
      }
      goto LABEL_27;
    }
    if (!v15) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 136447746;
    char v44 = "nw_necp_append_tlv";
    __int16 v45 = 2048;
    *(void *)BOOL v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(void *)os_log_type_t v47 = v7 + 5;
    *(_WORD *)&v47[8] = 2048;
    *(void *)__int16 v48 = v4;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)unsigned int v49 = 14;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v7;
    __int16 v50 = 2082;
    os_log_type_t v51 = v14;
    os_log_type_t v16 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s";
    BOOL v17 = v10;
    os_log_type_t v18 = v11;
    uint32_t v19 = 64;
    goto LABEL_17;
  }
  *(unsigned char *)unint64_t v5 = 14;
  *(_DWORD *)(v5 + 1) = v7;
  if (v6 != -1)
  {
    if (__s)
    {
      memcpy((void *)(v5 + 5), __s, v7);
      goto LABEL_12;
    }
    BOOL v35 = __nwlog_obj();
    *(_DWORD *)buf = 136446722;
    char v44 = "nw_necp_append_tlv";
    __int16 v45 = 1024;
    *(_DWORD *)BOOL v46 = 14;
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)&v46[6] = v7;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41))
    {
LABEL_19:
      if (!v9) {
        goto LABEL_29;
      }
LABEL_27:
      size_t v20 = (char *)v9;
LABEL_28:
      free(v20);
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        char v44 = "nw_necp_append_tlv";
        __int16 v45 = 1024;
        *(_DWORD *)BOOL v46 = 14;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        os_log_type_t v29 = "%{public}s type=%u length=%u but value is NULL";
LABEL_86:
        os_log_type_t v38 = v10;
        os_log_type_t v39 = v36;
        uint32_t v40 = 24;
        goto LABEL_87;
      }
    }
    else
    {
      if (v41)
      {
        size_t v14 = (char *)__nw_create_backtrace_string();
        unsigned __int8 v10 = __nwlog_obj();
        os_log_type_t v36 = type;
        BOOL v37 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (!v37) {
            goto LABEL_18;
          }
          *(_DWORD *)buf = 136446978;
          char v44 = "nw_necp_append_tlv";
          __int16 v45 = 1024;
          *(_DWORD *)BOOL v46 = 14;
          *(_WORD *)&v46[4] = 1024;
          *(_DWORD *)&v46[6] = v7;
          *(_WORD *)os_log_type_t v47 = 2082;
          *(void *)&void v47[2] = v14;
          os_log_type_t v16 = "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s";
          BOOL v17 = v10;
          os_log_type_t v18 = v36;
          uint32_t v19 = 34;
          goto LABEL_17;
        }
        if (!v37) {
          goto LABEL_88;
        }
        *(_DWORD *)buf = 136446722;
        char v44 = "nw_necp_append_tlv";
        __int16 v45 = 1024;
        *(_DWORD *)BOOL v46 = 14;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        os_log_type_t v29 = "%{public}s type=%u length=%u but value is NULL, no backtrace";
        goto LABEL_86;
      }
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        char v44 = "nw_necp_append_tlv";
        __int16 v45 = 1024;
        *(_DWORD *)BOOL v46 = 14;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        os_log_type_t v29 = "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded";
        goto LABEL_86;
      }
    }
LABEL_88:

    goto LABEL_19;
  }
LABEL_12:
  size_t v13 = v5 + v7 + 5;
LABEL_30:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v13;
}

void __nw_proxy_config_copy_agent_data_block_invoke_3_149(uint64_t a1, char *__s)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  int v6 = strlen(__s);
  if (!v5)
  {
    os_log_type_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v44 = "nw_necp_append_tlv";
    os_log_type_t v22 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null tlv_start";
LABEL_75:
          _os_log_impl(&dword_1830D4000, v23, v24, v25, buf, 0xCu);
        }
LABEL_76:

        goto LABEL_77;
      }
      if (!v41)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null tlv_start, backtrace limit exceeded";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null tlv_start, no backtrace";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v31) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446466;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2082;
      *(void *)BOOL v46 = backtrace_string;
      BOOL v32 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
      goto LABEL_51;
    }
LABEL_77:
    if (!v22) {
      goto LABEL_29;
    }
    size_t v20 = (char *)v22;
    goto LABEL_28;
  }
  if (!v4)
  {
    id v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v44 = "nw_necp_append_tlv";
    os_log_type_t v22 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null beyond";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v41)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null beyond, backtrace limit exceeded";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v33 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          char v44 = "nw_necp_append_tlv";
          os_log_type_t v25 = "%{public}s called with null beyond, no backtrace";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v33) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446466;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2082;
      *(void *)BOOL v46 = backtrace_string;
      BOOL v32 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
LABEL_51:
      _os_log_impl(&dword_1830D4000, v23, v24, v32, buf, 0x16u);
LABEL_52:

      free(backtrace_string);
      goto LABEL_77;
    }
    goto LABEL_77;
  }
  size_t v7 = (v6 + 1);
  if (v5 >= v4)
  {
    os_log_type_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    char v44 = "nw_necp_append_tlv";
    __int16 v45 = 2048;
    *(void *)BOOL v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(void *)os_log_type_t v47 = v4;
    *(_WORD *)&v47[8] = 1024;
    *(_DWORD *)__int16 v48 = 18;
    *(_WORD *)&v48[4] = 1024;
    *(_DWORD *)&void v48[6] = v7;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41)) {
      goto LABEL_19;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136447234;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)__int16 v48 = 18;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&void v48[6] = v7;
      os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }
    else if (v41)
    {
      size_t v14 = (char *)__nw_create_backtrace_string();
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v34 = os_log_type_enabled(v10, type);
      if (v14)
      {
        if (!v34) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136447490;
        char v44 = "nw_necp_append_tlv";
        __int16 v45 = 2048;
        *(void *)BOOL v46 = v5;
        *(_WORD *)&v46[8] = 2048;
        *(void *)os_log_type_t v47 = v4;
        *(_WORD *)&v47[8] = 1024;
        *(_DWORD *)__int16 v48 = 18;
        *(_WORD *)&v48[4] = 1024;
        *(_DWORD *)&void v48[6] = v7;
        *(_WORD *)unsigned int v49 = 2082;
        *(void *)&v49[2] = v14;
        os_log_type_t v16 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
        BOOL v17 = v10;
        os_log_type_t v18 = v28;
        uint32_t v19 = 54;
LABEL_17:
        _os_log_impl(&dword_1830D4000, v17, v18, v16, buf, v19);
LABEL_18:

        free(v14);
        goto LABEL_19;
      }
      if (!v34) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136447234;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)__int16 v48 = 18;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&void v48[6] = v7;
      os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
    }
    else
    {
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136447234;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)__int16 v48 = 18;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&void v48[6] = v7;
      os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }
    os_log_type_t v38 = v10;
    os_log_type_t v39 = v28;
    uint32_t v40 = 44;
LABEL_87:
    _os_log_impl(&dword_1830D4000, v38, v39, v29, buf, v40);
    goto LABEL_88;
  }
  if (v4 - v5 < v7 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    char v44 = "nw_necp_append_tlv";
    __int16 v45 = 2048;
    *(void *)BOOL v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(void *)os_log_type_t v47 = v7 + 5;
    *(_WORD *)&v47[8] = 2048;
    *(void *)__int16 v48 = v4;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)unsigned int v49 = 18;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v7;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41)) {
      goto LABEL_19;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned __int8 v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136447490;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(void *)__int16 v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)unsigned int v49 = 18;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      os_log_type_t v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
      goto LABEL_25;
    }
    if (!v41)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned __int8 v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136447490;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(void *)__int16 v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)unsigned int v49 = 18;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      os_log_type_t v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_25;
    }
    size_t v14 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned __int8 v10 = (id)gLogObj;
    os_log_type_t v11 = type;
    BOOL v15 = os_log_type_enabled(v10, type);
    if (!v14)
    {
      if (!v15) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136447490;
      char v44 = "nw_necp_append_tlv";
      __int16 v45 = 2048;
      *(void *)BOOL v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(void *)os_log_type_t v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(void *)__int16 v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)unsigned int v49 = 18;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      os_log_type_t v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0x36u);
LABEL_26:

      if (!v9)
      {
LABEL_29:
        size_t v13 = 0;
        goto LABEL_30;
      }
      goto LABEL_27;
    }
    if (!v15) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 136447746;
    char v44 = "nw_necp_append_tlv";
    __int16 v45 = 2048;
    *(void *)BOOL v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(void *)os_log_type_t v47 = v7 + 5;
    *(_WORD *)&v47[8] = 2048;
    *(void *)__int16 v48 = v4;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)unsigned int v49 = 18;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v7;
    __int16 v50 = 2082;
    os_log_type_t v51 = v14;
    os_log_type_t v16 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s";
    BOOL v17 = v10;
    os_log_type_t v18 = v11;
    uint32_t v19 = 64;
    goto LABEL_17;
  }
  *(unsigned char *)unint64_t v5 = 18;
  *(_DWORD *)(v5 + 1) = v7;
  if (v6 != -1)
  {
    if (__s)
    {
      memcpy((void *)(v5 + 5), __s, v7);
      goto LABEL_12;
    }
    BOOL v35 = __nwlog_obj();
    *(_DWORD *)buf = 136446722;
    char v44 = "nw_necp_append_tlv";
    __int16 v45 = 1024;
    *(_DWORD *)BOOL v46 = 18;
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)&v46[6] = v7;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41))
    {
LABEL_19:
      if (!v9) {
        goto LABEL_29;
      }
LABEL_27:
      size_t v20 = (char *)v9;
LABEL_28:
      free(v20);
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        char v44 = "nw_necp_append_tlv";
        __int16 v45 = 1024;
        *(_DWORD *)BOOL v46 = 18;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        os_log_type_t v29 = "%{public}s type=%u length=%u but value is NULL";
LABEL_86:
        os_log_type_t v38 = v10;
        os_log_type_t v39 = v36;
        uint32_t v40 = 24;
        goto LABEL_87;
      }
    }
    else
    {
      if (v41)
      {
        size_t v14 = (char *)__nw_create_backtrace_string();
        unsigned __int8 v10 = __nwlog_obj();
        os_log_type_t v36 = type;
        BOOL v37 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (!v37) {
            goto LABEL_18;
          }
          *(_DWORD *)buf = 136446978;
          char v44 = "nw_necp_append_tlv";
          __int16 v45 = 1024;
          *(_DWORD *)BOOL v46 = 18;
          *(_WORD *)&v46[4] = 1024;
          *(_DWORD *)&v46[6] = v7;
          *(_WORD *)os_log_type_t v47 = 2082;
          *(void *)&void v47[2] = v14;
          os_log_type_t v16 = "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s";
          BOOL v17 = v10;
          os_log_type_t v18 = v36;
          uint32_t v19 = 34;
          goto LABEL_17;
        }
        if (!v37) {
          goto LABEL_88;
        }
        *(_DWORD *)buf = 136446722;
        char v44 = "nw_necp_append_tlv";
        __int16 v45 = 1024;
        *(_DWORD *)BOOL v46 = 18;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        os_log_type_t v29 = "%{public}s type=%u length=%u but value is NULL, no backtrace";
        goto LABEL_86;
      }
      unsigned __int8 v10 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        char v44 = "nw_necp_append_tlv";
        __int16 v45 = 1024;
        *(_DWORD *)BOOL v46 = 18;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        os_log_type_t v29 = "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded";
        goto LABEL_86;
      }
    }
LABEL_88:

    goto LABEL_19;
  }
LABEL_12:
  size_t v13 = v5 + v7 + 5;
LABEL_30:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v13;
}

void __nw_proxy_config_copy_agent_data_block_invoke_4_150(uint64_t a1, _OWORD *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!v3)
  {
    BOOL v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v35 = "nw_necp_append_tlv";
    int v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v6, &type, &v32)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v35 = "nw_necp_append_tlv";
      uint32_t v19 = "%{public}s called with null tlv_start";
      goto LABEL_71;
    }
    if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v7 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v23 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v23) {
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136446466;
        BOOL v35 = "nw_necp_append_tlv";
        __int16 v36 = 2082;
        *(void *)BOOL v37 = backtrace_string;
        size_t v13 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
        goto LABEL_48;
      }
      if (!v23) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v35 = "nw_necp_append_tlv";
      uint32_t v19 = "%{public}s called with null tlv_start, no backtrace";
    }
    else
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v35 = "nw_necp_append_tlv";
      uint32_t v19 = "%{public}s called with null tlv_start, backtrace limit exceeded";
    }
LABEL_71:
    os_log_type_t v29 = v7;
    os_log_type_t v30 = v18;
    uint32_t v31 = 12;
    goto LABEL_80;
  }
  unint64_t v4 = *(void *)(a1 + 40);
  if (!v4)
  {
    size_t v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v35 = "nw_necp_append_tlv";
    int v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v6, &type, &v32)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v35 = "nw_necp_append_tlv";
      uint32_t v19 = "%{public}s called with null beyond";
      goto LABEL_71;
    }
    if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v7 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v24 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v24) {
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136446466;
        BOOL v35 = "nw_necp_append_tlv";
        __int16 v36 = 2082;
        *(void *)BOOL v37 = backtrace_string;
        size_t v13 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
LABEL_48:
        size_t v14 = v7;
        os_log_type_t v15 = v18;
        uint32_t v16 = 22;
LABEL_15:
        _os_log_impl(&dword_1830D4000, v14, v15, v13, buf, v16);
LABEL_16:

        free(backtrace_string);
        goto LABEL_17;
      }
      if (!v24) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v35 = "nw_necp_append_tlv";
      uint32_t v19 = "%{public}s called with null beyond, no backtrace";
    }
    else
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v35 = "nw_necp_append_tlv";
      uint32_t v19 = "%{public}s called with null beyond, backtrace limit exceeded";
    }
    goto LABEL_71;
  }
  if (v3 >= v4)
  {
    os_log_type_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    BOOL v35 = "nw_necp_append_tlv";
    __int16 v36 = 2048;
    *(void *)BOOL v37 = v3;
    *(_WORD *)&v37[8] = 2048;
    *(void *)os_log_type_t v38 = v4;
    *(_WORD *)&v38[8] = 1024;
    *(_DWORD *)os_log_type_t v39 = 17;
    *(_WORD *)&void v39[4] = 1024;
    *(_DWORD *)&v39[6] = 16;
    int v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v6, &type, &v32)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136447234;
      BOOL v35 = "nw_necp_append_tlv";
      __int16 v36 = 2048;
      *(void *)BOOL v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(void *)os_log_type_t v38 = v4;
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)os_log_type_t v39 = 17;
      *(_WORD *)&void v39[4] = 1024;
      *(_DWORD *)&v39[6] = 16;
      uint32_t v19 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v7 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v27 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v27) {
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136447490;
        BOOL v35 = "nw_necp_append_tlv";
        __int16 v36 = 2048;
        *(void *)BOOL v37 = v3;
        *(_WORD *)&v37[8] = 2048;
        *(void *)os_log_type_t v38 = v4;
        *(_WORD *)&v38[8] = 1024;
        *(_DWORD *)os_log_type_t v39 = 17;
        *(_WORD *)&void v39[4] = 1024;
        *(_DWORD *)&v39[6] = 16;
        *(_WORD *)uint32_t v40 = 2082;
        *(void *)&v40[2] = backtrace_string;
        size_t v13 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
        size_t v14 = v7;
        os_log_type_t v15 = v22;
        uint32_t v16 = 54;
        goto LABEL_15;
      }
      if (!v27) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136447234;
      BOOL v35 = "nw_necp_append_tlv";
      __int16 v36 = 2048;
      *(void *)BOOL v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(void *)os_log_type_t v38 = v4;
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)os_log_type_t v39 = 17;
      *(_WORD *)&void v39[4] = 1024;
      *(_DWORD *)&v39[6] = 16;
      uint32_t v19 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
    }
    else
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136447234;
      BOOL v35 = "nw_necp_append_tlv";
      __int16 v36 = 2048;
      *(void *)BOOL v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(void *)os_log_type_t v38 = v4;
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)os_log_type_t v39 = 17;
      *(_WORD *)&void v39[4] = 1024;
      *(_DWORD *)&v39[6] = 16;
      uint32_t v19 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }
    os_log_type_t v29 = v7;
    os_log_type_t v30 = v22;
    uint32_t v31 = 44;
LABEL_80:
    _os_log_impl(&dword_1830D4000, v29, v30, v19, buf, v31);
    goto LABEL_81;
  }
  if (v4 - v3 <= 0x14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    BOOL v35 = "nw_necp_append_tlv";
    __int16 v36 = 2048;
    *(void *)BOOL v37 = v3;
    *(_WORD *)&v37[8] = 2048;
    *(void *)os_log_type_t v38 = 21;
    *(_WORD *)&v38[8] = 2048;
    *(void *)os_log_type_t v39 = v4;
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)uint32_t v40 = 17;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = 16;
    int v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v6, &type, &v32)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v7 = (id)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136447490;
      BOOL v35 = "nw_necp_append_tlv";
      __int16 v36 = 2048;
      *(void *)BOOL v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(void *)os_log_type_t v38 = 21;
      *(_WORD *)&v38[8] = 2048;
      *(void *)os_log_type_t v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)uint32_t v40 = 17;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      int v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
      goto LABEL_25;
    }
    if (!v32)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v7 = (id)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136447490;
      BOOL v35 = "nw_necp_append_tlv";
      __int16 v36 = 2048;
      *(void *)BOOL v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(void *)os_log_type_t v38 = 21;
      *(_WORD *)&v38[8] = 2048;
      *(void *)os_log_type_t v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)uint32_t v40 = 17;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      int v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_25;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v7 = (id)gLogObj;
    os_log_type_t v8 = type;
    BOOL v12 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (!v12) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136447490;
      BOOL v35 = "nw_necp_append_tlv";
      __int16 v36 = 2048;
      *(void *)BOOL v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(void *)os_log_type_t v38 = 21;
      *(_WORD *)&v38[8] = 2048;
      *(void *)os_log_type_t v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)uint32_t v40 = 17;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      int v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0x36u);
LABEL_26:

      if (!v6) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    if (!v12) {
      goto LABEL_16;
    }
    *(_DWORD *)buf = 136447746;
    BOOL v35 = "nw_necp_append_tlv";
    __int16 v36 = 2048;
    *(void *)BOOL v37 = v3;
    *(_WORD *)&v37[8] = 2048;
    *(void *)os_log_type_t v38 = 21;
    *(_WORD *)&v38[8] = 2048;
    *(void *)os_log_type_t v39 = v4;
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)uint32_t v40 = 17;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = 16;
    __int16 v41 = 2082;
    BOOL v42 = backtrace_string;
    size_t v13 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s";
    size_t v14 = v7;
    os_log_type_t v15 = v8;
    uint32_t v16 = 64;
    goto LABEL_15;
  }
  *(unsigned char *)unint64_t v3 = 17;
  *(_DWORD *)(v3 + 1) = 16;
  if (!a2)
  {
    os_log_type_t v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446722;
    BOOL v35 = "nw_necp_append_tlv";
    __int16 v36 = 1024;
    *(_DWORD *)BOOL v37 = 17;
    *(_WORD *)&v37[4] = 1024;
    *(_DWORD *)&v37[6] = 16;
    int v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v6, &type, &v32)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v35 = "nw_necp_append_tlv";
        __int16 v36 = 1024;
        *(_DWORD *)BOOL v37 = 17;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = 16;
        uint32_t v19 = "%{public}s type=%u length=%u but value is NULL";
LABEL_79:
        os_log_type_t v29 = v7;
        os_log_type_t v30 = v26;
        uint32_t v31 = 24;
        goto LABEL_80;
      }
    }
    else
    {
      if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        size_t v7 = __nwlog_obj();
        os_log_type_t v26 = type;
        BOOL v28 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (!v28) {
            goto LABEL_16;
          }
          *(_DWORD *)buf = 136446978;
          BOOL v35 = "nw_necp_append_tlv";
          __int16 v36 = 1024;
          *(_DWORD *)BOOL v37 = 17;
          *(_WORD *)&v37[4] = 1024;
          *(_DWORD *)&v37[6] = 16;
          *(_WORD *)os_log_type_t v38 = 2082;
          *(void *)&v38[2] = backtrace_string;
          size_t v13 = "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s";
          size_t v14 = v7;
          os_log_type_t v15 = v26;
          uint32_t v16 = 34;
          goto LABEL_15;
        }
        if (!v28) {
          goto LABEL_81;
        }
        *(_DWORD *)buf = 136446722;
        BOOL v35 = "nw_necp_append_tlv";
        __int16 v36 = 1024;
        *(_DWORD *)BOOL v37 = 17;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = 16;
        uint32_t v19 = "%{public}s type=%u length=%u but value is NULL, no backtrace";
        goto LABEL_79;
      }
      size_t v7 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v35 = "nw_necp_append_tlv";
        __int16 v36 = 1024;
        *(_DWORD *)BOOL v37 = 17;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = 16;
        uint32_t v19 = "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded";
        goto LABEL_79;
      }
    }
LABEL_81:

LABEL_17:
    if (!v6)
    {
LABEL_19:
      unint64_t v10 = 0;
      goto LABEL_20;
    }
LABEL_18:
    free(v6);
    goto LABEL_19;
  }
  *(_OWORD *)(v3 + 5) = *a2;
  unint64_t v10 = v3 + 21;
LABEL_20:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v10;
}

void ___ZL35nw_proxy_config_serialize_one_stackPU31objcproto20OS_nw_protocol_stack8NSObjectPhPKh_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  size_t __n = 0;
  nw_protocol_options_t options = a2;
  unint64_t v3 = (void *)nw_protocol_options_copy_serialized_bytes(options, (uint64_t)&__n, 0);
  os_log_type_t v85 = v3;
  if (!v3 || !__n)
  {
    nw_protocol_definition_t v17 = nw_protocol_options_copy_definition(options);
    identifier = nw_protocol_definition_get_identifier(v17);
    *(_OWORD *)os_log_type_t type = *(_OWORD *)identifier;
    long long v93 = *((_OWORD *)identifier + 1);
    uint64_t v94 = *((void *)identifier + 4);
    size_t v19 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v19)
    {
      unint64_t v20 = *(void *)(a1 + 40);
      if (v20)
      {
        if (v19 < v20)
        {
          if (v20 - v19 > 0x2E)
          {
            *(unsigned char *)size_t v19 = 4;
            *(_DWORD *)(v19 + 1) = 42;
            *(_OWORD *)(v19 + 5) = *(_OWORD *)type;
            *(_OWORD *)(v19 + 21) = v93;
            *(void *)(v19 + 37) = v94;
            *(_WORD *)(v19 + 45) = 0;
            size_t v25 = v19 + 47;
            goto LABEL_51;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v21 = (id)gLogObj;
          *(_DWORD *)buf = 136447490;
          os_log_type_t v96 = "nw_necp_append_tlv";
          __int16 v97 = 2048;
          size_t v98 = v19;
          __int16 v99 = 2048;
          uint64_t v100 = 47;
          __int16 v101 = 2048;
          *(void *)os_log_type_t v102 = v20;
          *(_WORD *)&v102[8] = 1024;
          *(_DWORD *)id v103 = 4;
          *(_WORD *)&v103[4] = 1024;
          *(_DWORD *)&v103[6] = 42;
          os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v91 = OS_LOG_TYPE_ERROR;
          char v90 = 0;
          if (__nwlog_fault(v22, &v91, &v90))
          {
            if (v91 == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v23 = (id)gLogObj;
              os_log_type_t v24 = v91;
              if (os_log_type_enabled(v23, v91))
              {
                *(_DWORD *)buf = 136447490;
                os_log_type_t v96 = "nw_necp_append_tlv";
                __int16 v97 = 2048;
                size_t v98 = v19;
                __int16 v99 = 2048;
                uint64_t v100 = 47;
                __int16 v101 = 2048;
                *(void *)os_log_type_t v102 = v20;
                *(_WORD *)&v102[8] = 1024;
                *(_DWORD *)id v103 = 4;
                *(_WORD *)&v103[4] = 1024;
                *(_DWORD *)&v103[6] = 42;
                _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
              }
            }
            else if (v90)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v23 = (id)gLogObj;
              os_log_type_t v28 = v91;
              BOOL v29 = os_log_type_enabled(v23, v91);
              if (backtrace_string)
              {
                if (v29)
                {
                  *(_DWORD *)buf = 136447746;
                  os_log_type_t v96 = "nw_necp_append_tlv";
                  __int16 v97 = 2048;
                  size_t v98 = v19;
                  __int16 v99 = 2048;
                  uint64_t v100 = 47;
                  __int16 v101 = 2048;
                  *(void *)os_log_type_t v102 = v20;
                  *(_WORD *)&v102[8] = 1024;
                  *(_DWORD *)id v103 = 4;
                  *(_WORD *)&v103[4] = 1024;
                  *(_DWORD *)&v103[6] = 42;
                  __int16 v104 = 2082;
                  BOOL v105 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
                }

                free(backtrace_string);
                if (!v22) {
                  goto LABEL_50;
                }
                goto LABEL_49;
              }
              if (v29)
              {
                *(_DWORD *)buf = 136447490;
                os_log_type_t v96 = "nw_necp_append_tlv";
                __int16 v97 = 2048;
                size_t v98 = v19;
                __int16 v99 = 2048;
                uint64_t v100 = 47;
                __int16 v101 = 2048;
                *(void *)os_log_type_t v102 = v20;
                *(_WORD *)&v102[8] = 1024;
                *(_DWORD *)id v103 = 4;
                *(_WORD *)&v103[4] = 1024;
                *(_DWORD *)&v103[6] = 42;
                _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v23 = (id)gLogObj;
              os_log_type_t v33 = v91;
              if (os_log_type_enabled(v23, v91))
              {
                *(_DWORD *)buf = 136447490;
                os_log_type_t v96 = "nw_necp_append_tlv";
                __int16 v97 = 2048;
                size_t v98 = v19;
                __int16 v99 = 2048;
                uint64_t v100 = 47;
                __int16 v101 = 2048;
                *(void *)os_log_type_t v102 = v20;
                *(_WORD *)&v102[8] = 1024;
                *(_DWORD *)id v103 = 4;
                *(_WORD *)&v103[4] = 1024;
                *(_DWORD *)&v103[6] = 42;
                _os_log_impl(&dword_1830D4000, v23, v33, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
              }
            }
            goto LABEL_47;
          }
LABEL_48:
          if (!v22)
          {
LABEL_50:
            size_t v25 = 0;
            goto LABEL_51;
          }
LABEL_49:
          free(v22);
          goto LABEL_50;
        }
        BOOL v57 = __nwlog_obj();
        *(_DWORD *)buf = 136447234;
        os_log_type_t v96 = "nw_necp_append_tlv";
        __int16 v97 = 2048;
        size_t v98 = v19;
        __int16 v99 = 2048;
        uint64_t v100 = v20;
        __int16 v101 = 1024;
        *(_DWORD *)os_log_type_t v102 = 4;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = 42;
        os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v91 = OS_LOG_TYPE_ERROR;
        char v90 = 0;
        if (!__nwlog_fault(v22, &v91, &v90)) {
          goto LABEL_48;
        }
        if (v91 == OS_LOG_TYPE_FAULT)
        {
          BOOL v23 = __nwlog_obj();
          os_log_type_t v58 = v91;
          if (os_log_type_enabled(v23, v91))
          {
            *(_DWORD *)buf = 136447234;
            os_log_type_t v96 = "nw_necp_append_tlv";
            __int16 v97 = 2048;
            size_t v98 = v19;
            __int16 v99 = 2048;
            uint64_t v100 = v20;
            __int16 v101 = 1024;
            *(_DWORD *)os_log_type_t v102 = 4;
            *(_WORD *)&v102[4] = 1024;
            *(_DWORD *)&v102[6] = 42;
            _os_log_impl(&dword_1830D4000, v23, v58, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
          }
        }
        else if (v90)
        {
          os_log_type_t v72 = (char *)__nw_create_backtrace_string();
          BOOL v23 = __nwlog_obj();
          os_log_type_t v73 = v91;
          BOOL v74 = os_log_type_enabled(v23, v91);
          if (v72)
          {
            if (v74)
            {
              *(_DWORD *)buf = 136447490;
              os_log_type_t v96 = "nw_necp_append_tlv";
              __int16 v97 = 2048;
              size_t v98 = v19;
              __int16 v99 = 2048;
              uint64_t v100 = v20;
              __int16 v101 = 1024;
              *(_DWORD *)os_log_type_t v102 = 4;
              *(_WORD *)&v102[4] = 1024;
              *(_DWORD *)&v102[6] = 42;
              *(_WORD *)id v103 = 2082;
              *(void *)&v103[2] = v72;
              _os_log_impl(&dword_1830D4000, v23, v73, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
            }

            free(v72);
            goto LABEL_48;
          }
          if (v74)
          {
            *(_DWORD *)buf = 136447234;
            os_log_type_t v96 = "nw_necp_append_tlv";
            __int16 v97 = 2048;
            size_t v98 = v19;
            __int16 v99 = 2048;
            uint64_t v100 = v20;
            __int16 v101 = 1024;
            *(_DWORD *)os_log_type_t v102 = 4;
            *(_WORD *)&v102[4] = 1024;
            *(_DWORD *)&v102[6] = 42;
            _os_log_impl(&dword_1830D4000, v23, v73, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
          }
        }
        else
        {
          BOOL v23 = __nwlog_obj();
          os_log_type_t v82 = v91;
          if (os_log_type_enabled(v23, v91))
          {
            *(_DWORD *)buf = 136447234;
            os_log_type_t v96 = "nw_necp_append_tlv";
            __int16 v97 = 2048;
            size_t v98 = v19;
            __int16 v99 = 2048;
            uint64_t v100 = v20;
            __int16 v101 = 1024;
            *(_DWORD *)os_log_type_t v102 = 4;
            *(_WORD *)&v102[4] = 1024;
            *(_DWORD *)&v102[6] = 42;
            _os_log_impl(&dword_1830D4000, v23, v82, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
          }
        }
LABEL_47:

        goto LABEL_48;
      }
      __int16 v53 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v96 = "nw_necp_append_tlv";
      char v44 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v91 = OS_LOG_TYPE_ERROR;
      char v90 = 0;
      if (__nwlog_fault(v44, &v91, &v90))
      {
        if (v91 == OS_LOG_TYPE_FAULT)
        {
          __int16 v45 = __nwlog_obj();
          os_log_type_t v54 = v91;
          if (os_log_type_enabled(v45, v91))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v96 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v45, v54, "%{public}s called with null beyond", buf, 0xCu);
          }
        }
        else if (v90)
        {
          os_log_type_t v67 = (char *)__nw_create_backtrace_string();
          __int16 v45 = __nwlog_obj();
          os_log_type_t v68 = v91;
          BOOL v69 = os_log_type_enabled(v45, v91);
          if (v67)
          {
            if (v69)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v96 = "nw_necp_append_tlv";
              __int16 v97 = 2082;
              size_t v98 = (size_t)v67;
              _os_log_impl(&dword_1830D4000, v45, v68, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v67);
            if (!v44) {
              goto LABEL_166;
            }
            goto LABEL_165;
          }
          if (v69)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v96 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v45, v68, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __int16 v45 = __nwlog_obj();
          os_log_type_t v80 = v91;
          if (os_log_type_enabled(v45, v91))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v96 = "nw_necp_append_tlv";
            _os_log_impl(&dword_1830D4000, v45, v80, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_163;
      }
LABEL_164:
      if (!v44)
      {
LABEL_166:
        size_t v25 = 0;
LABEL_51:
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v25;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v35 = (id)gLogObj;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v96 = "nw_proxy_config_serialize_one_stack_block_invoke";
          __int16 v97 = 2112;
          size_t v98 = (size_t)v17;
          _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s Serialized proxy protocol %@", buf, 0x16u);
        }

        if (!v3) {
          goto LABEL_66;
        }
        goto LABEL_65;
      }
LABEL_165:
      free(v44);
      goto LABEL_166;
    }
    uint64_t v43 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v96 = "nw_necp_append_tlv";
    char v44 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v91 = OS_LOG_TYPE_ERROR;
    char v90 = 0;
    if (!__nwlog_fault(v44, &v91, &v90)) {
      goto LABEL_164;
    }
    if (v91 == OS_LOG_TYPE_FAULT)
    {
      __int16 v45 = __nwlog_obj();
      os_log_type_t v46 = v91;
      if (os_log_type_enabled(v45, v91))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v96 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s called with null tlv_start", buf, 0xCu);
      }
    }
    else if (v90)
    {
      os_log_type_t v61 = (char *)__nw_create_backtrace_string();
      __int16 v45 = __nwlog_obj();
      os_log_type_t v62 = v91;
      BOOL v63 = os_log_type_enabled(v45, v91);
      if (v61)
      {
        if (v63)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v96 = "nw_necp_append_tlv";
          __int16 v97 = 2082;
          size_t v98 = (size_t)v61;
          _os_log_impl(&dword_1830D4000, v45, v62, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v61);
        goto LABEL_164;
      }
      if (v63)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v96 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v45, v62, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v45 = __nwlog_obj();
      os_log_type_t v78 = v91;
      if (os_log_type_enabled(v45, v91))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v96 = "nw_necp_append_tlv";
        _os_log_impl(&dword_1830D4000, v45, v78, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_163:

    goto LABEL_164;
  }
  size_t v4 = __n + 42;
  if (__n == -42)
  {
    __int16 v41 = __nwlog_obj();
    os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v96 = "strict_malloc";
    BOOL v42 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v42)) {
      goto LABEL_178;
    }
    free(v42);
  }
  id v5 = malloc_type_malloc(v4, 0xF2B69DE5uLL);
  if (v5) {
    goto LABEL_5;
  }
  os_log_type_t v47 = __nwlog_obj();
  os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  os_log_type_t v96 = "strict_malloc";
  __int16 v97 = 2048;
  size_t v98 = v4;
  __int16 v48 = (void *)_os_log_send_and_compose_impl();

  if (__nwlog_abort((uint64_t)v48))
  {
LABEL_178:
    __break(1u);
    return;
  }
  free(v48);
LABEL_5:
  nw_protocol_definition_t v84 = nw_protocol_options_copy_definition(options);
  int v6 = nw_protocol_definition_get_identifier(v84);
  uint64_t v7 = *((void *)v6 + 4);
  long long v8 = *((_OWORD *)v6 + 1);
  *id v5 = *(_OWORD *)v6;
  v5[1] = v8;
  *((void *)v5 + 4) = v7;
  size_t v9 = __n;
  *((_WORD *)v5 + 20) = __n;
  memcpy((char *)v5 + 42, v3, v9);
  size_t v10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!v10)
  {
    unsigned int v49 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v96 = "nw_necp_append_tlv";
    __int16 v50 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v91 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v50, type, &v91))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v51 = __nwlog_obj();
        os_log_type_t v52 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v96 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s called with null tlv_start", buf, 0xCu);
        }
        goto LABEL_169;
      }
      if (v91 == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v51 = __nwlog_obj();
        os_log_type_t v79 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v96 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v51, v79, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_169;
      }
      __int16 v64 = (char *)__nw_create_backtrace_string();
      os_log_type_t v51 = __nwlog_obj();
      os_log_type_t v65 = type[0];
      BOOL v66 = os_log_type_enabled(v51, type[0]);
      if (!v64)
      {
        if (v66)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v96 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v51, v65, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
        goto LABEL_169;
      }
      if (v66)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v96 = "nw_necp_append_tlv";
        __int16 v97 = 2082;
        size_t v98 = (size_t)v64;
        _os_log_impl(&dword_1830D4000, v51, v65, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_126:

      free(v64);
    }
LABEL_170:
    if (!v50) {
      goto LABEL_61;
    }
    __int16 v36 = (char *)v50;
    goto LABEL_60;
  }
  unint64_t v11 = *(void *)(a1 + 40);
  if (!v11)
  {
    uint64_t v55 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v96 = "nw_necp_append_tlv";
    __int16 v50 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v91 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v50, type, &v91))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v51 = __nwlog_obj();
        os_log_type_t v56 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v96 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v51, v56, "%{public}s called with null beyond", buf, 0xCu);
        }
LABEL_169:

        goto LABEL_170;
      }
      if (v91 == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v51 = __nwlog_obj();
        os_log_type_t v81 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v96 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v51, v81, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_169;
      }
      __int16 v64 = (char *)__nw_create_backtrace_string();
      os_log_type_t v51 = __nwlog_obj();
      os_log_type_t v70 = type[0];
      BOOL v71 = os_log_type_enabled(v51, type[0]);
      if (!v64)
      {
        if (v71)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v96 = "nw_necp_append_tlv";
          _os_log_impl(&dword_1830D4000, v51, v70, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
        }
        goto LABEL_169;
      }
      if (v71)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v96 = "nw_necp_append_tlv";
        __int16 v97 = 2082;
        size_t v98 = (size_t)v64;
        _os_log_impl(&dword_1830D4000, v51, v70, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_126;
    }
    goto LABEL_170;
  }
  if (v10 >= v11)
  {
    id v59 = __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    os_log_type_t v96 = "nw_necp_append_tlv";
    __int16 v97 = 2048;
    size_t v98 = v10;
    __int16 v99 = 2048;
    uint64_t v100 = v11;
    __int16 v101 = 1024;
    *(_DWORD *)os_log_type_t v102 = 4;
    *(_WORD *)&v102[4] = 1024;
    *(_DWORD *)&v102[6] = v4;
    size_t v14 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v91 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v14, type, &v91)) {
      goto LABEL_58;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v60 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v96 = "nw_necp_append_tlv";
        __int16 v97 = 2048;
        size_t v98 = v10;
        __int16 v99 = 2048;
        uint64_t v100 = v11;
        __int16 v101 = 1024;
        *(_DWORD *)os_log_type_t v102 = 4;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = v4;
        _os_log_impl(&dword_1830D4000, v15, v60, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
      }
    }
    else if (v91)
    {
      unint64_t v75 = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v76 = type[0];
      BOOL v77 = os_log_type_enabled(v15, type[0]);
      if (v75)
      {
        if (v77)
        {
          *(_DWORD *)buf = 136447490;
          os_log_type_t v96 = "nw_necp_append_tlv";
          __int16 v97 = 2048;
          size_t v98 = v10;
          __int16 v99 = 2048;
          uint64_t v100 = v11;
          __int16 v101 = 1024;
          *(_DWORD *)os_log_type_t v102 = 4;
          *(_WORD *)&v102[4] = 1024;
          *(_DWORD *)&v102[6] = v4;
          *(_WORD *)id v103 = 2082;
          *(void *)&v103[2] = v75;
          _os_log_impl(&dword_1830D4000, v15, v76, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
        }

        free(v75);
        goto LABEL_58;
      }
      if (v77)
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v96 = "nw_necp_append_tlv";
        __int16 v97 = 2048;
        size_t v98 = v10;
        __int16 v99 = 2048;
        uint64_t v100 = v11;
        __int16 v101 = 1024;
        *(_DWORD *)os_log_type_t v102 = 4;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = v4;
        _os_log_impl(&dword_1830D4000, v15, v76, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
      }
    }
    else
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v83 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136447234;
        os_log_type_t v96 = "nw_necp_append_tlv";
        __int16 v97 = 2048;
        size_t v98 = v10;
        __int16 v99 = 2048;
        uint64_t v100 = v11;
        __int16 v101 = 1024;
        *(_DWORD *)os_log_type_t v102 = 4;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = v4;
        _os_log_impl(&dword_1830D4000, v15, v83, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
      }
    }
LABEL_57:

    goto LABEL_58;
  }
  unint64_t v12 = v4 + 5;
  if (v11 - v10 >= v12)
  {
    *(unsigned char *)size_t v10 = 4;
    *(_DWORD *)(v10 + 1) = v4;
    if (v4) {
      memcpy((void *)(v10 + 5), v5, v4);
    }
    size_t v26 = v10 + v12;
    goto LABEL_62;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v13 = (id)gLogObj;
  *(_DWORD *)buf = 136447490;
  os_log_type_t v96 = "nw_necp_append_tlv";
  __int16 v97 = 2048;
  size_t v98 = v10;
  __int16 v99 = 2048;
  uint64_t v100 = v4 + 5;
  __int16 v101 = 2048;
  *(void *)os_log_type_t v102 = v11;
  *(_WORD *)&v102[8] = 1024;
  *(_DWORD *)id v103 = 4;
  *(_WORD *)&v103[4] = 1024;
  *(_DWORD *)&v103[6] = v4;
  size_t v14 = (const char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v91 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v14, type, &v91))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = (id)gLogObj;
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136447490;
        os_log_type_t v96 = "nw_necp_append_tlv";
        __int16 v97 = 2048;
        size_t v98 = v10;
        __int16 v99 = 2048;
        uint64_t v100 = v4 + 5;
        __int16 v101 = 2048;
        *(void *)os_log_type_t v102 = v11;
        *(_WORD *)&v102[8] = 1024;
        *(_DWORD *)id v103 = 4;
        *(_WORD *)&v103[4] = 1024;
        *(_DWORD *)&v103[6] = v4;
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
      }
    }
    else if (v91)
    {
      os_log_type_t v30 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = (id)gLogObj;
      os_log_type_t v31 = type[0];
      BOOL v32 = os_log_type_enabled(v15, type[0]);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136447746;
          os_log_type_t v96 = "nw_necp_append_tlv";
          __int16 v97 = 2048;
          size_t v98 = v10;
          __int16 v99 = 2048;
          uint64_t v100 = v4 + 5;
          __int16 v101 = 2048;
          *(void *)os_log_type_t v102 = v11;
          *(_WORD *)&v102[8] = 1024;
          *(_DWORD *)id v103 = 4;
          *(_WORD *)&v103[4] = 1024;
          *(_DWORD *)&v103[6] = v4;
          __int16 v104 = 2082;
          BOOL v105 = v30;
          _os_log_impl(&dword_1830D4000, v15, v31, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
        }

        free(v30);
        if (!v14) {
          goto LABEL_61;
        }
        goto LABEL_59;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136447490;
        os_log_type_t v96 = "nw_necp_append_tlv";
        __int16 v97 = 2048;
        size_t v98 = v10;
        __int16 v99 = 2048;
        uint64_t v100 = v4 + 5;
        __int16 v101 = 2048;
        *(void *)os_log_type_t v102 = v11;
        *(_WORD *)&v102[8] = 1024;
        *(_DWORD *)id v103 = 4;
        *(_WORD *)&v103[4] = 1024;
        *(_DWORD *)&v103[6] = v4;
        _os_log_impl(&dword_1830D4000, v15, v31, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = (id)gLogObj;
      os_log_type_t v34 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136447490;
        os_log_type_t v96 = "nw_necp_append_tlv";
        __int16 v97 = 2048;
        size_t v98 = v10;
        __int16 v99 = 2048;
        uint64_t v100 = v4 + 5;
        __int16 v101 = 2048;
        *(void *)os_log_type_t v102 = v11;
        *(_WORD *)&v102[8] = 1024;
        *(_DWORD *)id v103 = 4;
        *(_WORD *)&v103[4] = 1024;
        *(_DWORD *)&v103[6] = v4;
        _os_log_impl(&dword_1830D4000, v15, v34, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
      }
    }
    goto LABEL_57;
  }
LABEL_58:
  if (v14)
  {
LABEL_59:
    __int16 v36 = (char *)v14;
LABEL_60:
    free(v36);
  }
LABEL_61:
  size_t v26 = 0;
LABEL_62:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v26;
  free(v5);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v37 = (id)gLogObj;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v96 = "nw_proxy_config_serialize_one_stack_block_invoke";
    __int16 v97 = 2112;
    size_t v98 = (size_t)v84;
    _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Serialized proxy protocol %@", buf, 0x16u);
  }

LABEL_65:
  free(v85);
LABEL_66:
  nw_protocol_options_t v38 = options;
  id v39 = nw_protocol_options_copy_proxy_endpoint(options);
  if (v39)
  {
    if (nw_protocol_options_proxy_endpoint_should_override_stack(options)) {
      int v40 = 7;
    }
    else {
      int v40 = 6;
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_path_evaluator_add_endpoint_to_necp_message(v39, v40, *(void *)(*(void *)(*(void *)(a1 + 32) + 8)+ 24), *(void *)(a1 + 40), 0);
    nw_protocol_options_t v38 = options;
  }
  v87[0] = MEMORY[0x1E4F143A8];
  v87[1] = 3221225472;
  v87[2] = ___ZL35nw_proxy_config_serialize_one_stackPU31objcproto20OS_nw_protocol_stack8NSObjectPhPKh_block_invoke_286;
  v87[3] = &unk_1E5249B80;
  long long v88 = *(_OWORD *)(a1 + 32);
  nw_protocol_options_enumerate_proxy_next_hops(v38, v87);
}

void sub_18395BEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void ___ZL35nw_proxy_config_serialize_one_stackPU31objcproto20OS_nw_protocol_stack8NSObjectPhPKh_block_invoke_286(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_path_evaluator_add_endpoint_to_necp_message(v3, 12, *(void *)(*(void *)(*(void *)(a1 + 32) + 8)+ 24), *(void *)(a1 + 40), 0);
}

void sub_18395BF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_proxy_config_set_identifier(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  size_t v4 = v3;
  if (v3)
  {
    *(_OWORD *)(v3 + 56) = *a2;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_set_identifier";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_identifier";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_set_identifier";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_identifier";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_set_identifier";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_proxy_config_get_identifier(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  size_t v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(v3 + 56);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_proxy_config_get_identifier";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_identifier";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_proxy_config_get_identifier";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_identifier";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_proxy_config_get_identifier";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

const char *nw_proxy_config_get_agent_domain()
{
  return "Network";
}

const char *nw_proxy_config_get_agent_type()
{
  return "Proxy";
}

void nw_proxy_config_set_is_companion_proxy(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  size_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 172) = *((unsigned char *)v3 + 172) & 0xFD | v5;
    goto LABEL_6;
  }
  int v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_proxy_config_set_is_companion_proxy";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_is_companion_proxy";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_proxy_config_set_is_companion_proxy";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_is_companion_proxy";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_proxy_config_set_is_companion_proxy";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}