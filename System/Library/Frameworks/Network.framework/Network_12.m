uint64_t __nw_parameters_log_protocol_instances_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  nw_protocol_definition_t v6;
  char *identifier;
  uint64_t protocol_handle;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  NSObject *v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E4F143B8];
  v5 = a3;
  v6 = nw_protocol_options_copy_definition(v5);
  identifier = nw_protocol_definition_get_identifier(v6);
  protocol_handle = nw_protocol_options_get_protocol_handle(v5);
  if (gLogDatapath)
  {
    v10 = protocol_handle;
    v11 = __nwlog_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(void *)(a1 + 32);
      v13 = 136447490;
      v14 = "nw_parameters_log_protocol_instances_block_invoke";
      v15 = 2048;
      v16 = v12;
      v17 = 2048;
      v18 = a2;
      v19 = 2048;
      v20 = v5;
      v21 = 2080;
      v22 = identifier;
      v23 = 2048;
      v24 = v10;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s Parameters %p, index %zu, options %p (%s), protocol handle %p", (uint8_t *)&v13, 0x3Eu);
    }
  }
  return 1;
}

uint64_t nw_protocol_parameters_iterate_stack(void *a1, int a2, void *a3, void *a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  v7 = a1;
  id v8 = a4;
  v9 = (void (**)(void, void, void))v8;
  if (v7)
  {
    if (v8)
    {
      v10 = v7[19];
      v11 = v10;
      if (v10)
      {
        switch(a2)
        {
          case 2:
            v12 = (void *)v10[6];
            if (!v12) {
              goto LABEL_73;
            }
            v13 = v12;
            id v14 = v13[1];

            identifier = nw_protocol_definition_get_identifier(v14);
            if (nw_protocols_are_equal(a3, identifier)) {
              v9[2](v9, 0, v11[6]);
            }
            goto LABEL_14;
          case 3:
            v17 = (void *)v10[3];
            if (!v17) {
              goto LABEL_73;
            }
            v18 = v17;
            id v14 = v18[1];

            v19 = nw_protocol_definition_get_identifier(v14);
            if (nw_protocols_are_equal(a3, v19)) {
              v9[2](v9, 0, v11[3]);
            }
LABEL_14:

            uint64_t v20 = 1;
            break;
          case 4:
            v21 = (atomic_uchar *)v10[2];
            if (!v21) {
              goto LABEL_73;
            }
            v45[0] = MEMORY[0x1E4F143A8];
            v45[1] = 3221225472;
            v45[2] = __nw_protocol_parameters_iterate_stack_block_invoke_2;
            v45[3] = &unk_1E523D278;
            v47 = a3;
            v46 = v9;
            nw_array_apply(v21, (uint64_t)v45);

            goto LABEL_19;
          case 5:
            v22 = (atomic_uchar *)v10[1];
            if (!v22) {
              goto LABEL_73;
            }
            v48[0] = MEMORY[0x1E4F143A8];
            v48[1] = 3221225472;
            v48[2] = __nw_protocol_parameters_iterate_stack_block_invoke;
            v48[3] = &unk_1E523D278;
            v50 = a3;
            v49 = v9;
            nw_array_apply(v22, (uint64_t)v48);

LABEL_19:
            uint64_t v20 = 1;
            break;
          default:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v16 = (id)gLogObj;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v54 = "nw_protocol_parameters_iterate_stack";
              __int16 v55 = 1024;
              LODWORD(v56) = a2;
              _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s Unsupported protocol level %u", buf, 0x12u);
            }

            goto LABEL_73;
        }
LABEL_74:

        goto LABEL_75;
      }
      v29 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v54 = "nw_protocol_parameters_iterate_stack";
      v30 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v52 = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      if (__nwlog_fault(v30, &v52, &v51))
      {
        if (v52 == OS_LOG_TYPE_FAULT)
        {
          v31 = __nwlog_obj();
          os_log_type_t v32 = v52;
          if (os_log_type_enabled(v31, v52))
          {
            *(_DWORD *)buf = 136446210;
            v54 = "nw_protocol_parameters_iterate_stack";
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null stack", buf, 0xCu);
          }
        }
        else if (v51)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          v31 = __nwlog_obj();
          os_log_type_t v39 = v52;
          BOOL v40 = os_log_type_enabled(v31, v52);
          if (backtrace_string)
          {
            if (v40)
            {
              *(_DWORD *)buf = 136446466;
              v54 = "nw_protocol_parameters_iterate_stack";
              __int16 v55 = 2082;
              v56 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v31, v39, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_71;
          }
          if (v40)
          {
            *(_DWORD *)buf = 136446210;
            v54 = "nw_protocol_parameters_iterate_stack";
            _os_log_impl(&dword_1830D4000, v31, v39, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          v31 = __nwlog_obj();
          os_log_type_t v43 = v52;
          if (os_log_type_enabled(v31, v52))
          {
            *(_DWORD *)buf = 136446210;
            v54 = "nw_protocol_parameters_iterate_stack";
            _os_log_impl(&dword_1830D4000, v31, v43, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_71:
      if (v30) {
        free(v30);
      }
LABEL_73:
      uint64_t v20 = 0;
      goto LABEL_74;
    }
    v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v54 = "nw_protocol_parameters_iterate_stack";
    v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v52 = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (__nwlog_fault(v24, &v52, &v51))
    {
      if (v52 == OS_LOG_TYPE_FAULT)
      {
        v25 = __nwlog_obj();
        os_log_type_t v28 = v52;
        if (os_log_type_enabled(v25, v52))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null iterator", buf, 0xCu);
        }
LABEL_64:

        goto LABEL_65;
      }
      if (!v51)
      {
        v25 = __nwlog_obj();
        os_log_type_t v42 = v52;
        if (os_log_type_enabled(v25, v52))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_1830D4000, v25, v42, "%{public}s called with null iterator, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_64;
      }
      v33 = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      os_log_type_t v36 = v52;
      BOOL v37 = os_log_type_enabled(v25, v52);
      if (!v33)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null iterator, no backtrace", buf, 0xCu);
        }
        goto LABEL_64;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        v54 = "nw_protocol_parameters_iterate_stack";
        __int16 v55 = 2082;
        v56 = v33;
        _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null iterator, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_44;
    }
  }
  else
  {
    v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v54 = "nw_protocol_parameters_iterate_stack";
    v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v52 = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (__nwlog_fault(v24, &v52, &v51))
    {
      if (v52 == OS_LOG_TYPE_FAULT)
      {
        v25 = __nwlog_obj();
        os_log_type_t v26 = v52;
        if (os_log_type_enabled(v25, v52))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_64;
      }
      if (!v51)
      {
        v25 = __nwlog_obj();
        os_log_type_t v41 = v52;
        if (os_log_type_enabled(v25, v52))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_1830D4000, v25, v41, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_64;
      }
      v33 = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      os_log_type_t v34 = v52;
      BOOL v35 = os_log_type_enabled(v25, v52);
      if (!v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_1830D4000, v25, v34, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_64;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446466;
        v54 = "nw_protocol_parameters_iterate_stack";
        __int16 v55 = 2082;
        v56 = v33;
        _os_log_impl(&dword_1830D4000, v25, v34, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_44:

      free(v33);
    }
  }
LABEL_65:
  if (v24) {
    free(v24);
  }
  uint64_t v20 = 0;
LABEL_75:

  return v20;
}

void sub_1837AE960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_parameters_iterate_stack_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  identifier = nw_protocol_definition_get_identifier(v5);
  if (nw_protocols_are_equal(*(void **)(a1 + 40), identifier)) {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else {
    uint64_t v7 = 1;
  }

  return v7;
}

void sub_1837AEA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_parameters_iterate_stack_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  identifier = nw_protocol_definition_get_identifier(v5);
  if (nw_protocols_are_equal(*(void **)(a1 + 40), identifier)) {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else {
    uint64_t v7 = 1;
  }

  return v7;
}

void sub_1837AEAA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_parameters_copy_value(void *a1, const char *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_protocol_value_from_parameters(v3, a2);
    goto LABEL_3;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_parameters_copy_value";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_parameters_copy_value";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_parameters_copy_value";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_parameters_copy_value";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null protocol_parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_parameters_copy_value";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null protocol_parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0;
LABEL_3:

  return v5;
}

void sub_1837AED60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL44nw_parameters_copy_protocol_value_from_levelP24NWConcrete_nw_parameters19nw_protocol_level_tP11nw_protocolPKc_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v4);
  if (protocol_handle && protocol_handle == *(void *)(a1 + 40))
  {
    uint64_t v6 = nw_parameters_copy_protocol_value_from_parameters(v4, *(const char **)(a1 + 48));
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  BOOL v9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) == 0;

  return v9;
}

void sub_1837AEDFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL44nw_parameters_copy_protocol_options_internalP24NWConcrete_nw_parametersPU40objcproto29NWConcrete_nw_protocol_handle8NSObjectP19nw_protocol_level_t_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v5);
  if (protocol_handle && protocol_handle == [*(id *)(a1 + 32) getProtocolStructure])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }

  return v7;
}

void sub_1837AEE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_parameters_copy_protocol_options_for_definition_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  nw_protocol_definition_t v6 = nw_protocol_options_copy_definition(v5);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 32), (uint64_t)v6);
  if (is_equal_unsafe) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }

  return !is_equal_unsafe;
}

void sub_1837AEF24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_add_to_protocol_stack(void *a1, int a2, unsigned int a3, long long *a4)
{
  id v7 = a1;
  protocol_parameters = nw_parameters_create_protocol_parameters(a4);
  if (protocol_parameters) {
    uint64_t v9 = nw_parameters_add_protocol_stack_member(v7, a2, a3, protocol_parameters);
  }
  else {
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1837AEFB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_remove_from_protocol_stack(void *a1, int a2, void *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  nw_protocol_definition_t v6 = v5;
  if (v5)
  {
    if (a3)
    {
      id v7 = (atomic_uchar **)v5[19];
      id v8 = v7;
      if (v7)
      {
        switch(a2)
        {
          case 2:
            uint64_t v9 = v7[6];
            if (!v9) {
              goto LABEL_23;
            }
            os_log_type_t v10 = v9;
            id v11 = v10[1];

            identifier = nw_protocol_definition_get_identifier(v11);
            if (!nw_protocols_are_equal(a3, identifier)) {
              goto LABEL_20;
            }
            BOOL v13 = v8[6];
            v8[6] = 0;
            break;
          case 3:
            v16 = v7[3];
            if (v16)
            {
              v17 = v16;
              id v18 = v17[1];

              __int16 v19 = nw_protocol_definition_get_identifier(v18);
              if (nw_protocols_are_equal(a3, v19))
              {
                uint64_t v20 = v8[3];
                v8[3] = 0;
              }
            }
            uint64_t v21 = v8[4];
            if (!v21) {
              goto LABEL_23;
            }
            v22 = v21;
            id v11 = v22[1];

            v23 = nw_protocol_definition_get_identifier(v11);
            if (!nw_protocols_are_equal(a3, v23)) {
              goto LABEL_20;
            }
            BOOL v13 = v8[4];
            v8[4] = 0;
            break;
          case 4:
            *(void *)buf = 0;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x3032000000;
            v61 = __Block_byref_object_copy__19403;
            v62 = __Block_byref_object_dispose__19404;
            v24 = v7 + 2;
            v63 = v7[2];
            v25 = *v24;
            v50[0] = MEMORY[0x1E4F143A8];
            v50[1] = 3221225472;
            v50[2] = __nw_parameters_remove_from_protocol_stack_block_invoke_2;
            v50[3] = &unk_1E5249D20;
            os_log_type_t v52 = buf;
            v53 = a3;
            char v51 = v8;
            nw_array_apply(v25, (uint64_t)v50);
            objc_storeStrong((id *)v8 + 2, *(id *)(*(void *)&buf[8] + 40));

            _Block_object_dispose(buf, 8);
            goto LABEL_23;
          case 5:
            *(void *)buf = 0;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x3032000000;
            v61 = __Block_byref_object_copy__19403;
            v62 = __Block_byref_object_dispose__19404;
            os_log_type_t v26 = v7 + 1;
            v63 = v7[1];
            v27 = *v26;
            v54[0] = MEMORY[0x1E4F143A8];
            v54[1] = 3221225472;
            v54[2] = __nw_parameters_remove_from_protocol_stack_block_invoke;
            v54[3] = &unk_1E5249D20;
            v56 = buf;
            uint64_t v57 = a3;
            __int16 v55 = v8;
            nw_array_apply(v27, (uint64_t)v54);
            objc_storeStrong((id *)v8 + 1, *(id *)(*(void *)&buf[8] + 40));

            _Block_object_dispose(buf, 8);
            goto LABEL_23;
          default:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v14 = (id)gLogObj;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = a2;
              _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Unsupported protocol level %u", buf, 0x12u);
            }

            goto LABEL_11;
        }

LABEL_20:
LABEL_23:
        uint64_t v15 = 1;
LABEL_24:

        goto LABEL_25;
      }
      BOOL v35 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
      os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v59 = OS_LOG_TYPE_ERROR;
      char v58 = 0;
      if (__nwlog_fault(v36, &v59, &v58))
      {
        if (v59 == OS_LOG_TYPE_FAULT)
        {
          BOOL v37 = __nwlog_obj();
          os_log_type_t v38 = v59;
          if (os_log_type_enabled(v37, v59))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
            _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null stack", buf, 0xCu);
          }
        }
        else if (v58)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          BOOL v37 = __nwlog_obj();
          os_log_type_t v45 = v59;
          BOOL v46 = os_log_type_enabled(v37, v59);
          if (backtrace_string)
          {
            if (v46)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v37, v45, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_77;
          }
          if (v46)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
            _os_log_impl(&dword_1830D4000, v37, v45, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          BOOL v37 = __nwlog_obj();
          os_log_type_t v49 = v59;
          if (os_log_type_enabled(v37, v59))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
            _os_log_impl(&dword_1830D4000, v37, v49, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_77:
      if (v36) {
        free(v36);
      }
LABEL_11:
      uint64_t v15 = 0;
      goto LABEL_24;
    }
    v33 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
    v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v59 = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (__nwlog_fault(v30, &v59, &v58))
    {
      if (v59 == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        os_log_type_t v34 = v59;
        if (os_log_type_enabled(v31, v59))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
          _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s called with null protocol_identifier", buf, 0xCu);
        }
LABEL_70:

        goto LABEL_71;
      }
      if (!v58)
      {
        v31 = __nwlog_obj();
        os_log_type_t v48 = v59;
        if (os_log_type_enabled(v31, v59))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
          _os_log_impl(&dword_1830D4000, v31, v48, "%{public}s called with null protocol_identifier, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_70;
      }
      os_log_type_t v39 = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      os_log_type_t v42 = v59;
      BOOL v43 = os_log_type_enabled(v31, v59);
      if (!v39)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
          _os_log_impl(&dword_1830D4000, v31, v42, "%{public}s called with null protocol_identifier, no backtrace", buf, 0xCu);
        }
        goto LABEL_70;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v39;
        _os_log_impl(&dword_1830D4000, v31, v42, "%{public}s called with null protocol_identifier, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_50;
    }
  }
  else
  {
    v29 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
    v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v59 = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (__nwlog_fault(v30, &v59, &v58))
    {
      if (v59 == OS_LOG_TYPE_FAULT)
      {
        v31 = __nwlog_obj();
        os_log_type_t v32 = v59;
        if (os_log_type_enabled(v31, v59))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_70;
      }
      if (!v58)
      {
        v31 = __nwlog_obj();
        os_log_type_t v47 = v59;
        if (os_log_type_enabled(v31, v59))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
          _os_log_impl(&dword_1830D4000, v31, v47, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_70;
      }
      os_log_type_t v39 = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      os_log_type_t v40 = v59;
      BOOL v41 = os_log_type_enabled(v31, v59);
      if (!v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
          _os_log_impl(&dword_1830D4000, v31, v40, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_70;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v39;
        _os_log_impl(&dword_1830D4000, v31, v40, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_50:

      free(v39);
    }
  }
LABEL_71:
  if (v30) {
    free(v30);
  }
  uint64_t v15 = 0;
LABEL_25:

  return v15;
}

BOOL __nw_parameters_remove_from_protocol_stack_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  identifier = nw_protocol_definition_get_identifier(v5);
  BOOL v7 = nw_protocols_are_equal(*(void **)(a1 + 48), identifier);
  if (v7)
  {
    BOOL v8 = nw_array_duplicate_array_without_object(*(void *)(*(void *)(a1 + 32) + 8), v4);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    os_log_type_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  return !v7;
}

BOOL __nw_parameters_remove_from_protocol_stack_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  identifier = nw_protocol_definition_get_identifier(v5);
  BOOL v7 = nw_protocols_are_equal(*(void **)(a1 + 48), identifier);
  if (v7)
  {
    BOOL v8 = nw_array_duplicate_array_without_object(*(void *)(*(void *)(a1 + 32) + 16), v4);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    os_log_type_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  return !v7;
}

void nw_parameters_remove_application_protocol_options_from_protocol_stack(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  nw_protocol_definition_t v5 = v4;
  if (!v3)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v10, &type, &v33)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v11 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
          __int16 v37 = 2082;
          os_log_type_t v38 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v10) {
          goto LABEL_6;
        }
LABEL_54:
        free(v10);
        goto LABEL_6;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
        _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v11 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
        _os_log_impl(&dword_1830D4000, v11, v28, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  if (v4)
  {
    nw_protocol_definition_t v6 = (uint64_t *)v3[19];
    BOOL v7 = v6;
    if (v6)
    {
      uint64_t v8 = v6[2];
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 3221225472;
      v31[2] = __nw_parameters_remove_application_protocol_options_from_protocol_stack_block_invoke;
      v31[3] = &unk_1E523D318;
      id v32 = v5;
      nw_array_remove_objects(v8, (uint64_t)v31);

LABEL_5:
      goto LABEL_6;
    }
    uint64_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
    v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v16, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null stack", buf, 0xCu);
        }
      }
      else if (v33)
      {
        v25 = (char *)__nw_create_backtrace_string();
        v17 = __nwlog_obj();
        os_log_type_t v26 = type;
        BOOL v27 = os_log_type_enabled(v17, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
            __int16 v37 = 2082;
            os_log_type_t v38 = v25;
            _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v25);
          goto LABEL_58;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        v17 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
          _os_log_impl(&dword_1830D4000, v17, v30, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_58:
    if (v16) {
      free(v16);
    }
    goto LABEL_5;
  }
  BOOL v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (!__nwlog_fault(v10, &type, &v33)) {
    goto LABEL_53;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null block", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (!v33)
  {
    id v11 = __nwlog_obj();
    os_log_type_t v29 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
      _os_log_impl(&dword_1830D4000, v11, v29, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_52;
  }
  v22 = (char *)__nw_create_backtrace_string();
  id v11 = __nwlog_obj();
  os_log_type_t v23 = type;
  BOOL v24 = os_log_type_enabled(v11, type);
  if (!v22)
  {
    if (v24)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
      _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null block, no backtrace", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (v24)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
    __int16 v37 = 2082;
    os_log_type_t v38 = v22;
    _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v22);
  if (v10) {
    goto LABEL_54;
  }
LABEL_6:
}

uint64_t __nw_parameters_remove_application_protocol_options_from_protocol_stack_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void nw_parameters_remove_definition_from_protocol_stack(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  nw_protocol_definition_t v5 = v4;
  if (!v3)
  {
    nw_protocol_definition_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
          __int16 v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    nw_protocol_stack_remove_protocol(v3[19], v4);
    goto LABEL_4;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null definition", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  uint64_t v15 = (char *)__nw_create_backtrace_string();
  uint64_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null definition, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
    __int16 v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_1837B06F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_metadata(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  nw_protocol_definition_t v5 = v4;
  if (v3)
  {
    if (!v4 || object_getClass(v4) == (Class)MEMORY[0x1E4F14580])
    {
      objc_storeStrong(v3 + 27, a2);
      goto LABEL_24;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_parameters_set_metadata";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null metadata - wrong type", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_parameters_set_metadata";
          __int16 v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null metadata - wrong type, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (v7) {
          goto LABEL_23;
        }
        goto LABEL_24;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null metadata - wrong type, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null metadata - wrong type, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_21;
  }
  BOOL v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_parameters_set_metadata";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v7, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_21:

      goto LABEL_22;
    }
    if (!v20)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_21;
    }
    os_log_type_t v16 = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v8, type);
    if (!v16)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_21;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v23 = "nw_parameters_set_metadata";
      __int16 v24 = 2082;
      v25 = v16;
      _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v16);
  }
LABEL_22:
  if (v7) {
LABEL_23:
  }
    free(v7);
LABEL_24:
}

void sub_1837B0C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_transform_array(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  nw_protocol_definition_t v5 = v4;
  if (!v3)
  {
    id v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_parameters_set_transform_array";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_transform_array";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_parameters_set_transform_array";
          __int16 v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_transform_array";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_transform_array";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    if (v3[20] != v4) {
      objc_storeStrong(v3 + 20, a2);
    }
    goto LABEL_5;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_parameters_set_transform_array";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_parameters_set_transform_array";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null transform_array", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v20)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_parameters_set_transform_array";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null transform_array, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  uint64_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_parameters_set_transform_array";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null transform_array, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v23 = "nw_parameters_set_transform_array";
    __int16 v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null transform_array, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_40;
  }
LABEL_5:
}

BOOL nw_parameters_has_transforms(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  v2 = v1;
  if (v1)
  {
    BOOL v3 = *((void *)v1 + 20) != 0;
    goto LABEL_3;
  }
  nw_protocol_definition_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_has_transforms";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_has_transforms";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_has_transforms";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_has_transforms";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_has_transforms";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_companion_preference(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 84) = a2;
    goto LABEL_3;
  }
  nw_protocol_definition_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_companion_preference";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_companion_preference";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_companion_preference";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_companion_preference";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_companion_preference";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_parameters_get_companion_preference(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(unsigned int *)(*((void *)v1 + 13) + 84);
    goto LABEL_3;
  }
  nw_protocol_definition_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_companion_preference";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_companion_preference";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_companion_preference";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_companion_preference";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_companion_preference";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_https_proxy_is_opaque(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x100000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFEFFFFFLL | v5;
    goto LABEL_5;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_https_proxy_is_opaque";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_https_proxy_is_opaque";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_https_proxy_is_opaque";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_https_proxy_is_opaque";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_https_proxy_is_opaque";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

uint64_t nw_parameters_get_https_proxy_is_opaque(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[98] >> 4) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_https_proxy_is_opaque";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_https_proxy_is_opaque";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_https_proxy_is_opaque";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_https_proxy_is_opaque";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_https_proxy_is_opaque";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_https_proxy_over_tls(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x200000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFDFFFFFLL | v5;
    goto LABEL_5;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_https_proxy_over_tls";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_https_proxy_over_tls";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_https_proxy_over_tls";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_https_proxy_over_tls";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_https_proxy_over_tls";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

BOOL __nw_parameters_copy_proxy_options_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  nw_protocol_definition_t v6 = nw_protocol_options_copy_definition(v5);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, *(void *)(a1 + 32));

  if (is_equal_unsafe) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }

  return !is_equal_unsafe;
}

void sub_1837B2184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_attach_protocol_listener(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x400000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFBFFFFFLL | v5;
    goto LABEL_5;
  }
  nw_protocol_definition_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_attach_protocol_listener";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_attach_protocol_listener";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_attach_protocol_listener";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_attach_protocol_listener";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_attach_protocol_listener";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_prohibit_joining_protocols(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x800000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFF7FFFFFLL | v5;
    goto LABEL_5;
  }
  nw_protocol_definition_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_prohibit_joining_protocols";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_joining_protocols";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_prohibit_joining_protocols";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_joining_protocols";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_joining_protocols";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_allow_joining_connected_fd(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x1000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFEFFFFFFLL | v5;
    goto LABEL_5;
  }
  nw_protocol_definition_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_allow_joining_connected_fd";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_joining_connected_fd";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_allow_joining_connected_fd";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_joining_connected_fd";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_joining_connected_fd";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_allow_duplicate_state_updates(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x4000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFBFFFFFFLL | v5;
    goto LABEL_5;
  }
  nw_protocol_definition_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_allow_duplicate_state_updates";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_duplicate_state_updates";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_allow_duplicate_state_updates";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_duplicate_state_updates";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_duplicate_state_updates";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_disable_listener_datapath(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x20000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFDFFFFFFFLL | v5;
    goto LABEL_5;
  }
  nw_protocol_definition_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_disable_listener_datapath";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_disable_listener_datapath";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_disable_listener_datapath";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_disable_listener_datapath";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_disable_listener_datapath";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

BOOL ___ZL46nw_parameters_register_demux_options_if_neededP24NWConcrete_nw_parametersPU25objcproto14OS_nw_listener8NSObjectPU27objcproto16OS_nw_connectionS1__block_invoke(uint64_t a1)
{
  return nw_masque_add_additional_demux_pattern(*(void **)(a1 + 32), *(void *)(a1 + 40));
}

void nw_parameters_allow_sharing_port_with_listener(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    nw_protocol_definition_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
          __int16 v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    nw_parameters_allow_sharing_port_with_listener_for_connection(v3, v4, 0);
    goto LABEL_4;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null listener", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null listener, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
    __int16 v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_1837B33C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_get_listener_uuid(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_parameters_get_listener_uuid";
    nw_protocol_definition_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_get_listener_uuid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_get_listener_uuid";
          __int16 v23 = 2082;
          __int16 v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_get_listener_uuid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_get_listener_uuid";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *a2 = *(_OWORD *)(v3 + 24);
    goto LABEL_4;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_get_listener_uuid";
  nw_protocol_definition_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_get_listener_uuid";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null listener_uuid", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    BOOL v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_get_listener_uuid";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null listener_uuid, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  BOOL v14 = (char *)__nw_create_backtrace_string();
  BOOL v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_get_listener_uuid";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null listener_uuid, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_parameters_get_listener_uuid";
    __int16 v23 = 2082;
    __int16 v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null listener_uuid, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

void nw_parameters_set_tracker_context(void *a1, const char *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_parameters_set_attribution_context(v3, a2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_set_tracker_context";
  nw_protocol_definition_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_tracker_context";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_set_tracker_context";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_tracker_context";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_tracker_context";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_set_attributed_bundle_identifier(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    BOOL v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v20 = "nw_parameters_set_attributed_bundle_identifier";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v20 = "nw_parameters_set_attributed_bundle_identifier";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            char v20 = "nw_parameters_set_attributed_bundle_identifier";
            __int16 v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          char v20 = "nw_parameters_set_attributed_bundle_identifier";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v20 = "nw_parameters_set_attributed_bundle_identifier";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_27:
    if (v8) {
      free(v8);
    }
    goto LABEL_8;
  }
  uint64_t v5 = *(void **)(v3[13] + 128);
  if (v5)
  {
    free(v5);
    *(void *)(v4[13] + 128) = 0;
  }
  if (!a2 || strlen(a2) - 1 > 0x3FE) {
    goto LABEL_8;
  }
  nw_protocol_definition_t v6 = strdup(a2);
  if (v6)
  {
LABEL_7:
    *(void *)(v4[13] + 128) = v6;
LABEL_8:

    return;
  }
  BOOL v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  char v20 = "strict_strdup";
  os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v15))
  {
    free(v15);
    goto LABEL_7;
  }
  __break(1u);
}

void nw_parameters_set_should_trust_invalid_certificates(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x200000000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFDFFFFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  nw_protocol_definition_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_parameters_set_should_trust_invalid_certificates";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_parameters_set_should_trust_invalid_certificates";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_parameters_set_should_trust_invalid_certificates";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_parameters_set_should_trust_invalid_certificates";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_parameters_set_should_trust_invalid_certificates";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_should_skip_probe_sampling(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x400000000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFBFFFFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  nw_protocol_definition_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_parameters_set_should_skip_probe_sampling";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_parameters_set_should_skip_probe_sampling";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_parameters_set_should_skip_probe_sampling";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_parameters_set_should_skip_probe_sampling";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_parameters_set_should_skip_probe_sampling";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

uint64_t __nw_parameters_is_equal_block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  nw_protocol_definition_t v6 = nw_array_get_object_at_index(*(void *)(*(void *)(a1 + 32) + 160), a2);
  uint64_t v7 = nw_protocol_transform_compare(v5, v6, 0);
  if ((v7 & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }

  return v7;
}

void sub_1837B4468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_is_equal_block_invoke_2(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  nw_protocol_definition_t v6 = nw_array_get_object_at_index(*(void *)(*(void *)(a1 + 32) + 176), a2);
  uint64_t is_equal = nw_proxy_config_is_equal(v5, v6);
  if ((is_equal & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }

  return is_equal;
}

void sub_1837B44FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_is_equal_block_invoke_3(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  nw_protocol_definition_t v6 = nw_array_get_object_at_index(*(void *)(*(void *)(a1 + 32) + 168), a2);
  uint64_t is_equal = nw_protocol_option_is_equal(v5, v6);
  if ((is_equal & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }

  return is_equal;
}

void sub_1837B4590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_are_compatible(void *a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  os_log_type_t v9 = a1;
  os_log_type_t v10 = a3;
  os_log_type_t v11 = v10;
  BOOL v12 = v9 == v10;
  if (v9 != v10 && v9 && v10)
  {
    os_log_type_t v13 = v9[23];
    int v14 = 3;
    if (v13)
    {
      os_log_type_t v15 = v13;
      char v16 = v15[170];

      if (v16) {
        int v14 = 4;
      }
      else {
        int v14 = 3;
      }
    }
    if (a4) {
      int v17 = 2;
    }
    else {
      int v17 = 1;
    }
    if (!a5) {
      int v14 = v17;
    }
    if ((a5 & 1) == 0)
    {
      __int16 v18 = v9;
      id v19 = v18[25];

      uint64_t v20 = v11;
      id v21 = v20[25];

      if (v19)
      {
        if (v21)
        {
          url_scheme = (const char *)nw_endpoint_get_url_scheme(v19);
          uint64_t v23 = (const char *)nw_endpoint_get_url_scheme(v21);
          if (strcasecmp(url_scheme, v23))
          {

LABEL_24:
            BOOL v12 = 0;
            goto LABEL_25;
          }
        }
      }
    }
    id v24 = nw_parameters_copy_path_parameters(v9, 0);
    id v25 = nw_parameters_copy_path_parameters(v11, 0);
    BOOL v26 = nw_path_parameters_are_equal(v24, v25, v14);

    if (!v26) {
      goto LABEL_24;
    }
    BOOL v27 = v9[19];
    if (a4)
    {
      if (!nw_protocol_stack_application_protocols_are_equal_below(v27, a2, v11[19], a4, v14, 0, 0)) {
        goto LABEL_24;
      }
    }
    else if (!nw_protocol_stack_is_equal(v27, v11[19], v14))
    {
      goto LABEL_24;
    }
    BOOL v12 = 1;
  }
LABEL_25:

  return v12;
}

void sub_1837B4744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

size_t nw_parameters_get_hash(void *a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v45 = 0;
    BOOL v46 = &v45;
    uint64_t v47 = 0x2020000000;
    uint64_t v48 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = &v38;
    uint64_t v40 = 0x9812000000;
    BOOL v41 = __Block_byref_object_copy__118;
    os_log_type_t v42 = __Block_byref_object_dispose__119;
    BOOL v43 = &unk_18405C45D;
    memset(&v44, 0, sizeof(v44));
    CC_SHA256_Init(&v44);
    CC_SHA256_Update((CC_SHA256_CTX *)(v39 + 6), v1 + 8, 0x60u);
    CC_SHA256_Update((CC_SHA256_CTX *)(v39 + 6), (const void *)(*((void *)v1 + 13) + 8), 0x40u);
    CC_SHA256_Update((CC_SHA256_CTX *)(v39 + 6), (const void *)(*((void *)v1 + 13) + 72), 0x1Eu);
    CC_SHA256_Update((CC_SHA256_CTX *)(v39 + 6), (const void *)(*((void *)v1 + 13) + 102), 9u);
    v2 = (const void *)*((void *)v1 + 14);
    if (v2)
    {
      CC_LONG v3 = strlen(*((const char **)v1 + 14));
      CC_SHA256_Update((CC_SHA256_CTX *)(v39 + 6), v2, v3);
    }
    id v4 = (const void *)*((void *)v1 + 15);
    if (v4)
    {
      CC_LONG v5 = strlen(*((const char **)v1 + 15));
      CC_SHA256_Update((CC_SHA256_CTX *)(v39 + 6), v4, v5);
    }
    uint64_t v6 = *((void *)v1 + 13);
    uint64_t v7 = *(const void **)(v6 + 112);
    if (v7)
    {
      CC_LONG v8 = strlen(*(const char **)(v6 + 112));
      CC_SHA256_Update((CC_SHA256_CTX *)(v39 + 6), v7, v8);
      uint64_t v6 = *((void *)v1 + 13);
    }
    os_log_type_t v9 = *(const void **)(v6 + 120);
    if (v9)
    {
      CC_LONG v10 = strlen(*(const char **)(v6 + 120));
      CC_SHA256_Update((CC_SHA256_CTX *)(v39 + 6), v9, v10);
      uint64_t v6 = *((void *)v1 + 13);
    }
    os_log_type_t v11 = *(const void **)(v6 + 128);
    if (v11)
    {
      CC_LONG v12 = strlen(*(const char **)(v6 + 128));
      CC_SHA256_Update((CC_SHA256_CTX *)(v39 + 6), v11, v12);
      uint64_t v6 = *((void *)v1 + 13);
    }
    uint64_t v14 = *(void *)(v6 + 136);
    os_log_type_t v13 = (const void *)(v6 + 136);
    if (v14) {
      CC_SHA256_Update((CC_SHA256_CTX *)(v39 + 6), v13, 8u);
    }
    CC_SHA256_Final(md, (CC_SHA256_CTX *)(v39 + 6));
    int8x16_t v15 = veorq_s8(*(int8x16_t *)md, v50);
    v46[3] ^= *(void *)&veor_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
    uint64_t v16 = [*((id *)v1 + 25) getHash];
    v46[3] ^= v16;
    uint64_t v17 = [*(id *)(*((void *)v1 + 13) + 160) getHash];
    v46[3] ^= v17;
    uint64_t shallow_hash = nw_interface_get_shallow_hash(*(void **)(*((void *)v1 + 13) + 168));
    v46[3] ^= shallow_hash;
    uint64_t hash = nw_protocol_stack_get_hash(*((void **)v1 + 19));
    v46[3] ^= hash;
    id v20 = nw_parameters_copy_path_parameters(v1, 0);
    uint64_t v21 = nw_path_parameters_get_hash(v20);
    v46[3] ^= v21;

    v22 = (atomic_uchar *)*((void *)v1 + 20);
    if (v22)
    {
      v37[0] = MEMORY[0x1E4F143A8];
      v37[1] = 3221225472;
      v37[2] = __nw_parameters_get_hash_block_invoke;
      v37[3] = &unk_1E5248058;
      v37[4] = &v45;
      nw_array_apply(v22, (uint64_t)v37);
    }
    uint64_t v23 = (atomic_uchar *)*((void *)v1 + 22);
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    v36[2] = __nw_parameters_get_hash_block_invoke_2;
    v36[3] = &unk_1E5248058;
    v36[4] = &v45;
    nw_array_apply(v23, (uint64_t)v36);
    size_t v24 = nw_proxy_config_get_hash(*((void **)v1 + 23));
    v46[3] ^= v24;
    size_t v25 = nw_proxy_config_get_hash(*((void **)v1 + 24));
    v46[3] ^= v25;
    BOOL v26 = (void *)*((void *)v1 + 16);
    if (v26)
    {
      size_t v27 = xpc_hash(v26);
      v46[3] ^= v27;
    }
    os_log_type_t v28 = (void *)*((void *)v1 + 17);
    if (v28)
    {
      size_t v29 = xpc_hash(v28);
      v46[3] ^= v29;
    }
    os_log_type_t v30 = *((void *)v1 + 18);
    if (v30)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_parameters_get_hash_block_invoke_3;
      applier[3] = &unk_1E523DF40;
      applier[4] = &v38;
      dispatch_data_apply(v30, applier);
    }
    v31 = (void *)*((void *)v1 + 27);
    if (v31)
    {
      size_t v32 = xpc_hash(v31);
      size_t v33 = v46[3] ^ v32;
      v46[3] = v33;
    }
    else
    {
      size_t v33 = v46[3];
    }
    _Block_object_dispose(&v38, 8);
    _Block_object_dispose(&v45, 8);
  }
  else
  {
    size_t v33 = 0;
  }

  return v33;
}

void sub_1837B4C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  id v20 = v18;

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v19 - 120), 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__118(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 48) = v2;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v6;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t __nw_parameters_get_hash_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^= nw_protocol_transform_get_hash(v4);

  return 1;
}

void sub_1837B4CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_get_hash_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^= nw_proxy_config_get_hash(v4);

  return 1;
}

void sub_1837B4D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_get_hash_block_invoke_3(uint64_t a1, int a2, int a3, void *data, CC_LONG len)
{
  return 1;
}

BOOL nw_parameters_get_tls13_enabled()
{
  return !networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_disable_tls13);
}

BOOL nw_parameters_get_tls_experiments_enabled(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 101) & 0x40) != 0
      || networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_enable_tls_experiments);
}

void nw_parameters_set_is_probe(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 1024;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFBFFLL | v5;
    goto LABEL_5;
  }
  long long v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_parameters_set_is_probe";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      CC_LONG v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_is_probe";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      CC_LONG v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_parameters_set_is_probe";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_is_probe";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      CC_LONG v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_is_probe";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_allow_unusable_addresses(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x80000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFF7FFFFLL | v5;
    goto LABEL_5;
  }
  long long v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_parameters_set_allow_unusable_addresses";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      CC_LONG v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_allow_unusable_addresses";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      CC_LONG v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_parameters_set_allow_unusable_addresses";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_allow_unusable_addresses";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      CC_LONG v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_allow_unusable_addresses";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_prefer_no_proxy(nw_parameters_t parameters, BOOL prefer_no_proxy)
{
  BOOL v2 = prefer_no_proxy;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    Class isa = v3[13].isa;
    int v7 = *((unsigned __int16 *)isa + 54);
    long long v6 = (char *)isa + 108;
    int v8 = v7 | (v6[2] << 16);
    if (v2) {
      __int16 v9 = 256;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFEFF;
    *(_WORD *)long long v6 = v10 | v9;
    v6[2] = BYTE2(v10);
    goto LABEL_6;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_prefer_no_proxy";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_prefer_no_proxy";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_prefer_no_proxy";
          __int16 v23 = 2082;
          size_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_prefer_no_proxy";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_prefer_no_proxy";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

void nw_parameters_set_no_proxy_path_selection(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 512;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFDFF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(unsigned char *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_no_proxy_path_selection";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_proxy_path_selection";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_no_proxy_path_selection";
          __int16 v23 = 2082;
          size_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_proxy_path_selection";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_proxy_path_selection";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

void nw_parameters_set_privacy_proxy_fail_closed(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      __int16 v5 = 64;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100) = *(_WORD *)(*((void *)v3 + 13) + 100) & 0xFFBF | v5;
    goto LABEL_6;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_privacy_proxy_fail_closed";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_privacy_proxy_fail_closed";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_privacy_proxy_fail_closed";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_privacy_proxy_fail_closed";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_privacy_proxy_fail_closed";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 1024;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFBFF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(unsigned char *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
          __int16 v23 = 2082;
          size_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

void nw_parameters_set_prohibit_privacy_proxy(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      __int16 v5 = 128;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100) = *(_WORD *)(*((void *)v3 + 13) + 100) & 0xFF7F | v5;
    goto LABEL_6;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_prohibit_privacy_proxy";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_prohibit_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_prohibit_privacy_proxy";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_prohibit_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_prohibit_privacy_proxy";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void nw_parameters_disable_legacy_tls_versions(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1[19];
    nw_parameters_t v4 = v3;
    if (v3)
    {
      id v5 = v3[3];
      if (nw_parameters_get_tls(v2) && !nw_protocol_options_is_udp(v5))
      {
        uint64_t v6 = (void *)nw_protocol_boringssl_copy_definition();
        int v7 = nw_parameters_copy_protocol_options_for_definition(v2, v6);

        int v8 = v7;
        os_log_type_t v9 = v8;
        if (v8)
        {
          sec_protocol_options_set_min_tls_protocol_version(v8, tls_protocol_version_TLSv12);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unsigned int v10 = (id)gLogObj;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446210;
            v22 = "nw_parameters_disable_legacy_tls_versions";
            _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s Disabling legacy TLS 1.0/1.1 for connection parameters", buf, 0xCu);
          }
        }
      }
    }
    goto LABEL_12;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_disable_legacy_tls_versions";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_disable_legacy_tls_versions";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_disable_legacy_tls_versions";
          __int16 v23 = 2082;
          size_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_disable_legacy_tls_versions";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_disable_legacy_tls_versions";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_29:
  if (v12) {
    free(v12);
  }
LABEL_12:
}

void sub_1837B642C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_create_data(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
      BYTE2(v19) = 0;
      LOWORD(v19) = 0;
      uint64_t necp_parameters = nw_path_create_necp_parameters(a2, 0, 0, 0, 0, v3, 0, 0, v19);
      goto LABEL_4;
    }
    unsigned int v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_parameters_create_data";
    int v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null data_len", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v20)
      {
        int v8 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null data_len, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null data_len, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v23 = "nw_parameters_create_data";
        __int16 v24 = 2082;
        uint64_t v25 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null data_len, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_parameters_create_data";
    int v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v20)
      {
        int v8 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v23 = "nw_parameters_create_data";
        __int16 v24 = 2082;
        uint64_t v25 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v7) {
    free(v7);
  }
  uint64_t necp_parameters = 0;
LABEL_4:

  return necp_parameters;
}

void sub_1837B6938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_update_with_data(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    int v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v29 = "nw_parameters_update_with_data";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          size_t v29 = "nw_parameters_update_with_data";
          __int16 v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_56:
        free(v8);
        goto LABEL_5;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_1830D4000, v9, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!a2)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v29 = "nw_parameters_update_with_data";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null data", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      size_t v29 = "nw_parameters_update_with_data";
      __int16 v30 = 2082;
      v31 = v18;
      _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a3)
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v29 = "nw_parameters_update_with_data";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null data_len", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_1830D4000, v9, v25, "%{public}s called with null data_len, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        size_t v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null data_len, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      size_t v29 = "nw_parameters_update_with_data";
      __int16 v30 = 2082;
      v31 = v18;
      _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null data_len, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v18);
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  nw_path_parse_necp_parameters(v5, 0, 0, 0, 0, 0, 0, 0, 0, a2, a3);
LABEL_5:
}

void sub_1837B7020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_requires_dnssec_validation(nw_parameters_t parameters, BOOL requires_dnssec_validation)
{
  BOOL v2 = requires_dnssec_validation;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x40000000;
    if (!v2) {
      uint64_t v5 = 0;
    }
    v3[12].Class isa = (Class)((unint64_t)v3[12].isa & 0xFFFFFFFFBFFFFFFFLL | v5);
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_requires_dnssec_validation";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_requires_dnssec_validation";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_requires_dnssec_validation";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_requires_dnssec_validation";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_requires_dnssec_validation";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_prohibit_encrypted_dns(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x100000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFEFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_prohibit_encrypted_dns";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_prohibit_encrypted_dns";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_prohibit_encrypted_dns";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_prohibit_encrypted_dns";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_prohibit_encrypted_dns";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_fail_if_svcb_received(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x400000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFBFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_fail_if_svcb_received";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_fail_if_svcb_received";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_fail_if_svcb_received";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_fail_if_svcb_received";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_fail_if_svcb_received";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_include_ble(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x800000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFF7FFFFFFFFLL | v5;
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_include_ble";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_include_ble";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_include_ble";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_include_ble";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_include_ble";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_include_screen_off_devices(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x1000000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFEFFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_include_screen_off_devices";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_include_screen_off_devices";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_include_screen_off_devices";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_include_screen_off_devices";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_include_screen_off_devices";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void nw_parameters_set_allow_internet_fallback(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x2000000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFDFFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_allow_internet_fallback";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_internet_fallback";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_allow_internet_fallback";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_internet_fallback";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_internet_fallback";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

BOOL nw_parameters_has_companion_proxy_required_interface_type(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = v1;
    int v4 = *(_DWORD *)(v3[13] + 92);

    BOOL v5 = v4 != 0;
    goto LABEL_3;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_parameters_has_companion_proxy_required_interface_type";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_has_companion_proxy_required_interface_type";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_parameters_has_companion_proxy_required_interface_type";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_has_companion_proxy_required_interface_type";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_has_companion_proxy_required_interface_type";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  BOOL v5 = 0;
LABEL_3:

  return v5;
}

void nw_parameters_set_use_enhanced_privacy_mode(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      int v9 = 0x20000;
    }
    else {
      int v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFDFFFF;
    *(_WORD *)uint64_t v6 = v10;
    *(unsigned char *)(v6 + 2) = (v10 | v9) >> 16;
    goto LABEL_6;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v22 = "nw_parameters_set_use_enhanced_privacy_mode";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_use_enhanced_privacy_mode";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v22 = "nw_parameters_set_use_enhanced_privacy_mode";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_use_enhanced_privacy_mode";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_use_enhanced_privacy_mode";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

id nw_parameters_copy_application_service_identity()
{
  v9[3] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F3B708];
  v8[0] = *MEMORY[0x1E4F3B718];
  v8[1] = v0;
  v9[0] = *MEMORY[0x1E4F3B760];
  v9[1] = &unk_1ECF96D20;
  v8[2] = *MEMORY[0x1E4F3BD08];
  v9[2] = MEMORY[0x1E4F1CC38];
  id v1 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:3];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __nw_parameters_copy_application_service_identity_block_invoke;
  v6[3] = &unk_1E524BAA8;
  id v7 = v1;
  uint64_t v2 = nw_parameters_copy_application_service_identity::once;
  id v3 = v1;
  if (v2 != -1) {
    dispatch_once(&nw_parameters_copy_application_service_identity::once, v6);
  }
  id v4 = (id)nw_parameters_copy_application_service_identity::identity;

  return v4;
}

void __nw_parameters_copy_application_service_identity_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  CFErrorRef error = 0;
  id v1 = SecKeyCreateRandomKey(*(CFDictionaryRef *)(a1 + 32), &error);
  uint64_t v2 = v1;
  if (v1) {
    BOOL v3 = error == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    SecKeyRef v8 = SecKeyCopyPublicKey(v1);
    SelfSignedCertificate = (const void *)SecGenerateSelfSignedCertificate();
    if (v8) {
      CFRelease(v8);
    }
    if (SelfSignedCertificate)
    {
      unsigned int v10 = (__SecIdentity *)SecIdentityCreate();
      CFRelease(v2);
      CFRelease(SelfSignedCertificate);
      if (v10)
      {
        sec_identity_t v11 = sec_identity_create(v10);
        os_log_type_t v12 = (void *)nw_parameters_copy_application_service_identity::identity;
        nw_parameters_copy_application_service_identity::identity = (uint64_t)v11;

        CFRelease(v10);
        if (nw_parameters_copy_application_service_identity::identity) {
          return;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v13 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
        os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v41 = 0;
        if (!__nwlog_fault(v14, &type, &v41))
        {
LABEL_87:
          if (!v14) {
            return;
          }
          goto LABEL_88;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v15 = (id)gLogObj;
          os_log_type_t v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s sec_identity_create failed", buf, 0xCu);
          }
LABEL_86:

          goto LABEL_87;
        }
        if (!v41)
        {
          char v15 = __nwlog_obj();
          os_log_type_t v40 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_1830D4000, v15, v40, "%{public}s sec_identity_create failed, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_86;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v15 = __nwlog_obj();
        os_log_type_t v35 = type;
        BOOL v36 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_1830D4000, v15, v35, "%{public}s sec_identity_create failed, no backtrace", buf, 0xCu);
          }
          goto LABEL_86;
        }
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
          __int16 v46 = 2082;
          CFErrorRef v47 = (CFErrorRef)backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v35, "%{public}s sec_identity_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v14) {
          return;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v24 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
        os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v41 = 0;
        if (!__nwlog_fault(v14, &type, &v41)) {
          goto LABEL_87;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v15 = (id)gLogObj;
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s SecIdentityCreate failed", buf, 0xCu);
          }
          goto LABEL_86;
        }
        if (!v41)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v15 = (id)gLogObj;
          os_log_type_t v38 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_1830D4000, v15, v38, "%{public}s SecIdentityCreate failed, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_86;
        }
        __int16 v30 = __nw_create_backtrace_string();
        if (!v30)
        {
          char v15 = __nwlog_obj();
          os_log_type_t v39 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_1830D4000, v15, v39, "%{public}s SecIdentityCreate failed, no backtrace", buf, 0xCu);
          }
          goto LABEL_86;
        }
        v31 = (__CFError *)v30;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v32 = (id)gLogObj;
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
          __int16 v46 = 2082;
          CFErrorRef v47 = v31;
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s SecIdentityCreate failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v31);
        if (!v14) {
          return;
        }
      }
LABEL_88:
      free(v14);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v20 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v21, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v22 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s SecGenerateSelfSignedCertificate failed", buf, 0xCu);
        }
      }
      else if (v41)
      {
        size_t v27 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v22 = (id)gLogObj;
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v22, type);
        if (v27)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            __int16 v46 = 2082;
            CFErrorRef v47 = (CFErrorRef)v27;
            _os_log_impl(&dword_1830D4000, v22, v28, "%{public}s SecGenerateSelfSignedCertificate failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v27);
          if (!v21) {
            goto LABEL_53;
          }
          goto LABEL_73;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
          _os_log_impl(&dword_1830D4000, v22, v28, "%{public}s SecGenerateSelfSignedCertificate failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v22 = (id)gLogObj;
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
          _os_log_impl(&dword_1830D4000, v22, v37, "%{public}s SecGenerateSelfSignedCertificate failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v21)
    {
LABEL_53:
      CFRelease(v2);
      return;
    }
LABEL_73:
    free(v21);
    goto LABEL_53;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
  __int16 v46 = 2114;
  CFErrorRef v47 = error;
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v41 = 0;
  if (!__nwlog_fault(v5, &type, &v41)) {
    goto LABEL_48;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (id)gLogObj;
    os_log_type_t v7 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
      __int16 v46 = 2114;
      CFErrorRef v47 = error;
      _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s SecKeyCreateRandomKey failed: %{public}@", buf, 0x16u);
    }
LABEL_47:

LABEL_48:
    if (!v5) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  if (!v41)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (id)gLogObj;
    os_log_type_t v26 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
      __int16 v46 = 2114;
      CFErrorRef v47 = error;
      _os_log_impl(&dword_1830D4000, v6, v26, "%{public}s SecKeyCreateRandomKey failed: %{public}@, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_47;
  }
  BOOL v17 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v6 = (id)gLogObj;
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v6, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
      __int16 v46 = 2114;
      CFErrorRef v47 = error;
      _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s SecKeyCreateRandomKey failed: %{public}@, no backtrace", buf, 0x16u);
    }
    goto LABEL_47;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446722;
    uint64_t v45 = "nw_parameters_copy_application_service_identity_block_invoke";
    __int16 v46 = 2114;
    CFErrorRef v47 = error;
    __int16 v48 = 2082;
    os_log_type_t v49 = v17;
    _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s SecKeyCreateRandomKey failed: %{public}@, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v17);
  if (v5) {
LABEL_49:
  }
    free(v5);
LABEL_50:
  if (error)
  {
    CFRelease(error);
    CFErrorRef error = 0;
  }
  if (v2) {
    goto LABEL_53;
  }
}

nw_parameters_t nw_parameters_create_application_service_quic()
{
  id v0 = nw_parameters_copy_application_service_identity();
  id v1 = v0;
  if (v0) {
    nw_parameters_t application_service_quic_using_identity = nw_parameters_create_application_service_quic_using_identity(v0);
  }
  else {
    nw_parameters_t application_service_quic_using_identity = 0;
  }

  return application_service_quic_using_identity;
}

void sub_1837B92DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters_t nw_parameters_create_application_service_quic_using_identity(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    nw_parameters_t v2 = nw_parameters_create();
    nw_parameters_set_migrating_peer_to_peer(v2);
    nw_parameters_set_use_awdl(v2, 1);
    if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1) {
      dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45806);
    }
    options = nw_protocol_create_options((void *)g_udp_definition);
    nw_udp_options_set_use_quic_stats(options, 1);
    nw_udp_options_set_no_metadata(options, 1);
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
    }
    id v4 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
    uint64_t v5 = nw_quic_copy_sec_protocol_options(&v4->super);
    sec_protocol_options_add_tls_application_protocol(v5, "application-service");

    id v6 = nw_quic_stream_copy_shared_connection_options(v4);
    nw_quic_connection_set_probe_simultaneously(v6, 1);

    os_log_type_t v7 = nw_quic_copy_sec_protocol_options(&v4->super);
    sec_protocol_options_set_peer_authentication_required(v7, 1);
    id v8 = nw_quic_stream_copy_shared_connection_options(v4);
    nw_quic_connection_set_local_identity(v8, v1);
    nw_quic_connection_set_pmtud_for_non_transport(v8, 1);
    nw_quic_connection_set_migration_for_non_transport(v8, 1);
    nw_quic_connection_set_source_connection_id_length(v8, 4);
    nw_protocol_stack_t v9 = nw_parameters_copy_default_protocol_stack(v2);
    nw_protocol_stack_append_application_protocol(v9, v4);
    nw_protocol_stack_set_transport_protocol(v9, &options->super);

    goto LABEL_7;
  }
  sec_identity_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v22 = "nw_parameters_create_application_service_quic_using_identity";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_create_application_service_quic_using_identity";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null identity", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v22 = "nw_parameters_create_application_service_quic_using_identity";
          __int16 v23 = 2082;
          id v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null identity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_create_application_service_quic_using_identity";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null identity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_create_application_service_quic_using_identity";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null identity, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v12) {
    free(v12);
  }
  nw_parameters_t v2 = 0;
LABEL_7:

  return v2;
}

void sub_1837B96C4(_Unwind_Exception *a1)
{
  id v8 = v6;

  _Unwind_Resume(a1);
}

void nw_parameters_set_web_search_content(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      int v9 = 0x40000;
    }
    else {
      int v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFBFFFF;
    *(_WORD *)uint64_t v6 = v10;
    *(unsigned char *)(v6 + 2) = (v10 | v9) >> 16;
    goto LABEL_6;
  }
  sec_identity_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v22 = "nw_parameters_set_web_search_content";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_web_search_content";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v22 = "nw_parameters_set_web_search_content";
          __int16 v23 = 2082;
          id v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_web_search_content";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_web_search_content";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

NSObject *nw_parameters_create_webtransport_http(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  int v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  sec_identity_t v11 = v10;
  if (!v8)
  {
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v58 = "nw_parameters_create_webtransport_http";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v19, &type, &v55)) {
      goto LABEL_108;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null configure_tls", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (!v55)
    {
      id v20 = __nwlog_obj();
      os_log_type_t v48 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v48, "%{public}s called with null configure_tls, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_107;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v20 = __nwlog_obj();
    os_log_type_t v35 = type;
    BOOL v36 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v35, "%{public}s called with null configure_tls, no backtrace", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      char v58 = "nw_parameters_create_webtransport_http";
      __int16 v59 = 2082;
      v60 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v20, v35, "%{public}s called with null configure_tls, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
  if (!v9)
  {
    BOOL v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v58 = "nw_parameters_create_webtransport_http";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v19, &type, &v55)) {
      goto LABEL_108;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v20 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null configure_quic", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (!v55)
    {
      id v20 = __nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v49, "%{public}s called with null configure_quic, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_107;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v20 = __nwlog_obj();
    os_log_type_t v37 = type;
    BOOL v38 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v37, "%{public}s called with null configure_quic, no backtrace", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      char v58 = "nw_parameters_create_webtransport_http";
      __int16 v59 = 2082;
      v60 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v20, v37, "%{public}s called with null configure_quic, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
  if (!v10)
  {
    id v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v58 = "nw_parameters_create_webtransport_http";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v19, &type, &v55)) {
      goto LABEL_108;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v20 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null configure_tcp", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (!v55)
    {
      id v20 = __nwlog_obj();
      os_log_type_t v50 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v50, "%{public}s called with null configure_tcp, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_107;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v20 = __nwlog_obj();
    os_log_type_t v39 = type;
    BOOL v40 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v39, "%{public}s called with null configure_tcp, no backtrace", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      char v58 = "nw_parameters_create_webtransport_http";
      __int16 v59 = 2082;
      v60 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v20, v39, "%{public}s called with null configure_tcp, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
  if (!v7)
  {
    os_log_type_t v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v58 = "nw_parameters_create_webtransport_http";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v19, &type, &v55)) {
      goto LABEL_108;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v20 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null configure_webtransport", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (!v55)
    {
      id v20 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v51, "%{public}s called with null configure_webtransport, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_107;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v20 = __nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v42 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v41, "%{public}s called with null configure_webtransport, no backtrace", buf, 0xCu);
      }
      goto LABEL_107;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      char v58 = "nw_parameters_create_webtransport_http";
      __int16 v59 = 2082;
      v60 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v20, v41, "%{public}s called with null configure_webtransport, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_63:

    free(backtrace_string);
    if (!v19) {
      goto LABEL_110;
    }
    goto LABEL_109;
  }
  if (v7 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_19196)
  {
    os_log_type_t v28 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v58 = "nw_parameters_create_webtransport_http";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v19, &type, &v55)) {
      goto LABEL_108;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v20 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s called with null (configure_webtransport != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
    }
    else if (v55)
    {
      BOOL v43 = (char *)__nw_create_backtrace_string();
      id v20 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v45 = os_log_type_enabled(v20, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          char v58 = "nw_parameters_create_webtransport_http";
          __int16 v59 = 2082;
          v60 = v43;
          _os_log_impl(&dword_1830D4000, v20, v44, "%{public}s called with null (configure_webtransport != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
LABEL_108:
        if (!v19)
        {
LABEL_110:
          os_log_type_t v16 = 0;
          goto LABEL_13;
        }
LABEL_109:
        free(v19);
        goto LABEL_110;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v44, "%{public}s called with null (configure_webtransport != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v20 = __nwlog_obj();
      os_log_type_t v52 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_1830D4000, v20, v52, "%{public}s called with null (configure_webtransport != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_107:

    goto LABEL_108;
  }
  if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_61090);
  }
  options = nw_protocol_create_options((void *)nw_protocol_copy_webtransport_definition::definition);
  if (v7 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_98) {
    v7[2](v7, options);
  }
  secure_http_messaging = nw_parameters_create_secure_http_messaging(v8, v9, &__block_literal_global_98, v11, &__block_literal_global_134);
  os_log_type_t v14 = nw_parameters_copy_default_protocol_stack(secure_http_messaging);
  char v15 = v14;
  if (!v14)
  {
    __int16 v30 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v58 = "nw_parameters_create_webtransport_http";
    v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (__nwlog_fault(v31, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          char v58 = "nw_parameters_create_webtransport_http";
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null stack", buf, 0xCu);
        }
      }
      else if (v55)
      {
        __int16 v46 = (char *)__nw_create_backtrace_string();
        uint64_t v32 = __nwlog_obj();
        os_log_type_t v54 = type;
        BOOL v47 = os_log_type_enabled(v32, type);
        if (v46)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            char v58 = "nw_parameters_create_webtransport_http";
            __int16 v59 = 2082;
            v60 = v46;
            _os_log_impl(&dword_1830D4000, v32, v54, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v46);
          goto LABEL_114;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          char v58 = "nw_parameters_create_webtransport_http";
          _os_log_impl(&dword_1830D4000, v32, v54, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v32 = __nwlog_obj();
        os_log_type_t v53 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          char v58 = "nw_parameters_create_webtransport_http";
          _os_log_impl(&dword_1830D4000, v32, v53, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_114:
    if (v31) {
      free(v31);
    }
    os_log_type_t v16 = 0;
    goto LABEL_12;
  }
  nw_protocol_stack_prepend_application_protocol(v14, &options->super);
  os_log_type_t v16 = secure_http_messaging;
LABEL_12:

LABEL_13:
  return v16;
}

void sub_1837BA798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_parameters_create_webtransport_http_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  nw_http_messaging_options_set_http1_options(v2, 0);
  nw_http2_set_local_max_webtransport_sessions(v2, 1);
  nw_http2_set_capsule_handling_disabled(v2, 1);
  nw_http3_set_0rtt_enabled(v2, 0);
}

void sub_1837BA848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_enumerate_transformed_parameters(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v6 = (atomic_uchar *)v3[20];
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_parameters_enumerate_transformed_parameters_block_invoke;
      v22[3] = &unk_1E52481C0;
      os_log_type_t v23 = v3;
      id v24 = v5;
      BOOL v7 = nw_array_apply(v6, (uint64_t)v22);

      goto LABEL_4;
    }
    id v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_parameters_enumerate_transformed_parameters";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v10, &v26, &v25))
    {
      if (v26 == OS_LOG_TYPE_FAULT)
      {
        sec_identity_t v11 = __nwlog_obj();
        os_log_type_t v14 = v26;
        if (os_log_type_enabled(v11, v26))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null enumerator", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v25)
      {
        sec_identity_t v11 = __nwlog_obj();
        os_log_type_t v21 = v26;
        if (os_log_type_enabled(v11, v26))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      sec_identity_t v11 = __nwlog_obj();
      os_log_type_t v18 = v26;
      BOOL v19 = os_log_type_enabled(v11, v26);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v28 = "nw_parameters_enumerate_transformed_parameters";
        __int16 v29 = 2082;
        __int16 v30 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_parameters_enumerate_transformed_parameters";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v10, &v26, &v25))
    {
      if (v26 == OS_LOG_TYPE_FAULT)
      {
        sec_identity_t v11 = __nwlog_obj();
        os_log_type_t v12 = v26;
        if (os_log_type_enabled(v11, v26))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v25)
      {
        sec_identity_t v11 = __nwlog_obj();
        os_log_type_t v20 = v26;
        if (os_log_type_enabled(v11, v26))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      sec_identity_t v11 = __nwlog_obj();
      os_log_type_t v16 = v26;
      BOOL v17 = os_log_type_enabled(v11, v26);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v28 = "nw_parameters_enumerate_transformed_parameters";
        __int16 v29 = 2082;
        __int16 v30 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

uint64_t __nw_parameters_enumerate_transformed_parameters_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = v5;
  if (v5)
  {
    BOOL v7 = (id *)v5;
    BOOL v8 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v7, 0, 0);

    id v9 = (void **)*(id *)(v8 + 152);
    if (v9)
    {
      id v10 = v7[19];
      sec_identity_t v11 = v10;
      if (v10)
      {
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = ___ZL42nw_parameters_copy_with_protocol_instancesP24NWConcrete_nw_parameters_block_invoke;
        char v58 = &unk_1E523D2C8;
        os_log_type_t v12 = (void **)v10;
        __int16 v59 = v12;
        nw_protocol_stack_iterate_application_protocols_with_index(v9, buf);
        id v13 = v9[3];
        if (v13)
        {
          os_log_type_t v14 = v12[3];
          if (v14)
          {
            char v15 = v14;
            os_log_type_t v16 = v13;
            snprintf(v16 + 48, 0x54uLL, "%s", v15 + 48);
            *((_WORD *)v16 + 68) = *((_WORD *)v15 + 68);

            uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v12[3]);
            nw_protocol_options_set_instance(v9[3], protocol_handle);
          }
        }
        os_log_type_t v18 = v9[4];
        if (v18)
        {
          BOOL v19 = v12[4];
          if (v19)
          {
            os_log_type_t v20 = v19;
            os_log_type_t v21 = v18;
            snprintf(v21 + 48, 0x54uLL, "%s", v20 + 48);
            *((_WORD *)v21 + 68) = *((_WORD *)v20 + 68);

            uint64_t v22 = nw_protocol_options_get_protocol_handle(v12[4]);
            nw_protocol_options_set_instance(v9[4], v22);
          }
        }
        os_log_type_t v23 = v9[6];
        if (v23)
        {
          id v24 = v12[6];
          if (v24)
          {
            char v25 = v24;
            os_log_type_t v26 = v23;
            snprintf(v26 + 48, 0x54uLL, "%s", v25 + 48);
            *((_WORD *)v26 + 68) = *((_WORD *)v25 + 68);

            uint64_t v27 = nw_protocol_options_get_protocol_handle(v12[6]);
            nw_protocol_options_set_instance(v9[6], v27);
          }
        }
        os_log_type_t v28 = (id *)(id)v8;

LABEL_14:
LABEL_15:

        goto LABEL_16;
      }
      os_log_type_t v39 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
      BOOL v40 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v55 = 0;
      if (__nwlog_fault(v40, &type, &v55))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v41 = __nwlog_obj();
          os_log_type_t v42 = type;
          if (os_log_type_enabled(v41, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
            _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null existing_stack", buf, 0xCu);
          }
        }
        else if (v55)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v41 = __nwlog_obj();
          os_log_type_t v50 = type;
          BOOL v51 = os_log_type_enabled(v41, type);
          if (backtrace_string)
          {
            if (v51)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v41, v50, "%{public}s called with null existing_stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_71;
          }
          if (v51)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
            _os_log_impl(&dword_1830D4000, v41, v50, "%{public}s called with null existing_stack, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v41 = __nwlog_obj();
          os_log_type_t v54 = type;
          if (os_log_type_enabled(v41, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
            _os_log_impl(&dword_1830D4000, v41, v54, "%{public}s called with null existing_stack, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_71:
      if (v40) {
        free(v40);
      }
      os_log_type_t v28 = 0;
      goto LABEL_14;
    }
    os_log_type_t v35 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
    BOOL v36 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (__nwlog_fault(v36, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v37 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null new_stack", buf, 0xCu);
        }
      }
      else if (v55)
      {
        __int16 v46 = (char *)__nw_create_backtrace_string();
        os_log_type_t v37 = __nwlog_obj();
        os_log_type_t v47 = type;
        BOOL v48 = os_log_type_enabled(v37, type);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v46;
            _os_log_impl(&dword_1830D4000, v37, v47, "%{public}s called with null new_stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v46);
          goto LABEL_65;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
          _os_log_impl(&dword_1830D4000, v37, v47, "%{public}s called with null new_stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v37 = __nwlog_obj();
        os_log_type_t v53 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
          _os_log_impl(&dword_1830D4000, v37, v53, "%{public}s called with null new_stack, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_65:
    if (v36) {
      free(v36);
    }
    os_log_type_t v28 = 0;
    goto LABEL_15;
  }
  uint64_t v31 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
  uint64_t v32 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v55 = 0;
  if (__nwlog_fault(v32, &type, &v55))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
        _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v55)
    {
      BOOL v43 = (char *)__nw_create_backtrace_string();
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v45 = os_log_type_enabled(v33, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v43;
          _os_log_impl(&dword_1830D4000, v33, v44, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        goto LABEL_59;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
        _os_log_impl(&dword_1830D4000, v33, v44, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v52 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
        _os_log_impl(&dword_1830D4000, v33, v52, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_59:
  if (v32) {
    free(v32);
  }
  os_log_type_t v28 = 0;
LABEL_16:

  nw_protocol_transform_modify_parameters(v4, v28);
  uint64_t v29 = (*(uint64_t (**)(void, id *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v28);

  return v29;
}

void sub_1837BB664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_parameters_copy_with_protocol_instancesP24NWConcrete_nw_parameters_block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)nw_protocol_stack_copy_application_protocol_at_index(*(NWConcrete_nw_protocol_stack **)(a1 + 32), a2);
  BOOL v7 = v6;
  if (v5 && v6)
  {
    BOOL v8 = v6;
    id v9 = (char *)v5;
    snprintf(v9 + 48, 0x54uLL, "%s", v8 + 48);
    *((_WORD *)v9 + 68) = *((_WORD *)v8 + 68);

    id v10 = v8;
    uint64_t v11 = *((void *)v10 + 2);

    os_log_type_t v12 = v9;
    *((void *)v12 + 2) = v11;
  }
  return 1;
}

uint64_t NWPBAgentReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int)*MEMORY[0x1E4F940E8];
  unint64_t v5 = *(void *)(a2 + v4);
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]);
  BOOL v8 = (int *)MEMORY[0x1E4F940C8];
  if (v5 < v7)
  {
    id v10 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v11 = 0x1EC094000uLL;
    unint64_t v12 = 0x1E8F5F000uLL;
    unint64_t v13 = 0x1E8F5F000uLL;
    while (1)
    {
      BOOL v17 = (unsigned char *)(a2 + *v8);
      if (*v17) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
      if (v5 >= v7) {
        break;
      }
      char v18 = *(unsigned char *)(*(void *)(a2 + *v10) + v5);
      *(void *)(a2 + (int)v4) = v5 + 1;
      unint64_t v19 = v18 & 0x7F;
      if ((v18 & 0x80) == 0) {
        goto LABEL_41;
      }
      uint64_t v20 = *v3;
      unint64_t v21 = *(void *)(a2 + v20);
      if (v21 == -1 || v21 >= *(void *)(a2 + *v6)) {
        goto LABEL_39;
      }
      unint64_t v22 = v21 + 1;
      int v23 = *(char *)(*(void *)(a2 + *v10) + v21);
      *(void *)(a2 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << 7;
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_41;
      }
      uint64_t v24 = *v3;
      unint64_t v25 = *(void *)(a2 + v24);
      if (v25 == -1 || v25 >= *(void *)(a2 + *v6)) {
        goto LABEL_39;
      }
      unint64_t v26 = v25 + 1;
      int v27 = *(char *)(*(void *)(a2 + *v10) + v25);
      *(void *)(a2 + v24) = v26;
      v19 |= (unint64_t)(v27 & 0x7F) << 14;
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_41;
      }
      uint64_t v28 = *v3;
      unint64_t v29 = *(void *)(a2 + v28);
      if (v29 == -1 || v29 >= *(void *)(a2 + *v6)) {
        goto LABEL_39;
      }
      unint64_t v30 = v29 + 1;
      int v31 = *(char *)(*(void *)(a2 + *v10) + v29);
      *(void *)(a2 + v28) = v30;
      v19 |= (unint64_t)(v31 & 0x7F) << 21;
      if ((v31 & 0x80000000) == 0) {
        goto LABEL_41;
      }
      uint64_t v32 = *v3;
      unint64_t v33 = *(void *)(a2 + v32);
      if (v33 == -1 || v33 >= *(void *)(a2 + *v6)) {
        goto LABEL_39;
      }
      unint64_t v34 = v33 + 1;
      int v35 = *(char *)(*(void *)(a2 + *v10) + v33);
      *(void *)(a2 + v32) = v34;
      v19 |= (unint64_t)(v35 & 0x7F) << 28;
      if ((v35 & 0x80000000) == 0) {
        goto LABEL_41;
      }
      uint64_t v36 = *v3;
      unint64_t v37 = *(void *)(a2 + v36);
      if (v37 == -1 || v37 >= *(void *)(a2 + *v6))
      {
LABEL_39:
        BOOL v17 = (unsigned char *)(a2 + *v8);
        goto LABEL_40;
      }
      unint64_t v38 = v37 + 1;
      int v39 = *(char *)(*(void *)(a2 + *v10) + v37);
      *(void *)(a2 + v36) = v38;
      if (v39 < 0)
      {
        uint64_t v40 = *v3;
        unint64_t v41 = *(void *)(a2 + v40);
        if (v41 == -1 || v41 >= *(void *)(a2 + *v6)) {
          goto LABEL_39;
        }
        unint64_t v42 = v41 + 1;
        int v43 = *(char *)(*(void *)(a2 + *v10) + v41);
        *(void *)(a2 + v40) = v42;
        if (v43 < 0)
        {
          uint64_t v44 = *v3;
          unint64_t v45 = *(void *)(a2 + v44);
          if (v45 == -1 || v45 >= *(void *)(a2 + *v6)) {
            goto LABEL_39;
          }
          unint64_t v46 = v45 + 1;
          int v47 = *(char *)(*(void *)(a2 + *v10) + v45);
          *(void *)(a2 + v44) = v46;
          if (v47 < 0)
          {
            uint64_t v48 = *v3;
            unint64_t v49 = *(void *)(a2 + v48);
            if (v49 == -1 || v49 >= *(void *)(a2 + *v6)) {
              goto LABEL_39;
            }
            unint64_t v50 = v49 + 1;
            int v51 = *(char *)(*(void *)(a2 + *v10) + v49);
            *(void *)(a2 + v48) = v50;
            if (v51 < 0)
            {
              uint64_t v52 = *v3;
              unint64_t v53 = *(void *)(a2 + v52);
              if (v53 == -1 || v53 >= *(void *)(a2 + *v6)) {
                goto LABEL_39;
              }
              unint64_t v54 = v53 + 1;
              int v55 = *(char *)(*(void *)(a2 + *v10) + v53);
              *(void *)(a2 + v52) = v54;
              if (v55 < 0)
              {
                unint64_t v19 = 0;
                int v56 = *(unsigned __int8 *)(a2 + *v8);
                goto LABEL_43;
              }
            }
          }
        }
      }
LABEL_41:
      int v56 = *(unsigned __int8 *)(a2 + *v8);
      if (*(unsigned char *)(a2 + *v8)) {
        unint64_t v19 = 0;
      }
LABEL_43:
      if (v56) {
        BOOL v57 = 1;
      }
      else {
        BOOL v57 = (v19 & 7) == 4;
      }
      if (v57) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
      switch((v19 >> 3))
      {
        case 1u:
          char v58 = v10;
          unint64_t v59 = v13;
          unint64_t v60 = v12;
          unint64_t v61 = v11;
          id v62 = objc_alloc_init((Class)(v11 + 2688));
          objc_storeStrong((id *)(a1 + 8), v62);
          if (PBReaderPlaceMark() && NWPBAgentClassReadFrom((uint64_t)v62, a2))
          {
            PBReaderRecallMark();

            unint64_t v11 = v61;
            unint64_t v12 = v60;
            unint64_t v13 = v59;
            id v10 = v58;
            goto LABEL_5;
          }

          return 0;
        case 2u:
          uint64_t v14 = PBReaderReadString();
          uint64_t v15 = *(int *)(v12 + 3888);
          goto LABEL_4;
        case 3u:
          uint64_t v14 = PBReaderReadString();
          uint64_t v15 = *(int *)(v13 + 3892);
          goto LABEL_4;
        case 4u:
          *(unsigned char *)(a1 + 48) |= 1u;
          uint64_t v84 = *v3;
          unint64_t v85 = *(void *)(a2 + v84);
          if (v85 == -1 || v85 >= *(void *)(a2 + *v6))
          {
            uint64_t v88 = 0;
LABEL_141:
            *(unsigned char *)(a2 + *v8) = 1;
            goto LABEL_142;
          }
          unint64_t v86 = v85 + 1;
          char v87 = *(unsigned char *)(*(void *)(a2 + *v10) + v85);
          *(void *)(a2 + v84) = v86;
          uint64_t v88 = v87 & 0x7F;
          if ((v87 & 0x80) == 0) {
            goto LABEL_142;
          }
          uint64_t v89 = *v3;
          unint64_t v90 = *(void *)(a2 + v89);
          if (v90 == -1 || v90 >= *(void *)(a2 + *v6)) {
            goto LABEL_141;
          }
          unint64_t v91 = v90 + 1;
          int v92 = *(char *)(*(void *)(a2 + *v10) + v90);
          *(void *)(a2 + v89) = v91;
          v88 |= (unint64_t)(v92 & 0x7F) << 7;
          if ((v92 & 0x80000000) == 0) {
            goto LABEL_142;
          }
          uint64_t v93 = *v3;
          unint64_t v94 = *(void *)(a2 + v93);
          if (v94 == -1 || v94 >= *(void *)(a2 + *v6)) {
            goto LABEL_141;
          }
          unint64_t v95 = v94 + 1;
          int v96 = *(char *)(*(void *)(a2 + *v10) + v94);
          *(void *)(a2 + v93) = v95;
          v88 |= (unint64_t)(v96 & 0x7F) << 14;
          if ((v96 & 0x80000000) == 0) {
            goto LABEL_142;
          }
          uint64_t v97 = *v3;
          unint64_t v98 = *(void *)(a2 + v97);
          if (v98 == -1 || v98 >= *(void *)(a2 + *v6)) {
            goto LABEL_141;
          }
          unint64_t v99 = v98 + 1;
          int v100 = *(char *)(*(void *)(a2 + *v10) + v98);
          *(void *)(a2 + v97) = v99;
          v88 |= (unint64_t)(v100 & 0x7F) << 21;
          if ((v100 & 0x80000000) == 0) {
            goto LABEL_142;
          }
          uint64_t v101 = *v3;
          unint64_t v102 = *(void *)(a2 + v101);
          if (v102 == -1 || v102 >= *(void *)(a2 + *v6)) {
            goto LABEL_141;
          }
          unint64_t v103 = v102 + 1;
          int v104 = *(char *)(*(void *)(a2 + *v10) + v102);
          *(void *)(a2 + v101) = v103;
          v88 |= (unint64_t)(v104 & 0x7F) << 28;
          if ((v104 & 0x80000000) == 0) {
            goto LABEL_142;
          }
          uint64_t v173 = *v3;
          unint64_t v174 = *(void *)(a2 + v173);
          if (v174 == -1 || v174 >= *(void *)(a2 + *v6)) {
            goto LABEL_141;
          }
          unint64_t v175 = v174 + 1;
          int v176 = *(char *)(*(void *)(a2 + *v10) + v174);
          *(void *)(a2 + v173) = v175;
          v88 |= (unint64_t)(v176 & 0x7F) << 35;
          if (v176 < 0)
          {
            uint64_t v205 = *v3;
            unint64_t v206 = *(void *)(a2 + v205);
            if (v206 == -1 || v206 >= *(void *)(a2 + *v6)) {
              goto LABEL_141;
            }
            unint64_t v207 = v206 + 1;
            int v208 = *(char *)(*(void *)(a2 + *v10) + v206);
            *(void *)(a2 + v205) = v207;
            v88 |= (unint64_t)(v208 & 0x7F) << 42;
            if (v208 < 0)
            {
              uint64_t v209 = *v3;
              unint64_t v210 = *(void *)(a2 + v209);
              if (v210 == -1 || v210 >= *(void *)(a2 + *v6)) {
                goto LABEL_141;
              }
              unint64_t v211 = v210 + 1;
              int v212 = *(char *)(*(void *)(a2 + *v10) + v210);
              *(void *)(a2 + v209) = v211;
              v88 |= (unint64_t)(v212 & 0x7F) << 49;
              if (v212 < 0)
              {
                uint64_t v213 = *v3;
                unint64_t v214 = *(void *)(a2 + v213);
                if (v214 == -1 || v214 >= *(void *)(a2 + *v6)) {
                  goto LABEL_141;
                }
                unint64_t v215 = v214 + 1;
                int v216 = *(char *)(*(void *)(a2 + *v10) + v214);
                *(void *)(a2 + v213) = v215;
                v88 |= (unint64_t)(v216 & 0x7F) << 56;
                if (v216 < 0)
                {
                  uint64_t v217 = *v3;
                  unint64_t v218 = *(void *)(a2 + v217);
                  if (v218 == -1 || v218 >= *(void *)(a2 + *v6)) {
                    goto LABEL_141;
                  }
                  unint64_t v219 = v218 + 1;
                  uint64_t v220 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v218);
                  *(void *)(a2 + v217) = v219;
                  if ((v220 & 0x80) != 0)
                  {
                    uint64_t v88 = 0;
                    goto LABEL_144;
                  }
                  v88 |= v220 << 63;
                }
              }
            }
          }
LABEL_142:
          if (*(unsigned char *)(a2 + *v8)) {
            uint64_t v88 = 0;
          }
LABEL_144:
          *(unsigned char *)(a1 + 40) = v88 != 0;
          goto LABEL_5;
        case 5u:
          *(unsigned char *)(a1 + 48) |= 8u;
          uint64_t v63 = *v3;
          unint64_t v64 = *(void *)(a2 + v63);
          if (v64 == -1 || v64 >= *(void *)(a2 + *v6))
          {
            uint64_t v67 = 0;
LABEL_136:
            *(unsigned char *)(a2 + *v8) = 1;
            goto LABEL_137;
          }
          unint64_t v65 = v64 + 1;
          char v66 = *(unsigned char *)(*(void *)(a2 + *v10) + v64);
          *(void *)(a2 + v63) = v65;
          uint64_t v67 = v66 & 0x7F;
          if ((v66 & 0x80) == 0) {
            goto LABEL_137;
          }
          uint64_t v68 = *v3;
          unint64_t v69 = *(void *)(a2 + v68);
          if (v69 == -1 || v69 >= *(void *)(a2 + *v6)) {
            goto LABEL_136;
          }
          unint64_t v70 = v69 + 1;
          int v71 = *(char *)(*(void *)(a2 + *v10) + v69);
          *(void *)(a2 + v68) = v70;
          v67 |= (unint64_t)(v71 & 0x7F) << 7;
          if ((v71 & 0x80000000) == 0) {
            goto LABEL_137;
          }
          uint64_t v72 = *v3;
          unint64_t v73 = *(void *)(a2 + v72);
          if (v73 == -1 || v73 >= *(void *)(a2 + *v6)) {
            goto LABEL_136;
          }
          unint64_t v74 = v73 + 1;
          int v75 = *(char *)(*(void *)(a2 + *v10) + v73);
          *(void *)(a2 + v72) = v74;
          v67 |= (unint64_t)(v75 & 0x7F) << 14;
          if ((v75 & 0x80000000) == 0) {
            goto LABEL_137;
          }
          uint64_t v76 = *v3;
          unint64_t v77 = *(void *)(a2 + v76);
          if (v77 == -1 || v77 >= *(void *)(a2 + *v6)) {
            goto LABEL_136;
          }
          unint64_t v78 = v77 + 1;
          int v79 = *(char *)(*(void *)(a2 + *v10) + v77);
          *(void *)(a2 + v76) = v78;
          v67 |= (unint64_t)(v79 & 0x7F) << 21;
          if ((v79 & 0x80000000) == 0) {
            goto LABEL_137;
          }
          uint64_t v80 = *v3;
          unint64_t v81 = *(void *)(a2 + v80);
          if (v81 == -1 || v81 >= *(void *)(a2 + *v6)) {
            goto LABEL_136;
          }
          unint64_t v82 = v81 + 1;
          int v83 = *(char *)(*(void *)(a2 + *v10) + v81);
          *(void *)(a2 + v80) = v82;
          v67 |= (unint64_t)(v83 & 0x7F) << 28;
          if ((v83 & 0x80000000) == 0) {
            goto LABEL_137;
          }
          uint64_t v169 = *v3;
          unint64_t v170 = *(void *)(a2 + v169);
          if (v170 == -1 || v170 >= *(void *)(a2 + *v6)) {
            goto LABEL_136;
          }
          unint64_t v171 = v170 + 1;
          int v172 = *(char *)(*(void *)(a2 + *v10) + v170);
          *(void *)(a2 + v169) = v171;
          v67 |= (unint64_t)(v172 & 0x7F) << 35;
          if (v172 < 0)
          {
            uint64_t v189 = *v3;
            unint64_t v190 = *(void *)(a2 + v189);
            if (v190 == -1 || v190 >= *(void *)(a2 + *v6)) {
              goto LABEL_136;
            }
            unint64_t v191 = v190 + 1;
            int v192 = *(char *)(*(void *)(a2 + *v10) + v190);
            *(void *)(a2 + v189) = v191;
            v67 |= (unint64_t)(v192 & 0x7F) << 42;
            if (v192 < 0)
            {
              uint64_t v193 = *v3;
              unint64_t v194 = *(void *)(a2 + v193);
              if (v194 == -1 || v194 >= *(void *)(a2 + *v6)) {
                goto LABEL_136;
              }
              unint64_t v195 = v194 + 1;
              int v196 = *(char *)(*(void *)(a2 + *v10) + v194);
              *(void *)(a2 + v193) = v195;
              v67 |= (unint64_t)(v196 & 0x7F) << 49;
              if (v196 < 0)
              {
                uint64_t v197 = *v3;
                unint64_t v198 = *(void *)(a2 + v197);
                if (v198 == -1 || v198 >= *(void *)(a2 + *v6)) {
                  goto LABEL_136;
                }
                unint64_t v199 = v198 + 1;
                int v200 = *(char *)(*(void *)(a2 + *v10) + v198);
                *(void *)(a2 + v197) = v199;
                v67 |= (unint64_t)(v200 & 0x7F) << 56;
                if (v200 < 0)
                {
                  uint64_t v201 = *v3;
                  unint64_t v202 = *(void *)(a2 + v201);
                  if (v202 == -1 || v202 >= *(void *)(a2 + *v6)) {
                    goto LABEL_136;
                  }
                  unint64_t v203 = v202 + 1;
                  uint64_t v204 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v202);
                  *(void *)(a2 + v201) = v203;
                  if ((v204 & 0x80) != 0)
                  {
                    uint64_t v67 = 0;
                    goto LABEL_139;
                  }
                  v67 |= v204 << 63;
                }
              }
            }
          }
LABEL_137:
          if (*(unsigned char *)(a2 + *v8)) {
            uint64_t v67 = 0;
          }
LABEL_139:
          *(unsigned char *)(a1 + 43) = v67 != 0;
          goto LABEL_5;
        case 6u:
          *(unsigned char *)(a1 + 48) |= 0x10u;
          uint64_t v126 = *v3;
          unint64_t v127 = *(void *)(a2 + v126);
          if (v127 == -1 || v127 >= *(void *)(a2 + *v6))
          {
            uint64_t v130 = 0;
LABEL_151:
            *(unsigned char *)(a2 + *v8) = 1;
            goto LABEL_152;
          }
          unint64_t v128 = v127 + 1;
          char v129 = *(unsigned char *)(*(void *)(a2 + *v10) + v127);
          *(void *)(a2 + v126) = v128;
          uint64_t v130 = v129 & 0x7F;
          if ((v129 & 0x80) == 0) {
            goto LABEL_152;
          }
          uint64_t v131 = *v3;
          unint64_t v132 = *(void *)(a2 + v131);
          if (v132 == -1 || v132 >= *(void *)(a2 + *v6)) {
            goto LABEL_151;
          }
          unint64_t v133 = v132 + 1;
          int v134 = *(char *)(*(void *)(a2 + *v10) + v132);
          *(void *)(a2 + v131) = v133;
          v130 |= (unint64_t)(v134 & 0x7F) << 7;
          if ((v134 & 0x80000000) == 0) {
            goto LABEL_152;
          }
          uint64_t v135 = *v3;
          unint64_t v136 = *(void *)(a2 + v135);
          if (v136 == -1 || v136 >= *(void *)(a2 + *v6)) {
            goto LABEL_151;
          }
          unint64_t v137 = v136 + 1;
          int v138 = *(char *)(*(void *)(a2 + *v10) + v136);
          *(void *)(a2 + v135) = v137;
          v130 |= (unint64_t)(v138 & 0x7F) << 14;
          if ((v138 & 0x80000000) == 0) {
            goto LABEL_152;
          }
          uint64_t v139 = *v3;
          unint64_t v140 = *(void *)(a2 + v139);
          if (v140 == -1 || v140 >= *(void *)(a2 + *v6)) {
            goto LABEL_151;
          }
          unint64_t v141 = v140 + 1;
          int v142 = *(char *)(*(void *)(a2 + *v10) + v140);
          *(void *)(a2 + v139) = v141;
          v130 |= (unint64_t)(v142 & 0x7F) << 21;
          if ((v142 & 0x80000000) == 0) {
            goto LABEL_152;
          }
          uint64_t v143 = *v3;
          unint64_t v144 = *(void *)(a2 + v143);
          if (v144 == -1 || v144 >= *(void *)(a2 + *v6)) {
            goto LABEL_151;
          }
          unint64_t v145 = v144 + 1;
          int v146 = *(char *)(*(void *)(a2 + *v10) + v144);
          *(void *)(a2 + v143) = v145;
          v130 |= (unint64_t)(v146 & 0x7F) << 28;
          if ((v146 & 0x80000000) == 0) {
            goto LABEL_152;
          }
          uint64_t v181 = *v3;
          unint64_t v182 = *(void *)(a2 + v181);
          if (v182 == -1 || v182 >= *(void *)(a2 + *v6)) {
            goto LABEL_151;
          }
          unint64_t v183 = v182 + 1;
          int v184 = *(char *)(*(void *)(a2 + *v10) + v182);
          *(void *)(a2 + v181) = v183;
          v130 |= (unint64_t)(v184 & 0x7F) << 35;
          if (v184 < 0)
          {
            uint64_t v237 = *v3;
            unint64_t v238 = *(void *)(a2 + v237);
            if (v238 == -1 || v238 >= *(void *)(a2 + *v6)) {
              goto LABEL_151;
            }
            unint64_t v239 = v238 + 1;
            int v240 = *(char *)(*(void *)(a2 + *v10) + v238);
            *(void *)(a2 + v237) = v239;
            v130 |= (unint64_t)(v240 & 0x7F) << 42;
            if (v240 < 0)
            {
              uint64_t v241 = *v3;
              unint64_t v242 = *(void *)(a2 + v241);
              if (v242 == -1 || v242 >= *(void *)(a2 + *v6)) {
                goto LABEL_151;
              }
              unint64_t v243 = v242 + 1;
              int v244 = *(char *)(*(void *)(a2 + *v10) + v242);
              *(void *)(a2 + v241) = v243;
              v130 |= (unint64_t)(v244 & 0x7F) << 49;
              if (v244 < 0)
              {
                uint64_t v245 = *v3;
                unint64_t v246 = *(void *)(a2 + v245);
                if (v246 == -1 || v246 >= *(void *)(a2 + *v6)) {
                  goto LABEL_151;
                }
                unint64_t v247 = v246 + 1;
                int v248 = *(char *)(*(void *)(a2 + *v10) + v246);
                *(void *)(a2 + v245) = v247;
                v130 |= (unint64_t)(v248 & 0x7F) << 56;
                if (v248 < 0)
                {
                  uint64_t v249 = *v3;
                  unint64_t v250 = *(void *)(a2 + v249);
                  if (v250 == -1 || v250 >= *(void *)(a2 + *v6)) {
                    goto LABEL_151;
                  }
                  unint64_t v251 = v250 + 1;
                  uint64_t v252 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v250);
                  *(void *)(a2 + v249) = v251;
                  if ((v252 & 0x80) != 0)
                  {
                    uint64_t v130 = 0;
                    goto LABEL_154;
                  }
                  v130 |= v252 << 63;
                }
              }
            }
          }
LABEL_152:
          if (*(unsigned char *)(a2 + *v8)) {
            uint64_t v130 = 0;
          }
LABEL_154:
          *(unsigned char *)(a1 + 44) = v130 != 0;
          goto LABEL_5;
        case 7u:
          *(unsigned char *)(a1 + 48) |= 2u;
          uint64_t v147 = *v3;
          unint64_t v148 = *(void *)(a2 + v147);
          if (v148 == -1 || v148 >= *(void *)(a2 + *v6))
          {
            uint64_t v151 = 0;
LABEL_156:
            *(unsigned char *)(a2 + *v8) = 1;
            goto LABEL_157;
          }
          unint64_t v149 = v148 + 1;
          char v150 = *(unsigned char *)(*(void *)(a2 + *v10) + v148);
          *(void *)(a2 + v147) = v149;
          uint64_t v151 = v150 & 0x7F;
          if ((v150 & 0x80) == 0) {
            goto LABEL_157;
          }
          uint64_t v152 = *v3;
          unint64_t v153 = *(void *)(a2 + v152);
          if (v153 == -1 || v153 >= *(void *)(a2 + *v6)) {
            goto LABEL_156;
          }
          unint64_t v154 = v153 + 1;
          int v155 = *(char *)(*(void *)(a2 + *v10) + v153);
          *(void *)(a2 + v152) = v154;
          v151 |= (unint64_t)(v155 & 0x7F) << 7;
          if ((v155 & 0x80000000) == 0) {
            goto LABEL_157;
          }
          uint64_t v156 = *v3;
          unint64_t v157 = *(void *)(a2 + v156);
          if (v157 == -1 || v157 >= *(void *)(a2 + *v6)) {
            goto LABEL_156;
          }
          unint64_t v158 = v157 + 1;
          int v159 = *(char *)(*(void *)(a2 + *v10) + v157);
          *(void *)(a2 + v156) = v158;
          v151 |= (unint64_t)(v159 & 0x7F) << 14;
          if ((v159 & 0x80000000) == 0) {
            goto LABEL_157;
          }
          uint64_t v160 = *v3;
          unint64_t v161 = *(void *)(a2 + v160);
          if (v161 == -1 || v161 >= *(void *)(a2 + *v6)) {
            goto LABEL_156;
          }
          unint64_t v162 = v161 + 1;
          int v163 = *(char *)(*(void *)(a2 + *v10) + v161);
          *(void *)(a2 + v160) = v162;
          v151 |= (unint64_t)(v163 & 0x7F) << 21;
          if ((v163 & 0x80000000) == 0) {
            goto LABEL_157;
          }
          uint64_t v164 = *v3;
          unint64_t v165 = *(void *)(a2 + v164);
          if (v165 == -1 || v165 >= *(void *)(a2 + *v6)) {
            goto LABEL_156;
          }
          unint64_t v166 = v165 + 1;
          int v167 = *(char *)(*(void *)(a2 + *v10) + v165);
          *(void *)(a2 + v164) = v166;
          v151 |= (unint64_t)(v167 & 0x7F) << 28;
          if ((v167 & 0x80000000) == 0) {
            goto LABEL_157;
          }
          uint64_t v185 = *v3;
          unint64_t v186 = *(void *)(a2 + v185);
          if (v186 == -1 || v186 >= *(void *)(a2 + *v6)) {
            goto LABEL_156;
          }
          unint64_t v187 = v186 + 1;
          int v188 = *(char *)(*(void *)(a2 + *v10) + v186);
          *(void *)(a2 + v185) = v187;
          v151 |= (unint64_t)(v188 & 0x7F) << 35;
          if (v188 < 0)
          {
            uint64_t v253 = *v3;
            unint64_t v254 = *(void *)(a2 + v253);
            if (v254 == -1 || v254 >= *(void *)(a2 + *v6)) {
              goto LABEL_156;
            }
            unint64_t v255 = v254 + 1;
            int v256 = *(char *)(*(void *)(a2 + *v10) + v254);
            *(void *)(a2 + v253) = v255;
            v151 |= (unint64_t)(v256 & 0x7F) << 42;
            if (v256 < 0)
            {
              uint64_t v257 = *v3;
              unint64_t v258 = *(void *)(a2 + v257);
              if (v258 == -1 || v258 >= *(void *)(a2 + *v6)) {
                goto LABEL_156;
              }
              unint64_t v259 = v258 + 1;
              int v260 = *(char *)(*(void *)(a2 + *v10) + v258);
              *(void *)(a2 + v257) = v259;
              v151 |= (unint64_t)(v260 & 0x7F) << 49;
              if (v260 < 0)
              {
                uint64_t v261 = *v3;
                unint64_t v262 = *(void *)(a2 + v261);
                if (v262 == -1 || v262 >= *(void *)(a2 + *v6)) {
                  goto LABEL_156;
                }
                unint64_t v263 = v262 + 1;
                int v264 = *(char *)(*(void *)(a2 + *v10) + v262);
                *(void *)(a2 + v261) = v263;
                v151 |= (unint64_t)(v264 & 0x7F) << 56;
                if (v264 < 0)
                {
                  uint64_t v265 = *v3;
                  unint64_t v266 = *(void *)(a2 + v265);
                  if (v266 == -1 || v266 >= *(void *)(a2 + *v6)) {
                    goto LABEL_156;
                  }
                  unint64_t v267 = v266 + 1;
                  uint64_t v268 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v266);
                  *(void *)(a2 + v265) = v267;
                  if ((v268 & 0x80) != 0)
                  {
                    uint64_t v151 = 0;
                    goto LABEL_159;
                  }
                  v151 |= v268 << 63;
                }
              }
            }
          }
LABEL_157:
          if (*(unsigned char *)(a2 + *v8)) {
            uint64_t v151 = 0;
          }
LABEL_159:
          *(unsigned char *)(a1 + 41) = v151 != 0;
          goto LABEL_5;
        case 8u:
          *(unsigned char *)(a1 + 48) |= 4u;
          uint64_t v105 = *v3;
          unint64_t v106 = *(void *)(a2 + v105);
          if (v106 == -1 || v106 >= *(void *)(a2 + *v6))
          {
            uint64_t v109 = 0;
LABEL_146:
            *(unsigned char *)(a2 + *v8) = 1;
            goto LABEL_147;
          }
          unint64_t v107 = v106 + 1;
          char v108 = *(unsigned char *)(*(void *)(a2 + *v10) + v106);
          *(void *)(a2 + v105) = v107;
          uint64_t v109 = v108 & 0x7F;
          if ((v108 & 0x80) == 0) {
            goto LABEL_147;
          }
          uint64_t v110 = *v3;
          unint64_t v111 = *(void *)(a2 + v110);
          if (v111 == -1 || v111 >= *(void *)(a2 + *v6)) {
            goto LABEL_146;
          }
          unint64_t v112 = v111 + 1;
          int v113 = *(char *)(*(void *)(a2 + *v10) + v111);
          *(void *)(a2 + v110) = v112;
          v109 |= (unint64_t)(v113 & 0x7F) << 7;
          if ((v113 & 0x80000000) == 0) {
            goto LABEL_147;
          }
          uint64_t v114 = *v3;
          unint64_t v115 = *(void *)(a2 + v114);
          if (v115 == -1 || v115 >= *(void *)(a2 + *v6)) {
            goto LABEL_146;
          }
          unint64_t v116 = v115 + 1;
          int v117 = *(char *)(*(void *)(a2 + *v10) + v115);
          *(void *)(a2 + v114) = v116;
          v109 |= (unint64_t)(v117 & 0x7F) << 14;
          if ((v117 & 0x80000000) == 0) {
            goto LABEL_147;
          }
          uint64_t v118 = *v3;
          unint64_t v119 = *(void *)(a2 + v118);
          if (v119 == -1 || v119 >= *(void *)(a2 + *v6)) {
            goto LABEL_146;
          }
          unint64_t v120 = v119 + 1;
          int v121 = *(char *)(*(void *)(a2 + *v10) + v119);
          *(void *)(a2 + v118) = v120;
          v109 |= (unint64_t)(v121 & 0x7F) << 21;
          if ((v121 & 0x80000000) == 0) {
            goto LABEL_147;
          }
          uint64_t v122 = *v3;
          unint64_t v123 = *(void *)(a2 + v122);
          if (v123 == -1 || v123 >= *(void *)(a2 + *v6)) {
            goto LABEL_146;
          }
          unint64_t v124 = v123 + 1;
          int v125 = *(char *)(*(void *)(a2 + *v10) + v123);
          *(void *)(a2 + v122) = v124;
          v109 |= (unint64_t)(v125 & 0x7F) << 28;
          if ((v125 & 0x80000000) == 0) {
            goto LABEL_147;
          }
          uint64_t v177 = *v3;
          unint64_t v178 = *(void *)(a2 + v177);
          if (v178 == -1 || v178 >= *(void *)(a2 + *v6)) {
            goto LABEL_146;
          }
          unint64_t v179 = v178 + 1;
          int v180 = *(char *)(*(void *)(a2 + *v10) + v178);
          *(void *)(a2 + v177) = v179;
          v109 |= (unint64_t)(v180 & 0x7F) << 35;
          if (v180 < 0)
          {
            uint64_t v221 = *v3;
            unint64_t v222 = *(void *)(a2 + v221);
            if (v222 == -1 || v222 >= *(void *)(a2 + *v6)) {
              goto LABEL_146;
            }
            unint64_t v223 = v222 + 1;
            int v224 = *(char *)(*(void *)(a2 + *v10) + v222);
            *(void *)(a2 + v221) = v223;
            v109 |= (unint64_t)(v224 & 0x7F) << 42;
            if (v224 < 0)
            {
              uint64_t v225 = *v3;
              unint64_t v226 = *(void *)(a2 + v225);
              if (v226 == -1 || v226 >= *(void *)(a2 + *v6)) {
                goto LABEL_146;
              }
              unint64_t v227 = v226 + 1;
              int v228 = *(char *)(*(void *)(a2 + *v10) + v226);
              *(void *)(a2 + v225) = v227;
              v109 |= (unint64_t)(v228 & 0x7F) << 49;
              if (v228 < 0)
              {
                uint64_t v229 = *v3;
                unint64_t v230 = *(void *)(a2 + v229);
                if (v230 == -1 || v230 >= *(void *)(a2 + *v6)) {
                  goto LABEL_146;
                }
                unint64_t v231 = v230 + 1;
                int v232 = *(char *)(*(void *)(a2 + *v10) + v230);
                *(void *)(a2 + v229) = v231;
                v109 |= (unint64_t)(v232 & 0x7F) << 56;
                if (v232 < 0)
                {
                  uint64_t v233 = *v3;
                  unint64_t v234 = *(void *)(a2 + v233);
                  if (v234 == -1 || v234 >= *(void *)(a2 + *v6)) {
                    goto LABEL_146;
                  }
                  unint64_t v235 = v234 + 1;
                  uint64_t v236 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v234);
                  *(void *)(a2 + v233) = v235;
                  if ((v236 & 0x80) != 0)
                  {
                    uint64_t v109 = 0;
                    goto LABEL_149;
                  }
                  v109 |= v236 << 63;
                }
              }
            }
          }
LABEL_147:
          if (*(unsigned char *)(a2 + *v8)) {
            uint64_t v109 = 0;
          }
LABEL_149:
          *(unsigned char *)(a1 + 42) = v109 != 0;
LABEL_5:
          uint64_t v4 = *v3;
          unint64_t v5 = *(void *)(a2 + v4);
          unint64_t v7 = *(void *)(a2 + *v6);
          if (v5 >= v7) {
            return *(unsigned char *)(a2 + *v8) == 0;
          }
          break;
        case 9u:
          uint64_t v14 = PBReaderReadData();
          uint64_t v15 = 16;
LABEL_4:
          os_log_type_t v16 = *(void **)(a1 + v15);
          *(void *)(a1 + v15) = v14;

          goto LABEL_5;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_5;
      }
    }
    unint64_t v19 = 0;
LABEL_40:
    unsigned char *v17 = 1;
    goto LABEL_41;
  }
  return *(unsigned char *)(a2 + *v8) == 0;
}

BOOL NWPBAgentClassReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int)*MEMORY[0x1E4F940E8];
  unint64_t v5 = *(void *)(a2 + v4);
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]);
  BOOL v8 = (int *)MEMORY[0x1E4F940C8];
  if (v5 < v7)
  {
    id v10 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      uint64_t v14 = (unsigned char *)(a2 + *v8);
      if (*v14) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
      if (v5 >= v7) {
        break;
      }
      char v15 = *(unsigned char *)(*(void *)(a2 + *v10) + v5);
      *(void *)(a2 + (int)v4) = v5 + 1;
      unint64_t v16 = v15 & 0x7F;
      if ((v15 & 0x80) == 0) {
        goto LABEL_40;
      }
      uint64_t v17 = *v3;
      unint64_t v18 = *(void *)(a2 + v17);
      if (v18 == -1 || v18 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v19 = v18 + 1;
      int v20 = *(char *)(*(void *)(a2 + *v10) + v18);
      *(void *)(a2 + v17) = v19;
      v16 |= (unint64_t)(v20 & 0x7F) << 7;
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v21 = *v3;
      unint64_t v22 = *(void *)(a2 + v21);
      if (v22 == -1 || v22 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v23 = v22 + 1;
      int v24 = *(char *)(*(void *)(a2 + *v10) + v22);
      *(void *)(a2 + v21) = v23;
      v16 |= (unint64_t)(v24 & 0x7F) << 14;
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v25 = *v3;
      unint64_t v26 = *(void *)(a2 + v25);
      if (v26 == -1 || v26 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v27 = v26 + 1;
      int v28 = *(char *)(*(void *)(a2 + *v10) + v26);
      *(void *)(a2 + v25) = v27;
      v16 |= (unint64_t)(v28 & 0x7F) << 21;
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v29 = *v3;
      unint64_t v30 = *(void *)(a2 + v29);
      if (v30 == -1 || v30 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v31 = v30 + 1;
      int v32 = *(char *)(*(void *)(a2 + *v10) + v30);
      *(void *)(a2 + v29) = v31;
      v16 |= (unint64_t)(v32 & 0x7F) << 28;
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v33 = *v3;
      unint64_t v34 = *(void *)(a2 + v33);
      if (v34 == -1 || v34 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v35 = v34 + 1;
      int v36 = *(char *)(*(void *)(a2 + *v10) + v34);
      *(void *)(a2 + v33) = v35;
      if ((v36 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v37 = *v3;
      unint64_t v38 = *(void *)(a2 + v37);
      if (v38 == -1 || v38 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v39 = v38 + 1;
      int v40 = *(char *)(*(void *)(a2 + *v10) + v38);
      *(void *)(a2 + v37) = v39;
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v41 = *v3;
      unint64_t v42 = *(void *)(a2 + v41);
      if (v42 == -1 || v42 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v43 = v42 + 1;
      int v44 = *(char *)(*(void *)(a2 + *v10) + v42);
      *(void *)(a2 + v41) = v43;
      if ((v44 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v45 = *v3;
      unint64_t v46 = *(void *)(a2 + v45);
      if (v46 == -1 || v46 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v47 = v46 + 1;
      int v48 = *(char *)(*(void *)(a2 + *v10) + v46);
      *(void *)(a2 + v45) = v47;
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v49 = *v3;
      unint64_t v50 = *(void *)(a2 + v49);
      if (v50 == -1 || v50 >= *(void *)(a2 + *v6))
      {
LABEL_38:
        uint64_t v14 = (unsigned char *)(a2 + *v8);
        goto LABEL_39;
      }
      unint64_t v51 = v50 + 1;
      int v52 = *(char *)(*(void *)(a2 + *v10) + v50);
      *(void *)(a2 + v49) = v51;
      if (v52 < 0)
      {
        unint64_t v16 = 0;
        int v53 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_42;
      }
LABEL_40:
      int v53 = *(unsigned __int8 *)(a2 + *v8);
      if (*(unsigned char *)(a2 + *v8)) {
        unint64_t v16 = 0;
      }
LABEL_42:
      if (v53) {
        BOOL v54 = 1;
      }
      else {
        BOOL v54 = (v16 & 7) == 4;
      }
      if (v54) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
      if ((v16 >> 3) == 2)
      {
        uint64_t v11 = PBReaderReadString();
        uint64_t v12 = 16;
LABEL_4:
        unint64_t v13 = *(void **)(a1 + v12);
        *(void *)(a1 + v12) = v11;

        goto LABEL_5;
      }
      if ((v16 >> 3) == 1)
      {
        uint64_t v11 = PBReaderReadString();
        uint64_t v12 = 8;
        goto LABEL_4;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_5:
      uint64_t v4 = *v3;
      unint64_t v5 = *(void *)(a2 + v4);
      unint64_t v7 = *(void *)(a2 + *v6);
      if (v5 >= v7) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
    }
    unint64_t v16 = 0;
LABEL_39:
    *uint64_t v14 = 1;
    goto LABEL_40;
  }
  return *(unsigned char *)(a2 + *v8) == 0;
}

BOOL nw_protocol_http_client_bottom_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_create";
    id v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_create";
          unint64_t v13 = "%{public}s called with null parameters";
LABEL_40:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v20 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_create";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_41;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_create";
          unint64_t v13 = "%{public}s called with null parameters, no backtrace";
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_create";
          unint64_t v13 = "%{public}s called with null parameters, backtrace limit exceeded";
          goto LABEL_40;
        }
      }
    }
LABEL_41:
    if (v10) {
      free(v10);
    }
    return 0;
  }
  unint64_t v5 = (char *)malloc_type_calloc(1uLL, 0x128uLL, 0xEAFB8F1AuLL);
  if (v5)
  {
LABEL_3:
    *((void *)v5 + 36) = 0;
    *((_OWORD *)v5 + 16) = 0u;
    *((_OWORD *)v5 + 17) = 0u;
    *((_OWORD *)v5 + 14) = 0u;
    *((_OWORD *)v5 + 15) = 0u;
    *((_OWORD *)v5 + 12) = 0u;
    *((_OWORD *)v5 + 13) = 0u;
    *((_OWORD *)v5 + 10) = 0u;
    *((_OWORD *)v5 + 11) = 0u;
    *((_OWORD *)v5 + 8) = 0u;
    *((_OWORD *)v5 + 9) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *(_OWORD *)unint64_t v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    uint64_t v25 = (uint64_t)v5;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 0x40000000;
    aBlock[2] = __nw_protocol_http_client_bottom_create_block_invoke;
    aBlock[3] = &unk_1E523D490;
    aBlock[4] = buf;
    *((void *)v5 + 22) = _Block_copy(aBlock);
    _Block_object_dispose(buf, 8);
    BOOL logging_disabled = nw_path_parameters_get_logging_disabled(*(void *)(a4 + 104));
    if (logging_disabled) {
      char v7 = 4;
    }
    else {
      char v7 = 0;
    }
    v5[294] = v5[294] & 0xFB | v7;
    if (v5) {
      BOOL v8 = logging_disabled;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8)
    {
      if (gLogDatapath)
      {
        unint64_t v16 = __nwlog_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = "";
          unint64_t v18 = v5 + 208;
          if (!v5) {
            unint64_t v18 = "";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_create";
          if (v5) {
            uint64_t v17 = " ";
          }
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v18;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v25 = (uint64_t)v17;
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    if (nw_protocol_http_client_bottom_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http_client_bottom_identifier::onceToken, &__block_literal_global_22479);
    }
    *((void *)v5 + 2) = &nw_protocol_http_client_bottom_identifier::protocol_identifier;
    if (nw_protocol_http_client_bottom_get_callbacks(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_http_client_bottom_get_callbacks(void)::onceToken, &__block_literal_global_20_22480);
    }
    *((void *)v5 + 3) = &nw_protocol_http_client_bottom_get_callbacks(void)::protocol_callbacks;
    *((void *)v5 + 5) = v5;
    if (nw_protocol_http_client_bottom_get_listen_callbacks(void)::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http_client_bottom_get_listen_callbacks(void)::onceToken, &__block_literal_global_39);
    }
    *((void *)v5 + 8) = &nw_protocol_http_client_bottom_get_listen_callbacks(void)::listen_protocol_callbacks;
    *((void *)v5 + 11) = v5;
    *((_WORD *)v5 + 146) = 0;
    return (BOOL)v5;
  }
  uint64_t v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "strict_calloc";
  *(_WORD *)&buf[12] = 2048;
  *(void *)&buf[14] = 1;
  *(_WORD *)&buf[22] = 2048;
  uint64_t v25 = 296;
  char v15 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t __nw_protocol_http_client_bottom_create_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

void ___ZL51nw_protocol_http_client_bottom_get_listen_callbacksv_block_invoke()
{
  nw_protocol_http_client_bottom_get_listen_callbacks(void)::listen_protocol_callbacks = (uint64_t)nw_protocol_http_client_bottom_listen_protocol_new_flow;
  qword_1E8F6A110 = (uint64_t)nw_protocol_http_client_bottom_listen_protocol_disconnected;
}

void nw_protocol_http_client_bottom_listen_protocol_disconnected(nw_listen_protocol *a1, nw_protocol *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    id v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v3, &type, &v20)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      uint64_t v6 = "%{public}s called with null listener";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v14 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_22;
      }
      if (!v14) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      uint64_t v6 = "%{public}s called with null listener, no backtrace";
    }
    else
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      uint64_t v6 = "%{public}s called with null listener, backtrace limit exceeded";
    }
    goto LABEL_20;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    id v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v3, &type, &v20)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      uint64_t v6 = "%{public}s called with null existing_protocol";
      goto LABEL_20;
    }
    if (v20)
    {
      char v15 = (char *)__nw_create_backtrace_string();
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v16 = os_log_type_enabled(v4, type);
      if (v15)
      {
        if (!v16) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446466;
        unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
        __int16 v24 = 2082;
        uint64_t v25 = v15;
        uint64_t v17 = "%{public}s called with null existing_protocol, dumping backtrace:%{public}s";
        goto LABEL_52;
      }
      if (!v16) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      uint64_t v6 = "%{public}s called with null existing_protocol, no backtrace";
    }
    else
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      uint64_t v6 = "%{public}s called with null existing_protocol, backtrace limit exceeded";
    }
LABEL_20:
    uint64_t v11 = v4;
    os_log_type_t v12 = v5;
LABEL_21:
    _os_log_impl(&dword_1830D4000, v11, v12, v6, buf, 0xCu);
    goto LABEL_22;
  }
  handle = (nw_protocol **)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    id v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v3, &type, &v20)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      uint64_t v6 = "%{public}s called with null http_client_bottom";
      goto LABEL_20;
    }
    if (v20)
    {
      char v15 = (char *)__nw_create_backtrace_string();
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v18 = os_log_type_enabled(v4, type);
      if (v15)
      {
        if (!v18) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446466;
        unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
        __int16 v24 = 2082;
        uint64_t v25 = v15;
        uint64_t v17 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_52:
        _os_log_impl(&dword_1830D4000, v4, v5, v17, buf, 0x16u);
LABEL_53:
        free(v15);
        if (!v3) {
          return;
        }
        goto LABEL_23;
      }
      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      uint64_t v6 = "%{public}s called with null http_client_bottom, no backtrace";
    }
    else
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      uint64_t v6 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    }
    goto LABEL_20;
  }
  if (handle[17] != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    id v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v3, &type, &v20)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      uint64_t v6 = "%{public}s Ignoring listen protocol disconnected, not sent by output handler";
      goto LABEL_20;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      uint64_t v6 = "%{public}s Ignoring listen protocol disconnected, not sent by output handler, backtrace limit exceeded";
      goto LABEL_20;
    }
    char v7 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v8 = gLogObj;
    os_log_type_t v9 = type;
    BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v7)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
        __int16 v24 = 2082;
        uint64_t v25 = v7;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s Ignoring listen protocol disconnected, not sent by output handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v7);
      if (!v3) {
        return;
      }
LABEL_23:
      free(v3);
      return;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
      uint64_t v6 = "%{public}s Ignoring listen protocol disconnected, not sent by output handler, no backtrace";
      uint64_t v11 = v8;
      os_log_type_t v12 = v9;
      goto LABEL_21;
    }
LABEL_22:
    if (!v3) {
      return;
    }
    goto LABEL_23;
  }
  if ((*((unsigned char *)handle + 294) & 4) == 0)
  {
    if (gLogDatapath)
    {
      unint64_t v19 = __nwlog_obj();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        unint64_t v23 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
        __int16 v24 = 2082;
        uint64_t v25 = (char *)(handle + 26);
        __int16 v26 = 2080;
        unint64_t v27 = " ";
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%slower protocol is disconnected", buf, 0x20u);
      }
    }
  }
  nw_protocol_http_client_bottom_teardown((uint64_t)handle);
}

void nw_protocol_http_client_bottom_teardown(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_http_client_bottom_teardown";
    id v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v14 = "nw_protocol_http_client_bottom_teardown";
      uint64_t v6 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v14 = "nw_protocol_http_client_bottom_teardown";
          __int16 v15 = 2082;
          BOOL v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_40:
        if (!v3) {
          return;
        }
LABEL_41:
        free(v3);
        return;
      }
      if (!v8) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v14 = "nw_protocol_http_client_bottom_teardown";
      uint64_t v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v14 = "nw_protocol_http_client_bottom_teardown";
      uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_39:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_40;
  }
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    nw_protocol_remove_instance(*(void *)(a1 + 40));
    uint64_t v2 = *(void *)(v1 + 136);
    if (v2)
    {
      nw_protocol_remove_listen_handler(v2, v1 + 64);
      *(void *)(v1 + 136) = 0;
    }
    if ((*(unsigned char *)(v1 + 294) & 8) == 0 && !*(void *)(v1 + 48) && *(void *)(v1 + 184) == *(void *)(v1 + 192))
    {
      nw_http_client_bottom_destroy(v1);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_protocol_http_client_bottom_teardown";
  id v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_http_client_bottom_teardown";
    uint64_t v6 = "%{public}s called with null http_client_bottom";
    goto LABEL_39;
  }
  if (!v11)
  {
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_http_client_bottom_teardown";
    uint64_t v6 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    goto LABEL_39;
  }
  os_log_type_t v9 = (char *)__nw_create_backtrace_string();
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  BOOL v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_http_client_bottom_teardown";
    uint64_t v6 = "%{public}s called with null http_client_bottom, no backtrace";
    goto LABEL_39;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v14 = "nw_protocol_http_client_bottom_teardown";
    __int16 v15 = 2082;
    BOOL v16 = v9;
    _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v9);
  if (v3) {
    goto LABEL_41;
  }
}

void nw_http_client_bottom_destroy(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 294) & 4) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136446722;
        BOOL v10 = "nw_http_client_bottom_destroy";
        __int16 v11 = 2082;
        uint64_t v12 = a1 + 208;
        __int16 v13 = 2080;
        BOOL v14 = " ";
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v9, 0x20u);
      }
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 176) + 16))();
  uint64_t v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    _Block_release(v2);
    *(void *)(a1 + 176) = 0;
  }
  id v3 = *(void **)(a1 + 184);
  if (v3)
  {
    *(void *)(a1 + 192) = v3;
    operator delete(v3);
  }
  if (*(unsigned char *)(a1 + 168))
  {
    uint64_t v4 = *(void **)(a1 + 160);
    if (v4) {
      os_release(v4);
    }
  }
  *(void *)(a1 + 160) = 0;
  if (*(unsigned char *)(a1 + 152))
  {
    os_log_type_t v5 = *(void **)(a1 + 144);
    if (v5) {
      os_release(v5);
    }
  }
  *(void *)(a1 + 144) = 0;
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v6 = *(void **)(a1 + 120);
    if (v6) {
      os_release(v6);
    }
  }
  *(void *)(a1 + 120) = 0;
  if (*(unsigned char *)(a1 + 112))
  {
    char v7 = *(void **)(a1 + 104);
    if (v7) {
      os_release(v7);
    }
  }
  free((void *)a1);
}

uint64_t nw_protocol_http_client_bottom_listen_protocol_new_flow(nw_listen_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  return 0;
}

void ___ZL44nw_protocol_http_client_bottom_get_callbacksv_block_invoke()
{
  qword_1E8F6A030 = (uint64_t)nw_protocol_common_get_input_frames;
  qword_1E8F6A038 = (uint64_t)nw_protocol_common_get_output_frames;
  qword_1E8F6A040 = (uint64_t)nw_protocol_common_finalize_output_frames;
  qword_1E8F6A058 = (uint64_t)nw_protocol_common_get_path;
  qword_1E8F6A060 = (uint64_t)nw_protocol_common_get_local_endpoint;
  qword_1E8F6A0A8 = (uint64_t)nw_protocol_common_get_output_local_endpoint;
  qword_1E8F6A0B0 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1E8F6A020 = (uint64_t)nw_protocol_common_input_available;
  qword_1E8F6A028 = (uint64_t)nw_protocol_common_output_available;
  qword_1E8F6A098 = (uint64_t)nw_protocol_common_input_finished;
  qword_1E8F6A0A0 = (uint64_t)nw_protocol_common_output_finished;
  qword_1E8F6A0E8 = (uint64_t)nw_protocol_common_input_flush;
  qword_1E8F6A0E0 = (uint64_t)nw_protocol_common_reset;
  qword_1E8F6A0D8 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1E8F6A0C0 = (uint64_t)nw_protocol_common_copy_info;
  qword_1E8F6A090 = (uint64_t)nw_protocol_common_supports_external_data;
  qword_1E8F6A0B8 = (uint64_t)nw_protocol_common_waiting_for_output;
  qword_1E8F6A070 = (uint64_t)nw_protocol_common_register_notification;
  qword_1E8F6A078 = (uint64_t)nw_protocol_common_unregister_notification;
  qword_1E8F6A080 = (uint64_t)nw_protocol_common_notify;
  qword_1E8F6A088 = (uint64_t)nw_protocol_common_updated_path;
  qword_1E8F6A048 = (uint64_t)nw_protocol_common_link_state;
  nw_protocol_http_client_bottom_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_http_client_bottom_add_input_handler;
  qword_1E8F69FF0 = (uint64_t)nw_protocol_http_client_bottom_replace_input_handler;
  qword_1E8F69FE8 = (uint64_t)nw_protocol_http_client_bottom_remove_input_handler;
  qword_1E8F6A050 = (uint64_t)nw_protocol_http_client_bottom_get_parameters;
  qword_1E8F6A068 = (uint64_t)nw_protocol_http_client_bottom_get_remote_endpoint;
  qword_1E8F69FF8 = (uint64_t)nw_protocol_http_client_bottom_connect;
  qword_1E8F6A008 = (uint64_t)nw_protocol_http_client_bottom_connected;
  qword_1E8F6A000 = (uint64_t)nw_protocol_http_client_bottom_disconnect;
  qword_1E8F6A010 = (uint64_t)nw_protocol_http_client_bottom_disconnected;
  qword_1E8F6A018 = (uint64_t)nw_protocol_http_client_bottom_error;
}

void nw_protocol_http_client_bottom_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_http_client_bottom_error";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_http_client_bottom_error";
      char v7 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_protocol_http_client_bottom_error";
          __int16 v18 = 2082;
          unint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_48:
        if (!v4) {
          return;
        }
        goto LABEL_49;
      }
      if (!v9) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_http_client_bottom_error";
      char v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_http_client_bottom_error";
      char v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_47;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_http_client_bottom_error";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14)) {
      goto LABEL_48;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        os_log_type_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_http_client_bottom_error";
        char v7 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
        goto LABEL_47;
      }
      BOOL v10 = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (!v10)
      {
        if (!v11) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_http_client_bottom_error";
        char v7 = "%{public}s called with null http_client_bottom, no backtrace";
        goto LABEL_47;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v17 = "nw_protocol_http_client_bottom_error";
        __int16 v18 = 2082;
        unint64_t v19 = v10;
        uint64_t v12 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v5, v6, v12, buf, 0x16u);
      }
LABEL_33:
      free(v10);
      if (!v4) {
        return;
      }
LABEL_49:
      free(v4);
      return;
    }
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_48;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_http_client_bottom_error";
    char v7 = "%{public}s called with null http_client_bottom";
LABEL_47:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_48;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_http_client_bottom_error";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_http_client_bottom_error";
      char v7 = "%{public}s called with null other_protocol";
      goto LABEL_47;
    }
    if (!v14)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_http_client_bottom_error";
      char v7 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_47;
    }
    BOOL v10 = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v13 = os_log_type_enabled(v5, type);
    if (!v10)
    {
      if (!v13) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_http_client_bottom_error";
      char v7 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_47;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v17 = "nw_protocol_http_client_bottom_error";
      __int16 v18 = 2082;
      unint64_t v19 = v10;
      uint64_t v12 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  id v3 = (void *)handle[6];

  nw_protocol_error(v3, (uint64_t)a2);
}

void nw_protocol_http_client_bottom_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v5, &type, &v15)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
      BOOL v8 = "%{public}s called with null protocol";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_48:
        if (!v5) {
          return;
        }
        goto LABEL_49;
      }
      if (!v10) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
      BOOL v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
      BOOL v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_47;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v5, &type, &v15)) {
      goto LABEL_48;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v15)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
        BOOL v8 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
        goto LABEL_47;
      }
      BOOL v11 = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v12 = os_log_type_enabled(v6, type);
      if (!v11)
      {
        if (!v12) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
        BOOL v8 = "%{public}s called with null http_client_bottom, no backtrace";
        goto LABEL_47;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
        __int16 v19 = 2082;
        uint64_t v20 = v11;
        BOOL v13 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v6, v7, v13, buf, 0x16u);
      }
LABEL_33:
      free(v11);
      if (!v5) {
        return;
      }
LABEL_49:
      free(v5);
      return;
    }
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_48;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
    BOOL v8 = "%{public}s called with null http_client_bottom";
LABEL_47:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_48;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v5, &type, &v15)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
      BOOL v8 = "%{public}s called with null other_protocol";
      goto LABEL_47;
    }
    if (!v15)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
      BOOL v8 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_47;
    }
    BOOL v11 = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v14 = os_log_type_enabled(v6, type);
    if (!v11)
    {
      if (!v14) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
      BOOL v8 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_47;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v18 = "nw_protocol_http_client_bottom_disconnected";
      __int16 v19 = 2082;
      uint64_t v20 = v11;
      BOOL v13 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  handle[294] |= 2u;
  nw_protocol_remove_instance((uint64_t)handle);
  uint64_t v4 = (void *)*((void *)handle + 6);

  nw_protocol_disconnected(v4, (uint64_t)a2);
}

void nw_protocol_http_client_bottom_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
    BOOL v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v14, &type, &v24)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
      uint64_t v17 = "%{public}s called with null protocol";
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
          __int16 v28 = 2082;
          uint64_t v29 = (nw_protocol *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_74:
        if (!v14) {
          return;
        }
        goto LABEL_75;
      }
      if (!v19) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
      uint64_t v17 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
      uint64_t v17 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_73;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
    BOOL v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v14, &type, &v24)) {
      goto LABEL_74;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        char v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
        uint64_t v17 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
        goto LABEL_73;
      }
      uint64_t v20 = (char *)__nw_create_backtrace_string();
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v21) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
        uint64_t v17 = "%{public}s called with null http_client_bottom, no backtrace";
        goto LABEL_73;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
        __int16 v28 = 2082;
        uint64_t v29 = (nw_protocol *)v20;
        char v22 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_58:
        _os_log_impl(&dword_1830D4000, v15, v16, v22, buf, 0x16u);
      }
LABEL_59:
      free(v20);
      if (!v14) {
        return;
      }
LABEL_75:
      BOOL v13 = (char *)v14;
LABEL_31:
      free(v13);
      return;
    }
    char v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_74;
    }
    *(_DWORD *)buf = 136446210;
    unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
    uint64_t v17 = "%{public}s called with null http_client_bottom";
LABEL_73:
    _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
    goto LABEL_74;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
    BOOL v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v14, &type, &v24)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
      uint64_t v17 = "%{public}s called with null other_protocol";
      goto LABEL_73;
    }
    if (!v24)
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
      uint64_t v17 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_73;
    }
    uint64_t v20 = (char *)__nw_create_backtrace_string();
    char v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v23 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v23) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
      uint64_t v17 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_73;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
      __int16 v28 = 2082;
      uint64_t v29 = (nw_protocol *)v20;
      char v22 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_58;
    }
    goto LABEL_59;
  }
  if (*((nw_protocol **)handle + 6) != a2)
  {
    nw_protocol_disconnected(a2, (uint64_t)handle);
    uint64_t v4 = *((void *)handle + 23);
    uint64_t v5 = *((void *)handle + 24);
    if (v4 != v5)
    {
      while (*(nw_protocol **)v4 != a2)
      {
        v4 += 16;
        if (v4 == v5) {
          goto LABEL_15;
        }
      }
    }
    if (v4 != v5)
    {
      *(_DWORD *)(v4 + 8) = 2;
      return;
    }
LABEL_15:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
    __int16 v28 = 2048;
    uint64_t v29 = a2;
    os_log_type_t v7 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v7, &type, &v24)) {
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
        __int16 v28 = 2048;
        uint64_t v29 = a2;
        BOOL v10 = "%{public}s Protocol %p isn't an input handler of http client bottom";
LABEL_28:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0x16u);
      }
    }
    else if (v24)
    {
      BOOL v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = gLogObj;
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v11)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446722;
          unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
          __int16 v28 = 2048;
          uint64_t v29 = a2;
          __int16 v30 = 2082;
          unint64_t v31 = v11;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s Protocol %p isn't an input handler of http client bottom, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v11);
        goto LABEL_29;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
        __int16 v28 = 2048;
        uint64_t v29 = a2;
        BOOL v10 = "%{public}s Protocol %p isn't an input handler of http client bottom, no backtrace";
        goto LABEL_28;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
        __int16 v28 = 2048;
        uint64_t v29 = a2;
        BOOL v10 = "%{public}s Protocol %p isn't an input handler of http client bottom, backtrace limit exceeded";
        goto LABEL_28;
      }
    }
LABEL_29:
    if (!v7) {
      return;
    }
    BOOL v13 = (char *)v7;
    goto LABEL_31;
  }
  if ((handle[294] & 4) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      unint64_t v27 = "nw_protocol_http_client_bottom_disconnect";
      __int16 v28 = 2082;
      uint64_t v29 = (nw_protocol *)(handle + 208);
      __int16 v30 = 2080;
      unint64_t v31 = " ";
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sdisconnecting output handler", buf, 0x20u);
    }
  }
  handle[294] |= 0x10u;
  nw_protocol_disconnect(*((void **)handle + 4), (uint64_t)handle);
}

void nw_protocol_http_client_bottom_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v77 = "nw_protocol_http_client_bottom_connected";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (__nwlog_fault(v17, &type, &v74))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v77 = "nw_protocol_http_client_bottom_connected";
          uint64_t v20 = "%{public}s called with null protocol";
LABEL_133:
          _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
        }
      }
      else if (v74)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v72 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v72)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v77 = "nw_protocol_http_client_bottom_connected";
            __int16 v78 = 2082;
            int v79 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
        }
        else if (v72)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v77 = "nw_protocol_http_client_bottom_connected";
          uint64_t v20 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_133;
        }
      }
      else
      {
        __int16 v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v77 = "nw_protocol_http_client_bottom_connected";
          uint64_t v20 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_133;
        }
      }
    }
LABEL_134:
    if (!v17) {
      return;
    }
    goto LABEL_135;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v77 = "nw_protocol_http_client_bottom_connected";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (__nwlog_fault(v17, &type, &v74))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v77 = "nw_protocol_http_client_bottom_connected";
          uint64_t v20 = "%{public}s called with null http_client_bottom";
          goto LABEL_133;
        }
      }
      else if (v74)
      {
        __int16 v30 = (char *)__nw_create_backtrace_string();
        __int16 v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v73 = os_log_type_enabled(v18, type);
        if (v30)
        {
          if (v73)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v77 = "nw_protocol_http_client_bottom_connected";
            __int16 v78 = 2082;
            int v79 = v30;
            uint64_t v32 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
            goto LABEL_72;
          }
          goto LABEL_73;
        }
        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v77 = "nw_protocol_http_client_bottom_connected";
          uint64_t v20 = "%{public}s called with null http_client_bottom, no backtrace";
          goto LABEL_133;
        }
      }
      else
      {
        __int16 v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v77 = "nw_protocol_http_client_bottom_connected";
          uint64_t v20 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
          goto LABEL_133;
        }
      }
    }
    goto LABEL_134;
  }
  if ((handle[294] & 0x10) != 0)
  {
    if ((handle[294] & 4) != 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)buf = 136446722;
    unint64_t v77 = "nw_protocol_http_client_bottom_connected";
    __int16 v78 = 2082;
    int v79 = handle + 208;
    __int16 v80 = 2080;
    unint64_t v81 = " ";
    uint64_t v5 = "%{public}s %{public}s%signoring connected";
    os_log_type_t v6 = v4;
    os_log_type_t v7 = OS_LOG_TYPE_INFO;
LABEL_17:
    _os_log_impl(&dword_1830D4000, v6, v7, v5, buf, 0x20u);
    return;
  }
  id v3 = (void *)*((void *)handle + 6);
  if (!v3)
  {
    if ((handle[294] & 4) != 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446722;
    unint64_t v77 = "nw_protocol_http_client_bottom_connected";
    __int16 v78 = 2082;
    int v79 = handle + 208;
    __int16 v80 = 2080;
    unint64_t v81 = " ";
    uint64_t v5 = "%{public}s %{public}s%sno default input handler, ignoring connected";
    os_log_type_t v6 = v8;
    os_log_type_t v7 = OS_LOG_TYPE_ERROR;
    goto LABEL_17;
  }
  if (*((nw_protocol **)handle + 4) != a2)
  {
    if ((handle[294] & 1) == 0 && !*((void *)handle + 17))
    {
      nw_protocol_connected(v3, (uint64_t)a2);
    }
    return;
  }
  handle[294] |= 1u;
  os_log_type_t v9 = (nw_protocol *)*((void *)handle + 17);
  if (!v9)
  {
    os_log_type_t v9 = a2;
    if (!a2)
    {
LABEL_60:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      unint64_t v77 = "nw_http_client_bottom_get_out_of_the_way";
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v74 = 0;
      if (!__nwlog_fault(v17, &type, &v74)) {
        goto LABEL_134;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_134;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v77 = "nw_http_client_bottom_get_out_of_the_way";
        uint64_t v20 = "%{public}s http_messaging not found below http_client_bottom";
        goto LABEL_133;
      }
      if (!v74)
      {
        __int16 v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_134;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v77 = "nw_http_client_bottom_get_out_of_the_way";
        uint64_t v20 = "%{public}s http_messaging not found below http_client_bottom, backtrace limit exceeded";
        goto LABEL_133;
      }
      __int16 v30 = (char *)__nw_create_backtrace_string();
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v33 = os_log_type_enabled(v18, type);
      if (!v30)
      {
        if (!v33) {
          goto LABEL_134;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v77 = "nw_http_client_bottom_get_out_of_the_way";
        uint64_t v20 = "%{public}s http_messaging not found below http_client_bottom, no backtrace";
        goto LABEL_133;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v77 = "nw_http_client_bottom_get_out_of_the_way";
        __int16 v78 = 2082;
        int v79 = v30;
        uint64_t v32 = "%{public}s http_messaging not found below http_client_bottom, dumping backtrace:%{public}s";
        goto LABEL_72;
      }
LABEL_73:
      free(v30);
      if (!v17) {
        return;
      }
LABEL_135:
      free(v17);
      return;
    }
  }
  while (1)
  {
    identifier = v9->identifier;
    if (nw_protocol_http_messaging_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_77555);
    }
    if (nw_protocols_are_equal(identifier, nw_protocol_http_messaging_identifier::protocol_identifier)) {
      break;
    }
    BOOL v11 = v9->identifier;
    if (nw_protocol_http1_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_40283);
    }
    if (nw_protocols_are_equal(v11, &nw_protocol_http1_identifier::http1_protocol_identifier)) {
      break;
    }
    BOOL v12 = v9->identifier;
    if (nw_protocol_http2_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_85036);
    }
    if (nw_protocols_are_equal(v12, &nw_protocol_http2_identifier::http2_protocol_identifier)) {
      break;
    }
    BOOL v13 = v9->identifier;
    if (nw_protocol_http3_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_13_62491);
    }
    if (nw_protocols_are_equal(v13, &nw_protocol_http3_identifier::http3_protocol_identifier)) {
      break;
    }
    BOOL v14 = v9->identifier;
    if (nw_protocol_oblivious_http_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28841);
    }
    if (nw_protocols_are_equal(v14, &nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier)) {
      break;
    }
    char v15 = v9->identifier;
    if (nw_protocol_oblivious_http_contexts_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_4_28848);
    }
    if (nw_protocols_are_equal(v15, &nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier)) {
      break;
    }
    os_log_type_t v9 = v9->output_handler;
    if (!v9) {
      goto LABEL_60;
    }
  }
  os_log_type_t v16 = v9->identifier;
  if (nw_protocol_oblivious_http_contexts_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_4_28848);
  }
  if (nw_protocols_are_equal(v16, &nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    unint64_t v77 = "nw_http_client_bottom_get_out_of_the_way";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (!__nwlog_fault(v17, &type, &v74)) {
      goto LABEL_134;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v18 = gLogObj;
      os_log_type_t v19 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_134;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v77 = "nw_http_client_bottom_get_out_of_the_way";
      uint64_t v20 = "%{public}s http_oblivious_http_contexts not supported below http_client_bottom";
      goto LABEL_133;
    }
    if (!v74)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_134;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v77 = "nw_http_client_bottom_get_out_of_the_way";
      uint64_t v20 = "%{public}s http_oblivious_http_contexts not supported below http_client_bottom, backtrace limit exceeded";
      goto LABEL_133;
    }
    __int16 v30 = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v31 = os_log_type_enabled(v18, type);
    if (!v30)
    {
      if (!v31) {
        goto LABEL_134;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v77 = "nw_http_client_bottom_get_out_of_the_way";
      uint64_t v20 = "%{public}s http_oblivious_http_contexts not supported below http_client_bottom, no backtrace";
      goto LABEL_133;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v77 = "nw_http_client_bottom_get_out_of_the_way";
      __int16 v78 = 2082;
      int v79 = v30;
      uint64_t v32 = "%{public}s http_oblivious_http_contexts not supported below http_client_bottom, dumping backtrace:%{public}s";
LABEL_72:
      _os_log_impl(&dword_1830D4000, v18, v19, v32, buf, 0x16u);
      goto LABEL_73;
    }
    goto LABEL_73;
  }
  uint64_t v21 = nw_protocol_copy_info((uint64_t)v9, 253);
  if (v21) {
    os_log_type_t v9 = *(nw_protocol **)(v21 + 24);
  }
  uint64_t v22 = *((void *)handle + 6);
  nw_protocol_set_input_handler((uint64_t)handle, 0);
  nw_protocol_set_output_handler(v22, 0);
  nw_protocol_replace_input_handler(*((void *)handle + 4), (uint64_t)handle, v22);
  nw_protocol_set_output_handler((uint64_t)handle, 0);
  nw_protocol_connect(*(void *)(v22 + 32), v22);
  parameters = (void *)nw_protocol_get_parameters((uint64_t)v9);
  id v24 = nw_parameters_copy_effective_proxy_config(parameters);
  if (!v24) {
    goto LABEL_57;
  }
  uint64_t v25 = v24;
  __int16 v26 = v25;
  if (v25[38] != 1)
  {

    if ((handle[294] & 2) != 0) {
      goto LABEL_114;
    }
    goto LABEL_76;
  }
  int v27 = v25[39];

  if (v27 == 2001)
  {
    char v28 = handle[168];
    if (v28)
    {
      uint64_t v29 = (void *)*((void *)handle + 20);
      if (v29)
      {
        os_release(v29);
        char v28 = handle[168];
      }
    }
    *((void *)handle + 20) = v26;
    handle[168] = v28 | 1;
LABEL_57:
    __int16 v26 = 0;
  }
  if ((handle[294] & 2) != 0) {
    goto LABEL_114;
  }
LABEL_76:
  if (v9->identifier->mapping == 2)
  {
    *((void *)handle + 17) = v9;
    nw_protocol_add_listen_handler((uint64_t)v9, (uint64_t)(handle + 64));
    unint64_t v34 = "nw_http_client_bottom_get_out_of_the_way";
    while (1)
    {
      uint64_t v36 = *((void *)handle + 23);
      uint64_t v35 = *((void *)handle + 24);
      uint64_t v37 = v36;
      if (v36 != v35)
      {
        while (*(_DWORD *)(v37 + 8) == 2)
        {
          v37 += 16;
          if (v37 == v35) {
            goto LABEL_123;
          }
        }
      }
      if (v37 == v35) {
        goto LABEL_123;
      }
      unint64_t v38 = *(void **)v37;
      int v39 = *(_DWORD *)(v37 + 8);
      uint64_t v40 = v37 + 16;
      if (v37 + 16 != v35)
      {
        unint64_t v41 = v35 - v37 - 32;
        if (v41 >= 0x10)
        {
          uint64_t v42 = (v37 - v36) >> 4;
          uint64_t v43 = (v41 >> 4) + 1;
          uint64_t v44 = 16 * (v43 & 0x1FFFFFFFFFFFFFFELL);
          v37 += v44;
          uint64_t v45 = v36 + 16 * v42 + 24;
          uint64_t v46 = v43 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            uint64_t v47 = *(void *)(v45 + 8);
            *(void *)(v45 - 24) = *(void *)(v45 - 8);
            *(void *)(v45 - 8) = v47;
            LODWORD(v47) = *(_DWORD *)(v45 + 16);
            *(_DWORD *)(v45 - 16) = *(_DWORD *)v45;
            *(_DWORD *)uint64_t v45 = v47;
            v45 += 32;
            v46 -= 2;
          }
          while (v46);
          if (v43 == (v43 & 0x1FFFFFFFFFFFFFFELL)) {
            goto LABEL_90;
          }
          v40 += v44;
        }
        do
        {
          *(void *)uint64_t v37 = *(void *)v40;
          *(_DWORD *)(v37 + 8) = *(_DWORD *)(v40 + 8);
          v37 += 16;
          v40 += 16;
        }
        while (v40 != v35);
      }
LABEL_90:
      *((void *)handle + 24) = v37;
      int v48 = (void *)nw_protocol_get_parameters((uint64_t)v38);
      if (nw_protocol_http_client_bottom_accept((uint64_t)handle, *((void **)handle + 15), v48)
        && (nw_http_client_bottom_add_to_messaging((uint64_t)handle, (uint64_t)v38) & 1) != 0)
      {
        if (v39 == 1) {
          nw_protocol_connect(v38[4], (uint64_t)v38);
        }
      }
      else
      {
        if ((handle[294] & 4) == 0)
        {
          uint64_t v49 = __nwlog_obj();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446722;
            unint64_t v77 = v34;
            __int16 v78 = 2082;
            int v79 = handle + 208;
            __int16 v80 = 2080;
            unint64_t v81 = " ";
            _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sMessaging cannot accept stream", buf, 0x20u);
          }
        }
        unint64_t v51 = (char *)*((void *)handle + 24);
        unint64_t v50 = *((void *)handle + 25);
        if ((unint64_t)v51 >= v50)
        {
          int v53 = (char *)*((void *)handle + 23);
          uint64_t v54 = (v51 - v53) >> 4;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 60) {
            goto LABEL_161;
          }
          uint64_t v56 = v50 - (void)v53;
          if (v56 >> 3 > v55) {
            unint64_t v55 = v56 >> 3;
          }
          BOOL v57 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0;
          unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
          if (!v57) {
            unint64_t v58 = v55;
          }
          if (v58 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v59 = v34;
          uint64_t v60 = 16 * v58;
          unint64_t v61 = (char *)operator new(16 * v58);
          id v62 = &v61[16 * v54];
          *(void *)id v62 = v38;
          *((_DWORD *)v62 + 2) = 2;
          if (v51 == v53)
          {
            unint64_t v64 = &v61[16 * v54];
          }
          else
          {
            uint64_t v63 = &v61[16 * v54];
            do
            {
              unint64_t v64 = v63 - 16;
              *((_OWORD *)v63 - 1) = *((_OWORD *)v51 - 1);
              v51 -= 16;
              v63 -= 16;
            }
            while (v51 != v53);
          }
          int v52 = v62 + 16;
          *((void *)handle + 23) = v64;
          *((void *)handle + 24) = v62 + 16;
          *((void *)handle + 25) = &v61[v60];
          if (v53) {
            operator delete(v53);
          }
          unint64_t v34 = v59;
        }
        else
        {
          *(void *)unint64_t v51 = v38;
          *((_DWORD *)v51 + 2) = 2;
          int v52 = v51 + 16;
        }
        *((void *)handle + 24) = v52;
        nw_protocol_error(v38, (uint64_t)handle);
        nw_protocol_disconnected(v38, (uint64_t)handle);
      }
    }
  }
LABEL_114:
  nw_protocol_remove_instance((uint64_t)handle);
  char v66 = (unsigned char *)*((void *)handle + 23);
  unint64_t v65 = (unsigned char *)*((void *)handle + 24);
  if (v66 == v65)
  {
    nw_http_client_bottom_destroy((uint64_t)handle);
  }
  else
  {
    int64_t v67 = v65 - v66;
    if (v65 - v66 < 0) {
LABEL_161:
    }
      abort();
    uint64_t v68 = operator new(v65 - v66);
    size_t v69 = v67 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v68, v66, v69);
    if (v69)
    {
      unint64_t v70 = v68 + 2;
      do
      {
        if (*v70 != 2) {
          nw_protocol_notify(*((void **)v70 - 1), (uint64_t)handle, 22);
        }
        v70 += 4;
        v69 -= 16;
      }
      while (v69);
    }
    operator delete(v68);
  }
LABEL_123:
  if (v26) {
    os_release(v26);
  }
}

uint64_t nw_protocol_http_client_bottom_accept(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v9, &v21, &v20)) {
      goto LABEL_52;
    }
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = v21;
      if (!os_log_type_enabled(v10, v21)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null protocol";
      goto LABEL_51;
    }
    if (!v20)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = v21;
      if (!os_log_type_enabled(v10, v21)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v10 = __nwlog_obj();
    os_log_type_t v11 = v21;
    BOOL v14 = os_log_type_enabled(v10, v21);
    if (!backtrace_string)
    {
      if (!v14) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_51;
    }
    if (!v14) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    char v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
    _os_log_impl(&dword_1830D4000, v10, v11, v15, buf, 0x16u);
    goto LABEL_38;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v9, &v21, &v20)) {
      goto LABEL_52;
    }
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = v21;
      if (!os_log_type_enabled(v10, v21)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null http_client_bottom";
      goto LABEL_51;
    }
    if (!v20)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = v21;
      if (!os_log_type_enabled(v10, v21)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v10 = __nwlog_obj();
    os_log_type_t v11 = v21;
    BOOL v16 = os_log_type_enabled(v10, v21);
    if (!backtrace_string)
    {
      if (!v16) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null http_client_bottom, no backtrace";
      goto LABEL_51;
    }
    if (!v16) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    char v15 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
    goto LABEL_37;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v9, &v21, &v20)) {
      goto LABEL_52;
    }
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = v21;
      if (!os_log_type_enabled(v10, v21)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null endpoint";
      goto LABEL_51;
    }
    if (!v20)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = v21;
      if (!os_log_type_enabled(v10, v21)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null endpoint, backtrace limit exceeded";
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v10 = __nwlog_obj();
    os_log_type_t v11 = v21;
    BOOL v17 = os_log_type_enabled(v10, v21);
    if (backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        char v15 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
        goto LABEL_37;
      }
LABEL_38:
      free(backtrace_string);
      goto LABEL_52;
    }
    if (!v17) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
    BOOL v12 = "%{public}s called with null endpoint, no backtrace";
LABEL_51:
    _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
LABEL_52:
    if (v9) {
      free(v9);
    }
    return 0;
  }
  if (nw_http_client_bottom_stalled(*(void *)(a1 + 40))) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 136);
  if (v6)
  {
    if (!nw_protocol_http_messaging_accept(v6, a2, a3)) {
      return 0;
    }
  }
  if (nw_endpoint_is_equal(*(void **)(v3 + 120), a2, 0)) {
    return 1;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000;
  char v23 = 0;
  uint64_t v8 = *(void **)(v3 + 144);
  if (v8)
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 0x40000000;
    v19[2] = __nw_protocol_http_client_bottom_accept_block_invoke;
    v19[3] = &unk_1E523D4B8;
    v19[4] = buf;
    v19[5] = v3;
    nw_http_connection_metadata_enumerate_secondary_certificates(v8, v19);
    BOOL v7 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  _Block_object_dispose(buf, 8);
  return v7;
}

uint64_t nw_http_client_bottom_add_to_messaging(uint64_t a1, uint64_t a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    parameters = (void *)nw_protocol_get_parameters(a2);
    if (parameters)
    {
      uint64_t v5 = parameters;
      nw_parameters_log_protocol_instances(parameters);
      uint64_t v6 = v5;
      BOOL v7 = v6[19];

      v77[0] = 0;
      v77[1] = v77;
      v77[2] = 0x2000000000;
      char v78 = 0;
      *(void *)os_log_type_t type = 0;
      int v71 = type;
      uint64_t v72 = 0x3802000000;
      BOOL v73 = __Block_byref_object_copy__22606;
      char v74 = __Block_byref_object_dispose__22607;
      int v75 = 0;
      char v76 = -1;
      iterate_block[0] = MEMORY[0x1E4F143A8];
      iterate_block[1] = 0x40000000;
      iterate_block[2] = ___ZL38nw_http_client_bottom_add_to_messagingP30nw_protocol_http_client_bottomP11nw_protocol_block_invoke;
      iterate_block[3] = &unk_1E523D520;
      iterate_block[4] = v77;
      iterate_block[5] = type;
      iterate_block[6] = a1;
      nw_protocol_stack_iterate_application_protocols(v7, iterate_block);
      if (*((void *)v71 + 5))
      {
        uint64_t v8 = nw_parameters_copy_protocol_options_legacy(v6, (nw_protocol *)a1);
        if (v8)
        {
          os_log_type_t v9 = v8;
          BOOL v10 = v9;
          uint64_t v11 = 0;
          __s[0] = 0;
          while (1)
          {
            int v12 = v9[v11 + 48];
            __s[v11] = v12;
            if (!v12) {
              break;
            }
            if (++v11 == 83)
            {
              char v83 = 0;
              break;
            }
          }

          size_t v13 = strlen(__s);
          BOOL v14 = strchr(__s, 58);
          if (v14) {
            *BOOL v14 = 0;
          }
          BOOL v15 = v13 > 2;
          BOOL v16 = (void *)*((void *)v71 + 5);
          BOOL v17 = v10;
          __int16 v18 = *((_WORD *)v17 + 68);

          nw_protocol_options_set_log_id(v16, "C", &__s[2 * v15], (unsigned __int16)(v18 + 1));
          os_log_type_t v19 = (void *)*((void *)v71 + 5);
          if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
            dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
          }
          id v20 = (id)nw_protocol_copy_http_messaging_definition_definition;
          nw_parameters_set_protocol_instance(v19, v21, *(void *)(a1 + 136));
          if (v20) {
            os_release(v20);
          }
          uint64_t v22 = *(void **)(a1 + 160);
          if (v22)
          {
            char v23 = v6;
            id v24 = v22;
            objc_storeStrong(v23 + 23, v22);
          }
          uint64_t v25 = (void *)nw_protocol_get_parameters(*(void *)(a1 + 136));
          if (!v25) {
            goto LABEL_36;
          }
          __int16 v26 = v25;
          int v27 = v26[19];

          v67[0] = 0;
          v67[1] = v67;
          v67[2] = 0x2000000000;
          char v68 = 0;
          *(void *)uint64_t v60 = 0;
          unint64_t v61 = v60;
          uint64_t v62 = 0x3802000000;
          uint64_t v63 = __Block_byref_object_copy__22606;
          unint64_t v64 = __Block_byref_object_dispose__22607;
          object = 0;
          char v66 = -1;
          v59[0] = MEMORY[0x1E4F143A8];
          v59[1] = 0x40000000;
          v59[2] = ___ZL38nw_http_client_bottom_add_to_messagingP30nw_protocol_http_client_bottomP11nw_protocol_block_invoke_24;
          v59[3] = &unk_1E523D548;
          v59[5] = v60;
          v59[6] = a1;
          v59[4] = v67;
          nw_protocol_stack_iterate_application_protocols(v27, v59);
          if (!*((void *)v61 + 5))
          {
            nw_protocol_options_t v28 = nw_protocol_stack_copy_transport_protocol(v27);
            uint64_t v29 = v61;
            char v30 = *((unsigned char *)v61 + 48);
            if (v30)
            {
              BOOL v31 = (void *)*((void *)v61 + 5);
              if (v31)
              {
                os_release(v31);
                char v30 = *((unsigned char *)v29 + 48);
              }
            }
            *((void *)v29 + 5) = v28;
            *((unsigned char *)v29 + 48) = v30 | 1;
          }
          uint64_t v32 = v6;
          BOOL v33 = v6[19];

          nw_protocol_options_t v34 = nw_protocol_stack_copy_transport_protocol(v33);
          nw_protocol_options_t v35 = v34;
          uint64_t v36 = (void *)*((void *)v61 + 5);
          if (v36)
          {
            if (v34)
            {
              uint64_t v37 = v36;
              id v38 = v37[1];

              if (nw_protocol_options_matches_definition(v35, v38))
              {
                uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(*((void **)v61 + 5));
                uint64_t v40 = v35;
                v40[2].Class isa = (Class)protocol_handle;
              }
              goto LABEL_28;
            }
          }
          else if (v34)
          {
LABEL_28:
            os_release(v35);
          }
          if (v33) {
            os_release(v33);
          }
          _Block_object_dispose(v60, 8);
          if ((v66 & 1) != 0 && object) {
            os_release(object);
          }
          _Block_object_dispose(v67, 8);
          if (v27) {
            os_release(v27);
          }
LABEL_36:
          nw_protocol_set_output_handler(a2, 0);
          uint64_t v41 = nw_protocol_add_input_handler(*(void *)(a1 + 136), a2);
          os_release(v17);
LABEL_37:
          _Block_object_dispose(type, 8);
          if ((v76 & 1) != 0 && v75) {
            os_release(v75);
          }
          _Block_object_dispose(v77, 8);
          if (v7) {
            os_release(v7);
          }
          return v41;
        }
        __nwlog_obj();
        *(_DWORD *)__s = 136446210;
        __int16 v80 = "nw_http_client_bottom_add_to_messaging";
        uint64_t v47 = (char *)_os_log_send_and_compose_impl();
        v60[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v67[0]) = 0;
        if (!__nwlog_fault(v47, v60, v67)) {
          goto LABEL_100;
        }
        if (v60[0] == OS_LOG_TYPE_FAULT)
        {
          int v48 = __nwlog_obj();
          os_log_type_t v49 = v60[0];
          if (os_log_type_enabled(v48, v60[0]))
          {
            *(_DWORD *)__s = 136446210;
            __int16 v80 = "nw_http_client_bottom_add_to_messaging";
            unint64_t v50 = "%{public}s called with null options";
            goto LABEL_99;
          }
          goto LABEL_100;
        }
        if (!LOBYTE(v67[0]))
        {
          int v48 = __nwlog_obj();
          os_log_type_t v49 = v60[0];
          if (os_log_type_enabled(v48, v60[0]))
          {
            *(_DWORD *)__s = 136446210;
            __int16 v80 = "nw_http_client_bottom_add_to_messaging";
            unint64_t v50 = "%{public}s called with null options, backtrace limit exceeded";
            goto LABEL_99;
          }
          goto LABEL_100;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v48 = __nwlog_obj();
        os_log_type_t v49 = v60[0];
        BOOL v58 = os_log_type_enabled(v48, v60[0]);
        if (!backtrace_string)
        {
          if (v58)
          {
            *(_DWORD *)__s = 136446210;
            __int16 v80 = "nw_http_client_bottom_add_to_messaging";
            unint64_t v50 = "%{public}s called with null options, no backtrace";
            goto LABEL_99;
          }
          goto LABEL_100;
        }
        if (v58)
        {
          *(_DWORD *)__s = 136446466;
          __int16 v80 = "nw_http_client_bottom_add_to_messaging";
          __int16 v81 = 2082;
          uint64_t v82 = backtrace_string;
          BOOL v57 = "%{public}s called with null options, dumping backtrace:%{public}s";
          goto LABEL_77;
        }
      }
      else
      {
        __nwlog_obj();
        *(_DWORD *)__s = 136446210;
        __int16 v80 = "nw_http_client_bottom_add_to_messaging";
        uint64_t v47 = (char *)_os_log_send_and_compose_impl();
        v60[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v67[0]) = 0;
        if (!__nwlog_fault(v47, v60, v67)) {
          goto LABEL_100;
        }
        if (v60[0] == OS_LOG_TYPE_FAULT)
        {
          int v48 = __nwlog_obj();
          os_log_type_t v49 = v60[0];
          if (os_log_type_enabled(v48, v60[0]))
          {
            *(_DWORD *)__s = 136446210;
            __int16 v80 = "nw_http_client_bottom_add_to_messaging";
            unint64_t v50 = "%{public}s called with null messaging_options";
LABEL_99:
            _os_log_impl(&dword_1830D4000, v48, v49, v50, (uint8_t *)__s, 0xCu);
          }
LABEL_100:
          if (v47) {
            free(v47);
          }
          uint64_t v41 = 0;
          goto LABEL_37;
        }
        if (!LOBYTE(v67[0]))
        {
          int v48 = __nwlog_obj();
          os_log_type_t v49 = v60[0];
          if (os_log_type_enabled(v48, v60[0]))
          {
            *(_DWORD *)__s = 136446210;
            __int16 v80 = "nw_http_client_bottom_add_to_messaging";
            unint64_t v50 = "%{public}s called with null messaging_options, backtrace limit exceeded";
            goto LABEL_99;
          }
          goto LABEL_100;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v48 = __nwlog_obj();
        os_log_type_t v49 = v60[0];
        BOOL v56 = os_log_type_enabled(v48, v60[0]);
        if (!backtrace_string)
        {
          if (v56)
          {
            *(_DWORD *)__s = 136446210;
            __int16 v80 = "nw_http_client_bottom_add_to_messaging";
            unint64_t v50 = "%{public}s called with null messaging_options, no backtrace";
            goto LABEL_99;
          }
          goto LABEL_100;
        }
        if (v56)
        {
          *(_DWORD *)__s = 136446466;
          __int16 v80 = "nw_http_client_bottom_add_to_messaging";
          __int16 v81 = 2082;
          uint64_t v82 = backtrace_string;
          BOOL v57 = "%{public}s called with null messaging_options, dumping backtrace:%{public}s";
LABEL_77:
          _os_log_impl(&dword_1830D4000, v48, v49, v57, (uint8_t *)__s, 0x16u);
        }
      }
      free(backtrace_string);
      goto LABEL_100;
    }
    __nwlog_obj();
    *(_DWORD *)__s = 136446210;
    __int16 v80 = "nw_http_client_bottom_add_to_messaging";
    uint64_t v43 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v60[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v43, type, v60)) {
      goto LABEL_92;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v44 = __nwlog_obj();
      os_log_type_t v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)__s = 136446210;
        __int16 v80 = "nw_http_client_bottom_add_to_messaging";
        uint64_t v46 = "%{public}s called with null parameters";
        goto LABEL_91;
      }
      goto LABEL_92;
    }
    if (v60[0] == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v44 = __nwlog_obj();
      os_log_type_t v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)__s = 136446210;
        __int16 v80 = "nw_http_client_bottom_add_to_messaging";
        uint64_t v46 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_91;
      }
      goto LABEL_92;
    }
    unint64_t v51 = (char *)__nw_create_backtrace_string();
    uint64_t v44 = __nwlog_obj();
    os_log_type_t v45 = type[0];
    BOOL v54 = os_log_type_enabled(v44, type[0]);
    if (!v51)
    {
      if (v54)
      {
        *(_DWORD *)__s = 136446210;
        __int16 v80 = "nw_http_client_bottom_add_to_messaging";
        uint64_t v46 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_91;
      }
      goto LABEL_92;
    }
    if (v54)
    {
      *(_DWORD *)__s = 136446466;
      __int16 v80 = "nw_http_client_bottom_add_to_messaging";
      __int16 v81 = 2082;
      uint64_t v82 = v51;
      int v53 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_67;
    }
    goto LABEL_68;
  }
  __nwlog_obj();
  *(_DWORD *)__s = 136446210;
  __int16 v80 = "nw_http_client_bottom_add_to_messaging";
  uint64_t v43 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v60[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v43, type, v60)) {
    goto LABEL_92;
  }
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (v60[0] == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v44 = __nwlog_obj();
      os_log_type_t v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)__s = 136446210;
        __int16 v80 = "nw_http_client_bottom_add_to_messaging";
        uint64_t v46 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_91;
      }
      goto LABEL_92;
    }
    unint64_t v51 = (char *)__nw_create_backtrace_string();
    uint64_t v44 = __nwlog_obj();
    os_log_type_t v45 = type[0];
    BOOL v52 = os_log_type_enabled(v44, type[0]);
    if (!v51)
    {
      if (v52)
      {
        *(_DWORD *)__s = 136446210;
        __int16 v80 = "nw_http_client_bottom_add_to_messaging";
        uint64_t v46 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_91;
      }
      goto LABEL_92;
    }
    if (v52)
    {
      *(_DWORD *)__s = 136446466;
      __int16 v80 = "nw_http_client_bottom_add_to_messaging";
      __int16 v81 = 2082;
      uint64_t v82 = v51;
      int v53 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_67:
      _os_log_impl(&dword_1830D4000, v44, v45, v53, (uint8_t *)__s, 0x16u);
    }
LABEL_68:
    free(v51);
    goto LABEL_92;
  }
  uint64_t v44 = __nwlog_obj();
  os_log_type_t v45 = type[0];
  if (os_log_type_enabled(v44, type[0]))
  {
    *(_DWORD *)__s = 136446210;
    __int16 v80 = "nw_http_client_bottom_add_to_messaging";
    uint64_t v46 = "%{public}s called with null input_protocol";
LABEL_91:
    _os_log_impl(&dword_1830D4000, v44, v45, v46, (uint8_t *)__s, 0xCu);
  }
LABEL_92:
  if (v43) {
    free(v43);
  }
  return 0;
}

uint64_t __Block_byref_object_copy__22606(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__22607(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZL38nw_http_client_bottom_add_to_messagingP30nw_protocol_http_client_bottomP11nw_protocol_block_invoke(void *a1, void *a2)
{
  uint64_t v2 = a2;
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    if (!*(void *)(*(void *)(a1[5] + 8) + 40) && nw_protocol_options_is_http_messaging(a2))
    {
      if (v2) {
        uint64_t v2 = os_retain(v2);
      }
      uint64_t v4 = *(void *)(a1[5] + 8);
      char v5 = *(unsigned char *)(v4 + 48);
      if (v5)
      {
        uint64_t v6 = *(void **)(v4 + 40);
        if (v6)
        {
          os_release(v6);
          char v5 = *(unsigned char *)(v4 + 48);
        }
      }
      *(void *)(v4 + 40) = v2;
      *(unsigned char *)(v4 + 48) = v5 | 1;
    }
  }
  else if (nw_protocol_options_get_protocol_handle(a2) == a1[6])
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
}

void ___ZL38nw_http_client_bottom_add_to_messagingP30nw_protocol_http_client_bottomP11nw_protocol_block_invoke_24(void *a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(a2);
  uint64_t v5 = *(void *)(a1[4] + 8);
  if (protocol_handle == *(void *)(a1[6] + 136))
  {
    *(unsigned char *)(v5 + 24) = 1;
  }
  else if (*(unsigned char *)(v5 + 24))
  {
    if (v2) {
      uint64_t v2 = os_retain(v2);
    }
    uint64_t v6 = *(void *)(a1[5] + 8);
    char v7 = *(unsigned char *)(v6 + 48);
    if (v7)
    {
      uint64_t v8 = *(void **)(v6 + 40);
      if (v8)
      {
        os_release(v8);
        char v7 = *(unsigned char *)(v6 + 48);
      }
    }
    *(void *)(v6 + 40) = v2;
    *(unsigned char *)(v6 + 48) = v7 | 1;
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
  }
}

uint64_t nw_http_client_bottom_stalled(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_http_client_bottom_stalled";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v16, &type, &v22)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_http_client_bottom_stalled";
      os_log_type_t v19 = "%{public}s called with null http_client_bottom";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v25 = "nw_http_client_bottom_stalled";
          __int16 v26 = 2082;
          int v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_34;
      }
      if (!v21)
      {
LABEL_34:
        if (v16) {
          free(v16);
        }
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_http_client_bottom_stalled";
      os_log_type_t v19 = "%{public}s called with null http_client_bottom, no backtrace";
    }
    else
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_http_client_bottom_stalled";
      os_log_type_t v19 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
    goto LABEL_34;
  }
  if (!*(void *)(a1 + 136))
  {
    uint64_t v4 = *(void *)(a1 + 96);
    if (v4
      && ((uint64_t v5 = mach_continuous_approximate_time(), v5 <= 1) ? (v6 = 1) : (v6 = v5),
          unint64_t v7 = nw_delta_nanos(v4, v6),
          int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_setup_threshold_seconds, 5), v7 > 1000000000 * int64_with_default))
    {
      if ((*(unsigned char *)(a1 + 294) & 4) == 0)
      {
        int64_t v9 = int64_with_default;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = gLogObj;
        uint64_t v2 = 1;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
          return v2;
        }
        *(_DWORD *)buf = 136446978;
        uint64_t v25 = "nw_http_client_bottom_stalled";
        __int16 v26 = 2082;
        int v27 = (char *)(a1 + 208);
        __int16 v28 = 2080;
        uint64_t v29 = " ";
        __int16 v30 = 2048;
        int64_t v31 = v9;
        uint64_t v11 = "%{public}s %{public}s%sdenying join attempt because http_client_bottom was not ready within %lld seconds";
        int v12 = v10;
        uint32_t v13 = 42;
LABEL_18:
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, v11, buf, v13);
        return v2;
      }
    }
    else
    {
      if (!*(_WORD *)(a1 + 292)
        || networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_maximum_stall_count, 5) >= *(unsigned __int16 *)(a1 + 292))
      {
        return 0;
      }
      if ((*(unsigned char *)(a1 + 294) & 4) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = gLogObj;
        uint64_t v2 = 1;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
          return v2;
        }
        int v15 = *(unsigned __int16 *)(a1 + 292);
        *(_DWORD *)buf = 136446978;
        uint64_t v25 = "nw_http_client_bottom_stalled";
        __int16 v26 = 2082;
        int v27 = (char *)(a1 + 208);
        __int16 v28 = 2080;
        uint64_t v29 = " ";
        __int16 v30 = 1024;
        LODWORD(v31) = v15;
        uint64_t v11 = "%{public}s %{public}s%sdenying join attempt because http_client_bottom hit %u stalls";
        int v12 = v14;
        uint32_t v13 = 38;
        goto LABEL_18;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t __nw_protocol_http_client_bottom_accept_block_invoke(uint64_t a1, nw_endpoint_t endpoint)
{
  hostname = nw_endpoint_get_hostname(endpoint);
  unsigned int port = nw_endpoint_get_port(*(nw_endpoint_t *)(*(void *)(a1 + 40) + 120));
  host_with_numeric_unsigned int port = nw_endpoint_create_host_with_numeric_port(hostname, port);
  int is_equal = nw_endpoint_is_equal(*(void **)(*(void *)(a1 + 40) + 120), (void *)host_with_numeric_port, 0);
  if (is_equal) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  if (host_with_numeric_port) {
    os_release((void *)host_with_numeric_port);
  }
  return is_equal ^ 1u;
}

uint64_t nw_protocol_http_client_bottom_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
    int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (!__nwlog_fault(v12, &type, &v51)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      int v15 = "%{public}s called with null protocol";
      goto LABEL_103;
    }
    if (!v51)
    {
      uint64_t v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      int v15 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_103;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v42 = __nwlog_obj();
    os_log_type_t v43 = type;
    BOOL v45 = os_log_type_enabled(v42, type);
    if (!backtrace_string)
    {
      if (!v45) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      int v15 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_103;
    }
    if (!v45) {
      goto LABEL_90;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    uint64_t v46 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_89;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
    int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (!__nwlog_fault(v12, &type, &v51)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      int v15 = "%{public}s called with null http_client_bottom";
      goto LABEL_103;
    }
    if (!v51)
    {
      uint64_t v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      int v15 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
      goto LABEL_103;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v42 = __nwlog_obj();
    os_log_type_t v43 = type;
    BOOL v47 = os_log_type_enabled(v42, type);
    if (!backtrace_string)
    {
      if (!v47) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      int v15 = "%{public}s called with null http_client_bottom, no backtrace";
      goto LABEL_103;
    }
    if (!v47) {
      goto LABEL_90;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    uint64_t v46 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_89:
    _os_log_impl(&dword_1830D4000, v42, v43, v46, buf, 0x16u);
    goto LABEL_90;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
    int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (!__nwlog_fault(v12, &type, &v51)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      int v15 = "%{public}s called with null other_protocol";
      goto LABEL_103;
    }
    if (v51)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      BOOL v48 = os_log_type_enabled(v42, type);
      if (backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          uint64_t v46 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
          goto LABEL_89;
        }
LABEL_90:
        free(backtrace_string);
        goto LABEL_61;
      }
      if (!v48) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      int v15 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      uint64_t v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      int v15 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
LABEL_103:
    id v38 = v42;
    os_log_type_t v39 = v43;
    uint32_t v40 = 12;
    goto LABEL_60;
  }
  if (!*((void *)handle + 12))
  {
    uint64_t v4 = mach_continuous_approximate_time();
    if (v4 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = v4;
    }
    *((void *)handle + 12) = v5;
  }
  if (*((nw_protocol **)handle + 6) != a2)
  {
    uint64_t v6 = *((void *)handle + 23);
    uint64_t v7 = *((void *)handle + 24);
    if (v6 != v7)
    {
      while (*(nw_protocol **)v6 != a2)
      {
        v6 += 16;
        if (v6 == v7) {
          goto LABEL_19;
        }
      }
    }
    if (v6 != v7)
    {
      uint64_t v8 = 1;
      *(_DWORD *)(v6 + 8) = 1;
      return v8;
    }
LABEL_19:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = a2;
    int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (!__nwlog_fault(v12, &type, &v51)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint32_t v13 = gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = a2;
        int v15 = "%{public}s Protocol %p isn't an input handler of http client bottom";
LABEL_59:
        id v38 = v13;
        os_log_type_t v39 = v14;
        uint32_t v40 = 22;
LABEL_60:
        _os_log_impl(&dword_1830D4000, v38, v39, v15, buf, v40);
      }
    }
    else if (v51)
    {
      BOOL v16 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint32_t v13 = gLogObj;
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v16)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = a2;
          *(_WORD *)&buf[22] = 2082;
          BOOL v54 = v16;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s Protocol %p isn't an input handler of http client bottom, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v16);
        goto LABEL_61;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = a2;
        int v15 = "%{public}s Protocol %p isn't an input handler of http client bottom, no backtrace";
        goto LABEL_59;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint32_t v13 = gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = a2;
        int v15 = "%{public}s Protocol %p isn't an input handler of http client bottom, backtrace limit exceeded";
        goto LABEL_59;
      }
    }
LABEL_61:
    if (v12) {
      free(v12);
    }
    return 0;
  }
  parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
  if (parameters)
  {
    uint64_t v10 = os_retain(parameters);
    char v11 = handle[112];
    if ((v11 & 1) == 0) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v10 = 0;
    char v11 = handle[112];
    if ((v11 & 1) == 0) {
      goto LABEL_31;
    }
  }
  os_log_type_t v18 = (void *)*((void *)handle + 13);
  if (v18)
  {
    os_release(v18);
    char v11 = handle[112];
  }
LABEL_31:
  *((void *)handle + 13) = v10;
  handle[112] = v11 | 1;
  remote_endpoint = (void *)nw_protocol_get_remote_endpoint(*((void *)handle + 6));
  if (remote_endpoint)
  {
    id v20 = os_retain(remote_endpoint);
    char v21 = handle[128];
    if ((v21 & 1) == 0) {
      goto LABEL_37;
    }
  }
  else
  {
    id v20 = 0;
    char v21 = handle[128];
    if ((v21 & 1) == 0) {
      goto LABEL_37;
    }
  }
  char v22 = (void *)*((void *)handle + 15);
  if (v22)
  {
    os_release(v22);
    char v21 = handle[128];
  }
LABEL_37:
  *((void *)handle + 15) = v20;
  handle[128] = v21 | 1;
  id http_messaging_options = nw_parameters_find_http_messaging_options(*((void **)handle + 13), (uint64_t)handle);
  id v24 = http_messaging_options;
  if (http_messaging_options)
  {
    uint64_t v25 = *((void *)handle + 22);
    v50[0] = MEMORY[0x1E4F143A8];
    v50[1] = 0x40000000;
    v50[2] = ___ZL38nw_protocol_http_client_bottom_connectP11nw_protocolS0__block_invoke;
    v50[3] = &unk_1E523D570;
    void v50[4] = v25;
    id v26 = http_messaging_options;
    int v27 = v50;
    __int16 v28 = (id *)v26;
    id v29 = v28[1];

    if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v29, nw_protocol_copy_http_messaging_definition_definition);

    if (is_equal_unsafe)
    {
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __nw_http_messaging_options_set_override_protocol_handler_block_invoke;
      BOOL v54 = (const char *)&unk_1E5248ED8;
      unint64_t v55 = v27;
      nw_protocol_options_access_handle(v28, buf);
    }
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 0x40000000;
    v49[2] = ___ZL38nw_protocol_http_client_bottom_connectP11nw_protocolS0__block_invoke_2;
    v49[3] = &unk_1E523D598;
    v49[4] = v25;
    v49[5] = handle;
    int64_t v31 = v28;
    uint64_t v32 = v49;
    BOOL v33 = v31;
    id v34 = v28[1];

    if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
    }
    BOOL v35 = nw_protocol_definition_is_equal_unsafe((uint64_t)v34, nw_protocol_copy_http_messaging_definition_definition);

    if (v35)
    {
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __nw_http_messaging_options_set_can_accept_handler_block_invoke;
      BOOL v54 = (const char *)&unk_1E5248ED8;
      unint64_t v55 = v32;
      nw_protocol_options_access_handle(v33, buf);
    }
  }
  uint64_t v36 = *((void *)handle + 4);
  if (v36)
  {
    uint64_t v8 = nw_protocol_connect(v36, (uint64_t)handle);
    if (!v24) {
      return v8;
    }
    goto LABEL_54;
  }
  if ((handle[294] & 4) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v37 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = handle + 208;
      *(_WORD *)&buf[22] = 2080;
      BOOL v54 = " ";
      _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sconnect bottom protocol, resuming child handler", buf, 0x20u);
    }
  }
  buf[0] = 0;
  uint64_t v8 = 1;
  nw_protocol_notify(*((void **)handle + 6), (uint64_t)handle, 23);
  if (v24) {
LABEL_54:
  }
    os_release(v24);
  return v8;
}

uint64_t ___ZL38nw_protocol_http_client_bottom_connectP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (!result) {
    return result;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
    __int16 v80 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v109 = 0;
    if (!__nwlog_fault(v80, type, &v109)) {
      goto LABEL_131;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v81 = __nwlog_obj();
      os_log_type_t v82 = type[0];
      if (!os_log_type_enabled(v81, type[0])) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
      char v83 = "%{public}s called with null http_messaging_protocol";
    }
    else if (v109)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v81 = __nwlog_obj();
      os_log_type_t v82 = type[0];
      BOOL v85 = os_log_type_enabled(v81, type[0]);
      if (backtrace_string)
      {
        if (v85)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v81, v82, "%{public}s called with null http_messaging_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_131;
      }
      if (!v85)
      {
LABEL_131:
        if (v80) {
          free(v80);
        }
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
      char v83 = "%{public}s called with null http_messaging_protocol, no backtrace";
    }
    else
    {
      __int16 v81 = __nwlog_obj();
      os_log_type_t v82 = type[0];
      if (!os_log_type_enabled(v81, type[0])) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
      char v83 = "%{public}s called with null http_messaging_protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v81, v82, v83, buf, 0xCu);
    goto LABEL_131;
  }
  uint64_t v6 = result;
  if (nw_protocol_copy_info(a2, 253))
  {
    uint64_t result = 0;
    if ((*(unsigned char *)(v6 + 294) & 4) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v7 = __nwlog_obj();
        uint64_t result = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
        if (result)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v6 + 208;
          *(_WORD *)&buf[22] = 2080;
          unint64_t v111 = " ";
          uint64_t v8 = "%{public}s %{public}s%sreplacing protocol already has a listen handler, ignoring";
          int64_t v9 = v7;
          os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
LABEL_29:
          _os_log_impl(&dword_1830D4000, v9, v10, v8, buf, 0x20u);
          return 0;
        }
      }
    }
    return result;
  }
  char v11 = *(void **)(a2 + 16);
  if (nw_protocol_http_messaging_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_77555);
  }
  BOOL v12 = nw_protocols_are_equal(v11, nw_protocol_http_messaging_identifier::protocol_identifier);
  uint32_t v13 = *(void **)(a2 + 16);
  if (nw_protocol_http1_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_40283);
  }
  if (nw_protocols_are_equal(v13, &nw_protocol_http1_identifier::http1_protocol_identifier)) {
    goto LABEL_19;
  }
  os_log_type_t v14 = *(void **)(a2 + 16);
  if (nw_protocol_http2_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_85036);
  }
  if (nw_protocols_are_equal(v14, &nw_protocol_http2_identifier::http2_protocol_identifier)) {
    goto LABEL_19;
  }
  int v15 = *(void **)(a2 + 16);
  if (nw_protocol_http3_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_13_62491);
  }
  if (nw_protocols_are_equal(v15, &nw_protocol_http3_identifier::http3_protocol_identifier))
  {
LABEL_19:
    BOOL v16 = 1;
  }
  else
  {
    uint64_t v44 = *(void **)(a2 + 16);
    if (nw_protocol_oblivious_http_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28841);
    }
    BOOL v16 = nw_protocols_are_equal(v44, &nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier);
  }
  uint64_t v17 = *(void *)(v6 + 136);
  if (v17) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = !v12 && !v16;
  }
  if (!v18)
  {
    if ((*(unsigned char *)(v6 + 294) & 4) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v86 = __nwlog_obj();
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v6 + 208;
          *(_WORD *)&buf[22] = 2080;
          unint64_t v111 = " ";
          *(_WORD *)unint64_t v112 = 2048;
          *(void *)&v112[2] = a2;
          _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%ssetting http_messaging %p", buf, 0x2Au);
        }
      }
    }
    *(void *)(v6 + 136) = a2;
LABEL_33:
    if ((*(unsigned char *)(v6 + 294) & 1) == 0 && v16)
    {
      if ((*(unsigned char *)(v6 + 294) & 4) == 0)
      {
        if (gLogDatapath)
        {
          char v87 = __nwlog_obj();
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v88 = *(void *)(v6 + 136);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v6 + 208;
            *(_WORD *)&buf[22] = 2080;
            unint64_t v111 = " ";
            *(_WORD *)unint64_t v112 = 2048;
            *(void *)&v112[2] = v88;
            *(_WORD *)&v112[10] = 2048;
            *(void *)&v112[12] = a2;
            _os_log_impl(&dword_1830D4000, v87, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreplacing http_messaging %p with %p", buf, 0x34u);
          }
        }
      }
      *(void *)(v6 + 136) = a2;
    }
    if (*(_DWORD *)(*(void *)(a2 + 16) + 36) != 2)
    {
      if ((*(unsigned char *)(v6 + 294) & 4) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v43 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v6 + 208;
          *(_WORD *)&buf[22] = 2080;
          unint64_t v111 = " ";
          _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sReverse proxy tunnel is not multiplex", buf, 0x20u);
        }
      }
      return 1;
    }
    *(void *)(v6 + 136) = a2;
    nw_protocol_add_listen_handler(a2, v6 + 64);
    uint64_t v21 = *(void *)(v6 + 72);
    if (v21 != *(void *)(v6 + 136)) {
      *(void *)(v6 + 136) = v21;
    }
    if (!a3 || !nw_protocol_metadata_is_http_connection(a3)) {
      goto LABEL_76;
    }
    char v22 = os_retain(a3);
    char v23 = *(unsigned char *)(v6 + 152);
    if (v23)
    {
      id v24 = *(void **)(v6 + 144);
      if (v24)
      {
        os_release(v24);
        char v23 = *(unsigned char *)(v6 + 152);
      }
    }
    *(void *)(v6 + 144) = v22;
    *(unsigned char *)(v6 + 152) = v23 | 1;
    id v25 = v22;
    id v26 = &__block_literal_global_35_22679;
    id v27 = &__block_literal_global_35_22679;
    if (v25)
    {
      __int16 v28 = (id *)v25;
      id v29 = v28[1];

      if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
      }
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v29, nw_protocol_copy_http_connection_definition_definition);

      if (is_equal_unsafe)
      {
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __nw_http_connection_metadata_set_certificate_added_handler_block_invoke;
        unint64_t v111 = (const char *)&unk_1E5249228;
        *(void *)&v112[8] = v6;
        id v31 = &__block_literal_global_35_22679;
        *(void *)unint64_t v112 = &__block_literal_global_35_22679;
        if (v28[4])
        {
          (*(void (**)(unsigned char *))&buf[16])(buf);
          id v26 = *(void **)v112;
        }

        goto LABEL_55;
      }
      uint64_t v93 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
      unint64_t v90 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v109 = 0;
      if (!__nwlog_fault(v90, type, &v109)) {
        goto LABEL_169;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        unint64_t v91 = __nwlog_obj();
        os_log_type_t v94 = type[0];
        if (os_log_type_enabled(v91, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_1830D4000, v91, v94, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
      }
      else if (v109)
      {
        unint64_t v98 = (char *)__nw_create_backtrace_string();
        unint64_t v91 = __nwlog_obj();
        os_log_type_t v99 = type[0];
        BOOL v100 = os_log_type_enabled(v91, type[0]);
        if (v98)
        {
          if (v100)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v98;
            _os_log_impl(&dword_1830D4000, v91, v99, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v98);
          if (!v90)
          {
LABEL_55:

            uint64_t v32 = *(void **)(v6 + 144);
            *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
            uint64_t v105 = 0x40000000;
            unint64_t v106 = ___ZL54nw_protocol_http_client_bottom_override_http_messagingP30nw_protocol_http_client_bottomP11nw_protocolP20nw_protocol_metadata_block_invoke_2;
            unint64_t v107 = &__block_descriptor_tmp_36_22680;
            uint64_t v108 = v6;
            nw_http_connection_metadata_enumerate_secondary_certificates(v32, type);
            parameters = nw_protocol_get_parameters(*(void *)(v6 + 136));
            if (!parameters)
            {
LABEL_76:
              BOOL v45 = &nwlog_legacy_init(void)::init_once;
              uint64_t v46 = &unk_1EB267000;
              BOOL v47 = "nw_protocol_http_client_bottom_override_http_messaging";
              while (1)
              {
                uint64_t v49 = *(void *)(v6 + 184);
                uint64_t v48 = *(void *)(v6 + 192);
                uint64_t v50 = v49;
                if (v49 != v48)
                {
                  while (*(_DWORD *)(v50 + 8) == 2)
                  {
                    v50 += 16;
                    if (v50 == v48) {
                      return 1;
                    }
                  }
                }
                if (v50 == v48) {
                  return 1;
                }
                char v51 = *(void **)v50;
                int v52 = *(_DWORD *)(v50 + 8);
                uint64_t v53 = v50 + 16;
                if (v50 + 16 != v48)
                {
                  unint64_t v54 = v48 - v50 - 32;
                  if (v54 >= 0x10)
                  {
                    uint64_t v55 = (v50 - v49) >> 4;
                    uint64_t v56 = (v54 >> 4) + 1;
                    uint64_t v57 = 16 * (v56 & 0x1FFFFFFFFFFFFFFELL);
                    v50 += v57;
                    uint64_t v58 = v49 + 16 * v55 + 24;
                    uint64_t v59 = v56 & 0x1FFFFFFFFFFFFFFELL;
                    do
                    {
                      uint64_t v60 = *(void *)(v58 + 8);
                      *(void *)(v58 - 24) = *(void *)(v58 - 8);
                      *(void *)(v58 - 8) = v60;
                      LODWORD(v60) = *(_DWORD *)(v58 + 16);
                      *(_DWORD *)(v58 - 16) = *(_DWORD *)v58;
                      *(_DWORD *)uint64_t v58 = v60;
                      v58 += 32;
                      v59 -= 2;
                    }
                    while (v59);
                    if (v56 == (v56 & 0x1FFFFFFFFFFFFFFELL)) {
                      goto LABEL_89;
                    }
                    v53 += v57;
                  }
                  do
                  {
                    *(void *)uint64_t v50 = *(void *)v53;
                    *(_DWORD *)(v50 + 8) = *(_DWORD *)(v53 + 8);
                    v50 += 16;
                    v53 += 16;
                  }
                  while (v53 != v48);
                }
LABEL_89:
                *(void *)(v6 + 192) = v50;
                unint64_t v61 = (void *)nw_protocol_get_parameters((uint64_t)v51);
                if (nw_protocol_http_client_bottom_accept(v6, *(void **)(v6 + 120), v61)
                  && (nw_http_client_bottom_add_to_messaging(v6, (uint64_t)v51) & 1) != 0)
                {
                  if (v52 == 1) {
                    nw_protocol_connect(v51[4], (uint64_t)v51);
                  }
                }
                else
                {
                  if ((*(unsigned char *)(v6 + 294) & 4) == 0)
                  {
                    pthread_once(v45, nwlog_legacy_init_once);
                    networkd_settings_init();
                    uint64_t v62 = *((void *)v46 + 237);
                    if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = v47;
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v6 + 208;
                      *(_WORD *)&buf[22] = 2080;
                      unint64_t v111 = " ";
                      _os_log_impl(&dword_1830D4000, v62, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sMessaging cannot accept stream", buf, 0x20u);
                    }
                  }
                  unint64_t v64 = *(char **)(v6 + 192);
                  unint64_t v63 = *(void *)(v6 + 200);
                  if ((unint64_t)v64 >= v63)
                  {
                    char v66 = v45;
                    int64_t v67 = v46;
                    char v68 = *(char **)(v6 + 184);
                    uint64_t v69 = (v64 - v68) >> 4;
                    unint64_t v70 = v69 + 1;
                    if ((unint64_t)(v69 + 1) >> 60) {
                      abort();
                    }
                    uint64_t v71 = v63 - (void)v68;
                    if (v71 >> 3 > v70) {
                      unint64_t v70 = v71 >> 3;
                    }
                    BOOL v72 = (unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0;
                    unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
                    if (!v72) {
                      unint64_t v73 = v70;
                    }
                    if (v73 >> 60) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    char v74 = v47;
                    uint64_t v75 = 16 * v73;
                    char v76 = (char *)operator new(16 * v73);
                    unint64_t v77 = &v76[16 * v69];
                    *(void *)unint64_t v77 = v51;
                    *((_DWORD *)v77 + 2) = 2;
                    if (v64 == v68)
                    {
                      int v79 = &v76[16 * v69];
                      uint64_t v46 = v67;
                    }
                    else
                    {
                      char v78 = &v76[16 * v69];
                      uint64_t v46 = v67;
                      do
                      {
                        int v79 = v78 - 16;
                        *((_OWORD *)v78 - 1) = *((_OWORD *)v64 - 1);
                        v64 -= 16;
                        v78 -= 16;
                      }
                      while (v64 != v68);
                    }
                    unint64_t v65 = v77 + 16;
                    *(void *)(v6 + 184) = v79;
                    *(void *)(v6 + 192) = v77 + 16;
                    *(void *)(v6 + 200) = &v76[v75];
                    if (v68) {
                      operator delete(v68);
                    }
                    BOOL v47 = v74;
                    BOOL v45 = v66;
                  }
                  else
                  {
                    *(void *)unint64_t v64 = v51;
                    *((_DWORD *)v64 + 2) = 2;
                    unint64_t v65 = v64 + 16;
                  }
                  *(void *)(v6 + 192) = v65;
                  nw_protocol_error(v51, v6);
                  nw_protocol_disconnected(v51, v6);
                }
              }
            }
            id v34 = *(NSObject **)(v6 + 104);
            BOOL v35 = nw_parameters_copy_default_protocol_stack(parameters);
            uint64_t v36 = nw_parameters_copy_default_protocol_stack(v34);
            uint64_t v37 = nw_protocol_stack_copy_transport_protocol(v35);
            nw_protocol_options_t v38 = nw_protocol_stack_copy_transport_protocol(v36);
            nw_protocol_options_t v39 = v38;
            if (v37)
            {
              if (v38)
              {
                nw_protocol_definition_t v40 = nw_protocol_options_copy_definition(v37);
                if (nw_protocol_options_matches_definition(v39, v40))
                {
                  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v37);
                  nw_parameters_set_protocol_instance(v39, v42, protocol_handle);
                  if ((*(unsigned char *)(v6 + 294) & 4) == 0)
                  {
                    if (gLogDatapath)
                    {
                      unint64_t v103 = __nwlog_obj();
                      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v6 + 208;
                        *(_WORD *)&buf[22] = 2080;
                        unint64_t v111 = " ";
                        *(_WORD *)unint64_t v112 = 2048;
                        *(void *)&v112[2] = v39;
                        *(_WORD *)&v112[10] = 2048;
                        *(void *)&v112[12] = v37;
                        _os_log_impl(&dword_1830D4000, v103, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sChanged http_client_bottom transport from %p to %p", buf, 0x34u);
                      }
                    }
                  }
                }
                os_release(v39);
              }
            }
            else
            {
              uint64_t v37 = v38;
              if (!v38)
              {
LABEL_72:
                if (v36) {
                  os_release(v36);
                }
                if (v35) {
                  os_release(v35);
                }
                goto LABEL_76;
              }
            }
            os_release(v37);
            goto LABEL_72;
          }
LABEL_170:
          free(v90);
          goto LABEL_55;
        }
        if (v100)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_1830D4000, v91, v99, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unint64_t v91 = __nwlog_obj();
        os_log_type_t v102 = type[0];
        if (os_log_type_enabled(v91, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_1830D4000, v91, v102, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      uint64_t v89 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
      unint64_t v90 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v109 = 0;
      if (!__nwlog_fault(v90, type, &v109)) {
        goto LABEL_169;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        unint64_t v91 = __nwlog_obj();
        os_log_type_t v92 = type[0];
        if (os_log_type_enabled(v91, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_1830D4000, v91, v92, "%{public}s called with null metadata", buf, 0xCu);
        }
      }
      else if (v109)
      {
        unint64_t v95 = (char *)__nw_create_backtrace_string();
        unint64_t v91 = __nwlog_obj();
        os_log_type_t v96 = type[0];
        BOOL v97 = os_log_type_enabled(v91, type[0]);
        if (v95)
        {
          if (v97)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v95;
            _os_log_impl(&dword_1830D4000, v91, v96, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v95);
LABEL_169:
          if (!v90) {
            goto LABEL_55;
          }
          goto LABEL_170;
        }
        if (v97)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_1830D4000, v91, v96, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unint64_t v91 = __nwlog_obj();
        os_log_type_t v101 = type[0];
        if (os_log_type_enabled(v91, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_1830D4000, v91, v101, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_169;
  }
  if (v17) {
    goto LABEL_33;
  }
  if ((*(unsigned char *)(v6 + 294) & 4) != 0) {
    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v19 = gLogObj;
  uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
  if (result)
  {
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v6 + 208;
    *(_WORD *)&buf[22] = 2080;
    unint64_t v111 = " ";
    uint64_t v8 = "%{public}s %{public}s%spassed messaging protocol invalid for overriding";
    int64_t v9 = v19;
    os_log_type_t v10 = OS_LOG_TYPE_INFO;
    goto LABEL_29;
  }
  return result;
}

uint64_t ___ZL38nw_protocol_http_client_bottom_connectP11nw_protocolS0__block_invoke_2(uint64_t a1)
{
  uint64_t v2 = 1;
  if ((*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))()) {
    return nw_http_client_bottom_stalled(*(void *)(a1 + 40)) ^ 1;
  }
  return v2;
}

uint64_t ___ZL54nw_protocol_http_client_bottom_override_http_messagingP30nw_protocol_http_client_bottomP11nw_protocolP20nw_protocol_metadata_block_invoke_2(uint64_t a1, nw_endpoint_t endpoint)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  hostname = nw_endpoint_get_hostname(endpoint);
  unsigned int port = nw_endpoint_get_port(*(nw_endpoint_t *)(*(void *)(a1 + 32) + 120));
  host_with_numeric_unsigned int port = nw_endpoint_create_host_with_numeric_port(hostname, port);
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6 || (*(unsigned char *)(v6 + 294) & 4) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v8 = __nwlog_obj();
      BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
      uint64_t v6 = *(void *)(a1 + 32);
      if (v9)
      {
        os_log_type_t v10 = (const char *)(v6 + 208);
        if (!v6) {
          os_log_type_t v10 = "";
        }
        int v12 = 136446978;
        uint32_t v13 = "nw_protocol_http_client_bottom_override_http_messaging_block_invoke_2";
        __int16 v14 = 2082;
        int v15 = v10;
        char v11 = " ";
        if (!v6) {
          char v11 = "";
        }
        __int16 v16 = 2080;
        uint64_t v17 = v11;
        __int16 v18 = 2112;
        BOOL v19 = host_with_numeric_port;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%smaking endpoint %@ joinable by http_client_bottom", (uint8_t *)&v12, 0x2Au);
        uint64_t v6 = *(void *)(a1 + 32);
      }
    }
  }
  nw_protocol_http_client_bottom_endpoint_joinable(v6, (void *)host_with_numeric_port);
  if (host_with_numeric_port) {
    os_release((void *)host_with_numeric_port);
  }
  return 1;
}

void nw_protocol_http_client_bottom_endpoint_joinable(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
      uint64_t v8 = "%{public}s called with null http_client_bottom";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_35:
        if (!v5) {
          return;
        }
        goto LABEL_36;
      }
      if (!v10) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
      uint64_t v8 = "%{public}s called with null http_client_bottom, no backtrace";
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
      uint64_t v8 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    }
LABEL_34:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_35;
  }
  if (a2)
  {
    id v4 = nw_endpoint_copy_registrar_for_identifier(*(void **)(a1 + 120), *(long long **)(a1 + 16), 0);
    nw_protocol_instance_registrar_add_wildcard_edge_for_instance(v4, *(void **)(a1 + 120), a1, a2);
    if (v4)
    {
      os_release(v4);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13)) {
    goto LABEL_35;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
    uint64_t v8 = "%{public}s called with null endpoint";
    goto LABEL_34;
  }
  if (!v13)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
    uint64_t v8 = "%{public}s called with null endpoint, backtrace limit exceeded";
    goto LABEL_34;
  }
  char v11 = (char *)__nw_create_backtrace_string();
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  BOOL v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
    uint64_t v8 = "%{public}s called with null endpoint, no backtrace";
    goto LABEL_34;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
    __int16 v17 = 2082;
    __int16 v18 = v11;
    _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5) {
LABEL_36:
  }
    free(v5);
}

void ___ZL54nw_protocol_http_client_bottom_override_http_messagingP30nw_protocol_http_client_bottomP11nw_protocolP20nw_protocol_metadata_block_invoke(int a1, uint64_t a2, nw_endpoint_t endpoint)
{
  hostname = nw_endpoint_get_hostname(endpoint);
  unsigned int port = nw_endpoint_get_port(*(nw_endpoint_t *)(a2 + 120));
  host_with_numeric_unsigned int port = nw_endpoint_create_host_with_numeric_port(hostname, port);
  nw_protocol_http_client_bottom_endpoint_joinable(a2, (void *)host_with_numeric_port);
  if (host_with_numeric_port)
  {
    os_release((void *)host_with_numeric_port);
  }
}

uint64_t nw_protocol_http_client_bottom_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v15 = "nw_protocol_http_client_bottom_get_remote_endpoint";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      int v15 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      os_log_type_t v7 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v12)
      {
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_35;
        }
        *(_DWORD *)buf = 136446210;
        int v15 = "nw_protocol_http_client_bottom_get_remote_endpoint";
        os_log_type_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          int v15 = "nw_protocol_http_client_bottom_get_remote_endpoint";
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v4) {
          return 0;
        }
        goto LABEL_36;
      }
      if (!v9) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      int v15 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      os_log_type_t v7 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_34:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_35;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v15 = "nw_protocol_http_client_bottom_get_remote_endpoint";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      int v15 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      os_log_type_t v7 = "%{public}s called with null http_client_bottom";
      goto LABEL_34;
    }
    if (!v12)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      int v15 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      os_log_type_t v7 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
      goto LABEL_34;
    }
    BOOL v10 = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!v10)
    {
      if (!v11) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      int v15 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      os_log_type_t v7 = "%{public}s called with null http_client_bottom, no backtrace";
      goto LABEL_34;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      int v15 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      __int16 v16 = 2082;
      __int16 v17 = v10;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v10);
LABEL_35:
    if (!v4) {
      return 0;
    }
LABEL_36:
    free(v4);
    return 0;
  }
  uint64_t result = handle[15];
  if (!result)
  {
    uint64_t v3 = handle[6];
    return nw_protocol_get_remote_endpoint(v3);
  }
  return result;
}

uint64_t nw_protocol_http_client_bottom_get_parameters(nw_protocol *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v15 = "nw_protocol_http_client_bottom_get_parameters";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      int v15 = "nw_protocol_http_client_bottom_get_parameters";
      os_log_type_t v7 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v12)
      {
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_35;
        }
        *(_DWORD *)buf = 136446210;
        int v15 = "nw_protocol_http_client_bottom_get_parameters";
        os_log_type_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          int v15 = "nw_protocol_http_client_bottom_get_parameters";
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v4) {
          return 0;
        }
        goto LABEL_36;
      }
      if (!v9) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      int v15 = "nw_protocol_http_client_bottom_get_parameters";
      os_log_type_t v7 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_34:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_35;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v15 = "nw_protocol_http_client_bottom_get_parameters";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      int v15 = "nw_protocol_http_client_bottom_get_parameters";
      os_log_type_t v7 = "%{public}s called with null http_client_bottom";
      goto LABEL_34;
    }
    if (!v12)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      int v15 = "nw_protocol_http_client_bottom_get_parameters";
      os_log_type_t v7 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
      goto LABEL_34;
    }
    BOOL v10 = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!v10)
    {
      if (!v11) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      int v15 = "nw_protocol_http_client_bottom_get_parameters";
      os_log_type_t v7 = "%{public}s called with null http_client_bottom, no backtrace";
      goto LABEL_34;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      int v15 = "nw_protocol_http_client_bottom_get_parameters";
      __int16 v16 = 2082;
      __int16 v17 = v10;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v10);
LABEL_35:
    if (!v4) {
      return 0;
    }
LABEL_36:
    free(v4);
    return 0;
  }
  uint64_t result = handle[13];
  if (!result)
  {
    uint64_t v3 = handle[6];
    return nw_protocol_get_parameters(v3);
  }
  return result;
}

uint64_t nw_protocol_http_client_bottom_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    nw_protocol_options_t v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v38, &type, &v49)) {
      goto LABEL_111;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_protocol_options_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_111;
      }
      *(_DWORD *)buf = 136446210;
      int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
      uint64_t v41 = "%{public}s called with null protocol";
LABEL_110:
      _os_log_impl(&dword_1830D4000, v39, v40, v41, buf, 0xCu);
      goto LABEL_111;
    }
    if (!v49)
    {
      nw_protocol_options_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        uint64_t v41 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    nw_protocol_options_t v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v43 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        uint64_t v41 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    if (!v43) {
      goto LABEL_95;
    }
    *(_DWORD *)buf = 136446466;
    int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    __int16 v53 = 2082;
    unint64_t v54 = (nw_protocol *)backtrace_string;
    uint64_t v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_94:
    _os_log_impl(&dword_1830D4000, v39, v40, v44, buf, 0x16u);
    goto LABEL_95;
  }
  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    nw_protocol_options_t v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v38, &type, &v49)) {
      goto LABEL_111;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_protocol_options_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_111;
      }
      *(_DWORD *)buf = 136446210;
      int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
      uint64_t v41 = "%{public}s called with null http_client_bottom";
      goto LABEL_110;
    }
    if (!v49)
    {
      nw_protocol_options_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        uint64_t v41 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    nw_protocol_options_t v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v45 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        uint64_t v41 = "%{public}s called with null http_client_bottom, no backtrace";
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    if (!v45) {
      goto LABEL_95;
    }
    *(_DWORD *)buf = 136446466;
    int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    __int16 v53 = 2082;
    unint64_t v54 = (nw_protocol *)backtrace_string;
    uint64_t v44 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
    goto LABEL_94;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    nw_protocol_options_t v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v38, &type, &v49)) {
      goto LABEL_111;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_protocol_options_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        uint64_t v41 = "%{public}s called with null other_protocol";
        goto LABEL_110;
      }
LABEL_111:
      if (!v38) {
        return 0;
      }
      uint64_t v36 = (char *)v38;
      goto LABEL_64;
    }
    if (!v49)
    {
      nw_protocol_options_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        uint64_t v41 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    nw_protocol_options_t v39 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v46 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        uint64_t v41 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
      __int16 v53 = 2082;
      unint64_t v54 = (nw_protocol *)backtrace_string;
      uint64_t v44 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_94;
    }
LABEL_95:
    free(backtrace_string);
    goto LABEL_111;
  }
  if (handle->default_input_handler != a2)
  {
    output_handler_context = (char *)handle[2].output_handler_context;
    os_log_type_t v6 = *(char **)handle[3].flow_id;
    uint64_t v8 = output_handler_context;
    if (output_handler_context != v6)
    {
      while (*(nw_protocol **)v8 != a2)
      {
        v8 += 16;
        if (v8 == v6) {
          goto LABEL_33;
        }
      }
    }
    if (v8 != v6)
    {
      BOOL v9 = v8 + 16;
      if (v8 + 16 != v6)
      {
        unint64_t v10 = v6 - v8 - 32;
        if (v10 >= 0x10)
        {
          uint64_t v11 = (v8 - output_handler_context) >> 4;
          uint64_t v12 = (v10 >> 4) + 1;
          uint64_t v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFELL);
          v8 += v13;
          uint64_t v14 = (uint64_t)&output_handler_context[16 * v11 + 24];
          uint64_t v15 = v12 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            uint64_t v16 = *(void *)(v14 + 8);
            *(void *)(v14 - 24) = *(void *)(v14 - 8);
            *(void *)(v14 - 8) = v16;
            LODWORD(v16) = *(_DWORD *)(v14 + 16);
            *(_DWORD *)(v14 - 16) = *(_DWORD *)v14;
            *(_DWORD *)uint64_t v14 = v16;
            v14 += 32;
            v15 -= 2;
          }
          while (v15);
          if (v12 == (v12 & 0x1FFFFFFFFFFFFFFELL)) {
            goto LABEL_17;
          }
          v9 += v13;
        }
        do
        {
          *(void *)uint64_t v8 = *(void *)v9;
          *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
          v8 += 16;
          v9 += 16;
        }
        while (v9 != v6);
      }
LABEL_17:
      *(void *)handle[3].flow_id = v8;
      int v17 = (unsigned __int16)WORD2(handle[4].output_handler)++ + 1;
      if ((v17 & 0x10000) != 0)
      {
        if (gLogDatapath)
        {
          BOOL v47 = __nwlog_obj();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v48 = WORD2(handle[4].output_handler);
            *(_DWORD *)buf = 136446978;
            int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
            __int16 v53 = 2082;
            unint64_t v54 = (nw_protocol *)"http_client_bottom->stream_stall_count";
            __int16 v55 = 2048;
            uint64_t v56 = 1;
            __int16 v57 = 2048;
            unint64_t v58 = v48;
            _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
          }
        }
        WORD2(handle[4].output_handler) = -1;
      }
      if ((BYTE6(handle[4].output_handler) & 4) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          int v19 = WORD2(handle[4].output_handler);
          *(_DWORD *)buf = 136446978;
          int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
          __int16 v53 = 2082;
          unint64_t v54 = (nw_protocol *)((char *)handle + 208);
          __int16 v55 = 2080;
          uint64_t v56 = (uint64_t)" ";
          __int16 v57 = 1024;
          LODWORD(v58) = v19;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sstream setup stalls incremented to %u", buf, 0x26u);
        }
      }
      goto LABEL_44;
    }
LABEL_33:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    __int16 v53 = 2048;
    unint64_t v54 = a2;
    id v27 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v27, &type, &v49)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v28 = gLogObj;
      os_log_type_t v29 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        __int16 v53 = 2048;
        unint64_t v54 = a2;
        __int16 v30 = "%{public}s Protocol %p isn't an input handler of http client bottom";
LABEL_61:
        _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0x16u);
      }
    }
    else if (v49)
    {
      id v31 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v28 = gLogObj;
      os_log_type_t v29 = type;
      BOOL v32 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v31)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446722;
          int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
          __int16 v53 = 2048;
          unint64_t v54 = a2;
          __int16 v55 = 2082;
          uint64_t v56 = (uint64_t)v31;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s Protocol %p isn't an input handler of http client bottom, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v31);
        goto LABEL_62;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        __int16 v53 = 2048;
        unint64_t v54 = a2;
        __int16 v30 = "%{public}s Protocol %p isn't an input handler of http client bottom, no backtrace";
        goto LABEL_61;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v28 = gLogObj;
      os_log_type_t v29 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        __int16 v53 = 2048;
        unint64_t v54 = a2;
        __int16 v30 = "%{public}s Protocol %p isn't an input handler of http client bottom, backtrace limit exceeded";
        goto LABEL_61;
      }
    }
LABEL_62:
    if (!v27) {
      return 0;
    }
    uint64_t v36 = (char *)v27;
LABEL_64:
    free(v36);
    return 0;
  }
  nw_protocol_http_client_bottom_teardown((uint64_t)a1->handle);
  uint64_t v21 = handle[2].output_handler_context;
  uint64_t v20 = *(unsigned char **)handle[3].flow_id;
  unint64_t v22 = v20 - v21;
  if (v20 == v21)
  {
    nw_protocol_set_input_handler((uint64_t)handle, 0);
  }
  else
  {
    if ((v22 & 0x8000000000000000) != 0) {
      abort();
    }
    char v23 = operator new(v20 - v21);
    unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v23, v21, v22 & 0xFFFFFFFFFFFFFFF0);
    if ((v22 & 0xFFFFFFFFFFFFFFF0) != 0)
    {
      if ((BYTE6(handle[4].output_handler) & 4) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v25 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          int v52 = "nw_protocol_http_client_bottom_remove_input_handler";
          __int16 v53 = 2082;
          unint64_t v54 = (nw_protocol *)((char *)handle + 208);
          __int16 v55 = 2080;
          uint64_t v56 = (uint64_t)" ";
          __int16 v57 = 2048;
          unint64_t v58 = v22 >> 4;
          _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sfirst input handler bailed, restarting %zu input protocols", buf, 0x2Au);
        }
      }
      id v26 = v23 + 2;
      do
      {
        if (*v26 != 2) {
          nw_protocol_notify(*((void **)v26 - 1), (uint64_t)handle, 22);
        }
        v26 += 4;
        v24 -= 16;
      }
      while (v24);
    }
    nw_protocol_set_input_handler((uint64_t)handle, 0);
    operator delete(v23);
  }
LABEL_44:
  if (a2->output_handler != handle)
  {
    if (!*(void *)&handle[2].flow_id[8]) {
      goto LABEL_48;
    }
    return 1;
  }
  nw_protocol_set_output_handler((uint64_t)a2, 0);
  if (*(void *)&handle[2].flow_id[8]) {
    return 1;
  }
LABEL_48:
  if (handle->default_input_handler
    || handle[2].output_handler_context != *(void **)handle[3].flow_id
    || (BYTE6(handle[4].output_handler) & 8) != 0)
  {
    return 1;
  }
  if (a3) {
    char v33 = 8;
  }
  else {
    char v33 = 0;
  }
  BYTE6(handle[4].output_handler) = BYTE6(handle[4].output_handler) & 0xF7 | v33;
  uint64_t output_handler = (uint64_t)handle->output_handler;
  if (output_handler) {
    uint64_t v35 = nw_protocol_remove_input_handler(output_handler, (uint64_t)handle);
  }
  else {
    uint64_t v35 = 1;
  }
  if (a3)
  {
    nw_protocol_remove_instance((uint64_t)handle);
    handle->handle = 0;
    nw_http_client_bottom_destroy((uint64_t)handle);
  }
  return v35;
}

uint64_t nw_protocol_http_client_bottom_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26)) {
      goto LABEL_84;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        int v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
          int v19 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
          int v19 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      if (!v21) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      __int16 v30 = 2082;
      id v31 = (nw_protocol *)backtrace_string;
      unint64_t v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_65;
    }
    int v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    int v19 = "%{public}s called with null protocol";
LABEL_83:
    _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
    goto LABEL_84;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26)) {
      goto LABEL_84;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        int v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
          int v19 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v23 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
          int v19 = "%{public}s called with null http_client_bottom, no backtrace";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      if (!v23) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      __int16 v30 = 2082;
      id v31 = (nw_protocol *)backtrace_string;
      unint64_t v22 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
      goto LABEL_65;
    }
    int v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    int v19 = "%{public}s called with null http_client_bottom";
    goto LABEL_83;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26)) {
      goto LABEL_84;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_84;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      int v19 = "%{public}s called with null old_input_protocol";
      goto LABEL_83;
    }
    if (!v26)
    {
      int v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        int v19 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v24 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        int v19 = "%{public}s called with null old_input_protocol, no backtrace";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    if (!v24) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    __int16 v30 = 2082;
    id v31 = (nw_protocol *)backtrace_string;
    unint64_t v22 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
LABEL_65:
    _os_log_impl(&dword_1830D4000, v17, v18, v22, buf, 0x16u);
    goto LABEL_66;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26)) {
      goto LABEL_84;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        int v19 = "%{public}s called with null new_input_protocol";
        goto LABEL_83;
      }
LABEL_84:
      if (!v16) {
        return 0;
      }
      uint64_t v15 = (char *)v16;
      goto LABEL_30;
    }
    if (!v26)
    {
      int v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        int v19 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v25 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        int v19 = "%{public}s called with null new_input_protocol, no backtrace";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      __int16 v30 = 2082;
      id v31 = (nw_protocol *)backtrace_string;
      unint64_t v22 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
      goto LABEL_65;
    }
LABEL_66:
    free(backtrace_string);
    goto LABEL_84;
  }
  if (*((nw_protocol **)handle + 6) == a2)
  {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
    nw_protocol_set_input_handler((uint64_t)handle, (uint64_t)a3);
    return 1;
  }
  os_log_type_t v7 = (nw_protocol **)*((void *)handle + 23);
  os_log_type_t v6 = (nw_protocol **)*((void *)handle + 24);
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      v7 += 2;
      if (v7 == v6) {
        goto LABEL_14;
      }
    }
  }
  if (v7 != v6)
  {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
    const char *v7 = a3;
    return 1;
  }
LABEL_14:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
  __int16 v30 = 2048;
  id v31 = a2;
  BOOL v9 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v9, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      __int16 v30 = 2048;
      id v31 = a2;
      uint64_t v12 = "%{public}s Protocol %p isn't an input handler of http client bottom";
LABEL_27:
      _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0x16u);
      goto LABEL_28;
    }
    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      __int16 v30 = 2048;
      id v31 = a2;
      uint64_t v12 = "%{public}s Protocol %p isn't an input handler of http client bottom, backtrace limit exceeded";
      goto LABEL_27;
    }
    uint64_t v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v10 = gLogObj;
    os_log_type_t v11 = type;
    BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v13)
    {
      if (!v14) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      __int16 v30 = 2048;
      id v31 = a2;
      uint64_t v12 = "%{public}s Protocol %p isn't an input handler of http client bottom, no backtrace";
      goto LABEL_27;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      __int16 v30 = 2048;
      id v31 = a2;
      __int16 v32 = 2082;
      char v33 = v13;
      _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s Protocol %p isn't an input handler of http client bottom, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v13);
  }
LABEL_28:
  if (v9)
  {
    uint64_t v15 = (char *)v9;
LABEL_30:
    free(v15);
  }
  return 0;
}

uint64_t nw_protocol_http_client_bottom_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)char v51 = 136446210;
    *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
    id v31 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v42 = 0;
    if (!__nwlog_fault(v31, buf, &v42)) {
      goto LABEL_105;
    }
    if (buf[0] != 17)
    {
      if (!v42)
      {
        __int16 v32 = __nwlog_obj();
        os_log_type_t v33 = buf[0];
        if (os_log_type_enabled(v32, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)char v51 = 136446210;
          *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
          uint64_t v34 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_104;
        }
        goto LABEL_105;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v32 = __nwlog_obj();
      os_log_type_t v33 = buf[0];
      BOOL v36 = os_log_type_enabled(v32, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)char v51 = 136446210;
          *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
          uint64_t v34 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_104;
        }
        goto LABEL_105;
      }
      if (!v36) {
        goto LABEL_89;
      }
      *(_DWORD *)char v51 = 136446466;
      *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
      *(_WORD *)&v51[12] = 2082;
      *(void *)&v51[14] = backtrace_string;
      uint64_t v37 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_88;
    }
    __int16 v32 = __nwlog_obj();
    os_log_type_t v33 = buf[0];
    if (!os_log_type_enabled(v32, (os_log_type_t)buf[0])) {
      goto LABEL_105;
    }
    *(_DWORD *)char v51 = 136446210;
    *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
    uint64_t v34 = "%{public}s called with null protocol";
LABEL_104:
    _os_log_impl(&dword_1830D4000, v32, v33, v34, v51, 0xCu);
    goto LABEL_105;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)char v51 = 136446210;
    *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
    id v31 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v42 = 0;
    if (!__nwlog_fault(v31, buf, &v42)) {
      goto LABEL_105;
    }
    if (buf[0] != 17)
    {
      if (!v42)
      {
        __int16 v32 = __nwlog_obj();
        os_log_type_t v33 = buf[0];
        if (os_log_type_enabled(v32, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)char v51 = 136446210;
          *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
          uint64_t v34 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
          goto LABEL_104;
        }
        goto LABEL_105;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v32 = __nwlog_obj();
      os_log_type_t v33 = buf[0];
      BOOL v38 = os_log_type_enabled(v32, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)char v51 = 136446210;
          *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
          uint64_t v34 = "%{public}s called with null http_client_bottom, no backtrace";
          goto LABEL_104;
        }
        goto LABEL_105;
      }
      if (!v38) {
        goto LABEL_89;
      }
      *(_DWORD *)char v51 = 136446466;
      *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
      *(_WORD *)&v51[12] = 2082;
      *(void *)&v51[14] = backtrace_string;
      uint64_t v37 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
      goto LABEL_88;
    }
    __int16 v32 = __nwlog_obj();
    os_log_type_t v33 = buf[0];
    if (!os_log_type_enabled(v32, (os_log_type_t)buf[0])) {
      goto LABEL_105;
    }
    *(_DWORD *)char v51 = 136446210;
    *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
    uint64_t v34 = "%{public}s called with null http_client_bottom";
    goto LABEL_104;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)char v51 = 136446210;
    *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
    id v31 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v42 = 0;
    if (!__nwlog_fault(v31, buf, &v42)) {
      goto LABEL_105;
    }
    if (buf[0] != 17)
    {
      if (!v42)
      {
        __int16 v32 = __nwlog_obj();
        os_log_type_t v33 = buf[0];
        if (os_log_type_enabled(v32, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)char v51 = 136446210;
          *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
          uint64_t v34 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_104;
        }
        goto LABEL_105;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v32 = __nwlog_obj();
      os_log_type_t v33 = buf[0];
      BOOL v39 = os_log_type_enabled(v32, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)char v51 = 136446210;
          *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
          uint64_t v34 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_104;
        }
        goto LABEL_105;
      }
      if (!v39) {
        goto LABEL_89;
      }
      *(_DWORD *)char v51 = 136446466;
      *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
      *(_WORD *)&v51[12] = 2082;
      *(void *)&v51[14] = backtrace_string;
      uint64_t v37 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_88;
    }
    __int16 v32 = __nwlog_obj();
    os_log_type_t v33 = buf[0];
    if (!os_log_type_enabled(v32, (os_log_type_t)buf[0])) {
      goto LABEL_105;
    }
    *(_DWORD *)char v51 = 136446210;
    *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
    uint64_t v34 = "%{public}s called with null input_protocol";
    goto LABEL_104;
  }
  if (handle[17])
  {
    uint64_t v5 = a1->handle;
    return nw_http_client_bottom_add_to_messaging((uint64_t)v5, (uint64_t)a2);
  }
  parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
  if (!parameters)
  {
    __nwlog_obj();
    *(_DWORD *)char v51 = 136446210;
    *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
    id v31 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v42 = 0;
    if (!__nwlog_fault(v31, buf, &v42)) {
      goto LABEL_105;
    }
    if (buf[0] == 17)
    {
      __int16 v32 = __nwlog_obj();
      os_log_type_t v33 = buf[0];
      if (!os_log_type_enabled(v32, (os_log_type_t)buf[0])) {
        goto LABEL_105;
      }
      *(_DWORD *)char v51 = 136446210;
      *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
      uint64_t v34 = "%{public}s called with null parameters";
      goto LABEL_104;
    }
    if (!v42)
    {
      __int16 v32 = __nwlog_obj();
      os_log_type_t v33 = buf[0];
      if (os_log_type_enabled(v32, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)char v51 = 136446210;
        *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
        uint64_t v34 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_104;
      }
      goto LABEL_105;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v32 = __nwlog_obj();
    os_log_type_t v33 = buf[0];
    BOOL v40 = os_log_type_enabled(v32, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)char v51 = 136446210;
        *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
        uint64_t v34 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_104;
      }
      goto LABEL_105;
    }
    if (!v40) {
      goto LABEL_89;
    }
    *(_DWORD *)char v51 = 136446466;
    *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
    *(_WORD *)&v51[12] = 2082;
    *(void *)&v51[14] = backtrace_string;
    uint64_t v37 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
LABEL_88:
    _os_log_impl(&dword_1830D4000, v32, v33, v37, v51, 0x16u);
    goto LABEL_89;
  }
  uint64_t v8 = nw_parameters_copy_protocol_options_legacy(parameters, a1);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)char v51 = 136446210;
    *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
    id v31 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v42 = 0;
    if (!__nwlog_fault(v31, buf, &v42)) {
      goto LABEL_105;
    }
    if (buf[0] == 17)
    {
      __int16 v32 = __nwlog_obj();
      os_log_type_t v33 = buf[0];
      if (os_log_type_enabled(v32, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)char v51 = 136446210;
        *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
        uint64_t v34 = "%{public}s called with null options";
        goto LABEL_104;
      }
LABEL_105:
      if (v31) {
        free(v31);
      }
      return 0;
    }
    if (!v42)
    {
      __int16 v32 = __nwlog_obj();
      os_log_type_t v33 = buf[0];
      if (os_log_type_enabled(v32, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)char v51 = 136446210;
        *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
        uint64_t v34 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_104;
      }
      goto LABEL_105;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v32 = __nwlog_obj();
    os_log_type_t v33 = buf[0];
    BOOL v41 = os_log_type_enabled(v32, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)char v51 = 136446210;
        *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
        uint64_t v34 = "%{public}s called with null options, no backtrace";
        goto LABEL_104;
      }
      goto LABEL_105;
    }
    if (v41)
    {
      *(_DWORD *)char v51 = 136446466;
      *(void *)&v51[4] = "nw_protocol_http_client_bottom_add_input_handler";
      *(_WORD *)&v51[12] = 2082;
      *(void *)&v51[14] = backtrace_string;
      uint64_t v37 = "%{public}s called with null options, dumping backtrace:%{public}s";
      goto LABEL_88;
    }
LABEL_89:
    free(backtrace_string);
    goto LABEL_105;
  }
  memset(v54, 0, 19);
  long long v53 = 0u;
  long long v52 = 0u;
  BOOL v9 = v8;
  unint64_t v10 = v9;
  uint64_t v11 = 0;
  memset(v51, 0, sizeof(v51));
  while (1)
  {
    int v12 = v9[v11 + 48];
    v51[v11] = v12;
    if (!v12) {
      break;
    }
    if (++v11 == 83)
    {
      v54[18] = 0;
      break;
    }
  }

  if (handle[6])
  {
    BOOL v14 = (char *)handle[24];
    unint64_t v13 = handle[25];
    if ((unint64_t)v14 >= v13)
    {
      os_log_type_t v18 = (char *)handle[23];
      uint64_t v19 = (v14 - v18) >> 4;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60) {
        abort();
      }
      uint64_t v21 = v13 - (void)v18;
      if (v21 >> 3 > v20) {
        unint64_t v20 = v21 >> 3;
      }
      BOOL v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
      if (!v22) {
        unint64_t v23 = v20;
      }
      if (v23 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v24 = 16 * v23;
      BOOL v25 = (char *)operator new(16 * v23);
      char v26 = &v25[16 * v19];
      id v27 = &v25[v24];
      *(void *)char v26 = a2;
      *((_DWORD *)v26 + 2) = 0;
      uint64_t v15 = v26 + 16;
      if (v14 == v18)
      {
        __int16 v28 = &v25[16 * v19];
      }
      else
      {
        do
        {
          __int16 v28 = v26 - 16;
          *((_OWORD *)v26 - 1) = *((_OWORD *)v14 - 1);
          v14 -= 16;
          v26 -= 16;
        }
        while (v14 != v18);
      }
      handle[23] = v28;
      handle[24] = v15;
      handle[25] = v27;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(void *)BOOL v14 = a2;
      *((_DWORD *)v14 + 2) = 0;
      uint64_t v15 = v14 + 16;
    }
    handle[24] = v15;
    if ((*((unsigned char *)handle + 294) & 4) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v29 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v44 = "nw_protocol_http_client_bottom_add_input_handler";
        __int16 v45 = 2082;
        BOOL v46 = (char *)(handle + 26);
        __int16 v47 = 2080;
        unint64_t v48 = " ";
        __int16 v49 = 2082;
        uint64_t v50 = v51;
        _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sjoined by %{public}s", buf, 0x2Au);
      }
    }
  }
  else
  {
    nw_protocol_set_input_handler((uint64_t)handle, (uint64_t)a2);
    uint64_t v16 = 0;
    *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
    while (1)
    {
      int v17 = v51[v16];
      *((unsigned char *)handle + v16 + 208) = v17;
      if (!v17) {
        break;
      }
      if (++v16 == 83)
      {
        *((unsigned char *)handle + 291) = 0;
        break;
      }
    }
  }
  if (a2->output_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v30 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v44 = "nw_protocol_http_client_bottom_add_input_handler";
      _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_ERROR, "%{public}s Output handler already exists for protocol being added as input handler", buf, 0xCu);
    }
  }
  else
  {
    nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
  }
  os_release(v10);
  return 1;
}

double __nw_protocol_http_client_bottom_identifier_block_invoke()
{
  strcpy((char *)&nw_protocol_http_client_bottom_identifier::protocol_identifier, "http_client_bottom");
  *(void *)&double result = 0x200000005;
  qword_1E8F6A5B0 = 0x200000005;
  return result;
}

BOOL __nw_endpoint_flow_uses_multipath_block_invoke(uint64_t a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  BOOL v25 = 0;
  if (!copyconninfo(a2, -1, &v25))
  {
    id v4 = v25;
    int v5 = *((_DWORD *)v25 + 7);
    BOOL v3 = v5 == 2;
    if (v5 == 2)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(_DWORD *)v25 & 0x500) == 256;
      os_log_type_t v6 = (void *)v4[1];
      if (v6)
      {
        free(v6);
        v4[1] = 0;
      }
      os_log_type_t v7 = (void *)v4[2];
      if (v7)
      {
        free(v7);
        v4[2] = 0;
      }
      uint64_t v8 = (void *)v4[4];
      if (!v8)
      {
        BOOL v3 = 1;
LABEL_34:
        free(v4);
        return v3;
      }
LABEL_33:
      free(v8);
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_endpoint_flow_uses_multipath_block_invoke";
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          id v27 = "nw_endpoint_flow_uses_multipath_block_invoke";
          BOOL v14 = "%{public}s Didn't get a CIAUX_MPTCP";
LABEL_22:
          os_log_type_t v18 = v12;
          os_log_type_t v19 = v13;
LABEL_23:
          _os_log_impl(&dword_1830D4000, v18, v19, v14, buf, 0xCu);
          goto LABEL_24;
        }
        goto LABEL_24;
      }
      if (!v23)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          id v27 = "nw_endpoint_flow_uses_multipath_block_invoke";
          BOOL v14 = "%{public}s Didn't get a CIAUX_MPTCP, backtrace limit exceeded";
          goto LABEL_22;
        }
LABEL_24:

        goto LABEL_25;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v12 = (id)gLogObj;
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (!v17) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_endpoint_flow_uses_multipath_block_invoke";
        BOOL v14 = "%{public}s Didn't get a CIAUX_MPTCP, no backtrace";
        os_log_type_t v18 = v12;
        os_log_type_t v19 = v16;
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        id v27 = "nw_endpoint_flow_uses_multipath_block_invoke";
        __int16 v28 = 2082;
        os_log_type_t v29 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s Didn't get a CIAUX_MPTCP, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_25:
    if (v10) {
      free(v10);
    }
    id v4 = v25;
    if (!v25) {
      return 0;
    }
    unint64_t v20 = (void *)*((void *)v25 + 1);
    if (v20)
    {
      free(v20);
      v4[1] = 0;
    }
    uint64_t v21 = (void *)v4[2];
    if (v21)
    {
      free(v21);
      v4[2] = 0;
    }
    uint64_t v8 = (void *)v4[4];
    if (!v8)
    {
      BOOL v3 = 0;
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  return 0;
}

BOOL ___Z44nw_endpoint_flow_get_multipath_subflow_countP27NWConcrete_nw_endpoint_flow_block_invoke(uint64_t a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  BOOL v25 = 0;
  if (!copyconninfo(a2, -1, &v25))
  {
    id v4 = v25;
    int v5 = *((_DWORD *)v25 + 7);
    BOOL v3 = v5 == 2;
    if (v5 == 2)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = **((_DWORD **)v25 + 4);
      os_log_type_t v6 = (void *)v4[1];
      if (v6)
      {
        free(v6);
        v4[1] = 0;
      }
      os_log_type_t v7 = (void *)v4[2];
      if (v7)
      {
        free(v7);
        v4[2] = 0;
      }
      uint64_t v8 = (void *)v4[4];
      if (!v8)
      {
        BOOL v3 = 1;
LABEL_34:
        free(v4);
        return v3;
      }
LABEL_33:
      free(v8);
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_endpoint_flow_get_multipath_subflow_count_block_invoke";
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          id v27 = "nw_endpoint_flow_get_multipath_subflow_count_block_invoke";
          BOOL v14 = "%{public}s Didn't get a CIAUX_MPTCP";
LABEL_22:
          os_log_type_t v18 = v12;
          os_log_type_t v19 = v13;
LABEL_23:
          _os_log_impl(&dword_1830D4000, v18, v19, v14, buf, 0xCu);
          goto LABEL_24;
        }
        goto LABEL_24;
      }
      if (!v23)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          id v27 = "nw_endpoint_flow_get_multipath_subflow_count_block_invoke";
          BOOL v14 = "%{public}s Didn't get a CIAUX_MPTCP, backtrace limit exceeded";
          goto LABEL_22;
        }
LABEL_24:

        goto LABEL_25;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v12 = (id)gLogObj;
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (!v17) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_endpoint_flow_get_multipath_subflow_count_block_invoke";
        BOOL v14 = "%{public}s Didn't get a CIAUX_MPTCP, no backtrace";
        os_log_type_t v18 = v12;
        os_log_type_t v19 = v16;
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        id v27 = "nw_endpoint_flow_get_multipath_subflow_count_block_invoke";
        __int16 v28 = 2082;
        os_log_type_t v29 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s Didn't get a CIAUX_MPTCP, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_25:
    if (v10) {
      free(v10);
    }
    id v4 = v25;
    if (!v25) {
      return 0;
    }
    unint64_t v20 = (void *)*((void *)v25 + 1);
    if (v20)
    {
      free(v20);
      v4[1] = 0;
    }
    uint64_t v21 = (void *)v4[2];
    if (v21)
    {
      free(v21);
      v4[2] = 0;
    }
    uint64_t v8 = (void *)v4[4];
    if (!v8)
    {
      BOOL v3 = 0;
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  return 0;
}

uint64_t ___Z46nw_endpoint_flow_copy_multipath_subflow_countsP27NWConcrete_nw_endpoint_flow_block_invoke(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!copyconninfo(a2, -1, (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)))
  {
    if (*(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 28) == 2) {
      return 1;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15)) {
      goto LABEL_23;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (id)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
        id v9 = "%{public}s Didn't get a CIAUX_MPTCP";
LABEL_20:
        os_log_type_t v13 = v7;
        os_log_type_t v14 = v8;
LABEL_21:
        _os_log_impl(&dword_1830D4000, v13, v14, v9, buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
          __int16 v19 = 2082;
          unint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v11, "%{public}s Didn't get a CIAUX_MPTCP, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
        id v9 = "%{public}s Didn't get a CIAUX_MPTCP, no backtrace";
        os_log_type_t v13 = v7;
        os_log_type_t v14 = v11;
        goto LABEL_21;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (id)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
        id v9 = "%{public}s Didn't get a CIAUX_MPTCP, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

LABEL_23:
    if (v6) {
      free(v6);
    }
    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v3 = (id)gLogObj;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
    _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s copyconninfo failed", buf, 0xCu);
  }

  return 0;
}

uint64_t ___Z40nw_endpoint_flow_copy_multipath_tcp_infoP27NWConcrete_nw_endpoint_flow_block_invoke(uint64_t a1, int a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v31 = 0;
  if (!copymptcpinfo(a2, &v31))
  {
    BOOL v3 = v31;
    if (*((_DWORD *)v31 + 4))
    {
      uint64_t v4 = 0;
      id v5 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      unint64_t v28 = StatusReg;
      while (1)
      {
        uint64_t v7 = *(void *)(v3[1] + 8 * v4);
        if (!v7) {
          goto LABEL_6;
        }
        os_log_type_t v8 = *(_DWORD **)(v7 + 32);
        *(void *)key = 0;
        uint64_t v39 = 0;
        char v40 = 0;
        unsigned int v9 = v8[15];
        if (v9)
        {
          if (!if_indextoname(v9, key)) {
            break;
          }
        }
        xpc_dictionary_set_data(*(xpc_object_t *)(a1 + 32), key, v8, 0x198uLL);
LABEL_5:
        BOOL v3 = v31;
LABEL_6:
        if (++v4 >= (unint64_t)*((unsigned int *)v3 + 4)) {
          goto LABEL_37;
        }
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v11 = v8[15];
        *(_DWORD *)buf = 136446466;
        os_log_type_t v33 = v5;
        __int16 v34 = 1024;
        int v35 = v11;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s if_indextoname failed for outif: %d", buf, 0x12u);
      }

      int v12 = **(_DWORD **)(StatusReg + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v13 = (id)gLogObj;
      os_log_type_t v14 = v13;
      if (v12 == 6)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v33 = v5;
          __int16 v34 = 1024;
          int v35 = 6;
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s if_indextoname %{darwin.errno}d", buf, 0x12u);
        }

        goto LABEL_5;
      }
      *(_DWORD *)buf = 136446466;
      char v15 = v5;
      os_log_type_t v33 = v5;
      __int16 v34 = 1024;
      int v35 = v12;
      os_log_type_t v16 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v29 = 0;
      if (!__nwlog_fault((const char *)v16, &type, &v29))
      {
LABEL_30:
        if (!v16)
        {
LABEL_32:
          id v5 = v15;
          unint64_t StatusReg = v28;
          goto LABEL_5;
        }
LABEL_31:
        free(v16);
        goto LABEL_32;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v17 = (id)gLogObj;
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type))
        {
LABEL_29:

          goto LABEL_30;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v33 = v15;
        __int16 v34 = 1024;
        int v35 = v12;
        __int16 v19 = v17;
        os_log_type_t v20 = v18;
        uint64_t v21 = "%{public}s if_indextoname %{darwin.errno}d";
      }
      else
      {
        if (v29)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v23 = (id)gLogObj;
          os_log_type_t v24 = type;
          BOOL v25 = os_log_type_enabled(v23, type);
          if (backtrace_string)
          {
            if (v25)
            {
              *(_DWORD *)buf = 136446722;
              os_log_type_t v33 = v15;
              __int16 v34 = 1024;
              int v35 = v12;
              __int16 v36 = 2082;
              uint64_t v37 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s if_indextoname %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(backtrace_string);
            if (!v16) {
              goto LABEL_32;
            }
          }
          else
          {
            if (v25)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v33 = v15;
              __int16 v34 = 1024;
              int v35 = v12;
              _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s if_indextoname %{darwin.errno}d, no backtrace", buf, 0x12u);
            }

            if (!v16) {
              goto LABEL_32;
            }
          }
          goto LABEL_31;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v17 = (id)gLogObj;
        os_log_type_t v26 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_29;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v33 = v15;
        __int16 v34 = 1024;
        int v35 = v12;
        __int16 v19 = v17;
        os_log_type_t v20 = v26;
        uint64_t v21 = "%{public}s if_indextoname %{darwin.errno}d, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0x12u);
      goto LABEL_29;
    }
LABEL_37:
    freemptcpinfo(v3);
  }
  return 1;
}

id nw_connection_copy_proxy_settings(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v21 = __Block_byref_object_copy__23218;
    BOOL v22 = __Block_byref_object_dispose__23219;
    id v23 = 0;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_copy_proxy_settings_block_invoke;
    v15[3] = &unk_1E524B978;
    os_log_type_t v16 = v1;
    BOOL v17 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_proxy_settings_block_invoke((uint64_t)v15);
    os_unfair_lock_unlock(v2 + 34);
    BOOL v3 = *(void **)(*(void *)&buf[8] + 40);
    if (v3)
    {
      uint64_t v4 = v3;
      id v5 = v4[23];
    }
    else
    {
      id v5 = 0;
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_copy_proxy_settings";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v8, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_proxy_settings";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_copy_proxy_settings";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_proxy_settings";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_proxy_settings";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_6:

  return v5;
}

uint64_t __Block_byref_object_copy__23218(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23219(uint64_t a1)
{
}

void __nw_connection_copy_proxy_settings_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)nw_endpoint_handler_copy_connected_path(*(void **)(*(void *)(a1 + 32) + 144));
  BOOL v3 = v2;
  if (v2)
  {
    uint64_t v4 = v2;
    id v5 = v4[2];

    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 16);
      if (v8)
      {
        if (!nw_path_parameters_get_logging_disabled(*(void *)(v8 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          unsigned int v9 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
            goto LABEL_16;
          }
          int v10 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          int v14 = 136446466;
          char v15 = "nw_connection_copy_proxy_settings_block_invoke";
          __int16 v16 = 1024;
          int v17 = v10;
          int v11 = "%{public}s [C%u] has no connected parameters";
LABEL_15:
          _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v14, 0x12u);
LABEL_16:
        }
      }
    }
  }
  else
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 16);
    if (v12 && !nw_path_parameters_get_logging_disabled(*(void *)(v12 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      unsigned int v9 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      int v14 = 136446466;
      char v15 = "nw_connection_copy_proxy_settings_block_invoke";
      __int16 v16 = 1024;
      int v17 = v13;
      int v11 = "%{public}s [C%u] has no connected path";
      goto LABEL_15;
    }
  }
}

void nw_mem_region_release(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 4) - 1;
  *(_DWORD *)(a1 + 4) = v1;
  if (!v1)
  {
    if (gLogDatapath)
    {
      BOOL v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        unint64_t v28 = "nw_mem_region_destroy";
        __int16 v29 = 2082;
        *(void *)uint64_t v30 = a1 + 160;
        *(_WORD *)&v30[8] = 2048;
        *(void *)&v30[10] = a1;
        _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s \"%{public}s\": nwr %p", buf, 0x20u);
      }
    }
    if (*(void *)(a1 + 16))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      uint64_t v3 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 136446978;
      unint64_t v28 = "nw_mem_region_destroy";
      __int16 v29 = 2082;
      *(void *)uint64_t v30 = a1 + 160;
      *(_WORD *)&v30[8] = 2048;
      *(void *)&v30[10] = a1;
      *(_WORD *)&v30[18] = 2048;
      *(void *)&v30[20] = v3;
      uint64_t v4 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v4))
      {
LABEL_42:
        __break(1u);
        return;
      }
      free(v4);
    }
    if (*(void *)(a1 + 144) || *(void *)(a1 + 152))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
      uint64_t v5 = *(void *)(a1 + 144);
      uint64_t v6 = *(void **)(a1 + 152);
      if (v5)
      {
        *(void *)(v5 + 152) = v6;
        uint64_t v6 = *(void **)(a1 + 152);
      }
      else
      {
        qword_1EB267348 = *(void *)(a1 + 152);
      }
      *uint64_t v6 = v5;
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
    }
    if (gLogDatapath)
    {
      os_log_type_t v26 = __nwlog_obj();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v28 = "nw_mem_region_depopulate";
        __int16 v29 = 2082;
        *(void *)uint64_t v30 = a1 + 160;
        _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s \"%{public}s\"", buf, 0x16u);
      }
    }
    uint64_t v7 = *(void *)(a1 + 368);
    if (v7)
    {
      uint64_t v8 = (vm_map_t *)MEMORY[0x1E4F14960];
      do
      {
        while (1)
        {
          uint64_t v9 = *(void *)v7;
          if (mach_vm_deallocate(*v8, *(void *)(v7 + 24), *(void *)(a1 + 88)))
          {
            int v13 = __nwlog_obj();
            os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446466;
            unint64_t v28 = "nw_mem_region_depopulate";
            __int16 v29 = 2082;
            *(void *)uint64_t v30 = "VERIFY result == 0 failed";
            int v14 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v14)) {
              goto LABEL_42;
            }
            free(v14);
          }
          *(void *)(v7 + 24) = 0;
          *(void *)(v7 + 32) = 0;
          *(_DWORD *)(v7 + 48) = 1;
          unint64_t v10 = *(unsigned int *)(v7 + 40);
          nw_segment_freelist_remove((void *)a1, (uint64_t *)v7, 1);
          unint64_t v11 = *(unsigned int *)(v7 + 40);
          uint64_t v12 = *(void *)(a1 + 304);
          if (gLogDatapath)
          {
            char v15 = __nwlog_obj();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v16 = *(void *)(v7 + 24);
              uint64_t v17 = *(void *)(v7 + 32);
              int v18 = *(_DWORD *)(a1 + 240);
              *(_DWORD *)buf = 136447234;
              unint64_t v28 = "nw_segment_destroy";
              __int16 v29 = 1024;
              *(_DWORD *)uint64_t v30 = v11;
              *(_WORD *)&v30[4] = 2048;
              *(void *)&v30[6] = v16;
              *(_WORD *)&v30[14] = 2048;
              *(void *)&v30[16] = v17;
              *(_WORD *)&v30[24] = 1024;
              *(_DWORD *)&v30[26] = v18;
              _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s   [%u] [0x%llx-0x%llx) 0x%X", buf, 0x2Cu);
            }
          }
          *(void *)(v12 + ((v11 >> 3) & 0x1FFFFFF8)) |= 1 << v11;
          malloc_zone_free((malloc_zone_t *)g_slab_zone, (void *)v7);
          if (((*(void *)(*(void *)(a1 + 304) + ((v10 >> 3) & 0x1FFFFFF8)) >> v10) & 1) == 0) {
            break;
          }
          uint64_t v7 = v9;
          if (!v9) {
            goto LABEL_26;
          }
        }
        __int16 v19 = __nwlog_obj();
        os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446466;
        unint64_t v28 = "nw_mem_region_depopulate";
        __int16 v29 = 2082;
        *(void *)uint64_t v30 = "VERIFY bit_test(nwr->nwr_seg_bmap[i / BMAPSZ], i % BMAPSZ) failed";
        os_log_type_t v20 = (void *)_os_log_send_and_compose_impl();
        if (__nwlog_abort((uint64_t)v20)) {
          goto LABEL_42;
        }
        free(v20);
        uint64_t v7 = v9;
      }
      while (v9);
    }
LABEL_26:
    uint64_t v21 = *(void **)(a1 + 304);
    if (v21)
    {
      free(v21);
      *(void *)(a1 + 304) = 0;
      *(void *)(a1 + 312) = 0;
    }
    BOOL v22 = *(void **)(a1 + 360);
    if (v22)
    {
      free(v22);
      *(void *)(a1 + 360) = 0;
    }
    uint64_t v23 = *(void *)(a1 + 392);
    if (v23)
    {
      *(void *)(a1 + 392) = 0;
      *(_DWORD *)(v23 + 240) &= ~0x80000000;
    }
    uint64_t v24 = *(NSObject **)(a1 + 272);
    if (v24)
    {
      dispatch_release(v24);
      *(void *)(a1 + 272) = 0;
    }
    if (v23) {
      nw_mem_region_release(v23);
    }
    malloc_zone_free((malloc_zone_t *)g_slab_zone, (void *)a1);
  }
}

void nw_mem_region_stats_dump()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
  id v0 = (void *)nw_mem_region_head;
  if (nw_mem_region_head)
  {
    do
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v1 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v2 = v0[4];
        uint64_t v3 = v0[5];
        uint64_t v4 = v0[6];
        uint64_t v5 = v0[7];
        *(_DWORD *)buf = 136447490;
        uint64_t v7 = "nw_mem_region_stats_dump";
        __int16 v8 = 2082;
        uint64_t v9 = v0 + 20;
        __int16 v10 = 2048;
        uint64_t v11 = v2;
        __int16 v12 = 2048;
        uint64_t v13 = v4;
        __int16 v14 = 2048;
        uint64_t v15 = v3;
        __int16 v16 = 2048;
        uint64_t v17 = v5;
        _os_log_impl(&dword_1830D4000, v1, OS_LOG_TYPE_INFO, "%{public}s \n\n%{public}s: \n\tNumber of Segments Created %llu\n\tMaximum Segment Used %llu\n\tNumber of Segments Freed %llu\n\tNumber of Segment Alloc Failures %llu", buf, 0x3Eu);
      }
      id v0 = (void *)v0[18];
    }
    while (v0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
}

void sub_1837C9D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_device_color(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v38 = "nw_endpoint_get_device_color";
    id v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_device_color";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v28 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v38 = "nw_endpoint_get_device_color";
            __int16 v39 = 2082;
            *(void *)char v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_device_color";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unint64_t v28 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_device_color";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (!v27) {
      goto LABEL_24;
    }
    uint64_t v24 = (char *)v27;
    goto LABEL_23;
  }
  uint64_t v3 = (unsigned int *)v1;
  int v4 = [v3 type];

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    uint64_t v7 = v3;
    int v8 = [v7 type];

    *(_DWORD *)buf = 136446466;
    BOOL v38 = "nw_endpoint_get_device_color";
    __int16 v39 = 1024;
    *(_DWORD *)char v40 = v8;
    LODWORD(v34) = 18;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          __int16 v12 = v7;
          int v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          BOOL v38 = "nw_endpoint_get_device_color";
          __int16 v39 = 1024;
          *(_DWORD *)char v40 = v13;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        __int16 v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v10 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            uint64_t v17 = v7;
            int v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            BOOL v38 = "nw_endpoint_get_device_color";
            __int16 v39 = 1024;
            *(_DWORD *)char v40 = v18;
            v40[2] = 2082;
            *(void *)&v40[3] = v14;
            _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9) {
            goto LABEL_24;
          }
LABEL_22:
          uint64_t v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          BOOL v22 = v7;
          int v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          BOOL v38 = "nw_endpoint_get_device_color";
          __int16 v39 = 1024;
          *(_DWORD *)char v40 = v23;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          os_log_type_t v20 = v7;
          int v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          BOOL v38 = "nw_endpoint_get_device_color";
          __int16 v39 = 1024;
          *(_DWORD *)char v40 = v21;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v9)
    {
LABEL_24:
      uint64_t v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  uint64_t v5 = v3[70];
LABEL_25:

  return v5;
}

void sub_1837CA36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_advertised_route(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v38 = "nw_endpoint_get_advertised_route";
    id v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_advertised_route";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v28 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v38 = "nw_endpoint_get_advertised_route";
            __int16 v39 = 2082;
            *(void *)char v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_advertised_route";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unint64_t v28 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_advertised_route";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (!v27) {
      goto LABEL_24;
    }
    uint64_t v24 = (char *)v27;
    goto LABEL_23;
  }
  uint64_t v3 = (unsigned int *)v1;
  int v4 = [v3 type];

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    uint64_t v7 = v3;
    int v8 = [v7 type];

    *(_DWORD *)buf = 136446466;
    BOOL v38 = "nw_endpoint_get_advertised_route";
    __int16 v39 = 1024;
    *(_DWORD *)char v40 = v8;
    LODWORD(v34) = 18;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          __int16 v12 = v7;
          int v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          BOOL v38 = "nw_endpoint_get_advertised_route";
          __int16 v39 = 1024;
          *(_DWORD *)char v40 = v13;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        __int16 v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v10 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            uint64_t v17 = v7;
            int v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            BOOL v38 = "nw_endpoint_get_advertised_route";
            __int16 v39 = 1024;
            *(_DWORD *)char v40 = v18;
            v40[2] = 2082;
            *(void *)&v40[3] = v14;
            _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9) {
            goto LABEL_24;
          }
LABEL_22:
          uint64_t v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          BOOL v22 = v7;
          int v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          BOOL v38 = "nw_endpoint_get_advertised_route";
          __int16 v39 = 1024;
          *(_DWORD *)char v40 = v23;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          os_log_type_t v20 = v7;
          int v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          BOOL v38 = "nw_endpoint_get_advertised_route";
          __int16 v39 = 1024;
          *(_DWORD *)char v40 = v21;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v9)
    {
LABEL_24:
      uint64_t v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  uint64_t v5 = v3[71];
LABEL_25:

  return v5;
}

void sub_1837CA9B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1837CAAB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1837CB13C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_device_color(void *a1, int a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    os_log_type_t v29 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
    uint64_t v30 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v30, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
          _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
          _os_log_impl(&dword_1830D4000, v31, v36, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_41:
    if (!v30) {
      goto LABEL_24;
    }
    unint64_t v28 = (char *)v30;
    goto LABEL_23;
  }
  uint64_t v5 = v3;
  int v6 = [v5 type];

  if (v6 == 6)
  {
    v5[70] = a2;
    uint64_t v7 = v5;
    int v8 = v7 + 45;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E524BAA8;
    uint64_t v41 = v7;
    uint64_t v9 = v7;
    os_unfair_lock_lock(v8);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v8);

    goto LABEL_24;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = (id)gLogObj;
  os_log_type_t v11 = v5;
  int v12 = [v11 type];

  *(_DWORD *)buf = 136446466;
  *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  LODWORD(v37) = 18;
  int v13 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v38 = 0;
  if (!__nwlog_fault(v13, &type, &v38)) {
    goto LABEL_21;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v14 = (id)gLogObj;
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      BOOL v16 = v11;
      int v17 = objc_msgSend(v16, "type", buf, v37);

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }
LABEL_20:

LABEL_21:
    if (!v13) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  if (!v38)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v14 = (id)gLogObj;
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v14, type))
    {
      uint64_t v24 = v11;
      int v25 = objc_msgSend(v24, "type", buf, v37);

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v25;
      _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_20;
  }
  int v18 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v14 = (id)gLogObj;
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v14, type);
  if (!v18)
  {
    if (v20)
    {
      os_log_type_t v26 = v11;
      int v27 = objc_msgSend(v26, "type", buf, v37);

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
    }
    goto LABEL_20;
  }
  if (v20)
  {
    int v21 = v11;
    int v22 = objc_msgSend(v21, "type", buf, v37);

    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v22;
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = v18;
    _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v18);
  if (v13)
  {
LABEL_22:
    unint64_t v28 = (char *)v13;
LABEL_23:
    free(v28);
  }
LABEL_24:
}

void sub_1837CB7B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_advertised_route(void *a1, int a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    os_log_type_t v29 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
    uint64_t v30 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v30, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
          _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
          _os_log_impl(&dword_1830D4000, v31, v36, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_41:
    if (!v30) {
      goto LABEL_24;
    }
    unint64_t v28 = (char *)v30;
    goto LABEL_23;
  }
  uint64_t v5 = v3;
  int v6 = [v5 type];

  if (v6 == 6)
  {
    v5[71] = a2;
    uint64_t v7 = v5;
    int v8 = v7 + 45;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E524BAA8;
    uint64_t v41 = v7;
    uint64_t v9 = v7;
    os_unfair_lock_lock(v8);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v8);

    goto LABEL_24;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = (id)gLogObj;
  os_log_type_t v11 = v5;
  int v12 = [v11 type];

  *(_DWORD *)buf = 136446466;
  *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  LODWORD(v37) = 18;
  int v13 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v38 = 0;
  if (!__nwlog_fault(v13, &type, &v38)) {
    goto LABEL_21;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v14 = (id)gLogObj;
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      BOOL v16 = v11;
      int v17 = objc_msgSend(v16, "type", buf, v37);

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }
LABEL_20:

LABEL_21:
    if (!v13) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  if (!v38)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v14 = (id)gLogObj;
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v14, type))
    {
      uint64_t v24 = v11;
      int v25 = objc_msgSend(v24, "type", buf, v37);

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v25;
      _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_20;
  }
  int v18 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v14 = (id)gLogObj;
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v14, type);
  if (!v18)
  {
    if (v20)
    {
      os_log_type_t v26 = v11;
      int v27 = objc_msgSend(v26, "type", buf, v37);

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
    }
    goto LABEL_20;
  }
  if (v20)
  {
    int v21 = v11;
    int v22 = objc_msgSend(v21, "type", buf, v37);

    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v22;
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = v18;
    _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v18);
  if (v13)
  {
LABEL_22:
    unint64_t v28 = (char *)v13;
LABEL_23:
    free(v28);
  }
LABEL_24:
}

void sub_1837CBE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1837CC080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1837CC330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1837CC4B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_endpoint_create_apple_service(const char *a1, const char *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    os_log_type_t v32 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v48 = "nw_endpoint_create_apple_service";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44)) {
      goto LABEL_58;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v33 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_1830D4000, v8, v33, "%{public}s called with null apple_id", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_1830D4000, v8, v39, "%{public}s called with null apple_id, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v35 = type[0];
    BOOL v36 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_1830D4000, v8, v35, "%{public}s called with null apple_id, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v48 = "nw_endpoint_create_apple_service";
      __int16 v49 = 2082;
      uint64_t v50 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v35, "%{public}s called with null apple_id, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_93;
  }
  size_t v4 = strlen(a1);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    unint64_t v48 = "nw_endpoint_create_apple_service";
    __int16 v49 = 2082;
    uint64_t v50 = "apple_id";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44)) {
      goto LABEL_58;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (id)gLogObj;
      os_log_type_t v9 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v48 = "nw_endpoint_create_apple_service";
        __int16 v49 = 2082;
        uint64_t v50 = "apple_id";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }
      goto LABEL_57;
    }
    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (id)gLogObj;
      os_log_type_t v19 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v48 = "nw_endpoint_create_apple_service";
        __int16 v49 = 2082;
        uint64_t v50 = "apple_id";
        _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
      }
      goto LABEL_57;
    }
    os_log_type_t v11 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v8 = (id)gLogObj;
    os_log_type_t v12 = type[0];
    BOOL v13 = os_log_type_enabled(v8, type[0]);
    if (!v11)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v48 = "nw_endpoint_create_apple_service";
        __int16 v49 = 2082;
        uint64_t v50 = "apple_id";
        _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
      }
      goto LABEL_57;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446722;
      unint64_t v48 = "nw_endpoint_create_apple_service";
      __int16 v49 = 2082;
      uint64_t v50 = "apple_id";
      __int16 v51 = 2082;
      long long v52 = v11;
      _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    goto LABEL_37;
  }
  if (v4 < 0x400)
  {
    if (a2)
    {
      size_t v10 = strlen(a2);
      if (v10)
      {
        if (v10 >= 0x400)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v5 = (id)gLogObj;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            unint64_t v48 = "nw_endpoint_create_apple_service";
            __int16 v49 = 2082;
            uint64_t v50 = "service";
            __int16 v51 = 1024;
            LODWORD(v52) = 1024;
            _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
          }
          goto LABEL_6;
        }
        *(void *)os_log_type_t type = 0;
        uint64_t v46 = 0;
        uuid_generate_random((unsigned __int8 *)type);
        BOOL v16 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]([NWConcrete_nw_application_service_endpoint alloc], a2, a1, (const unsigned __int8 *)type, 0, 0, 0);
        int v17 = (void *)v16;
        if (v16)
        {
          id v18 = (id)v16;
LABEL_70:

          return v17;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v22 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_apple_service";
        os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v44 = OS_LOG_TYPE_ERROR;
        char v43 = 0;
        if (__nwlog_fault(v23, &v44, &v43))
        {
          if (v44 == OS_LOG_TYPE_FAULT)
          {
            uint64_t v24 = __nwlog_obj();
            os_log_type_t v25 = v44;
            if (os_log_type_enabled(v24, v44))
            {
              *(_DWORD *)buf = 136446210;
              unint64_t v48 = "nw_endpoint_create_apple_service";
              _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed", buf, 0xCu);
            }
          }
          else if (v43)
          {
            int v27 = (char *)__nw_create_backtrace_string();
            uint64_t v24 = __nwlog_obj();
            os_log_type_t v28 = v44;
            BOOL v29 = os_log_type_enabled(v24, v44);
            if (v27)
            {
              if (v29)
              {
                *(_DWORD *)buf = 136446466;
                unint64_t v48 = "nw_endpoint_create_apple_service";
                __int16 v49 = 2082;
                uint64_t v50 = v27;
                _os_log_impl(&dword_1830D4000, v24, v28, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v27);
              goto LABEL_68;
            }
            if (v29)
            {
              *(_DWORD *)buf = 136446210;
              unint64_t v48 = "nw_endpoint_create_apple_service";
              _os_log_impl(&dword_1830D4000, v24, v28, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            uint64_t v24 = __nwlog_obj();
            os_log_type_t v31 = v44;
            if (os_log_type_enabled(v24, v44))
            {
              *(_DWORD *)buf = 136446210;
              unint64_t v48 = "nw_endpoint_create_apple_service";
              _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
LABEL_68:
        if (v23) {
          free(v23);
        }
        goto LABEL_70;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      unint64_t v48 = "nw_endpoint_create_apple_service";
      __int16 v49 = 2082;
      uint64_t v50 = "service";
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v7, type, &v44)) {
        goto LABEL_58;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v8 = (id)gLogObj;
        os_log_type_t v15 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v48 = "nw_endpoint_create_apple_service";
          __int16 v49 = 2082;
          uint64_t v50 = "service";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s invalid empty string %{public}s", buf, 0x16u);
        }
LABEL_57:

        goto LABEL_58;
      }
      if (v44 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v8 = (id)gLogObj;
        os_log_type_t v26 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v48 = "nw_endpoint_create_apple_service";
          __int16 v49 = 2082;
          uint64_t v50 = "service";
          _os_log_impl(&dword_1830D4000, v8, v26, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
        }
        goto LABEL_57;
      }
      os_log_type_t v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (id)gLogObj;
      os_log_type_t v20 = type[0];
      BOOL v21 = os_log_type_enabled(v8, type[0]);
      if (!v11)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v48 = "nw_endpoint_create_apple_service";
          __int16 v49 = 2082;
          uint64_t v50 = "service";
          _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
        }
        goto LABEL_57;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446722;
        unint64_t v48 = "nw_endpoint_create_apple_service";
        __int16 v49 = 2082;
        uint64_t v50 = "service";
        __int16 v51 = 2082;
        long long v52 = v11;
        _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
      }
LABEL_37:

      free(v11);
      if (!v7) {
        return 0;
      }
      goto LABEL_59;
    }
    uint64_t v37 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v48 = "nw_endpoint_create_apple_service";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44))
    {
LABEL_58:
      if (!v7) {
        return 0;
      }
LABEL_59:
      free(v7);
      return 0;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_1830D4000, v8, v38, "%{public}s called with null service", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v42 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_1830D4000, v8, v42, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v40 = type[0];
    BOOL v41 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_1830D4000, v8, v40, "%{public}s called with null service, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v48 = "nw_endpoint_create_apple_service";
      __int16 v49 = 2082;
      uint64_t v50 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v40, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_93:

    free(backtrace_string);
    goto LABEL_58;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    unint64_t v48 = "nw_endpoint_create_apple_service";
    __int16 v49 = 2082;
    uint64_t v50 = "apple_id";
    __int16 v51 = 1024;
    LODWORD(v52) = 1024;
    _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
  }
LABEL_6:

  return 0;
}

void *nw_endpoint_create_application_service_internal(const char *a1, const char *a2, const unsigned __int8 *a3, const char *a4, const char *a5, int a6, int a7, const char *a8)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)a1 | (unint64_t)a2)
  {
    BOOL v10 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]([NWConcrete_nw_application_service_endpoint alloc], a1, a2, a3, a4, a5, a8);
    os_log_type_t v11 = (void *)v10;
    if (v10)
    {
      nw_endpoint_set_device_color((void *)v10, a6);
      nw_endpoint_set_advertised_route(v11, a7);
      id v12 = v11;
LABEL_11:

      return v11;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v13 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
    id v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v14, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = (id)gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed", buf, 0xCu);
        }
      }
      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = (id)gLogObj;
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
            __int16 v34 = 2082;
            os_log_type_t v35 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v15, v19, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v14) {
            goto LABEL_11;
          }
          goto LABEL_10;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
          _os_log_impl(&dword_1830D4000, v15, v19, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = (id)gLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
          _os_log_impl(&dword_1830D4000, v15, v21, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v14) {
      goto LABEL_11;
    }
LABEL_10:
    free(v14);
    goto LABEL_11;
  }
  id v22 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
  os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v30 = 0;
  if (__nwlog_fault(v23, &type, &v30))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null Either application service or alias must be specified", buf, 0xCu);
      }
    }
    else if (v30)
    {
      os_log_type_t v26 = (char *)__nw_create_backtrace_string();
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v24, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
          __int16 v34 = 2082;
          os_log_type_t v35 = v26;
          _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null Either application service or alias must be specified, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        goto LABEL_41;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
        _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null Either application service or alias must be specified, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
        _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s called with null Either application service or alias must be specified, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_41:
  if (v23) {
    free(v23);
  }
  return 0;
}

void sub_1837CD8CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_endpoint_create_application_service(const char *a1, const unsigned __int8 *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    os_log_type_t v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_endpoint_create_application_service";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v7, &type, &v37)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_1830D4000, v8, v27, "%{public}s called with null application_service", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v37)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_1830D4000, v8, v33, "%{public}s called with null application_service, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v30 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_1830D4000, v8, v29, "%{public}s called with null application_service, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v40 = "nw_endpoint_create_application_service";
      __int16 v41 = 2082;
      os_log_type_t v42 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v29, "%{public}s called with null application_service, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_73;
  }
  size_t v4 = strlen(a1);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    os_log_type_t v40 = "nw_endpoint_create_application_service";
    __int16 v41 = 2082;
    os_log_type_t v42 = "application_service";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v7, &type, &v37)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        __int16 v41 = 2082;
        os_log_type_t v42 = "application_service";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }
    }
    else if (v37)
    {
      id v13 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v8, type);
      if (v13)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "nw_endpoint_create_application_service";
          __int16 v41 = 2082;
          os_log_type_t v42 = "application_service";
          __int16 v43 = 2082;
          os_log_type_t v44 = v13;
          _os_log_impl(&dword_1830D4000, v8, v14, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v13);
        if (!v7) {
          return 0;
        }
        goto LABEL_39;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        __int16 v41 = 2082;
        os_log_type_t v42 = "application_service";
        _os_log_impl(&dword_1830D4000, v8, v14, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (id)gLogObj;
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        __int16 v41 = 2082;
        os_log_type_t v42 = "application_service";
        _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
      }
    }
    goto LABEL_37;
  }
  if (v4 >= 0x400)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v40 = "nw_endpoint_create_application_service";
      __int16 v41 = 2082;
      os_log_type_t v42 = "application_service";
      __int16 v43 = 1024;
      LODWORD(v44) = 1024;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
    }

    return 0;
  }
  if (a2)
  {
    BOOL v10 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]([NWConcrete_nw_application_service_endpoint alloc], a1, "alias", a2, 0, 0, 0);
    os_log_type_t v11 = (void *)v10;
    if (v10)
    {
      id v12 = (id)v10;
LABEL_49:

      return v11;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_endpoint_create_application_service";
    int v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (__nwlog_fault(v17, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v18 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v40 = "nw_endpoint_create_application_service";
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID) alloc/init failed", buf, 0xCu);
        }
      }
      else if (v37)
      {
        os_log_type_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v18 = (id)gLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v18, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v40 = "nw_endpoint_create_application_service";
            __int16 v41 = 2082;
            os_log_type_t v42 = v21;
            _os_log_impl(&dword_1830D4000, v18, v22, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID) alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v21);
          if (!v17) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v40 = "nw_endpoint_create_application_service";
          _os_log_impl(&dword_1830D4000, v18, v22, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID) alloc/init failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v18 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v40 = "nw_endpoint_create_application_service";
          _os_log_impl(&dword_1830D4000, v18, v24, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID) alloc/init failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v17) {
      goto LABEL_49;
    }
LABEL_48:
    free(v17);
    goto LABEL_49;
  }
  os_log_type_t v31 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v40 = "nw_endpoint_create_application_service";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (__nwlog_fault(v7, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_1830D4000, v8, v32, "%{public}s called with null service_uuid", buf, 0xCu);
      }
LABEL_37:

      goto LABEL_38;
    }
    if (!v37)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_1830D4000, v8, v36, "%{public}s called with null service_uuid, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v34 = type;
    BOOL v35 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_1830D4000, v8, v34, "%{public}s called with null service_uuid, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v40 = "nw_endpoint_create_application_service";
      __int16 v41 = 2082;
      os_log_type_t v42 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v34, "%{public}s called with null service_uuid, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_73:

    free(backtrace_string);
  }
LABEL_38:
  if (v7) {
LABEL_39:
  }
    free(v7);
  return 0;
}

void *nw_endpoint_create_application_service_with_alias(const char *a1, const char *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    os_log_type_t v32 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44)) {
      goto LABEL_58;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v33 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_1830D4000, v8, v33, "%{public}s called with null application_service", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_1830D4000, v8, v39, "%{public}s called with null application_service, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v35 = type[0];
    BOOL v36 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_1830D4000, v8, v35, "%{public}s called with null application_service, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
      __int16 v49 = 2082;
      uint64_t v50 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v35, "%{public}s called with null application_service, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_93;
  }
  size_t v4 = strlen(a1);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
    __int16 v49 = 2082;
    uint64_t v50 = "application_service";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44)) {
      goto LABEL_58;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (id)gLogObj;
      os_log_type_t v9 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
        __int16 v49 = 2082;
        uint64_t v50 = "application_service";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }
      goto LABEL_57;
    }
    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (id)gLogObj;
      os_log_type_t v19 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
        __int16 v49 = 2082;
        uint64_t v50 = "application_service";
        _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
      }
      goto LABEL_57;
    }
    os_log_type_t v11 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v8 = (id)gLogObj;
    os_log_type_t v12 = type[0];
    BOOL v13 = os_log_type_enabled(v8, type[0]);
    if (!v11)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
        __int16 v49 = 2082;
        uint64_t v50 = "application_service";
        _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
      }
      goto LABEL_57;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446722;
      unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
      __int16 v49 = 2082;
      uint64_t v50 = "application_service";
      __int16 v51 = 2082;
      long long v52 = v11;
      _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    goto LABEL_37;
  }
  if (v4 < 0x400)
  {
    if (a2)
    {
      size_t v10 = strlen(a2);
      if (v10)
      {
        if (v10 >= 0x400)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v5 = (id)gLogObj;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
            __int16 v49 = 2082;
            uint64_t v50 = "alias";
            __int16 v51 = 1024;
            LODWORD(v52) = 1024;
            _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
          }
          goto LABEL_6;
        }
        *(void *)os_log_type_t type = 0;
        uint64_t v46 = 0;
        uuid_generate_random((unsigned __int8 *)type);
        BOOL v16 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]([NWConcrete_nw_application_service_endpoint alloc], a1, a2, (const unsigned __int8 *)type, 0, 0, 0);
        int v17 = (void *)v16;
        if (v16)
        {
          id v18 = (id)v16;
LABEL_70:

          return v17;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v22 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
        BOOL v23 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v44 = OS_LOG_TYPE_ERROR;
        char v43 = 0;
        if (__nwlog_fault(v23, &v44, &v43))
        {
          if (v44 == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v24 = __nwlog_obj();
            os_log_type_t v25 = v44;
            if (os_log_type_enabled(v24, v44))
            {
              *(_DWORD *)buf = 136446210;
              unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
              _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID with alias) alloc/init failed", buf, 0xCu);
            }
          }
          else if (v43)
          {
            os_log_type_t v27 = (char *)__nw_create_backtrace_string();
            os_log_type_t v24 = __nwlog_obj();
            os_log_type_t v28 = v44;
            BOOL v29 = os_log_type_enabled(v24, v44);
            if (v27)
            {
              if (v29)
              {
                *(_DWORD *)buf = 136446466;
                unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
                __int16 v49 = 2082;
                uint64_t v50 = v27;
                _os_log_impl(&dword_1830D4000, v24, v28, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID with alias) alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v27);
              goto LABEL_68;
            }
            if (v29)
            {
              *(_DWORD *)buf = 136446210;
              unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
              _os_log_impl(&dword_1830D4000, v24, v28, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID with alias) alloc/init failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            os_log_type_t v24 = __nwlog_obj();
            os_log_type_t v31 = v44;
            if (os_log_type_enabled(v24, v44))
            {
              *(_DWORD *)buf = 136446210;
              unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
              _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s NWOSApplicationServiceEndpoint (serviceUUID with alias) alloc/init failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
LABEL_68:
        if (v23) {
          free(v23);
        }
        goto LABEL_70;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
      __int16 v49 = 2082;
      uint64_t v50 = "alias";
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v7, type, &v44)) {
        goto LABEL_58;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v8 = (id)gLogObj;
        os_log_type_t v15 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
          __int16 v49 = 2082;
          uint64_t v50 = "alias";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s invalid empty string %{public}s", buf, 0x16u);
        }
LABEL_57:

        goto LABEL_58;
      }
      if (v44 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v8 = (id)gLogObj;
        os_log_type_t v26 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
          __int16 v49 = 2082;
          uint64_t v50 = "alias";
          _os_log_impl(&dword_1830D4000, v8, v26, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
        }
        goto LABEL_57;
      }
      os_log_type_t v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (id)gLogObj;
      os_log_type_t v20 = type[0];
      BOOL v21 = os_log_type_enabled(v8, type[0]);
      if (!v11)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
          __int16 v49 = 2082;
          uint64_t v50 = "alias";
          _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
        }
        goto LABEL_57;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446722;
        unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
        __int16 v49 = 2082;
        uint64_t v50 = "alias";
        __int16 v51 = 2082;
        long long v52 = v11;
        _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
      }
LABEL_37:

      free(v11);
      if (!v7) {
        return 0;
      }
      goto LABEL_59;
    }
    char v37 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v44))
    {
LABEL_58:
      if (!v7) {
        return 0;
      }
LABEL_59:
      free(v7);
      return 0;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_1830D4000, v8, v38, "%{public}s called with null alias", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v42 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_1830D4000, v8, v42, "%{public}s called with null alias, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v40 = type[0];
    BOOL v41 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_1830D4000, v8, v40, "%{public}s called with null alias, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
      __int16 v49 = 2082;
      uint64_t v50 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v40, "%{public}s called with null alias, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_93:

    free(backtrace_string);
    goto LABEL_58;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    unint64_t v48 = "nw_endpoint_create_application_service_with_alias";
    __int16 v49 = 2082;
    uint64_t v50 = "application_service";
    __int16 v51 = 1024;
    LODWORD(v52) = 1024;
    _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
  }
LABEL_6:

  return 0;
}

uint64_t nw_endpoint_get_application_service_alias(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
    os_log_type_t v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
            __int16 v39 = 2082;
            *(void *)os_log_type_t v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (!v27) {
      goto LABEL_24;
    }
    os_log_type_t v24 = (char *)v27;
    goto LABEL_23;
  }
  id v3 = v1;
  int v4 = [v3 type];

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    uint64_t v7 = v3;
    int v8 = [v7 type];

    *(_DWORD *)buf = 136446466;
    os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
    __int16 v39 = 1024;
    *(_DWORD *)os_log_type_t v40 = v8;
    LODWORD(v34) = 18;
    os_log_type_t v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          os_log_type_t v12 = v7;
          int v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
          __int16 v39 = 1024;
          *(_DWORD *)os_log_type_t v40 = v13;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        id v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v10 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            int v17 = v7;
            int v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
            __int16 v39 = 1024;
            *(_DWORD *)os_log_type_t v40 = v18;
            v40[2] = 2082;
            *(void *)&v40[3] = v14;
            _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9) {
            goto LABEL_24;
          }
LABEL_22:
          os_log_type_t v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          id v22 = v7;
          int v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
          __int16 v39 = 1024;
          *(_DWORD *)os_log_type_t v40 = v23;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          os_log_type_t v20 = v7;
          int v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
          __int16 v39 = 1024;
          *(_DWORD *)os_log_type_t v40 = v21;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v9)
    {
LABEL_24:
      uint64_t v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  uint64_t v5 = v3[29];
LABEL_25:

  return v5;
}

void sub_1837CF748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_application_service_name(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_endpoint_get_application_service_name";
    os_log_type_t v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_application_service_name";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v38 = "nw_endpoint_get_application_service_name";
            __int16 v39 = 2082;
            *(void *)os_log_type_t v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_application_service_name";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_application_service_name";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (!v27) {
      goto LABEL_24;
    }
    os_log_type_t v24 = (char *)v27;
    goto LABEL_23;
  }
  id v3 = v1;
  int v4 = [v3 type];

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    uint64_t v7 = v3;
    int v8 = [v7 type];

    *(_DWORD *)buf = 136446466;
    os_log_type_t v38 = "nw_endpoint_get_application_service_name";
    __int16 v39 = 1024;
    *(_DWORD *)os_log_type_t v40 = v8;
    LODWORD(v34) = 18;
    os_log_type_t v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          os_log_type_t v12 = v7;
          int v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          os_log_type_t v38 = "nw_endpoint_get_application_service_name";
          __int16 v39 = 1024;
          *(_DWORD *)os_log_type_t v40 = v13;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        id v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v10 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            int v17 = v7;
            int v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            os_log_type_t v38 = "nw_endpoint_get_application_service_name";
            __int16 v39 = 1024;
            *(_DWORD *)os_log_type_t v40 = v18;
            v40[2] = 2082;
            *(void *)&v40[3] = v14;
            _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9) {
            goto LABEL_24;
          }
LABEL_22:
          os_log_type_t v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          id v22 = v7;
          int v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          os_log_type_t v38 = "nw_endpoint_get_application_service_name";
          __int16 v39 = 1024;
          *(_DWORD *)os_log_type_t v40 = v23;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          os_log_type_t v20 = v7;
          int v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          os_log_type_t v38 = "nw_endpoint_get_application_service_name";
          __int16 v39 = 1024;
          *(_DWORD *)os_log_type_t v40 = v21;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v9)
    {
LABEL_24:
      uint64_t v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  uint64_t v5 = v3[30];
LABEL_25:

  return v5;
}

void sub_1837CFD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_application_service_name(void *a1, const char *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    BOOL v32 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
    os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v33, &type, &v49)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v49)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v34, type);
      if (backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v34, v39, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_64:
        if (!v33) {
          goto LABEL_28;
        }
        goto LABEL_65;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_1830D4000, v34, v39, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_1830D4000, v34, v46, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_63:

    goto LABEL_64;
  }
  if (!a2)
  {
    BOOL v36 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
    os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v33, &type, &v49)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null application_service", buf, 0xCu);
      }
    }
    else if (v49)
    {
      char v43 = (char *)__nw_create_backtrace_string();
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v45 = os_log_type_enabled(v34, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v43;
          _os_log_impl(&dword_1830D4000, v34, v44, "%{public}s called with null application_service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        if (!v33) {
          goto LABEL_28;
        }
LABEL_65:
        os_log_type_t v31 = (char *)v33;
        goto LABEL_27;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_1830D4000, v34, v44, "%{public}s called with null application_service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_1830D4000, v34, v47, "%{public}s called with null application_service, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_63;
  }
  id v5 = v3;
  int v6 = [v5 type];

  if (v6 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v13 = (id)gLogObj;
    id v14 = v5;
    int v15 = [v14 type];

    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    LODWORD(v48) = 18;
    BOOL v16 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (__nwlog_fault(v16, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          id v19 = v14;
          int v20 = objc_msgSend(v19, "type", buf, v48);

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v20;
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v49)
      {
        int v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (id)gLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v17, type);
        if (v21)
        {
          if (v23)
          {
            id v24 = v14;
            int v25 = objc_msgSend(v24, "type", buf, v48);

            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = v21;
            _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          if (!v16) {
            goto LABEL_28;
          }
LABEL_26:
          os_log_type_t v31 = (char *)v16;
LABEL_27:
          free(v31);
          goto LABEL_28;
        }
        if (v23)
        {
          id v29 = v14;
          int v30 = objc_msgSend(v29, "type", buf, v48);

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          id v27 = v14;
          int v28 = objc_msgSend(v27, "type", buf, v48);

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v28;
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v16) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  uint64_t v7 = v5;
  int v8 = (void *)v7[30];
  if (v8)
  {
    free(v8);
    v7[30] = 0;
  }
  os_log_type_t v9 = strdup(a2);
  if (v9) {
    goto LABEL_7;
  }
  BOOL v41 = __nwlog_obj();
  os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "strict_strdup";
  os_log_type_t v42 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v42))
  {
    free(v42);
LABEL_7:
    v7[30] = v9;
    size_t v10 = v7;
    os_log_type_t v11 = (os_unfair_lock_s *)(v10 + 180);
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E524BAA8;
    id v52 = v10;
    os_log_type_t v12 = v10;
    os_unfair_lock_lock(v11);
    (*(void (**)(unsigned char *))&buf[16])(buf);
    os_unfair_lock_unlock(v11);

LABEL_28:
    return;
  }
  __break(1u);
}

void sub_1837D071C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_get_service_identifier(void *a1, _OWORD *a2)
{
  *(void *)&v40[13] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    os_log_type_t v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_endpoint_get_service_identifier";
    id v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_service_identifier";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v28 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v38 = "nw_endpoint_get_service_identifier";
            __int16 v39 = 2082;
            *(void *)BOOL v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_service_identifier";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v28 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_service_identifier";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_41:
    if (!v27) {
      goto LABEL_24;
    }
    int v25 = (char *)v27;
    goto LABEL_23;
  }
  id v5 = (char *)v3;
  int v6 = [v5 type];

  if (v6 == 6)
  {
    *a2 = *(_OWORD *)(v5 + 248);
    goto LABEL_24;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  int v8 = v5;
  int v9 = [v8 type];

  *(_DWORD *)buf = 136446466;
  os_log_type_t v38 = "nw_endpoint_get_service_identifier";
  __int16 v39 = 1024;
  *(_DWORD *)BOOL v40 = v9;
  LODWORD(v34) = 18;
  size_t v10 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (!__nwlog_fault(v10, &type, &v35)) {
    goto LABEL_21;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = (id)gLogObj;
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v11, type))
    {
      id v13 = v8;
      int v14 = objc_msgSend(v13, "type", buf, v34);

      *(_DWORD *)buf = 136446466;
      os_log_type_t v38 = "nw_endpoint_get_service_identifier";
      __int16 v39 = 1024;
      *(_DWORD *)BOOL v40 = v14;
      _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }
LABEL_20:

LABEL_21:
    if (!v10) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  if (!v35)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = (id)gLogObj;
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v11, type))
    {
      int v21 = v8;
      int v22 = objc_msgSend(v21, "type", buf, v34);

      *(_DWORD *)buf = 136446466;
      os_log_type_t v38 = "nw_endpoint_get_service_identifier";
      __int16 v39 = 1024;
      *(_DWORD *)BOOL v40 = v22;
      _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_20;
  }
  int v15 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v11 = (id)gLogObj;
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v11, type);
  if (!v15)
  {
    if (v17)
    {
      BOOL v23 = v8;
      int v24 = objc_msgSend(v23, "type", buf, v34);

      *(_DWORD *)buf = 136446466;
      os_log_type_t v38 = "nw_endpoint_get_service_identifier";
      __int16 v39 = 1024;
      *(_DWORD *)BOOL v40 = v24;
      _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
    }
    goto LABEL_20;
  }
  if (v17)
  {
    os_log_type_t v18 = v8;
    int v19 = objc_msgSend(v18, "type", buf, v34);

    *(_DWORD *)buf = 136446722;
    os_log_type_t v38 = "nw_endpoint_get_service_identifier";
    __int16 v39 = 1024;
    *(_DWORD *)BOOL v40 = v19;
    v40[2] = 2082;
    *(void *)&v40[3] = v15;
    _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v15);
  if (v10)
  {
LABEL_22:
    int v25 = (char *)v10;
LABEL_23:
    free(v25);
  }
LABEL_24:
}

void sub_1837D0D60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_service_identifier(void *a1, _OWORD *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    os_log_type_t v29 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
    int v30 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v30, &type, &v44)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v31 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v31 = __nwlog_obj();
      os_log_type_t v36 = type;
      BOOL v37 = os_log_type_enabled(v31, type);
      if (backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v31, v36, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_59:
        if (!v30) {
          goto LABEL_25;
        }
        goto LABEL_60;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_1830D4000, v31, v36, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v31 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_1830D4000, v31, v41, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_58:

    goto LABEL_59;
  }
  if (!a2)
  {
    os_log_type_t v33 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
    int v30 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v30, &type, &v44)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v31 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s called with null service_uuid", buf, 0xCu);
      }
    }
    else if (v44)
    {
      os_log_type_t v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v31 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v31, type);
      if (v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v38;
          _os_log_impl(&dword_1830D4000, v31, v39, "%{public}s called with null service_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v38);
        if (!v30) {
          goto LABEL_25;
        }
LABEL_60:
        int v28 = (char *)v30;
        goto LABEL_24;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_1830D4000, v31, v39, "%{public}s called with null service_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v31 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_1830D4000, v31, v42, "%{public}s called with null service_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_58;
  }
  id v5 = (char *)v3;
  int v6 = [v5 type];

  if (v6 == 6)
  {
    *(_OWORD *)(v5 + 248) = *a2;
    id v7 = v5;
    int v8 = v7 + 45;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E524BAA8;
    os_log_type_t v47 = v7;
    int v9 = v7;
    os_unfair_lock_lock(v8);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v8);

    goto LABEL_25;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = (id)gLogObj;
  os_log_type_t v11 = v5;
  int v12 = [v11 type];

  *(_DWORD *)buf = 136446466;
  *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  LODWORD(v43) = 18;
  id v13 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (!__nwlog_fault(v13, &type, &v44)) {
    goto LABEL_22;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v14 = (id)gLogObj;
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      os_log_type_t v16 = v11;
      int v17 = objc_msgSend(v16, "type", buf, v43);

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }
LABEL_21:

LABEL_22:
    if (!v13) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (!v44)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v14 = (id)gLogObj;
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v14, type))
    {
      int v24 = v11;
      int v25 = objc_msgSend(v24, "type", buf, v43);

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v25;
      _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_21;
  }
  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v14 = (id)gLogObj;
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v14, type);
  if (!v18)
  {
    if (v20)
    {
      os_log_type_t v26 = v11;
      int v27 = objc_msgSend(v26, "type", buf, v43);

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
    }
    goto LABEL_21;
  }
  if (v20)
  {
    int v21 = v11;
    int v22 = objc_msgSend(v21, "type", buf, v43);

    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v22;
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = v18;
    _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v18);
  if (v13)
  {
LABEL_23:
    int v28 = (char *)v13;
LABEL_24:
    free(v28);
  }
LABEL_25:
}

void sub_1837D1628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_device_name(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_endpoint_get_device_name";
    int v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_device_name";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v28 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v38 = "nw_endpoint_get_device_name";
            __int16 v39 = 2082;
            *(void *)BOOL v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_device_name";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v28 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_device_name";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (!v27) {
      goto LABEL_24;
    }
    int v24 = (char *)v27;
    goto LABEL_23;
  }
  id v3 = v1;
  int v4 = [v3 type];

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    id v7 = v3;
    int v8 = [v7 type];

    *(_DWORD *)buf = 136446466;
    os_log_type_t v38 = "nw_endpoint_get_device_name";
    __int16 v39 = 1024;
    *(_DWORD *)BOOL v40 = v8;
    LODWORD(v34) = 18;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          int v12 = v7;
          int v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          os_log_type_t v38 = "nw_endpoint_get_device_name";
          __int16 v39 = 1024;
          *(_DWORD *)BOOL v40 = v13;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        int v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            int v17 = v7;
            int v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            os_log_type_t v38 = "nw_endpoint_get_device_name";
            __int16 v39 = 1024;
            *(_DWORD *)BOOL v40 = v18;
            v40[2] = 2082;
            *(void *)&v40[3] = v14;
            _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9) {
            goto LABEL_24;
          }
LABEL_22:
          int v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          int v22 = v7;
          int v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          os_log_type_t v38 = "nw_endpoint_get_device_name";
          __int16 v39 = 1024;
          *(_DWORD *)BOOL v40 = v23;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          BOOL v20 = v7;
          int v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          os_log_type_t v38 = "nw_endpoint_get_device_name";
          __int16 v39 = 1024;
          *(_DWORD *)BOOL v40 = v21;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v9)
    {
LABEL_24:
      uint64_t v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  uint64_t v5 = v3[33];
LABEL_25:

  return v5;
}

void sub_1837D1C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_device_name(void *a1, const char *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    BOOL v32 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
    os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v33, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v34 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
          _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v34 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v34, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
          _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v34 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
          _os_log_impl(&dword_1830D4000, v34, v41, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_48:
    if (!v33) {
      goto LABEL_29;
    }
    os_log_type_t v31 = (char *)v33;
    goto LABEL_28;
  }
  id v5 = v3;
  int v6 = [v5 type];

  if (v6 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v13 = (id)gLogObj;
    id v14 = v5;
    int v15 = [v14 type];

    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    LODWORD(v42) = 18;
    BOOL v16 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v16, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          id v19 = v14;
          int v20 = objc_msgSend(v19, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v20;
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v43)
      {
        int v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (id)gLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v17, type);
        if (v21)
        {
          if (v23)
          {
            id v24 = v14;
            int v25 = objc_msgSend(v24, "type", buf, v42);

            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = v21;
            _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          if (!v16) {
            goto LABEL_29;
          }
LABEL_27:
          os_log_type_t v31 = (char *)v16;
LABEL_28:
          free(v31);
          goto LABEL_29;
        }
        if (v23)
        {
          id v29 = v14;
          int v30 = objc_msgSend(v29, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          id v27 = v14;
          int v28 = objc_msgSend(v27, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v28;
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v16) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  id v7 = v5;
  int v8 = (void *)v7[33];
  if (v8)
  {
    free(v8);
    v7[33] = 0;
  }
  if (!a2) {
    goto LABEL_8;
  }
  int v9 = strdup(a2);
  if (v9)
  {
LABEL_7:
    v7[33] = v9;
LABEL_8:
    id v10 = v7;
    os_log_type_t v11 = (os_unfair_lock_s *)(v10 + 180);
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E524BAA8;
    id v46 = v10;
    int v12 = v10;
    os_unfair_lock_lock(v11);
    (*(void (**)(unsigned char *))&buf[16])(buf);
    os_unfair_lock_unlock(v11);

LABEL_29:
    return;
  }
  __int16 v39 = __nwlog_obj();
  os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "strict_strdup";
  BOOL v40 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v40))
  {
    free(v40);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_1837D23F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_device_model(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v38 = "nw_endpoint_get_device_model";
    id v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_device_model";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v28 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v38 = "nw_endpoint_get_device_model";
            __int16 v39 = 2082;
            *(void *)BOOL v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_device_model";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v28 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_device_model";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (!v27) {
      goto LABEL_24;
    }
    id v24 = (char *)v27;
    goto LABEL_23;
  }
  id v3 = v1;
  int v4 = [v3 type];

  if (v4 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    id v7 = v3;
    int v8 = [v7 type];

    *(_DWORD *)buf = 136446466;
    BOOL v38 = "nw_endpoint_get_device_model";
    __int16 v39 = 1024;
    *(_DWORD *)BOOL v40 = v8;
    LODWORD(v34) = 18;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          int v12 = v7;
          int v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          BOOL v38 = "nw_endpoint_get_device_model";
          __int16 v39 = 1024;
          *(_DWORD *)BOOL v40 = v13;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        id v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            int v17 = v7;
            int v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            BOOL v38 = "nw_endpoint_get_device_model";
            __int16 v39 = 1024;
            *(_DWORD *)BOOL v40 = v18;
            v40[2] = 2082;
            *(void *)&v40[3] = v14;
            _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9) {
            goto LABEL_24;
          }
LABEL_22:
          id v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          os_log_type_t v22 = v7;
          int v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          BOOL v38 = "nw_endpoint_get_device_model";
          __int16 v39 = 1024;
          *(_DWORD *)BOOL v40 = v23;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          int v20 = v7;
          int v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          BOOL v38 = "nw_endpoint_get_device_model";
          __int16 v39 = 1024;
          *(_DWORD *)BOOL v40 = v21;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v9)
    {
LABEL_24:
      uint64_t v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  uint64_t v5 = v3[34];
LABEL_25:

  return v5;
}

void sub_1837D2A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_device_model(void *a1, const char *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    BOOL v32 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
    os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v33, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v34 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
          _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v34 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v34, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
          _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v34 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
          _os_log_impl(&dword_1830D4000, v34, v41, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_48:
    if (!v33) {
      goto LABEL_29;
    }
    os_log_type_t v31 = (char *)v33;
    goto LABEL_28;
  }
  id v5 = v3;
  int v6 = [v5 type];

  if (v6 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v13 = (id)gLogObj;
    id v14 = v5;
    int v15 = [v14 type];

    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    LODWORD(v42) = 18;
    BOOL v16 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v16, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          id v19 = v14;
          int v20 = objc_msgSend(v19, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v20;
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v43)
      {
        int v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (id)gLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v17, type);
        if (v21)
        {
          if (v23)
          {
            id v24 = v14;
            int v25 = objc_msgSend(v24, "type", buf, v42);

            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = v21;
            _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          if (!v16) {
            goto LABEL_29;
          }
LABEL_27:
          os_log_type_t v31 = (char *)v16;
LABEL_28:
          free(v31);
          goto LABEL_29;
        }
        if (v23)
        {
          id v29 = v14;
          int v30 = objc_msgSend(v29, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          id v27 = v14;
          int v28 = objc_msgSend(v27, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v28;
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v16) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  id v7 = v5;
  int v8 = (void *)v7[34];
  if (v8)
  {
    free(v8);
    v7[34] = 0;
  }
  if (!a2) {
    goto LABEL_8;
  }
  int v9 = strdup(a2);
  if (v9)
  {
LABEL_7:
    v7[34] = v9;
LABEL_8:
    id v10 = v7;
    os_log_type_t v11 = (os_unfair_lock_s *)(v10 + 180);
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E524BAA8;
    id v46 = v10;
    int v12 = v10;
    os_unfair_lock_lock(v11);
    (*(void (**)(unsigned char *))&buf[16])(buf);
    os_unfair_lock_unlock(v11);

LABEL_29:
    return;
  }
  __int16 v39 = __nwlog_obj();
  os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "strict_strdup";
  BOOL v40 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v40))
  {
    free(v40);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_1837D31C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_contact_id(void *a1, const char *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    BOOL v32 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
    os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v33, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v34 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
          _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v34 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v34, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
          _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v34 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
          _os_log_impl(&dword_1830D4000, v34, v41, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_48:
    if (!v33) {
      goto LABEL_29;
    }
    os_log_type_t v31 = (char *)v33;
    goto LABEL_28;
  }
  id v5 = v3;
  int v6 = [v5 type];

  if (v6 != 6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v13 = (id)gLogObj;
    id v14 = v5;
    int v15 = [v14 type];

    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    LODWORD(v42) = 18;
    BOOL v16 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v16, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          id v19 = v14;
          int v20 = objc_msgSend(v19, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v20;
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v43)
      {
        int v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (id)gLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v17, type);
        if (v21)
        {
          if (v23)
          {
            id v24 = v14;
            int v25 = objc_msgSend(v24, "type", buf, v42);

            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = v21;
            _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          if (!v16) {
            goto LABEL_29;
          }
LABEL_27:
          os_log_type_t v31 = (char *)v16;
LABEL_28:
          free(v31);
          goto LABEL_29;
        }
        if (v23)
        {
          id v29 = v14;
          int v30 = objc_msgSend(v29, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          id v27 = v14;
          int v28 = objc_msgSend(v27, "type", buf, v42);

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v28;
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v16) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  id v7 = v5;
  int v8 = (void *)v7[36];
  if (v8)
  {
    free(v8);
    v7[36] = 0;
  }
  if (!a2) {
    goto LABEL_8;
  }
  int v9 = strdup(a2);
  if (v9)
  {
LABEL_7:
    v7[36] = v9;
LABEL_8:
    id v10 = v7;
    os_log_type_t v11 = (os_unfair_lock_s *)(v10 + 180);
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E524BAA8;
    id v46 = v10;
    int v12 = v10;
    os_unfair_lock_lock(v11);
    (*(void (**)(unsigned char *))&buf[16])(buf);
    os_unfair_lock_unlock(v11);

LABEL_29:
    return;
  }
  __int16 v39 = __nwlog_obj();
  os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "strict_strdup";
  BOOL v40 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v40))
  {
    free(v40);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_1837D3954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void saveAndPostNetworkdSettings(void *a1, void *a2, uint64_t a3)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  id v5 = a2;
  uint64_t v88 = v5;
  if (v4 == v5 || !v4 || !v5)
  {
    if (v4 == v5) {
      goto LABEL_22;
    }
LABEL_7:
    id v6 = v4;
    id v7 = [NSString stringWithUTF8String:nw_file_path_settings];
    int v8 = v7;
    if (v4)
    {
      int v9 = [v6 description];
      id v10 = [v9 stringByReplacingOccurrencesOfString:@"\n" withString:&stru_1ECF695B0];

      char v11 = [v6 writeToFile:v8 atomically:1];
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v12 = (id)gLogObj;
      id v13 = v12;
      if (v11)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v10;
          id v14 = "%{public}s Successfully wrote updated networkd settings %{public}@";
          int v15 = v13;
          os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
          _os_log_impl(&dword_1830D4000, v15, v16, v14, buf, 0x16u);
        }
      }
      else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v10;
        id v14 = "%{public}s failed to save networkd settings %{public}@ to file";
        int v15 = v13;
        os_log_type_t v16 = OS_LOG_TYPE_ERROR;
        goto LABEL_18;
      }

LABEL_20:
LABEL_21:

      goto LABEL_22;
    }
    if (!unlink((const char *)[v7 UTF8String]))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully unlinked networkd settings", buf, 0xCu);
      }
      goto LABEL_20;
    }
    int v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v18 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v100) = v17;
    LODWORD(v85) = 28;
    uint64_t v84 = buf;
    id v19 = (void *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v93 = 0;
    if (!__nwlog_fault((const char *)v19, type, &v93))
    {
LABEL_93:
      if (v19) {
        free(v19);
      }
      goto LABEL_21;
    }
    int v20 = v17;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v21 = (id)gLogObj;
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v8;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v100) = v20;
        BOOL v23 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d";
LABEL_90:
        os_log_type_t v82 = v21;
        os_log_type_t v83 = v22;
LABEL_91:
        _os_log_impl(&dword_1830D4000, v82, v83, v23, buf, 0x1Cu);
      }
    }
    else
    {
      if (v93)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v21 = (id)gLogObj;
        os_log_type_t v80 = type[0];
        BOOL v81 = os_log_type_enabled(v21, type[0]);
        if (backtrace_string)
        {
          if (v81)
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v8;
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v100) = v20;
            WORD2(v100) = 2082;
            *(void *)((char *)&v100 + 6) = backtrace_string;
            _os_log_impl(&dword_1830D4000, v21, v80, "%{public}s unlink(%{public}@) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_93;
        }
        if (!v81) {
          goto LABEL_92;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v8;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v100) = v20;
        BOOL v23 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d, no backtrace";
        os_log_type_t v82 = v21;
        os_log_type_t v83 = v80;
        goto LABEL_91;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v21 = (id)gLogObj;
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v8;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v100) = v20;
        BOOL v23 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_90;
      }
    }
LABEL_92:

    goto LABEL_93;
  }
  if (([v4 isEqualToDictionary:v5] & 1) == 0) {
    goto LABEL_7;
  }
LABEL_22:
  id v24 = objc_msgSend(NSString, "stringWithUTF8String:", nw_file_path_settings, v84, v85);
  fixFilePermissions(v24);

  int v25 = (void *)[v4 mutableCopy];
  os_log_type_t v26 = [NSString stringWithUTF8String:nw_settings_managed_settings];
  id v27 = [v25 objectForKeyedSubscript:v26];
  [v25 removeObjectForKey:v26];
  long long v96 = 0u;
  long long v97 = 0u;
  *(_OWORD *)os_log_type_t type = 0u;
  long long v95 = 0u;
  id v28 = v27;
  uint64_t v29 = [v28 countByEnumeratingWithState:type objects:buf count:16];
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)v95;
    do
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if (*(void *)v95 != v31) {
          objc_enumerationMutation(v28);
        }
        os_log_type_t v33 = *(void **)(*(void *)&type[8] + 8 * i);
        if (([v33 isEqualToString:v26] & 1) == 0)
        {
          uint64_t v34 = [v28 objectForKeyedSubscript:v33];
          [v25 setObject:v34 forKeyedSubscript:v33];
        }
      }
      uint64_t v30 = [v28 countByEnumeratingWithState:type objects:buf count:16];
    }
    while (v30);
  }

  os_log_type_t v35 = [v25 description];
  uint64_t v36 = [v35 stringByReplacingOccurrencesOfString:@"\n" withString:&stru_1ECF695B0];

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v37 = (id)gLogObj;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "saveAndPostNetworkdSettings";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v36;
    _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Created compoundSettings: %@", buf, 0x16u);
  }
  unint64_t v86 = (void *)v36;

  BOOL v38 = [NSString stringWithUTF8String:nw_setting_libnetcore_debug];
  __int16 v39 = [v25 objectForKeyedSubscript:v38];
  uint64_t v40 = [v39 longLongValue];

  if (v40 == a3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v42 = (id)gLogObj;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "saveAndPostNetworkdSettings";
      _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s skipping OSLog settings update due to no logging changes", buf, 0xCu);
    }
  }
  else
  {
    updateOSLogPlistFromLevel(v40, 0, v41);
  }
  id v43 = v4;
  id v44 = v25;
  *(void *)buf = 8;
  *(void *)&buf[8] = nw_setting_libnetcore_datapath_debug;
  *(void *)&buf[16] = 16;
  *(void *)&long long v100 = nw_setting_tcpconn_disable_simulate_crash;
  *((void *)&v100 + 1) = 32;
  uint64_t v101 = nw_setting_boringssl_log_debug;
  uint64_t v102 = 64;
  uint64_t v103 = nw_setting_tcp_enable_auto_tfo;
  uint64_t v104 = 128;
  uint64_t v105 = nw_setting_disable_dns_xpc;
  uint64_t v106 = 256;
  uint64_t v107 = nw_setting_tcpconn_enable_tls_tickets;
  uint64_t v108 = 512;
  uint64_t v109 = nw_setting_channel_enable_qos_override;
  uint64_t v110 = 1024;
  uint64_t v111 = nw_setting_disable_ddr;
  uint64_t v112 = 2048;
  uint64_t v113 = nw_setting_tcpconn_enable_tls_esni;
  uint64_t v114 = 4096;
  uint64_t v115 = nw_setting_context_timer_disable_qos_override;
  uint64_t v116 = 0x2000;
  uint64_t v117 = nw_setting_tcpconn_enable_tls_experiments;
  uint64_t v118 = 0x4000;
  uint64_t v119 = nw_setting_tcpconn_enable_tls_keylog;
  uint64_t v120 = 0x8000;
  uint64_t v121 = nw_setting_disable_swift_tls_privacy_proxy;
  uint64_t v122 = 0x10000;
  uint64_t v123 = nw_setting_disable_l4s_aqm;
  uint64_t v125 = 0;
  uint64_t v124 = 0;
  uint64_t v45 = 0;
  if (nw_setting_libnetcore_datapath_debug)
  {
    int v46 = 1;
    uint64_t v47 = buf;
    do
    {
      uint64_t v48 = *(void *)v47;
      char v49 = objc_msgSend(NSString, "stringWithUTF8String:");
      uint64_t v50 = [v44 objectForKeyedSubscript:v49];
      int v51 = [v50 BOOLValue];

      if (v51) {
        uint64_t v52 = v48;
      }
      else {
        uint64_t v52 = 0;
      }
      v45 |= v52;
      [v44 removeObjectForKey:v49];

      uint64_t v47 = &buf[16 * v46++];
    }
    while (*((void *)v47 + 1));
  }
  uint64_t v53 = [NSString stringWithUTF8String:nw_setting_libnetcore_debug];
  unint64_t v54 = [v44 objectForKeyedSubscript:v53];
  uint64_t v55 = [v54 longLongValue];

  uint64_t v56 = 7;
  if (v55 < 7) {
    uint64_t v56 = v55;
  }
  uint64_t v57 = v56 & ~(v56 >> 63) | v45;
  [v44 removeObjectForKey:v53];
  [v44 removeObjectForKey:@"networkd_log_level"];

  if ([v44 count])
  {
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    unint64_t v58 = [v44 allKeys];
    uint64_t v59 = [v58 countByEnumeratingWithState:&v89 objects:v98 count:16];
    uint64_t v60 = v43;
    if (v59)
    {
      uint64_t v61 = v59;
      uint64_t v62 = 0;
      uint64_t v63 = *(void *)v90;
      do
      {
        for (uint64_t j = 0; j != v61; ++j)
        {
          if (*(void *)v90 != v63) {
            objc_enumerationMutation(v58);
          }
          unint64_t v65 = *(void **)(*((void *)&v89 + 1) + 8 * j);
          char v66 = [v44 objectForKeyedSubscript:v65];
          uint64_t v67 = [v65 hash];
          v62 ^= v67 ^ [v66 hash];
        }
        uint64_t v61 = [v58 countByEnumeratingWithState:&v89 objects:v98 count:16];
      }
      while (v61);
      uint64_t v68 = v62 << 16;
    }
    else
    {
      uint64_t v68 = 0;
    }

    v57 |= v68;
  }
  else
  {
    uint64_t v60 = v43;
  }
  if (postSettingsBitmask_sPostedSettingsBitmask != v57)
  {
    int v69 = postSettingsBitmask_token;
    if (postSettingsBitmask_token == -1)
    {
      uint32_t v73 = notify_register_check((const char *)nw_notification_name_settings, &postSettingsBitmask_token);
      if (v73)
      {
        uint32_t v74 = v73;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v75 = (id)gLogObj;
        if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "postSettingsBitmask";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = nw_notification_name_settings;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v100) = v74;
          _os_log_impl(&dword_1830D4000, v75, OS_LOG_TYPE_ERROR, "%{public}s notify_register_check(%{public}s) failed: %d", buf, 0x1Cu);
        }

LABEL_73:
        uint64_t v57 = 0;
        postSettingsBitmask_token = -1;
LABEL_74:
        postSettingsBitmask_sPostedSettingsBitmask = v57;
        goto LABEL_75;
      }
      int v69 = postSettingsBitmask_token;
      if (postSettingsBitmask_token == -1)
      {
        uint64_t v57 = 0;
        goto LABEL_74;
      }
    }
    uint32_t v70 = notify_set_state(v69, v57);
    if (v70)
    {
      uint32_t v71 = v70;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v72 = (id)gLogObj;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "postSettingsBitmask";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = nw_notification_name_settings;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&long long v100 = v57;
        WORD4(v100) = 1024;
        *(_DWORD *)((char *)&v100 + 10) = v71;
        _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_ERROR, "%{public}s notify_set_state for %{public}s %#llx failed: %d", buf, 0x26u);
      }
    }
    else
    {
      uint32_t v76 = notify_post((const char *)nw_notification_name_settings);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v77 = (id)gLogObj;
      char v78 = v77;
      if (!v76)
      {
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "postSettingsBitmask";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = postSettingsBitmask_sPostedSettingsBitmask;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&long long v100 = v57;
          _os_log_impl(&dword_1830D4000, v78, OS_LOG_TYPE_DEFAULT, "%{public}s successfully changed networkd settings state from %#llx to %#llx", buf, 0x20u);
        }

        goto LABEL_74;
      }
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "postSettingsBitmask";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = nw_notification_name_settings;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v100) = v76;
        _os_log_impl(&dword_1830D4000, v78, OS_LOG_TYPE_ERROR, "%{public}s notify_post for %{public}s failed: %d", buf, 0x1Cu);
      }
    }
    notify_cancel(postSettingsBitmask_token);
    goto LABEL_73;
  }
LABEL_75:
}

void fixFilePermissions(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = open((const char *)[v1 UTF8String], 2);
  if ((v2 & 0x80000000) == 0)
  {
    int v3 = v2;
    memset(&v43, 0, sizeof(v43));
    if (fstat(v2, &v43))
    {
      int v4 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      *(_DWORD *)os_log_type_t v37 = 136446978;
      BOOL v38 = "fixFilePermissions";
      __int16 v39 = 1024;
      *(_DWORD *)uint64_t v40 = v3;
      *(_WORD *)&v40[4] = 2114;
      *(void *)&v40[6] = v1;
      *(_WORD *)&v40[14] = 1024;
      *(_DWORD *)&v40[16] = v4;
      id v6 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v35 = 0;
      if (__nwlog_fault((const char *)v6, &type, &v35))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v7 = (id)gLogObj;
          os_log_type_t v8 = type;
          if (!os_log_type_enabled(v7, type)) {
            goto LABEL_34;
          }
          *(_DWORD *)os_log_type_t v37 = 136446978;
          BOOL v38 = "fixFilePermissions";
          __int16 v39 = 1024;
          *(_DWORD *)uint64_t v40 = v3;
          *(_WORD *)&v40[4] = 2114;
          *(void *)&v40[6] = v1;
          *(_WORD *)&v40[14] = 1024;
          *(_DWORD *)&v40[16] = v4;
          int v9 = "%{public}s fstat(%d) on \"%{public}@\" failed %{darwin.errno}d";
LABEL_32:
          id v28 = v7;
          os_log_type_t v29 = v8;
          goto LABEL_33;
        }
        if (!v35)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v7 = (id)gLogObj;
          os_log_type_t v8 = type;
          if (!os_log_type_enabled(v7, type)) {
            goto LABEL_34;
          }
          *(_DWORD *)os_log_type_t v37 = 136446978;
          BOOL v38 = "fixFilePermissions";
          __int16 v39 = 1024;
          *(_DWORD *)uint64_t v40 = v3;
          *(_WORD *)&v40[4] = 2114;
          *(void *)&v40[6] = v1;
          *(_WORD *)&v40[14] = 1024;
          *(_DWORD *)&v40[16] = v4;
          int v9 = "%{public}s fstat(%d) on \"%{public}@\" failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_32;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v7, type);
        if (!backtrace_string)
        {
          if (!v24)
          {
LABEL_34:

            if (v6) {
LABEL_35:
            }
              free(v6);
LABEL_36:
            close(v3);
            goto LABEL_37;
          }
          *(_DWORD *)os_log_type_t v37 = 136446978;
          BOOL v38 = "fixFilePermissions";
          __int16 v39 = 1024;
          *(_DWORD *)uint64_t v40 = v3;
          *(_WORD *)&v40[4] = 2114;
          *(void *)&v40[6] = v1;
          *(_WORD *)&v40[14] = 1024;
          *(_DWORD *)&v40[16] = v4;
          int v9 = "%{public}s fstat(%d) on \"%{public}@\" failed %{darwin.errno}d, no backtrace";
          id v28 = v7;
          os_log_type_t v29 = v23;
LABEL_33:
          _os_log_impl(&dword_1830D4000, v28, v29, v9, (uint8_t *)v37, 0x22u);
          goto LABEL_34;
        }
        if (v24)
        {
          *(_DWORD *)os_log_type_t v37 = 136447234;
          BOOL v38 = "fixFilePermissions";
          __int16 v39 = 1024;
          *(_DWORD *)uint64_t v40 = v3;
          *(_WORD *)&v40[4] = 2114;
          *(void *)&v40[6] = v1;
          *(_WORD *)&v40[14] = 1024;
          *(_DWORD *)&v40[16] = v4;
          __int16 v41 = 2082;
          v42[0] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v23, "%{public}s fstat(%d) on \"%{public}@\" failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)v37, 0x2Cu);
        }

        free(backtrace_string);
      }
LABEL_23:
      if (!v6) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    int v16 = v43.st_mode & 0x1FF;
    if (v16 == 420) {
      goto LABEL_36;
    }
    if (!fchmod(v3, 0x1A4u))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v30 = (id)gLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)os_log_type_t v37 = 136447234;
        BOOL v38 = "fixFilePermissions";
        __int16 v39 = 2114;
        *(void *)uint64_t v40 = v1;
        *(_WORD *)&v40[8] = 1024;
        *(_DWORD *)&v40[10] = v3;
        *(_WORD *)&v40[14] = 1024;
        *(_DWORD *)&v40[16] = v16;
        __int16 v41 = 1024;
        LODWORD(v42[0]) = 420;
        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully changed \"%{public}@\" (fd %d) permissions from %o to %o", (uint8_t *)v37, 0x28u);
      }

      goto LABEL_36;
    }
    int v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v18 = (id)gLogObj;
    *(_DWORD *)os_log_type_t v37 = 136447234;
    BOOL v38 = "fixFilePermissions";
    __int16 v39 = 1024;
    *(_DWORD *)uint64_t v40 = v3;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = 420;
    *(_WORD *)&v40[10] = 2114;
    *(void *)&v40[12] = v1;
    __int16 v41 = 1024;
    LODWORD(v42[0]) = v17;
    id v6 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault((const char *)v6, &type, &v35)) {
      goto LABEL_23;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v19 = (id)gLogObj;
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_63;
      }
      *(_DWORD *)os_log_type_t v37 = 136447234;
      BOOL v38 = "fixFilePermissions";
      __int16 v39 = 1024;
      *(_DWORD *)uint64_t v40 = v3;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 420;
      *(_WORD *)&v40[10] = 2114;
      *(void *)&v40[12] = v1;
      __int16 v41 = 1024;
      LODWORD(v42[0]) = v17;
      int v21 = "%{public}s fchmod(%d, 0x%x) on \"%{public}@\" failed %{darwin.errno}d";
    }
    else if (v35)
    {
      uint64_t v31 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v19 = (id)gLogObj;
      os_log_type_t v20 = type;
      BOOL v32 = os_log_type_enabled(v19, type);
      if (v31)
      {
        if (v32)
        {
          *(_DWORD *)os_log_type_t v37 = 136447490;
          BOOL v38 = "fixFilePermissions";
          __int16 v39 = 1024;
          *(_DWORD *)uint64_t v40 = v3;
          *(_WORD *)&v40[4] = 1024;
          *(_DWORD *)&v40[6] = 420;
          *(_WORD *)&v40[10] = 2114;
          *(void *)&v40[12] = v1;
          __int16 v41 = 1024;
          LODWORD(v42[0]) = v17;
          WORD2(v42[0]) = 2082;
          *(void *)((char *)v42 + 6) = v31;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s fchmod(%d, 0x%x) on \"%{public}@\" failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)v37, 0x32u);
        }

        free(v31);
        if (!v6) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
      if (!v32)
      {
LABEL_63:

        if (!v6) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
      *(_DWORD *)os_log_type_t v37 = 136447234;
      BOOL v38 = "fixFilePermissions";
      __int16 v39 = 1024;
      *(_DWORD *)uint64_t v40 = v3;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 420;
      *(_WORD *)&v40[10] = 2114;
      *(void *)&v40[12] = v1;
      __int16 v41 = 1024;
      LODWORD(v42[0]) = v17;
      int v21 = "%{public}s fchmod(%d, 0x%x) on \"%{public}@\" failed %{darwin.errno}d, no backtrace";
    }
    else
    {
      id v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_63;
      }
      *(_DWORD *)os_log_type_t v37 = 136447234;
      BOOL v38 = "fixFilePermissions";
      __int16 v39 = 1024;
      *(_DWORD *)uint64_t v40 = v3;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 420;
      *(_WORD *)&v40[10] = 2114;
      *(void *)&v40[12] = v1;
      __int16 v41 = 1024;
      LODWORD(v42[0]) = v17;
      int v21 = "%{public}s fchmod(%d, 0x%x) on \"%{public}@\" failed %{darwin.errno}d, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v19, v20, v21, (uint8_t *)v37, 0x28u);
    goto LABEL_63;
  }
  dev_t v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (v10 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    v43.st_dev = 136446722;
    *(void *)&v43.st_mode = "fixFilePermissions";
    WORD2(v43.st_ino) = 2114;
    *(__darwin_ino64_t *)((char *)&v43.st_ino + 6) = (__darwin_ino64_t)v1;
    HIWORD(v43.st_gid) = 1024;
    v43.st_rdev = v10;
    int v12 = (char *)_os_log_send_and_compose_impl();

    v37[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v12, v37, &type)) {
      goto LABEL_54;
    }
    if (v37[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (id)gLogObj;
      os_log_type_t v14 = v37[0];
      if (os_log_type_enabled(v13, v37[0]))
      {
        v43.st_dev = 136446722;
        *(void *)&v43.st_mode = "fixFilePermissions";
        WORD2(v43.st_ino) = 2114;
        *(__darwin_ino64_t *)((char *)&v43.st_ino + 6) = (__darwin_ino64_t)v1;
        HIWORD(v43.st_gid) = 1024;
        v43.st_rdev = v10;
        int v15 = "%{public}s open(%{public}@, O_RDWR) failed %{darwin.errno}d";
LABEL_51:
        os_log_type_t v33 = v13;
        os_log_type_t v34 = v14;
LABEL_52:
        _os_log_impl(&dword_1830D4000, v33, v34, v15, (uint8_t *)&v43, 0x1Cu);
      }
    }
    else
    {
      if (type)
      {
        int v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v13 = (id)gLogObj;
        os_log_type_t v26 = v37[0];
        BOOL v27 = os_log_type_enabled(v13, v37[0]);
        if (v25)
        {
          if (v27)
          {
            v43.st_dev = 136446978;
            *(void *)&v43.st_mode = "fixFilePermissions";
            WORD2(v43.st_ino) = 2114;
            *(__darwin_ino64_t *)((char *)&v43.st_ino + 6) = (__darwin_ino64_t)v1;
            HIWORD(v43.st_gid) = 1024;
            v43.st_rdev = v10;
            *((_WORD *)&v43.st_rdev + 2) = 2082;
            *(void *)((char *)&v43.st_rdev + 6) = v25;
            _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s open(%{public}@, O_RDWR) failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&v43, 0x26u);
          }

          free(v25);
          goto LABEL_54;
        }
        if (!v27) {
          goto LABEL_53;
        }
        v43.st_dev = 136446722;
        *(void *)&v43.st_mode = "fixFilePermissions";
        WORD2(v43.st_ino) = 2114;
        *(__darwin_ino64_t *)((char *)&v43.st_ino + 6) = (__darwin_ino64_t)v1;
        HIWORD(v43.st_gid) = 1024;
        v43.st_rdev = v10;
        int v15 = "%{public}s open(%{public}@, O_RDWR) failed %{darwin.errno}d, no backtrace";
        os_log_type_t v33 = v13;
        os_log_type_t v34 = v26;
        goto LABEL_52;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (id)gLogObj;
      os_log_type_t v14 = v37[0];
      if (os_log_type_enabled(v13, v37[0]))
      {
        v43.st_dev = 136446722;
        *(void *)&v43.st_mode = "fixFilePermissions";
        WORD2(v43.st_ino) = 2114;
        *(__darwin_ino64_t *)((char *)&v43.st_ino + 6) = (__darwin_ino64_t)v1;
        HIWORD(v43.st_gid) = 1024;
        v43.st_rdev = v10;
        int v15 = "%{public}s open(%{public}@, O_RDWR) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_51;
      }
    }
LABEL_53:

LABEL_54:
    if (v12) {
      free(v12);
    }
  }
LABEL_37:
}

void updateOSLogPlistFromLevel(uint64_t a1, char a2, double a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0)
  {
    long long v27 = 0uLL;
    getLastUpdateModTimeFromPath((const char *)nw_file_path_settings, (__darwin_time_t *)&v27 + 1, (uint64_t *)&v27);
    long long v26 = 0uLL;
    id v5 = [NSString alloc];
    id v6 = objc_msgSend(v5, "initWithFormat:", @"/Library/Preferences/Logging/Subsystems/%s.plist", nw_oslog_subsystem);
    getLastUpdateModTimeFromPath((const char *)[v6 UTF8String], (__darwin_time_t *)&v26 + 1, (uint64_t *)&v26);

    long long v7 = v27;
    if (v27 != 0)
    {
      long long v8 = v26;
      if (v26 != 0
        && (*((uint64_t *)&v27 + 1) < *((uint64_t *)&v26 + 1)
         || *((void *)&v27 + 1) == *((void *)&v26 + 1) && (uint64_t)v27 < (uint64_t)v26))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (id)gLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136447234;
          os_log_type_t v29 = "updateOSLogPlistFromLevel";
          __int16 v30 = 2048;
          uint64_t v31 = (const char *)*((void *)&v7 + 1);
          __int16 v32 = 2048;
          uint64_t v33 = v7;
          __int16 v34 = 2048;
          uint64_t v35 = *((void *)&v8 + 1);
          __int16 v36 = 2048;
          uint64_t v37 = v8;
          dev_t v10 = "%{public}s skipping OSLog settings update %ld.%09ld < %ld.%09ld";
          id v11 = v9;
          os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
          uint32_t v13 = 52;
LABEL_26:
          _os_log_impl(&dword_1830D4000, v11, v12, v10, buf, v13);
          goto LABEL_31;
        }
        goto LABEL_31;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136447234;
      os_log_type_t v29 = "updateOSLogPlistFromLevel";
      __int16 v30 = 2048;
      uint64_t v31 = (const char *)*((void *)&v7 + 1);
      __int16 v32 = 2048;
      uint64_t v33 = v7;
      __int16 v34 = 2048;
      uint64_t v35 = *((void *)&v26 + 1);
      __int16 v36 = 2048;
      uint64_t v37 = v26;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s performing OSLog settings update %ld.%09ld, %ld.%09ld", buf, 0x34u);
    }
  }
  gotLoadHelper_x19__OBJC_CLASS___OSLogPreferencesSubsystem(a3);
  if (objc_opt_class())
  {
    id v14 = objc_alloc(v3[27].isa);
    int v15 = [NSString stringWithUTF8String:nw_oslog_subsystem];
    int v9 = [v14 initWithName:v15];

    if (v9)
    {
      BOOL v16 = a1 <= 6;
      if (a1 <= 6) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = 4;
      }
      if (v16) {
        id v18 = "Inherit";
      }
      else {
        id v18 = "Debug";
      }
      [v9 setEnabledLevel:v17];
      [v9 setPersistedLevel:v17];
      if ([v9 enabledLevel] == v17
        && [v9 persistedLevel] == v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v19 = (id)gLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v29 = "updateOSLogPlistFromLevel";
          __int16 v30 = 2082;
          uint64_t v31 = v18;
          os_log_type_t v20 = "%{public}s successfully set new logging level to %{public}s";
          int v21 = v19;
          os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
          uint32_t v23 = 22;
LABEL_29:
          _os_log_impl(&dword_1830D4000, v21, v22, v20, buf, v23);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v19 = (id)gLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v24 = [v9 enabledLevel];
          uint64_t v25 = [v9 persistedLevel];
          *(_DWORD *)buf = 136446978;
          os_log_type_t v29 = "updateOSLogPlistFromLevel";
          __int16 v30 = 2082;
          uint64_t v31 = v18;
          __int16 v32 = 2048;
          uint64_t v33 = v24;
          __int16 v34 = 2048;
          uint64_t v35 = v25;
          os_log_type_t v20 = "%{public}s failed to set new logging level to %{public}s (%ld,%ld)";
          int v21 = v19;
          os_log_type_t v22 = OS_LOG_TYPE_ERROR;
          uint32_t v23 = 42;
          goto LABEL_29;
        }
      }

      goto LABEL_31;
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v9 = (id)gLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "updateOSLogPlistFromLevel";
    dev_t v10 = "%{public}s failed to allocate an OSLogPreferencesSubsystem";
    id v11 = v9;
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    uint32_t v13 = 12;
    goto LABEL_26;
  }
LABEL_31:
}

void getLastUpdateModTimeFromPath(const char *a1, __darwin_time_t *a2, uint64_t *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  memset(&v20, 0, sizeof(v20));
  if (!stat(a1, &v20))
  {
    uint64_t tv_nsec = v20.st_mtimespec.tv_nsec;
    *a2 = v20.st_mtimespec.tv_sec;
    *a3 = tv_nsec;
    return;
  }
  int v6 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (v6 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    int buf = 136446722;
    os_log_type_t v22 = "getLastUpdateModTimeFromPath";
    __int16 v23 = 2082;
    uint64_t v24 = a1;
    __int16 v25 = 1024;
    int v26 = v6;
    long long v8 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault((const char *)v8, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_20;
        }
        int buf = 136446722;
        os_log_type_t v22 = "getLastUpdateModTimeFromPath";
        __int16 v23 = 2082;
        uint64_t v24 = a1;
        __int16 v25 = 1024;
        int v26 = v6;
        id v11 = "%{public}s stat(%{public}s) failed %{darwin.errno}d";
LABEL_18:
        BOOL v16 = v9;
        os_log_type_t v17 = v10;
        goto LABEL_19;
      }
      if (!v18)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_20;
        }
        int buf = 136446722;
        os_log_type_t v22 = "getLastUpdateModTimeFromPath";
        __int16 v23 = 2082;
        uint64_t v24 = a1;
        __int16 v25 = 1024;
        int v26 = v6;
        id v11 = "%{public}s stat(%{public}s) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_18;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v9 = (id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_20:

          if (!v8) {
            return;
          }
LABEL_14:
          free(v8);
          return;
        }
        int buf = 136446722;
        os_log_type_t v22 = "getLastUpdateModTimeFromPath";
        __int16 v23 = 2082;
        uint64_t v24 = a1;
        __int16 v25 = 1024;
        int v26 = v6;
        id v11 = "%{public}s stat(%{public}s) failed %{darwin.errno}d, no backtrace";
        BOOL v16 = v9;
        os_log_type_t v17 = v14;
LABEL_19:
        _os_log_impl(&dword_1830D4000, v16, v17, v11, (uint8_t *)&buf, 0x1Cu);
        goto LABEL_20;
      }
      if (v15)
      {
        int buf = 136446978;
        os_log_type_t v22 = "getLastUpdateModTimeFromPath";
        __int16 v23 = 2082;
        uint64_t v24 = a1;
        __int16 v25 = 1024;
        int v26 = v6;
        __int16 v27 = 2082;
        id v28 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s stat(%{public}s) failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x26u);
      }

      free(backtrace_string);
    }
    if (!v8) {
      return;
    }
    goto LABEL_14;
  }
}

void __handleEventForManagedNetworkSettings_block_invoke(uint64_t a1)
{
  id v2 = +[ManagedNetworkSettings sharedMNS];
  [v2 handleEvent:*(void *)(a1 + 32)];
}

uint64_t nwphShouldRunCheck(void *a1, void *a2, void *a3, int a4, double a5, double a6)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  if (v12
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && ([v11 timeIntervalSinceDate:v12], v14 < a5))
  {
    double v40 = v14;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v57 = "nwphShouldRunCheck";
      __int16 v58 = 2080;
      __int16 v41 = "settings";
      *(_DWORD *)int buf = 136447234;
      if (a4) {
        __int16 v41 = "asset";
      }
      uint64_t v59 = (void *)v41;
      __int16 v60 = 2114;
      int64_t v61 = (int64_t)v12;
      __int16 v62 = 2048;
      int64_t v63 = *(void *)&v40;
      __int16 v64 = 2048;
      double v65 = a5;
      uint64_t v42 = "%{public}s last %s attempt was at %{public}@ (%f < %f), skipping";
      goto LABEL_37;
    }
  }
  else
  {
    if (!v13
      || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
      || ([v11 timeIntervalSinceDate:v13], v15 >= a6))
    {
      BOOL v16 = v12;
      id v17 = v13;
      xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
      if (v18)
      {
        id v52 = v11;
        id v19 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
        [v19 timeIntervalSince1970];
        uint64_t v21 = (uint64_t)v20;
        int64_t v22 = (uint64_t)v20 % 86400;
        xpc_dictionary_set_int64(v18, "time_of_day", v22);
        [v16 timeIntervalSince1970];
        id v51 = v13;
        if (v23 <= 0.0)
        {
          int64_t v25 = -1;
        }
        else
        {
          [v16 timeIntervalSince1970];
          int64_t v25 = v21 - (uint64_t)v24;
        }
        __int16 v32 = v16;
        xpc_dictionary_set_int64(v18, "seconds_since_last_attempt", v25);
        [v17 timeIntervalSince1970];
        id v34 = v17;
        if (v33 <= 0.0)
        {
          *(double *)&int64_t v36 = NAN;
        }
        else
        {
          [v17 timeIntervalSince1970];
          int64_t v36 = v21 - (uint64_t)v35;
        }
        xpc_dictionary_set_int64(v18, "seconds_since_last_success", v36);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v37 = (id)gLogObj;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v38 = "settings configuration";
          *(_DWORD *)int buf = 136447234;
          uint64_t v57 = "nwphReportCheck";
          __int16 v58 = 2080;
          if (a4) {
            uint64_t v38 = "asset check";
          }
          uint64_t v59 = (void *)v38;
          __int16 v60 = 2048;
          int64_t v61 = v22;
          __int16 v62 = 2048;
          int64_t v63 = v25;
          __int16 v64 = 2048;
          double v65 = *(double *)&v36;
          _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %s event: (time_of_day: %lld, seconds_since_last_attempt: %lld, seconds_since_last_success: %lld)", buf, 0x34u);
        }

        analytics_send_event_delayInitStub(v39);
        int v26 = v34;
        BOOL v16 = v32;
        id v13 = v51;
        id v11 = v52;
        goto LABEL_45;
      }
      int v26 = v17;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (id)gLogObj;
      *(_DWORD *)int buf = 136446210;
      uint64_t v57 = "nwphReportCheck";
      id v28 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v54 = 0;
      if (!__nwlog_fault((const char *)v28, &type, &v54))
      {
LABEL_43:
        if (!v28)
        {
LABEL_45:

          uint64_t v49 = 1;
          goto LABEL_46;
        }
LABEL_44:
        free(v28);
        goto LABEL_45;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v29 = (id)gLogObj;
        os_log_type_t v30 = type;
        if (!os_log_type_enabled(v29, type))
        {
LABEL_42:

          goto LABEL_43;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v57 = "nwphReportCheck";
        uint64_t v31 = "%{public}s xpc_dictionary_create failed";
      }
      else
      {
        if (v54)
        {
          id v53 = v11;
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v44 = (id)gLogObj;
          os_log_type_t v45 = type;
          BOOL v46 = os_log_type_enabled(v44, type);
          if (backtrace_string)
          {
            if (v46)
            {
              *(_DWORD *)int buf = 136446466;
              uint64_t v57 = "nwphReportCheck";
              __int16 v58 = 2082;
              uint64_t v59 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            id v11 = v53;
            if (!v28) {
              goto LABEL_45;
            }
          }
          else
          {
            if (v46)
            {
              *(_DWORD *)int buf = 136446210;
              uint64_t v57 = "nwphReportCheck";
              _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
            }

            id v11 = v53;
            if (!v28) {
              goto LABEL_45;
            }
          }
          goto LABEL_44;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v29 = (id)gLogObj;
        os_log_type_t v30 = type;
        if (!os_log_type_enabled(v29, type)) {
          goto LABEL_42;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v57 = "nwphReportCheck";
        uint64_t v31 = "%{public}s xpc_dictionary_create failed, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v29, v30, v31, buf, 0xCu);
      goto LABEL_42;
    }
    double v47 = v15;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v57 = "nwphShouldRunCheck";
      __int16 v58 = 2080;
      uint64_t v48 = "settings";
      *(_DWORD *)int buf = 136447234;
      if (a4) {
        uint64_t v48 = "asset";
      }
      uint64_t v59 = (void *)v48;
      __int16 v60 = 2114;
      int64_t v61 = (int64_t)v13;
      __int16 v62 = 2048;
      int64_t v63 = *(void *)&v47;
      __int16 v64 = 2048;
      double v65 = a6;
      uint64_t v42 = "%{public}s last %s success was at %{public}@ (%f < %f), skipping";
LABEL_37:
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, v42, buf, 0x34u);
    }
  }
  uint64_t v49 = 0;
LABEL_46:

  return v49;
}

void __nwphCheckMobileAsset_block_invoke(uint64_t a1, unint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2 < 0x24 && ((0x800003FFFuLL >> a2) & 1) != 0) {
    int v4 = off_1E523D7B8[a2];
  }
  else {
    int v4 = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid[%lld]", a2);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136446466;
    double v15 = "nwphCheckMobileAsset_block_invoke";
    __int16 v16 = 2114;
    id v17 = v4;
    _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s Got the download catalog reply %{public}@", buf, 0x16u);
  }

  if (!a2)
  {
    gotLoadHelper_x8__OBJC_CLASS___MAAssetQuery(v6);
    long long v8 = (void *)[objc_alloc(*(Class *)(v7 + 4032)) initWithType:@"com.apple.MobileAsset.network.networknomicon"];
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      double v15 = "nwphCheckMobileAsset_block_invoke";
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s querying mobile asset metadata", buf, 0xCu);
    }

    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __nwphCheckMobileAsset_block_invoke_366;
    v11[3] = &unk_1E523D6B0;
    id v12 = v8;
    id v13 = *(id *)(a1 + 32);
    id v10 = v8;
    [v10 queryMetaData:v11];
  }
}

void __nwphConfigureRemoteSettings_block_invoke()
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  id v0 = [MEMORY[0x1E4F1CA60] dictionaryWithContentsOfFile:@"/Library/Preferences/com.apple.networkd.networknomicon.plist"];
  if (!v0) {
    id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  id v1 = (void *)MEMORY[0x1E4F1C9C8];
  id v2 = v0;
  int v3 = [v1 date];
  int v4 = [v2 objectForKeyedSubscript:@"kNWSettingsKeyLastRun"];
  id v5 = [v2 objectForKeyedSubscript:@"kNWSettingsKeyFrequencySeconds"];

  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t v6 = [v5 longLongValue];
    double v7 = 86400.0;
    if ((unint64_t)(v6 - 3600) < 0x277EF1) {
      double v7 = (double)v6;
    }
  }
  else
  {
    double v7 = 86400.0;
  }
  char v8 = nwphShouldRunCheck(v3, 0, v4, 0, 0.0, v7);

  if (v8)
  {
    int v9 = [MEMORY[0x1E4F1C9C8] date];
    [v2 setObject:v9 forKeyedSubscript:@"kNWSettingsKeyLastRun"];

    id v10 = &unk_183D5C000;
    if ([v2 writeToFile:@"/Library/Preferences/com.apple.networkd.networknomicon.plist" atomically:1])goto LABEL_29; {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    }
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)int buf = 136446722;
    uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
    __int16 v107 = 2114;
    *(void *)uint64_t v108 = v2;
    *(_WORD *)&v108[8] = 2114;
    uint64_t v109 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
    LODWORD(v91) = 32;
    long long v90 = buf;
    id v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t v104 = OS_LOG_TYPE_ERROR;
    char v103 = 0;
    if (!__nwlog_fault((const char *)v12, &v104, &v103))
    {
LABEL_27:
      if (v12) {
LABEL_28:
      }
        free(v12);
LABEL_29:
      uint64_t v21 = (const char *)nw_setting_libnetcore_debug;
      networkd_settings_init();
      if (sCachedSettings)
      {
        pthread_mutex_lock(&sSettingsMutex);
        if (sCachedSettings) {
          int64_t int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v21);
        }
        else {
          int64_t int64 = 0;
        }
        pthread_mutex_unlock(&sSettingsMutex);
      }
      else
      {
        int64_t int64 = 0;
      }
      int64_t v22 = objc_msgSend(NSString, "stringWithUTF8String:", nw_file_path_settings, v90, v91);
      __int16 v16 = [MEMORY[0x1E4F1CA60] dictionaryWithContentsOfFile:v22];
      if (!v16)
      {
        __int16 v16 = [MEMORY[0x1E4F1CA60] dictionary];
      }

      id v99 = [v16 copy];
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      double v23 = (id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        BOOL v24 = networkd_settings_get_BOOL((const char *)nw_setting_enable_quic);
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v24;
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s QUIC was set to: %u", buf, 0x12u);
      }

      uint32_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_quic_numerator, 100);
      uint32_t v26 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_quic_denominator, 100);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (id)gLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = v10[309];
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = int64_with_default;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v26;
        _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s enable_quic sampled at: %u / %u", buf, 0x18u);
      }

      uint32_t v28 = arc4random_uniform(v26);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v29 = (id)gLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v28 < int64_with_default;
        _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s enabling QUIC: %u", buf, 0x12u);
      }

      uint64_t v30 = [objc_alloc(NSNumber) initWithBool:v28 < int64_with_default];
      if (v30)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v31 = [NSString stringWithUTF8String:nw_setting_enable_quic];
          [v16 setObject:v30 forKeyedSubscript:v31];
        }
      }
      long long v97 = (void *)v30;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v32 = (id)gLogObj;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        BOOL quic_l4s_enabled = network_config_get_quic_l4s_enabled();
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = quic_l4s_enabled;
        _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s L4S was set to: %u", buf, 0x12u);
      }

      uint32_t v34 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_l4s_numerator, 0);
      uint32_t v35 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_l4s_denominator, 100);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int64_t v36 = (id)gLogObj;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = v10[309];
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v34;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v35;
        _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s enable L4S sampled at: %u / %u", buf, 0x18u);
      }
      uint64_t v37 = v10;

      uint32_t v38 = arc4random_uniform(v35);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      double v39 = (id)gLogObj;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        if (v38 >= v34) {
          double v40 = "disabl";
        }
        else {
          double v40 = "enabl";
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 2080;
        *(void *)uint64_t v108 = v40;
        _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, "%{public}s %sing L4S", buf, 0x16u);
      }

      uint64_t v41 = [objc_alloc(NSNumber) initWithBool:v38 < v34];
      if (v41)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v42 = [NSString stringWithUTF8String:nw_setting_enable_l4s];
          [v16 setObject:v41 forKeyedSubscript:v42];
        }
      }
      long long v96 = (void *)v41;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      stat v43 = (id)gLogObj;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        BOOL tcp_accurate_ecn_enabled = network_config_get_tcp_accurate_ecn_enabled();
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = tcp_accurate_ecn_enabled;
        _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEBUG, "%{public}s Accurate ECN was set to: %u", buf, 0x12u);
      }

      uint32_t v45 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_accurate_ecn_numerator, 0);
      uint32_t v46 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_accurate_ecn_denominator, 100);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      double v47 = (id)gLogObj;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = v10[309];
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v45;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v46;
        _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s enable Accurate ECN sampled at: %u / %u", buf, 0x18u);
      }

      uint32_t v48 = arc4random_uniform(v46);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v49 = (id)gLogObj;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        if (v48 >= v45) {
          uint64_t v50 = "disabl";
        }
        else {
          uint64_t v50 = "enabl";
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 2080;
        *(void *)uint64_t v108 = v50;
        _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %sing Accurate ECN", buf, 0x16u);
      }
      uint32_t v100 = v48;

      uint64_t v51 = [objc_alloc(NSNumber) initWithBool:v48 < v45];
      if (v51)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v52 = [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn];
          [v16 setObject:v51 forKeyedSubscript:v52];
        }
      }
      os_log_type_t v94 = (void *)v51;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v53 = (id)gLogObj;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        BOOL tcp_l4s_enabled = network_config_get_tcp_l4s_enabled();
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = tcp_l4s_enabled;
        _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_DEBUG, "%{public}s TCP L4S was set to: %u", buf, 0x12u);
      }

      uint32_t v101 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_tcp_l4s_numerator, 0);
      uint32_t v55 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_tcp_l4s_denominator, 100);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v56 = (id)gLogObj;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = v10[309];
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v101;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v55;
        _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEBUG, "%{public}s enable TCP L4S sampled at: %u / %u", buf, 0x18u);
      }
      uint32_t v95 = v45;

      uint32_t v57 = arc4random_uniform(v55);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v58 = (id)gLogObj;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        if (v57 >= v101) {
          uint64_t v59 = "disabl";
        }
        else {
          uint64_t v59 = "enabl";
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 2080;
        *(void *)uint64_t v108 = v59;
        _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %sing TCP L4S", buf, 0x16u);
      }
      uint32_t v93 = v57;

      uint64_t v60 = [objc_alloc(NSNumber) initWithBool:v57 < v101];
      uint32_t v61 = v100;
      if (v60)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          __int16 v62 = [NSString stringWithUTF8String:nw_setting_enable_tcp_l4s];
          [v16 setObject:v60 forKeyedSubscript:v62];
        }
      }
      long long v92 = (void *)v60;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int64_t v63 = (id)gLogObj;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        BOOL v64 = networkd_settings_get_BOOL((const char *)nw_setting_enable_unified_http);
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v64;
        _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_DEBUG, "%{public}s unified HTTP was set to: %u", buf, 0x12u);
      }

      uint32_t v65 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_unified_http_numerator, 100);
      uint32_t v66 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_unified_http_denominator, 100);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v67 = (id)gLogObj;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = v37[309];
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v65;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v66;
        _os_log_impl(&dword_1830D4000, v67, OS_LOG_TYPE_DEBUG, "%{public}s enable_unified_http sampled at: %u / %u", buf, 0x18u);
      }

      uint32_t v68 = arc4random_uniform(v66);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v69 = (id)gLogObj;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v68 < v65;
        _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_DEBUG, "%{public}s enabling unified HTTP: %u", buf, 0x12u);
      }

      uint32_t v70 = (void *)[objc_alloc(NSNumber) initWithBool:v68 < v65];
      if (v70)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint32_t v71 = [NSString stringWithUTF8String:nw_setting_enable_unified_http];
          [v16 setObject:v70 forKeyedSubscript:v71];
        }
      }
      int64_t v72 = networkd_settings_get_int64_with_default((const char *)nw_setting_activity_investigation_id, 0);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint32_t v73 = (id)gLogObj;
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 2048;
        *(void *)uint64_t v108 = v72;
        _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_DEFAULT, "%{public}s Current Investigation ID: %llu", buf, 0x16u);
      }

      if (v72)
      {
        uint32_t v74 = (const char *)nw_setting_activity_investigation_id_start_time;
        networkd_settings_init();
        if (sCachedSettings)
        {
          pthread_mutex_lock(&sSettingsMutex);
          if (sCachedSettings) {
            int64_t v75 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v74);
          }
          else {
            int64_t v75 = 0;
          }
          unint64_t v76 = 0x1E4F29000uLL;
          pthread_mutex_unlock(&sSettingsMutex);
        }
        else
        {
          unint64_t v76 = 0x1E4F29000;
          int64_t v75 = 0;
        }
        __uint64_t v77 = clock_gettime_nsec_np(_CLOCK_REALTIME);
        char v78 = (__CFString *)v77;
        if (v75 - 1 >= v77)
        {
          BOOL v81 = [objc_alloc(NSNumber) initWithUnsignedLongLong:v77];
          if (v81)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v84 = [*(id *)(v76 + 24) stringWithUTF8String:nw_setting_activity_investigation_id_start_time];
              [v16 setObject:v81 forKeyedSubscript:v84];

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v85 = (id)gLogObj;
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)int buf = 136446466;
                uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
                __int16 v107 = 2048;
                *(void *)uint64_t v108 = v78;
                _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_DEFAULT, "%{public}s Overriding Investigation ID start time to %llu", buf, 0x16u);
              }
            }
          }
        }
        else
        {
          unint64_t v79 = v77 - v75;
          unint64_t v80 = (v77 - v75) / 0x3B9ACA00;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v81 = (id)gLogObj;
          BOOL v82 = os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT);
          if (v79 < 0x2261034C3CA00)
          {
            uint32_t v61 = v100;
            if (v82)
            {
              *(_DWORD *)int buf = 136446978;
              uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
              __int16 v107 = 2048;
              *(void *)uint64_t v108 = v75;
              *(_WORD *)&v108[8] = 2048;
              uint64_t v109 = v78;
              __int16 v110 = 2048;
              unint64_t v111 = v80;
              _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_DEFAULT, "%{public}s Investigation ID has not expired (start: %llu, now: %llu, delta_sec: %llu)", buf, 0x2Au);
            }
          }
          else
          {
            uint32_t v61 = v100;
            if (v82)
            {
              *(_DWORD *)int buf = 136446978;
              uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
              __int16 v107 = 2048;
              *(void *)uint64_t v108 = v75;
              *(_WORD *)&v108[8] = 2048;
              uint64_t v109 = v78;
              __int16 v110 = 2048;
              unint64_t v111 = v80;
              _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_DEFAULT, "%{public}s Investigation ID expired, removing (start: %llu, now: %llu, delta_sec: %llu)", buf, 0x2Au);
            }

            os_log_type_t v83 = [*(id *)(v76 + 24) stringWithUTF8String:nw_setting_activity_investigation_id];
            [v16 setObject:0 forKeyedSubscript:v83];

            BOOL v81 = [*(id *)(v76 + 24) stringWithUTF8String:nw_setting_activity_investigation_id_start_time];
            [v16 setObject:0 forKeyedSubscript:v81];
          }
        }
      }
      BOOL v86 = v61 < v95;
      saveAndPostNetworkdSettings(v16, v99, int64);
      BOOL v87 = !networkd_settings_get_BOOL((const char *)nw_setting_disable_l4s_aqm);
      id v88 = +[ManagedNetworkSettings sharedMNS];
      long long v89 = [v88 queue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __nwphConfigureRemoteSettings_block_invoke_514;
      block[3] = &__block_descriptor_56_e5_v8__0l;
      block[4] = v86;
      block[5] = v93 < v101;
      block[6] = v87;
      dispatch_async(v89, block);

      goto LABEL_114;
    }
    if (v104 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (id)gLogObj;
      os_log_type_t v14 = v104;
      if (!os_log_type_enabled(v13, v104))
      {
LABEL_26:

        goto LABEL_27;
      }
      *(_DWORD *)int buf = 136446722;
      uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
      __int16 v107 = 2114;
      *(void *)uint64_t v108 = v2;
      *(_WORD *)&v108[8] = 2114;
      uint64_t v109 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
      double v15 = "%{public}s Failed to save networknomicon settings run %{public}@ to \"%{public}@\"";
    }
    else
    {
      if (v103)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (id)gLogObj;
        os_log_type_t v19 = v104;
        BOOL v20 = os_log_type_enabled(v18, v104);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)int buf = 136446978;
            uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
            __int16 v107 = 2114;
            *(void *)uint64_t v108 = v2;
            *(_WORD *)&v108[8] = 2114;
            uint64_t v109 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
            __int16 v110 = 2082;
            unint64_t v111 = (unint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s Failed to save networknomicon settings run %{public}@ to \"%{public}@\", dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          id v10 = (void *)&unk_183D5C000;
          if (!v12) {
            goto LABEL_29;
          }
        }
        else
        {
          if (v20)
          {
            *(_DWORD *)int buf = 136446722;
            uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
            __int16 v107 = 2114;
            *(void *)uint64_t v108 = v2;
            *(_WORD *)&v108[8] = 2114;
            uint64_t v109 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s Failed to save networknomicon settings run %{public}@ to \"%{public}@\", no backtrace", buf, 0x20u);
          }

          id v10 = (void *)&unk_183D5C000;
          if (!v12) {
            goto LABEL_29;
          }
        }
        goto LABEL_28;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (id)gLogObj;
      os_log_type_t v14 = v104;
      if (!os_log_type_enabled(v13, v104)) {
        goto LABEL_26;
      }
      *(_DWORD *)int buf = 136446722;
      uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
      __int16 v107 = 2114;
      *(void *)uint64_t v108 = v2;
      *(_WORD *)&v108[8] = 2114;
      uint64_t v109 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
      double v15 = "%{public}s Failed to save networknomicon settings run %{public}@ to \"%{public}@\", backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0x20u);
    goto LABEL_26;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v16 = (id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136446210;
    uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
    _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s skipping remote settings run", buf, 0xCu);
  }
LABEL_114:
}

void __nwphConfigureRemoteSettings_block_invoke_514(void *a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F1CA60] dictionaryWithContentsOfFile:@"/Library/Preferences/com.apple.networkd.sysctl.plist"];
  if (!v2) {
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  int v3 = [v2 objectForKeyedSubscript:@"net.inet.tcp.accurate_ecn"];
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && [v3 longLongValue] == a1[4])
  {
    int v4 = 0;
  }
  else
  {
    id v5 = [NSNumber numberWithLongLong:a1[4]];
    [v2 setObject:v5 forKeyedSubscript:@"net.inet.tcp.accurate_ecn"];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      double v7 = (void *)a1[4];
      *(_DWORD *)int buf = 136446466;
      int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
      __int16 v37 = 2048;
      id v38 = v7;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s Changing Accurate ECN to %lld", buf, 0x16u);
    }

    int v4 = 1;
  }
  char v8 = [v2 objectForKeyedSubscript:@"net.inet.tcp.l4s"];
  if (!v8 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0) || [v8 longLongValue] != a1[5])
  {
    int v9 = [NSNumber numberWithLongLong:a1[5]];
    [v2 setObject:v9 forKeyedSubscript:@"net.inet.tcp.l4s"];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = (void *)a1[5];
      *(_DWORD *)int buf = 136446466;
      int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
      __int16 v37 = 2048;
      id v38 = v11;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s Changing TCP L4S to %lld", buf, 0x16u);
    }

    int v4 = 1;
  }
  id v12 = [v2 objectForKeyedSubscript:@"net.classq.enable_l4s"];
  if (!v12 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0) || [v12 longLongValue] != a1[6])
  {
    id v13 = [NSNumber numberWithLongLong:a1[6]];
    [v2 setObject:v13 forKeyedSubscript:@"net.classq.enable_l4s"];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      double v15 = (void *)a1[6];
      *(_DWORD *)int buf = 136446466;
      int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
      __int16 v37 = 2048;
      id v38 = v15;
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s Changing L4S AQM enablement to %lld", buf, 0x16u);
    }

    int v4 = 1;
  }
  __int16 v16 = [v2 objectForKeyedSubscript:@"net.classq.fq_codel.fq_enable_pacing"];
  if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && [v16 longLongValue] == a1[6])
  {
    if (!v4) {
      goto LABEL_43;
    }
  }
  else
  {
    id v17 = [NSNumber numberWithLongLong:a1[6]];
    [v2 setObject:v17 forKeyedSubscript:@"net.classq.fq_codel.fq_enable_pacing"];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v19 = (void *)a1[6];
      *(_DWORD *)int buf = 136446466;
      int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
      __int16 v37 = 2048;
      id v38 = v19;
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s Changing L4S AQM Pacing enablement to %lld", buf, 0x16u);
    }
  }
  if (([v2 writeToFile:@"/Library/Preferences/com.apple.networkd.sysctl.plist" atomically:1] & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v20 = (id)gLogObj;
    *(_DWORD *)int buf = 136446722;
    int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
    __int16 v37 = 2114;
    id v38 = v2;
    __int16 v39 = 2114;
    double v40 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
    LODWORD(v32) = 32;
    uint64_t v31 = buf;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v21, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int64_t v22 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_48;
        }
        *(_DWORD *)int buf = 136446722;
        int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v37 = 2114;
        id v38 = v2;
        __int16 v39 = 2114;
        double v40 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        BOOL v24 = "%{public}s Failed to save network settings %{public}@ to \"%{public}@\"";
LABEL_46:
        uint64_t v29 = v22;
        os_log_type_t v30 = v23;
        goto LABEL_47;
      }
      if (!v33)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int64_t v22 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_48;
        }
        *(_DWORD *)int buf = 136446722;
        int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v37 = 2114;
        id v38 = v2;
        __int16 v39 = 2114;
        double v40 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        BOOL v24 = "%{public}s Failed to save network settings %{public}@ to \"%{public}@\", backtrace limit exceeded";
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int64_t v22 = (id)gLogObj;
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (!v27)
        {
LABEL_48:

          if (!v21) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }
        *(_DWORD *)int buf = 136446722;
        int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v37 = 2114;
        id v38 = v2;
        __int16 v39 = 2114;
        double v40 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        BOOL v24 = "%{public}s Failed to save network settings %{public}@ to \"%{public}@\", no backtrace";
        uint64_t v29 = v22;
        os_log_type_t v30 = v26;
LABEL_47:
        _os_log_impl(&dword_1830D4000, v29, v30, v24, buf, 0x20u);
        goto LABEL_48;
      }
      if (v27)
      {
        *(_DWORD *)int buf = 136446978;
        int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v37 = 2114;
        id v38 = v2;
        __int16 v39 = 2114;
        double v40 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        __int16 v41 = 2082;
        uint64_t v42 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v22, v26, "%{public}s Failed to save network settings %{public}@ to \"%{public}@\", dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(backtrace_string);
    }
    if (v21) {
LABEL_41:
    }
      free(v21);
  }
LABEL_42:
  id v28 = +[ManagedNetworkSettings sharedMNS];
  [v28 reloadMNS];

LABEL_43:
}

void __nwphCheckMobileAsset_block_invoke_366(uint64_t a1, unint64_t a2)
{
  uint64_t v664 = *MEMORY[0x1E4F143B8];
  if (a2 < 0xD && ((0x103Fu >> a2) & 1) != 0) {
    int v4 = off_1E523D8D8[a2];
  }
  else {
    int v4 = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Invalid[%lld]", a2);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id *)&unk_1EB267000;
  uint64_t v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int buf = 136446466;
    v657 = "nwphCheckMobileAsset_block_invoke";
    __int16 v658 = 2114;
    uint64_t v659 = (uint64_t)v4;
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s queried mobile asset metadata with res %{public}@", (uint8_t *)&buf, 0x16u);
  }

  if (!a2)
  {
    double v7 = [*(id *)(a1 + 32) results];
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = [v7 count];
      id v10 = *(__CFString **)(a1 + 32);
      id v11 = [(__CFString *)v10 queryParams];
      int buf = 136446978;
      v657 = "nwphCheckMobileAsset_block_invoke";
      __int16 v658 = 2048;
      uint64_t v659 = v9;
      __int16 v660 = 2114;
      v661 = v10;
      __int16 v662 = 2114;
      v663 = v11;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s queried mobile asset metadata got %llu results %{public}@ params %{public}@", (uint8_t *)&buf, 0x2Au);
    }
    id v12 = [MEMORY[0x1E4F1CA60] dictionaryWithContentsOfFile:@"/Library/Preferences/com.apple.networkd.networknomicon.plist"];
    if (!v12) {
      id v12 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    [v12 setObject:0 forKeyedSubscript:@"RandomID"];
    long long v654 = 0u;
    long long v652 = 0u;
    long long v653 = 0u;
    long long v651 = 0u;
    obuint64_t j = v7;
    uint64_t v640 = [obj countByEnumeratingWithState:&v651 objects:v655 count:16];
    if (v640)
    {
      v637 = v4;
      id v13 = 0;
      uint64_t v639 = *(void *)v652;
      while (1)
      {
        uint64_t v14 = 0;
        do
        {
          if (*(void *)v652 != v639) {
            objc_enumerationMutation(obj);
          }
          id v18 = *(id *)(*((void *)&v651 + 1) + 8 * v14);

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v19 = v5[237];
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            int buf = 136446466;
            v657 = "nwphCheckMobileAsset_block_invoke";
            __int16 v658 = 2114;
            uint64_t v659 = (uint64_t)v18;
            _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s Received asset %{public}@", (uint8_t *)&buf, 0x16u);
          }

          id v20 = [v18 attributes];
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v21 = v5[237];
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            int buf = 136446466;
            v657 = "nwphCheckMobileAsset_block_invoke";
            __int16 v658 = 2114;
            uint64_t v659 = (uint64_t)v20;
            _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s Received asset attributes %{public}@", (uint8_t *)&buf, 0x16u);
          }

          uint64_t v22 = [v20 objectForKeyedSubscript:@"NetworknomiconVersion"];
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v23 = v5[237];
          BOOL v24 = v23;
          v643 = (void *)v22;
          uint64_t v641 = v14;
          v642 = v18;
          if (v22)
          {
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              int buf = 136446466;
              v657 = "nwphCheckMobileAsset_block_invoke";
              __int16 v658 = 2114;
              uint64_t v659 = v22;
              _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s Received NetworknomiconVersion \"%{public}@\"", (uint8_t *)&buf, 0x16u);
            }

            BOOL v24 = [v20 objectForKeyedSubscript:@"NetworknomiconECNPercentage"];
            if (v24 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              unint64_t v25 = [v24 longLongValue];
              BOOL v26 = v25 < 0x65;
            }
            else
            {
              BOOL v26 = 0;
              unint64_t v25 = -1;
            }
            BOOL v27 = [v20 objectForKeyedSubscript:@"NetworknomiconPollFrequencySeconds"];
            if (v27)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                uint64_t v28 = [v27 longLongValue];
                if ((unint64_t)(v28 - 3600) < 0x277EF1)
                {
                  uint64_t v29 = [NSNumber numberWithLongLong:v28];
                  [v12 setObject:v29 forKeyedSubscript:@"PollFrequencySeconds"];
                }
              }
            }
            os_log_type_t v30 = [v20 objectForKeyedSubscript:@"NetworknomiconSettingsFrequencySeconds"];
            if (v30)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                uint64_t v31 = [v30 longLongValue];
                if ((unint64_t)(v31 - 3600) < 0x277EF1)
                {
                  uint64_t v32 = [NSNumber numberWithLongLong:v31];
                  [v12 setObject:v32 forKeyedSubscript:@"kNWSettingsKeyFrequencySeconds"];
                }
              }
            }
            if (v26)
            {
              id v33 = +[ManagedNetworkSettings sharedMNS];
              uint32_t v34 = [v33 queue];
              v648[0] = MEMORY[0x1E4F143A8];
              v648[1] = 3221225472;
              v648[2] = __nwphCheckMobileAsset_block_invoke_380;
              v648[3] = &unk_1E52491B0;
              unint64_t v650 = v25;
              id v649 = v12;
              dispatch_async(v34, v648);
            }
            id v5 = (id *)&unk_1EB267000;
          }
          else if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            int buf = 136446466;
            v657 = "nwphCheckMobileAsset_block_invoke";
            __int16 v658 = 2114;
            uint64_t v659 = (uint64_t)v20;
            _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_ERROR, "%{public}s Bad asset attributes %{public}@", (uint8_t *)&buf, 0x16u);
          }

          uint32_t v35 = [v20 objectForKeyedSubscript:@"ActivityRateVersion"];
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v17 = v5[237];
          BOOL v36 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
          if (v35)
          {
            if (v36)
            {
              int buf = 136446466;
              v657 = "nwphCheckMobileAsset_block_invoke";
              __int16 v658 = 2114;
              uint64_t v659 = (uint64_t)v35;
              _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Received ActivityRateVersion \"%{public}@\"", (uint8_t *)&buf, 0x16u);
            }

            id v17 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
            __int16 v37 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "libnetcore");
            id v38 = [v20 objectForKeyedSubscript:v37];
            if (v38
              && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              && ([v38 longLongValue] & 0x8000000000000000) == 0)
            {
              __int16 v39 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_libnetcore];
              [v17 setObject:v38 forKeyedSubscript:v39];

              int v40 = 1;
            }
            else
            {
              int v40 = 0;
            }

            __int16 v41 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "cfnetwork");
            uint64_t v42 = [v20 objectForKeyedSubscript:v41];
            if (v42)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v42 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v43 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cfnetwork];
                [v17 setObject:v42 forKeyedSubscript:v43];

                int v40 = 1;
              }
            }

            uint64_t v44 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "coremedia");
            uint32_t v45 = [v20 objectForKeyedSubscript:v44];
            if (v45)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v45 longLongValue] & 0x8000000000000000) == 0)
              {
                uint32_t v46 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coremedia];
                [v17 setObject:v45 forKeyedSubscript:v46];

                int v40 = 1;
              }
            }

            double v47 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "parsec");
            uint32_t v48 = [v20 objectForKeyedSubscript:v47];
            if (v48)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v48 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v49 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_parsec];
                [v17 setObject:v48 forKeyedSubscript:v49];

                int v40 = 1;
              }
            }

            uint64_t v50 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "siri");
            uint64_t v51 = [v20 objectForKeyedSubscript:v50];
            if (v51)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v51 longLongValue] & 0x8000000000000000) == 0)
              {
                id v52 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_siri];
                [v17 setObject:v51 forKeyedSubscript:v52];

                int v40 = 1;
              }
            }

            id v53 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "webkit");
            char v54 = [v20 objectForKeyedSubscript:v53];
            if (v54)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v54 longLongValue] & 0x8000000000000000) == 0)
              {
                uint32_t v55 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_webkit];
                [v17 setObject:v54 forKeyedSubscript:v55];

                int v40 = 1;
              }
            }

            uint64_t v56 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "coremedia_crabs");
            uint32_t v57 = [v20 objectForKeyedSubscript:v56];
            if (v57)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v57 longLongValue] & 0x8000000000000000) == 0)
              {
                __int16 v58 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coremedia_crabs];
                [v17 setObject:v57 forKeyedSubscript:v58];

                int v40 = 1;
              }
            }

            uint64_t v59 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "coremedia_hls");
            uint64_t v60 = [v20 objectForKeyedSubscript:v59];
            if (v60)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v60 longLongValue] & 0x8000000000000000) == 0)
              {
                uint32_t v61 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coremedia_hls];
                [v17 setObject:v60 forKeyedSubscript:v61];

                int v40 = 1;
              }
            }

            __int16 v62 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "cloudkit");
            int64_t v63 = [v20 objectForKeyedSubscript:v62];
            if (v63)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v63 longLongValue] & 0x8000000000000000) == 0)
              {
                BOOL v64 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cloudkit];
                [v17 setObject:v63 forKeyedSubscript:v64];

                int v40 = 1;
              }
            }

            uint32_t v65 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "mmcs");
            uint32_t v66 = [v20 objectForKeyedSubscript:v65];
            if (v66)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v66 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v67 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_mmcs];
                [v17 setObject:v66 forKeyedSubscript:v67];

                int v40 = 1;
              }
            }

            uint32_t v68 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "mail");
            int v69 = [v20 objectForKeyedSubscript:v68];
            if (v69)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v69 longLongValue] & 0x8000000000000000) == 0)
              {
                uint32_t v70 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_mail];
                [v17 setObject:v69 forKeyedSubscript:v70];

                int v40 = 1;
              }
            }

            uint32_t v71 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "facetime");
            int64_t v72 = [v20 objectForKeyedSubscript:v71];
            if (v72)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v72 longLongValue] & 0x8000000000000000) == 0)
              {
                uint32_t v73 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_facetime];
                [v17 setObject:v72 forKeyedSubscript:v73];

                int v40 = 1;
              }
            }

            uint32_t v74 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "adplatforms");
            int64_t v75 = [v20 objectForKeyedSubscript:v74];
            if (v75)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v75 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v76 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_adplatforms];
                [v17 setObject:v75 forKeyedSubscript:v76];

                int v40 = 1;
              }
            }

            __uint64_t v77 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "corelocation");
            char v78 = [v20 objectForKeyedSubscript:v77];
            if (v78)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v78 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v79 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_corelocation];
                [v17 setObject:v78 forKeyedSubscript:v79];

                int v40 = 1;
              }
            }

            unint64_t v80 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "airplay_sender");
            BOOL v81 = [v20 objectForKeyedSubscript:v80];
            if (v81)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v81 longLongValue] & 0x8000000000000000) == 0)
              {
                BOOL v82 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_airplay_sender];
                [v17 setObject:v81 forKeyedSubscript:v82];

                int v40 = 1;
              }
            }

            os_log_type_t v83 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "airplay_receiver");
            uint64_t v84 = [v20 objectForKeyedSubscript:v83];
            if (v84)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v84 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v85 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_airplay_receiver];
                [v17 setObject:v84 forKeyedSubscript:v85];

                int v40 = 1;
              }
            }

            BOOL v86 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "maps");
            BOOL v87 = [v20 objectForKeyedSubscript:v86];
            if (v87)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v87 longLongValue] & 0x8000000000000000) == 0)
              {
                id v88 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_maps];
                [v17 setObject:v87 forKeyedSubscript:v88];

                int v40 = 1;
              }
            }

            long long v89 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "maps_internal");
            long long v90 = [v20 objectForKeyedSubscript:v89];
            if (v90)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v90 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v91 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_maps_internal];
                [v17 setObject:v90 forKeyedSubscript:v91];

                int v40 = 1;
              }
            }

            long long v92 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "maps_external");
            uint32_t v93 = [v20 objectForKeyedSubscript:v92];
            if (v93)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v93 longLongValue] & 0x8000000000000000) == 0)
              {
                os_log_type_t v94 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_maps_external];
                [v17 setObject:v93 forKeyedSubscript:v94];

                int v40 = 1;
              }
            }

            uint32_t v95 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "network_speed_test");
            long long v96 = [v20 objectForKeyedSubscript:v95];
            if (v96)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v96 longLongValue] & 0x8000000000000000) == 0)
              {
                long long v97 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_speed_test];
                [v17 setObject:v96 forKeyedSubscript:v97];

                int v40 = 1;
              }
            }

            unint64_t v98 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "captive");
            id v99 = [v20 objectForKeyedSubscript:v98];
            if (v99)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v99 longLongValue] & 0x8000000000000000) == 0)
              {
                uint32_t v100 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_captive];
                [v17 setObject:v99 forKeyedSubscript:v100];

                int v40 = 1;
              }
            }

            uint32_t v101 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "safe_browsing");
            uint64_t v102 = [v20 objectForKeyedSubscript:v101];
            if (v102)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v102 longLongValue] & 0x8000000000000000) == 0)
              {
                char v103 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_safe_browsing];
                [v17 setObject:v102 forKeyedSubscript:v103];

                int v40 = 1;
              }
            }

            os_log_type_t v104 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "dns");
            uint64_t v105 = [v20 objectForKeyedSubscript:v104];
            if (v105)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v105 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v106 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_dns];
                [v17 setObject:v105 forKeyedSubscript:v106];

                int v40 = 1;
              }
            }

            __int16 v107 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "music");
            uint64_t v108 = [v20 objectForKeyedSubscript:v107];
            if (v108)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v108 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v109 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_music];
                [v17 setObject:v108 forKeyedSubscript:v109];

                int v40 = 1;
              }
            }

            __int16 v110 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "battery");
            unint64_t v111 = [v20 objectForKeyedSubscript:v110];
            if (v111)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v111 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v112 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_battery];
                [v17 setObject:v111 forKeyedSubscript:v112];

                int v40 = 1;
              }
            }

            uint64_t v113 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "cloud_media_services");
            uint64_t v114 = [v20 objectForKeyedSubscript:v113];
            if (v114)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v114 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v115 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cloud_media_services];
                [v17 setObject:v114 forKeyedSubscript:v115];

                int v40 = 1;
              }
            }

            uint64_t v116 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "avconference");
            uint64_t v117 = [v20 objectForKeyedSubscript:v116];
            if (v117)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v117 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v118 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_avconference];
                [v17 setObject:v117 forKeyedSubscript:v118];

                int v40 = 1;
              }
            }

            uint64_t v119 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "appstore");
            uint64_t v120 = [v20 objectForKeyedSubscript:v119];
            if (v120)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v120 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v121 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_appstore];
                [v17 setObject:v120 forKeyedSubscript:v121];

                int v40 = 1;
              }
            }

            uint64_t v122 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "telephony_service");
            uint64_t v123 = [v20 objectForKeyedSubscript:v122];
            if (v123)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v123 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v124 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_telephony_service];
                [v17 setObject:v123 forKeyedSubscript:v124];

                int v40 = 1;
              }
            }

            uint64_t v125 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "network_experiments");
            uint64_t v126 = [v20 objectForKeyedSubscript:v125];
            if (v126)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v126 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v127 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_experiments];
                [v17 setObject:v126 forKeyedSubscript:v127];

                int v40 = 1;
              }
            }

            unint64_t v128 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "network_perf");
            char v129 = [v20 objectForKeyedSubscript:v128];
            if (v129)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v129 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v130 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_perf];
                [v17 setObject:v129 forKeyedSubscript:v130];

                int v40 = 1;
              }
            }

            uint64_t v131 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "hotspot");
            unint64_t v132 = [v20 objectForKeyedSubscript:v131];
            if (v132)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v132 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v133 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_hotspot];
                [v17 setObject:v132 forKeyedSubscript:v133];

                int v40 = 1;
              }
            }

            int v134 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "weather");
            uint64_t v135 = [v20 objectForKeyedSubscript:v134];
            if (v135)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v135 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v136 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_weather];
                [v17 setObject:v135 forKeyedSubscript:v136];

                int v40 = 1;
              }
            }

            unint64_t v137 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "coordination");
            int v138 = [v20 objectForKeyedSubscript:v137];
            if (v138)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v138 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v139 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coordination];
                [v17 setObject:v138 forKeyedSubscript:v139];

                int v40 = 1;
              }
            }

            unint64_t v140 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "appstore_jet");
            unint64_t v141 = [v20 objectForKeyedSubscript:v140];
            if (v141)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v141 longLongValue] & 0x8000000000000000) == 0)
              {
                int v142 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_appstore_jet];
                [v17 setObject:v141 forKeyedSubscript:v142];

                int v40 = 1;
              }
            }

            uint64_t v143 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "soundboard");
            unint64_t v144 = [v20 objectForKeyedSubscript:v143];
            if (v144)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v144 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v145 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_soundboard];
                [v17 setObject:v144 forKeyedSubscript:v145];

                int v40 = 1;
              }
            }

            int v146 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "aea");
            uint64_t v147 = [v20 objectForKeyedSubscript:v146];
            if (v147)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v147 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v148 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_aea];
                [v17 setObject:v147 forKeyedSubscript:v148];

                int v40 = 1;
              }
            }

            unint64_t v149 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "homekit");
            char v150 = [v20 objectForKeyedSubscript:v149];
            if (v150)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v150 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v151 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_homekit];
                [v17 setObject:v150 forKeyedSubscript:v151];

                int v40 = 1;
              }
            }

            uint64_t v152 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "wifi");
            unint64_t v153 = [v20 objectForKeyedSubscript:v152];
            if (v153)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v153 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v154 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_wifi];
                [v17 setObject:v153 forKeyedSubscript:v154];

                int v40 = 1;
              }
            }

            int v155 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "app_launch");
            uint64_t v156 = [v20 objectForKeyedSubscript:v155];
            if (v156)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v156 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v157 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_app_launch];
                [v17 setObject:v156 forKeyedSubscript:v157];

                int v40 = 1;
              }
            }

            unint64_t v158 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "ams");
            int v159 = [v20 objectForKeyedSubscript:v158];
            if (v159)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v159 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v160 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_ams];
                [v17 setObject:v159 forKeyedSubscript:v160];

                int v40 = 1;
              }
            }

            unint64_t v161 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "reve");
            unint64_t v162 = [v20 objectForKeyedSubscript:v161];
            if (v162)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v162 longLongValue] & 0x8000000000000000) == 0)
              {
                int v163 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_reve];
                [v17 setObject:v162 forKeyedSubscript:v163];

                int v40 = 1;
              }
            }

            uint64_t v164 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "network_quality");
            unint64_t v165 = [v20 objectForKeyedSubscript:v164];
            if (v165)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v165 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v166 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_quality];
                [v17 setObject:v165 forKeyedSubscript:v166];

                int v40 = 1;
              }
            }

            int v167 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "news");
            v168 = [v20 objectForKeyedSubscript:v167];
            if (v168)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v168 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v169 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_news];
                [v17 setObject:v168 forKeyedSubscript:v169];

                int v40 = 1;
              }
            }

            unint64_t v170 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "cloud_compute");
            unint64_t v171 = [v20 objectForKeyedSubscript:v170];
            if (v171)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v171 longLongValue] & 0x8000000000000000) == 0)
              {
                int v172 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cloud_compute];
                [v17 setObject:v171 forKeyedSubscript:v172];

                int v40 = 1;
              }
            }

            uint64_t v173 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "push");
            unint64_t v174 = [v20 objectForKeyedSubscript:v173];
            if (v174)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v174 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v175 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_push];
                [v17 setObject:v174 forKeyedSubscript:v175];

                int v40 = 1;
              }
            }

            int v176 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "nw_actor_system");
            uint64_t v177 = [v20 objectForKeyedSubscript:v176];
            if (v177)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v177 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v178 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_nw_actor_system];
                [v17 setObject:v177 forKeyedSubscript:v178];

                int v40 = 1;
              }
            }

            unint64_t v179 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "app_intents_services");
            int v180 = [v20 objectForKeyedSubscript:v179];
            if (v180)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v180 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v181 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_app_intents_services];
                [v17 setObject:v180 forKeyedSubscript:v181];

                int v40 = 1;
              }
            }

            unint64_t v182 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "stocks");
            unint64_t v183 = [v20 objectForKeyedSubscript:v182];
            if (v183)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v183 longLongValue] & 0x8000000000000000) == 0)
              {
                int v184 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_stocks];
                [v17 setObject:v183 forKeyedSubscript:v184];

                int v40 = 1;
              }
            }

            uint64_t v185 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "tv_app");
            unint64_t v186 = [v20 objectForKeyedSubscript:v185];
            if (v186)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v186 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v187 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_tv_app];
                [v17 setObject:v186 forKeyedSubscript:v187];

                int v40 = 1;
              }
            }

            int v188 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_num_%s_%s", "ios", "rapport");
            uint64_t v189 = [v20 objectForKeyedSubscript:v188];
            if (v189)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v189 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v190 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_rapport];
                [v17 setObject:v189 forKeyedSubscript:v190];

                int v40 = 1;
              }
            }

            unint64_t v191 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "libnetcore");
            int v192 = [v20 objectForKeyedSubscript:v191];
            if (v192)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v192 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v193 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_libnetcore];
                [v17 setObject:v192 forKeyedSubscript:v193];

                int v40 = 1;
              }
            }

            unint64_t v194 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "cfnetwork");
            unint64_t v195 = [v20 objectForKeyedSubscript:v194];
            if (v195)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v195 longLongValue] & 0x8000000000000000) == 0)
              {
                int v196 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cfnetwork];
                [v17 setObject:v195 forKeyedSubscript:v196];

                int v40 = 1;
              }
            }

            uint64_t v197 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "coremedia");
            unint64_t v198 = [v20 objectForKeyedSubscript:v197];
            if (v198)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v198 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v199 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coremedia];
                [v17 setObject:v198 forKeyedSubscript:v199];

                int v40 = 1;
              }
            }

            int v200 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "parsec");
            uint64_t v201 = [v20 objectForKeyedSubscript:v200];
            if (v201)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v201 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v202 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_parsec];
                [v17 setObject:v201 forKeyedSubscript:v202];

                int v40 = 1;
              }
            }

            unint64_t v203 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "siri");
            uint64_t v204 = [v20 objectForKeyedSubscript:v203];
            if (v204)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v204 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v205 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_siri];
                [v17 setObject:v204 forKeyedSubscript:v205];

                int v40 = 1;
              }
            }

            unint64_t v206 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "webkit");
            unint64_t v207 = [v20 objectForKeyedSubscript:v206];
            if (v207)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v207 longLongValue] & 0x8000000000000000) == 0)
              {
                int v208 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_webkit];
                [v17 setObject:v207 forKeyedSubscript:v208];

                int v40 = 1;
              }
            }

            uint64_t v209 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "coremedia_crabs");
            unint64_t v210 = [v20 objectForKeyedSubscript:v209];
            if (v210)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v210 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v211 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coremedia_crabs];
                [v17 setObject:v210 forKeyedSubscript:v211];

                int v40 = 1;
              }
            }

            int v212 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "coremedia_hls");
            uint64_t v213 = [v20 objectForKeyedSubscript:v212];
            if (v213)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v213 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v214 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coremedia_hls];
                [v17 setObject:v213 forKeyedSubscript:v214];

                int v40 = 1;
              }
            }

            unint64_t v215 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "cloudkit");
            int v216 = [v20 objectForKeyedSubscript:v215];
            if (v216)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v216 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v217 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cloudkit];
                [v17 setObject:v216 forKeyedSubscript:v217];

                int v40 = 1;
              }
            }

            unint64_t v218 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "mmcs");
            unint64_t v219 = [v20 objectForKeyedSubscript:v218];
            if (v219)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v219 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v220 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_mmcs];
                [v17 setObject:v219 forKeyedSubscript:v220];

                int v40 = 1;
              }
            }

            uint64_t v221 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "mail");
            unint64_t v222 = [v20 objectForKeyedSubscript:v221];
            if (v222)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v222 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v223 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_mail];
                [v17 setObject:v222 forKeyedSubscript:v223];

                int v40 = 1;
              }
            }

            int v224 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "facetime");
            uint64_t v225 = [v20 objectForKeyedSubscript:v224];
            if (v225)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v225 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v226 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_facetime];
                [v17 setObject:v225 forKeyedSubscript:v226];

                int v40 = 1;
              }
            }

            unint64_t v227 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "adplatforms");
            int v228 = [v20 objectForKeyedSubscript:v227];
            if (v228)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v228 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v229 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_adplatforms];
                [v17 setObject:v228 forKeyedSubscript:v229];

                int v40 = 1;
              }
            }

            unint64_t v230 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "corelocation");
            unint64_t v231 = [v20 objectForKeyedSubscript:v230];
            if (v231)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v231 longLongValue] & 0x8000000000000000) == 0)
              {
                int v232 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_corelocation];
                [v17 setObject:v231 forKeyedSubscript:v232];

                int v40 = 1;
              }
            }

            uint64_t v233 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "airplay_sender");
            unint64_t v234 = [v20 objectForKeyedSubscript:v233];
            if (v234)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v234 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v235 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_airplay_sender];
                [v17 setObject:v234 forKeyedSubscript:v235];

                int v40 = 1;
              }
            }

            uint64_t v236 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "airplay_receiver");
            uint64_t v237 = [v20 objectForKeyedSubscript:v236];
            if (v237)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v237 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v238 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_airplay_receiver];
                [v17 setObject:v237 forKeyedSubscript:v238];

                int v40 = 1;
              }
            }

            unint64_t v239 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "maps");
            int v240 = [v20 objectForKeyedSubscript:v239];
            if (v240)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v240 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v241 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_maps];
                [v17 setObject:v240 forKeyedSubscript:v241];

                int v40 = 1;
              }
            }

            unint64_t v242 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "maps_internal");
            unint64_t v243 = [v20 objectForKeyedSubscript:v242];
            if (v243)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v243 longLongValue] & 0x8000000000000000) == 0)
              {
                int v244 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_maps_internal];
                [v17 setObject:v243 forKeyedSubscript:v244];

                int v40 = 1;
              }
            }

            uint64_t v245 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "maps_external");
            unint64_t v246 = [v20 objectForKeyedSubscript:v245];
            if (v246)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v246 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v247 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_maps_external];
                [v17 setObject:v246 forKeyedSubscript:v247];

                int v40 = 1;
              }
            }

            int v248 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "network_speed_test");
            uint64_t v249 = [v20 objectForKeyedSubscript:v248];
            if (v249)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v249 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v250 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_speed_test];
                [v17 setObject:v249 forKeyedSubscript:v250];

                int v40 = 1;
              }
            }

            unint64_t v251 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "captive");
            uint64_t v252 = [v20 objectForKeyedSubscript:v251];
            if (v252)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v252 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v253 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_captive];
                [v17 setObject:v252 forKeyedSubscript:v253];

                int v40 = 1;
              }
            }

            unint64_t v254 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "safe_browsing");
            unint64_t v255 = [v20 objectForKeyedSubscript:v254];
            if (v255)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v255 longLongValue] & 0x8000000000000000) == 0)
              {
                int v256 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_safe_browsing];
                [v17 setObject:v255 forKeyedSubscript:v256];

                int v40 = 1;
              }
            }

            uint64_t v257 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "dns");
            unint64_t v258 = [v20 objectForKeyedSubscript:v257];
            if (v258)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v258 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v259 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_dns];
                [v17 setObject:v258 forKeyedSubscript:v259];

                int v40 = 1;
              }
            }

            int v260 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "music");
            uint64_t v261 = [v20 objectForKeyedSubscript:v260];
            if (v261)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v261 longLongValue] & 0x8000000000000000) == 0)
              {
                unint64_t v262 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_music];
                [v17 setObject:v261 forKeyedSubscript:v262];

                int v40 = 1;
              }
            }

            unint64_t v263 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "battery");
            int v264 = [v20 objectForKeyedSubscript:v263];
            if (v264)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v264 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v265 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_battery];
                [v17 setObject:v264 forKeyedSubscript:v265];

                int v40 = 1;
              }
            }

            unint64_t v266 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "cloud_media_services");
            unint64_t v267 = [v20 objectForKeyedSubscript:v266];
            if (v267)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v267 longLongValue] & 0x8000000000000000) == 0)
              {
                uint64_t v268 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cloud_media_services];
                [v17 setObject:v267 forKeyedSubscript:v268];

                int v40 = 1;
              }
            }

            v269 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "avconference");
            v270 = [v20 objectForKeyedSubscript:v269];
            if (v270)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v270 longLongValue] & 0x8000000000000000) == 0)
              {
                v271 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_avconference];
                [v17 setObject:v270 forKeyedSubscript:v271];

                int v40 = 1;
              }
            }

            v272 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "appstore");
            v273 = [v20 objectForKeyedSubscript:v272];
            if (v273)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v273 longLongValue] & 0x8000000000000000) == 0)
              {
                v274 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_appstore];
                [v17 setObject:v273 forKeyedSubscript:v274];

                int v40 = 1;
              }
            }

            v275 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "telephony_service");
            v276 = [v20 objectForKeyedSubscript:v275];
            if (v276)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v276 longLongValue] & 0x8000000000000000) == 0)
              {
                v277 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_telephony_service];
                [v17 setObject:v276 forKeyedSubscript:v277];

                int v40 = 1;
              }
            }

            v278 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "network_experiments");
            v279 = [v20 objectForKeyedSubscript:v278];
            if (v279)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v279 longLongValue] & 0x8000000000000000) == 0)
              {
                v280 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_experiments];
                [v17 setObject:v279 forKeyedSubscript:v280];

                int v40 = 1;
              }
            }

            v281 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "network_perf");
            v282 = [v20 objectForKeyedSubscript:v281];
            if (v282)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v282 longLongValue] & 0x8000000000000000) == 0)
              {
                v283 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_perf];
                [v17 setObject:v282 forKeyedSubscript:v283];

                int v40 = 1;
              }
            }

            v284 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "hotspot");
            v285 = [v20 objectForKeyedSubscript:v284];
            if (v285)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v285 longLongValue] & 0x8000000000000000) == 0)
              {
                v286 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_hotspot];
                [v17 setObject:v285 forKeyedSubscript:v286];

                int v40 = 1;
              }
            }

            v287 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "weather");
            v288 = [v20 objectForKeyedSubscript:v287];
            if (v288)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v288 longLongValue] & 0x8000000000000000) == 0)
              {
                v289 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_weather];
                [v17 setObject:v288 forKeyedSubscript:v289];

                int v40 = 1;
              }
            }

            v290 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "coordination");
            v291 = [v20 objectForKeyedSubscript:v290];
            if (v291)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v291 longLongValue] & 0x8000000000000000) == 0)
              {
                v292 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coordination];
                [v17 setObject:v291 forKeyedSubscript:v292];

                int v40 = 1;
              }
            }

            v293 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "appstore_jet");
            v294 = [v20 objectForKeyedSubscript:v293];
            if (v294)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v294 longLongValue] & 0x8000000000000000) == 0)
              {
                v295 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_appstore_jet];
                [v17 setObject:v294 forKeyedSubscript:v295];

                int v40 = 1;
              }
            }

            v296 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "soundboard");
            v297 = [v20 objectForKeyedSubscript:v296];
            if (v297)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v297 longLongValue] & 0x8000000000000000) == 0)
              {
                v298 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_soundboard];
                [v17 setObject:v297 forKeyedSubscript:v298];

                int v40 = 1;
              }
            }

            v299 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "aea");
            v300 = [v20 objectForKeyedSubscript:v299];
            if (v300)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v300 longLongValue] & 0x8000000000000000) == 0)
              {
                v301 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_aea];
                [v17 setObject:v300 forKeyedSubscript:v301];

                int v40 = 1;
              }
            }

            v302 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "homekit");
            v303 = [v20 objectForKeyedSubscript:v302];
            if (v303)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v303 longLongValue] & 0x8000000000000000) == 0)
              {
                v304 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_homekit];
                [v17 setObject:v303 forKeyedSubscript:v304];

                int v40 = 1;
              }
            }

            v305 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "wifi");
            v306 = [v20 objectForKeyedSubscript:v305];
            if (v306)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v306 longLongValue] & 0x8000000000000000) == 0)
              {
                v307 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_wifi];
                [v17 setObject:v306 forKeyedSubscript:v307];

                int v40 = 1;
              }
            }

            v308 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "app_launch");
            v309 = [v20 objectForKeyedSubscript:v308];
            if (v309)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v309 longLongValue] & 0x8000000000000000) == 0)
              {
                v310 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_app_launch];
                [v17 setObject:v309 forKeyedSubscript:v310];

                int v40 = 1;
              }
            }

            v311 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "ams");
            v312 = [v20 objectForKeyedSubscript:v311];
            if (v312)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v312 longLongValue] & 0x8000000000000000) == 0)
              {
                v313 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_ams];
                [v17 setObject:v312 forKeyedSubscript:v313];

                int v40 = 1;
              }
            }

            v314 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "reve");
            v315 = [v20 objectForKeyedSubscript:v314];
            if (v315)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v315 longLongValue] & 0x8000000000000000) == 0)
              {
                v316 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_reve];
                [v17 setObject:v315 forKeyedSubscript:v316];

                int v40 = 1;
              }
            }

            v317 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "network_quality");
            v318 = [v20 objectForKeyedSubscript:v317];
            if (v318)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v318 longLongValue] & 0x8000000000000000) == 0)
              {
                v319 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_quality];
                [v17 setObject:v318 forKeyedSubscript:v319];

                int v40 = 1;
              }
            }

            v320 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "news");
            v321 = [v20 objectForKeyedSubscript:v320];
            if (v321)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v321 longLongValue] & 0x8000000000000000) == 0)
              {
                v322 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_news];
                [v17 setObject:v321 forKeyedSubscript:v322];

                int v40 = 1;
              }
            }

            v323 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "cloud_compute");
            v324 = [v20 objectForKeyedSubscript:v323];
            if (v324)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v324 longLongValue] & 0x8000000000000000) == 0)
              {
                v325 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cloud_compute];
                [v17 setObject:v324 forKeyedSubscript:v325];

                int v40 = 1;
              }
            }

            v326 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "push");
            v327 = [v20 objectForKeyedSubscript:v326];
            if (v327)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v327 longLongValue] & 0x8000000000000000) == 0)
              {
                v328 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_push];
                [v17 setObject:v327 forKeyedSubscript:v328];

                int v40 = 1;
              }
            }

            v329 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "nw_actor_system");
            v330 = [v20 objectForKeyedSubscript:v329];
            if (v330)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v330 longLongValue] & 0x8000000000000000) == 0)
              {
                v331 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_nw_actor_system];
                [v17 setObject:v330 forKeyedSubscript:v331];

                int v40 = 1;
              }
            }

            v332 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "app_intents_services");
            v333 = [v20 objectForKeyedSubscript:v332];
            if (v333)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v333 longLongValue] & 0x8000000000000000) == 0)
              {
                v334 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_app_intents_services];
                [v17 setObject:v333 forKeyedSubscript:v334];

                int v40 = 1;
              }
            }

            v335 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "stocks");
            v336 = [v20 objectForKeyedSubscript:v335];
            if (v336)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v336 longLongValue] & 0x8000000000000000) == 0)
              {
                v337 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_stocks];
                [v17 setObject:v336 forKeyedSubscript:v337];

                int v40 = 1;
              }
            }

            v338 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "tv_app");
            v339 = [v20 objectForKeyedSubscript:v338];
            if (v339)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v339 longLongValue] & 0x8000000000000000) == 0)
              {
                v340 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_tv_app];
                [v17 setObject:v339 forKeyedSubscript:v340];

                int v40 = 1;
              }
            }

            v341 = objc_msgSend([NSString alloc], "initWithFormat:", @"activity_rate_den_%s_%s", "ios", "rapport");
            v342 = [v20 objectForKeyedSubscript:v341];
            if (v342)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v342 longLongValue] & 0x8000000000000000) == 0)
              {
                v343 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_rapport];
                [v17 setObject:v342 forKeyedSubscript:v343];

                int v40 = 1;
              }
            }

            v344 = [NSString stringWithUTF8String:nw_setting_activity_report_destination];
            v345 = [v20 objectForKeyedSubscript:v344];

            if (v345)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v346 = [NSString stringWithUTF8String:nw_setting_activity_report_destination];
                [v17 setObject:v345 forKeyedSubscript:v346];

                int v40 = 1;
              }
            }

            id v347 = [NSString alloc];
            v348 = objc_msgSend(v347, "initWithFormat:", @"%s_%s", nw_setting_activity_default_numerator_old1, "ios");
            v349 = [v20 objectForKeyedSubscript:v348];
            if (v349)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v350 = [NSString stringWithUTF8String:nw_setting_activity_default_numerator_old1];
                [v17 setObject:v349 forKeyedSubscript:v350];

                int v40 = 1;
              }
            }

            id v351 = [NSString alloc];
            v352 = objc_msgSend(v351, "initWithFormat:", @"%s_%s", nw_setting_activity_default_denominator_old1, "ios");
            v353 = [v20 objectForKeyedSubscript:v352];
            if (v353)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v354 = [NSString stringWithUTF8String:nw_setting_activity_default_denominator_old1];
                [v17 setObject:v353 forKeyedSubscript:v354];

                int v40 = 1;
              }
            }

            id v355 = [NSString alloc];
            v356 = objc_msgSend(v355, "initWithFormat:", @"%s_%s", nw_setting_activity_default_numerator, "ios");
            v357 = [v20 objectForKeyedSubscript:v356];
            if (v357)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v358 = [NSString stringWithUTF8String:nw_setting_activity_default_numerator];
                [v17 setObject:v357 forKeyedSubscript:v358];

                int v40 = 1;
              }
            }

            id v359 = [NSString alloc];
            v360 = objc_msgSend(v359, "initWithFormat:", @"%s_%s", nw_setting_activity_default_denominator, "ios");
            v361 = [v20 objectForKeyedSubscript:v360];
            if (v361)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v362 = [NSString stringWithUTF8String:nw_setting_activity_default_denominator];
                [v17 setObject:v361 forKeyedSubscript:v362];

                int v40 = 1;
              }
            }

            id v363 = [NSString alloc];
            v364 = objc_msgSend(v363, "initWithFormat:", @"%s_%s", nw_setting_statistics_report_numerator, "ios");
            v365 = [v20 objectForKeyedSubscript:v364];
            if (v365)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v366 = [NSString stringWithUTF8String:nw_setting_statistics_report_numerator];
                [v17 setObject:v365 forKeyedSubscript:v366];

                int v40 = 1;
              }
            }

            id v367 = [NSString alloc];
            v368 = objc_msgSend(v367, "initWithFormat:", @"%s_%s", nw_setting_statistics_report_denominator, "ios");
            v369 = [v20 objectForKeyedSubscript:v368];
            if (v369)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v370 = [NSString stringWithUTF8String:nw_setting_statistics_report_denominator];
                [v17 setObject:v369 forKeyedSubscript:v370];

                int v40 = 1;
              }
            }

            id v371 = [NSString alloc];
            v372 = objc_msgSend(v371, "initWithFormat:", @"%s_%s", nw_setting_disable_svcb, "ios");
            v373 = [v20 objectForKeyedSubscript:v372];
            if (v373)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v374 = [NSString stringWithUTF8String:nw_setting_disable_svcb];
                [v17 setObject:v373 forKeyedSubscript:v374];

                int v40 = 1;
              }
            }

            id v375 = [NSString alloc];
            v376 = objc_msgSend(v375, "initWithFormat:", @"%s_%s", nw_setting_disable_svcb_router, "ios");
            v377 = [v20 objectForKeyedSubscript:v376];
            if (v377)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v378 = [NSString stringWithUTF8String:nw_setting_disable_svcb_router];
                [v17 setObject:v377 forKeyedSubscript:v378];

                int v40 = 1;
              }
            }

            id v379 = [NSString alloc];
            v380 = objc_msgSend(v379, "initWithFormat:", @"%s_%s", nw_setting_activity_elevated_numerator, "ios");
            v381 = [v20 objectForKeyedSubscript:v380];
            if (v381)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v382 = [NSString stringWithUTF8String:nw_setting_activity_elevated_numerator];
                [v17 setObject:v381 forKeyedSubscript:v382];

                int v40 = 1;
              }
            }

            id v383 = [NSString alloc];
            v384 = objc_msgSend(v383, "initWithFormat:", @"%s_%s", nw_setting_activity_elevated_denominator, "ios");
            v385 = [v20 objectForKeyedSubscript:v384];
            if (v385)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v386 = [NSString stringWithUTF8String:nw_setting_activity_elevated_denominator];
                [v17 setObject:v385 forKeyedSubscript:v386];

                int v40 = 1;
              }
            }

            id v387 = [NSString alloc];
            v388 = objc_msgSend(v387, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old1, "ios");
            v389 = [v20 objectForKeyedSubscript:v388];
            if (v389)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v390 = [NSString stringWithUTF8String:nw_setting_disable_quic_old1];
                [v17 setObject:v389 forKeyedSubscript:v390];

                int v40 = 1;
              }
            }

            id v391 = [NSString alloc];
            v392 = objc_msgSend(v391, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_race_old1, "ios");
            v393 = [v20 objectForKeyedSubscript:v392];
            if (v393)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v394 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old1];
                [v17 setObject:v393 forKeyedSubscript:v394];

                int v40 = 1;
              }
            }

            id v395 = [NSString alloc];
            v396 = objc_msgSend(v395, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_numerator_old1, "ios");
            v397 = [v20 objectForKeyedSubscript:v396];
            if (v397)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v398 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old1];
                [v17 setObject:v397 forKeyedSubscript:v398];

                int v40 = 1;
              }
            }

            id v399 = [NSString alloc];
            v400 = objc_msgSend(v399, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_denominator_old1, "ios");
            v401 = [v20 objectForKeyedSubscript:v400];
            if (v401)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v402 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old1];
                [v17 setObject:v401 forKeyedSubscript:v402];

                int v40 = 1;
              }
            }

            id v403 = [NSString alloc];
            v404 = objc_msgSend(v403, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old2, "ios");
            v405 = [v20 objectForKeyedSubscript:v404];
            if (v405)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v406 = [NSString stringWithUTF8String:nw_setting_disable_quic_old2];
                [v17 setObject:v405 forKeyedSubscript:v406];

                int v40 = 1;
              }
            }

            id v407 = [NSString alloc];
            v408 = objc_msgSend(v407, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_race_old2, "ios");
            v409 = [v20 objectForKeyedSubscript:v408];
            if (v409)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v410 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old2];
                [v17 setObject:v409 forKeyedSubscript:v410];

                int v40 = 1;
              }
            }

            id v411 = [NSString alloc];
            v412 = objc_msgSend(v411, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_numerator_old2, "ios");
            v413 = [v20 objectForKeyedSubscript:v412];
            if (v413)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v414 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old2];
                [v17 setObject:v413 forKeyedSubscript:v414];

                int v40 = 1;
              }
            }

            id v415 = [NSString alloc];
            v416 = objc_msgSend(v415, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_denominator_old2, "ios");
            v417 = [v20 objectForKeyedSubscript:v416];
            if (v417)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v418 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old2];
                [v17 setObject:v417 forKeyedSubscript:v418];

                int v40 = 1;
              }
            }

            id v419 = [NSString alloc];
            v420 = objc_msgSend(v419, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old3, "ios");
            v421 = [v20 objectForKeyedSubscript:v420];
            if (v421)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v422 = [NSString stringWithUTF8String:nw_setting_disable_quic_old3];
                [v17 setObject:v421 forKeyedSubscript:v422];

                int v40 = 1;
              }
            }

            id v423 = [NSString alloc];
            v424 = objc_msgSend(v423, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_race_old3, "ios");
            v425 = [v20 objectForKeyedSubscript:v424];
            if (v425)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v426 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old3];
                [v17 setObject:v425 forKeyedSubscript:v426];

                int v40 = 1;
              }
            }

            id v427 = [NSString alloc];
            v428 = objc_msgSend(v427, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_numerator_old3, "ios");
            v429 = [v20 objectForKeyedSubscript:v428];
            if (v429)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v430 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old3];
                [v17 setObject:v429 forKeyedSubscript:v430];

                int v40 = 1;
              }
            }

            id v431 = [NSString alloc];
            v432 = objc_msgSend(v431, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_denominator_old3, "ios");
            v433 = [v20 objectForKeyedSubscript:v432];
            if (v433)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v434 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old3];
                [v17 setObject:v433 forKeyedSubscript:v434];

                int v40 = 1;
              }
            }

            id v435 = [NSString alloc];
            v436 = objc_msgSend(v435, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old4, "ios");
            v437 = [v20 objectForKeyedSubscript:v436];
            if (v437)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v438 = [NSString stringWithUTF8String:nw_setting_disable_quic_old4];
                [v17 setObject:v437 forKeyedSubscript:v438];

                int v40 = 1;
              }
            }

            id v439 = [NSString alloc];
            v440 = objc_msgSend(v439, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_race_old4, "ios");
            v441 = [v20 objectForKeyedSubscript:v440];
            if (v441)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v442 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old4];
                [v17 setObject:v441 forKeyedSubscript:v442];

                int v40 = 1;
              }
            }

            id v443 = [NSString alloc];
            v444 = objc_msgSend(v443, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_numerator_old4, "ios");
            v445 = [v20 objectForKeyedSubscript:v444];
            if (v445)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v446 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old4];
                [v17 setObject:v445 forKeyedSubscript:v446];

                int v40 = 1;
              }
            }

            id v447 = [NSString alloc];
            v448 = objc_msgSend(v447, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_denominator_old4, "ios");
            v449 = [v20 objectForKeyedSubscript:v448];
            if (v449)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v450 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old4];
                [v17 setObject:v449 forKeyedSubscript:v450];

                int v40 = 1;
              }
            }

            id v451 = [NSString alloc];
            v452 = objc_msgSend(v451, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old5, "ios");
            v453 = [v20 objectForKeyedSubscript:v452];
            if (v453)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v454 = [NSString stringWithUTF8String:nw_setting_disable_quic_old5];
                [v17 setObject:v453 forKeyedSubscript:v454];

                int v40 = 1;
              }
            }

            id v455 = [NSString alloc];
            v456 = objc_msgSend(v455, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_race_old5, "ios");
            v457 = [v20 objectForKeyedSubscript:v456];
            if (v457)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v458 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old5];
                [v17 setObject:v457 forKeyedSubscript:v458];

                int v40 = 1;
              }
            }

            id v459 = [NSString alloc];
            v460 = objc_msgSend(v459, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_numerator_old5, "ios");
            v461 = [v20 objectForKeyedSubscript:v460];
            if (v461)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v462 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old5];
                [v17 setObject:v461 forKeyedSubscript:v462];

                int v40 = 1;
              }
            }

            id v463 = [NSString alloc];
            v464 = objc_msgSend(v463, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_denominator_old5, "ios");
            v465 = [v20 objectForKeyedSubscript:v464];
            if (v465)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v466 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old5];
                [v17 setObject:v465 forKeyedSubscript:v466];

                int v40 = 1;
              }
            }

            id v467 = [NSString alloc];
            v468 = objc_msgSend(v467, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old6, "ios");
            v469 = [v20 objectForKeyedSubscript:v468];
            if (v469)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v470 = [NSString stringWithUTF8String:nw_setting_disable_quic_old6];
                [v17 setObject:v469 forKeyedSubscript:v470];

                int v40 = 1;
              }
            }

            id v471 = [NSString alloc];
            v472 = objc_msgSend(v471, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_race_old6, "ios");
            v473 = [v20 objectForKeyedSubscript:v472];
            if (v473)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v474 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old6];
                [v17 setObject:v473 forKeyedSubscript:v474];

                int v40 = 1;
              }
            }

            id v475 = [NSString alloc];
            v476 = objc_msgSend(v475, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_numerator_old6, "ios");
            v477 = [v20 objectForKeyedSubscript:v476];
            if (v477)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v478 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old6];
                [v17 setObject:v477 forKeyedSubscript:v478];

                int v40 = 1;
              }
            }

            id v479 = [NSString alloc];
            v480 = objc_msgSend(v479, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_denominator_old6, "ios");
            v481 = [v20 objectForKeyedSubscript:v480];
            if (v481)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v482 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old6];
                [v17 setObject:v481 forKeyedSubscript:v482];

                int v40 = 1;
              }
            }

            id v483 = [NSString alloc];
            v484 = objc_msgSend(v483, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old7, "ios");
            v485 = [v20 objectForKeyedSubscript:v484];
            if (v485)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v486 = [NSString stringWithUTF8String:nw_setting_disable_quic_old7];
                [v17 setObject:v485 forKeyedSubscript:v486];

                int v40 = 1;
              }
            }

            id v487 = [NSString alloc];
            v488 = objc_msgSend(v487, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_race_old7, "ios");
            v489 = [v20 objectForKeyedSubscript:v488];
            if (v489)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v490 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old7];
                [v17 setObject:v489 forKeyedSubscript:v490];

                int v40 = 1;
              }
            }

            id v491 = [NSString alloc];
            v492 = objc_msgSend(v491, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_numerator_old7, "ios");
            v493 = [v20 objectForKeyedSubscript:v492];
            if (v493)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v494 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old7];
                [v17 setObject:v493 forKeyedSubscript:v494];

                int v40 = 1;
              }
            }

            id v495 = [NSString alloc];
            v496 = objc_msgSend(v495, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_denominator_old7, "ios");
            v497 = [v20 objectForKeyedSubscript:v496];
            if (v497)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v498 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old7];
                [v17 setObject:v497 forKeyedSubscript:v498];

                int v40 = 1;
              }
            }

            id v499 = [NSString alloc];
            v500 = objc_msgSend(v499, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old8, "ios");
            v501 = [v20 objectForKeyedSubscript:v500];
            if (v501)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v502 = [NSString stringWithUTF8String:nw_setting_disable_quic_old8];
                [v17 setObject:v501 forKeyedSubscript:v502];

                int v40 = 1;
              }
            }

            id v503 = [NSString alloc];
            v504 = objc_msgSend(v503, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_race_old8, "ios");
            v505 = [v20 objectForKeyedSubscript:v504];
            if (v505)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v506 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old8];
                [v17 setObject:v505 forKeyedSubscript:v506];

                int v40 = 1;
              }
            }

            id v507 = [NSString alloc];
            v508 = objc_msgSend(v507, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_numerator_old8, "ios");
            v509 = [v20 objectForKeyedSubscript:v508];
            if (v509)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v510 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old8];
                [v17 setObject:v509 forKeyedSubscript:v510];

                int v40 = 1;
              }
            }

            id v511 = [NSString alloc];
            v512 = objc_msgSend(v511, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_denominator_old8, "ios");
            v513 = [v20 objectForKeyedSubscript:v512];
            if (v513)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v514 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old8];
                [v17 setObject:v513 forKeyedSubscript:v514];

                int v40 = 1;
              }
            }

            id v515 = [NSString alloc];
            v516 = objc_msgSend(v515, "initWithFormat:", @"%s_%s", nw_setting_disable_quic, "ios");
            v517 = [v20 objectForKeyedSubscript:v516];
            if (v517)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v518 = [NSString stringWithUTF8String:nw_setting_disable_quic];
                [v17 setObject:v517 forKeyedSubscript:v518];

                int v40 = 1;
              }
            }

            id v519 = [NSString alloc];
            v520 = objc_msgSend(v519, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_race, "ios");
            v521 = [v20 objectForKeyedSubscript:v520];
            if (v521)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v522 = [NSString stringWithUTF8String:nw_setting_disable_quic_race];
                [v17 setObject:v521 forKeyedSubscript:v522];

                int v40 = 1;
              }
            }

            id v523 = [NSString alloc];
            v524 = objc_msgSend(v523, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_numerator, "ios");
            v525 = [v20 objectForKeyedSubscript:v524];
            if (v525)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v526 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator];
                [v17 setObject:v525 forKeyedSubscript:v526];

                int v40 = 1;
              }
            }

            id v527 = [NSString alloc];
            v528 = objc_msgSend(v527, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_denominator, "ios");
            v529 = [v20 objectForKeyedSubscript:v528];
            if (v529)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v530 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator];
                [v17 setObject:v529 forKeyedSubscript:v530];

                int v40 = 1;
              }
            }

            id v531 = [NSString alloc];
            v532 = objc_msgSend(v531, "initWithFormat:", @"%s_%s", nw_setting_ech_probe_numerator, "ios");
            v533 = [v20 objectForKeyedSubscript:v532];
            if (v533)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v534 = [NSString stringWithUTF8String:nw_setting_ech_probe_numerator];
                [v17 setObject:v533 forKeyedSubscript:v534];

                int v40 = 1;
              }
            }

            id v535 = [NSString alloc];
            v536 = objc_msgSend(v535, "initWithFormat:", @"%s_%s", nw_setting_ech_probe_denominator, "ios");
            v537 = [v20 objectForKeyedSubscript:v536];
            if (v537)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v538 = [NSString stringWithUTF8String:nw_setting_ech_probe_denominator];
                [v17 setObject:v537 forKeyedSubscript:v538];

                int v40 = 1;
              }
            }

            id v539 = [NSString alloc];
            v540 = objc_msgSend(v539, "initWithFormat:", @"%s_%s", nw_setting_ech_canary_numerator, "ios");
            v541 = [v20 objectForKeyedSubscript:v540];
            if (v541)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v542 = [NSString stringWithUTF8String:nw_setting_ech_canary_numerator];
                [v17 setObject:v541 forKeyedSubscript:v542];

                int v40 = 1;
              }
            }

            id v543 = [NSString alloc];
            v544 = objc_msgSend(v543, "initWithFormat:", @"%s_%s", nw_setting_ech_canary_denominator, "ios");
            v545 = [v20 objectForKeyedSubscript:v544];
            if (v545)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v546 = [NSString stringWithUTF8String:nw_setting_ech_canary_denominator];
                [v17 setObject:v545 forKeyedSubscript:v546];

                int v40 = 1;
              }
            }

            id v547 = [NSString alloc];
            v548 = objc_msgSend(v547, "initWithFormat:", @"%s_%s", nw_setting_flow_report_numerator, "ios");
            v549 = [v20 objectForKeyedSubscript:v548];
            if (v549)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v550 = [NSString stringWithUTF8String:nw_setting_flow_report_numerator];
                [v17 setObject:v549 forKeyedSubscript:v550];

                int v40 = 1;
              }
            }

            id v551 = [NSString alloc];
            v552 = objc_msgSend(v551, "initWithFormat:", @"%s_%s", nw_setting_flow_report_denominator, "ios");
            v553 = [v20 objectForKeyedSubscript:v552];
            if (v553)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v554 = [NSString stringWithUTF8String:nw_setting_flow_report_denominator];
                [v17 setObject:v553 forKeyedSubscript:v554];

                int v40 = 1;
              }
            }

            id v555 = [NSString alloc];
            v556 = objc_msgSend(v555, "initWithFormat:", @"%s_%s", nw_setting_proxy_race_report_numerator, "ios");
            v557 = [v20 objectForKeyedSubscript:v556];
            if (v557)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v558 = [NSString stringWithUTF8String:nw_setting_proxy_race_report_numerator];
                [v17 setObject:v557 forKeyedSubscript:v558];

                int v40 = 1;
              }
            }

            id v559 = [NSString alloc];
            v560 = objc_msgSend(v559, "initWithFormat:", @"%s_%s", nw_setting_proxy_race_report_denominator, "ios");
            v561 = [v20 objectForKeyedSubscript:v560];
            if (v561)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v562 = [NSString stringWithUTF8String:nw_setting_proxy_race_report_denominator];
                [v17 setObject:v561 forKeyedSubscript:v562];

                int v40 = 1;
              }
            }

            id v563 = [NSString alloc];
            v564 = objc_msgSend(v563, "initWithFormat:", @"%s_%s", nw_setting_enable_l4s_numerator_old1, "ios");
            v565 = [v20 objectForKeyedSubscript:v564];
            if (v565)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v566 = [NSString stringWithUTF8String:nw_setting_enable_l4s_numerator_old1];
                [v17 setObject:v565 forKeyedSubscript:v566];

                int v40 = 1;
              }
            }

            id v567 = [NSString alloc];
            v568 = objc_msgSend(v567, "initWithFormat:", @"%s_%s", nw_setting_enable_l4s_denominator_old1, "ios");
            v569 = [v20 objectForKeyedSubscript:v568];
            if (v569)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v570 = [NSString stringWithUTF8String:nw_setting_enable_l4s_denominator_old1];
                [v17 setObject:v569 forKeyedSubscript:v570];

                int v40 = 1;
              }
            }

            id v571 = [NSString alloc];
            v572 = objc_msgSend(v571, "initWithFormat:", @"%s_%s", nw_setting_enable_l4s_numerator, "ios");
            v573 = [v20 objectForKeyedSubscript:v572];
            if (v573)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v574 = [NSString stringWithUTF8String:nw_setting_enable_l4s_numerator];
                [v17 setObject:v573 forKeyedSubscript:v574];

                int v40 = 1;
              }
            }

            id v575 = [NSString alloc];
            v576 = objc_msgSend(v575, "initWithFormat:", @"%s_%s", nw_setting_enable_l4s_denominator, "ios");
            v577 = [v20 objectForKeyedSubscript:v576];
            if (v577)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v578 = [NSString stringWithUTF8String:nw_setting_enable_l4s_denominator];
                [v17 setObject:v577 forKeyedSubscript:v578];

                int v40 = 1;
              }
            }

            id v579 = [NSString alloc];
            v580 = objc_msgSend(v579, "initWithFormat:", @"%s_%s", nw_setting_enable_accurate_ecn_numerator_old1, "ios");
            v581 = [v20 objectForKeyedSubscript:v580];
            if (v581)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v582 = [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_numerator_old1];
                [v17 setObject:v581 forKeyedSubscript:v582];

                int v40 = 1;
              }
            }

            id v583 = [NSString alloc];
            v584 = objc_msgSend(v583, "initWithFormat:", @"%s_%s", nw_setting_enable_accurate_ecn_denominator_old1, "ios");
            v585 = [v20 objectForKeyedSubscript:v584];
            if (v585)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v586 = [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_denominator_old1];
                [v17 setObject:v585 forKeyedSubscript:v586];

                int v40 = 1;
              }
            }

            id v587 = [NSString alloc];
            v588 = objc_msgSend(v587, "initWithFormat:", @"%s_%s", nw_setting_enable_accurate_ecn_numerator, "ios");
            v589 = [v20 objectForKeyedSubscript:v588];
            if (v589)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v590 = [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_numerator];
                [v17 setObject:v589 forKeyedSubscript:v590];

                int v40 = 1;
              }
            }

            id v591 = [NSString alloc];
            v592 = objc_msgSend(v591, "initWithFormat:", @"%s_%s", nw_setting_enable_accurate_ecn_denominator, "ios");
            v593 = [v20 objectForKeyedSubscript:v592];
            if (v593)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v594 = [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_denominator];
                [v17 setObject:v593 forKeyedSubscript:v594];

                int v40 = 1;
              }
            }

            id v595 = [NSString alloc];
            v596 = objc_msgSend(v595, "initWithFormat:", @"%s_%s", nw_setting_enable_tcp_l4s_numerator, "ios");
            v597 = [v20 objectForKeyedSubscript:v596];
            if (v597)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v598 = [NSString stringWithUTF8String:nw_setting_enable_tcp_l4s_numerator];
                [v17 setObject:v597 forKeyedSubscript:v598];

                int v40 = 1;
              }
            }

            id v599 = [NSString alloc];
            v600 = objc_msgSend(v599, "initWithFormat:", @"%s_%s", nw_setting_enable_tcp_l4s_denominator, "ios");
            v601 = [v20 objectForKeyedSubscript:v600];
            if (v601)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v602 = [NSString stringWithUTF8String:nw_setting_enable_tcp_l4s_denominator];
                [v17 setObject:v601 forKeyedSubscript:v602];

                int v40 = 1;
              }
            }

            id v603 = [NSString alloc];
            v604 = objc_msgSend(v603, "initWithFormat:", @"%s_%s", nw_setting_disable_l4s_aqm, "ios");
            v605 = [v20 objectForKeyedSubscript:v604];
            if (v605)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v606 = [NSString stringWithUTF8String:nw_setting_disable_l4s_aqm];
                [v17 setObject:v605 forKeyedSubscript:v606];

                int v40 = 1;
              }
            }

            id v607 = [NSString alloc];
            v608 = objc_msgSend(v607, "initWithFormat:", @"%s_%s", nw_setting_enable_unified_http_numerator, "ios");
            v609 = [v20 objectForKeyedSubscript:v608];
            if (v609)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v610 = [NSString stringWithUTF8String:nw_setting_enable_unified_http_numerator];
                [v17 setObject:v609 forKeyedSubscript:v610];

                int v40 = 1;
              }
            }

            id v611 = [NSString alloc];
            v612 = objc_msgSend(v611, "initWithFormat:", @"%s_%s", nw_setting_enable_unified_http_denominator, "ios");
            v613 = [v20 objectForKeyedSubscript:v612];
            if (v613)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v614 = [NSString stringWithUTF8String:nw_setting_enable_unified_http_denominator];
                [v17 setObject:v613 forKeyedSubscript:v614];

                int v40 = 1;
              }
            }

            id v615 = [NSString alloc];
            v616 = objc_msgSend(v615, "initWithFormat:", @"%s_%s", nw_setting_enable_unified_http_numerator_old, "ios");
            v617 = [v20 objectForKeyedSubscript:v616];
            if (v617)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v618 = [NSString stringWithUTF8String:nw_setting_enable_unified_http_numerator_old];
                [v17 setObject:v617 forKeyedSubscript:v618];

                int v40 = 1;
              }
            }

            id v619 = [NSString alloc];
            v620 = objc_msgSend(v619, "initWithFormat:", @"%s_%s", nw_setting_enable_unified_http_denominator_old, "ios");
            v621 = [v20 objectForKeyedSubscript:v620];
            if (v621 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              v622 = [NSString stringWithUTF8String:nw_setting_enable_unified_http_denominator_old];
              [v17 setObject:v621 forKeyedSubscript:v622];
            }
            else
            {

              if (!v40)
              {
                id v5 = (id *)&unk_1EB267000;
                goto LABEL_17;
              }
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v5 = (id *)&unk_1EB267000;
            v623 = (id)gLogObj;
            if (os_log_type_enabled(v623, OS_LOG_TYPE_DEBUG))
            {
              int buf = 136446210;
              v657 = "nwphCheckMobileAsset_block_invoke";
              _os_log_impl(&dword_1830D4000, v623, OS_LOG_TYPE_DEBUG, "%{public}s Some new setting was found", (uint8_t *)&buf, 0xCu);
            }

            id v15 = +[ManagedNetworkSettings sharedMNS];
            __int16 v16 = [v15 queue];
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = __nwphCheckMobileAsset_block_invoke_445;
            block[3] = &unk_1E524BAA8;
            id v17 = v17;
            v647 = v17;
            dispatch_async(v16, block);
          }
          else if (v36)
          {
            int buf = 136446466;
            v657 = "nwphCheckMobileAsset_block_invoke_2";
            __int16 v658 = 2114;
            uint64_t v659 = (uint64_t)v20;
            _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Asset attributes do not contain ActivityRateVersion: %{public}@", (uint8_t *)&buf, 0x16u);
          }
LABEL_17:

          uint64_t v14 = v641 + 1;
          id v13 = v642;
        }
        while (v640 != v641 + 1);
        uint64_t v640 = [obj countByEnumeratingWithState:&v651 objects:v655 count:16];
        if (!v640)
        {

          int v4 = v637;
          break;
        }
      }
    }

    v624 = [MEMORY[0x1E4F1C9C8] date];
    [*(id *)(a1 + 40) setObject:v624 forKeyedSubscript:@"LastAttempt"];
    [v12 setObject:v624 forKeyedSubscript:@"LastSuccess"];
    int v625 = [v12 writeToFile:@"/Library/Preferences/com.apple.networkd.networknomicon.plist" atomically:1];
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v626 = v5[237];
    v627 = v626;
    if (v625)
    {
      if (os_log_type_enabled(v626, OS_LOG_TYPE_DEFAULT))
      {
        int buf = 136446210;
        v657 = "nwphCheckMobileAsset_block_invoke";
        _os_log_impl(&dword_1830D4000, v627, OS_LOG_TYPE_DEFAULT, "%{public}s Saved successful mobile asset load date to disk", (uint8_t *)&buf, 0xCu);
      }

LABEL_693:
      goto LABEL_694;
    }
    int buf = 136446722;
    v657 = "nwphCheckMobileAsset_block_invoke";
    __int16 v658 = 2114;
    uint64_t v659 = (uint64_t)v12;
    __int16 v660 = 2114;
    v661 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
    v628 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v644 = 0;
    if (!__nwlog_fault((const char *)v628, &type, &v644))
    {
LABEL_691:
      if (v628) {
        free(v628);
      }
      goto LABEL_693;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v629 = v5[237];
      os_log_type_t v630 = type;
      if (os_log_type_enabled(v629, type))
      {
        int buf = 136446722;
        v657 = "nwphCheckMobileAsset_block_invoke";
        __int16 v658 = 2114;
        uint64_t v659 = (uint64_t)v12;
        __int16 v660 = 2114;
        v661 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
        v631 = "%{public}s Failed to save mobile asset networknomicon success %{public}@ to \"%{public}@\"";
LABEL_688:
        v635 = v629;
        os_log_type_t v636 = v630;
LABEL_689:
        _os_log_impl(&dword_1830D4000, v635, v636, v631, (uint8_t *)&buf, 0x20u);
      }
    }
    else
    {
      if (v644)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v629 = v5[237];
        os_log_type_t v633 = type;
        BOOL v634 = os_log_type_enabled(v629, type);
        if (backtrace_string)
        {
          if (v634)
          {
            int buf = 136446978;
            v657 = "nwphCheckMobileAsset_block_invoke";
            __int16 v658 = 2114;
            uint64_t v659 = (uint64_t)v12;
            __int16 v660 = 2114;
            v661 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
            __int16 v662 = 2082;
            v663 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v629, v633, "%{public}s Failed to save mobile asset networknomicon success %{public}@ to \"%{public}@\", dumping backtrace:%{public}s", (uint8_t *)&buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_691;
        }
        if (!v634) {
          goto LABEL_690;
        }
        int buf = 136446722;
        v657 = "nwphCheckMobileAsset_block_invoke";
        __int16 v658 = 2114;
        uint64_t v659 = (uint64_t)v12;
        __int16 v660 = 2114;
        v661 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
        v631 = "%{public}s Failed to save mobile asset networknomicon success %{public}@ to \"%{public}@\", no backtrace";
        v635 = v629;
        os_log_type_t v636 = v633;
        goto LABEL_689;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v629 = v5[237];
      os_log_type_t v630 = type;
      if (os_log_type_enabled(v629, type))
      {
        int buf = 136446722;
        v657 = "nwphCheckMobileAsset_block_invoke";
        __int16 v658 = 2114;
        uint64_t v659 = (uint64_t)v12;
        __int16 v660 = 2114;
        v661 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
        v631 = "%{public}s Failed to save mobile asset networknomicon success %{public}@ to \"%{public}@\", backtrace limit exceeded";
        goto LABEL_688;
      }
    }
LABEL_690:

    goto LABEL_691;
  }
LABEL_694:
}

void __nwphCheckMobileAsset_block_invoke_380(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F1CA60] dictionaryWithContentsOfFile:@"/Library/Preferences/com.apple.networkd.sysctl.plist"];
  if (!v2) {
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  int v3 = [v2 objectForKeyedSubscript:@"net.inet.tcp.ecn_setup_percentage"];
  if (!v3
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
    || [v3 longLongValue] != *(void *)(a1 + 40))
  {
    int v4 = [NSNumber numberWithLongLong:*(void *)(a1 + 40)];
    [v2 setObject:v4 forKeyedSubscript:@"net.inet.tcp.ecn_setup_percentage"];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)int buf = 136446466;
      uint64_t v28 = "nwphCheckMobileAsset_block_invoke";
      __int16 v29 = 2048;
      uint64_t v30 = v6;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s Changing ECN Percentage to %lld", buf, 0x16u);
    }

    if ([v2 writeToFile:@"/Library/Preferences/com.apple.networkd.sysctl.plist" atomically:1])goto LABEL_20; {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    }
    networkd_settings_init();
    id v7 = (id)gLogObj;
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)int buf = 136446722;
    uint64_t v28 = "nwphCheckMobileAsset_block_invoke";
    __int16 v29 = 2114;
    uint64_t v30 = v8;
    __int16 v31 = 2114;
    uint64_t v32 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
    LODWORD(v24) = 32;
    os_log_type_t v23 = buf;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_26;
        }
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)int buf = 136446722;
        uint64_t v28 = "nwphCheckMobileAsset_block_invoke";
        __int16 v29 = 2114;
        uint64_t v30 = v12;
        __int16 v31 = 2114;
        uint64_t v32 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        id v13 = "%{public}s Failed to save network settings %{public}@ to \"%{public}@\"";
LABEL_24:
        id v20 = v10;
        os_log_type_t v21 = v11;
        goto LABEL_25;
      }
      if (!v25)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_26;
        }
        uint64_t v19 = *(void *)(a1 + 32);
        *(_DWORD *)int buf = 136446722;
        uint64_t v28 = "nwphCheckMobileAsset_block_invoke";
        __int16 v29 = 2114;
        uint64_t v30 = v19;
        __int16 v31 = 2114;
        uint64_t v32 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        id v13 = "%{public}s Failed to save network settings %{public}@ to \"%{public}@\", backtrace limit exceeded";
        goto LABEL_24;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (id)gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (!v16)
        {
LABEL_26:

          if (!v9) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
        uint64_t v22 = *(void *)(a1 + 32);
        *(_DWORD *)int buf = 136446722;
        uint64_t v28 = "nwphCheckMobileAsset_block_invoke";
        __int16 v29 = 2114;
        uint64_t v30 = v22;
        __int16 v31 = 2114;
        uint64_t v32 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        id v13 = "%{public}s Failed to save network settings %{public}@ to \"%{public}@\", no backtrace";
        id v20 = v10;
        os_log_type_t v21 = v15;
LABEL_25:
        _os_log_impl(&dword_1830D4000, v20, v21, v13, buf, 0x20u);
        goto LABEL_26;
      }
      if (v16)
      {
        uint64_t v17 = *(void *)(a1 + 32);
        *(_DWORD *)int buf = 136446978;
        uint64_t v28 = "nwphCheckMobileAsset_block_invoke";
        __int16 v29 = 2114;
        uint64_t v30 = v17;
        __int16 v31 = 2114;
        uint64_t v32 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        __int16 v33 = 2082;
        uint32_t v34 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s Failed to save network settings %{public}@ to \"%{public}@\", dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(backtrace_string);
    }
    if (!v9)
    {
LABEL_20:
      id v18 = +[ManagedNetworkSettings sharedMNS];
      [v18 reloadMNS];

      goto LABEL_21;
    }
LABEL_19:
    free(v9);
    goto LABEL_20;
  }
LABEL_21:
}

void __nwphCheckMobileAsset_block_invoke_445(uint64_t a1)
{
}

void addNewNetworkdSettings(void *a1, int a2)
{
  uint64_t v325 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = (const char *)nw_setting_libnetcore_debug;
  networkd_settings_init();
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    if (sCachedSettings) {
      int64_t int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v4);
    }
    else {
      int64_t int64 = 0;
    }
    pthread_mutex_unlock(&sSettingsMutex);
  }
  else
  {
    int64_t int64 = 0;
  }
  id v5 = [NSString stringWithUTF8String:nw_file_path_settings];
  uint64_t v6 = [MEMORY[0x1E4F1CA60] dictionaryWithContentsOfFile:v5];
  if (!v6)
  {
    uint64_t v6 = [MEMORY[0x1E4F1CA60] dictionary];
  }

  uint64_t v313 = [v6 copy];
  if (a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "libnetcore";
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v8 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_libnetcore];
    [v6 setObject:0 forKeyedSubscript:v8];

    uint64_t v9 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_libnetcore];
    [v6 setObject:0 forKeyedSubscript:v9];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "cfnetwork";
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    os_log_type_t v11 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cfnetwork];
    [v6 setObject:0 forKeyedSubscript:v11];

    uint64_t v12 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cfnetwork];
    [v6 setObject:0 forKeyedSubscript:v12];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v13 = (id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "coremedia";
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v14 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coremedia];
    [v6 setObject:0 forKeyedSubscript:v14];

    os_log_type_t v15 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coremedia];
    [v6 setObject:0 forKeyedSubscript:v15];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "parsec";
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v17 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_parsec];
    [v6 setObject:0 forKeyedSubscript:v17];

    id v18 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_parsec];
    [v6 setObject:0 forKeyedSubscript:v18];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "siri";
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    id v20 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_siri];
    [v6 setObject:0 forKeyedSubscript:v20];

    os_log_type_t v21 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_siri];
    [v6 setObject:0 forKeyedSubscript:v21];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "webkit";
      _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    os_log_type_t v23 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_webkit];
    [v6 setObject:0 forKeyedSubscript:v23];

    uint64_t v24 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_webkit];
    [v6 setObject:0 forKeyedSubscript:v24];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v25 = (id)gLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "coremedia_crabs";
      _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    BOOL v26 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coremedia_crabs];
    [v6 setObject:0 forKeyedSubscript:v26];

    BOOL v27 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coremedia_crabs];
    [v6 setObject:0 forKeyedSubscript:v27];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v28 = (id)gLogObj;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "coremedia_hls";
      _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    __int16 v29 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coremedia_hls];
    [v6 setObject:0 forKeyedSubscript:v29];

    uint64_t v30 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coremedia_hls];
    [v6 setObject:0 forKeyedSubscript:v30];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v31 = (id)gLogObj;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "cloudkit";
      _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v32 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cloudkit];
    [v6 setObject:0 forKeyedSubscript:v32];

    __int16 v33 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cloudkit];
    [v6 setObject:0 forKeyedSubscript:v33];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v34 = (id)gLogObj;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "mmcs";
      _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v35 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_mmcs];
    [v6 setObject:0 forKeyedSubscript:v35];

    BOOL v36 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_mmcs];
    [v6 setObject:0 forKeyedSubscript:v36];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v37 = (id)gLogObj;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "mail";
      _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    id v38 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_mail];
    [v6 setObject:0 forKeyedSubscript:v38];

    __int16 v39 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_mail];
    [v6 setObject:0 forKeyedSubscript:v39];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v40 = (id)gLogObj;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "facetime";
      _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    __int16 v41 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_facetime];
    [v6 setObject:0 forKeyedSubscript:v41];

    uint64_t v42 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_facetime];
    [v6 setObject:0 forKeyedSubscript:v42];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v43 = (id)gLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "adplatforms";
      _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v44 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_adplatforms];
    [v6 setObject:0 forKeyedSubscript:v44];

    uint32_t v45 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_adplatforms];
    [v6 setObject:0 forKeyedSubscript:v45];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v46 = (id)gLogObj;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "corelocation";
      _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    double v47 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_corelocation];
    [v6 setObject:0 forKeyedSubscript:v47];

    uint32_t v48 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_corelocation];
    [v6 setObject:0 forKeyedSubscript:v48];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v49 = (id)gLogObj;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "airplay_sender";
      _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v50 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_airplay_sender];
    [v6 setObject:0 forKeyedSubscript:v50];

    uint64_t v51 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_airplay_sender];
    [v6 setObject:0 forKeyedSubscript:v51];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v52 = (id)gLogObj;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "airplay_receiver";
      _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    id v53 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_airplay_receiver];
    [v6 setObject:0 forKeyedSubscript:v53];

    char v54 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_airplay_receiver];
    [v6 setObject:0 forKeyedSubscript:v54];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v55 = (id)gLogObj;
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "maps";
      _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v56 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_maps];
    [v6 setObject:0 forKeyedSubscript:v56];

    uint32_t v57 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_maps];
    [v6 setObject:0 forKeyedSubscript:v57];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v58 = (id)gLogObj;
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "maps_internal";
      _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v59 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_maps_internal];
    [v6 setObject:0 forKeyedSubscript:v59];

    uint64_t v60 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_maps_internal];
    [v6 setObject:0 forKeyedSubscript:v60];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v61 = (id)gLogObj;
    if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "maps_external";
      _os_log_impl(&dword_1830D4000, v61, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    __int16 v62 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_maps_external];
    [v6 setObject:0 forKeyedSubscript:v62];

    int64_t v63 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_maps_external];
    [v6 setObject:0 forKeyedSubscript:v63];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v64 = (id)gLogObj;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "network_speed_test";
      _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint32_t v65 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_speed_test];
    [v6 setObject:0 forKeyedSubscript:v65];

    uint32_t v66 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_speed_test];
    [v6 setObject:0 forKeyedSubscript:v66];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v67 = (id)gLogObj;
    if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "captive";
      _os_log_impl(&dword_1830D4000, v67, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint32_t v68 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_captive];
    [v6 setObject:0 forKeyedSubscript:v68];

    int v69 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_captive];
    [v6 setObject:0 forKeyedSubscript:v69];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v70 = (id)gLogObj;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "safe_browsing";
      _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint32_t v71 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_safe_browsing];
    [v6 setObject:0 forKeyedSubscript:v71];

    int64_t v72 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_safe_browsing];
    [v6 setObject:0 forKeyedSubscript:v72];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v73 = (id)gLogObj;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "dns";
      _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint32_t v74 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_dns];
    [v6 setObject:0 forKeyedSubscript:v74];

    int64_t v75 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_dns];
    [v6 setObject:0 forKeyedSubscript:v75];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v76 = (id)gLogObj;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "music";
      _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    __uint64_t v77 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_music];
    [v6 setObject:0 forKeyedSubscript:v77];

    char v78 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_music];
    [v6 setObject:0 forKeyedSubscript:v78];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v79 = (id)gLogObj;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "battery";
      _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    unint64_t v80 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_battery];
    [v6 setObject:0 forKeyedSubscript:v80];

    BOOL v81 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_battery];
    [v6 setObject:0 forKeyedSubscript:v81];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v82 = (id)gLogObj;
    if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "cloud_media_services";
      _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    os_log_type_t v83 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cloud_media_services];
    [v6 setObject:0 forKeyedSubscript:v83];

    uint64_t v84 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cloud_media_services];
    [v6 setObject:0 forKeyedSubscript:v84];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v85 = (id)gLogObj;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "avconference";
      _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    BOOL v86 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_avconference];
    [v6 setObject:0 forKeyedSubscript:v86];

    BOOL v87 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_avconference];
    [v6 setObject:0 forKeyedSubscript:v87];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v88 = (id)gLogObj;
    if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "appstore";
      _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    long long v89 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_appstore];
    [v6 setObject:0 forKeyedSubscript:v89];

    long long v90 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_appstore];
    [v6 setObject:0 forKeyedSubscript:v90];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v91 = (id)gLogObj;
    if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "telephony_service";
      _os_log_impl(&dword_1830D4000, v91, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    long long v92 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_telephony_service];
    [v6 setObject:0 forKeyedSubscript:v92];

    uint32_t v93 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_telephony_service];
    [v6 setObject:0 forKeyedSubscript:v93];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v94 = (id)gLogObj;
    if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "network_experiments";
      _os_log_impl(&dword_1830D4000, v94, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint32_t v95 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_experiments];
    [v6 setObject:0 forKeyedSubscript:v95];

    long long v96 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_experiments];
    [v6 setObject:0 forKeyedSubscript:v96];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    long long v97 = (id)gLogObj;
    if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "network_perf";
      _os_log_impl(&dword_1830D4000, v97, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    unint64_t v98 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_perf];
    [v6 setObject:0 forKeyedSubscript:v98];

    id v99 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_perf];
    [v6 setObject:0 forKeyedSubscript:v99];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v100 = (id)gLogObj;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "hotspot";
      _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint32_t v101 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_hotspot];
    [v6 setObject:0 forKeyedSubscript:v101];

    uint64_t v102 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_hotspot];
    [v6 setObject:0 forKeyedSubscript:v102];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v103 = (id)gLogObj;
    if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "weather";
      _os_log_impl(&dword_1830D4000, v103, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    os_log_type_t v104 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_weather];
    [v6 setObject:0 forKeyedSubscript:v104];

    uint64_t v105 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_weather];
    [v6 setObject:0 forKeyedSubscript:v105];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v106 = (id)gLogObj;
    if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "coordination";
      _os_log_impl(&dword_1830D4000, v106, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    __int16 v107 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coordination];
    [v6 setObject:0 forKeyedSubscript:v107];

    uint64_t v108 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coordination];
    [v6 setObject:0 forKeyedSubscript:v108];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v109 = (id)gLogObj;
    if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "appstore_jet";
      _os_log_impl(&dword_1830D4000, v109, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    __int16 v110 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_appstore_jet];
    [v6 setObject:0 forKeyedSubscript:v110];

    unint64_t v111 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_appstore_jet];
    [v6 setObject:0 forKeyedSubscript:v111];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v112 = (id)gLogObj;
    if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "soundboard";
      _os_log_impl(&dword_1830D4000, v112, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v113 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_soundboard];
    [v6 setObject:0 forKeyedSubscript:v113];

    uint64_t v114 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_soundboard];
    [v6 setObject:0 forKeyedSubscript:v114];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v115 = (id)gLogObj;
    if (os_log_type_enabled(v115, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "aea";
      _os_log_impl(&dword_1830D4000, v115, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v116 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_aea];
    [v6 setObject:0 forKeyedSubscript:v116];

    uint64_t v117 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_aea];
    [v6 setObject:0 forKeyedSubscript:v117];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v118 = (id)gLogObj;
    if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "homekit";
      _os_log_impl(&dword_1830D4000, v118, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v119 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_homekit];
    [v6 setObject:0 forKeyedSubscript:v119];

    uint64_t v120 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_homekit];
    [v6 setObject:0 forKeyedSubscript:v120];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v121 = (id)gLogObj;
    if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "wifi";
      _os_log_impl(&dword_1830D4000, v121, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v122 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_wifi];
    [v6 setObject:0 forKeyedSubscript:v122];

    uint64_t v123 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_wifi];
    [v6 setObject:0 forKeyedSubscript:v123];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v124 = (id)gLogObj;
    if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "app_launch";
      _os_log_impl(&dword_1830D4000, v124, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v125 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_app_launch];
    [v6 setObject:0 forKeyedSubscript:v125];

    uint64_t v126 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_app_launch];
    [v6 setObject:0 forKeyedSubscript:v126];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v127 = (id)gLogObj;
    if (os_log_type_enabled(v127, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "ams";
      _os_log_impl(&dword_1830D4000, v127, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    unint64_t v128 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_ams];
    [v6 setObject:0 forKeyedSubscript:v128];

    char v129 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_ams];
    [v6 setObject:0 forKeyedSubscript:v129];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v130 = (id)gLogObj;
    if (os_log_type_enabled(v130, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "reve";
      _os_log_impl(&dword_1830D4000, v130, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v131 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_reve];
    [v6 setObject:0 forKeyedSubscript:v131];

    unint64_t v132 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_reve];
    [v6 setObject:0 forKeyedSubscript:v132];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v133 = (id)gLogObj;
    if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "network_quality";
      _os_log_impl(&dword_1830D4000, v133, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    int v134 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_quality];
    [v6 setObject:0 forKeyedSubscript:v134];

    uint64_t v135 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_quality];
    [v6 setObject:0 forKeyedSubscript:v135];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v136 = (id)gLogObj;
    if (os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "news";
      _os_log_impl(&dword_1830D4000, v136, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    unint64_t v137 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_news];
    [v6 setObject:0 forKeyedSubscript:v137];

    int v138 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_news];
    [v6 setObject:0 forKeyedSubscript:v138];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v139 = (id)gLogObj;
    if (os_log_type_enabled(v139, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "cloud_compute";
      _os_log_impl(&dword_1830D4000, v139, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    unint64_t v140 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cloud_compute];
    [v6 setObject:0 forKeyedSubscript:v140];

    unint64_t v141 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cloud_compute];
    [v6 setObject:0 forKeyedSubscript:v141];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v142 = (id)gLogObj;
    if (os_log_type_enabled(v142, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "push";
      _os_log_impl(&dword_1830D4000, v142, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v143 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_push];
    [v6 setObject:0 forKeyedSubscript:v143];

    unint64_t v144 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_push];
    [v6 setObject:0 forKeyedSubscript:v144];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v145 = (id)gLogObj;
    if (os_log_type_enabled(v145, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "nw_actor_system";
      _os_log_impl(&dword_1830D4000, v145, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    int v146 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_nw_actor_system];
    [v6 setObject:0 forKeyedSubscript:v146];

    uint64_t v147 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_nw_actor_system];
    [v6 setObject:0 forKeyedSubscript:v147];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v148 = (id)gLogObj;
    if (os_log_type_enabled(v148, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "app_intents_services";
      _os_log_impl(&dword_1830D4000, v148, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    unint64_t v149 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_app_intents_services];
    [v6 setObject:0 forKeyedSubscript:v149];

    char v150 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_app_intents_services];
    [v6 setObject:0 forKeyedSubscript:v150];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v151 = (id)gLogObj;
    if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "stocks";
      _os_log_impl(&dword_1830D4000, v151, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    uint64_t v152 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_stocks];
    [v6 setObject:0 forKeyedSubscript:v152];

    unint64_t v153 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_stocks];
    [v6 setObject:0 forKeyedSubscript:v153];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v154 = (id)gLogObj;
    if (os_log_type_enabled(v154, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "tv_app";
      _os_log_impl(&dword_1830D4000, v154, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    int v155 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_tv_app];
    [v6 setObject:0 forKeyedSubscript:v155];

    uint64_t v156 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_tv_app];
    [v6 setObject:0 forKeyedSubscript:v156];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v157 = (id)gLogObj;
    if (os_log_type_enabled(v157, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = "rapport";
      _os_log_impl(&dword_1830D4000, v157, OS_LOG_TYPE_INFO, "%{public}s Removing sampling rate for domain %s", buf, 0x16u);
    }

    unint64_t v158 = [NSString stringWithUTF8String:nw_setting_activity_report_numerator_rapport];
    [v6 setObject:0 forKeyedSubscript:v158];

    int v159 = [NSString stringWithUTF8String:nw_setting_activity_report_denominator_rapport];
    [v6 setObject:0 forKeyedSubscript:v159];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v160 = (id)gLogObj;
    if (os_log_type_enabled(v160, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_activity_report_destination;
      _os_log_impl(&dword_1830D4000, v160, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v161 = [NSString stringWithUTF8String:nw_setting_activity_report_destination];
    [v6 setObject:0 forKeyedSubscript:v161];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v162 = (id)gLogObj;
    if (os_log_type_enabled(v162, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_activity_default_numerator_old1;
      _os_log_impl(&dword_1830D4000, v162, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    int v163 = [NSString stringWithUTF8String:nw_setting_activity_default_numerator_old1];
    [v6 setObject:0 forKeyedSubscript:v163];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v164 = (id)gLogObj;
    if (os_log_type_enabled(v164, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_activity_default_denominator_old1;
      _os_log_impl(&dword_1830D4000, v164, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v165 = [NSString stringWithUTF8String:nw_setting_activity_default_denominator_old1];
    [v6 setObject:0 forKeyedSubscript:v165];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v166 = (id)gLogObj;
    if (os_log_type_enabled(v166, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_activity_default_numerator;
      _os_log_impl(&dword_1830D4000, v166, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    int v167 = [NSString stringWithUTF8String:nw_setting_activity_default_numerator];
    [v6 setObject:0 forKeyedSubscript:v167];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v168 = (id)gLogObj;
    if (os_log_type_enabled(v168, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_activity_default_denominator;
      _os_log_impl(&dword_1830D4000, v168, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v169 = [NSString stringWithUTF8String:nw_setting_activity_default_denominator];
    [v6 setObject:0 forKeyedSubscript:v169];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v170 = (id)gLogObj;
    if (os_log_type_enabled(v170, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_statistics_report_numerator;
      _os_log_impl(&dword_1830D4000, v170, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v171 = [NSString stringWithUTF8String:nw_setting_statistics_report_numerator];
    [v6 setObject:0 forKeyedSubscript:v171];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v172 = (id)gLogObj;
    if (os_log_type_enabled(v172, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_statistics_report_denominator;
      _os_log_impl(&dword_1830D4000, v172, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v173 = [NSString stringWithUTF8String:nw_setting_statistics_report_denominator];
    [v6 setObject:0 forKeyedSubscript:v173];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v174 = (id)gLogObj;
    if (os_log_type_enabled(v174, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_svcb;
      _os_log_impl(&dword_1830D4000, v174, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v175 = [NSString stringWithUTF8String:nw_setting_disable_svcb];
    [v6 setObject:0 forKeyedSubscript:v175];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v176 = (id)gLogObj;
    if (os_log_type_enabled(v176, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_svcb_router;
      _os_log_impl(&dword_1830D4000, v176, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v177 = [NSString stringWithUTF8String:nw_setting_disable_svcb_router];
    [v6 setObject:0 forKeyedSubscript:v177];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v178 = (id)gLogObj;
    if (os_log_type_enabled(v178, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_activity_elevated_numerator;
      _os_log_impl(&dword_1830D4000, v178, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v179 = [NSString stringWithUTF8String:nw_setting_activity_elevated_numerator];
    [v6 setObject:0 forKeyedSubscript:v179];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v180 = (id)gLogObj;
    if (os_log_type_enabled(v180, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_activity_elevated_denominator;
      _os_log_impl(&dword_1830D4000, v180, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v181 = [NSString stringWithUTF8String:nw_setting_activity_elevated_denominator];
    [v6 setObject:0 forKeyedSubscript:v181];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v182 = (id)gLogObj;
    if (os_log_type_enabled(v182, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_old1;
      _os_log_impl(&dword_1830D4000, v182, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v183 = [NSString stringWithUTF8String:nw_setting_disable_quic_old1];
    [v6 setObject:0 forKeyedSubscript:v183];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v184 = (id)gLogObj;
    if (os_log_type_enabled(v184, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_race_old1;
      _os_log_impl(&dword_1830D4000, v184, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v185 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old1];
    [v6 setObject:0 forKeyedSubscript:v185];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v186 = (id)gLogObj;
    if (os_log_type_enabled(v186, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_numerator_old1;
      _os_log_impl(&dword_1830D4000, v186, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v187 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old1];
    [v6 setObject:0 forKeyedSubscript:v187];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v188 = (id)gLogObj;
    if (os_log_type_enabled(v188, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_denominator_old1;
      _os_log_impl(&dword_1830D4000, v188, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v189 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old1];
    [v6 setObject:0 forKeyedSubscript:v189];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v190 = (id)gLogObj;
    if (os_log_type_enabled(v190, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_old2;
      _os_log_impl(&dword_1830D4000, v190, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v191 = [NSString stringWithUTF8String:nw_setting_disable_quic_old2];
    [v6 setObject:0 forKeyedSubscript:v191];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v192 = (id)gLogObj;
    if (os_log_type_enabled(v192, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_race_old2;
      _os_log_impl(&dword_1830D4000, v192, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v193 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old2];
    [v6 setObject:0 forKeyedSubscript:v193];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v194 = (id)gLogObj;
    if (os_log_type_enabled(v194, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_numerator_old2;
      _os_log_impl(&dword_1830D4000, v194, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v195 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old2];
    [v6 setObject:0 forKeyedSubscript:v195];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v196 = (id)gLogObj;
    if (os_log_type_enabled(v196, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_denominator_old2;
      _os_log_impl(&dword_1830D4000, v196, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v197 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old2];
    [v6 setObject:0 forKeyedSubscript:v197];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v198 = (id)gLogObj;
    if (os_log_type_enabled(v198, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_old3;
      _os_log_impl(&dword_1830D4000, v198, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v199 = [NSString stringWithUTF8String:nw_setting_disable_quic_old3];
    [v6 setObject:0 forKeyedSubscript:v199];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v200 = (id)gLogObj;
    if (os_log_type_enabled(v200, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_race_old3;
      _os_log_impl(&dword_1830D4000, v200, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v201 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old3];
    [v6 setObject:0 forKeyedSubscript:v201];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v202 = (id)gLogObj;
    if (os_log_type_enabled(v202, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_numerator_old3;
      _os_log_impl(&dword_1830D4000, v202, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v203 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old3];
    [v6 setObject:0 forKeyedSubscript:v203];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v204 = (id)gLogObj;
    if (os_log_type_enabled(v204, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_denominator_old3;
      _os_log_impl(&dword_1830D4000, v204, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v205 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old3];
    [v6 setObject:0 forKeyedSubscript:v205];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v206 = (id)gLogObj;
    if (os_log_type_enabled(v206, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_old4;
      _os_log_impl(&dword_1830D4000, v206, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v207 = [NSString stringWithUTF8String:nw_setting_disable_quic_old4];
    [v6 setObject:0 forKeyedSubscript:v207];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v208 = (id)gLogObj;
    if (os_log_type_enabled(v208, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_race_old4;
      _os_log_impl(&dword_1830D4000, v208, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v209 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old4];
    [v6 setObject:0 forKeyedSubscript:v209];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v210 = (id)gLogObj;
    if (os_log_type_enabled(v210, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_numerator_old4;
      _os_log_impl(&dword_1830D4000, v210, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v211 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old4];
    [v6 setObject:0 forKeyedSubscript:v211];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v212 = (id)gLogObj;
    if (os_log_type_enabled(v212, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_denominator_old4;
      _os_log_impl(&dword_1830D4000, v212, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v213 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old4];
    [v6 setObject:0 forKeyedSubscript:v213];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v214 = (id)gLogObj;
    if (os_log_type_enabled(v214, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_old5;
      _os_log_impl(&dword_1830D4000, v214, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v215 = [NSString stringWithUTF8String:nw_setting_disable_quic_old5];
    [v6 setObject:0 forKeyedSubscript:v215];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v216 = (id)gLogObj;
    if (os_log_type_enabled(v216, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_race_old5;
      _os_log_impl(&dword_1830D4000, v216, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v217 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old5];
    [v6 setObject:0 forKeyedSubscript:v217];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v218 = (id)gLogObj;
    if (os_log_type_enabled(v218, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_numerator_old5;
      _os_log_impl(&dword_1830D4000, v218, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v219 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old5];
    [v6 setObject:0 forKeyedSubscript:v219];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v220 = (id)gLogObj;
    if (os_log_type_enabled(v220, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_denominator_old5;
      _os_log_impl(&dword_1830D4000, v220, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v221 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old5];
    [v6 setObject:0 forKeyedSubscript:v221];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v222 = (id)gLogObj;
    if (os_log_type_enabled(v222, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_old6;
      _os_log_impl(&dword_1830D4000, v222, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v223 = [NSString stringWithUTF8String:nw_setting_disable_quic_old6];
    [v6 setObject:0 forKeyedSubscript:v223];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v224 = (id)gLogObj;
    if (os_log_type_enabled(v224, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_race_old6;
      _os_log_impl(&dword_1830D4000, v224, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v225 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old6];
    [v6 setObject:0 forKeyedSubscript:v225];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v226 = (id)gLogObj;
    if (os_log_type_enabled(v226, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_numerator_old6;
      _os_log_impl(&dword_1830D4000, v226, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v227 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old6];
    [v6 setObject:0 forKeyedSubscript:v227];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v228 = (id)gLogObj;
    if (os_log_type_enabled(v228, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_denominator_old6;
      _os_log_impl(&dword_1830D4000, v228, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v229 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old6];
    [v6 setObject:0 forKeyedSubscript:v229];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v230 = (id)gLogObj;
    if (os_log_type_enabled(v230, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_old7;
      _os_log_impl(&dword_1830D4000, v230, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v231 = [NSString stringWithUTF8String:nw_setting_disable_quic_old7];
    [v6 setObject:0 forKeyedSubscript:v231];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v232 = (id)gLogObj;
    if (os_log_type_enabled(v232, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_race_old7;
      _os_log_impl(&dword_1830D4000, v232, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v233 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old7];
    [v6 setObject:0 forKeyedSubscript:v233];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v234 = (id)gLogObj;
    if (os_log_type_enabled(v234, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_numerator_old7;
      _os_log_impl(&dword_1830D4000, v234, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v235 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old7];
    [v6 setObject:0 forKeyedSubscript:v235];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v236 = (id)gLogObj;
    if (os_log_type_enabled(v236, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_denominator_old7;
      _os_log_impl(&dword_1830D4000, v236, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v237 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old7];
    [v6 setObject:0 forKeyedSubscript:v237];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v238 = (id)gLogObj;
    if (os_log_type_enabled(v238, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_old8;
      _os_log_impl(&dword_1830D4000, v238, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v239 = [NSString stringWithUTF8String:nw_setting_disable_quic_old8];
    [v6 setObject:0 forKeyedSubscript:v239];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v240 = (id)gLogObj;
    if (os_log_type_enabled(v240, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_race_old8;
      _os_log_impl(&dword_1830D4000, v240, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v241 = [NSString stringWithUTF8String:nw_setting_disable_quic_race_old8];
    [v6 setObject:0 forKeyedSubscript:v241];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v242 = (id)gLogObj;
    if (os_log_type_enabled(v242, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_numerator_old8;
      _os_log_impl(&dword_1830D4000, v242, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v243 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old8];
    [v6 setObject:0 forKeyedSubscript:v243];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v244 = (id)gLogObj;
    if (os_log_type_enabled(v244, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_denominator_old8;
      _os_log_impl(&dword_1830D4000, v244, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v245 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old8];
    [v6 setObject:0 forKeyedSubscript:v245];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v246 = (id)gLogObj;
    if (os_log_type_enabled(v246, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic;
      _os_log_impl(&dword_1830D4000, v246, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v247 = [NSString stringWithUTF8String:nw_setting_disable_quic];
    [v6 setObject:0 forKeyedSubscript:v247];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v248 = (id)gLogObj;
    if (os_log_type_enabled(v248, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_quic_race;
      _os_log_impl(&dword_1830D4000, v248, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v249 = [NSString stringWithUTF8String:nw_setting_disable_quic_race];
    [v6 setObject:0 forKeyedSubscript:v249];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v250 = (id)gLogObj;
    if (os_log_type_enabled(v250, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_numerator;
      _os_log_impl(&dword_1830D4000, v250, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v251 = [NSString stringWithUTF8String:nw_setting_enable_quic_numerator];
    [v6 setObject:0 forKeyedSubscript:v251];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v252 = (id)gLogObj;
    if (os_log_type_enabled(v252, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_quic_denominator;
      _os_log_impl(&dword_1830D4000, v252, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v253 = [NSString stringWithUTF8String:nw_setting_enable_quic_denominator];
    [v6 setObject:0 forKeyedSubscript:v253];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v254 = (id)gLogObj;
    if (os_log_type_enabled(v254, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_ech_probe_numerator;
      _os_log_impl(&dword_1830D4000, v254, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v255 = [NSString stringWithUTF8String:nw_setting_ech_probe_numerator];
    [v6 setObject:0 forKeyedSubscript:v255];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v256 = (id)gLogObj;
    if (os_log_type_enabled(v256, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_ech_probe_denominator;
      _os_log_impl(&dword_1830D4000, v256, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v257 = [NSString stringWithUTF8String:nw_setting_ech_probe_denominator];
    [v6 setObject:0 forKeyedSubscript:v257];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v258 = (id)gLogObj;
    if (os_log_type_enabled(v258, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_ech_canary_numerator;
      _os_log_impl(&dword_1830D4000, v258, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v259 = [NSString stringWithUTF8String:nw_setting_ech_canary_numerator];
    [v6 setObject:0 forKeyedSubscript:v259];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v260 = (id)gLogObj;
    if (os_log_type_enabled(v260, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_ech_canary_denominator;
      _os_log_impl(&dword_1830D4000, v260, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v261 = [NSString stringWithUTF8String:nw_setting_ech_canary_denominator];
    [v6 setObject:0 forKeyedSubscript:v261];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v262 = (id)gLogObj;
    if (os_log_type_enabled(v262, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_flow_report_numerator;
      _os_log_impl(&dword_1830D4000, v262, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v263 = [NSString stringWithUTF8String:nw_setting_flow_report_numerator];
    [v6 setObject:0 forKeyedSubscript:v263];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v264 = (id)gLogObj;
    if (os_log_type_enabled(v264, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_flow_report_denominator;
      _os_log_impl(&dword_1830D4000, v264, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    uint64_t v265 = [NSString stringWithUTF8String:nw_setting_flow_report_denominator];
    [v6 setObject:0 forKeyedSubscript:v265];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v266 = (id)gLogObj;
    if (os_log_type_enabled(v266, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_proxy_race_report_numerator;
      _os_log_impl(&dword_1830D4000, v266, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    unint64_t v267 = [NSString stringWithUTF8String:nw_setting_proxy_race_report_numerator];
    [v6 setObject:0 forKeyedSubscript:v267];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v268 = (id)gLogObj;
    if (os_log_type_enabled(v268, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_proxy_race_report_denominator;
      _os_log_impl(&dword_1830D4000, v268, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v269 = [NSString stringWithUTF8String:nw_setting_proxy_race_report_denominator];
    [v6 setObject:0 forKeyedSubscript:v269];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v270 = (id)gLogObj;
    if (os_log_type_enabled(v270, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_l4s_numerator_old1;
      _os_log_impl(&dword_1830D4000, v270, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v271 = [NSString stringWithUTF8String:nw_setting_enable_l4s_numerator_old1];
    [v6 setObject:0 forKeyedSubscript:v271];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v272 = (id)gLogObj;
    if (os_log_type_enabled(v272, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_l4s_denominator_old1;
      _os_log_impl(&dword_1830D4000, v272, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v273 = [NSString stringWithUTF8String:nw_setting_enable_l4s_denominator_old1];
    [v6 setObject:0 forKeyedSubscript:v273];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v274 = (id)gLogObj;
    if (os_log_type_enabled(v274, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_l4s_numerator;
      _os_log_impl(&dword_1830D4000, v274, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v275 = [NSString stringWithUTF8String:nw_setting_enable_l4s_numerator];
    [v6 setObject:0 forKeyedSubscript:v275];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v276 = (id)gLogObj;
    if (os_log_type_enabled(v276, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_l4s_denominator;
      _os_log_impl(&dword_1830D4000, v276, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v277 = [NSString stringWithUTF8String:nw_setting_enable_l4s_denominator];
    [v6 setObject:0 forKeyedSubscript:v277];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v278 = (id)gLogObj;
    if (os_log_type_enabled(v278, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_accurate_ecn_numerator_old1;
      _os_log_impl(&dword_1830D4000, v278, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v279 = [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_numerator_old1];
    [v6 setObject:0 forKeyedSubscript:v279];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v280 = (id)gLogObj;
    if (os_log_type_enabled(v280, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_accurate_ecn_denominator_old1;
      _os_log_impl(&dword_1830D4000, v280, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v281 = [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_denominator_old1];
    [v6 setObject:0 forKeyedSubscript:v281];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v282 = (id)gLogObj;
    if (os_log_type_enabled(v282, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_accurate_ecn_numerator;
      _os_log_impl(&dword_1830D4000, v282, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v283 = [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_numerator];
    [v6 setObject:0 forKeyedSubscript:v283];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v284 = (id)gLogObj;
    if (os_log_type_enabled(v284, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_accurate_ecn_denominator;
      _os_log_impl(&dword_1830D4000, v284, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v285 = [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_denominator];
    [v6 setObject:0 forKeyedSubscript:v285];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v286 = (id)gLogObj;
    if (os_log_type_enabled(v286, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_tcp_l4s_numerator;
      _os_log_impl(&dword_1830D4000, v286, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v287 = [NSString stringWithUTF8String:nw_setting_enable_tcp_l4s_numerator];
    [v6 setObject:0 forKeyedSubscript:v287];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v288 = (id)gLogObj;
    if (os_log_type_enabled(v288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_tcp_l4s_denominator;
      _os_log_impl(&dword_1830D4000, v288, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v289 = [NSString stringWithUTF8String:nw_setting_enable_tcp_l4s_denominator];
    [v6 setObject:0 forKeyedSubscript:v289];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v290 = (id)gLogObj;
    if (os_log_type_enabled(v290, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_disable_l4s_aqm;
      _os_log_impl(&dword_1830D4000, v290, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v291 = [NSString stringWithUTF8String:nw_setting_disable_l4s_aqm];
    [v6 setObject:0 forKeyedSubscript:v291];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v292 = (id)gLogObj;
    if (os_log_type_enabled(v292, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_unified_http_numerator;
      _os_log_impl(&dword_1830D4000, v292, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v293 = [NSString stringWithUTF8String:nw_setting_enable_unified_http_numerator];
    [v6 setObject:0 forKeyedSubscript:v293];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v294 = (id)gLogObj;
    if (os_log_type_enabled(v294, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_unified_http_denominator;
      _os_log_impl(&dword_1830D4000, v294, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v295 = [NSString stringWithUTF8String:nw_setting_enable_unified_http_denominator];
    [v6 setObject:0 forKeyedSubscript:v295];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v296 = (id)gLogObj;
    if (os_log_type_enabled(v296, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_unified_http_numerator_old;
      _os_log_impl(&dword_1830D4000, v296, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v297 = [NSString stringWithUTF8String:nw_setting_enable_unified_http_numerator_old];
    [v6 setObject:0 forKeyedSubscript:v297];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v298 = (id)gLogObj;
    if (os_log_type_enabled(v298, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      v324 = (const char *)nw_setting_enable_unified_http_denominator_old;
      _os_log_impl(&dword_1830D4000, v298, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    v299 = [NSString stringWithUTF8String:nw_setting_enable_unified_http_denominator_old];
    [v6 setObject:0 forKeyedSubscript:v299];
  }
  v300 = objc_msgSend(v3, "description", v313);
  v301 = [v300 stringByReplacingOccurrencesOfString:@"\n" withString:&stru_1ECF695B0];

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v302 = (id)gLogObj;
  if (os_log_type_enabled(v302, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 136446466;
    v322 = "addNewNetworkdSettings";
    __int16 v323 = 2112;
    v324 = v301;
    _os_log_impl(&dword_1830D4000, v302, OS_LOG_TYPE_INFO, "%{public}s Overriding with new settings %@", buf, 0x16u);
  }

  long long v318 = 0u;
  long long v319 = 0u;
  long long v316 = 0u;
  long long v317 = 0u;
  id v303 = v3;
  uint64_t v304 = [v303 countByEnumeratingWithState:&v316 objects:v320 count:16];
  if (v304)
  {
    uint64_t v305 = v304;
    uint64_t v306 = *(void *)v317;
    do
    {
      for (uint64_t i = 0; i != v305; ++i)
      {
        if (*(void *)v317 != v306) {
          objc_enumerationMutation(v303);
        }
        uint64_t v308 = *(void *)(*((void *)&v316 + 1) + 8 * i);
        v309 = [v303 objectForKeyedSubscript:v308];
        [v6 setObject:v309 forKeyedSubscript:v308];
      }
      uint64_t v305 = [v303 countByEnumeratingWithState:&v316 objects:v320 count:16];
    }
    while (v305);
  }

  v310 = [v6 description];
  v311 = [v310 stringByReplacingOccurrencesOfString:@"\n" withString:&stru_1ECF695B0];

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v312 = (id)gLogObj;
  if (os_log_type_enabled(v312, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 136446466;
    v322 = "addNewNetworkdSettings";
    __int16 v323 = 2112;
    v324 = v311;
    _os_log_impl(&dword_1830D4000, v312, OS_LOG_TYPE_INFO, "%{public}s Created new networkd settings %@", buf, 0x16u);
  }

  if (![v6 count])
  {

    uint64_t v6 = 0;
  }
  saveAndPostNetworkdSettings(v6, v314, int64);
}

void __runProbes_block_invoke(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (gRunningProbes != 1)
  {
    gRunningProbes = 1;
    id v4 = +[ManagedNetworkSettings sharedMNS];
    id v5 = [v4 queue];
    dispatch_assert_queue_V2(v5);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nwphResetProbesOnQueue";
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Resetting ECH settings", buf, 0xCu);
    }

    id v7 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:1];
    uint64_t v8 = [NSString stringWithUTF8String:nw_setting_ech_probe_enabled];
    [v7 setValue:MEMORY[0x1E4F1CC28] forKey:v8];

    addNewNetworkdSettings(v7, 0);
    id v9 = *(id *)(a1 + 32);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    os_log_type_t v11 = v10;
    if (v9)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunProbes";
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s starting network probes", buf, 0xCu);
      }

      uint32_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_ech_canary_numerator, 0);
      uint32_t v13 = networkd_settings_get_int64_with_default((const char *)nw_setting_ech_canary_denominator, 0);
      uint32_t v14 = arc4random_uniform(v13);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = (id)gLogObj;
      BOOL v16 = v15;
      if (v14 >= int64_with_default)
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nwphRunProbes";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v9;
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s Not selected to run ECH canary. Finished with transaction %@", buf, 0x16u);
        }

        gRunningProbes = 0;
      }
      else
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nwphShouldRunECHCanaryProbe";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = int64_with_default;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v13;
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s ECH canary sampled at %u / %u", buf, 0x18u);
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = (id)gLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nwphRunProbes";
          _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s Running ECH canary probe", buf, 0xCu);
        }

        id v18 = nw_activity_create(40, 1);
        nw_activity_activate(v18);
        *(void *)int buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __nwphRunProbes_block_invoke;
        __int16 v31 = &unk_1E5248C78;
        id v32 = v18;
        id v33 = v9;
        uint64_t v19 = v18;
        nwphRunECHProbes(1, v19, buf);
      }
LABEL_19:

      return;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nwphRunProbes";
    uint64_t v20 = _os_log_send_and_compose_impl();
    os_log_type_t v21 = v11;
    uint64_t v22 = (void *)v20;

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault((const char *)v22, &type, &v28))
    {
LABEL_36:
      if (v22) {
        free(v22);
      }
      goto LABEL_19;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunProbes";
        char v25 = "%{public}s called with null transaction";
LABEL_34:
        _os_log_impl(&dword_1830D4000, v23, v24, v25, buf, 0xCu);
      }
    }
    else
    {
      if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        BOOL v27 = os_log_type_enabled(v23, type);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nwphRunProbes";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null transaction, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (!v27) {
          goto LABEL_35;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunProbes";
        char v25 = "%{public}s called with null transaction, no backtrace";
        goto LABEL_34;
      }
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunProbes";
        char v25 = "%{public}s called with null transaction, backtrace limit exceeded";
        goto LABEL_34;
      }
    }
LABEL_35:

    goto LABEL_36;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "runProbes_block_invoke";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v3;
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s Already running probes, skipping. Finished with transaction %@", buf, 0x16u);
  }
}

void __nwphRunProbes_block_invoke(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __nwphRunProbes_block_invoke_2;
    v5[3] = &unk_1E5248C78;
    id v6 = v3;
    id v7 = *(id *)(a1 + 40);
    nwphRunECHProbes(0, v6, v5);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      id v9 = "nwphRunProbes_block_invoke";
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s ECH local probes failed, saving", buf, 0xCu);
    }

    nwphProbesComplete(0, *(void **)(a1 + 32), *(void **)(a1 + 40));
  }
}

void nwphRunECHProbes(int a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  uint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      id v9 = "generic";
      if (a1) {
        id v9 = "regional";
      }
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nwphRunECHProbes";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v9;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s starting %{public}s network probes", buf, 0x16u);
    }

    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v35 = 0;
    v32[0] = 0;
    v32[1] = v32;
    v32[2] = 0x2020000000;
    char v33 = 0;
    v30[0] = 0;
    v30[1] = v30;
    v30[2] = 0x2020000000;
    char v31 = 0;
    if (a1) {
      int v10 = 2;
    }
    else {
      int v10 = 5;
    }
    if (a1) {
      os_log_type_t v11 = @"https://croissant.cdn-apple.com";
    }
    else {
      os_log_type_t v11 = @"https://croissant.edge.apple";
    }
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x2020000000;
    int v29 = v10;
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __nwphRunECHProbes_block_invoke;
    v19[3] = &unk_1E523D770;
    char v27 = a1;
    os_log_type_t v23 = buf;
    os_log_type_t v24 = v28;
    uint64_t v20 = v11;
    id v21 = v5;
    char v25 = v32;
    BOOL v26 = v30;
    id v22 = v6;
    nwphRunProbe(v11, 0, v21, v10, v19);

    _Block_object_dispose(v28, 8);
    _Block_object_dispose(v30, 8);
    _Block_object_dispose(v32, 8);
    _Block_object_dispose(buf, 8);
    goto LABEL_13;
  }
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nwphRunECHProbes";
  uint64_t v12 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v32[0]) = 16;
  LOBYTE(v30[0]) = 0;
  if (__nwlog_fault(v12, v32, v30))
  {
    if (LOBYTE(v32[0]) == 17)
    {
      uint32_t v13 = __nwlog_obj();
      os_log_type_t v14 = v32[0];
      if (os_log_type_enabled(v13, v32[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunECHProbes";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parent_activity", buf, 0xCu);
      }
    }
    else if (LOBYTE(v30[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint32_t v13 = __nwlog_obj();
      os_log_type_t v16 = v32[0];
      BOOL v17 = os_log_type_enabled(v13, v32[0]);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nwphRunECHProbes";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parent_activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunECHProbes";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parent_activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint32_t v13 = __nwlog_obj();
      os_log_type_t v18 = v32[0];
      if (os_log_type_enabled(v13, v32[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunECHProbes";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parent_activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_30:
  if (v12) {
    free(v12);
  }
  (*((void (**)(id, void))v6 + 2))(v6, 0);
LABEL_13:
}

void sub_1837E7DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void __nwphRunECHProbes_block_invoke(uint64_t a1, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v5)
    {
      id v6 = "regional";
      if (!*(unsigned char *)(a1 + 88)) {
        id v6 = "generic";
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v24 = "nwphRunECHProbes_block_invoke";
      __int16 v25 = 2082;
      BOOL v26 = v6;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s First %{public}s ECH probe succeeded, starting second", buf, 0x16u);
    }

    if (*(unsigned char *)(a1 + 88)) {
      int v7 = 3;
    }
    else {
      int v7 = 6;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v7;
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    v16[0] = MEMORY[0x1E4F143A8];
    char v10 = *(unsigned char *)(a1 + 88);
    int8x16_t v11 = vextq_s8(*(int8x16_t *)(a1 + 64), *(int8x16_t *)(a1 + 64), 8uLL);
    int v12 = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    v16[1] = 3221225472;
    v16[2] = __nwphRunECHProbes_block_invoke_527;
    v16[3] = &unk_1E523D748;
    char v22 = v10;
    int8x16_t v20 = v11;
    id v17 = v8;
    id v13 = *(id *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 80);
    id v18 = v13;
    uint64_t v21 = v14;
    id v19 = *(id *)(a1 + 48);
    nwphRunProbe(v17, 1, v9, v12, v16);
  }
  else
  {
    if (v5)
    {
      os_log_type_t v15 = "regional";
      if (!*(unsigned char *)(a1 + 88)) {
        os_log_type_t v15 = "generic";
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v24 = "nwphRunECHProbes_block_invoke";
      __int16 v25 = 2082;
      BOOL v26 = v15;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s First %{public}s ECH probe failed", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void nwphRunProbe(void *a1, int a2, void *a3, int a4, void *a5)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a3;
  id v11 = a5;
  int v12 = (void (**)(void, void))v11;
  if (!v9)
  {
    uint64_t v30 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint32_t v57 = "nwphRunProbe";
    char v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v31, &type, &v54)) {
      goto LABEL_86;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v54)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        BOOL v43 = os_log_type_enabled(v32, type);
        if (backtrace_string)
        {
          if (v43)
          {
            *(_DWORD *)int buf = 136446466;
            uint32_t v57 = "nwphRunProbe";
            __int16 v58 = 2082;
            uint64_t v59 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null probeTarget, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_86:
          if (!v31)
          {
LABEL_88:
            v12[2](v12, 0);
            goto LABEL_24;
          }
LABEL_87:
          free(v31);
          goto LABEL_88;
        }
        if (v43)
        {
          *(_DWORD *)int buf = 136446210;
          uint32_t v57 = "nwphRunProbe";
          uint64_t v34 = "%{public}s called with null probeTarget, no backtrace";
          goto LABEL_84;
        }
      }
      else
      {
        id v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint32_t v57 = "nwphRunProbe";
          uint64_t v34 = "%{public}s called with null probeTarget, backtrace limit exceeded";
          goto LABEL_84;
        }
      }
      goto LABEL_85;
    }
    id v32 = __nwlog_obj();
    os_log_type_t v33 = type;
    if (!os_log_type_enabled(v32, type)) {
      goto LABEL_85;
    }
    *(_DWORD *)int buf = 136446210;
    uint32_t v57 = "nwphRunProbe";
    uint64_t v34 = "%{public}s called with null probeTarget";
    goto LABEL_84;
  }
  if (!v10)
  {
    char v35 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint32_t v57 = "nwphRunProbe";
    char v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v31, &type, &v54)) {
      goto LABEL_86;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v54)
      {
        id v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint32_t v57 = "nwphRunProbe";
          uint64_t v34 = "%{public}s called with null parent_activity, backtrace limit exceeded";
          goto LABEL_84;
        }
        goto LABEL_85;
      }
      uint64_t v44 = (char *)__nw_create_backtrace_string();
      id v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v45 = os_log_type_enabled(v32, type);
      if (!v44)
      {
        if (v45)
        {
          *(_DWORD *)int buf = 136446210;
          uint32_t v57 = "nwphRunProbe";
          uint64_t v34 = "%{public}s called with null parent_activity, no backtrace";
          goto LABEL_84;
        }
        goto LABEL_85;
      }
      if (v45)
      {
        *(_DWORD *)int buf = 136446466;
        uint32_t v57 = "nwphRunProbe";
        __int16 v58 = 2082;
        uint64_t v59 = v44;
        uint32_t v46 = "%{public}s called with null parent_activity, dumping backtrace:%{public}s";
LABEL_62:
        _os_log_impl(&dword_1830D4000, v32, v33, v46, buf, 0x16u);
      }
LABEL_63:

      free(v44);
      if (!v31) {
        goto LABEL_88;
      }
      goto LABEL_87;
    }
    id v32 = __nwlog_obj();
    os_log_type_t v33 = type;
    if (!os_log_type_enabled(v32, type)) {
      goto LABEL_85;
    }
    *(_DWORD *)int buf = 136446210;
    uint32_t v57 = "nwphRunProbe";
    uint64_t v34 = "%{public}s called with null parent_activity";
LABEL_84:
    _os_log_impl(&dword_1830D4000, v32, v33, v34, buf, 0xCu);
    goto LABEL_85;
  }
  if (!a4)
  {
    uint64_t v36 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint32_t v57 = "nwphRunProbe";
    char v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v31, &type, &v54)) {
      goto LABEL_86;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v57 = "nwphRunProbe";
        uint64_t v34 = "%{public}s called with null label";
        goto LABEL_84;
      }
LABEL_85:

      goto LABEL_86;
    }
    if (!v54)
    {
      id v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v57 = "nwphRunProbe";
        uint64_t v34 = "%{public}s called with null label, backtrace limit exceeded";
        goto LABEL_84;
      }
      goto LABEL_85;
    }
    uint64_t v44 = (char *)__nw_create_backtrace_string();
    id v32 = __nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v47 = os_log_type_enabled(v32, type);
    if (!v44)
    {
      if (v47)
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v57 = "nwphRunProbe";
        uint64_t v34 = "%{public}s called with null label, no backtrace";
        goto LABEL_84;
      }
      goto LABEL_85;
    }
    if (v47)
    {
      *(_DWORD *)int buf = 136446466;
      uint32_t v57 = "nwphRunProbe";
      __int16 v58 = 2082;
      uint64_t v59 = v44;
      uint32_t v46 = "%{public}s called with null label, dumping backtrace:%{public}s";
      goto LABEL_62;
    }
    goto LABEL_63;
  }
  if (v11)
  {
    id v13 = [MEMORY[0x1E4F18DD0] ephemeralSessionConfiguration];
    [v13 setHTTPCookieStorage:0];
    [v13 setURLCache:0];
    if (a2) {
      objc_msgSend(v13, "set_allowsTLSECH:", 1);
    }
    uint64_t v14 = [MEMORY[0x1E4F18DC0] sessionWithConfiguration:v13];
    os_log_type_t v15 = [MEMORY[0x1E4F1CB10] URLWithString:v9];
    if (v15)
    {
      os_log_type_t v16 = nw_activity_create(40, a4);
      nw_activity_set_parent_activity(v16, v10);
      nw_activity_activate(v16);
      v50[0] = MEMORY[0x1E4F143A8];
      v50[1] = 3221225472;
      v50[2] = __nwphRunProbe_block_invoke;
      v50[3] = &unk_1E523D798;
      id v17 = v16;
      id v51 = v17;
      id v53 = v12;
      id v52 = v14;
      id v18 = [v52 dataTaskWithURL:v15 completionHandler:v50];
      objc_msgSend(v18, "set_nw_activity:", v17);
      [v18 resume];
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        uint32_t v57 = "nwphRunProbe";
        __int16 v58 = 2112;
        uint64_t v59 = v9;
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s started probe to %@", buf, 0x16u);
      }

      goto LABEL_23;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v20 = (id)gLogObj;
    *(_DWORD *)int buf = 136446466;
    uint32_t v57 = "nwphRunProbe";
    __int16 v58 = 2112;
    uint64_t v59 = v9;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v21, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v22 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_29;
        }
        *(_DWORD *)int buf = 136446466;
        uint32_t v57 = "nwphRunProbe";
        __int16 v58 = 2112;
        uint64_t v59 = v9;
        os_log_type_t v24 = "%{public}s URLWithString %@ failed";
LABEL_27:
        char v28 = v22;
        os_log_type_t v29 = v23;
        goto LABEL_28;
      }
      if (!v54)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v22 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_29;
        }
        *(_DWORD *)int buf = 136446466;
        uint32_t v57 = "nwphRunProbe";
        __int16 v58 = 2112;
        uint64_t v59 = v9;
        os_log_type_t v24 = "%{public}s URLWithString %@ failed, backtrace limit exceeded";
        goto LABEL_27;
      }
      __int16 v25 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v22 = (id)gLogObj;
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v22, type);
      if (!v25)
      {
        if (!v27)
        {
LABEL_29:

          if (!v21) {
            goto LABEL_22;
          }
          goto LABEL_21;
        }
        *(_DWORD *)int buf = 136446466;
        uint32_t v57 = "nwphRunProbe";
        __int16 v58 = 2112;
        uint64_t v59 = v9;
        os_log_type_t v24 = "%{public}s URLWithString %@ failed, no backtrace";
        char v28 = v22;
        os_log_type_t v29 = v26;
LABEL_28:
        _os_log_impl(&dword_1830D4000, v28, v29, v24, buf, 0x16u);
        goto LABEL_29;
      }
      if (v27)
      {
        *(_DWORD *)int buf = 136446722;
        uint32_t v57 = "nwphRunProbe";
        __int16 v58 = 2112;
        uint64_t v59 = v9;
        __int16 v60 = 2082;
        uint32_t v61 = v25;
        _os_log_impl(&dword_1830D4000, v22, v26, "%{public}s URLWithString %@ failed, dumping backtrace:%{public}s", buf, 0x20u);
      }

      free(v25);
    }
    if (!v21)
    {
LABEL_22:
      v12[2](v12, 0);
LABEL_23:

      goto LABEL_24;
    }
LABEL_21:
    free(v21);
    goto LABEL_22;
  }
  __int16 v37 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint32_t v57 = "nwphRunProbe";
  id v38 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v54 = 0;
  if (__nwlog_fault(v38, &type, &v54))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v57 = "nwphRunProbe";
        __int16 v41 = "%{public}s called with null completion";
LABEL_91:
        _os_log_impl(&dword_1830D4000, v39, v40, v41, buf, 0xCu);
      }
    }
    else
    {
      if (v54)
      {
        uint32_t v48 = (char *)__nw_create_backtrace_string();
        __int16 v39 = __nwlog_obj();
        os_log_type_t v40 = type;
        BOOL v49 = os_log_type_enabled(v39, type);
        if (v48)
        {
          if (v49)
          {
            *(_DWORD *)int buf = 136446466;
            uint32_t v57 = "nwphRunProbe";
            __int16 v58 = 2082;
            uint64_t v59 = v48;
            _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v48);
          goto LABEL_93;
        }
        if (!v49) {
          goto LABEL_92;
        }
        *(_DWORD *)int buf = 136446210;
        uint32_t v57 = "nwphRunProbe";
        __int16 v41 = "%{public}s called with null completion, no backtrace";
        goto LABEL_91;
      }
      __int16 v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v57 = "nwphRunProbe";
        __int16 v41 = "%{public}s called with null completion, backtrace limit exceeded";
        goto LABEL_91;
      }
    }
LABEL_92:
  }
LABEL_93:
  if (v38) {
    free(v38);
  }
LABEL_24:
}

void __nwphRunProbe_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = (id)gLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v18 = 136446210;
    id v19 = "nwphRunProbe_block_invoke";
    _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s Probe complete", (uint8_t *)&v18, 0xCu);
  }

  if (v9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v18 = 136446466;
      id v19 = "nwphRunProbe_block_invoke";
      __int16 v20 = 2112;
      id v21 = v9;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s Got error: %@", (uint8_t *)&v18, 0x16u);
    }
  }
  if (!v8) {
    goto LABEL_20;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v12 = (id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    int v18 = 136446466;
    id v19 = "nwphRunProbe_block_invoke";
    __int16 v20 = 2112;
    id v21 = v8;
    _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s Got response: %@", (uint8_t *)&v18, 0x16u);
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_20;
  }
  id v13 = v8;
  if ([v13 statusCode] != 200)
  {

LABEL_20:
    os_log_type_t v16 = *(void **)(a1 + 32);
    if (v9)
    {
      id v17 = [v9 domain];
      nw_activity_complete_with_reason_and_underlying_error(v16, 3u, (int)v17, [v9 code]);
    }
    else
    {
      nw_activity_complete_with_reason_and_underlying_error(*(void **)(a1 + 32), 3u, 0, 0);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    [*(id *)(a1 + 40) invalidateAndCancel];
    goto LABEL_24;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v14 = (id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    int v18 = 136446210;
    id v19 = "nwphRunProbe_block_invoke";
    _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s Got back 200 OK", (uint8_t *)&v18, 0xCu);
  }

  if (v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      int v18 = 136446466;
      id v19 = "nwphRunProbe_block_invoke";
      __int16 v20 = 2112;
      id v21 = v7;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s Got back data: %@", (uint8_t *)&v18, 0x16u);
    }
  }
  nw_activity_complete_with_reason(*(void **)(a1 + 32), 2u);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  [*(id *)(a1 + 40) invalidateAndCancel];

LABEL_24:
}

void __nwphRunECHProbes_block_invoke_527(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v5)
    {
      id v6 = "regional";
      if (!*(unsigned char *)(a1 + 80)) {
        id v6 = "generic";
      }
      *(_DWORD *)int buf = 136446466;
      id v17 = "nwphRunECHProbes_block_invoke";
      __int16 v18 = 2082;
      id v19 = v6;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s Second %{public}s ECH probe succeeded, starting third", buf, 0x16u);
    }

    if (*(unsigned char *)(a1 + 80)) {
      int v7 = 4;
    }
    else {
      int v7 = 7;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v7;
    id v8 = *(void **)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nwphRunECHProbes_block_invoke_528;
    v12[3] = &unk_1E523D720;
    uint64_t v14 = *(void *)(a1 + 72);
    char v15 = *(unsigned char *)(a1 + 80);
    id v13 = *(id *)(a1 + 48);
    nwphRunProbe(v8, 0, v9, v10, v12);
  }
  else
  {
    if (v5)
    {
      id v11 = "regional";
      if (!*(unsigned char *)(a1 + 80)) {
        id v11 = "generic";
      }
      *(_DWORD *)int buf = 136446466;
      id v17 = "nwphRunECHProbes_block_invoke";
      __int16 v18 = 2082;
      id v19 = v11;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s Second %{public}s ECH probe failed", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t __nwphRunECHProbes_block_invoke_528(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v5)
    {
      id v6 = "regional";
      if (!*(unsigned char *)(a1 + 48)) {
        id v6 = "generic";
      }
      int v9 = 136446466;
      int v10 = "nwphRunECHProbes_block_invoke";
      __int16 v11 = 2082;
      int v12 = v6;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s Third %{public}s ECH probe succeeded", (uint8_t *)&v9, 0x16u);
    }
  }
  else if (v5)
  {
    int v7 = "regional";
    if (!*(unsigned char *)(a1 + 48)) {
      int v7 = "generic";
    }
    int v9 = 136446466;
    int v10 = "nwphRunECHProbes_block_invoke";
    __int16 v11 = 2082;
    int v12 = v7;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s Third %{public}s ECH probe failed", (uint8_t *)&v9, 0x16u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __nwphRunProbes_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    BOOL v5 = "failed";
    if (a2) {
      BOOL v5 = "succeeded";
    }
    int v6 = 136446466;
    int v7 = "nwphRunProbes_block_invoke_2";
    __int16 v8 = 2082;
    int v9 = v5;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s ECH probes %{public}s, saving", (uint8_t *)&v6, 0x16u);
  }

  nwphProbesComplete(a2, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void nwphProbesComplete(char a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  int v7 = v6;
  if (!v5)
  {
    uint64_t v10 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nwphProbesComplete";
    __int16 v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v11, &type, &v28)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphProbesComplete";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parent_activity", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nwphProbesComplete";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null parent_activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v11) {
          goto LABEL_4;
        }
LABEL_39:
        free(v11);
        goto LABEL_4;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphProbesComplete";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null parent_activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphProbesComplete";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null parent_activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v6)
  {
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    char v31 = __Block_byref_object_copy__24069;
    id v32 = __Block_byref_object_dispose__24070;
    id v33 = v6;
    id v8 = +[ManagedNetworkSettings sharedMNS];
    int v9 = [v8 queue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __nwphProbesComplete_block_invoke;
    block[3] = &unk_1E524A130;
    char v27 = a1;
    id v25 = v5;
    os_log_type_t v26 = buf;
    dispatch_async(v9, block);

    _Block_object_dispose(buf, 8);
    goto LABEL_4;
  }
  uint64_t v14 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nwphProbesComplete";
  __int16 v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (!__nwlog_fault(v11, &type, &v28)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nwphProbesComplete";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null transaction", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v28)
  {
    int v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nwphProbesComplete";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  id v19 = (char *)__nw_create_backtrace_string();
  int v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nwphProbesComplete";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v21)
  {
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nwphProbesComplete";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_1837E9B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24069(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24070(uint64_t a1)
{
}

void __nwphProbesComplete_block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:1];
  uint64_t v3 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
  id v4 = [NSString stringWithUTF8String:nw_setting_ech_probe_enabled];
  [v2 setValue:v3 forKey:v4];

  addNewNetworkdSettings(v2, 0);
  if (*(unsigned char *)(a1 + 48)) {
    uint32_t v5 = 2;
  }
  else {
    uint32_t v5 = 3;
  }
  nw_activity_complete_with_reason(*(void **)(a1 + 32), v5);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    int v11 = 136446722;
    int v12 = "nwphProbesComplete_block_invoke";
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 2112;
    uint64_t v16 = v8;
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s Probes complete (success: %u). Finished with transaction %@", (uint8_t *)&v11, 0x1Cu);
  }

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = 0;

  gRunningProbes = 0;
}

uint64_t network_config_cellular_blocked_observer_create(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136446210;
    int v7 = "network_config_cellular_blocked_observer_create";
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s creating cellular blocked observer", (uint8_t *)&v6, 0xCu);
  }
  return network_config_policy_observer_create(1, a1, a2);
}

uint64_t network_config_policy_observer_create(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (a3)
    {
      *(void *)int buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      uint64_t v21 = 0;
      if (nw_policy_event_queue(void)::onceToken != -1) {
        dispatch_once(&nw_policy_event_queue(void)::onceToken, &__block_literal_global_24084);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ___ZL37network_config_policy_observer_create34network_config_policy_event_type_tP16dispatch_queue_sU13block_pointerFvPvS2_S2_E_block_invoke;
      block[3] = &unk_1E523D9E8;
      int v17 = a1;
      block[5] = buf;
      block[6] = a2;
      void block[4] = a3;
      dispatch_sync((dispatch_queue_t)nw_policy_event_queue(void)::queue, block);
      uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      return v6;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_policy_observer_create";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v8, &v19, &v18)) {
      goto LABEL_34;
    }
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = v19;
      if (os_log_type_enabled(v9, v19))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_policy_observer_create";
        int v11 = "%{public}s called with null block";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v18)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = v19;
      if (os_log_type_enabled(v9, v19))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_policy_observer_create";
        int v11 = "%{public}s called with null block, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = v19;
    BOOL v15 = os_log_type_enabled(v9, v19);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_policy_observer_create";
        int v11 = "%{public}s called with null block, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v15)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "network_config_policy_observer_create";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      int v14 = "%{public}s called with null block, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "network_config_policy_observer_create";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v19 = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (!__nwlog_fault(v8, &v19, &v18)) {
    goto LABEL_34;
  }
  if (v19 != OS_LOG_TYPE_FAULT)
  {
    if (!v18)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = v19;
      if (os_log_type_enabled(v9, v19))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_policy_observer_create";
        int v11 = "%{public}s called with null queue, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = v19;
    BOOL v13 = os_log_type_enabled(v9, v19);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_policy_observer_create";
        int v11 = "%{public}s called with null queue, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v13)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "network_config_policy_observer_create";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      int v14 = "%{public}s called with null queue, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_1830D4000, v9, v10, v14, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v10 = v19;
  if (os_log_type_enabled(v9, v19))
  {
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_policy_observer_create";
    int v11 = "%{public}s called with null queue";
LABEL_33:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
  }
LABEL_34:
  if (v8) {
    free(v8);
  }
  return 0;
}

void ___ZL37network_config_policy_observer_create34network_config_policy_event_type_tP16dispatch_queue_sU13block_pointerFvPvS2_S2_E_block_invoke(uint64_t a1)
{
  *(void *)&v71[13] = *MEMORY[0x1E4F143B8];
  if (network_config_setup_policy_event_watcher(void)::kevsrc)
  {
    id v2 = *(NSObject **)(a1 + 48);
    if (v2)
    {
LABEL_3:
      uint64_t v3 = *(const void **)(a1 + 32);
      if (v3)
      {
        int v4 = *(_DWORD *)(a1 + 56);
        if ((v4 - 1) >= 4)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v16 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v4;
            _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s Invalid policy event type %u", buf, 0x12u);
          }
          goto LABEL_110;
        }
        uint32_t v5 = (xpc_object_t *)off_1E523DB18[v4 - 1];
        if (*v5 || (v6 = xpc_array_create(0, 0), (*uint32_t v5 = v6) != 0))
        {
          xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
          if (v7)
          {
            uint64_t v8 = v7;
            _Block_copy(v3);
            dispatch_retain(v2);
            xpc_dictionary_set_pointer();
            xpc_dictionary_set_pointer();
            xpc_array_append_value(*v5, v8);
LABEL_111:
            *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v8;
            return;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
          uint64_t v22 = (char *)_os_log_send_and_compose_impl();
          handler[0] = OS_LOG_TYPE_ERROR;
          v68[0] = 0;
          if (!__nwlog_fault(v22, handler, v68)) {
            goto LABEL_108;
          }
          if (handler[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v23 = gLogObj;
            os_log_type_t v24 = handler[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, handler[0])) {
              goto LABEL_108;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
            id v25 = "%{public}s xpc_dictionary_create failed";
            goto LABEL_106;
          }
          if (!v68[0])
          {
            os_log_type_t v23 = __nwlog_obj();
            os_log_type_t v24 = handler[0];
            if (!os_log_type_enabled(v23, handler[0])) {
              goto LABEL_108;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
            id v25 = "%{public}s xpc_dictionary_create failed, backtrace limit exceeded";
            goto LABEL_106;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v32 = gLogObj;
          os_log_type_t v33 = handler[0];
          BOOL v34 = os_log_type_enabled((os_log_t)gLogObj, handler[0]);
          if (backtrace_string)
          {
            if (v34)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_108;
          }
          if (v34)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
            id v25 = "%{public}s xpc_dictionary_create failed, no backtrace";
            BOOL v47 = v32;
            os_log_type_t v48 = v33;
LABEL_107:
            _os_log_impl(&dword_1830D4000, v47, v48, v25, buf, 0xCu);
          }
LABEL_108:
          if (v22) {
            free(v22);
          }
LABEL_110:
          uint64_t v8 = 0;
          goto LABEL_111;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        handler[0] = OS_LOG_TYPE_ERROR;
        v68[0] = 0;
        if (!__nwlog_fault(v22, handler, v68)) {
          goto LABEL_108;
        }
        if (handler[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v23 = gLogObj;
          os_log_type_t v24 = handler[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, handler[0])) {
            goto LABEL_108;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
          id v25 = "%{public}s xpc_array_create failed";
          goto LABEL_106;
        }
        if (!v68[0])
        {
          os_log_type_t v23 = __nwlog_obj();
          os_log_type_t v24 = handler[0];
          if (!os_log_type_enabled(v23, handler[0])) {
            goto LABEL_108;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
          id v25 = "%{public}s xpc_array_create failed, backtrace limit exceeded";
          goto LABEL_106;
        }
        uint64_t v42 = (char *)__nw_create_backtrace_string();
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = handler[0];
        BOOL v43 = os_log_type_enabled(v23, handler[0]);
        if (!v42)
        {
          if (!v43) {
            goto LABEL_108;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
          id v25 = "%{public}s xpc_array_create failed, no backtrace";
          goto LABEL_106;
        }
        if (!v43)
        {
LABEL_73:
          free(v42);
          goto LABEL_108;
        }
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v42;
        uint64_t v44 = "%{public}s xpc_array_create failed, dumping backtrace:%{public}s";
LABEL_72:
        _os_log_impl(&dword_1830D4000, v23, v24, v44, buf, 0x16u);
        goto LABEL_73;
      }
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      handler[0] = OS_LOG_TYPE_ERROR;
      v68[0] = 0;
      if (!__nwlog_fault(v22, handler, v68)) {
        goto LABEL_108;
      }
      if (handler[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = handler[0];
        if (!os_log_type_enabled(v23, handler[0])) {
          goto LABEL_108;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
        id v25 = "%{public}s called with null block";
      }
      else if (v68[0])
      {
        uint64_t v42 = (char *)__nw_create_backtrace_string();
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = handler[0];
        BOOL v54 = os_log_type_enabled(v23, handler[0]);
        if (v42)
        {
          if (!v54) {
            goto LABEL_73;
          }
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v42;
          uint64_t v44 = "%{public}s called with null block, dumping backtrace:%{public}s";
          goto LABEL_72;
        }
        if (!v54) {
          goto LABEL_108;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
        id v25 = "%{public}s called with null block, no backtrace";
      }
      else
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = handler[0];
        if (!os_log_type_enabled(v23, handler[0])) {
          goto LABEL_108;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
        id v25 = "%{public}s called with null block, backtrace limit exceeded";
      }
LABEL_106:
      BOOL v47 = v23;
      os_log_type_t v48 = v24;
      goto LABEL_107;
    }
LABEL_53:
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    handler[0] = OS_LOG_TYPE_ERROR;
    v68[0] = 0;
    if (!__nwlog_fault(v22, handler, v68)) {
      goto LABEL_108;
    }
    if (handler[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = handler[0];
      if (!os_log_type_enabled(v23, handler[0])) {
        goto LABEL_108;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
      id v25 = "%{public}s called with null queue";
      goto LABEL_106;
    }
    if (v68[0])
    {
      uint64_t v42 = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = handler[0];
      BOOL v53 = os_log_type_enabled(v23, handler[0]);
      if (v42)
      {
        if (!v53) {
          goto LABEL_73;
        }
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v42;
        uint64_t v44 = "%{public}s called with null queue, dumping backtrace:%{public}s";
        goto LABEL_72;
      }
      if (!v53) {
        goto LABEL_108;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
      id v25 = "%{public}s called with null queue, no backtrace";
    }
    else
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = handler[0];
      if (!os_log_type_enabled(v23, handler[0])) {
        goto LABEL_108;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "network_config_add_policy_event_handler";
      id v25 = "%{public}s called with null queue, backtrace limit exceeded";
    }
    goto LABEL_106;
  }
  int v9 = socket(32, 3, 1);
  if ((v9 & 0x80000000) == 0)
  {
    unsigned int v10 = v9;
    int v64 = 3;
    *(void *)int64_t v63 = 0x100000001;
    if (ioctl(v9, 0x800C6502uLL, v63))
    {
      int v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)uint32_t v68 = 136446466;
      int v69 = "network_config_setup_policy_event_watcher";
      __int16 v70 = 1024;
      *(_DWORD *)uint32_t v71 = v11;
      int v12 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v62 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v12, type, &v62)) {
        goto LABEL_97;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v13 = gLogObj;
        os_log_type_t v14 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_97;
        }
        *(_DWORD *)uint32_t v68 = 136446466;
        int v69 = "network_config_setup_policy_event_watcher";
        __int16 v70 = 1024;
        *(_DWORD *)uint32_t v71 = v11;
        BOOL v15 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d";
LABEL_95:
        BOOL v49 = v13;
        os_log_type_t v50 = v14;
        uint32_t v51 = 18;
LABEL_96:
        _os_log_impl(&dword_1830D4000, v49, v50, v15, v68, v51);
        goto LABEL_97;
      }
      if (v62 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v13 = gLogObj;
        os_log_type_t v14 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_97;
        }
        *(_DWORD *)uint32_t v68 = 136446466;
        int v69 = "network_config_setup_policy_event_watcher";
        __int16 v70 = 1024;
        *(_DWORD *)uint32_t v71 = v11;
        BOOL v15 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_95;
      }
      char v27 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v13 = gLogObj;
      os_log_type_t v14 = type[0];
      BOOL v28 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (!v27)
      {
        if (!v28) {
          goto LABEL_97;
        }
        *(_DWORD *)uint32_t v68 = 136446466;
        int v69 = "network_config_setup_policy_event_watcher";
        __int16 v70 = 1024;
        *(_DWORD *)uint32_t v71 = v11;
        BOOL v15 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, no backtrace";
        goto LABEL_95;
      }
      if (v28)
      {
        *(_DWORD *)uint32_t v68 = 136446722;
        int v69 = "network_config_setup_policy_event_watcher";
        __int16 v70 = 1024;
        *(_DWORD *)uint32_t v71 = v11;
        v71[2] = 2082;
        *(void *)&v71[3] = v27;
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, dumping backtrace:%{public}s", v68, 0x1Cu);
      }
      free(v27);
LABEL_97:
      if (!v12)
      {
LABEL_99:
        close(v10);
        return;
      }
LABEL_98:
      free(v12);
      goto LABEL_99;
    }
    *(_DWORD *)os_log_type_t type = 1;
    if (ioctl(v10, 0x8004667EuLL, type))
    {
      int v26 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)uint32_t v68 = 136446466;
      int v69 = "network_config_setup_policy_event_watcher";
      __int16 v70 = 1024;
      *(_DWORD *)uint32_t v71 = v26;
      int v12 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v62 = OS_LOG_TYPE_ERROR;
      char v60 = 0;
      if (!__nwlog_fault(v12, &v62, &v60)) {
        goto LABEL_97;
      }
      if (v62 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v13 = gLogObj;
        os_log_type_t v14 = v62;
        if (!os_log_type_enabled((os_log_t)gLogObj, v62)) {
          goto LABEL_97;
        }
        *(_DWORD *)uint32_t v68 = 136446466;
        int v69 = "network_config_setup_policy_event_watcher";
        __int16 v70 = 1024;
        *(_DWORD *)uint32_t v71 = v26;
        BOOL v15 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d";
        goto LABEL_95;
      }
      if (!v60)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = v62;
        if (!os_log_type_enabled(v13, v62)) {
          goto LABEL_97;
        }
        *(_DWORD *)uint32_t v68 = 136446466;
        int v69 = "network_config_setup_policy_event_watcher";
        __int16 v70 = 1024;
        *(_DWORD *)uint32_t v71 = v26;
        BOOL v15 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_95;
      }
      uint64_t v36 = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = v62;
      BOOL v37 = os_log_type_enabled(v13, v62);
      if (!v36)
      {
        if (!v37) {
          goto LABEL_97;
        }
        *(_DWORD *)uint32_t v68 = 136446466;
        int v69 = "network_config_setup_policy_event_watcher";
        __int16 v70 = 1024;
        *(_DWORD *)uint32_t v71 = v26;
        BOOL v15 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, no backtrace";
        goto LABEL_95;
      }
      if (v37)
      {
        *(_DWORD *)uint32_t v68 = 136446722;
        int v69 = "network_config_setup_policy_event_watcher";
        __int16 v70 = 1024;
        *(_DWORD *)uint32_t v71 = v26;
        v71[2] = 2082;
        *(void *)&v71[3] = v36;
        id v38 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, dumping backtrace:%{public}s";
        __int16 v39 = v13;
        os_log_type_t v40 = v14;
        uint32_t v41 = 28;
LABEL_61:
        _os_log_impl(&dword_1830D4000, v39, v40, v38, v68, v41);
        goto LABEL_62;
      }
      goto LABEL_62;
    }
    if (nw_policy_event_queue(void)::onceToken != -1) {
      dispatch_once(&nw_policy_event_queue(void)::onceToken, &__block_literal_global_24084);
    }
    char v35 = dispatch_source_create(MEMORY[0x1E4F14478], v10, 0, (dispatch_queue_t)nw_policy_event_queue(void)::queue);
    network_config_setup_policy_event_watcher(void)::kevsrc = (uint64_t)v35;
    if (v35)
    {
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL41network_config_setup_policy_event_watcherv_block_invoke;
      uint32_t v66 = &__block_descriptor_tmp_10_24107;
      unsigned int v67 = v10;
      dispatch_source_set_cancel_handler(v35, buf);
      *(void *)handler = MEMORY[0x1E4F143A8];
      uint64_t v56 = 0x40000000;
      uint32_t v57 = ___ZL41network_config_setup_policy_event_watcherv_block_invoke_2;
      __int16 v58 = &__block_descriptor_tmp_12_24108;
      unsigned int v59 = v10;
      dispatch_source_set_event_handler((dispatch_source_t)network_config_setup_policy_event_watcher(void)::kevsrc, handler);
      dispatch_activate((dispatch_object_t)network_config_setup_policy_event_watcher(void)::kevsrc);
      id v2 = *(NSObject **)(a1 + 48);
      if (v2) {
        goto LABEL_3;
      }
      goto LABEL_53;
    }
    __nwlog_obj();
    *(_DWORD *)uint32_t v68 = 136446210;
    int v69 = "network_config_setup_policy_event_watcher";
    int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v62 = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (!__nwlog_fault(v12, &v62, &v60)) {
      goto LABEL_97;
    }
    if (v62 == OS_LOG_TYPE_FAULT)
    {
      BOOL v45 = __nwlog_obj();
      os_log_type_t v46 = v62;
      if (!os_log_type_enabled(v45, v62)) {
        goto LABEL_97;
      }
      *(_DWORD *)uint32_t v68 = 136446210;
      int v69 = "network_config_setup_policy_event_watcher";
      BOOL v15 = "%{public}s dispatch_source_create failed";
    }
    else if (v60)
    {
      uint64_t v36 = (char *)__nw_create_backtrace_string();
      BOOL v45 = __nwlog_obj();
      os_log_type_t v46 = v62;
      BOOL v52 = os_log_type_enabled(v45, v62);
      if (v36)
      {
        if (v52)
        {
          *(_DWORD *)uint32_t v68 = 136446466;
          int v69 = "network_config_setup_policy_event_watcher";
          __int16 v70 = 2082;
          *(void *)uint32_t v71 = v36;
          id v38 = "%{public}s dispatch_source_create failed, dumping backtrace:%{public}s";
          __int16 v39 = v45;
          os_log_type_t v40 = v46;
          uint32_t v41 = 22;
          goto LABEL_61;
        }
LABEL_62:
        free(v36);
        if (!v12) {
          goto LABEL_99;
        }
        goto LABEL_98;
      }
      if (!v52) {
        goto LABEL_97;
      }
      *(_DWORD *)uint32_t v68 = 136446210;
      int v69 = "network_config_setup_policy_event_watcher";
      BOOL v15 = "%{public}s dispatch_source_create failed, no backtrace";
    }
    else
    {
      BOOL v45 = __nwlog_obj();
      os_log_type_t v46 = v62;
      if (!os_log_type_enabled(v45, v62)) {
        goto LABEL_97;
      }
      *(_DWORD *)uint32_t v68 = 136446210;
      int v69 = "network_config_setup_policy_event_watcher";
      BOOL v15 = "%{public}s dispatch_source_create failed, backtrace limit exceeded";
    }
    BOOL v49 = v45;
    os_log_type_t v50 = v46;
    uint32_t v51 = 12;
    goto LABEL_96;
  }
  int v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)uint32_t v68 = 136446466;
  int v69 = "network_config_setup_policy_event_watcher";
  __int16 v70 = 1024;
  *(_DWORD *)uint32_t v71 = v17;
  char v18 = (char *)_os_log_send_and_compose_impl();
  v63[0] = OS_LOG_TYPE_ERROR;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v18, v63, type))
  {
    if (v63[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v19 = gLogObj;
      os_log_type_t v20 = v63[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v63[0])) {
        goto LABEL_81;
      }
      *(_DWORD *)uint32_t v68 = 136446466;
      int v69 = "network_config_setup_policy_event_watcher";
      __int16 v70 = 1024;
      *(_DWORD *)uint32_t v71 = v17;
      uint64_t v21 = "%{public}s socket(PF_SYSTEM, SOCK_RAW, SYSPROTO_EVENT) failed %{darwin.errno}d";
      goto LABEL_80;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v19 = gLogObj;
      os_log_type_t v20 = v63[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v63[0])) {
        goto LABEL_81;
      }
      *(_DWORD *)uint32_t v68 = 136446466;
      int v69 = "network_config_setup_policy_event_watcher";
      __int16 v70 = 1024;
      *(_DWORD *)uint32_t v71 = v17;
      uint64_t v21 = "%{public}s socket(PF_SYSTEM, SOCK_RAW, SYSPROTO_EVENT) failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_80;
    }
    os_log_type_t v29 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v19 = gLogObj;
    os_log_type_t v20 = v63[0];
    BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, v63[0]);
    if (v29)
    {
      if (v30)
      {
        *(_DWORD *)uint32_t v68 = 136446722;
        int v69 = "network_config_setup_policy_event_watcher";
        __int16 v70 = 1024;
        *(_DWORD *)uint32_t v71 = v17;
        v71[2] = 2082;
        *(void *)&v71[3] = v29;
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s socket(PF_SYSTEM, SOCK_RAW, SYSPROTO_EVENT) failed %{darwin.errno}d, dumping backtrace:%{public}s", v68, 0x1Cu);
      }
      free(v29);
      goto LABEL_81;
    }
    if (v30)
    {
      *(_DWORD *)uint32_t v68 = 136446466;
      int v69 = "network_config_setup_policy_event_watcher";
      __int16 v70 = 1024;
      *(_DWORD *)uint32_t v71 = v17;
      uint64_t v21 = "%{public}s socket(PF_SYSTEM, SOCK_RAW, SYSPROTO_EVENT) failed %{darwin.errno}d, no backtrace";
LABEL_80:
      _os_log_impl(&dword_1830D4000, v19, v20, v21, v68, 0x12u);
    }
  }
LABEL_81:
  if (v18) {
    free(v18);
  }
}

uint64_t ___ZL41network_config_setup_policy_event_watcherv_block_invoke(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void ___ZL41network_config_setup_policy_event_watcherv_block_invoke_2(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)value = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  while (1)
  {
    ssize_t v2 = recv(*(_DWORD *)(a1 + 32), &v21, 0x80uLL, 0);
    if (v2 < 1) {
      break;
    }
    if ((unint64_t)v2 >= 0x18
      && DWORD1(v21) == 1
      && DWORD2(v21) == 1
      && HIDWORD(v21) == 3
      && v21 >= 0x40
      && v2 >= (unint64_t)v21)
    {
      xpc_object_t v7 = xpc_uint64_create(value[0]);
      xpc_object_t v8 = xpc_uuid_create((const unsigned __int8 *)&value[1]);
      if (DWORD1(v22) == 1)
      {
        int v11 = (void **)&g_wifi_blocked_handlers;
        if (DWORD2(v24) != 3) {
          int v11 = (void **)&g_cellular_blocked_handlers;
        }
        unsigned int v10 = *v11;
        if (!*v11)
        {
LABEL_33:
          if (!v7) {
            goto LABEL_26;
          }
LABEL_25:
          xpc_release(v7);
          goto LABEL_26;
        }
      }
      else if (DWORD1(v22) == 2)
      {
        unsigned int v10 = (void *)g_cellular_failed_handlers;
        if (!g_cellular_failed_handlers) {
          goto LABEL_33;
        }
      }
      else
      {
        int v9 = &g_cellular_blocked_handlers;
        if (DWORD1(v22) == 3)
        {
          int v9 = &g_local_network_blocked_handlers;
          if (DWORD2(v24) != 1) {
            goto LABEL_33;
          }
        }
        unsigned int v10 = (void *)*v9;
        if (!*v9) {
          goto LABEL_33;
        }
      }
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = ___ZL42network_config_handle_policy_event_messagelP14kern_event_msg_block_invoke;
      *(void *)&applier[24] = &__block_descriptor_tmp_18_24132;
      xpc_object_t v30 = v7;
      xpc_object_t v31 = v8;
      xpc_array_apply(v10, applier);
      if (v7) {
        goto LABEL_25;
      }
LABEL_26:
      if (v8) {
        xpc_release(v8);
      }
    }
  }
  if (v2 < 0)
  {
    int v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v12 != 35)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)applier = 136446466;
      *(void *)&applier[4] = "network_config_setup_policy_event_watcher_block_invoke_2";
      *(_WORD *)&applier[12] = 1024;
      *(_DWORD *)&applier[14] = v12;
      BOOL v13 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v19 = 0;
      if (!__nwlog_fault(v13, &type, &v19)) {
        goto LABEL_51;
      }
      if (type != OS_LOG_TYPE_FAULT)
      {
        if (v19)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v14 = gLogObj;
          os_log_type_t v15 = type;
          BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v18)
            {
              *(_DWORD *)applier = 136446722;
              *(void *)&applier[4] = "network_config_setup_policy_event_watcher_block_invoke";
              *(_WORD *)&applier[12] = 1024;
              *(_DWORD *)&applier[14] = v12;
              *(_WORD *)&applier[18] = 2082;
              *(void *)&applier[20] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s recv from kernel event socket failed %{darwin.errno}d, dumping backtrace:%{public}s", applier, 0x1Cu);
            }
            free(backtrace_string);
            goto LABEL_51;
          }
          if (!v18) {
            goto LABEL_51;
          }
          *(_DWORD *)applier = 136446466;
          *(void *)&applier[4] = "network_config_setup_policy_event_watcher_block_invoke";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = v12;
          uint64_t v16 = "%{public}s recv from kernel event socket failed %{darwin.errno}d, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v14 = gLogObj;
          os_log_type_t v15 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_51;
          }
          *(_DWORD *)applier = 136446466;
          *(void *)&applier[4] = "network_config_setup_policy_event_watcher_block_invoke";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = v12;
          uint64_t v16 = "%{public}s recv from kernel event socket failed %{darwin.errno}d, backtrace limit exceeded";
        }
LABEL_50:
        _os_log_impl(&dword_1830D4000, v14, v15, v16, applier, 0x12u);
        goto LABEL_51;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v14 = gLogObj;
      os_log_type_t v15 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)applier = 136446466;
        *(void *)&applier[4] = "network_config_setup_policy_event_watcher_block_invoke";
        *(_WORD *)&applier[12] = 1024;
        *(_DWORD *)&applier[14] = v12;
        uint64_t v16 = "%{public}s recv from kernel event socket failed %{darwin.errno}d";
        goto LABEL_50;
      }
LABEL_51:
      if (v13) {
        free(v13);
      }
      dispatch_source_cancel((dispatch_source_t)network_config_setup_policy_event_watcher(void)::kevsrc);
    }
  }
}

uint64_t ___ZL42network_config_handle_policy_event_messagelP14kern_event_msg_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t pointer = xpc_dictionary_get_pointer();
  uint64_t v3 = xpc_dictionary_get_pointer();
  if (!pointer)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v10 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = "network_config_handle_policy_event_message_block_invoke";
    int v11 = "%{public}s Event handler has no block set";
LABEL_11:
    _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&buf, 0xCu);
    return 1;
  }
  int v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v10 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = "network_config_handle_policy_event_message_block_invoke";
    int v11 = "%{public}s Event handler has no queue set";
    goto LABEL_11;
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v19 = 0x2000000000;
  uint64_t v20 = 0;
  uint32_t v5 = *(void **)(a1 + 32);
  if (v5)
  {
    xpc_object_t v6 = xpc_retain(v5);
    *(void *)(*((void *)&buf + 1) + 24) = v6;
  }
  uint64_t v14 = 0;
  os_log_type_t v15 = &v14;
  uint64_t v16 = 0x2000000000;
  uint64_t v17 = 0;
  xpc_object_t v7 = *(void **)(a1 + 40);
  if (v7)
  {
    xpc_object_t v8 = xpc_retain(v7);
    v15[3] = (uint64_t)v8;
    uint64_t v9 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v9 = 0;
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  v13[2] = ___ZL42network_config_handle_policy_event_messagelP14kern_event_msg_block_invoke_15;
  v13[3] = &unk_1E523DA50;
  v13[4] = pointer;
  v13[5] = &buf;
  v13[6] = &v14;
  v13[7] = v9;
  dispatch_async(v4, v13);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&buf, 8);
  return 1;
}

void ___ZL42network_config_handle_policy_event_messagelP14kern_event_msg_block_invoke_15(void *a1)
{
  (*(void (**)(void))(a1[4] + 16))();
  ssize_t v2 = *(void **)(*(void *)(a1[5] + 8) + 24);
  if (v2)
  {
    xpc_release(v2);
    *(void *)(*(void *)(a1[5] + 8) + 24) = 0;
  }
  uint64_t v3 = *(void **)(*(void *)(a1[6] + 8) + 24);
  if (v3)
  {
    xpc_release(v3);
    *(void *)(*(void *)(a1[6] + 8) + 24) = 0;
  }
}

dispatch_queue_t ___ZL21nw_policy_event_queuev_block_invoke()
{
  id v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t result = dispatch_queue_create("com.apple.libnetwork.cellular_blocked", v0);
  nw_policy_event_queue(void)::queue = (uint64_t)result;
  return result;
}

uint64_t network_config_cellular_failed_observer_create(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136446210;
    xpc_object_t v7 = "network_config_cellular_failed_observer_create";
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s creating cellular failed observer", (uint8_t *)&v6, 0xCu);
  }
  return network_config_policy_observer_create(2, a1, a2);
}

uint64_t network_config_wifi_blocked_observer_create(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136446210;
    xpc_object_t v7 = "network_config_wifi_blocked_observer_create";
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s creating Wi-Fi blocked observer", (uint8_t *)&v6, 0xCu);
  }
  return network_config_policy_observer_create(3, a1, a2);
}

uint64_t network_config_local_network_blocked_observer_create(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136446210;
    xpc_object_t v7 = "network_config_local_network_blocked_observer_create";
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s creating local network blocked observer", (uint8_t *)&v6, 0xCu);
  }
  return network_config_policy_observer_create(4, a1, a2);
}

void network_config_policy_observer_cancel(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  ssize_t v2 = gLogObj;
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v13 = "network_config_policy_observer_cancel";
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s cancelling cellular blocked observer", buf, 0xCu);
    }
    if (nw_policy_event_queue(void)::onceToken != -1) {
      dispatch_once(&nw_policy_event_queue(void)::onceToken, &__block_literal_global_24084);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZL37network_config_policy_observer_cancelPv_block_invoke;
    block[3] = &__block_descriptor_tmp_19_24154;
    void block[4] = a1;
    dispatch_sync((dispatch_queue_t)nw_policy_event_queue(void)::queue, block);
    return;
  }
  *(_DWORD *)long long buf = 136446210;
  BOOL v13 = "network_config_policy_observer_cancel";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v11 = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v3, &v11, &v10))
  {
    if (v11 == OS_LOG_TYPE_FAULT)
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = v11;
      if (!os_log_type_enabled(v4, v11)) {
        goto LABEL_22;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v13 = "network_config_policy_observer_cancel";
      int v6 = "%{public}s called with null observer";
      goto LABEL_21;
    }
    if (!v10)
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = v11;
      if (!os_log_type_enabled(v4, v11)) {
        goto LABEL_22;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v13 = "network_config_policy_observer_cancel";
      int v6 = "%{public}s called with null observer, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = __nwlog_obj();
    os_log_type_t v5 = v11;
    BOOL v8 = os_log_type_enabled(v4, v11);
    if (backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v13 = "network_config_policy_observer_cancel";
        __int16 v14 = 2082;
        os_log_type_t v15 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null observer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v8)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v13 = "network_config_policy_observer_cancel";
      int v6 = "%{public}s called with null observer, no backtrace";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    }
  }
LABEL_22:
  if (v3) {
    free(v3);
  }
}

void ___ZL37network_config_policy_observer_cancelPv_block_invoke(uint64_t a1)
{
  network_config_remove_observer_from_array((void **)&g_cellular_blocked_handlers, *(void **)(a1 + 32));
  network_config_remove_observer_from_array((void **)&g_cellular_failed_handlers, *(void **)(a1 + 32));
  network_config_remove_observer_from_array(&g_wifi_blocked_handlers, *(void **)(a1 + 32));
  ssize_t v2 = *(void **)(a1 + 32);

  network_config_remove_observer_from_array((void **)&g_local_network_blocked_handlers, v2);
}

void network_config_remove_observer_from_array(void **a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_remove_observer_from_array";
    xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v7, &v18, &v17)) {
      goto LABEL_36;
    }
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (!os_log_type_enabled(v8, v18)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "network_config_remove_observer_from_array";
      char v10 = "%{public}s called with null array_ptr";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "network_config_remove_observer_from_array";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null array_ptr, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v7) {
          return;
        }
LABEL_37:
        free(v7);
        return;
      }
      if (!v12) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "network_config_remove_observer_from_array";
      char v10 = "%{public}s called with null array_ptr, no backtrace";
    }
    else
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (!os_log_type_enabled(v8, v18)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "network_config_remove_observer_from_array";
      char v10 = "%{public}s called with null array_ptr, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_36;
  }
  if (a2)
  {
    xpc_object_t v4 = *a1;
    if (v4)
    {
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      char v20 = 0;
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 0x40000000;
      applier[2] = ___ZL41network_config_remove_observer_from_arrayPPvS__block_invoke;
      applier[3] = &unk_1E523DAB8;
      applier[4] = buf;
      void applier[5] = a2;
      xpc_array_apply(v4, applier);
      xpc_object_t v5 = xpc_array_create(0, 0);
      xpc_object_t v6 = *a1;
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      v15[2] = ___ZL41network_config_remove_observer_from_arrayPPvS__block_invoke_2;
      v15[3] = &__block_descriptor_tmp_21_24166;
      void v15[4] = a2;
      v15[5] = v5;
      xpc_array_apply(v6, v15);
      if (*a1) {
        xpc_release(*a1);
      }
      *a1 = v5;
      _Block_object_dispose(buf, 8);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "network_config_remove_observer_from_array";
  xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v7, &v18, &v17)) {
    goto LABEL_36;
  }
  if (v18 == OS_LOG_TYPE_FAULT)
  {
    BOOL v8 = __nwlog_obj();
    os_log_type_t v9 = v18;
    if (!os_log_type_enabled(v8, v18)) {
      goto LABEL_36;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_remove_observer_from_array";
    char v10 = "%{public}s called with null observer";
    goto LABEL_35;
  }
  if (!v17)
  {
    BOOL v8 = __nwlog_obj();
    os_log_type_t v9 = v18;
    if (!os_log_type_enabled(v8, v18)) {
      goto LABEL_36;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_remove_observer_from_array";
    char v10 = "%{public}s called with null observer, backtrace limit exceeded";
    goto LABEL_35;
  }
  BOOL v13 = (char *)__nw_create_backtrace_string();
  BOOL v8 = __nwlog_obj();
  os_log_type_t v9 = v18;
  BOOL v14 = os_log_type_enabled(v8, v18);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_36;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_remove_observer_from_array";
    char v10 = "%{public}s called with null observer, no backtrace";
    goto LABEL_35;
  }
  if (v14)
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "network_config_remove_observer_from_array";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v13;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null observer, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7) {
    goto LABEL_37;
  }
}

BOOL ___ZL41network_config_remove_observer_from_arrayPPvS__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 == a3) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return v3 != a3;
}

uint64_t ___ZL41network_config_remove_observer_from_arrayPPvS__block_invoke_2(uint64_t a1, int a2, xpc_object_t value)
{
  if (*(xpc_object_t *)(a1 + 32) == value)
  {
    uint64_t pointer = (const void *)xpc_dictionary_get_pointer();
    xpc_object_t v4 = xpc_dictionary_get_pointer();
    if (pointer) {
      _Block_release(pointer);
    }
    if (v4) {
      dispatch_release(v4);
    }
    xpc_dictionary_set_pointer();
    xpc_dictionary_set_pointer();
  }
  else
  {
    xpc_array_append_value(*(xpc_object_t *)(a1 + 40), value);
  }
  return 1;
}

uint64_t network_config_mptcp_watcher_create(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    long long v27 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v42) = 0;
    if (!__nwlog_fault(v27, type, &v42)) {
      goto LABEL_90;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v42)
      {
        long long v28 = __nwlog_obj();
        os_log_type_t v29 = type[0];
        if (!os_log_type_enabled(v28, type[0])) {
          goto LABEL_90;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
        xpc_object_t v30 = "%{public}s called with null queue, backtrace limit exceeded";
        goto LABEL_89;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      long long v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      BOOL v32 = os_log_type_enabled(v28, type[0]);
      if (!backtrace_string)
      {
        if (!v32) {
          goto LABEL_90;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
        xpc_object_t v30 = "%{public}s called with null queue, no backtrace";
        goto LABEL_89;
      }
      if (v32)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v33 = "%{public}s called with null queue, dumping backtrace:%{public}s";
LABEL_79:
        _os_log_impl(&dword_1830D4000, v28, v29, v33, buf, 0x16u);
      }
LABEL_80:
      free(backtrace_string);
      goto LABEL_90;
    }
    long long v28 = __nwlog_obj();
    os_log_type_t v29 = type[0];
    if (!os_log_type_enabled(v28, type[0])) {
      goto LABEL_90;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    xpc_object_t v30 = "%{public}s called with null queue";
LABEL_89:
    _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
LABEL_90:
    if (v27) {
      free(v27);
    }
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    long long v27 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v42) = 0;
    if (!__nwlog_fault(v27, type, &v42)) {
      goto LABEL_90;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      long long v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (!os_log_type_enabled(v28, type[0])) {
        goto LABEL_90;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      xpc_object_t v30 = "%{public}s called with null block";
      goto LABEL_89;
    }
    if (!(_BYTE)v42)
    {
      long long v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (!os_log_type_enabled(v28, type[0])) {
        goto LABEL_90;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      xpc_object_t v30 = "%{public}s called with null block, backtrace limit exceeded";
      goto LABEL_89;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    long long v28 = __nwlog_obj();
    os_log_type_t v29 = type[0];
    BOOL v34 = os_log_type_enabled(v28, type[0]);
    if (backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v33 = "%{public}s called with null block, dumping backtrace:%{public}s";
        goto LABEL_79;
      }
      goto LABEL_80;
    }
    if (!v34) {
      goto LABEL_90;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    xpc_object_t v30 = "%{public}s called with null block, no backtrace";
    goto LABEL_89;
  }
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  xpc_object_t v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s creating MPTCP watcher", buf, 0xCu);
  }
  int v5 = socket(32, 3, 1);
  if (v5 < 0) {
    return 0;
  }
  unsigned int v6 = v5;
  int v43 = 12;
  uint64_t v42 = 0x100000001;
  if (ioctl(v5, 0x800C6502uLL, &v42))
  {
    int v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v7;
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v41) = 0;
    if (!__nwlog_fault(v8, type, &v41)) {
      goto LABEL_44;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = gLogObj;
      os_log_type_t v10 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_44;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      os_log_type_t v11 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d";
      goto LABEL_43;
    }
    if (!(_BYTE)v41)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = gLogObj;
      os_log_type_t v10 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_44;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      os_log_type_t v11 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_43;
    }
    BOOL v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = gLogObj;
    os_log_type_t v10 = type[0];
    BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!v13)
    {
      if (!v14) {
        goto LABEL_44;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      os_log_type_t v11 = "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, no backtrace";
      goto LABEL_43;
    }
    if (v14)
    {
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v13;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
    }
    free(v13);
    goto LABEL_44;
  }
  int v41 = 1;
  if (!ioctl(v6, 0x8004667EuLL, &v41))
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    *(void *)&unsigned char buf[24] = 0;
    if (nw_policy_event_queue(void)::onceToken != -1) {
      dispatch_once(&nw_policy_event_queue(void)::onceToken, &__block_literal_global_24084);
    }
    *(void *)&unsigned char buf[24] = dispatch_source_create(MEMORY[0x1E4F14478], v6, 0, (dispatch_queue_t)nw_policy_event_queue(void)::queue);
    os_log_type_t v15 = *(NSObject **)(*(void *)&buf[8] + 24);
    if (v15)
    {
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 0x40000000;
      handler[2] = __network_config_mptcp_watcher_create_block_invoke;
      handler[3] = &unk_1E523D948;
      unsigned int v38 = v6;
      handler[4] = buf;
      dispatch_source_set_cancel_handler(v15, handler);
      uint64_t v16 = *(NSObject **)(*(void *)&buf[8] + 24);
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 0x40000000;
      v35[2] = __network_config_mptcp_watcher_create_block_invoke_2;
      v35[3] = &unk_1E523D9C0;
      unsigned int v36 = v6;
      v35[4] = a2;
      v35[5] = a1;
      dispatch_source_set_event_handler(v16, v35);
      dispatch_activate(*(dispatch_object_t *)(*(void *)&buf[8] + 24));
      uint64_t v17 = *(void *)(*(void *)&buf[8] + 24);
LABEL_62:
      _Block_object_dispose(buf, 8);
      return v17;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)os_log_type_t type = 136446210;
    BOOL v45 = "network_config_mptcp_watcher_create";
    char v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v40 = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v20, &v40, &v39))
    {
      if (v40 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = v40;
        if (os_log_type_enabled(v21, v40))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          BOOL v45 = "network_config_mptcp_watcher_create";
          os_log_type_t v23 = "%{public}s dispatch_source_create failed";
LABEL_58:
          _os_log_impl(&dword_1830D4000, v21, v22, v23, (uint8_t *)type, 0xCu);
        }
      }
      else if (v39)
      {
        long long v25 = (char *)__nw_create_backtrace_string();
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = v40;
        BOOL v26 = os_log_type_enabled(v21, v40);
        if (v25)
        {
          if (v26)
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            BOOL v45 = "network_config_mptcp_watcher_create";
            __int16 v46 = 2082;
            BOOL v47 = v25;
            _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s dispatch_source_create failed, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
          }
          free(v25);
          goto LABEL_59;
        }
        if (v26)
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          BOOL v45 = "network_config_mptcp_watcher_create";
          os_log_type_t v23 = "%{public}s dispatch_source_create failed, no backtrace";
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = v40;
        if (os_log_type_enabled(v21, v40))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          BOOL v45 = "network_config_mptcp_watcher_create";
          os_log_type_t v23 = "%{public}s dispatch_source_create failed, backtrace limit exceeded";
          goto LABEL_58;
        }
      }
    }
LABEL_59:
    if (v20) {
      free(v20);
    }
    close(v6);
    uint64_t v17 = 0;
    goto LABEL_62;
  }
  int v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)long long buf = 136446466;
  *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  BOOL v8 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v40 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v8, type, &v40)) {
    goto LABEL_44;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = gLogObj;
    os_log_type_t v10 = type[0];
    if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
      goto LABEL_44;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    os_log_type_t v11 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d";
    goto LABEL_43;
  }
  if (v40 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = gLogObj;
    os_log_type_t v10 = type[0];
    if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
      goto LABEL_44;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    os_log_type_t v11 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, backtrace limit exceeded";
    goto LABEL_43;
  }
  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v9 = gLogObj;
  os_log_type_t v10 = type[0];
  BOOL v19 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
  if (v18)
  {
    if (v19)
    {
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v18;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
    }
    free(v18);
    if (!v8) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if (v19)
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "network_config_mptcp_watcher_create";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    os_log_type_t v11 = "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, no backtrace";
LABEL_43:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0x12u);
  }
LABEL_44:
  if (v8) {
LABEL_45:
  }
    free(v8);
LABEL_46:
  close(v6);
  return 0;
}

void __network_config_mptcp_watcher_create_block_invoke(uint64_t a1)
{
  close(*(_DWORD *)(a1 + 40));
  ssize_t v2 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void __network_config_mptcp_watcher_create_block_invoke_2(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  ssize_t v2 = "network_config_mptcp_watcher_create_block_invoke";
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  while (1)
  {
    ssize_t v4 = recv(*(_DWORD *)(a1 + 48), &v40, 0x80uLL, 0);
    if (v4 < 1) {
      break;
    }
    if (DWORD2(v40) == 1 && HIDWORD(v40) == 12)
    {
      if (DWORD1(v41) == 1)
      {
        int v12 = DWORD2(v41);
        if ((((DWORD2(v41) == 0) ^ sMptcpUsesCell) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v13 = gLogObj;
          BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT);
          int v12 = DWORD2(v41);
          if (v14)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v15 = "on";
            if (!DWORD2(v41)) {
              os_log_type_t v15 = "off";
            }
            BOOL v37 = v2;
            __int16 v38 = 2082;
            *(void *)char v39 = v15;
            _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s MPTCP changing cell-icon to %{public}s", buf, 0x16u);
            int v12 = DWORD2(v41);
          }
        }
        sMptcpUsesCell = v12 != 0;
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __network_config_mptcp_watcher_create_block_invoke_4;
        block[3] = &unk_1E523D970;
        uint64_t v3 = *(NSObject **)(a1 + 40);
        void block[4] = *(void *)(a1 + 32);
        dispatch_async(v3, block);
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v37 = v2;
          __int16 v38 = 1024;
          *(_DWORD *)char v39 = DWORD1(v41);
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_INFO, "%{public}s Received unexpected event-code: %u", buf, 0x12u);
        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)long long buf = 136446722;
      BOOL v37 = "network_config_mptcp_watcher_create_block_invoke_2";
      __int16 v38 = 1024;
      *(_DWORD *)char v39 = DWORD2(v40);
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = HIDWORD(v40);
      unsigned int v6 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v6, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v7 = gLogObj;
          os_log_type_t v8 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)long long buf = 136446722;
            BOOL v37 = v2;
            __int16 v38 = 1024;
            *(_DWORD *)char v39 = DWORD2(v40);
            *(_WORD *)&v39[4] = 1024;
            *(_DWORD *)&v39[6] = HIDWORD(v40);
            os_log_type_t v9 = v7;
            os_log_type_t v10 = v8;
            os_log_type_t v11 = "%{public}s Received unexpected msg: class %u subclass %u";
LABEL_29:
            _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0x18u);
          }
        }
        else if (v34)
        {
          uint64_t v17 = v2;
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v19 = gLogObj;
          os_log_type_t v20 = type;
          BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v21)
            {
              *(_DWORD *)long long buf = 136446978;
              BOOL v37 = v17;
              __int16 v38 = 1024;
              *(_DWORD *)char v39 = DWORD2(v40);
              *(_WORD *)&v39[4] = 1024;
              *(_DWORD *)&v39[6] = HIDWORD(v40);
              *(_WORD *)&v39[10] = 2082;
              *(void *)&v39[12] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s Received unexpected msg: class %u subclass %u, dumping backtrace:%{public}s", buf, 0x22u);
            }
            free(backtrace_string);
            ssize_t v2 = v17;
          }
          else
          {
            ssize_t v2 = v17;
            if (v21)
            {
              *(_DWORD *)long long buf = 136446722;
              BOOL v37 = v17;
              __int16 v38 = 1024;
              *(_DWORD *)char v39 = DWORD2(v40);
              *(_WORD *)&v39[4] = 1024;
              *(_DWORD *)&v39[6] = HIDWORD(v40);
              os_log_type_t v9 = v19;
              os_log_type_t v10 = v20;
              os_log_type_t v11 = "%{public}s Received unexpected msg: class %u subclass %u, no backtrace";
              goto LABEL_29;
            }
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v22 = gLogObj;
          os_log_type_t v23 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)long long buf = 136446722;
            BOOL v37 = v2;
            __int16 v38 = 1024;
            *(_DWORD *)char v39 = DWORD2(v40);
            *(_WORD *)&v39[4] = 1024;
            *(_DWORD *)&v39[6] = HIDWORD(v40);
            os_log_type_t v9 = v22;
            os_log_type_t v10 = v23;
            os_log_type_t v11 = "%{public}s Received unexpected msg: class %u subclass %u, backtrace limit exceeded";
            goto LABEL_29;
          }
        }
      }
      if (v6) {
        free(v6);
      }
    }
  }
  if (v4 < 0)
  {
    int v24 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v24 != 35)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)long long buf = 136446466;
      BOOL v37 = "network_config_mptcp_watcher_create_block_invoke_2";
      __int16 v38 = 1024;
      *(_DWORD *)char v39 = v24;
      long long v25 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (!__nwlog_fault(v25, &type, &v34)) {
        goto LABEL_48;
      }
      if (type != OS_LOG_TYPE_FAULT)
      {
        if (v34)
        {
          os_log_type_t v29 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v26 = gLogObj;
          os_log_type_t v27 = type;
          BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v29)
          {
            if (v30)
            {
              *(_DWORD *)long long buf = 136446722;
              BOOL v37 = v2;
              __int16 v38 = 1024;
              *(_DWORD *)char v39 = v24;
              *(_WORD *)&v39[4] = 2082;
              *(void *)&v39[6] = v29;
              _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s recv from kernel event socket failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
            free(v29);
            goto LABEL_48;
          }
          if (!v30) {
            goto LABEL_48;
          }
          *(_DWORD *)long long buf = 136446466;
          BOOL v37 = v2;
          __int16 v38 = 1024;
          *(_DWORD *)char v39 = v24;
          long long v28 = "%{public}s recv from kernel event socket failed %{darwin.errno}d, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v26 = gLogObj;
          os_log_type_t v27 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_48;
          }
          *(_DWORD *)long long buf = 136446466;
          BOOL v37 = v2;
          __int16 v38 = 1024;
          *(_DWORD *)char v39 = v24;
          long long v28 = "%{public}s recv from kernel event socket failed %{darwin.errno}d, backtrace limit exceeded";
        }
LABEL_47:
        _os_log_impl(&dword_1830D4000, v26, v27, v28, buf, 0x12u);
        goto LABEL_48;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v26 = gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v37 = v2;
        __int16 v38 = 1024;
        *(_DWORD *)char v39 = v24;
        long long v28 = "%{public}s recv from kernel event socket failed %{darwin.errno}d";
        goto LABEL_47;
      }
LABEL_48:
      if (v25) {
        free(v25);
      }
      v32[0] = MEMORY[0x1E4F143A8];
      v32[1] = 0x40000000;
      v32[2] = __network_config_mptcp_watcher_create_block_invoke_6;
      void v32[3] = &unk_1E523D998;
      xpc_object_t v31 = *(NSObject **)(a1 + 40);
      v32[4] = *(void *)(a1 + 32);
      dispatch_async(v31, v32);
    }
  }
}

uint64_t __network_config_mptcp_watcher_create_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __network_config_mptcp_watcher_create_block_invoke_6(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t network_config_mptcp_cell_in_use()
{
  return sMptcpUsesCell;
}

uint64_t __Block_byref_object_copy__24353(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24354(uint64_t a1)
{
}

char *__cdecl nw_connection_copy_description(nw_connection_t connection)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = connection;
  ssize_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_connection_copy_description_level(v1, 1);
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v16 = "nw_connection_copy_description";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v16 = "nw_connection_copy_description";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v16 = "nw_connection_copy_description";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v16 = "nw_connection_copy_description";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v16 = "nw_connection_copy_description";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void sub_1837EE124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _nw_connection_send_idempotent_content_block_invoke()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v0 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  BOOL v11 = "_nw_connection_send_idempotent_content_block_invoke";
  uint64_t v1 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (!__nwlog_fault(v1, &type, &v8))
  {
LABEL_6:
    if (!v1) {
      return;
    }
    goto LABEL_7;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    ssize_t v2 = (id)gLogObj;
    os_log_type_t v3 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v11 = "_nw_connection_send_idempotent_content_block_invoke";
      _os_log_impl(&dword_1830D4000, v2, v3, "%{public}s _nw_connection_send_idempotent_content called directly", buf, 0xCu);
    }
LABEL_5:

    goto LABEL_6;
  }
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    ssize_t v2 = (id)gLogObj;
    os_log_type_t v7 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v11 = "_nw_connection_send_idempotent_content_block_invoke";
      _os_log_impl(&dword_1830D4000, v2, v7, "%{public}s _nw_connection_send_idempotent_content called directly, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_5;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  ssize_t v2 = (id)gLogObj;
  os_log_type_t v5 = type;
  BOOL v6 = os_log_type_enabled(v2, type);
  if (!backtrace_string)
  {
    if (v6)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v11 = "_nw_connection_send_idempotent_content_block_invoke";
      _os_log_impl(&dword_1830D4000, v2, v5, "%{public}s _nw_connection_send_idempotent_content called directly, no backtrace", buf, 0xCu);
    }
    goto LABEL_5;
  }
  if (v6)
  {
    *(_DWORD *)long long buf = 136446466;
    BOOL v11 = "_nw_connection_send_idempotent_content_block_invoke";
    __int16 v12 = 2082;
    char v13 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v2, v5, "%{public}s _nw_connection_send_idempotent_content called directly, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v1) {
LABEL_7:
  }
    free(v1);
}

void _nw_connection_write_idempotent_block_invoke_2()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v0 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  char v13 = "_nw_connection_write_idempotent_block_invoke_2";
  uint64_t v1 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (!__nwlog_fault(v1, &type, &v10)) {
    goto LABEL_10;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    ssize_t v2 = (id)gLogObj;
    os_log_type_t v3 = type;
    if (!os_log_type_enabled(v2, type)) {
      goto LABEL_17;
    }
    *(_DWORD *)long long buf = 136446210;
    char v13 = "_nw_connection_write_idempotent_block_invoke_2";
    ssize_t v4 = "%{public}s _nw_connection_write_idempotent called directly";
LABEL_15:
    char v8 = v2;
    os_log_type_t v9 = v3;
LABEL_16:
    _os_log_impl(&dword_1830D4000, v8, v9, v4, buf, 0xCu);
    goto LABEL_17;
  }
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    ssize_t v2 = (id)gLogObj;
    os_log_type_t v3 = type;
    if (!os_log_type_enabled(v2, type)) {
      goto LABEL_17;
    }
    *(_DWORD *)long long buf = 136446210;
    char v13 = "_nw_connection_write_idempotent_block_invoke_2";
    ssize_t v4 = "%{public}s _nw_connection_write_idempotent called directly, backtrace limit exceeded";
    goto LABEL_15;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  ssize_t v2 = (id)gLogObj;
  os_log_type_t v6 = type;
  BOOL v7 = os_log_type_enabled(v2, type);
  if (backtrace_string)
  {
    if (v7)
    {
      *(_DWORD *)long long buf = 136446466;
      char v13 = "_nw_connection_write_idempotent_block_invoke_2";
      __int16 v14 = 2082;
      os_log_type_t v15 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v2, v6, "%{public}s _nw_connection_write_idempotent called directly, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
LABEL_10:
    if (!v1) {
      return;
    }
    goto LABEL_11;
  }
  if (v7)
  {
    *(_DWORD *)long long buf = 136446210;
    char v13 = "_nw_connection_write_idempotent_block_invoke_2";
    ssize_t v4 = "%{public}s _nw_connection_write_idempotent called directly, no backtrace";
    char v8 = v2;
    os_log_type_t v9 = v6;
    goto LABEL_16;
  }
LABEL_17:

  if (v1) {
LABEL_11:
  }
    free(v1);
}

void __nw_connection_async_client_block_invoke(uint64_t a1)
{
}

void __nw_connection_async_client_if_needed_with_override_block_invoke(uint64_t a1)
{
}

BOOL nw_connection_add_probe(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  os_log_type_t v3 = a1;
  id v4 = a2;
  os_log_type_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v28 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_connection_add_probe_block_invoke;
      v21[3] = &unk_1E5242570;
      int v24 = buf;
      uint64_t v22 = v3;
      id v23 = v5;
      os_unfair_lock_lock(v3 + 34);
      __nw_connection_add_probe_block_invoke((uint64_t)v21);
      os_unfair_lock_unlock(v3 + 34);
      BOOL v6 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;

      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }
    __int16 v12 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null probe", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v25)
      {
        char v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null probe, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null probe, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null probe, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    char v8 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v25)
      {
        char v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9) {
    free(v9);
  }
  BOOL v6 = 0;
LABEL_4:

  return v6;
}

uint64_t __nw_connection_add_probe_block_invoke(uint64_t a1)
{
  uint64_t result = nw_connection_add_probe_locked(*(NWConcrete_nw_connection **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

uint64_t nw_connection_add_probe_locked(NWConcrete_nw_connection *a1, NWConcrete_nw_connection *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  os_log_type_t v3 = a1;
  id v4 = a2;
  os_log_type_t v5 = v4;
  if (!v3)
  {
    uint32_t v51 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    unsigned int v67 = "nw_connection_add_probe_locked";
    BOOL v52 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v64 = 0;
    if (!__nwlog_fault(v52, &type, &v64)) {
      goto LABEL_129;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unsigned int v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s called with null connection", buf, 0xCu);
      }
      goto LABEL_128;
    }
    if (!v64)
    {
      BOOL v53 = __nwlog_obj();
      os_log_type_t v62 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unsigned int v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_1830D4000, v53, v62, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_128;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v53 = __nwlog_obj();
    os_log_type_t v58 = type;
    BOOL v59 = os_log_type_enabled(v53, type);
    if (!backtrace_string)
    {
      if (v59)
      {
        *(_DWORD *)long long buf = 136446210;
        unsigned int v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_1830D4000, v53, v58, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_128;
    }
    if (v59)
    {
      *(_DWORD *)long long buf = 136446466;
      unsigned int v67 = "nw_connection_add_probe_locked";
      __int16 v68 = 2082;
      *(void *)int v69 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v53, v58, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_116;
  }
  if (!v4)
  {
    uint32_t v55 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    unsigned int v67 = "nw_connection_add_probe_locked";
    BOOL v52 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v64 = 0;
    if (!__nwlog_fault(v52, &type, &v64)) {
      goto LABEL_129;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v53 = __nwlog_obj();
      os_log_type_t v56 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unsigned int v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_1830D4000, v53, v56, "%{public}s called with null probe", buf, 0xCu);
      }
LABEL_128:

LABEL_129:
      if (v52) {
        free(v52);
      }
      goto LABEL_11;
    }
    if (!v64)
    {
      BOOL v53 = __nwlog_obj();
      os_log_type_t v63 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)long long buf = 136446210;
        unsigned int v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_1830D4000, v53, v63, "%{public}s called with null probe, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_128;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v53 = __nwlog_obj();
    os_log_type_t v60 = type;
    BOOL v61 = os_log_type_enabled(v53, type);
    if (!backtrace_string)
    {
      if (v61)
      {
        *(_DWORD *)long long buf = 136446210;
        unsigned int v67 = "nw_connection_add_probe_locked";
        _os_log_impl(&dword_1830D4000, v53, v60, "%{public}s called with null probe, no backtrace", buf, 0xCu);
      }
      goto LABEL_128;
    }
    if (v61)
    {
      *(_DWORD *)long long buf = 136446466;
      unsigned int v67 = "nw_connection_add_probe_locked";
      __int16 v68 = 2082;
      *(void *)int v69 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v53, v60, "%{public}s called with null probe, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_116:

    free(backtrace_string);
    goto LABEL_129;
  }
  if (v3->state != 5)
  {
    char v10 = v4->parameters;
    if ((nw_parameters_get_is_probe(v10) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v23 = (id)gLogObj;
      *(_DWORD *)long long buf = 136446210;
      unsigned int v67 = "nw_connection_add_probe_locked";
      os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v64 = 0;
      if (!__nwlog_fault(v20, &type, &v64)) {
        goto LABEL_68;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v21 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)long long buf = 136446210;
          unsigned int v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s Cannot add probe without setting is_probe in parameters", buf, 0xCu);
        }
      }
      else if (v64)
      {
        char v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v21 = (id)gLogObj;
        os_log_type_t v26 = type;
        BOOL v27 = os_log_type_enabled(v21, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)long long buf = 136446466;
            unsigned int v67 = "nw_connection_add_probe_locked";
            __int16 v68 = 2082;
            *(void *)int v69 = v25;
            _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s Cannot add probe without setting is_probe in parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v25);
          if (!v20) {
            goto LABEL_70;
          }
          goto LABEL_69;
        }
        if (v27)
        {
          *(_DWORD *)long long buf = 136446210;
          unsigned int v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s Cannot add probe without setting is_probe in parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v21 = (id)gLogObj;
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)long long buf = 136446210;
          unsigned int v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_1830D4000, v21, v39, "%{public}s Cannot add probe without setting is_probe in parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_67;
    }
    probes = v3->probes;
    if (probes
      || (BOOL v12 = nw_array_create(),
          os_log_type_t v13 = v3->probes,
          v3->probes = (OS_nw_array *)v12,
          v13,
          (probes = v3->probes) != 0))
    {
      Class isa = (void **)probes[2].super.super.isa;
      __int16 v14 = (void **)probes[3].super.super.isa;
      if (isa != v14)
      {
        while (*isa != v5)
        {
          if (++isa == v14)
          {
            Class isa = v14;
            break;
          }
        }
      }
      if (isa != v14)
      {
        parameters = v3->parameters;
        if (parameters && !nw_path_parameters_get_logging_disabled(*((void *)parameters + 13)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v17 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            unsigned int top_id = v3->top_id;
            *(_DWORD *)long long buf = 136446722;
            unsigned int v67 = "nw_connection_add_probe_locked";
            __int16 v68 = 1024;
            *(_DWORD *)int v69 = top_id;
            *(_WORD *)&v69[4] = 2112;
            *(void *)&v69[6] = v5;
            _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Cannot add probe %@ because probe list already contains this probe", buf, 0x1Cu);
          }
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v19 = (id)gLogObj;
        *(_DWORD *)long long buf = 136446210;
        unsigned int v67 = "nw_connection_add_probe_locked";
        os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v64 = 0;
        if (!__nwlog_fault(v20, &type, &v64))
        {
LABEL_68:
          if (!v20)
          {
LABEL_70:
            uint64_t v9 = 0;
LABEL_95:

            goto LABEL_96;
          }
LABEL_69:
          free(v20);
          goto LABEL_70;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v21 = (id)gLogObj;
          os_log_type_t v22 = type;
          if (os_log_type_enabled(v21, type))
          {
            *(_DWORD *)long long buf = 136446210;
            unsigned int v67 = "nw_connection_add_probe_locked";
            _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s Cannot add probe to connection because the probe list already contains this probe", buf, 0xCu);
          }
        }
        else if (v64)
        {
          char v35 = __nw_create_backtrace_string();
          if (v35)
          {
            unsigned int v36 = (char *)v35;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v37 = (id)gLogObj;
            os_log_type_t v38 = type;
            if (os_log_type_enabled(v37, type))
            {
              *(_DWORD *)long long buf = 136446466;
              unsigned int v67 = "nw_connection_add_probe_locked";
              __int16 v68 = 2082;
              *(void *)int v69 = v36;
              _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s Cannot add probe to connection because the probe list already contains this probe, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v36);
            if (!v20) {
              goto LABEL_70;
            }
            goto LABEL_69;
          }
          BOOL v21 = __nwlog_obj();
          os_log_type_t v41 = type;
          if (os_log_type_enabled(v21, type))
          {
            *(_DWORD *)long long buf = 136446210;
            unsigned int v67 = "nw_connection_add_probe_locked";
            _os_log_impl(&dword_1830D4000, v21, v41, "%{public}s Cannot add probe to connection because the probe list already contains this probe, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v21 = (id)gLogObj;
          os_log_type_t v40 = type;
          if (os_log_type_enabled(v21, type))
          {
            *(_DWORD *)long long buf = 136446210;
            unsigned int v67 = "nw_connection_add_probe_locked";
            _os_log_impl(&dword_1830D4000, v21, v40, "%{public}s Cannot add probe to connection because the probe list already contains this probe, backtrace limit exceeded", buf, 0xCu);
          }
        }
LABEL_67:

        goto LABEL_68;
      }
    }
    cancel_group = v3->cancel_group;
    if (cancel_group
      || (dispatch_group_t v29 = dispatch_group_create(),
          BOOL v30 = v3->cancel_group,
          v3->cancel_group = (OS_dispatch_group *)v29,
          v30,
          (cancel_group = v3->cancel_group) != 0))
    {
LABEL_85:
      dispatch_group_enter(cancel_group);
      nw_array_append((uint64_t)v3->probes, v5);
      long long v46 = v3->parameters;
      if (v46 && !nw_path_parameters_get_logging_disabled(*((void *)v46 + 13)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        long long v47 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v48 = (uint64_t)v3->probes;
          if (v48) {
            uint64_t v48 = (uint64_t)(*(void *)(v48 + 24) - *(void *)(v48 + 16)) >> 3;
          }
          unsigned int v49 = v3->top_id;
          *(_DWORD *)long long buf = 136446978;
          unsigned int v67 = "nw_connection_add_probe_locked";
          __int16 v68 = 1024;
          *(_DWORD *)int v69 = v49;
          *(_WORD *)&v69[4] = 2112;
          *(void *)&v69[6] = v5;
          __int16 v70 = 2048;
          uint64_t v71 = v48;
          _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Added probe %@ to probe list, now have %zu probes", buf, 0x26u);
        }
      }
      uint64_t v9 = 1;
      goto LABEL_95;
    }
    xpc_object_t v31 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    unsigned int v67 = "nw_connection_add_probe_locked";
    BOOL v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v64 = 0;
    if (__nwlog_fault(v32, &type, &v64))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)long long buf = 136446210;
          unsigned int v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s dispatch_group_create failed", buf, 0xCu);
        }
      }
      else if (v64)
      {
        long long v42 = (char *)__nw_create_backtrace_string();
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v43 = type;
        BOOL v44 = os_log_type_enabled(v33, type);
        if (v42)
        {
          if (v44)
          {
            *(_DWORD *)long long buf = 136446466;
            unsigned int v67 = "nw_connection_add_probe_locked";
            __int16 v68 = 2082;
            *(void *)int v69 = v42;
            _os_log_impl(&dword_1830D4000, v33, v43, "%{public}s dispatch_group_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v42);
          goto LABEL_82;
        }
        if (v44)
        {
          *(_DWORD *)long long buf = 136446210;
          unsigned int v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_1830D4000, v33, v43, "%{public}s dispatch_group_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)long long buf = 136446210;
          unsigned int v67 = "nw_connection_add_probe_locked";
          _os_log_impl(&dword_1830D4000, v33, v45, "%{public}s dispatch_group_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_82:
    if (v32) {
      free(v32);
    }
    cancel_group = v3->cancel_group;
    goto LABEL_85;
  }
  BOOL v6 = v3->parameters;
  if (v6 && !nw_path_parameters_get_logging_disabled(*((void *)v6 + 13)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    BOOL v7 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      unsigned int v8 = v3->top_id;
      *(_DWORD *)long long buf = 136446466;
      unsigned int v67 = "nw_connection_add_probe_locked";
      __int16 v68 = 1024;
      *(_DWORD *)int v69 = v8;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection already cancelled, not adding probe", buf, 0x12u);
    }
  }
LABEL_11:
  uint64_t v9 = 0;
LABEL_96:

  return v9;
}

void nw_connection_access_probe_connections(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  os_log_type_t v3 = a1;
  id v4 = a2;
  os_log_type_t v5 = v4;
  if (!v3)
  {
    BOOL v6 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v26 = "nw_connection_access_probe_connections";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v24 = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v7, &v24, &v23)) {
      goto LABEL_38;
    }
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = v24;
      if (os_log_type_enabled(v8, v24))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_connection_access_probe_connections";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v13 = v24;
      BOOL v14 = os_log_type_enabled(v8, v24);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v26 = "nw_connection_access_probe_connections";
          __int16 v27 = 2082;
          char v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_connection_access_probe_connections";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v18 = v24;
      if (os_log_type_enabled(v8, v24))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_connection_access_probe_connections";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __nw_connection_access_probe_connections_block_invoke;
    v20[3] = &unk_1E524B950;
    BOOL v21 = v3;
    id v22 = v5;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_access_probe_connections_block_invoke((uint64_t)v20);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }
  char v10 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v26 = "nw_connection_access_probe_connections";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v24 = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v7, &v24, &v23)) {
    goto LABEL_38;
  }
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    unsigned int v8 = __nwlog_obj();
    os_log_type_t v11 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v26 = "nw_connection_access_probe_connections";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null handler", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    unsigned int v8 = __nwlog_obj();
    os_log_type_t v19 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v26 = "nw_connection_access_probe_connections";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  unsigned int v8 = __nwlog_obj();
  os_log_type_t v16 = v24;
  BOOL v17 = os_log_type_enabled(v8, v24);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v26 = "nw_connection_access_probe_connections";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v26 = "nw_connection_access_probe_connections";
    __int16 v27 = 2082;
    char v28 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

void __nw_connection_access_probe_connections_block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 40);
  ssize_t v2 = *(id *)(a1 + 32);
  id v3 = v1;
  id v4 = v3;
  if (!v2)
  {
    BOOL v6 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_access_probe_connections_locked";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_access_probe_connections_locked";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_access_probe_connections_locked";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_access_probe_connections_locked";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_access_probe_connections_locked";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v3)
  {
    os_log_type_t v5 = (atomic_uchar *)v2[50];
    if (v5)
    {
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZL45nw_connection_access_probe_connections_lockedP24NWConcrete_nw_connectionU13block_pointerFbS0_E_block_invoke;
      char v23 = &unk_1E524AE90;
      id v24 = v3;
      nw_array_apply(v5, (uint64_t)buf);
    }
    goto LABEL_5;
  }
  char v10 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_access_probe_connections_locked";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    unsigned int v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_access_probe_connections_locked";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null handler", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v20)
  {
    unsigned int v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_access_probe_connections_locked";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  unsigned int v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_access_probe_connections_locked";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v17)
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_connection_access_probe_connections_locked";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_40;
  }
LABEL_5:
}

uint64_t ___ZL45nw_connection_access_probe_connections_lockedP24NWConcrete_nw_connectionU13block_pointerFbS0_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void nw_connection_remove_probe(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  os_log_type_t v5 = v4;
  if (!v3)
  {
    BOOL v6 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v26 = "nw_connection_remove_probe";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v24 = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v7, &v24, &v23)) {
      goto LABEL_38;
    }
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = v24;
      if (os_log_type_enabled(v8, v24))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_connection_remove_probe";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v13 = v24;
      BOOL v14 = os_log_type_enabled(v8, v24);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v26 = "nw_connection_remove_probe";
          __int16 v27 = 2082;
          char v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_connection_remove_probe";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v18 = v24;
      if (os_log_type_enabled(v8, v24))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v26 = "nw_connection_remove_probe";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __nw_connection_remove_probe_block_invoke;
    v20[3] = &unk_1E524B9A0;
    BOOL v21 = v3;
    id v22 = v5;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_remove_probe_block_invoke((uint64_t)v20);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }
  char v10 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v26 = "nw_connection_remove_probe";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v24 = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v7, &v24, &v23)) {
    goto LABEL_38;
  }
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    unsigned int v8 = __nwlog_obj();
    os_log_type_t v11 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v26 = "nw_connection_remove_probe";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null probe", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    unsigned int v8 = __nwlog_obj();
    os_log_type_t v19 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v26 = "nw_connection_remove_probe";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null probe, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  unsigned int v8 = __nwlog_obj();
  os_log_type_t v16 = v24;
  BOOL v17 = os_log_type_enabled(v8, v24);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v26 = "nw_connection_remove_probe";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null probe, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v26 = "nw_connection_remove_probe";
    __int16 v27 = 2082;
    char v28 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null probe, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

void __nw_connection_remove_probe_block_invoke(uint64_t a1)
{
}

void nw_connection_remove_probe_locked(NWConcrete_nw_connection *a1, NWConcrete_nw_connection *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  os_log_type_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v33 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v50 = "nw_connection_remove_probe_locked";
    os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v34, &type, &v47)) {
      goto LABEL_90;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v35 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v50 = "nw_connection_remove_probe_locked";
        _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v35 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v35, type);
      if (backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v50 = "nw_connection_remove_probe_locked";
          __int16 v51 = 2082;
          *(void *)BOOL v52 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v35, v40, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_90:
        if (!v34) {
          goto LABEL_56;
        }
        goto LABEL_91;
      }
      if (v41)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v50 = "nw_connection_remove_probe_locked";
        _os_log_impl(&dword_1830D4000, v35, v40, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v35 = __nwlog_obj();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v50 = "nw_connection_remove_probe_locked";
        _os_log_impl(&dword_1830D4000, v35, v45, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_89:

    goto LABEL_90;
  }
  if (!v4)
  {
    BOOL v37 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v50 = "nw_connection_remove_probe_locked";
    os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v34, &type, &v47)) {
      goto LABEL_90;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v35 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v50 = "nw_connection_remove_probe_locked";
        _os_log_impl(&dword_1830D4000, v35, v38, "%{public}s called with null probe", buf, 0xCu);
      }
    }
    else if (v47)
    {
      long long v42 = (char *)__nw_create_backtrace_string();
      char v35 = __nwlog_obj();
      os_log_type_t v43 = type;
      BOOL v44 = os_log_type_enabled(v35, type);
      if (v42)
      {
        if (v44)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v50 = "nw_connection_remove_probe_locked";
          __int16 v51 = 2082;
          *(void *)BOOL v52 = v42;
          _os_log_impl(&dword_1830D4000, v35, v43, "%{public}s called with null probe, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v42);
        if (!v34) {
          goto LABEL_56;
        }
LABEL_91:
        free(v34);
        goto LABEL_56;
      }
      if (v44)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v50 = "nw_connection_remove_probe_locked";
        _os_log_impl(&dword_1830D4000, v35, v43, "%{public}s called with null probe, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v35 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v50 = "nw_connection_remove_probe_locked";
        _os_log_impl(&dword_1830D4000, v35, v46, "%{public}s called with null probe, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_89;
  }
  probes = v3->probes;
  if (probes)
  {
    Class isa = (NWConcrete_nw_connection **)probes[2].super.super.isa;
    unsigned int v8 = (NWConcrete_nw_connection **)probes[3].super.super.isa;
    os_log_type_t v9 = isa;
    if (isa != v8)
    {
      while (*v9 != v4)
      {
        if (++v9 == v8)
        {
          os_log_type_t v9 = (NWConcrete_nw_connection **)probes[3].super.super.isa;
          break;
        }
      }
    }
    if (v9 != v8)
    {
      p_probes = (uint64_t *)&v3->probes;
      BOOL v11 = nw_array_create();
      BOOL v12 = (void *)v11;
      if (isa != v8)
      {
        std::vector<nw_object_wrapper_t>::reserve(v11 + 16, ((probes[3].super.super.isa - probes[2].super.super.isa) >> 3) - 1);
        BOOL v14 = (void **)probes[2].super.super.isa;
        os_log_type_t v13 = (void **)probes[3].super.super.isa;
        while (v14 != v13)
        {
          if (*v14 != v5) {
            nw_array_append((uint64_t)v12, *v14);
          }
          ++v14;
        }
      }
      objc_storeStrong((id *)&v3->probes, v12);
      parameters = v3->parameters;
      if (parameters && !nw_path_parameters_get_logging_disabled(*((void *)parameters + 13)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v16 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = *p_probes;
          if (*p_probes) {
            uint64_t v17 = (uint64_t)(*(void *)(v17 + 24) - *(void *)(v17 + 16)) >> 3;
          }
          unsigned int top_id = v3->top_id;
          *(_DWORD *)long long buf = 136446978;
          os_log_type_t v50 = "nw_connection_remove_probe_locked";
          __int16 v51 = 1024;
          *(_DWORD *)BOOL v52 = top_id;
          *(_WORD *)&v52[4] = 2112;
          *(void *)&v52[6] = v5;
          __int16 v53 = 2048;
          uint64_t v54 = v17;
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Removed probe %@ from probe list, now have %zu probes", buf, 0x26u);
        }
      }
      cancel_group = v3->cancel_group;
      if (cancel_group)
      {
        dispatch_group_leave(cancel_group);
LABEL_55:

        goto LABEL_56;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v23 = (id)gLogObj;
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v50 = "nw_connection_remove_probe_locked";
      os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v47 = 0;
      if (__nwlog_fault(v24, &type, &v47))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v25 = (id)gLogObj;
          os_log_type_t v26 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)long long buf = 136446210;
            os_log_type_t v50 = "nw_connection_remove_probe_locked";
            _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s Cannot remove probe from cancel group because cancel group does not exist", buf, 0xCu);
          }
        }
        else if (v47)
        {
          __int16 v27 = __nw_create_backtrace_string();
          if (v27)
          {
            char v28 = (char *)v27;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v29 = (id)gLogObj;
            os_log_type_t v30 = type;
            if (os_log_type_enabled(v29, type))
            {
              *(_DWORD *)long long buf = 136446466;
              os_log_type_t v50 = "nw_connection_remove_probe_locked";
              __int16 v51 = 2082;
              *(void *)BOOL v52 = v28;
              _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s Cannot remove probe from cancel group because cancel group does not exist, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v28);
            if (!v24) {
              goto LABEL_55;
            }
            goto LABEL_54;
          }
          uint64_t v25 = __nwlog_obj();
          os_log_type_t v32 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)long long buf = 136446210;
            os_log_type_t v50 = "nw_connection_remove_probe_locked";
            _os_log_impl(&dword_1830D4000, v25, v32, "%{public}s Cannot remove probe from cancel group because cancel group does not exist, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v25 = (id)gLogObj;
          os_log_type_t v31 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)long long buf = 136446210;
            os_log_type_t v50 = "nw_connection_remove_probe_locked";
            _os_log_impl(&dword_1830D4000, v25, v31, "%{public}s Cannot remove probe from cancel group because cancel group does not exist, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v24) {
        goto LABEL_55;
      }
LABEL_54:
      free(v24);
      goto LABEL_55;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v21 = (id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v50 = "nw_connection_remove_probe_locked";
      __int16 v51 = 2112;
      *(void *)BOOL v52 = v5;
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_INFO, "%{public}s Not removing probe %@ because probe list does not contain this probe", buf, 0x16u);
    }
    goto LABEL_32;
  }
  char v20 = v3->parameters;
  if (v20 && !nw_path_parameters_get_logging_disabled(*((void *)v20 + 13)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    BOOL v21 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      unsigned int v22 = v3->top_id;
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v50 = "nw_connection_remove_probe_locked";
      __int16 v51 = 1024;
      *(_DWORD *)BOOL v52 = v22;
      *(_WORD *)&v52[4] = 2112;
      *(void *)&v52[6] = v5;
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_INFO, "%{public}s [C%u] Not removing probe %@ because probes array does not exist", buf, 0x1Cu);
    }
LABEL_32:
  }
LABEL_56:
}

void nw_connection_reset_client(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  ssize_t v2 = v1;
  if (v1)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    os_log_type_t v31 = __Block_byref_object_copy__24353;
    os_log_type_t v32 = __Block_byref_object_dispose__24354;
    id v33 = 0;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_connection_reset_client_block_invoke;
    v21[3] = &unk_1E524B978;
    id v23 = buf;
    id v3 = v1;
    unsigned int v22 = v3;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_reset_client_block_invoke((uint64_t)v21);
    os_unfair_lock_unlock(v2 + 34);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __nw_connection_reset_client_block_invoke_2;
    v18[3] = &unk_1E524B978;
    id v4 = v3;
    os_log_type_t v19 = v4;
    char v20 = buf;
    nw_connection_async_if_needed(v4, v18);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_connection_reset_client_block_invoke_3;
    v16[3] = &unk_1E524BAA8;
    os_log_type_t v5 = v4;
    uint64_t v17 = v5;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_reset_client_block_invoke_3((uint64_t)v16);
    os_unfair_lock_unlock(v2 + 34);
    BOOL v6 = v5;
    *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
    uint64_t v26 = 3221225472;
    __int16 v27 = __nw_connection_allow_reset_queue_block_invoke;
    char v28 = &unk_1E524BAA8;
    BOOL v7 = v6;
    uint64_t v29 = v7;
    os_unfair_lock_lock(v2 + 34);
    v27((uint64_t)type);
    os_unfair_lock_unlock(v2 + 34);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  unsigned int v8 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_reset_client";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v9, type, &v24))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v10 = __nwlog_obj();
      os_log_type_t v11 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_reset_client";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v10 = __nwlog_obj();
      os_log_type_t v13 = type[0];
      BOOL v14 = os_log_type_enabled(v10, type[0]);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_reset_client";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_reset_client";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v10 = __nwlog_obj();
      os_log_type_t v15 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_reset_client";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

void sub_1837F1994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Block_object_dispose((const void *)(v30 - 144), 8);
  _Unwind_Resume(a1);
}

void __nw_connection_reset_client_block_invoke(uint64_t a1)
{
}

void __nw_connection_reset_client_block_invoke_2(uint64_t a1)
{
  ssize_t v2 = *(void **)(*(void *)(a1 + 32) + 168);
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v4 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
  nw_read_request_report_error_with_override(v2, v3, v4);

  uint64_t v5 = *(void *)(a1 + 32);
  BOOL v6 = *(void **)(v5 + 168);
  *(void *)(v5 + 168) = 0;

  BOOL v7 = *(void **)(*(void *)(a1 + 32) + 160);
  unsigned int v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  os_log_type_t v9 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
  nw_write_request_report_error_with_override(v7, v8, v9);

  uint64_t v10 = *(void *)(a1 + 32);
  os_log_type_t v11 = *(void **)(v10 + 160);
  *(void *)(v10 + 160) = 0;

  BOOL v12 = *(void **)(*(void *)(a1 + 32) + 144);
  if (v12)
  {
    os_log_type_t v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    nw_endpoint_handler_cancel_read_write_requests(v12, v13);
  }
}

void sub_1837F1AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_connection_reset_client_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 200);
  *(void *)(v2 + 200) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 208);
  *(void *)(v4 + 208) = 0;
}

uint64_t __nw_connection_allow_reset_queue_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 109) &= ~0x10u;
  return result;
}

BOOL nw_connection_is_cancelled(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v19 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_is_cancelled_block_invoke;
    v13[3] = &unk_1E524B978;
    os_log_type_t v15 = buf;
    BOOL v14 = v1;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_is_cancelled_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    BOOL v3 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_is_cancelled";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_is_cancelled";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_is_cancelled";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_is_cancelled";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_is_cancelled";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_connection_is_cancelled_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = (*(unsigned char *)(*(void *)(result + 32) + 109) & 8) != 0;
  return result;
}

uint64_t __nw_connection_is_cancelled_or_failed_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  BOOL v2 = (*(unsigned char *)(v1 + 109) & 8) != 0 || (*(_DWORD *)(v1 + 80) & 0xFFFFFFFE) == 4;
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v2;
  return result;
}

BOOL nw_connection_should_run_probe(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v19 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_should_run_probe_block_invoke;
    v13[3] = &unk_1E524B978;
    os_log_type_t v15 = buf;
    BOOL v14 = v1;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_should_run_probe_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    BOOL v3 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_should_run_probe";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_should_run_probe";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_should_run_probe";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_should_run_probe";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_should_run_probe";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

BOOL __nw_connection_should_run_probe_block_invoke(uint64_t a1)
{
  BOOL result = nw_connection_should_run_probe_locked(*(NWConcrete_nw_connection **)(a1 + 32));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

BOOL nw_connection_check_experimental_probe_options(void *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  uint64_t v27 = 0;
  char v28 = &v27;
  uint64_t v29 = 0x2020000000;
  char v30 = 0;
  if (v3)
  {
    if (v4)
    {
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_connection_check_experimental_probe_options_block_invoke;
      v21[3] = &unk_1E5242570;
      char v24 = &v27;
      unsigned int v22 = v3;
      id v23 = v5;
      os_unfair_lock_lock(v3 + 34);
      __nw_connection_check_experimental_probe_options_block_invoke((uint64_t)v21);
      os_unfair_lock_unlock(v3 + 34);
      BOOL v6 = *((unsigned char *)v28 + 24) != 0;

      goto LABEL_4;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v32 = "nw_connection_check_experimental_probe_options";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null config", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v25)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v32 = "nw_connection_check_experimental_probe_options";
        __int16 v33 = 2082;
        uint64_t v34 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v32 = "nw_connection_check_experimental_probe_options";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v25)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v32 = "nw_connection_check_experimental_probe_options";
        __int16 v33 = 2082;
        uint64_t v34 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9) {
    free(v9);
  }
  BOOL v6 = 0;
LABEL_4:
  _Block_object_dispose(&v27, 8);

  return v6;
}

uint64_t __nw_connection_check_experimental_probe_options_block_invoke(uint64_t a1)
{
  uint64_t result = nw_connection_check_experimental_probe_options_locked(*(void **)(a1 + 32), *(void **)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

uint64_t nw_connection_check_experimental_probe_options_locked(void *a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    uint64_t v27 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
    char v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v28, &type, &v41)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v35 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
          __int16 v45 = 2082;
          os_log_type_t v46 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v28) {
          goto LABEL_75;
        }
        goto LABEL_74;
      }
      if (v35)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_1830D4000, v29, v39, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_72;
  }
  if (!v4)
  {
    os_log_type_t v31 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
    char v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v28, &type, &v41)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v41)
    {
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v38 = os_log_type_enabled(v29, type);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
          __int16 v45 = 2082;
          os_log_type_t v46 = v36;
          _os_log_impl(&dword_1830D4000, v29, v37, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
LABEL_73:
        if (!v28)
        {
LABEL_75:
          uint64_t v14 = 0;
          goto LABEL_38;
        }
LABEL_74:
        free(v28);
        goto LABEL_75;
      }
      if (v38)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_1830D4000, v29, v37, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
        _os_log_impl(&dword_1830D4000, v29, v40, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_72:

    goto LABEL_73;
  }
  id v6 = v3[2];
  if (v6)
  {
    BOOL v7 = (void *)nw_protocol_boringssl_copy_definition();
    identifier = nw_protocol_definition_get_identifier(v7);
    os_log_type_t v9 = (void *)nw_protocol_boringssl_copy_definition();
    os_log_type_t v10 = nw_parameters_copy_protocol_options_for_definition(v6, v9);

    os_log_type_t v11 = v10;
    Class Class = object_getClass(v5);
    os_log_type_t v13 = (objc_class *)MEMORY[0x1E4F14590];
    if (Class != (Class)MEMORY[0x1E4F14590])
    {
      uint64_t v14 = 0;
LABEL_36:

      goto LABEL_37;
    }
    os_log_type_t v15 = xpc_dictionary_get_value(v5, "validate");
    BOOL v16 = v15;
    if (!v15 || object_getClass(v15) != v13)
    {
      uint64_t v14 = 0;
LABEL_35:

      goto LABEL_36;
    }
    os_log_type_t v17 = xpc_dictionary_get_value(v16, identifier);
    if (v17)
    {
      int v18 = sec_protocol_options_matches_config();
      os_log_type_t v19 = v3[2];
      if (v18)
      {
        if (!v19 || nw_path_parameters_get_logging_disabled(v19[13]))
        {
          uint64_t v14 = 1;
          goto LABEL_34;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v20 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          int v21 = *((_DWORD *)v3 + 112);
          *(_DWORD *)long long buf = 136446466;
          BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
          __int16 v45 = 1024;
          LODWORD(v46) = v21;
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probing a TLS connection with a matching config.", buf, 0x12u);
        }
        uint64_t v14 = 1;
        goto LABEL_33;
      }
      if (v19 && !nw_path_parameters_get_logging_disabled(v19[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v20 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_32;
        }
        int v25 = *((_DWORD *)v3 + 112);
        *(_DWORD *)long long buf = 136446466;
        BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
        __int16 v45 = 1024;
        LODWORD(v46) = v25;
        char v24 = "%{public}s [C%u] Not probing a TLS connection with a mismatched config.";
LABEL_31:
        _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, v24, buf, 0x12u);
LABEL_32:
        uint64_t v14 = 0;
LABEL_33:

LABEL_34:
        goto LABEL_35;
      }
    }
    else
    {
      unsigned int v22 = v3[2];
      if (v22 && !nw_path_parameters_get_logging_disabled(v22[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v20 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_32;
        }
        int v23 = *((_DWORD *)v3 + 112);
        *(_DWORD *)long long buf = 136446466;
        BOOL v44 = "nw_connection_check_experimental_probe_options_locked";
        __int16 v45 = 1024;
        LODWORD(v46) = v23;
        char v24 = "%{public}s [C%u] Missing TLS config.";
        goto LABEL_31;
      }
    }
    uint64_t v14 = 0;
    goto LABEL_34;
  }
  uint64_t v14 = 0;
LABEL_37:

LABEL_38:
  return v14;
}

void sub_1837F2F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_connection_create_experimental_probe_configuration_block_for_protocol(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  BOOL v7 = a1;
  id v8 = a2;
  id v9 = a4;
  os_log_type_t v10 = v9;
  uint64_t v45 = 0;
  os_log_type_t v46 = &v45;
  uint64_t v47 = 0x3032000000;
  uint64_t v48 = __Block_byref_object_copy__10;
  unsigned int v49 = __Block_byref_object_dispose__11;
  id v50 = 0;
  if (!v7)
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v14, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v26 = type;
        BOOL v27 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)long long buf = 136446466;
            BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
            __int16 v53 = 2082;
            uint64_t v54 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v27)
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_1830D4000, v15, v34, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_48:
    if (v14) {
      free(v14);
    }
    goto LABEL_62;
  }
  if (!v8)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
    int v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v18, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v43)
      {
        char v28 = (char *)__nw_create_backtrace_string();
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v19, type);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)long long buf = 136446466;
            BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
            __int16 v53 = 2082;
            uint64_t v54 = v28;
            _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v28);
          goto LABEL_54;
        }
        if (v30)
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_1830D4000, v19, v35, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_54:
    if (v18) {
      free(v18);
    }
    goto LABEL_62;
  }
  if (!v9)
  {
    int v21 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
    unsigned int v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v22, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null protocol_definition", buf, 0xCu);
        }
      }
      else if (v43)
      {
        os_log_type_t v31 = (char *)__nw_create_backtrace_string();
        int v23 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v33 = os_log_type_enabled(v23, type);
        if (v31)
        {
          if (v33)
          {
            *(_DWORD *)long long buf = 136446466;
            BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
            __int16 v53 = 2082;
            uint64_t v54 = v31;
            _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s called with null protocol_definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v31);
          goto LABEL_60;
        }
        if (v33)
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s called with null protocol_definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v23 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v52 = "nw_connection_create_experimental_probe_configuration_block_for_protocol";
          _os_log_impl(&dword_1830D4000, v23, v36, "%{public}s called with null protocol_definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_60:
    if (v22) {
      free(v22);
    }
LABEL_62:
    os_log_type_t v11 = _Block_copy(&__block_literal_global_19196);
    goto LABEL_5;
  }
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = __nw_connection_create_experimental_probe_configuration_block_for_protocol_block_invoke;
  v37[3] = &unk_1E523DB40;
  char v41 = &v45;
  BOOL v38 = v7;
  id v39 = v8;
  uint64_t v42 = a3;
  id v40 = v10;
  os_unfair_lock_lock(v7 + 34);
  __nw_connection_create_experimental_probe_configuration_block_for_protocol_block_invoke((uint64_t)v37);
  os_unfair_lock_unlock(v7 + 34);
  os_log_type_t v11 = _Block_copy((const void *)v46[5]);

LABEL_5:
  _Block_object_dispose(&v45, 8);

  return v11;
}

void __nw_connection_create_experimental_probe_configuration_block_for_protocol_block_invoke(uint64_t a1)
{
  uint64_t v2 = nw_connection_create_experimental_probe_configuration_block_for_protocol_locked(*(void **)(a1 + 32), *(void **)(a1 + 40), *(void *)(a1 + 64), *(void **)(a1 + 48));
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id nw_connection_create_experimental_probe_configuration_block_for_protocol_locked(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  BOOL v7 = a1;
  id v8 = a2;
  id v9 = a4;
  os_log_type_t v10 = v9;
  if (!v7)
  {
    char v28 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v65 = 0;
    if (__nwlog_fault(v29, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v65)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v30 = __nwlog_obj();
        os_log_type_t v45 = type;
        BOOL v46 = os_log_type_enabled(v30, type);
        if (backtrace_string)
        {
          if (v46)
          {
            *(_DWORD *)long long buf = 136446466;
            __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
            __int16 v69 = 2082;
            __int16 v70 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v30, v45, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_79;
        }
        if (v46)
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_1830D4000, v30, v45, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v30 = __nwlog_obj();
        os_log_type_t v56 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_1830D4000, v30, v56, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_79:
    if (v29) {
      free(v29);
    }
    goto LABEL_99;
  }
  if (!v8)
  {
    os_log_type_t v32 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
    BOOL v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v65 = 0;
    if (__nwlog_fault(v33, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v34 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v65)
      {
        uint64_t v47 = (char *)__nw_create_backtrace_string();
        os_log_type_t v34 = __nwlog_obj();
        os_log_type_t v48 = type;
        BOOL v49 = os_log_type_enabled(v34, type);
        if (v47)
        {
          if (v49)
          {
            *(_DWORD *)long long buf = 136446466;
            __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
            __int16 v69 = 2082;
            __int16 v70 = v47;
            _os_log_impl(&dword_1830D4000, v34, v48, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v47);
          goto LABEL_85;
        }
        if (v49)
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_1830D4000, v34, v48, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v34 = __nwlog_obj();
        os_log_type_t v57 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_1830D4000, v34, v57, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_85:
    if (v33) {
      free(v33);
    }
    goto LABEL_99;
  }
  if (!a3)
  {
    os_log_type_t v36 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v65 = 0;
    if (__nwlog_fault(v37, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v38 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null experiment_identifier", buf, 0xCu);
        }
      }
      else if (v65)
      {
        id v50 = (char *)__nw_create_backtrace_string();
        BOOL v38 = __nwlog_obj();
        os_log_type_t v51 = type;
        BOOL v52 = os_log_type_enabled(v38, type);
        if (v50)
        {
          if (v52)
          {
            *(_DWORD *)long long buf = 136446466;
            __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
            __int16 v69 = 2082;
            __int16 v70 = v50;
            _os_log_impl(&dword_1830D4000, v38, v51, "%{public}s called with null experiment_identifier, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v50);
          goto LABEL_91;
        }
        if (v52)
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_1830D4000, v38, v51, "%{public}s called with null experiment_identifier, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v38 = __nwlog_obj();
        os_log_type_t v58 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_1830D4000, v38, v58, "%{public}s called with null experiment_identifier, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_91:
    if (v37) {
      free(v37);
    }
    goto LABEL_99;
  }
  if (!v9)
  {
    id v40 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
    char v41 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v65 = 0;
    if (__nwlog_fault(v41, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v42 = __nwlog_obj();
        os_log_type_t v43 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null protocol_definition", buf, 0xCu);
        }
      }
      else if (v65)
      {
        __int16 v53 = (char *)__nw_create_backtrace_string();
        uint64_t v42 = __nwlog_obj();
        os_log_type_t v54 = type;
        BOOL v55 = os_log_type_enabled(v42, type);
        if (v53)
        {
          if (v55)
          {
            *(_DWORD *)long long buf = 136446466;
            __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
            __int16 v69 = 2082;
            __int16 v70 = v53;
            _os_log_impl(&dword_1830D4000, v42, v54, "%{public}s called with null protocol_definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v53);
          goto LABEL_97;
        }
        if (v55)
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_1830D4000, v42, v54, "%{public}s called with null protocol_definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v42 = __nwlog_obj();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_1830D4000, v42, v59, "%{public}s called with null protocol_definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_97:
    if (v41) {
      free(v41);
    }
LABEL_99:
    uint64_t v14 = _Block_copy(&__block_literal_global_19196);
LABEL_9:
    os_log_type_t v15 = v14;
    goto LABEL_20;
  }
  Class Class = object_getClass(v8);
  os_log_type_t v12 = (objc_class *)MEMORY[0x1E4F14590];
  if (Class != (Class)MEMORY[0x1E4F14590])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v13 = (id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s Malformed experimental configuration blob", buf, 0xCu);
    }

    uint64_t v14 = _Block_copy(&__block_literal_global_19196);
    goto LABEL_9;
  }
  os_log_type_t v16 = (void *)nw_protocol_boringssl_copy_definition();
  identifier = nw_protocol_definition_get_identifier(v16);
  int v18 = v10;

  id v19 = nw_endpoint_handler_copy_protocol_metadata(v7[18], v16, 0, 0);
  os_log_type_t v20 = v18 + 8;
  if (!strncmp(identifier, v18 + 8, 0x20uLL))
  {
    int v21 = xpc_dictionary_get_value(v8, "transform");
    unsigned int v22 = v21;
    if (v21 && object_getClass(v21) == v12)
    {
      int v23 = _Block_copy(&__block_literal_global_19196);
      os_log_type_t v24 = xpc_dictionary_get_value(v22, v20);
      int v25 = v24;
      if (v24 && object_getClass(v24) == v12)
      {
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = ___ZL79nw_connection_create_experimental_probe_configuration_block_for_protocol_lockedP24NWConcrete_nw_connectionPU24objcproto13OS_xpc_object8NSObjectPKcPU36objcproto25OS_nw_protocol_definitionS1__block_invoke;
        aBlock[3] = &unk_1E523DD60;
        id v62 = v25;
        uint64_t v64 = a3;
        id v63 = v19;
        id v60 = v25;
        BOOL v27 = _Block_copy(aBlock);

        os_log_type_t v15 = _Block_copy(v27);
        goto LABEL_18;
      }
    }
    os_log_type_t v15 = _Block_copy(&__block_literal_global_19196);
LABEL_18:

    goto LABEL_19;
  }
  os_log_type_t v15 = _Block_copy(&__block_literal_global_19196);
LABEL_19:

LABEL_20:

  return v15;
}

void sub_1837F43BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL79nw_connection_create_experimental_probe_configuration_block_for_protocol_lockedP24NWConcrete_nw_connectionPU24objcproto13OS_xpc_object8NSObjectPKcPU36objcproto25OS_nw_protocol_definitionS1__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (sec_protocol_options_apply_config()) {
    goto LABEL_9;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked_block_invoke";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (id)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked_block_invoke";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s sec_protocol_options_apply_config failed", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (id)gLogObj;
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s sec_protocol_options_apply_config failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (v4) {
          goto LABEL_8;
        }
        goto LABEL_9;
      }
      if (v9)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked_block_invoke";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s sec_protocol_options_apply_config failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked_block_invoke";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s sec_protocol_options_apply_config failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v4) {
LABEL_8:
  }
    free(v4);
LABEL_9:
  sec_protocol_options_set_experiment_identifier();
  *(void *)long long buf = 0;
  *(void *)&buf[8] = 0;
  sec_protocol_metadata_copy_connection_id();
  sec_protocol_options_set_connection_id();
}

void sub_1837F4758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_connection_create_experimental_probe(void *a1, void *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  BOOL v7 = v6;
  uint64_t v30 = 0;
  os_log_type_t v31 = &v30;
  uint64_t v32 = 0x3032000000;
  BOOL v33 = __Block_byref_object_copy__24353;
  os_log_type_t v34 = __Block_byref_object_dispose__24354;
  id v35 = 0;
  if (v5)
  {
    if (v6)
    {
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = __nw_connection_create_experimental_probe_block_invoke;
      v23[3] = &unk_1E5242458;
      os_log_type_t v26 = &v30;
      os_log_type_t v24 = v5;
      id v25 = v7;
      uint64_t v27 = a3;
      os_unfair_lock_lock(v5 + 34);
      __nw_connection_create_experimental_probe_block_invoke((uint64_t)v23);
      os_unfair_lock_unlock(v5 + 34);
      id v8 = (id)v31[5];

      goto LABEL_4;
    }
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v37 = "nw_connection_create_experimental_probe";
    char v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v11, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null config", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v28)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v20)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v37 = "nw_connection_create_experimental_probe";
        __int16 v38 = 2082;
        os_log_type_t v39 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v37 = "nw_connection_create_experimental_probe";
    char v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v11, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v28)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v37 = "nw_connection_create_experimental_probe";
        __int16 v38 = 2082;
        os_log_type_t v39 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v11) {
    free(v11);
  }
  id v8 = 0;
LABEL_4:
  _Block_object_dispose(&v30, 8);

  return v8;
}

void __nw_connection_create_experimental_probe_block_invoke(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 56);
  id v4 = (NWConcrete_nw_connection *)*(id *)(a1 + 32);
  id v5 = v2;
  id v6 = v5;
  if (!v4)
  {
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    id v35 = "nw_connection_create_experimental_probe_locked";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v15, &type, &v32)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null connection", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v32)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_1830D4000, v16, v29, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)long long buf = 136446210;
        id v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v24)
    {
      *(_DWORD *)long long buf = 136446466;
      id v35 = "nw_connection_create_experimental_probe_locked";
      __int16 v36 = 2082;
      os_log_type_t v37 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_40;
  }
  if (!v5)
  {
    BOOL v18 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    id v35 = "nw_connection_create_experimental_probe_locked";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v15, &type, &v32)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null config", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v32)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_1830D4000, v16, v30, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)long long buf = 136446210;
        id v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v26)
    {
      *(_DWORD *)long long buf = 136446466;
      id v35 = "nw_connection_create_experimental_probe_locked";
      __int16 v36 = 2082;
      os_log_type_t v37 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_40;
  }
  if (!v3)
  {
    BOOL v20 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    id v35 = "nw_connection_create_experimental_probe_locked";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v15, &type, &v32)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null experiment_identifier", buf, 0xCu);
      }
LABEL_58:

LABEL_59:
      if (v15) {
        free(v15);
      }
      goto LABEL_9;
    }
    if (!v32)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_1830D4000, v16, v31, "%{public}s called with null experiment_identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)long long buf = 136446210;
        id v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null experiment_identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v28)
    {
      *(_DWORD *)long long buf = 136446466;
      id v35 = "nw_connection_create_experimental_probe_locked";
      __int16 v36 = 2082;
      os_log_type_t v37 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null experiment_identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_40:

    free(backtrace_string);
    goto LABEL_59;
  }
  if (!nw_connection_should_run_probe_locked(v4)
    || !nw_connection_check_experimental_probe_options_locked(v4, v6))
  {
    goto LABEL_9;
  }
  BOOL v7 = (void *)nw_protocol_boringssl_copy_definition();
  id v8 = nw_connection_create_experimental_probe_configuration_block_for_protocol_locked(v4, v6, v3, v7);
  BOOL v9 = v8;
  if (v8 == &__block_literal_global_19196)
  {

LABEL_9:
    probe_locked = 0;
    goto LABEL_10;
  }
  nw_parameters_t secure_tcp = nw_parameters_create_secure_tcp(v8, &__block_literal_global_98);
  probe_locked = nw_connection_create_probe_locked(v4, secure_tcp);

LABEL_10:
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  os_log_type_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = probe_locked;
}

void sub_1837F547C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSObject *nw_connection_create_probe_locked(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (!v4)
  {
    char v11 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v26 = "nw_connection_create_probe_locked";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v24 = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v12, &v24, &v23))
    {
      if (v24 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v14 = v24;
        if (os_log_type_enabled(v13, v24))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v26 = "nw_connection_create_probe_locked";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null probe_parameters", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v16 = v24;
        BOOL v17 = os_log_type_enabled(v13, v24);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)long long buf = 136446466;
            BOOL v26 = "nw_connection_create_probe_locked";
            __int16 v27 = 2082;
            BOOL v28 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null probe_parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v17)
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v26 = "nw_connection_create_probe_locked";
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null probe_parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v18 = v24;
        if (os_log_type_enabled(v13, v24))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v26 = "nw_connection_create_probe_locked";
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null probe_parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v12) {
      free(v12);
    }
    goto LABEL_22;
  }
  if (!nw_connection_should_run_probe_locked((NWConcrete_nw_connection *)v3))
  {
LABEL_22:
    os_log_type_t v10 = 0;
    goto LABEL_23;
  }
  id v5 = v4;
  v5[12] = v5[12] & 0xFFFFFFFFFFFFFF3FLL | 0x80;

  id v6 = v5;
  v5[12] |= 0x400uLL;

  nw_connection_t v7 = nw_connection_create(*((nw_endpoint_t *)v3 + 1), v6);
  BYTE4(v7[13].isa) |= 0x80u;
  v3[108] |= 0x40u;
  v3[109] |= 1u;
  *(_OWORD *)((char *)&v7[58].isa + 4) = *(_OWORD *)(v3 + 452);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = ___ZL33nw_connection_create_probe_lockedP24NWConcrete_nw_connectionPU27objcproto16OS_nw_parameters8NSObject_block_invoke;
  handler[3] = &unk_1E524BB98;
  os_log_type_t v21 = v3;
  id v8 = v7;
  os_log_type_t v22 = v8;
  nw_connection_set_state_changed_handler(v8, handler);
  BOOL v9 = v22;
  os_log_type_t v10 = v8;

LABEL_23:
  return v10;
}

void sub_1837F5860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void ___ZL33nw_connection_create_probe_lockedP24NWConcrete_nw_connectionPU27objcproto16OS_nw_parameters8NSObject_block_invoke(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  switch(a2)
  {
    case 3u:
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 16);
      if (v11 && !nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v12 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          int v22 = 136446466;
          char v23 = "nw_connection_create_probe_locked_block_invoke";
          __int16 v24 = 1024;
          int v25 = v13;
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection succeeded", (uint8_t *)&v22, 0x12u);
        }
      }
      os_log_type_t v14 = *(void **)(a1 + 40);
      BOOL v9 = (nw_connection_t *)(a1 + 40);
      nw_connection_remove_probe(*(v9 - 1), v14);
      goto LABEL_20;
    case 5u:
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 16);
      if (v15 && !nw_path_parameters_get_logging_disabled(*(void *)(v15 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v16 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          int v17 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          int v22 = 136446466;
          char v23 = "nw_connection_create_probe_locked_block_invoke";
          __int16 v24 = 1024;
          int v25 = v17;
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection cancelled", (uint8_t *)&v22, 0x12u);
        }
      }
      nw_connection_remove_probe(*(void **)(a1 + 32), *(void **)(a1 + 40));
      break;
    case 4u:
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 16);
      if (v6 && !nw_path_parameters_get_logging_disabled(*(void *)(v6 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        nw_connection_t v7 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          int v8 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          int v22 = 136446466;
          char v23 = "nw_connection_create_probe_locked_block_invoke";
          __int16 v24 = 1024;
          int v25 = v8;
          _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection failed", (uint8_t *)&v22, 0x12u);
        }
      }
      os_log_type_t v10 = *(void **)(a1 + 40);
      BOOL v9 = (nw_connection_t *)(a1 + 40);
      nw_connection_remove_probe(*(v9 - 1), v10);
LABEL_20:
      nw_connection_cancel(*v9);
      break;
    default:
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 16);
      if (v18 && !nw_path_parameters_get_logging_disabled(*(void *)(v18 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v19 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          int v20 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          if (a2 > 2) {
            os_log_type_t v21 = "unknown";
          }
          else {
            os_log_type_t v21 = off_1E523DEC0[a2];
          }
          int v22 = 136446722;
          char v23 = "nw_connection_create_probe_locked_block_invoke";
          __int16 v24 = 1024;
          int v25 = v20;
          __int16 v26 = 2080;
          __int16 v27 = v21;
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection state: %s", (uint8_t *)&v22, 0x1Cu);
        }
      }
      break;
  }
}

void sub_1837F5C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) + 16))();
}

void ___ZL28nw_connection_async_on_queueP24NWConcrete_nw_connectionPU28objcproto17OS_dispatch_queue8NSObject11qos_class_tU13block_pointerFvvE_block_invoke(uint64_t a1)
{
}

void __nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  memset(uu, 0, 16);
  id v6 = nw_parameters_copy_effective_proxy_config(a2);
  nw_connection_t v7 = v6;
  if (!v6)
  {
LABEL_10:

    int is_null = uuid_is_null(uu);
    uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 16);
    if (is_null)
    {
      if (v16 && !nw_path_parameters_get_logging_disabled(*(void *)(v16 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v11 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          int v17 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          int v18 = *(_DWORD *)(a1 + 40);
          int v22 = 136446722;
          char v23 = "nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke";
          __int16 v24 = 1024;
          int v25 = v17;
          __int16 v26 = 1024;
          int v27 = v18;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Cannot report error %d, no proxy agent", (uint8_t *)&v22, 0x18u);
        }
        int v8 = 0;
        goto LABEL_18;
      }
    }
    else
    {
      if (v16 && !nw_path_parameters_get_logging_disabled(*(void *)(v16 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v19 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          int v20 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          int v21 = *(_DWORD *)(a1 + 40);
          int v22 = 136447234;
          char v23 = "nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke";
          __int16 v24 = 1024;
          int v25 = v20;
          __int16 v26 = 1024;
          int v27 = v21;
          __int16 v28 = 1042;
          int v29 = 16;
          __int16 v30 = 2098;
          os_log_type_t v31 = uu;
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_INFO, "%{public}s [C%u] Reporting error %d to proxy agent %{public, uuid_t}.16P", (uint8_t *)&v22, 0x28u);
        }
      }
      nw_path_report_error_to_agent(v5, uu, *(_DWORD *)(a1 + 40));
    }
    int v8 = 0;
    goto LABEL_28;
  }
  int v8 = v6;
  char v9 = v8[170];

  if (v9)
  {
    os_log_type_t v14 = v8;
    *(_OWORD *)uu = *(_OWORD *)(v14 + 56);

    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v10 && !nw_path_parameters_get_logging_disabled(*(void *)(v10 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v11 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      int v13 = *(_DWORD *)(a1 + 40);
      int v22 = 136446722;
      char v23 = "nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke";
      __int16 v24 = 1024;
      int v25 = v12;
      __int16 v26 = 1024;
      int v27 = v13;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Not reporting error %d, not privacy proxy", (uint8_t *)&v22, 0x18u);
    }
LABEL_18:
  }
LABEL_28:
}

void sub_1837F5FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke_28(uint64_t a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ((int)nw_endpoint_handler_get_state(v3) >= 1 && (int)nw_endpoint_handler_get_state(v3) <= 4)
  {
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v3) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v15 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v3);
        int v17 = nw_endpoint_handler_dry_run_string(v3);
        nw_endpoint_t v24 = nw_endpoint_handler_copy_endpoint(v3);
        logging_description = nw_endpoint_get_logging_description(v24);
        os_log_type_t v19 = nw_endpoint_handler_state_string(v3);
        int v20 = nw_endpoint_handler_mode_string(v3);
        id v21 = nw_endpoint_handler_copy_current_path(v3);
        int v22 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)long long buf = 136448002;
        __int16 v26 = "nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke";
        __int16 v27 = 2082;
        __int16 v28 = id_string;
        char v23 = v21;
        __int16 v29 = 2082;
        __int16 v30 = v17;
        __int16 v31 = 2082;
        char v32 = logging_description;
        __int16 v33 = 2082;
        os_log_type_t v34 = v19;
        __int16 v35 = 2082;
        __int16 v36 = v20;
        __int16 v37 = 2114;
        id v38 = v21;
        __int16 v39 = 1024;
        int v40 = v22;
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] reporting proxy error %d", buf, 0x4Eu);
      }
    }
    id v4 = nw_endpoint_handler_copy_parameters(v3);
    id v5 = nw_endpoint_handler_copy_current_path(v3);
    id v6 = v5;
    if (v4 && v5) {
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }

LABEL_8:
    goto LABEL_10;
  }
  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v3) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v8 = nw_endpoint_handler_get_id_string(v3);
      char v9 = nw_endpoint_handler_dry_run_string(v3);
      nw_endpoint_t v10 = nw_endpoint_handler_copy_endpoint(v3);
      uint64_t v11 = nw_endpoint_get_logging_description(v10);
      int v12 = nw_endpoint_handler_state_string(v3);
      int v13 = nw_endpoint_handler_mode_string(v3);
      *(_DWORD *)long long buf = 136447746;
      __int16 v26 = "nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke";
      __int16 v27 = 2082;
      __int16 v28 = v8;
      id v14 = nw_endpoint_handler_copy_current_path(v3);
      __int16 v29 = 2082;
      __int16 v30 = v9;
      __int16 v31 = 2082;
      char v32 = v11;
      __int16 v33 = 2082;
      os_log_type_t v34 = v12;
      __int16 v35 = 2082;
      __int16 v36 = v13;
      __int16 v37 = 2114;
      id v38 = v14;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] skipping endpoint handler that is not in correct state for reporting proxy errors", buf, 0x48u);
    }
    goto LABEL_8;
  }
LABEL_10:

  return 1;
}

void sub_1837F630C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL62nw_connection_take_initial_data_transfer_snapshots_on_nw_queueP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return 1;
}

BOOL ___ZL51nw_connection_run_sec_experiment_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  experimental_probe = nw_connection_create_experimental_probe(*(void **)(a1 + 32), v5, a2);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16);
  if (experimental_probe)
  {
    if (v7 && !nw_path_parameters_get_logging_disabled(*(void *)(v7 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        *(_DWORD *)long long buf = 136446722;
        int v18 = "nw_connection_run_sec_experiment_locked_on_nw_queue_block_invoke";
        __int16 v19 = 1024;
        int v20 = v9;
        __int16 v21 = 2082;
        uint64_t v22 = a2;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection started for experiment %{public}s", buf, 0x1Cu);
      }
    }
    BOOL v10 = nw_queue_copy_current_workloop();
    nw_connection_set_queue(experimental_probe, (dispatch_queue_t)v10);

    nw_connection_add_probe(*(void **)(a1 + 32), experimental_probe);
    uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 24);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = ___ZL51nw_connection_run_sec_experiment_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke_222;
    v15[3] = &unk_1E524BAA8;
    uint64_t v16 = experimental_probe;
    nw_queue_context_async(v11, v15);
    int v12 = v16;
LABEL_16:

    goto LABEL_17;
  }
  if (v7 && !nw_path_parameters_get_logging_disabled(*(void *)(v7 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v12 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446722;
      int v18 = "nw_connection_run_sec_experiment_locked_on_nw_queue_block_invoke_2";
      __int16 v19 = 1024;
      int v20 = v13;
      __int16 v21 = 2082;
      uint64_t v22 = a2;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection skipped for experiment %{public}s: nw_connection_create_experimental_probe returned nil connection", buf, 0x1Cu);
    }
    goto LABEL_16;
  }
LABEL_17:

  return experimental_probe != 0;
}

void sub_1837F664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL51nw_connection_run_sec_experiment_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke_225(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v2 && !nw_path_parameters_get_logging_disabled(*(void *)(v2 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v5 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      int v7 = 136446722;
      int v8 = "nw_connection_run_sec_experiment_locked_on_nw_queue_block_invoke";
      __int16 v9 = 1024;
      int v10 = v6;
      __int16 v11 = 2082;
      uint64_t v12 = a2;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Probe connection skipped for experiment %{public}s", (uint8_t *)&v7, 0x1Cu);
    }
  }
}

void ___ZL46nw_connection_run_ech_probe_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = nw_protocol_options_copy(v3);
    nw_protocol_stack_append_application_protocol(v4, v5);
  }
  else if (nw_protocol_options_is_tls(v3))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    nw_protocol_stack_append_application_protocol(*(void **)(a1 + 32), *(void **)(a1 + 40));
  }
}

void sub_1837F6840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL46nw_connection_run_ech_probe_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke_229(uint64_t a1)
{
}

void ___ZL41nw_connection_endpoint_report_on_nw_queuePU33objcproto22OS_nw_endpoint_handler8NSObject26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS__block_invoke_219(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(_DWORD *)(*(void *)(a1 + 32) + 504) = nw_endpoint_handler_get_proxy_privacy_stance(v3);
}

uint64_t ___ZL54nw_connection_start_candidate_manager_if_needed_lockedP24NWConcrete_nw_connection_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = nw_resolution_report_copy_successful_endpoint(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      int v11 = 136446722;
      uint64_t v12 = "nw_connection_start_candidate_manager_if_needed_locked_block_invoke";
      __int16 v13 = 1024;
      int v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v4;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Found endpoint %@", (uint8_t *)&v11, 0x1Cu);
    }
  }
  nw_endpoint_type_t type = nw_endpoint_get_type(v4);
  if (type == nw_endpoint_type_address)
  {
    uint64_t v9 = a1 + 48;
    goto LABEL_12;
  }
  if (type == nw_endpoint_type_bonjour_service)
  {
    uint64_t v9 = a1 + 40;
LABEL_12:
    objc_storeStrong((id *)(*(void *)(*(void *)v9 + 8) + 40), v4);
  }

  return 1;
}

void sub_1837F6A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL49nw_connection_check_for_unlisted_tracker_on_queueP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObject_block_invoke()
{
  return 0;
}

void nw_connection_start_dry_run_on_nw_queue(NWConcrete_nw_connection *a1)
{
  *(void *)&v30[13] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1->context);
    parameters = (uint64_t *)v2->parameters;
    if (v2->dry_run_endpoint_handler)
    {
      if (parameters && !nw_path_parameters_get_logging_disabled(parameters[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v4 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          unsigned int top_id = v2->top_id;
          *(_DWORD *)long long buf = 136446466;
          __int16 v28 = "nw_connection_start_dry_run_on_nw_queue";
          __int16 v29 = 1024;
          *(_DWORD *)__int16 v30 = top_id;
          _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Dry run endpoint handler already started", buf, 0x12u);
        }
      }
    }
    else
    {
      id v6 = parameters;
      BOOL v7 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v6, 0, 0);

      nw_parameters_set_dry_run((void *)v7, 1u);
      nw_parameters_set_indefinite((void *)v7, 1);
      inner = nw_endpoint_handler_create_inner(v2->endpoint, (void *)v7, nw_connection_endpoint_report_dry_run_on_nw_queue, v2, 0, 0, 1);
      dry_run_endpoint_handler = v2->dry_run_endpoint_handler;
      v2->dry_run_endpoint_handler = (OS_nw_endpoint_handler *)inner;

      int v10 = v2->parameters;
      if (v10 && !nw_path_parameters_get_logging_disabled(*((void *)v10 + 13)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v11 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          unsigned int v12 = v2->top_id;
          id_string = nw_endpoint_handler_get_id_string(v2->dry_run_endpoint_handler);
          *(_DWORD *)long long buf = 136446722;
          __int16 v28 = "nw_connection_start_dry_run_on_nw_queue";
          __int16 v29 = 1024;
          *(_DWORD *)__int16 v30 = v12;
          v30[2] = 2082;
          *(void *)&void v30[3] = id_string;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s [C%u] Starting dry-run endpoint handler [C%{public}s] to check for a better path", buf, 0x1Cu);
        }
      }
      context = v2->context;
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = ___ZL39nw_connection_start_dry_run_on_nw_queueP24NWConcrete_nw_connection_block_invoke;
      v23[3] = &unk_1E524BAA8;
      nw_endpoint_t v24 = v2;
      nw_queue_context_async(context, v23);
    }
    goto LABEL_18;
  }
  __int16 v15 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v28 = "nw_connection_start_dry_run_on_nw_queue";
  uint64_t v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v16, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v28 = "nw_connection_start_dry_run_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v28 = "nw_connection_start_dry_run_on_nw_queue";
          __int16 v29 = 2082;
          *(void *)__int16 v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v21)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v28 = "nw_connection_start_dry_run_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v28 = "nw_connection_start_dry_run_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_35:
  if (v16) {
    free(v16);
  }
LABEL_18:
}

void sub_1837F6F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_connection_send_path_changed_on_nw_queueP24NWConcrete_nw_connectionPU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t ___ZL54nw_connection_update_data_transfer_reports_on_nw_queueP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return 1;
}

void ___ZL48nw_connection_send_viability_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 32);
  if (v1[32] == 2)
  {
    dispatch_qos_class_t v3 = v1[48];
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = ___ZL48nw_connection_send_viability_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke_2;
    v4[3] = &unk_1E5249BD0;
    id v5 = *(id *)(a1 + 40);
    char v6 = *(unsigned char *)(a1 + 48);
    nw_connection_async_client(v1, v3, v4);
  }
}

void sub_1837F7084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL48nw_connection_send_viability_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZL50nw_connection_send_better_path_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZL59nw_connection_send_alternate_path_state_changed_on_nw_queueP24NWConcrete_nw_connection36nw_connection_alternate_path_state_t_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void ___ZL39nw_connection_start_dry_run_on_nw_queueP24NWConcrete_nw_connection_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 176);
  if (v1) {
    nw_endpoint_handler_start(v1);
  }
}

uint64_t nw_connection_endpoint_report_dry_run_on_nw_queue(void *a1, int a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v9 = a1;
  int v10 = a6;
  nw_context_assert_queue(v10[3]);
  int v11 = (os_unfair_lock_s *)(v10 + 17);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = ___ZL49nw_connection_endpoint_report_dry_run_on_nw_queuePU33objcproto22OS_nw_endpoint_handler8NSObject26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS__block_invoke;
  v15[3] = &unk_1E5249FB0;
  unsigned int v12 = v10;
  uint64_t v16 = v12;
  id v13 = v9;
  id v17 = v13;
  int v18 = a3;
  int v19 = a2;
  os_unfair_lock_lock(v11);
  ___ZL49nw_connection_endpoint_report_dry_run_on_nw_queuePU33objcproto22OS_nw_endpoint_handler8NSObject26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS__block_invoke((uint64_t)v15);
  os_unfair_lock_unlock(v11);

  return 1;
}

void sub_1837F71F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL49nw_connection_endpoint_report_dry_run_on_nw_queuePU33objcproto22OS_nw_endpoint_handler8NSObject26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS__block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v2 && !nw_path_parameters_get_logging_disabled(*(void *)(v2 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    dispatch_qos_class_t v3 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      id v5 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
      uint64_t v6 = *(unsigned int *)(a1 + 48);
      if (v6 > 5) {
        BOOL v7 = "unknown-state";
      }
      else {
        BOOL v7 = off_1E523FB38[v6];
      }
      int v9 = 136446978;
      int v10 = "nw_connection_endpoint_report_dry_run_on_nw_queue_block_invoke";
      __int16 v11 = 1024;
      int v12 = v4;
      __int16 v13 = 2082;
      int v14 = v5;
      __int16 v15 = 2082;
      uint64_t v16 = v7;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Dry run state update (mode %{public}s, state %{public}s)", (uint8_t *)&v9, 0x26u);
    }
  }
  if (*(_DWORD *)(a1 + 52) == 2 && *(_DWORD *)(a1 + 48) == 3) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 184), *(id *)(a1 + 40));
  }
  int v8 = *(NWConcrete_nw_connection **)(a1 + 32);
  if (*(OS_nw_endpoint_handler **)(a1 + 40) == v8->dry_run_endpoint_handler) {
    nw_connection_update_better_path_locked_on_nw_queue(v8);
  }
}

void ___ZL51nw_connection_run_sec_experiment_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke_222(uint64_t a1)
{
}

uint64_t ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_242(uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = a3;
  id v5 = v4 + 34;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_2;
  void v8[3] = &unk_1E5249868;
  uint64_t v6 = v4;
  int v9 = v6;
  id v10 = *(id *)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  os_unfair_lock_lock(v5);
  ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_2((uint64_t)v8);
  os_unfair_lock_unlock(v5);
  if (*(unsigned char *)(a1 + 48)) {
    nw_connection_force_cancel(v6);
  }
  else {
    nw_connection_cancel(v6);
  }

  return 1;
}

void sub_1837F7494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_243(uint64_t a1, int a2, NWConcrete_nw_connection *a3)
{
  return 1;
}

void ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_2(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 80) == 5)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 16);
    if (!v3 || nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104))) {
      goto LABEL_10;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v4 = (id)gconnectionLogObj;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
LABEL_9:

LABEL_10:
      nw_array_append(*(void *)(a1 + 48), *(void **)(a1 + 32));
      return;
    }
    int v5 = *(_DWORD *)(*(void *)(a1 + 40) + 448);
    int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
    int v11 = 136446722;
    int v12 = "nw_connection_cancel_probes_block_invoke_2";
    __int16 v13 = 1024;
    int v14 = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    BOOL v7 = "%{public}s [C%u] Probe already cancelled, removing probe [C%u]";
LABEL_8:
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v11, 0x18u);
    goto LABEL_9;
  }
  if (!*(void *)(v2 + 216) && !*(void *)(v2 + 208))
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 16);
    if (!v8 || nw_path_parameters_get_logging_disabled(*(void *)(v8 + 104))) {
      goto LABEL_10;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v4 = (id)gconnectionLogObj;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    int v9 = *(_DWORD *)(*(void *)(a1 + 40) + 448);
    int v10 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
    int v11 = 136446722;
    int v12 = "nw_connection_cancel_probes_block_invoke";
    __int16 v13 = 1024;
    int v14 = v9;
    __int16 v15 = 1024;
    int v16 = v10;
    BOOL v7 = "%{public}s [C%u] Probe has no handlers that would communicate cancelled state, removing probe [C%u]";
    goto LABEL_8;
  }
}

void nw_connection_force_cancel(nw_connection_t connection)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = connection;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_connection_cancel_inner(v1, 1);
    goto LABEL_3;
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  int v14 = "nw_connection_force_cancel";
  int v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        int v14 = "nw_connection_force_cancel";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)long long buf = 136446466;
          int v14 = "nw_connection_force_cancel";
          __int16 v15 = 2082;
          int v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)long long buf = 136446210;
        int v14 = "nw_connection_force_cancel";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)long long buf = 136446210;
        int v14 = "nw_connection_force_cancel";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
LABEL_3:
}

void sub_1837F7964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL55nw_connection_cleanup_data_transfer_reports_on_nw_queueP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return 1;
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_24930()
{
  BOOL result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

uint64_t nw_connection_get_attempted_probe_on_queue(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(*((void **)v1 + 3));
    uint64_t v3 = v2[109] & 1;
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  int v16 = "nw_connection_get_attempted_probe_on_queue";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        int v16 = "nw_connection_get_attempted_probe_on_queue";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          int v16 = "nw_connection_get_attempted_probe_on_queue";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        int v16 = "nw_connection_get_attempted_probe_on_queue";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        int v16 = "nw_connection_get_attempted_probe_on_queue";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void sub_1837F7C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_connection_create_with_connection(void *a1, void *a2)
{
  uint64_t v216 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    os_log_type_t v94 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
    uint32_t v95 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v197) = 0;
    if (!__nwlog_fault(v95, type, &v197)) {
      goto LABEL_238;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      long long v96 = __nwlog_obj();
      os_log_type_t v97 = type[0];
      if (os_log_type_enabled(v96, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        _os_log_impl(&dword_1830D4000, v96, v97, "%{public}s called with null original_connection", buf, 0xCu);
      }
    }
    else if ((_BYTE)v197)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      long long v96 = __nwlog_obj();
      os_log_type_t v103 = type[0];
      BOOL v104 = os_log_type_enabled(v96, type[0]);
      if (backtrace_string)
      {
        if (v104)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v96, v103, "%{public}s called with null original_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v95) {
          goto LABEL_240;
        }
        goto LABEL_239;
      }
      if (v104)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        _os_log_impl(&dword_1830D4000, v96, v103, "%{public}s called with null original_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      long long v96 = __nwlog_obj();
      os_log_type_t v135 = type[0];
      if (os_log_type_enabled(v96, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        _os_log_impl(&dword_1830D4000, v96, v135, "%{public}s called with null original_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_237;
  }
  if (!v4)
  {
    unint64_t v98 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
    uint32_t v95 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v197) = 0;
    if (!__nwlog_fault(v95, type, &v197)) {
      goto LABEL_238;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      long long v96 = __nwlog_obj();
      os_log_type_t v99 = type[0];
      if (os_log_type_enabled(v96, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        _os_log_impl(&dword_1830D4000, v96, v99, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if ((_BYTE)v197)
    {
      uint64_t v105 = (char *)__nw_create_backtrace_string();
      long long v96 = __nwlog_obj();
      os_log_type_t v106 = type[0];
      BOOL v107 = os_log_type_enabled(v96, type[0]);
      if (v105)
      {
        if (v107)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v105;
          _os_log_impl(&dword_1830D4000, v96, v106, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v105);
LABEL_238:
        if (!v95)
        {
LABEL_240:
          id v38 = 0;
          goto LABEL_225;
        }
LABEL_239:
        free(v95);
        goto LABEL_240;
      }
      if (v107)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        _os_log_impl(&dword_1830D4000, v96, v106, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      long long v96 = __nwlog_obj();
      os_log_type_t v136 = type[0];
      if (os_log_type_enabled(v96, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        _os_log_impl(&dword_1830D4000, v96, v136, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_237:

    goto LABEL_238;
  }
  os_log_type_t v6 = [NWConcrete_nw_connection alloc];
  BOOL v7 = (void *)*((void *)v3 + 1);
  id v8 = v5;
  BOOL v9 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v8, 0, 0);

  uint64_t v10 = -[NWConcrete_nw_connection initWithEndpoint:parameters:identifier:]((void **)&v6->super.isa, v7, (void *)v9, 0);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v12 = *(void *)(v10 + 16);
    nw_allow_use_of_dispatch_internal();
    if (has_modifiers == 1)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_modify_lock);
      char v13 = (void *)g_modifier_list;
      if (g_modifier_list)
      {
        while (1)
        {
          int v14 = (uint64_t (*)(uint64_t, uint64_t))v13[2];
          if (v14)
          {
            if (v14(v11, v12)) {
              break;
            }
          }
          char v13 = (void *)*v13;
          if (!v13) {
            goto LABEL_6;
          }
        }
        os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_modify_lock);
        uint64_t v15 = *(void *)(v10 + 16);
        if (v15 && !nw_path_parameters_get_logging_disabled(*(void *)(v15 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          int v16 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            int v17 = *(_DWORD *)(v10 + 448);
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v17;
            _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Connection parameters were modified", buf, 0x12u);
          }
        }
      }
      else
      {
LABEL_6:
        os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_modify_lock);
      }
    }
    uint64_t v197 = 0;
    unint64_t v198 = &v197;
    uint64_t v199 = 0x2020000000;
    char v200 = 0;
    *(void *)os_log_type_t type = 0;
    int v192 = type;
    uint64_t v193 = 0x3032000000;
    unint64_t v194 = __Block_byref_object_copy__24353;
    unint64_t v195 = __Block_byref_object_dispose__24354;
    id v196 = 0;
    v187[0] = MEMORY[0x1E4F143A8];
    v187[1] = 3221225472;
    v187[2] = __nw_connection_create_with_connection_block_invoke;
    v187[3] = &unk_1E5244950;
    uint64_t v189 = &v197;
    int v18 = v3;
    id v188 = v18;
    unint64_t v190 = type;
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 34);
    __nw_connection_create_with_connection_block_invoke(v187);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 34);
    if (!*((unsigned char *)v198 + 24) || (uint64_t v19 = (void *)*((void *)v192 + 5)) == 0)
    {
      uint64_t v36 = *(void *)(v10 + 16);
      if (!v36 || nw_path_parameters_get_logging_disabled(*(void *)(v36 + 104)))
      {
        id v38 = 0;
LABEL_223:

        _Block_object_dispose(type, 8);
        _Block_object_dispose(&v197, 8);
        goto LABEL_224;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v21 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        int v37 = *(_DWORD *)(v10 + 448);
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v37;
        _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Original connection not yet connected", buf, 0x12u);
      }
      id v38 = 0;
LABEL_222:

      goto LABEL_223;
    }
    os_log_type_t v20 = v19;
    BOOL v21 = v20[5];

    os_log_type_t v22 = v8;
    id v186 = *(id *)(v22[13] + 136);

    if (!v21)
    {
      uint64_t v46 = *(void *)(v10 + 16);
      if (!v46 || nw_path_parameters_get_logging_disabled(*(void *)(v46 + 104))) {
        goto LABEL_220;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v47 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        int v48 = *(_DWORD *)(v10 + 448);
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v48;
        _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Cannot get context from existing connection", buf, 0x12u);
      }
      goto LABEL_219;
    }
    if (!v186)
    {
      uint64_t v50 = *(void *)(v10 + 16);
      if (!v50 || nw_path_parameters_get_logging_disabled(*(void *)(v50 + 104))) {
        goto LABEL_220;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v47 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        int v51 = *(_DWORD *)(v10 + 448);
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v51;
        _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Cannot get context from new parameters", buf, 0x12u);
      }
      goto LABEL_219;
    }
    if (!nw_context_shares_workloop(v21, v186))
    {
      uint64_t v52 = *(void *)(v10 + 16);
      if (!v52 || nw_path_parameters_get_logging_disabled(*(void *)(v52 + 104))) {
        goto LABEL_220;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v47 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        int v53 = *(_DWORD *)(v10 + 448);
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v53;
        _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_ERROR, "%{public}s [C%u] New parameters do not share workloop with existing connection", buf, 0x12u);
      }
      goto LABEL_219;
    }
    uint64_t v23 = *(void **)(v10 + 16);
    unsigned int v24 = *(_DWORD *)(v10 + 448);
    char v25 = *((id *)v192 + 5);
    id v26 = v23;
    int v184 = v25;
    uint64_t v185 = (id)v10;
    unint64_t v183 = v26;
    if (v25)
    {
      if (v26)
      {
        if (v25[29] == 2)
        {
          __int16 v27 = nw_endpoint_flow_copy_joinable_clone_handler(v25, v26);
          __int16 v28 = v27;
          unint64_t v179 = v27;
          if (!v27 || v27->mode != 2)
          {
            if ((v25[67] & 0x20) != 0)
            {
              BOOL v86 = 0;
              goto LABEL_203;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            log = (id)gconnectionLogObj;
            if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
            {
              if (v25[67]) {
                id v60 = "dry-run ";
              }
              else {
                id v60 = "";
              }
              nw_endpoint_t v61 = nw_endpoint_handler_copy_endpoint(v25);
              logging_description = nw_endpoint_get_logging_description(v61);
              uint64_t v63 = v25[30];
              if (v63 > 5) {
                uint64_t v64 = "unknown-state";
              }
              else {
                uint64_t v64 = off_1E523FB38[v63];
              }
              nw_protocol_stack_t stacka = (nw_protocol_stack_t)v64;
              __int16 v68 = v25;
              __int16 v69 = (os_unfair_lock_s *)v68;
              int v70 = v25[29];
              unint64_t v174 = logging_description;
              nw_endpoint_t v177 = v61;
              uint64_t v71 = "path";
              switch(v70)
              {
                case 0:
                  break;
                case 1:
                  uint64_t v71 = "resolver";
                  break;
                case 2:
                  uint64_t v71 = nw_endpoint_flow_mode_string(*((void **)v68 + 31));
                  break;
                case 3:
                  uint64_t v71 = "proxy";
                  break;
                case 4:
                  uint64_t v71 = "fallback";
                  break;
                case 5:
                  uint64_t v71 = "transform";
                  break;
                default:
                  uint64_t v71 = "unknown-mode";
                  break;
              }

              BOOL v87 = v69 + 28;
              id v88 = v69;
              os_unfair_lock_lock(v69 + 28);
              id v89 = v88[8];
              os_unfair_lock_unlock(v87);

              *(_DWORD *)long long buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v184 + 42;
              *(_WORD *)&unsigned char buf[22] = 2082;
              uint64_t v204 = v60;
              *(_WORD *)uint64_t v205 = 2082;
              *(void *)&v205[2] = v174;
              __int16 v206 = 2082;
              unint64_t v207 = stacka;
              __int16 v208 = 2082;
              uint64_t v209 = v71;
              __int16 v210 = 2114;
              id v211 = v89;
              _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Could not find joinable endpoint flow to clone from", buf, 0x48u);
            }
            BOOL v86 = 0;
LABEL_202:

LABEL_203:
            goto LABEL_204;
          }
          obuint64_t j = v27->mode_handler;
          log = obj;
          __int16 v29 = nw_endpoint_handler_copy_connected_flow_handler(v25);
          int v172 = v29;
          if (!v29)
          {
            if ((v25[67] & 0x20) != 0) {
              goto LABEL_178;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            unint64_t v175 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v175, OS_LOG_TYPE_DEBUG))
            {
              if (v25[67]) {
                uint64_t v72 = "dry-run ";
              }
              else {
                uint64_t v72 = "";
              }
              nw_endpoint_t v73 = nw_endpoint_handler_copy_endpoint(v25);
              uint32_t v74 = nw_endpoint_get_logging_description(v73);
              uint64_t v75 = v25[30];
              nw_protocol_options_t optionsa = (nw_protocol_options_t)v74;
              if (v75 > 5) {
                unint64_t v76 = "unknown-state";
              }
              else {
                unint64_t v76 = off_1E523FB38[v75];
              }
              unint64_t v161 = v76;
              long long v90 = v25;
              uint64_t v91 = (os_unfair_lock_s *)v90;
              int v92 = v25[29];
              nw_protocol_stack_t stackb = v73;
              int v167 = v72;
              uint32_t v93 = "path";
              switch(v92)
              {
                case 0:
                  break;
                case 1:
                  uint32_t v93 = "resolver";
                  break;
                case 2:
                  uint32_t v93 = nw_endpoint_flow_mode_string(*((void **)v90 + 31));
                  break;
                case 3:
                  uint32_t v93 = "proxy";
                  break;
                case 4:
                  uint32_t v93 = "fallback";
                  break;
                case 5:
                  uint32_t v93 = "transform";
                  break;
                default:
                  uint32_t v93 = "unknown-mode";
                  break;
              }

              uint64_t v108 = v91 + 28;
              uint64_t v109 = v91;
              os_unfair_lock_lock(v91 + 28);
              id v110 = v109[8];
              os_unfair_lock_unlock(v108);

              *(_DWORD *)long long buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v184 + 42;
              *(_WORD *)&unsigned char buf[22] = 2082;
              uint64_t v204 = v167;
              *(_WORD *)uint64_t v205 = 2082;
              *(void *)&v205[2] = optionsa;
              __int16 v206 = 2082;
              unint64_t v207 = (void *)v161;
              __int16 v208 = 2082;
              uint64_t v209 = v93;
              __int16 v210 = 2114;
              id v211 = v110;
              _os_log_impl(&dword_1830D4000, v175, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no connected handler, not checking for effective proxy config", buf, 0x48u);
            }
LABEL_177:

            id v26 = v183;
            __int16 v28 = v179;
LABEL_178:
            unint64_t v111 = -[NWConcrete_nw_endpoint_handler initWithEndpoint:parameters:reportCallback:context:parent:identifier:]((id *)[NWConcrete_nw_endpoint_handler alloc], v28->endpoint, v26, nw_connection_endpoint_report_on_nw_queue, v185, 0, v24);
            BOOL v86 = v111;
            if (v111)
            {
              *((_DWORD *)v111 + 29) = 2;
              id v112 = v111[9];
              char isa = (char)log[4].isa;
              uint64_t v114 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
              *((unsigned char *)v114 + 32) = isa & 2 | *((unsigned char *)v114 + 32) & 0xFC | (v112 == 0);
              id v115 = v86[31];
              v86[31] = v114;

              uint64_t v116 = (id *)v86[31];
              unint64_t v178 = log;
              if (v116)
              {
                uint64_t v117 = v116;
                objc_storeStrong(v116 + 5, obj);
LABEL_181:

                uint64_t v118 = v86;
LABEL_201:

                goto LABEL_202;
              }
              uint64_t v117 = 0;
              uint64_t v151 = __nwlog_obj();
              *(_DWORD *)int v212 = 136446210;
              uint64_t v213 = "nw_endpoint_flow_set_clone_flow";
              stackc = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v202 = OS_LOG_TYPE_ERROR;
              char v201 = 0;
              if (__nwlog_fault(stackc, &v202, &v201))
              {
                if (v202 == OS_LOG_TYPE_FAULT)
                {
                  uint64_t v152 = __nwlog_obj();
                  os_log_type_t v153 = v202;
                  if (os_log_type_enabled(v152, v202))
                  {
                    *(_DWORD *)int v212 = 136446210;
                    uint64_t v213 = "nw_endpoint_flow_set_clone_flow";
                    _os_log_impl(&dword_1830D4000, v152, v153, "%{public}s called with null endpoint_flow", v212, 0xCu);
                  }
                }
                else if (v201)
                {
                  unint64_t v154 = (char *)__nw_create_backtrace_string();
                  uint64_t v152 = __nwlog_obj();
                  os_log_type_t v155 = v202;
                  BOOL v156 = os_log_type_enabled(v152, v202);
                  if (v154)
                  {
                    if (v156)
                    {
                      *(_DWORD *)int v212 = 136446466;
                      uint64_t v213 = "nw_endpoint_flow_set_clone_flow";
                      __int16 v214 = 2082;
                      unint64_t v215 = v154;
                      _os_log_impl(&dword_1830D4000, v152, v155, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", v212, 0x16u);
                    }

                    free(v154);
                    goto LABEL_293;
                  }
                  if (v156)
                  {
                    *(_DWORD *)int v212 = 136446210;
                    uint64_t v213 = "nw_endpoint_flow_set_clone_flow";
                    _os_log_impl(&dword_1830D4000, v152, v155, "%{public}s called with null endpoint_flow, no backtrace", v212, 0xCu);
                  }
                }
                else
                {
                  uint64_t v152 = __nwlog_obj();
                  os_log_type_t v157 = v202;
                  if (os_log_type_enabled(v152, v202))
                  {
                    *(_DWORD *)int v212 = 136446210;
                    uint64_t v213 = "nw_endpoint_flow_set_clone_flow";
                    _os_log_impl(&dword_1830D4000, v152, v157, "%{public}s called with null endpoint_flow, backtrace limit exceeded", v212, 0xCu);
                  }
                }
              }
LABEL_293:
              if (stackc) {
                free(stackc);
              }
              goto LABEL_181;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v119 = (id)gLogObj;
            *(_DWORD *)int v212 = 136446210;
            uint64_t v213 = "nw_endpoint_handler_create_with_existing";
            uint64_t v120 = (const char *)_os_log_send_and_compose_impl();

            os_log_type_t v202 = OS_LOG_TYPE_ERROR;
            char v201 = 0;
            uint64_t v121 = (char *)v120;
            if ((__nwlog_fault(v120, &v202, &v201) & 1) == 0)
            {
LABEL_199:
              if (v121) {
                free(v121);
              }
              goto LABEL_201;
            }
            if (v202 == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v122 = (id)gLogObj;
              os_log_type_t v123 = v202;
              if (os_log_type_enabled(v122, v202))
              {
                *(_DWORD *)int v212 = 136446210;
                uint64_t v213 = "nw_endpoint_handler_create_with_existing";
                _os_log_impl(&dword_1830D4000, v122, v123, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed", v212, 0xCu);
              }
            }
            else if (v201)
            {
              uint64_t v124 = (char *)__nw_create_backtrace_string();
              uint64_t v122 = __nwlog_obj();
              os_log_type_t v125 = v202;
              BOOL v126 = os_log_type_enabled(v122, v202);
              if (v124)
              {
                if (v126)
                {
                  *(_DWORD *)int v212 = 136446466;
                  uint64_t v213 = "nw_endpoint_handler_create_with_existing";
                  __int16 v214 = 2082;
                  unint64_t v215 = v124;
                  _os_log_impl(&dword_1830D4000, v122, v125, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s", v212, 0x16u);
                }

                free(v124);
                goto LABEL_198;
              }
              if (v126)
              {
                *(_DWORD *)int v212 = 136446210;
                uint64_t v213 = "nw_endpoint_handler_create_with_existing";
                _os_log_impl(&dword_1830D4000, v122, v125, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, no backtrace", v212, 0xCu);
              }
            }
            else
            {
              uint64_t v122 = __nwlog_obj();
              os_log_type_t v127 = v202;
              if (os_log_type_enabled(v122, v202))
              {
                *(_DWORD *)int v212 = 136446210;
                uint64_t v213 = "nw_endpoint_handler_create_with_existing";
                _os_log_impl(&dword_1830D4000, v122, v127, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, backtrace limit exceeded", v212, 0xCu);
              }
            }

LABEL_198:
            uint64_t v121 = (char *)v120;
            goto LABEL_199;
          }
          unint64_t v175 = v29->parameters;
          id v166 = nw_parameters_copy_effective_proxy_config(v175);
          if (!v166)
          {
            if ((v25[67] & 0x20) != 0)
            {
LABEL_159:

              goto LABEL_177;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            __uint64_t v77 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
            {
LABEL_158:

              goto LABEL_159;
            }
            id_string = nw_endpoint_handler_get_id_string(v25);
            uint64_t v160 = nw_endpoint_handler_dry_run_string(v25);
            stack = v77;
            unint64_t v158 = id_string;
            nw_endpoint_t optionsb = nw_endpoint_handler_copy_endpoint(v25);
            unint64_t v79 = nw_endpoint_get_logging_description(optionsb);
            unint64_t v80 = nw_endpoint_handler_state_string(v25);
            BOOL v81 = nw_endpoint_handler_mode_string(v25);
            id v82 = nw_endpoint_handler_copy_current_path(v25);
            *(_DWORD *)long long buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v158;
            *(_WORD *)&unsigned char buf[22] = 2082;
            uint64_t v204 = v160;
            *(_WORD *)uint64_t v205 = 2082;
            *(void *)&v205[2] = v79;
            __int16 v206 = 2082;
            unint64_t v207 = (void *)v80;
            __int16 v208 = 2082;
            uint64_t v209 = v81;
            __int16 v210 = 2114;
            id v211 = v82;
            _os_log_impl(&dword_1830D4000, stack, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no effective proxy config", buf, 0x48u);

LABEL_157:
            __uint64_t v77 = stack;
            goto LABEL_158;
          }
          __int16 v30 = (id *)v26;
          stack = v30[19];

          options = nw_protocol_stack_copy_transport_protocol(stack);
          nw_protocol_options_t v159 = nw_protocol_stack_copy_internet_protocol(stack);
          __int16 v31 = v166;
          LODWORD(v30) = v31[38];

          if (v30 != 1)
          {
LABEL_156:
            nw_parameters_log_protocol_instances(v175);

            goto LABEL_157;
          }
          *(_DWORD *)int v212 = 4;
          nw_proxy_config_remove_protocols_from_stack(v31, stack);
          nw_protocol_definition_t v32 = nw_protocol_options_copy_definition(options);
          __int16 v33 = nw_proxy_config_copy_protocol_stack(v31, v32, v212);

          if (!v33)
          {
LABEL_155:

            goto LABEL_156;
          }
          if (*(_DWORD *)v212 == 2)
          {
            __int16 v35 = stack;
            nw_protocol_stack_append_application_protocol(stack, options);
            nw_protocol_options_t v34 = v159;
          }
          else
          {
            nw_protocol_options_t v34 = options;
            __int16 v35 = stack;
            if (*(_DWORD *)v212 != 3) {
              goto LABEL_152;
            }
          }
          nw_protocol_stack_append_application_protocol(v35, v34);
LABEL_152:
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = __nw_endpoint_handler_create_with_existing_block_invoke;
          uint64_t v204 = (const char *)&unk_1E5248AE8;
          uint32_t v100 = v35;
          *(void *)uint64_t v205 = v100;
          nw_protocol_stack_iterate_application_protocols(v33, buf);
          uint32_t v101 = nw_protocol_stack_copy_transport_protocol(v33);
          if (v101)
          {
            nw_protocol_stack_set_original_proxied_transport_protocol(v100, options);
            nw_protocol_stack_set_transport_protocol(v100, v101);
          }

          goto LABEL_155;
        }
        if ((v25[67] & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v54 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            if (v25[67]) {
              BOOL v55 = "dry-run ";
            }
            else {
              BOOL v55 = "";
            }
            nw_endpoint_t v56 = nw_endpoint_handler_copy_endpoint(v184);
            os_log_type_t v57 = nw_endpoint_get_logging_description(v56);
            uint64_t v58 = v184[30];
            int v176 = v57;
            if (v58 > 5) {
              os_log_type_t v59 = "unknown-state";
            }
            else {
              os_log_type_t v59 = off_1E523FB38[v58];
            }
            uint64_t v173 = v59;
            int v180 = v55;
            char v65 = v184;
            uint32_t v66 = (os_unfair_lock_s *)v65;
            nw_endpoint_t loga = v56;
            unsigned int v67 = "path";
            switch(v184[29])
            {
              case 0:
                break;
              case 1:
                unsigned int v67 = "resolver";
                break;
              case 2:
                unsigned int v67 = nw_endpoint_flow_mode_string(*((void **)v65 + 31));
                break;
              case 3:
                unsigned int v67 = "proxy";
                break;
              case 4:
                unsigned int v67 = "fallback";
                break;
              case 5:
                unsigned int v67 = "transform";
                break;
              default:
                unsigned int v67 = "unknown-mode";
                break;
            }

            os_log_type_t v83 = v66 + 28;
            uint64_t v84 = v66;
            os_unfair_lock_lock(v66 + 28);
            id v85 = v84[8];
            os_unfair_lock_unlock(v83);

            *(_DWORD *)long long buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v184 + 42;
            *(_WORD *)&unsigned char buf[22] = 2082;
            uint64_t v204 = v180;
            *(_WORD *)uint64_t v205 = 2082;
            *(void *)&v205[2] = v176;
            __int16 v206 = 2082;
            unint64_t v207 = (void *)v173;
            __int16 v208 = 2082;
            uint64_t v209 = v67;
            __int16 v210 = 2114;
            id v211 = v85;
            _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Existing endpoint handler not eligible for peel-off", buf, 0x48u);
          }
        }
LABEL_128:
        BOOL v86 = 0;
LABEL_204:

        unint64_t v128 = (void *)v185[18];
        v185[18] = v86;

        uint64_t v129 = *(void *)(v10 + 16);
        if (v185[18])
        {
          if (v129 && !nw_path_parameters_get_logging_disabled(*(void *)(v129 + 104)))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v130 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v130, OS_LOG_TYPE_INFO))
            {
              int v131 = *(_DWORD *)(v10 + 448);
              int v132 = v18[112];
              *(_DWORD *)long long buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v131;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v132;
              _os_log_impl(&dword_1830D4000, v130, OS_LOG_TYPE_INFO, "%{public}s [C%u] create connection from [C%u]", buf, 0x18u);
            }
          }
          id v38 = v185;
          goto LABEL_221;
        }
        if (!v129 || nw_path_parameters_get_logging_disabled(*(void *)(v129 + 104)))
        {
LABEL_220:
          id v38 = 0;
LABEL_221:

          goto LABEL_222;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v47 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          int v133 = *(_DWORD *)(v10 + 448);
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v133;
          _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_ERROR, "%{public}s [C%u] nw_endpoint_handler_create_with_existing failed", buf, 0x12u);
        }
LABEL_219:

        goto LABEL_220;
      }
      unint64_t v141 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
      int v138 = (char *)_os_log_send_and_compose_impl();

      v212[0] = 16;
      os_log_type_t v202 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v138, v212, &v202)) {
        goto LABEL_275;
      }
      if (v212[0] == 17)
      {
        uint64_t v139 = __nwlog_obj();
        os_log_type_t v142 = v212[0];
        if (os_log_type_enabled(v139, (os_log_type_t)v212[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_1830D4000, v139, v142, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v202)
      {
        int v146 = (char *)__nw_create_backtrace_string();
        uint64_t v139 = __nwlog_obj();
        os_log_type_t v147 = v212[0];
        BOOL v148 = os_log_type_enabled(v139, (os_log_type_t)v212[0]);
        if (v146)
        {
          if (v148)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v146;
            _os_log_impl(&dword_1830D4000, v139, v147, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v146);
          if (!v138) {
            goto LABEL_128;
          }
          goto LABEL_276;
        }
        if (v148)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_1830D4000, v139, v147, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v139 = __nwlog_obj();
        os_log_type_t v150 = v212[0];
        if (os_log_type_enabled(v139, (os_log_type_t)v212[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_1830D4000, v139, v150, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      unint64_t v137 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
      int v138 = (char *)_os_log_send_and_compose_impl();

      v212[0] = 16;
      os_log_type_t v202 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v138, v212, &v202)) {
        goto LABEL_275;
      }
      if (v212[0] == 17)
      {
        uint64_t v139 = __nwlog_obj();
        os_log_type_t v140 = v212[0];
        if (os_log_type_enabled(v139, (os_log_type_t)v212[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_1830D4000, v139, v140, "%{public}s called with null original_endpoint_handler", buf, 0xCu);
        }
      }
      else if (v202)
      {
        uint64_t v143 = (char *)__nw_create_backtrace_string();
        uint64_t v139 = __nwlog_obj();
        os_log_type_t v144 = v212[0];
        BOOL v145 = os_log_type_enabled(v139, (os_log_type_t)v212[0]);
        if (v143)
        {
          if (v145)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v143;
            _os_log_impl(&dword_1830D4000, v139, v144, "%{public}s called with null original_endpoint_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v143);
LABEL_275:
          if (!v138) {
            goto LABEL_128;
          }
LABEL_276:
          free(v138);
          goto LABEL_128;
        }
        if (v145)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_1830D4000, v139, v144, "%{public}s called with null original_endpoint_handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v139 = __nwlog_obj();
        os_log_type_t v149 = v212[0];
        if (os_log_type_enabled(v139, (os_log_type_t)v212[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_1830D4000, v139, v149, "%{public}s called with null original_endpoint_handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_275;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v39 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
  int v40 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v197) = 0;
  if (__nwlog_fault(v40, type, &v197))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v41 = (id)gLogObj;
      os_log_type_t v42 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s [nw_connection initWithEndpoint:parameters:] failed", buf, 0xCu);
      }
    }
    else if ((_BYTE)v197)
    {
      os_log_type_t v43 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v41 = (id)gLogObj;
      os_log_type_t v44 = type[0];
      BOOL v45 = os_log_type_enabled(v41, type[0]);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v43;
          _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        if (!v40) {
          goto LABEL_82;
        }
        goto LABEL_81;
      }
      if (v45)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v41 = (id)gLogObj;
      os_log_type_t v49 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        _os_log_impl(&dword_1830D4000, v41, v49, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v40) {
LABEL_81:
  }
    free(v40);
LABEL_82:
  id v38 = 0;
LABEL_224:

LABEL_225:
  return v38;
}

void sub_1837F9E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43,char a44)
{
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a44, 8);

  _Unwind_Resume(a1);
}

void __nw_connection_create_with_connection_block_invoke(void *a1)
{
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = (*(unsigned char *)(a1[4] + 109) & 0x40) != 0;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a1[4] + 144));
}

void *nw_connection_create_with_client_id(const unsigned __int8 *a1, void *a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (!v3)
  {
    BOOL v45 = 0;
    uint64_t v47 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v71 = "nw_connection_create_with_client_id";
    int v48 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (!__nwlog_fault(v48, &type, &v68)) {
      goto LABEL_103;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v49 = __nwlog_obj();
      os_log_type_t v50 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v68)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v49 = __nwlog_obj();
      os_log_type_t v54 = type;
      BOOL v55 = os_log_type_enabled(v49, type);
      if (backtrace_string)
      {
        if (v55)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v71 = "nw_connection_create_with_client_id";
          __int16 v72 = 2082;
          *(void *)nw_endpoint_t v73 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v49, v54, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v48) {
          goto LABEL_105;
        }
        goto LABEL_104;
      }
      if (v55)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_1830D4000, v49, v54, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v49 = __nwlog_obj();
      os_log_type_t v59 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_1830D4000, v49, v59, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_102;
  }
  id v67 = v3;
  if (uuid_is_null(a1))
  {
    BOOL v45 = v3;
    int v51 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v71 = "nw_connection_create_with_client_id";
    int v48 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (!__nwlog_fault(v48, &type, &v68)) {
      goto LABEL_103;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v49 = __nwlog_obj();
      os_log_type_t v52 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_1830D4000, v49, v52, "%{public}s called with null !uuid_is_null(client_id)", buf, 0xCu);
      }
    }
    else if (v68)
    {
      nw_endpoint_t v56 = (char *)__nw_create_backtrace_string();
      os_log_type_t v49 = __nwlog_obj();
      os_log_type_t v57 = type;
      BOOL v58 = os_log_type_enabled(v49, type);
      if (v56)
      {
        if (v58)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v71 = "nw_connection_create_with_client_id";
          __int16 v72 = 2082;
          *(void *)nw_endpoint_t v73 = v56;
          _os_log_impl(&dword_1830D4000, v49, v57, "%{public}s called with null !uuid_is_null(client_id), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v56);
LABEL_103:
        if (!v48)
        {
LABEL_105:
          os_log_type_t v22 = 0;
          goto LABEL_69;
        }
LABEL_104:
        free(v48);
        goto LABEL_105;
      }
      if (v58)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_1830D4000, v49, v57, "%{public}s called with null !uuid_is_null(client_id), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v49 = __nwlog_obj();
      os_log_type_t v60 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_1830D4000, v49, v60, "%{public}s called with null !uuid_is_null(client_id), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_102:

    goto LABEL_103;
  }
  evaluator_for_client_id = nw_path_create_evaluator_for_client_id(a1, v3);
  int v5 = (os_unfair_lock_s *)evaluator_for_client_id;
  if (!evaluator_for_client_id)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136446722;
      uint64_t v71 = "nw_connection_create_with_client_id";
      __int16 v72 = 1040;
      *(_DWORD *)nw_endpoint_t v73 = 16;
      *(_WORD *)&v73[4] = 2096;
      *(void *)&v73[6] = a1;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s Cannot create path evaluator for client ID %{uuid_t}.16P", buf, 0x1Cu);
    }
    os_log_type_t v22 = 0;
    goto LABEL_68;
  }
  os_log_type_t v6 = evaluator_for_client_id;
  os_unfair_lock_lock(v5 + 24);
  BOOL v7 = v6[6];
  os_unfair_lock_unlock(v5 + 24);

  id v65 = nw_path_copy_endpoint(v7);
  id v66 = nw_path_copy_parameters(v7);
  BOOL v8 = -[NWConcrete_nw_connection initWithEndpoint:parameters:identifier:]((void **)[NWConcrete_nw_connection alloc], v65, v66, 0);
  if (v8)
  {
    unsigned int v9 = *(_DWORD *)(v8 + 448);
    uint64_t v10 = (_DWORD *)v8;
    uint64_t v11 = v6;
    uint64_t v64 = v10;
    uint64_t v12 = v10;
    char v13 = v11;
    os_unfair_lock_lock(v5 + 24);
    id v14 = v6[6];
    os_unfair_lock_unlock(v5 + 24);
    uint64_t v63 = v13;

    id v15 = nw_path_copy_endpoint(v14);
    id v16 = nw_path_copy_parameters(v14);
    int v17 = -[NWConcrete_nw_endpoint_handler initWithEndpoint:parameters:reportCallback:context:parent:identifier:]((id *)[NWConcrete_nw_endpoint_handler alloc], v15, v16, nw_connection_endpoint_report_on_nw_queue, v12, 0, v9);
    int v18 = v17;
    if (v17)
    {
      *((_DWORD *)v17 + 29) = 2;
      uint64_t v19 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
      *((unsigned char *)v19 + 32) = *((unsigned char *)v19 + 32) & 0xFC | 1;
      id v20 = v18[31];
      v18[31] = v19;

      objc_storeStrong(v18 + 32, v5);
      BOOL v21 = v18;
LABEL_49:

      id v39 = (void *)v12[18];
      v12[18] = v18;

      uint64_t v40 = v12[2];
      if (v12[18])
      {
        if (v40 && !nw_path_parameters_get_logging_disabled(*(void *)(v40 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v41 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            int v42 = v64[112];
            *(_DWORD *)long long buf = 136446978;
            uint64_t v71 = "nw_connection_create_with_client_id";
            __int16 v72 = 1024;
            *(_DWORD *)nw_endpoint_t v73 = v42;
            *(_WORD *)&v73[4] = 1042;
            *(_DWORD *)&v73[6] = 16;
            *(_WORD *)&v73[10] = 2098;
            *(void *)&v73[12] = a1;
            _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_INFO, "%{public}s [C%u] create connection from ID %{public,uuid_t}.16P", buf, 0x22u);
          }
        }
        os_log_type_t v22 = v12;
      }
      else
      {
        if (v40 && !nw_path_parameters_get_logging_disabled(*(void *)(v40 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v43 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            int v44 = v64[112];
            *(_DWORD *)long long buf = 136446466;
            uint64_t v71 = "nw_connection_create_with_client_id";
            __int16 v72 = 1024;
            *(_DWORD *)nw_endpoint_t v73 = v44;
            _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s [C%u] nw_endpoint_handler_create_with_path_evaluator failed", buf, 0x12u);
          }
        }
        os_log_type_t v22 = 0;
      }
      uint64_t v23 = v64;
      goto LABEL_67;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v28 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    uint64_t v71 = "nw_endpoint_handler_create_with_path_evaluator";
    id v62 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    __int16 v29 = (char *)v62;
    if ((__nwlog_fault(v62, &type, &v68) & 1) == 0)
    {
LABEL_47:
      if (v29) {
        free(v29);
      }
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v30 = (id)gLogObj;
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v71 = "nw_endpoint_handler_create_with_path_evaluator";
        _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed", buf, 0xCu);
      }
    }
    else if (v68)
    {
      __int16 v35 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v30 = (id)gLogObj;
      os_log_type_t v61 = type;
      BOOL v36 = os_log_type_enabled(v30, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v71 = "nw_endpoint_handler_create_with_path_evaluator";
          __int16 v72 = 2082;
          *(void *)nw_endpoint_t v73 = v35;
          _os_log_impl(&dword_1830D4000, v30, v61, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v35);
        goto LABEL_46;
      }
      if (v36)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v71 = "nw_endpoint_handler_create_with_path_evaluator";
        _os_log_impl(&dword_1830D4000, v30, v61, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v30 = (id)gLogObj;
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v71 = "nw_endpoint_handler_create_with_path_evaluator";
        _os_log_impl(&dword_1830D4000, v30, v38, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_46:
    __int16 v29 = (char *)v62;
    goto LABEL_47;
  }
  uint64_t v23 = 0;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v24 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  uint64_t v71 = "nw_connection_create_with_client_id";
  char v25 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v68 = 0;
  if (__nwlog_fault(v25, &type, &v68))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v26 = (id)gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s [nw_connection initWithEndpoint:parameters:] failed", buf, 0xCu);
      }
    }
    else if (v68)
    {
      nw_protocol_definition_t v32 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v26 = (id)gLogObj;
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v26, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v71 = "nw_connection_create_with_client_id";
          __int16 v72 = 2082;
          *(void *)nw_endpoint_t v73 = v32;
          _os_log_impl(&dword_1830D4000, v26, v33, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v32);
        if (!v25) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      if (v34)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_1830D4000, v26, v33, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v26 = (id)gLogObj;
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl(&dword_1830D4000, v26, v37, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v25) {
LABEL_38:
  }
    free(v25);
LABEL_39:
  os_log_type_t v22 = 0;
LABEL_67:

LABEL_68:
  BOOL v45 = v67;
LABEL_69:

  return v22;
}

void sub_1837FAE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void nw_connection_add_initial_inbound_data(void *a1, void *a2, int a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  BOOL v7 = v6;
  if (!v5)
  {
    BOOL v8 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v29 = "nw_connection_add_initial_inbound_data";
    unsigned int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v27 = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v9, &v27, &v26)) {
      goto LABEL_38;
    }
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = v27;
      if (os_log_type_enabled(v10, v27))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v29 = "nw_connection_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = v27;
      BOOL v16 = os_log_type_enabled(v10, v27);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v29 = "nw_connection_add_initial_inbound_data";
          __int16 v30 = 2082;
          os_log_type_t v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9) {
          goto LABEL_4;
        }
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v29 = "nw_connection_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v20 = v27;
      if (os_log_type_enabled(v10, v27))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v29 = "nw_connection_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v6)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_connection_add_initial_inbound_data_block_invoke;
    v22[3] = &unk_1E524BA38;
    id v23 = v5;
    id v24 = v7;
    int v25 = a3;
    nw_connection_async_if_needed(v23, v22);

    goto LABEL_4;
  }
  uint64_t v12 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v29 = "nw_connection_add_initial_inbound_data";
  unsigned int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v27 = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v9, &v27, &v26)) {
    goto LABEL_38;
  }
  if (v27 == OS_LOG_TYPE_FAULT)
  {
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v13 = v27;
    if (os_log_type_enabled(v10, v27))
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v29 = "nw_connection_add_initial_inbound_data";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null initial_inbound_data", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v26)
  {
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v21 = v27;
    if (os_log_type_enabled(v10, v27))
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v29 = "nw_connection_add_initial_inbound_data";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null initial_inbound_data, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  int v17 = (char *)__nw_create_backtrace_string();
  uint64_t v10 = __nwlog_obj();
  os_log_type_t v18 = v27;
  BOOL v19 = os_log_type_enabled(v10, v27);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v29 = "nw_connection_add_initial_inbound_data";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null initial_inbound_data, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)long long buf = 136446466;
    __int16 v29 = "nw_connection_add_initial_inbound_data";
    __int16 v30 = 2082;
    os_log_type_t v31 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null initial_inbound_data, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_1837FB3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_connection_add_initial_inbound_data_block_invoke(uint64_t a1)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  id v1 = *(void **)(a1 + 40);
  int v2 = *(_DWORD *)(a1 + 48);
  id v3 = *(id *)(*(void *)(a1 + 32) + 144);
  id v4 = v1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v42 = (id)gLogObj;
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v75) = 0;
    if (!__nwlog_fault(v18, type, &v75)) {
      goto LABEL_73;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v19 = (id)gLogObj;
      os_log_type_t v43 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v19, v43, "%{public}s called with null handler", applier, 0xCu);
      }
    }
    else if ((_BYTE)v75)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v19 = (id)gLogObj;
      os_log_type_t v48 = type[0];
      BOOL v49 = os_log_type_enabled(v19, type[0]);
      if (backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)applier = 136446466;
          *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v19, v48, "%{public}s called with null handler, dumping backtrace:%{public}s", applier, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_73;
      }
      if (v49)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v19, v48, "%{public}s called with null handler, no backtrace", applier, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v19 = (id)gLogObj;
      os_log_type_t v69 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v19, v69, "%{public}s called with null handler, backtrace limit exceeded", applier, 0xCu);
      }
    }
LABEL_72:

    goto LABEL_73;
  }
  id v5 = (NWConcrete_nw_endpoint_handler *)v3;
  uint64_t mode = v5->mode;

  if (mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    if (mode > 5) {
      int v17 = "unknown-mode";
    }
    else {
      int v17 = off_1E523FB08[mode];
    }
    *(_DWORD *)applier = 136446722;
    *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    *(_WORD *)&applier[12] = 2082;
    *(void *)&applier[14] = v17;
    *(_WORD *)&applier[22] = 2082;
    *(void *)uint64_t v84 = "flow";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v75) = 0;
    if (__nwlog_fault(v18, type, &v75))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v19 = (id)gLogObj;
        os_log_type_t v20 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          if (mode > 5) {
            os_log_type_t v21 = "unknown-mode";
          }
          else {
            os_log_type_t v21 = off_1E523FB08[mode];
          }
          *(_DWORD *)applier = 136446722;
          *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v21;
          *(_WORD *)&applier[22] = 2082;
          *(void *)uint64_t v84 = "flow";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s Handler is in mode %{public}s, expected %{public}s", applier, 0x20u);
        }
      }
      else if ((_BYTE)v75)
      {
        os_log_type_t v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v19 = (id)gLogObj;
        os_log_type_t v23 = type[0];
        BOOL v24 = os_log_type_enabled(v19, type[0]);
        if (v22)
        {
          if (v24)
          {
            if (mode > 5) {
              int v25 = "unknown-mode";
            }
            else {
              int v25 = off_1E523FB08[mode];
            }
            *(_DWORD *)applier = 136446978;
            *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = v25;
            *(_WORD *)&applier[22] = 2082;
            *(void *)uint64_t v84 = "flow";
            *(_WORD *)&v84[8] = 2082;
            *(void *)&v84[10] = v22;
            _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", applier, 0x2Au);
          }

          free(v22);
          if (!v18) {
            goto LABEL_75;
          }
          goto LABEL_74;
        }
        if (v24)
        {
          if (mode > 5) {
            os_log_type_t v38 = "unknown-mode";
          }
          else {
            os_log_type_t v38 = off_1E523FB08[mode];
          }
          *(_DWORD *)applier = 136446722;
          *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v38;
          *(_WORD *)&applier[22] = 2082;
          *(void *)uint64_t v84 = "flow";
          _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", applier, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v19 = (id)gLogObj;
        os_log_type_t v28 = type[0];
        if (os_log_type_enabled(v19, type[0]))
        {
          if (mode > 5) {
            __int16 v29 = "unknown-mode";
          }
          else {
            __int16 v29 = off_1E523FB08[mode];
          }
          *(_DWORD *)applier = 136446722;
          *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v29;
          *(_WORD *)&applier[22] = 2082;
          *(void *)uint64_t v84 = "flow";
          _os_log_impl(&dword_1830D4000, v19, v28, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", applier, 0x20u);
        }
      }
      goto LABEL_72;
    }
LABEL_73:
    if (!v18) {
      goto LABEL_75;
    }
LABEL_74:
    free(v18);
    goto LABEL_75;
  }
  BOOL v7 = nw_endpoint_handler_copy_flow(v5);
  BOOL v8 = v7;
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v44 = (id)gLogObj;
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v75) = 0;
    if ((__nwlog_fault(v13, type, &v75) & 1) == 0) {
      goto LABEL_58;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v45 = (id)gLogObj;
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s called with null endpoint_flow", applier, 0xCu);
      }
    }
    else if ((_BYTE)v75)
    {
      BOOL v58 = __nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v45 = (id)gLogObj;
      os_log_type_t v59 = type[0];
      BOOL v60 = os_log_type_enabled(v45, type[0]);
      if (v58)
      {
        if (v60)
        {
          *(_DWORD *)applier = 136446466;
          *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v58;
          _os_log_impl(&dword_1830D4000, v45, v59, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", applier, 0x16u);
        }

        uint64_t v41 = (char *)v58;
LABEL_57:
        free(v41);
        goto LABEL_58;
      }
      if (v60)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v45, v59, "%{public}s called with null endpoint_flow, no backtrace", applier, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v45 = (id)gLogObj;
      os_log_type_t v70 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v45, v70, "%{public}s called with null endpoint_flow, backtrace limit exceeded", applier, 0xCu);
      }
    }
    goto LABEL_155;
  }
  uint64_t v9 = *((void *)v7 + 114);
  if (!v9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v50 = (id)gLogObj;
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v75) = 0;
    if (!__nwlog_fault(v13, type, &v75)) {
      goto LABEL_58;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v45 = (id)gLogObj;
      os_log_type_t v51 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v45, v51, "%{public}s called with null endpoint_flow->socket_protocol", applier, 0xCu);
      }
      goto LABEL_155;
    }
    if (!(_BYTE)v75)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v45 = (id)gLogObj;
      os_log_type_t v71 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v45, v71, "%{public}s called with null endpoint_flow->socket_protocol, backtrace limit exceeded", applier, 0xCu);
      }
      goto LABEL_155;
    }
    os_log_type_t v61 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v45 = (id)gLogObj;
    os_log_type_t v62 = type[0];
    BOOL v63 = os_log_type_enabled(v45, type[0]);
    if (!v61)
    {
      if (v63)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v45, v62, "%{public}s called with null endpoint_flow->socket_protocol, no backtrace", applier, 0xCu);
      }
      goto LABEL_155;
    }
    if (v63)
    {
      *(_DWORD *)applier = 136446466;
      *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = v61;
      _os_log_impl(&dword_1830D4000, v45, v62, "%{public}s called with null endpoint_flow->socket_protocol, dumping backtrace:%{public}s", applier, 0x16u);
    }
    goto LABEL_116;
  }
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v52 = (id)gLogObj;
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v75) = 0;
    if (!__nwlog_fault(v13, type, &v75)) {
      goto LABEL_58;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v45 = (id)gLogObj;
      os_log_type_t v53 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v45, v53, "%{public}s called with null initial_inbound_data", applier, 0xCu);
      }
LABEL_155:

      goto LABEL_58;
    }
    if (!(_BYTE)v75)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v45 = (id)gLogObj;
      os_log_type_t v72 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v45, v72, "%{public}s called with null initial_inbound_data, backtrace limit exceeded", applier, 0xCu);
      }
      goto LABEL_155;
    }
    os_log_type_t v61 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v45 = (id)gLogObj;
    os_log_type_t v64 = type[0];
    BOOL v65 = os_log_type_enabled(v45, type[0]);
    if (!v61)
    {
      if (v65)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
        _os_log_impl(&dword_1830D4000, v45, v64, "%{public}s called with null initial_inbound_data, no backtrace", applier, 0xCu);
      }
      goto LABEL_155;
    }
    if (v65)
    {
      *(_DWORD *)applier = 136446466;
      *(void *)&applier[4] = "nw_endpoint_handler_add_initial_inbound_data";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = v61;
      _os_log_impl(&dword_1830D4000, v45, v64, "%{public}s called with null initial_inbound_data, dumping backtrace:%{public}s", applier, 0x16u);
    }
LABEL_116:

    goto LABEL_126;
  }
  if (*(_UNKNOWN **)(v9 + 40) != &nw_protocol_ref_counted_handle)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v75) = 0;
    if (!__nwlog_fault(v13, type, &v75)) {
      goto LABEL_58;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v54 = gLogObj;
      os_log_type_t v55 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_58;
      }
      *(_DWORD *)applier = 136446210;
      *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
      nw_endpoint_t v56 = "%{public}s called with null socket_handler";
LABEL_145:
      nw_endpoint_t v73 = v54;
      os_log_type_t v74 = v55;
LABEL_146:
      _os_log_impl(&dword_1830D4000, v73, v74, v56, applier, 0xCu);
      goto LABEL_58;
    }
    if (!(_BYTE)v75)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v54 = gLogObj;
      os_log_type_t v55 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_58;
      }
      *(_DWORD *)applier = 136446210;
      *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
      nw_endpoint_t v56 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_145;
    }
    os_log_type_t v61 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v66 = gLogObj;
    os_log_type_t v67 = type[0];
    BOOL v68 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (v61)
    {
      if (v68)
      {
        *(_DWORD *)applier = 136446466;
        *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
        *(_WORD *)&applier[12] = 2082;
        *(void *)&applier[14] = v61;
        _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", applier, 0x16u);
      }
LABEL_126:
      free(v61);
      if (!v13) {
        goto LABEL_60;
      }
      goto LABEL_59;
    }
    if (v68)
    {
      *(_DWORD *)applier = 136446210;
      *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
      nw_endpoint_t v56 = "%{public}s called with null socket_handler, no backtrace";
      nw_endpoint_t v73 = v66;
      os_log_type_t v74 = v67;
      goto LABEL_146;
    }
LABEL_58:
    if (!v13)
    {
LABEL_60:

LABEL_75:
      return;
    }
LABEL_59:
    free(v13);
    goto LABEL_60;
  }
  unsigned int size = dispatch_data_get_size(v4);
  unsigned int v11 = size;
  if (!size)
  {
    uint64_t v15 = nw_frame_create(0, 0, 0, (uint64_t)nw_socket_frame_input_finalizer, v9 + 96);
    if (v15) {
      goto LABEL_26;
    }
    os_log_type_t v13 = 0;
    goto LABEL_36;
  }
  uint64_t v12 = (char *)malloc_type_malloc(size, 0xF2B69DE5uLL);
  os_log_type_t v13 = v12;
  if (v12)
  {
    *(void *)os_log_type_t type = 0;
    unint64_t v80 = type;
    uint64_t v81 = 0x2000000000;
    uint64_t v75 = 0;
    unint64_t v76 = &v75;
    uint64_t v77 = 0x2000000000;
    char v78 = v12;
    uint64_t v82 = 0;
    *(void *)applier = MEMORY[0x1E4F143A8];
    *(void *)&applier[8] = 0x40000000;
    *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(void *)uint64_t v84 = &unk_1E5242B60;
    *(void *)&v84[16] = &v75;
    uint64_t v85 = v11;
    *(void *)&v84[8] = type;
    dispatch_data_apply(v4, applier);
    _Block_object_dispose(&v75, 8);
    _Block_object_dispose(type, 8);
    uint64_t v14 = (uint64_t)v13;
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446466;
  *(void *)&applier[4] = "strict_malloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = v11;
  os_log_type_t v57 = (void *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v57))
  {
    free(v57);
    *(void *)os_log_type_t type = 0;
    unint64_t v80 = type;
    uint64_t v81 = 0x2000000000;
    uint64_t v75 = 0;
    unint64_t v76 = &v75;
    uint64_t v77 = 0x2000000000;
    char v78 = 0;
    uint64_t v82 = 0;
    *(void *)applier = MEMORY[0x1E4F143A8];
    *(void *)&applier[8] = 0x40000000;
    *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(void *)uint64_t v84 = &unk_1E5242B60;
    *(void *)&v84[16] = &v75;
    uint64_t v85 = v11;
    *(void *)&v84[8] = type;
    dispatch_data_apply(v4, applier);
    _Block_object_dispose(&v75, 8);
    _Block_object_dispose(type, 8);
    uint64_t v14 = 0;
LABEL_10:
    uint64_t v15 = nw_frame_create(0, v14, v11, (uint64_t)nw_socket_frame_input_finalizer, v9 + 96);
    if (v15)
    {
      *(_WORD *)(v15 + 204) |= 1u;
LABEL_26:
      *(unsigned char *)(v15 + 186) = *(unsigned char *)(v15 + 186) & 0xFC | v2 & 3;
      *(void *)(v15 + 16) = 0;
      char v26 = *(uint64_t **)(v9 + 384);
      *(void *)(v15 + 24) = v26;
      *char v26 = v15;
      *(void *)(v9 + 384) = v15 + 16;
      if ((*(_WORD *)(v9 + 397) & 0x80) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v27 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)applier = 136446978;
          *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v9 + 404;
          *(_WORD *)&applier[22] = 1024;
          *(_DWORD *)uint64_t v84 = v11;
          *(_WORD *)&v84[4] = 1024;
          *(_DWORD *)&v84[6] = v2;
          _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Adding initial packet of length %u, ECN %u", applier, 0x22u);
        }
      }
      goto LABEL_60;
    }
LABEL_36:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
    __int16 v30 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v75) = 0;
    if (__nwlog_fault(v30, type, &v75))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v31 = gLogObj;
        os_log_type_t v32 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
          os_log_type_t v33 = "%{public}s nw_frame_create failed";
LABEL_53:
          id v39 = v31;
          os_log_type_t v40 = v32;
LABEL_54:
          _os_log_impl(&dword_1830D4000, v39, v40, v33, applier, 0xCu);
        }
      }
      else if ((_BYTE)v75)
      {
        BOOL v34 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v35 = gLogObj;
        os_log_type_t v36 = type[0];
        BOOL v37 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v34)
        {
          if (v37)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = v34;
            _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s nw_frame_create failed, dumping backtrace:%{public}s", applier, 0x16u);
          }
          free(v34);
          goto LABEL_55;
        }
        if (v37)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
          os_log_type_t v33 = "%{public}s nw_frame_create failed, no backtrace";
          id v39 = v35;
          os_log_type_t v40 = v36;
          goto LABEL_54;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v31 = gLogObj;
        os_log_type_t v32 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
          os_log_type_t v33 = "%{public}s nw_frame_create failed, backtrace limit exceeded";
          goto LABEL_53;
        }
      }
    }
LABEL_55:
    if (!v30) {
      goto LABEL_58;
    }
    uint64_t v41 = (char *)v30;
    goto LABEL_57;
  }
  __break(1u);
}

void sub_1837FCAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_connection_create_with_connected_socket_and_parameters(int a1, void *a2)
{
  id v3 = a2;
  do_not_guard = nw_fd_wrapper_create_do_not_guard(a1);
  id v5 = v3;
  BOOL v6 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v5, 0, 0);

  BOOL v7 = nw_connection_create_with_connected_socket_internal(do_not_guard, (void *)v6, 0, 0, 0);
  if (!v7) {
    nw_fd_wrapper_relinquish_fd(do_not_guard);
  }

  return v7;
}

void sub_1837FCBA4(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

BOOL ___ZL51nw_connection_create_with_connected_socket_internalPU27objcproto16OS_nw_fd_wrapper8NSObjectPU27objcproto16OS_nw_parametersS_PU25objcproto14OS_nw_endpointS_S5_b_block_invoke(uint64_t a1, int a2)
{
  nw_endpoint_t v3 = nw_endpoint_create_with_peer_name(a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) != 0;
}

uint64_t ___ZL51nw_connection_create_with_connected_socket_internalPU27objcproto16OS_nw_fd_wrapper8NSObjectPU27objcproto16OS_nw_parametersS_PU25objcproto14OS_nw_endpointS_S5_b_block_invoke_2(uint64_t a1, int a2)
{
  nw_endpoint_t v3 = nw_endpoint_create_with_sock_name(a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

void *nw_connection_create_with_connected_socket(int a1, unsigned int a2)
{
  nw_allow_use_of_dispatch_internal();
  nw_parameters_t v4 = nw_parameters_create();
  nw_parameters_set_data_mode(v4, a2);
  do_not_guard = nw_fd_wrapper_create_do_not_guard(a1);
  BOOL v6 = nw_connection_create_with_connected_socket_internal(do_not_guard, v4, 0, 0, 0);
  if (!v6) {
    nw_fd_wrapper_relinquish_fd(do_not_guard);
  }

  return v6;
}

void sub_1837FCCF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_get_connected_socket(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    int v19 = -1;
    *(void *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_get_connected_socket_block_invoke;
    v13[3] = &unk_1E524B978;
    uint64_t v14 = v1;
    uint64_t v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_get_connected_socket_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    uint64_t v3 = *(unsigned int *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_get_connected_socket";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_get_connected_socket";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_get_connected_socket";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_get_connected_socket";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_get_connected_socket";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0xFFFFFFFFLL;
LABEL_3:

  return v3;
}

void __nw_connection_get_connected_socket_block_invoke(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) != 0)
  {
    BOOL v6 = (void *)nw_endpoint_handler_copy_connected_socket_wrapper(*(void **)(v2 + 144));
    if (!v6)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 16);
      if (v9 && !nw_path_parameters_get_logging_disabled(*(void *)(v9 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v10 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          int v11 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446466;
          BOOL v49 = "nw_connection_get_connected_socket_block_invoke";
          __int16 v50 = 1024;
          int v51 = v11;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection has no connected socket", buf, 0x12u);
        }
      }
      nw_parameters_t v4 = 0;
      goto LABEL_75;
    }
    nw_parameters_t v4 = v6;
    os_unfair_lock_lock(v4 + 3);
    char os_unfair_lock_opaque = v4[6]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v4 + 3);

    os_log_type_t v8 = *(NWConcrete_nw_parameters **)(*(void *)(a1 + 32) + 16);
    if ((os_unfair_lock_opaque & 1) == 0)
    {
      if (nw_parameters_get_allow_socket_access(v8))
      {
        v45[0] = MEMORY[0x1E4F143A8];
        v45[1] = 3221225472;
        v45[2] = __nw_connection_get_connected_socket_block_invoke_14;
        v45[3] = &unk_1E524A270;
        void v45[4] = *(void *)(a1 + 40);
        nw_fd_wrapper_get_fd(v4, v45);
LABEL_75:

        return;
      }
      uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 16);
      if (!v21 || nw_path_parameters_get_logging_disabled(*(void *)(v21 + 104))) {
        goto LABEL_75;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v22 = (id)gconnectionLogObj;
      int v23 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      BOOL v49 = "nw_connection_get_connected_socket_block_invoke";
      __int16 v50 = 1024;
      int v51 = v23;
      os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v46 = 0;
      if (__nwlog_fault(v12, &type, &v46))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v24 = (id)gconnectionLogObj;
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            int v26 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
            *(_DWORD *)long long buf = 136446466;
            BOOL v49 = "nw_connection_get_connected_socket_block_invoke";
            __int16 v50 = 1024;
            int v51 = v26;
            _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s [C%u] parameters do not allow socket access", buf, 0x12u);
          }
        }
        else if (v46)
        {
          backtrace_string = __nw_create_backtrace_string();
          if (backtrace_string)
          {
            os_log_type_t v33 = (char *)backtrace_string;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            BOOL v34 = (id)gconnectionLogObj;
            os_log_type_t v35 = type;
            if (os_log_type_enabled(v34, type))
            {
              int v36 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
              *(_DWORD *)long long buf = 136446722;
              BOOL v49 = "nw_connection_get_connected_socket_block_invoke";
              __int16 v50 = 1024;
              int v51 = v36;
              __int16 v52 = 2082;
              os_log_type_t v53 = v33;
              _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s [C%u] parameters do not allow socket access, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v33);
            if (!v12) {
              goto LABEL_75;
            }
            goto LABEL_74;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v24 = (id)gconnectionLogObj;
          os_log_type_t v43 = type;
          if (os_log_type_enabled(v24, type))
          {
            int v44 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
            *(_DWORD *)long long buf = 136446466;
            BOOL v49 = "nw_connection_get_connected_socket_block_invoke";
            __int16 v50 = 1024;
            int v51 = v44;
            _os_log_impl(&dword_1830D4000, v24, v43, "%{public}s [C%u] parameters do not allow socket access, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v24 = (id)gconnectionLogObj;
          os_log_type_t v41 = type;
          if (os_log_type_enabled(v24, type))
          {
            int v42 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
            *(_DWORD *)long long buf = 136446466;
            BOOL v49 = "nw_connection_get_connected_socket_block_invoke";
            __int16 v50 = 1024;
            int v51 = v42;
            _os_log_impl(&dword_1830D4000, v24, v41, "%{public}s [C%u] parameters do not allow socket access, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
LABEL_73:
      if (!v12) {
        goto LABEL_75;
      }
LABEL_74:
      free(v12);
      goto LABEL_75;
    }
    os_log_type_t v12 = nw_parameters_copy_description_internal(v8, 1);
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 16);
    if (!v13 || nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104))) {
      goto LABEL_73;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v14 = (id)gconnectionLogObj;
    int v15 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
    if (v12) {
      char v16 = v12;
    }
    else {
      char v16 = "";
    }
    *(_DWORD *)long long buf = 136446722;
    BOOL v49 = "nw_connection_get_connected_socket_block_invoke";
    __int16 v50 = 1024;
    int v51 = v15;
    __int16 v52 = 2082;
    os_log_type_t v53 = v16;
    int v17 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault((const char *)v17, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v18 = (id)gconnectionLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          int v20 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446722;
          BOOL v49 = "nw_connection_get_connected_socket_block_invoke";
          __int16 v50 = 1024;
          int v51 = v20;
          __int16 v52 = 2082;
          os_log_type_t v53 = v16;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s [C%u] socket is guarded. parameters: %{public}s", buf, 0x1Cu);
        }
      }
      else if (v46)
      {
        os_log_type_t v27 = __nw_create_backtrace_string();
        if (v27)
        {
          os_log_type_t v28 = (char *)v27;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          __int16 v29 = (id)gconnectionLogObj;
          os_log_type_t v30 = type;
          if (os_log_type_enabled(v29, type))
          {
            int v31 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
            *(_DWORD *)long long buf = 136446978;
            BOOL v49 = "nw_connection_get_connected_socket_block_invoke";
            __int16 v50 = 1024;
            int v51 = v31;
            __int16 v52 = 2082;
            os_log_type_t v53 = v16;
            __int16 v54 = 2082;
            os_log_type_t v55 = v28;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s [C%u] socket is guarded. parameters: %{public}s, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(v28);
          if (!v17) {
            goto LABEL_73;
          }
LABEL_72:
          free(v17);
          goto LABEL_73;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v18 = (id)gconnectionLogObj;
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v18, type))
        {
          int v40 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446722;
          BOOL v49 = "nw_connection_get_connected_socket_block_invoke";
          __int16 v50 = 1024;
          int v51 = v40;
          __int16 v52 = 2082;
          os_log_type_t v53 = v16;
          _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s [C%u] socket is guarded. parameters: %{public}s, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v18 = (id)gconnectionLogObj;
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v18, type))
        {
          int v38 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446722;
          BOOL v49 = "nw_connection_get_connected_socket_block_invoke";
          __int16 v50 = 1024;
          int v51 = v38;
          __int16 v52 = 2082;
          os_log_type_t v53 = v16;
          _os_log_impl(&dword_1830D4000, v18, v37, "%{public}s [C%u] socket is guarded. parameters: %{public}s, backtrace limit exceeded", buf, 0x1Cu);
        }
      }
    }
    if (!v17) {
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    nw_parameters_t v4 = (os_unfair_lock_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      BOOL v49 = "nw_connection_get_connected_socket_block_invoke";
      __int16 v50 = 1024;
      int v51 = v5;
      _os_log_impl(&dword_1830D4000, (os_log_t)v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_get_connected_socket on unconnected nw_connection", buf, 0x12u);
    }
    goto LABEL_75;
  }
}

void sub_1837FD9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_get_connected_socket_block_invoke_14(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  return 1;
}

const char *nw_connection_state_to_string(unsigned int a1)
{
  if (a1 > 5) {
    return "unknown";
  }
  else {
    return off_1E523DF08[a1];
  }
}

void nw_connection_restart(nw_connection_t connection)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_connection_t v1 = connection;
  nw_connection_t v2 = v1;
  if (v1)
  {
    if (!nw_parameters_get_logging_disabled((uint64_t)v1[2].isa))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v3 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int isa = (int)v2[56].isa;
        logging_description = nw_endpoint_get_logging_description(v2[1].isa);
        Class v6 = v2[2].isa;
        *(_DWORD *)long long buf = 67109634;
        *(_DWORD *)int v20 = isa;
        *(_WORD *)&void v20[4] = 2082;
        *(void *)&v20[6] = logging_description;
        *(_WORD *)&v20[14] = 2114;
        *(void *)&v20[16] = v6;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEFAULT, "[C%u %{public}s %{public}@] restart", buf, 0x1Cu);
      }
    }
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_restart_block_invoke;
    v15[3] = &unk_1E524BAA8;
    char v16 = v2;
    nw_connection_async_if_needed(v16, v15);

    goto LABEL_9;
  }
  BOOL v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)int v20 = "nw_connection_restart";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v8, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)int v20 = "nw_connection_restart";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)int v20 = "nw_connection_restart";
          *(_WORD *)&v20[8] = 2082;
          *(void *)&v20[10] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)int v20 = "nw_connection_restart";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)int v20 = "nw_connection_restart";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_26:
  if (v8) {
    free(v8);
  }
LABEL_9:
}

void sub_1837FDDD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_connection_restart_block_invoke(uint64_t a1)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  id v1 = *(id *)(*(void *)(a1 + 32) + 144);
  nw_connection_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (NWConcrete_nw_endpoint_handler *)v1;
    nw_parameters_t v4 = v3;
    parameters = v3->parameters;
    if (parameters)
    {
      Class v6 = parameters;
      uint64_t v7 = *((void *)v6 + 12);

      if ((v7 & 0x4000000000) != 0)
      {
        os_log_type_t v57 = v4;
        char v58 = *((unsigned char *)v57 + 268);

        if ((v58 & 0x20) != 0) {
          goto LABEL_25;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v8 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v59 = v57;

          BOOL v60 = v59;
          char v61 = *((unsigned char *)v57 + 268);

          if (v61) {
            os_log_type_t v62 = "dry-run ";
          }
          else {
            os_log_type_t v62 = "";
          }
          nw_endpoint_t v63 = nw_endpoint_handler_copy_endpoint(v60);
          logging_description = nw_endpoint_get_logging_description(v63);
          logc = v59 + 168;
          BOOL v65 = v60;
          id v66 = v65;
          uint64_t v67 = v65[30];
          if (v67 > 5) {
            BOOL v68 = "unknown-state";
          }
          else {
            BOOL v68 = off_1E523FB38[v67];
          }
          unint64_t v79 = v68;

          os_log_type_t v72 = v66;
          nw_endpoint_t v73 = v72;
          os_log_type_t v74 = v2;
          uint64_t v75 = "path";
          switch(*((_DWORD *)v72 + 29))
          {
            case 0:
              break;
            case 1:
              uint64_t v75 = "resolver";
              break;
            case 2:
              uint64_t v75 = nw_endpoint_flow_mode_string(v72[31]);
              break;
            case 3:
              uint64_t v75 = "proxy";
              break;
            case 4:
              uint64_t v75 = "fallback";
              break;
            case 5:
              uint64_t v75 = "transform";
              break;
            default:
              uint64_t v75 = "unknown-mode";
              break;
          }

          uint64_t v77 = v73;
          os_unfair_lock_lock((os_unfair_lock_t)v77 + 28);
          id v78 = v77[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v77 + 28);

          *(_DWORD *)long long buf = 136447746;
          BOOL v87 = "nw_endpoint_handler_restart";
          __int16 v88 = 2082;
          id_str = logc;
          __int16 v90 = 2082;
          uint64_t v91 = v62;
          __int16 v92 = 2082;
          uint32_t v93 = logging_description;
          __int16 v94 = 2082;
          uint32_t v95 = v79;
          __int16 v96 = 2082;
          os_log_type_t v97 = v75;
          __int16 v98 = 2114;
          id v99 = v78;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);

          nw_connection_t v2 = v74;
        }
LABEL_24:

        goto LABEL_25;
      }
      if ((*((unsigned char *)v4 + 268) & 0x20) != 0)
      {
LABEL_25:
        if (v4->state == 1)
        {
          if (nw_parameters_get_indefinite(v4->parameters))
          {
            v4->event = (nw_endpoint_handler_event_s)262145;
            nw_endpoint_handler_report(v4, 0, &v4->event.domain, 0);
            id v22 = (OS_nw_path *)nw_association_copy_current_path(v4->association, v4->parameters);
            os_unfair_lock_lock(&v4->lock);
            current_path = v4->current_path;
            v4->current_path = v22;

            os_unfair_lock_unlock(&v4->lock);
            nw_endpoint_handler_path_change(v4);
            goto LABEL_66;
          }
          if ((*((unsigned char *)v4 + 268) & 0x20) != 0) {
            goto LABEL_66;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v24 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            if (*((unsigned char *)v4 + 268)) {
              int v31 = "dry-run ";
            }
            else {
              int v31 = "";
            }
            nw_endpoint_t v32 = nw_endpoint_handler_copy_endpoint(v4);
            os_log_type_t v33 = nw_endpoint_get_logging_description(v32);
            uint64_t state = v4->state;
            os_log_type_t v35 = v33;
            if (state > 5) {
              int v36 = "unknown-state";
            }
            else {
              int v36 = off_1E523FB38[state];
            }
            logb = v36;
            int v40 = v4;
            os_log_type_t v41 = (os_unfair_lock_s *)v40;
            int v42 = "path";
            switch(v40->mode)
            {
              case 0:
                break;
              case 1:
                int v42 = "resolver";
                break;
              case 2:
                int v42 = nw_endpoint_flow_mode_string(v40->mode_handler);
                break;
              case 3:
                int v42 = "proxy";
                break;
              case 4:
                int v42 = "fallback";
                break;
              case 5:
                int v42 = "transform";
                break;
              default:
                int v42 = "unknown-mode";
                break;
            }

            os_log_type_t v48 = v2;
            BOOL v49 = v41 + 28;
            __int16 v50 = v41;
            os_unfair_lock_lock(v41 + 28);
            id v51 = v50[8];
            __int16 v52 = v49;
            nw_connection_t v2 = v48;
            os_unfair_lock_unlock(v52);

            *(_DWORD *)long long buf = 136447746;
            BOOL v87 = "nw_endpoint_handler_restart";
            __int16 v88 = 2082;
            id_str = v4->id_str;
            __int16 v90 = 2082;
            uint64_t v91 = v31;
            __int16 v92 = 2082;
            uint32_t v93 = v35;
            __int16 v94 = 2082;
            uint32_t v95 = logb;
            __int16 v96 = 2082;
            os_log_type_t v97 = v42;
            __int16 v98 = 2114;
            id v99 = v51;
            _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] skipping restart on non-indefinite connection", buf, 0x48u);
          }
        }
        else
        {
          if ((*((unsigned char *)v4 + 268) & 0x20) != 0) {
            goto LABEL_66;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v24 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            if (*((unsigned char *)v4 + 268)) {
              os_log_type_t v25 = "dry-run ";
            }
            else {
              os_log_type_t v25 = "";
            }
            nw_endpoint_t v26 = nw_endpoint_handler_copy_endpoint(v4);
            os_log_type_t v27 = nw_endpoint_get_logging_description(v26);
            nw_endpoint_t loga = v25;
            uint64_t v28 = v4->state;
            __int16 v29 = v27;
            if (v28 > 5) {
              os_log_type_t v30 = "unknown-state";
            }
            else {
              os_log_type_t v30 = off_1E523FB38[v28];
            }
            os_log_type_t v37 = v4;
            int v38 = (os_unfair_lock_s *)v37;
            os_log_type_t v39 = "path";
            switch(v37->mode)
            {
              case 0:
                break;
              case 1:
                os_log_type_t v39 = "resolver";
                break;
              case 2:
                os_log_type_t v39 = nw_endpoint_flow_mode_string(v37->mode_handler);
                break;
              case 3:
                os_log_type_t v39 = "proxy";
                break;
              case 4:
                os_log_type_t v39 = "fallback";
                break;
              case 5:
                os_log_type_t v39 = "transform";
                break;
              default:
                os_log_type_t v39 = "unknown-mode";
                break;
            }

            os_log_type_t v43 = v2;
            int v44 = v38 + 28;
            BOOL v45 = v38;
            os_unfair_lock_lock(v38 + 28);
            id v46 = v45[8];
            uint64_t v47 = v44;
            nw_connection_t v2 = v43;
            os_unfair_lock_unlock(v47);

            *(_DWORD *)long long buf = 136447746;
            BOOL v87 = "nw_endpoint_handler_restart";
            __int16 v88 = 2082;
            id_str = v4->id_str;
            __int16 v90 = 2082;
            uint64_t v91 = loga;
            __int16 v92 = 2082;
            uint32_t v93 = v29;
            __int16 v94 = 2082;
            uint32_t v95 = v30;
            __int16 v96 = 2082;
            os_log_type_t v97 = v39;
            __int16 v98 = 2114;
            id v99 = v46;
            _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] skipping restart due to wrong state", buf, 0x48u);
          }
        }

        goto LABEL_66;
      }
    }
    else
    {

      if ((*((unsigned char *)v4 + 268) & 0x20) != 0) {
        goto LABEL_25;
      }
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v8 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      log = v8;
      if (*((unsigned char *)v4 + 268)) {
        uint64_t v9 = "dry-run ";
      }
      else {
        uint64_t v9 = "";
      }
      nw_endpoint_t v10 = nw_endpoint_handler_copy_endpoint(v4);
      int v11 = nw_endpoint_get_logging_description(v10);
      uint64_t v12 = v4->state;
      BOOL v13 = v11;
      if (v12 > 5) {
        os_log_type_t v14 = "unknown-state";
      }
      else {
        os_log_type_t v14 = off_1E523FB38[v12];
      }
      int v15 = v4;
      char v16 = (os_unfair_lock_s *)v15;
      char v17 = v2;
      os_log_type_t v18 = "path";
      switch(v15->mode)
      {
        case 0:
          break;
        case 1:
          os_log_type_t v18 = "resolver";
          break;
        case 2:
          os_log_type_t v18 = nw_endpoint_flow_mode_string(v15->mode_handler);
          break;
        case 3:
          os_log_type_t v18 = "proxy";
          break;
        case 4:
          os_log_type_t v18 = "fallback";
          break;
        case 5:
          os_log_type_t v18 = "transform";
          break;
        default:
          os_log_type_t v18 = "unknown-mode";
          break;
      }

      os_log_type_t v19 = v16 + 28;
      int v20 = v16;
      os_unfair_lock_lock(v16 + 28);
      id v21 = v20[8];
      os_unfair_lock_unlock(v19);

      *(_DWORD *)long long buf = 136447746;
      BOOL v87 = "nw_endpoint_handler_restart";
      __int16 v88 = 2082;
      id_str = v4->id_str;
      __int16 v90 = 2082;
      uint64_t v91 = v9;
      __int16 v92 = 2082;
      uint32_t v93 = v13;
      __int16 v94 = 2082;
      uint32_t v95 = v14;
      __int16 v96 = 2082;
      os_log_type_t v97 = v18;
      __int16 v98 = 2114;
      id v99 = v21;
      os_log_type_t v8 = log;
      _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);

      nw_connection_t v2 = v17;
    }
    goto LABEL_24;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v53 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  BOOL v87 = "nw_endpoint_handler_restart";
  __int16 v54 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v84 = 0;
  if (__nwlog_fault(v54, &type, &v84))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v55 = (id)gLogObj;
      os_log_type_t v56 = type;
      if (os_log_type_enabled(v55, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v87 = "nw_endpoint_handler_restart";
        _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v84)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v55 = (id)gLogObj;
      os_log_type_t v70 = type;
      BOOL v71 = os_log_type_enabled(v55, type);
      if (backtrace_string)
      {
        if (v71)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v87 = "nw_endpoint_handler_restart";
          __int16 v88 = 2082;
          id_str = backtrace_string;
          _os_log_impl(&dword_1830D4000, v55, v70, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_95;
      }
      if (v71)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v87 = "nw_endpoint_handler_restart";
        _os_log_impl(&dword_1830D4000, v55, v70, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v55 = (id)gLogObj;
      os_log_type_t v76 = type;
      if (os_log_type_enabled(v55, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v87 = "nw_endpoint_handler_restart";
        _os_log_impl(&dword_1830D4000, v55, v76, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_95:
  if (v54) {
    free(v54);
  }
LABEL_66:
}

void sub_1837FE99C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_set_cancel_handler(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_set_cancel_handler_block_invoke;
    v13[3] = &unk_1E524B950;
    os_log_type_t v14 = v3;
    id v15 = v4;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_set_cancel_handler_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v19 = "nw_connection_set_cancel_handler";
  Class v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v19 = "nw_connection_set_cancel_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = v17;
      BOOL v11 = os_log_type_enabled(v7, v17);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v19 = "nw_connection_set_cancel_handler";
          __int16 v20 = 2082;
          id v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v19 = "nw_connection_set_cancel_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v19 = "nw_connection_set_cancel_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void __nw_connection_set_cancel_handler_block_invoke(uint64_t a1)
{
  nw_connection_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 216);
  *(void *)(v3 + 216) = v2;
}

void nw_connection_cancel_current_endpoint(nw_connection_t connection)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_connection_t v1 = connection;
  nw_connection_t v2 = v1;
  if (v1)
  {
    if (!nw_parameters_get_logging_disabled((uint64_t)v1[2].isa))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v3 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int isa = (int)v2[56].isa;
        logging_description = nw_endpoint_get_logging_description(v2[1].isa);
        Class v6 = v2[2].isa;
        *(_DWORD *)long long buf = 67109634;
        *(_DWORD *)__int16 v20 = isa;
        *(_WORD *)&void v20[4] = 2082;
        *(void *)&v20[6] = logging_description;
        *(_WORD *)&v20[14] = 2114;
        *(void *)&v20[16] = v6;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEFAULT, "[C%u %{public}s %{public}@] cancel current endpoint", buf, 0x1Cu);
      }
    }
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_cancel_current_endpoint_block_invoke;
    v15[3] = &unk_1E524BAA8;
    char v16 = v2;
    nw_connection_async_if_needed(v16, v15);

    goto LABEL_9;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)__int16 v20 = "nw_connection_cancel_current_endpoint";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v8, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)__int16 v20 = "nw_connection_cancel_current_endpoint";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)__int16 v20 = "nw_connection_cancel_current_endpoint";
          *(_WORD *)&v20[8] = 2082;
          *(void *)&v20[10] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)__int16 v20 = "nw_connection_cancel_current_endpoint";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)__int16 v20 = "nw_connection_cancel_current_endpoint";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_26:
  if (v8) {
    free(v8);
  }
LABEL_9:
}

void sub_1837FF180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_connection_cancel_current_endpoint_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) != 0)
  {
    Class v6 = nw_endpoint_handler_copy_connected_flow_handler(*(void **)(v2 + 144));
    if (v6)
    {
      p_super = &v6->super;
      nw_endpoint_handler_cancel(v6, 0, 1);
    }
    else
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16);
      if (v7 && !nw_path_parameters_get_logging_disabled(*(void *)(v7 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v8 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          int v9 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          int v10 = 136446466;
          BOOL v11 = "nw_connection_cancel_current_endpoint_block_invoke";
          __int16 v12 = 1024;
          int v13 = v9;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection had no connected handler, cannot cancel endpoint", (uint8_t *)&v10, 0x12u);
        }
      }
      p_super = 0;
    }
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    p_super = (id)gconnectionLogObj;
    if (os_log_type_enabled(p_super, OS_LOG_TYPE_INFO))
    {
      int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      int v10 = 136446466;
      BOOL v11 = "nw_connection_cancel_current_endpoint_block_invoke";
      __int16 v12 = 1024;
      int v13 = v5;
      _os_log_impl(&dword_1830D4000, p_super, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection is not ready, cannot cancel endpoint", (uint8_t *)&v10, 0x12u);
    }
LABEL_18:
  }
}

void sub_1837FF390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_get_listener_protocol_on_nw_queue(void *a1, void *a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (!v5)
  {
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v35 = "nw_connection_get_listener_protocol_on_nw_queue";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v19, &type, &v32)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v20 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v35 = "nw_connection_get_listener_protocol_on_nw_queue";
          __int16 v36 = 2082;
          os_log_type_t v37 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_62:
        if (!v19)
        {
LABEL_19:
          uint64_t listener_protocol_on_nw_queue = 0;
          goto LABEL_20;
        }
LABEL_63:
        free(v19);
        goto LABEL_19;
      }
      if (v26)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v20 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  if (!v6)
  {
    uint64_t v22 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v35 = "nw_connection_get_listener_protocol_on_nw_queue";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v19, &type, &v32)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v20 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v32)
    {
      os_log_type_t v27 = (char *)__nw_create_backtrace_string();
      __int16 v20 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v20, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v35 = "nw_connection_get_listener_protocol_on_nw_queue";
          __int16 v36 = 2082;
          os_log_type_t v37 = v27;
          _os_log_impl(&dword_1830D4000, v20, v28, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v27);
        if (!v19) {
          goto LABEL_19;
        }
        goto LABEL_63;
      }
      if (v29)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v28, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v20 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v31, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_61;
  }
  nw_context_assert_queue(v5[3]);
  os_log_type_t v8 = v5[18];
  if (!v8)
  {
    BOOL v11 = v5[2];
    if (v11 && !nw_path_parameters_get_logging_disabled(v11[13]))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v12 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v13 = *((_DWORD *)v5 + 112);
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v35 = "nw_connection_get_listener_protocol_on_nw_queue";
        __int16 v36 = 1024;
        LODWORD(v37) = v13;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection has no parent handler", buf, 0x12u);
      }
    }
    goto LABEL_19;
  }
  if (!a3) {
    goto LABEL_7;
  }
  uint64_t listener_protocol_on_nw_queue = nw_endpoint_handler_get_listener_protocol_on_nw_queue(v8, v7);
  if (!listener_protocol_on_nw_queue)
  {
    os_log_type_t v8 = v5[18];
LABEL_7:
    int v10 = nw_endpoint_handler_copy_connected_flow_handler(v8);
    if (!v10)
    {
      if (!nw_endpoint_handler_has_connected_flow(v5[18]))
      {
        id v15 = v5[2];
        if (v15 && !nw_path_parameters_get_logging_disabled(v15[13]))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          char v16 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            int v17 = *((_DWORD *)v5 + 112);
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v35 = "nw_connection_get_listener_protocol_on_nw_queue";
            __int16 v36 = 1024;
            LODWORD(v37) = v17;
            _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection has no available handler", buf, 0x12u);
          }
        }
        int v10 = 0;
        uint64_t listener_protocol_on_nw_queue = 0;
        goto LABEL_11;
      }
      int v10 = v5[18];
    }
    uint64_t listener_protocol_on_nw_queue = nw_endpoint_handler_get_listener_protocol_on_nw_queue(v10, v7);
LABEL_11:
  }
LABEL_20:

  return listener_protocol_on_nw_queue;
}

void sub_1837FFA1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_connection_copy_connected_parameters_with_protocol(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v22 = __Block_byref_object_copy__24353;
    os_log_type_t v23 = __Block_byref_object_dispose__24354;
    id v24 = 0;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_copy_connected_parameters_with_protocol_block_invoke;
    v15[3] = &unk_1E5242570;
    char v16 = v3;
    os_log_type_t v18 = buf;
    id v17 = v4;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_copy_connected_parameters_with_protocol_block_invoke((uint64_t)v15);
    os_unfair_lock_unlock(v3 + 34);
    id v5 = *(id *)(*(void *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_copy_connected_parameters_with_protocol";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v8, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_connected_parameters_with_protocol";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_copy_connected_parameters_with_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_connected_parameters_with_protocol";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_connected_parameters_with_protocol";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_3:

  return v5;
}

void __nw_connection_copy_connected_parameters_with_protocol_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) != 0)
  {
    id v6 = nw_endpoint_handler_copy_connected_parameters_with_protocol(*(void **)(v2 + 144), *(void **)(a1 + 40));
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    os_log_type_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        int v9 = 136446466;
        os_log_type_t v10 = "nw_connection_copy_connected_parameters_with_protocol_block_invoke";
        __int16 v11 = 1024;
        int v12 = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_copy_connected_parameters_with_protocol on unconnected nw_connection", (uint8_t *)&v9, 0x12u);
      }
    }
  }
}

BOOL nw_connection_uses_sleep_proxy(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nw_connection_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v19 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_uses_sleep_proxy_block_invoke;
    v13[3] = &unk_1E524B978;
    os_log_type_t v14 = v1;
    id v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_uses_sleep_proxy_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    BOOL v3 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_uses_sleep_proxy";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_uses_sleep_proxy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_uses_sleep_proxy";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_uses_sleep_proxy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_uses_sleep_proxy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_uses_sleep_proxy_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) != 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = nw_endpoint_handler_uses_sleep_proxy(*(void **)(v2 + 144));
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        int v6 = 136446466;
        uint64_t v7 = "nw_connection_uses_sleep_proxy_block_invoke";
        __int16 v8 = 1024;
        int v9 = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_uses_sleep_proxy on unconnected nw_connection", (uint8_t *)&v6, 0x12u);
      }
    }
  }
}

uint64_t nw_connection_get_flow_id_on_nw_queue(void *a1, _OWORD *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_context_assert_queue(v3[3]);
    uint64_t flow_id = nw_endpoint_handler_get_flow_id(v4[18], a2);
    goto LABEL_3;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_connection_get_flow_id_on_nw_queue";
  __int16 v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_connection_get_flow_id_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_connection_get_flow_id_on_nw_queue";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_connection_get_flow_id_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_connection_get_flow_id_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  uint64_t flow_id = 0;
LABEL_3:

  return flow_id;
}

void sub_183800668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint32_t nw_connection_get_maximum_datagram_size(nw_connection_t connection)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_connection_t v1 = connection;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_path_t v3 = nw_connection_copy_current_path(v1);
    nw_path_t v4 = v3;
    if (v3) {
      maximum_datagram_unsigned int size = nw_path_get_maximum_datagram_size(v3);
    }
    else {
      maximum_datagram_unsigned int size = 1500;
    }

    goto LABEL_6;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v18 = "nw_connection_get_maximum_datagram_size";
  __int16 v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_connection_get_maximum_datagram_size";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v18 = "nw_connection_get_maximum_datagram_size";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_connection_get_maximum_datagram_size";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v18 = "nw_connection_get_maximum_datagram_size";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  maximum_datagram_unsigned int size = 0;
LABEL_6:

  return maximum_datagram_size;
}

void sub_183800930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_connection_copy_host_endpoint(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  nw_connection_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    __int16 v19 = __Block_byref_object_copy__24353;
    uint64_t v20 = __Block_byref_object_dispose__24354;
    id v21 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_copy_host_endpoint_block_invoke;
    v13[3] = &unk_1E524B978;
    os_log_type_t v14 = v1;
    char v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_host_endpoint_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    id v3 = *(id *)(*(void *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_copy_host_endpoint";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_host_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_copy_host_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_host_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_host_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_copy_host_endpoint_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(id *)(*(void *)(a1 + 32) + 144);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2)
  {
    p_super = v2;
    if ((*(unsigned char *)(v3 + 109) & 0x40) == 0
      || (int v5 = nw_endpoint_handler_copy_connected_flow_handler(v2), p_super, (p_super = &v5->super) != 0))
    {
      while (1)
      {
        int v6 = nw_endpoint_handler_copy_endpoint(p_super);
        if (nw_endpoint_get_type(v6) == nw_endpoint_type_host) {
          break;
        }
        uint64_t v7 = p_super;
        p_super = v7[9];

        if (!p_super) {
          return;
        }
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
      BOOL v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v6;

      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + 16);
    if (v8 && !nw_path_parameters_get_logging_disabled(*(void *)(v8 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      p_super = (id)gconnectionLogObj;
      if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
      {
        int v9 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        int v12 = 136446466;
        BOOL v13 = "nw_connection_copy_host_endpoint_block_invoke";
        __int16 v14 = 1024;
        int v15 = v9;
        _os_log_impl(&dword_1830D4000, p_super, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client error, called nw_connection_copy_host_endpoint on connection in wrong state", (uint8_t *)&v12, 0x12u);
      }
LABEL_14:
    }
  }
}

void sub_183800E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_connection_add_extra_interface_option_block_invoke(uint64_t a1)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      nw_path_t v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        *(_DWORD *)long long buf = 136446466;
        uint64_t v129 = "nw_connection_add_extra_interface_option_block_invoke";
        __int16 v130 = 1024;
        LODWORD(id_str) = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection is not ready, ignore", buf, 0x12u);
      }
    }
    return;
  }
  uint64_t v121 = nw_endpoint_handler_copy_connected_flow_handler(*(void **)(v2 + 144));
  if (v121)
  {
    int v6 = *(void **)(a1 + 40);
    uint64_t v7 = v121;
    id v8 = v6;
    int v9 = v7;
    uint64_t mode = v9->mode;

    id v119 = v9;
    uint64_t v120 = v8;
    if (mode == 2)
    {
      if (v8)
      {
        BOOL v11 = &unk_1EB267000;
        if (nw_endpoint_handler_get_minimize_logging(v9))
        {
          if (nw_endpoint_handler_get_logging_disabled(v9))
          {
LABEL_55:
            os_log_type_t v43 = nw_endpoint_handler_copy_flow(v9);
            int v44 = (void *)*((void *)v43 + 104);
            if (v44)
            {
              nw_path_flow_registration_add_extra_interface_option(v44, v8);
              BOOL v45 = nw_path_flow_registration_copy_path(*((void **)v43 + 104));
              os_unfair_lock_lock((os_unfair_lock_t)v43 + 220);
              objc_storeStrong((id *)v43 + 2, v45);
              if ((*((unsigned char *)v43 + 33) & 4) != 0) {
                objc_storeStrong((id *)v43 + 1, v45);
              }
              os_unfair_lock_unlock((os_unfair_lock_t)v43 + 220);
              id v46 = (const char *)*((void *)v43 + 51);
              id v47 = *((id *)v43 + 2);
              if (v46 && (uint64_t v48 = *((void *)v46 + 3)) != 0)
              {
                if (*(void *)(v48 + 168)) {
                  BOOL v49 = v47 == 0;
                }
                else {
                  BOOL v49 = 1;
                }
                int v50 = !v49;

                if (v50)
                {
                  id v51 = *((id *)v43 + 2);
                  __int16 v52 = v51;
                  id v53 = (void *)*((void *)v46 + 5);
                  if (v53 == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v67 = *((void *)v46 + 11);
                    if (v67) {
                      *((void *)v46 + 11) = v67 + 1;
                    }
                    char v54 = -1;
                  }
                  else
                  {
                    char v54 = 0;
                  }
                  *(void *)os_log_type_t type = v46;
                  char v127 = v54;
                  BOOL v68 = (void *)*((void *)v43 + 52);
                  if (v68 == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v70 = *((void *)v43 + 58);
                    if (v70) {
                      *((void *)v43 + 58) = v70 + 1;
                    }
                    char v69 = -1;
                  }
                  else
                  {
                    char v69 = 0;
                  }
                  uint64_t v124 = (uint64_t)v43 + 376;
                  char v125 = v69;
                  if (v51)
                  {
                    uint64_t v71 = *((void *)v46 + 3);
                    if (v71)
                    {
                      os_log_type_t v72 = *(void (**)(const char *, char *, id))(v71 + 168);
                      if (v72)
                      {
                        v72(v46, (char *)v43 + 376, v51);
LABEL_91:
                        if (v68 == &nw_protocol_ref_counted_handle) {
                          nw::release_if_needed<nw_protocol *>(&v124);
                        }
                        if (v53 == &nw_protocol_ref_counted_handle) {
                          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                        }

                        goto LABEL_117;
                      }
                    }
                    uint64_t v86 = __nwlog_obj();
                    BOOL v87 = (const char *)*((void *)v46 + 2);
                    *(_DWORD *)long long buf = 136446722;
                    uint64_t v129 = "__nw_protocol_updated_path";
                    if (!v87) {
                      BOOL v87 = "invalid";
                    }
                    __int16 v130 = 2082;
                    id_str = (char *)v87;
                    __int16 v132 = 2048;
                    int v133 = v46;
                    __int16 v88 = (char *)_os_log_send_and_compose_impl();

                    os_log_type_t v123 = OS_LOG_TYPE_ERROR;
                    char v122 = 0;
                    if (!__nwlog_fault(v88, &v123, &v122)) {
                      goto LABEL_195;
                    }
                    if (v123 == OS_LOG_TYPE_FAULT)
                    {
                      id v89 = __nwlog_obj();
                      os_log_type_t v90 = v123;
                      if (os_log_type_enabled(v89, v123))
                      {
                        uint64_t v91 = (const char *)*((void *)v46 + 2);
                        if (!v91) {
                          uint64_t v91 = "invalid";
                        }
                        *(_DWORD *)long long buf = 136446722;
                        uint64_t v129 = "__nw_protocol_updated_path";
                        __int16 v130 = 2082;
                        id_str = (char *)v91;
                        __int16 v132 = 2048;
                        int v133 = v46;
                        _os_log_impl(&dword_1830D4000, v89, v90, "%{public}s protocol %{public}s (%p) has invalid updated_path callback", buf, 0x20u);
                      }
                    }
                    else
                    {
                      if (v122)
                      {
                        backtrace_string = (char *)__nw_create_backtrace_string();
                        uint64_t v105 = __nwlog_obj();
                        os_log_type_t v116 = v123;
                        BOOL v106 = os_log_type_enabled(v105, v123);
                        if (backtrace_string)
                        {
                          if (v106)
                          {
                            BOOL v107 = (const char *)*((void *)v46 + 2);
                            if (!v107) {
                              BOOL v107 = "invalid";
                            }
                            *(_DWORD *)long long buf = 136446978;
                            uint64_t v129 = "__nw_protocol_updated_path";
                            __int16 v130 = 2082;
                            id_str = (char *)v107;
                            __int16 v132 = 2048;
                            int v133 = v46;
                            __int16 v134 = 2082;
                            os_log_type_t v135 = backtrace_string;
                            _os_log_impl(&dword_1830D4000, v105, v116, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
                          }

                          free(backtrace_string);
                        }
                        else
                        {
                          if (v106)
                          {
                            uint64_t v114 = (const char *)*((void *)v46 + 2);
                            if (!v114) {
                              uint64_t v114 = "invalid";
                            }
                            *(_DWORD *)long long buf = 136446722;
                            uint64_t v129 = "__nw_protocol_updated_path";
                            __int16 v130 = 2082;
                            id_str = (char *)v114;
                            __int16 v132 = 2048;
                            int v133 = v46;
                            _os_log_impl(&dword_1830D4000, v105, v116, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace", buf, 0x20u);
                          }
                        }
LABEL_195:
                        if (!v88) {
                          goto LABEL_91;
                        }
LABEL_196:
                        free(v88);
                        goto LABEL_91;
                      }
                      id v89 = __nwlog_obj();
                      os_log_type_t v112 = v123;
                      if (os_log_type_enabled(v89, v123))
                      {
                        uint64_t v113 = (const char *)*((void *)v46 + 2);
                        if (!v113) {
                          uint64_t v113 = "invalid";
                        }
                        *(_DWORD *)long long buf = 136446722;
                        uint64_t v129 = "__nw_protocol_updated_path";
                        __int16 v130 = 2082;
                        id_str = (char *)v113;
                        __int16 v132 = 2048;
                        int v133 = v46;
                        _os_log_impl(&dword_1830D4000, v89, v112, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, backtrace limit exceeded", buf, 0x20u);
                      }
                    }
                  }
                  else
                  {
                    uint64_t v102 = __nwlog_obj();
                    *(_DWORD *)long long buf = 136446210;
                    uint64_t v129 = "__nw_protocol_updated_path";
                    __int16 v88 = (char *)_os_log_send_and_compose_impl();

                    os_log_type_t v123 = OS_LOG_TYPE_ERROR;
                    char v122 = 0;
                    if (!__nwlog_fault(v88, &v123, &v122)) {
                      goto LABEL_195;
                    }
                    if (v123 == OS_LOG_TYPE_FAULT)
                    {
                      id v89 = __nwlog_obj();
                      os_log_type_t v103 = v123;
                      if (os_log_type_enabled(v89, v123))
                      {
                        *(_DWORD *)long long buf = 136446210;
                        uint64_t v129 = "__nw_protocol_updated_path";
                        _os_log_impl(&dword_1830D4000, v89, v103, "%{public}s called with null path", buf, 0xCu);
                      }
                    }
                    else if (v122)
                    {
                      uint64_t v109 = (char *)__nw_create_backtrace_string();
                      id v89 = __nwlog_obj();
                      os_log_type_t v110 = v123;
                      BOOL v111 = os_log_type_enabled(v89, v123);
                      if (v109)
                      {
                        if (v111)
                        {
                          *(_DWORD *)long long buf = 136446466;
                          uint64_t v129 = "__nw_protocol_updated_path";
                          __int16 v130 = 2082;
                          id_str = v109;
                          _os_log_impl(&dword_1830D4000, v89, v110, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v109);
                        if (!v88) {
                          goto LABEL_91;
                        }
                        goto LABEL_196;
                      }
                      if (v111)
                      {
                        *(_DWORD *)long long buf = 136446210;
                        uint64_t v129 = "__nw_protocol_updated_path";
                        _os_log_impl(&dword_1830D4000, v89, v110, "%{public}s called with null path, no backtrace", buf, 0xCu);
                      }
                    }
                    else
                    {
                      id v89 = __nwlog_obj();
                      os_log_type_t v115 = v123;
                      if (os_log_type_enabled(v89, v123))
                      {
                        *(_DWORD *)long long buf = 136446210;
                        uint64_t v129 = "__nw_protocol_updated_path";
                        _os_log_impl(&dword_1830D4000, v89, v115, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
                      }
                    }
                  }

                  goto LABEL_195;
                }
              }
              else
              {
              }
            }
            else if (nw_endpoint_handler_get_minimize_logging(v9))
            {
              if (nw_endpoint_handler_get_logging_disabled(v9)) {
                goto LABEL_118;
              }
              if (v11[191] != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              BOOL v45 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
              {
                id_string = nw_endpoint_handler_get_id_string(v119);
                __int16 v96 = nw_endpoint_handler_dry_run_string(v119);
                nw_endpoint_t v97 = nw_endpoint_handler_copy_endpoint(v119);
                logging_description = nw_endpoint_get_logging_description(v97);
                id v99 = nw_endpoint_handler_state_string(v119);
                uint64_t v100 = nw_endpoint_handler_mode_string(v119);
                id v101 = nw_endpoint_handler_copy_current_path(v119);
                *(_DWORD *)long long buf = 136447746;
                uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
                __int16 v130 = 2082;
                id_str = (char *)id_string;
                __int16 v132 = 2082;
                int v133 = v96;
                __int16 v134 = 2082;
                os_log_type_t v135 = (void *)logging_description;
                __int16 v136 = 2082;
                unint64_t v137 = v99;
                __int16 v138 = 2082;
                uint64_t v139 = v100;
                __int16 v140 = 2114;
                id v141 = v101;
                _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping adding extra interface option, no active flow registration", buf, 0x48u);
              }
            }
            else
            {
              os_log_type_t v55 = v9;
              BOOL v56 = (*((unsigned char *)v55 + 268) & 0x20) == 0;

              if (!v56)
              {
LABEL_118:

                goto LABEL_119;
              }
              if (v11[191] != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              BOOL v45 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
              {
                os_log_type_t v57 = v55;

                char v58 = v57;
                BOOL v59 = (*((unsigned char *)v55 + 268) & 1) == 0;

                if (v59) {
                  BOOL v60 = "";
                }
                else {
                  BOOL v60 = "dry-run ";
                }
                nw_endpoint_t v61 = nw_endpoint_handler_copy_endpoint(v58);
                os_log_type_t v62 = nw_endpoint_get_logging_description(v61);
                nw_endpoint_t v63 = v58;
                os_log_type_t v64 = v63;
                uint64_t v65 = v63[30];
                if (v65 > 5) {
                  id v66 = "unknown-state";
                }
                else {
                  id v66 = off_1E523FB38[v65];
                }

                nw_endpoint_t v73 = v64;
                os_log_type_t v74 = "path";
                switch(v119->mode)
                {
                  case 0:
                    break;
                  case 1:
                    os_log_type_t v74 = "resolver";
                    break;
                  case 2:
                    os_log_type_t v74 = nw_endpoint_flow_mode_string(v73[31]);
                    break;
                  case 3:
                    os_log_type_t v74 = "proxy";
                    break;
                  case 4:
                    os_log_type_t v74 = "fallback";
                    break;
                  case 5:
                    os_log_type_t v74 = "transform";
                    break;
                  default:
                    os_log_type_t v74 = "unknown-mode";
                    break;
                }
                uint64_t v118 = v74;

                uint64_t v75 = v73;
                os_unfair_lock_lock((os_unfair_lock_t)v75 + 28);
                id v76 = v75[8];
                os_unfair_lock_unlock((os_unfair_lock_t)v75 + 28);

                *(_DWORD *)long long buf = 136447746;
                uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
                __int16 v130 = 2082;
                id_str = v57->id_str;
                __int16 v132 = 2082;
                int v133 = v60;
                __int16 v134 = 2082;
                os_log_type_t v135 = (void *)v62;
                __int16 v136 = 2082;
                unint64_t v137 = v66;
                __int16 v138 = 2082;
                uint64_t v139 = v118;
                __int16 v140 = 2114;
                id v141 = v76;
                _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping adding extra interface option, no active flow registration", buf, 0x48u);
              }
            }
LABEL_117:

            goto LABEL_118;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          __int16 v14 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v79 = nw_endpoint_handler_get_id_string(v9);
            unint64_t v80 = nw_endpoint_handler_dry_run_string(v9);
            nw_endpoint_t v81 = nw_endpoint_handler_copy_endpoint(v9);
            uint64_t v82 = nw_endpoint_get_logging_description(v81);
            os_log_type_t v83 = nw_endpoint_handler_state_string(v119);
            char v84 = nw_endpoint_handler_mode_string(v119);
            id v85 = nw_endpoint_handler_copy_current_path(v119);
            *(_DWORD *)long long buf = 136448002;
            uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
            __int16 v130 = 2082;
            id_str = (char *)v79;
            __int16 v132 = 2082;
            int v133 = v80;
            __int16 v134 = 2082;
            os_log_type_t v135 = (void *)v82;
            __int16 v136 = 2082;
            unint64_t v137 = v83;
            __int16 v138 = 2082;
            uint64_t v139 = v84;
            __int16 v140 = 2114;
            id v141 = v85;
            __int16 v142 = 2112;
            id v143 = v8;
            _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding interface option details %@ to endpoint handler", buf, 0x52u);

            BOOL v11 = (void *)&unk_1EB267000;
          }
        }
        else
        {
          int v12 = v9;
          char v13 = *((unsigned char *)v12 + 268);

          if ((v13 & 0x20) != 0) {
            goto LABEL_55;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          __int16 v14 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            int v15 = v12;

            uint64_t v16 = v15;
            char v17 = *((unsigned char *)v12 + 268);

            if (v17) {
              os_log_type_t v18 = "dry-run ";
            }
            else {
              os_log_type_t v18 = "";
            }
            nw_endpoint_t v19 = nw_endpoint_handler_copy_endpoint(v16);
            uint64_t v117 = nw_endpoint_get_logging_description(v19);
            uint64_t v20 = v15->id_str;
            id v21 = v16;
            uint64_t v22 = v21;
            uint64_t v23 = v21[30];
            if (v23 > 5) {
              id v24 = "unknown-state";
            }
            else {
              id v24 = off_1E523FB38[v23];
            }

            os_log_type_t v35 = v22;
            __int16 v36 = v35;
            os_log_type_t v37 = "path";
            switch(v9->mode)
            {
              case 0:
                break;
              case 1:
                os_log_type_t v37 = "resolver";
                break;
              case 2:
                os_log_type_t v37 = nw_endpoint_flow_mode_string(v35[31]);
                break;
              case 3:
                os_log_type_t v37 = "proxy";
                break;
              case 4:
                os_log_type_t v37 = "fallback";
                break;
              case 5:
                os_log_type_t v37 = "transform";
                break;
              default:
                os_log_type_t v37 = "unknown-mode";
                break;
            }

            os_log_type_t v41 = v36;
            os_unfair_lock_lock((os_unfair_lock_t)v41 + 28);
            id v42 = v41[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v41 + 28);

            *(_DWORD *)long long buf = 136448002;
            uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
            __int16 v130 = 2082;
            id_str = v20;
            __int16 v132 = 2082;
            int v133 = v18;
            __int16 v134 = 2082;
            os_log_type_t v135 = (void *)v117;
            __int16 v136 = 2082;
            unint64_t v137 = v24;
            __int16 v138 = 2082;
            uint64_t v139 = v37;
            __int16 v140 = 2114;
            id v141 = v42;
            __int16 v142 = 2112;
            id v143 = v120;
            _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding interface option details %@ to endpoint handler", buf, 0x52u);

            BOOL v11 = &unk_1EB267000;
          }
        }

        int v9 = v119;
        id v8 = v120;
        goto LABEL_55;
      }
      uint64_t v77 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
      os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v124) = 0;
      if (__nwlog_fault(v27, type, &v124))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v28 = __nwlog_obj();
          os_log_type_t v78 = type[0];
          if (os_log_type_enabled(v28, type[0]))
          {
            *(_DWORD *)long long buf = 136446210;
            uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
            _os_log_impl(&dword_1830D4000, v28, v78, "%{public}s called with null interface_option_details", buf, 0xCu);
          }
        }
        else if ((_BYTE)v124)
        {
          __int16 v92 = (char *)__nw_create_backtrace_string();
          os_log_type_t v28 = __nwlog_obj();
          os_log_type_t v93 = type[0];
          BOOL v94 = os_log_type_enabled(v28, type[0]);
          if (v92)
          {
            if (v94)
            {
              *(_DWORD *)long long buf = 136446466;
              uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
              __int16 v130 = 2082;
              id_str = v92;
              _os_log_impl(&dword_1830D4000, v28, v93, "%{public}s called with null interface_option_details, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v92);
            if (!v27) {
              goto LABEL_119;
            }
            goto LABEL_110;
          }
          if (v94)
          {
            *(_DWORD *)long long buf = 136446210;
            uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
            _os_log_impl(&dword_1830D4000, v28, v93, "%{public}s called with null interface_option_details, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v28 = __nwlog_obj();
          os_log_type_t v108 = type[0];
          if (os_log_type_enabled(v28, type[0]))
          {
            *(_DWORD *)long long buf = 136446210;
            uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
            _os_log_impl(&dword_1830D4000, v28, v108, "%{public}s called with null interface_option_details, backtrace limit exceeded", buf, 0xCu);
          }
        }
LABEL_108:
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v25 = (id)gLogObj;
      if (mode > 5) {
        BOOL v26 = "unknown-mode";
      }
      else {
        BOOL v26 = off_1E523FB08[mode];
      }
      *(_DWORD *)long long buf = 136446722;
      uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
      __int16 v130 = 2082;
      id_str = (char *)v26;
      __int16 v132 = 2082;
      int v133 = "flow";
      os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v124) = 0;
      if (__nwlog_fault(v27, type, &v124))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v28 = (id)gLogObj;
          os_log_type_t v29 = type[0];
          if (os_log_type_enabled(v28, type[0]))
          {
            if (mode > 5) {
              os_log_type_t v30 = "unknown-mode";
            }
            else {
              os_log_type_t v30 = off_1E523FB08[mode];
            }
            *(_DWORD *)long long buf = 136446722;
            uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
            __int16 v130 = 2082;
            id_str = (char *)v30;
            __int16 v132 = 2082;
            int v133 = "flow";
            _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
          }
        }
        else if ((_BYTE)v124)
        {
          os_log_type_t v31 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v28 = (id)gLogObj;
          os_log_type_t v32 = type[0];
          BOOL v33 = os_log_type_enabled(v28, type[0]);
          if (v31)
          {
            if (v33)
            {
              if (mode > 5) {
                BOOL v34 = "unknown-mode";
              }
              else {
                BOOL v34 = off_1E523FB08[mode];
              }
              *(_DWORD *)long long buf = 136446978;
              uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
              __int16 v130 = 2082;
              id_str = (char *)v34;
              __int16 v132 = 2082;
              int v133 = "flow";
              __int16 v134 = 2082;
              os_log_type_t v135 = v31;
              _os_log_impl(&dword_1830D4000, v28, v32, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v31);
            if (!v27) {
              goto LABEL_119;
            }
            goto LABEL_110;
          }
          if (v33)
          {
            if (mode > 5) {
              int v40 = "unknown-mode";
            }
            else {
              int v40 = off_1E523FB08[mode];
            }
            *(_DWORD *)long long buf = 136446722;
            uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
            __int16 v130 = 2082;
            id_str = (char *)v40;
            __int16 v132 = 2082;
            int v133 = "flow";
            _os_log_impl(&dword_1830D4000, v28, v32, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v28 = (id)gLogObj;
          os_log_type_t v38 = type[0];
          if (os_log_type_enabled(v28, type[0]))
          {
            if (mode > 5) {
              os_log_type_t v39 = "unknown-mode";
            }
            else {
              os_log_type_t v39 = off_1E523FB08[mode];
            }
            *(_DWORD *)long long buf = 136446722;
            uint64_t v129 = "nw_endpoint_handler_add_extra_interface_option";
            __int16 v130 = 2082;
            id_str = (char *)v39;
            __int16 v132 = 2082;
            int v133 = "flow";
            _os_log_impl(&dword_1830D4000, v28, v38, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
          }
        }
        goto LABEL_108;
      }
    }
    if (!v27)
    {
LABEL_119:

      goto LABEL_120;
    }
LABEL_110:
    free(v27);
    goto LABEL_119;
  }
LABEL_120:
}

void sub_183802348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void __nw_connection_remove_extra_interface_option_block_invoke(uint64_t a1)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      nw_path_t v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        *(_DWORD *)long long buf = 136446466;
        unint64_t v137 = "nw_connection_remove_extra_interface_option_block_invoke";
        __int16 v138 = 1024;
        LODWORD(v139) = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection is not ready, ignore", buf, 0x12u);
      }
    }
    return;
  }
  uint64_t v129 = nw_endpoint_handler_copy_connected_flow_handler(*(void **)(v2 + 144));
  if (v129)
  {
    int v6 = *(void **)(a1 + 40);
    uint64_t v7 = v129;
    id v8 = v6;
    int v9 = v7;
    uint64_t mode = v9->mode;

    if (mode == 2)
    {
      if (v8)
      {
        id v128 = v8;
        BOOL v11 = nw_endpoint_handler_copy_flow(v9);
        uint64_t v12 = *((void *)v11 + 104);
        int minimize_logging = nw_endpoint_handler_get_minimize_logging(v9);
        if (!v12)
        {
          if (minimize_logging)
          {
            if (nw_endpoint_handler_get_logging_disabled(v9)) {
              goto LABEL_118;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v41 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_endpoint_handler_get_id_string(v9);
              id v101 = nw_endpoint_handler_dry_run_string(v9);
              nw_endpoint_t v102 = nw_endpoint_handler_copy_endpoint(v9);
              logging_description = nw_endpoint_get_logging_description(v102);
              BOOL v104 = nw_endpoint_handler_state_string(v9);
              uint64_t v105 = nw_endpoint_handler_mode_string(v9);
              id v106 = nw_endpoint_handler_copy_current_path(v9);
              *(_DWORD *)long long buf = 136448002;
              unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
              __int16 v138 = 2082;
              uint64_t v139 = (void *)id_string;
              __int16 v140 = 2082;
              id v141 = v101;
              __int16 v142 = 2082;
              id v143 = (void *)logging_description;
              __int16 v144 = 2082;
              BOOL v145 = v104;
              __int16 v146 = 2082;
              os_log_type_t v147 = v105;
              __int16 v148 = 2114;
              id v149 = v106;
              __int16 v150 = 2112;
              id v151 = v128;
              _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping remove extra interface option %@, no active flow registration", buf, 0x52u);
            }
          }
          else
          {
            os_log_type_t v39 = v9;
            char v40 = *((unsigned char *)v39 + 268);

            if ((v40 & 0x20) != 0)
            {
LABEL_118:

              os_log_type_t v28 = v128;
              goto LABEL_119;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v41 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
            {
              id v42 = v39;

              os_log_type_t v43 = v42;
              char v44 = *((unsigned char *)v39 + 268);

              if (v44) {
                BOOL v45 = "dry-run ";
              }
              else {
                BOOL v45 = "";
              }
              nw_endpoint_t v46 = nw_endpoint_handler_copy_endpoint(v43);
              id v47 = nw_endpoint_get_logging_description(v46);
              id_str = v42->id_str;
              BOOL v49 = v43;
              int v50 = v49;
              uint64_t v51 = v49[30];
              if (v51 > 5) {
                __int16 v52 = "unknown-state";
              }
              else {
                __int16 v52 = off_1E523FB38[v51];
              }
              os_log_type_t v123 = v52;

              nw_endpoint_t v61 = v50;
              os_log_type_t v62 = v61;
              nw_endpoint_t v63 = "path";
              switch(v9->mode)
              {
                case 0:
                  break;
                case 1:
                  nw_endpoint_t v63 = "resolver";
                  break;
                case 2:
                  nw_endpoint_t v63 = nw_endpoint_flow_mode_string(v61[31]);
                  break;
                case 3:
                  nw_endpoint_t v63 = "proxy";
                  break;
                case 4:
                  nw_endpoint_t v63 = "fallback";
                  break;
                case 5:
                  nw_endpoint_t v63 = "transform";
                  break;
                default:
                  nw_endpoint_t v63 = "unknown-mode";
                  break;
              }

              nw_endpoint_t v81 = v62;
              os_unfair_lock_lock((os_unfair_lock_t)v81 + 28);
              id v82 = v81[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v81 + 28);

              *(_DWORD *)long long buf = 136448002;
              unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
              __int16 v138 = 2082;
              uint64_t v139 = id_str;
              __int16 v140 = 2082;
              id v141 = v45;
              __int16 v142 = 2082;
              id v143 = (void *)v47;
              __int16 v144 = 2082;
              BOOL v145 = v123;
              __int16 v146 = 2082;
              os_log_type_t v147 = v63;
              __int16 v148 = 2114;
              id v149 = v82;
              __int16 v150 = 2112;
              id v151 = v128;
              _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping remove extra interface option %@, no active flow registration", buf, 0x52u);
            }
          }
          goto LABEL_117;
        }
        if (minimize_logging)
        {
          if (nw_endpoint_handler_get_logging_disabled(v9))
          {
LABEL_76:
            nw_path_flow_registration_remove_extra_interface_option(*((void **)v11 + 104), v8);
            os_log_type_t v41 = nw_path_flow_registration_copy_path(*((void **)v11 + 104));
            os_unfair_lock_lock((os_unfair_lock_t)v11 + 220);
            objc_storeStrong((id *)v11 + 2, v41);
            if ((*((unsigned char *)v11 + 33) & 4) != 0) {
              objc_storeStrong((id *)v11 + 1, v41);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)v11 + 220);
            id v66 = (const char *)*((void *)v11 + 51);
            id v67 = *((id *)v11 + 2);
            if (v66 && (uint64_t v68 = *((void *)v66 + 3)) != 0)
            {
              if (*(void *)(v68 + 168)) {
                BOOL v69 = v67 == 0;
              }
              else {
                BOOL v69 = 1;
              }
              int v70 = !v69;

              if (v70)
              {
                id v71 = *((id *)v11 + 2);
                os_log_type_t v72 = v71;
                nw_endpoint_t v73 = (void *)*((void *)v66 + 5);
                if (v73 == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v75 = *((void *)v66 + 11);
                  if (v75) {
                    *((void *)v66 + 11) = v75 + 1;
                  }
                  char v74 = -1;
                }
                else
                {
                  char v74 = 0;
                }
                *(void *)os_log_type_t type = v66;
                char v135 = v74;
                id v76 = (void *)*((void *)v11 + 52);
                if (v76 == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v78 = *((void *)v11 + 58);
                  if (v78) {
                    *((void *)v11 + 58) = v78 + 1;
                  }
                  char v77 = -1;
                }
                else
                {
                  char v77 = 0;
                }
                uint64_t v132 = (uint64_t)v11 + 376;
                char v133 = v77;
                if (v71)
                {
                  uint64_t v79 = *((void *)v66 + 3);
                  if (v79)
                  {
                    unint64_t v80 = *(void (**)(const char *, char *, id))(v79 + 168);
                    if (v80)
                    {
                      v80(v66, (char *)v11 + 376, v71);
LABEL_101:
                      if (v76 == &nw_protocol_ref_counted_handle) {
                        nw::release_if_needed<nw_protocol *>(&v132);
                      }
                      if (v73 == &nw_protocol_ref_counted_handle) {
                        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                      }

                      goto LABEL_117;
                    }
                  }
                  os_log_type_t v93 = __nwlog_obj();
                  BOOL v94 = (const char *)*((void *)v66 + 2);
                  *(_DWORD *)long long buf = 136446722;
                  unint64_t v137 = "__nw_protocol_updated_path";
                  if (!v94) {
                    BOOL v94 = "invalid";
                  }
                  __int16 v138 = 2082;
                  uint64_t v139 = (void *)v94;
                  __int16 v140 = 2048;
                  id v141 = v66;
                  BOOL v126 = (void *)_os_log_send_and_compose_impl();

                  os_log_type_t v131 = OS_LOG_TYPE_ERROR;
                  char v130 = 0;
                  if (!__nwlog_fault((const char *)v126, &v131, &v130))
                  {
LABEL_197:
                    if (v126) {
                      free(v126);
                    }
                    goto LABEL_101;
                  }
                  if (v131 == OS_LOG_TYPE_FAULT)
                  {
                    uint32_t v95 = __nwlog_obj();
                    os_log_type_t v96 = v131;
                    if (os_log_type_enabled(v95, v131))
                    {
                      nw_endpoint_t v97 = (const char *)*((void *)v66 + 2);
                      if (!v97) {
                        nw_endpoint_t v97 = "invalid";
                      }
                      *(_DWORD *)long long buf = 136446722;
                      unint64_t v137 = "__nw_protocol_updated_path";
                      __int16 v138 = 2082;
                      uint64_t v139 = (void *)v97;
                      __int16 v140 = 2048;
                      id v141 = v66;
                      _os_log_impl(&dword_1830D4000, v95, v96, "%{public}s protocol %{public}s (%p) has invalid updated_path callback", buf, 0x20u);
                    }
                  }
                  else
                  {
                    if (v130)
                    {
                      backtrace_string = (char *)__nw_create_backtrace_string();
                      os_log_type_t v110 = __nwlog_obj();
                      os_log_type_t v120 = v131;
                      BOOL v111 = os_log_type_enabled(v110, v131);
                      if (backtrace_string)
                      {
                        if (v111)
                        {
                          os_log_type_t v112 = (const char *)*((void *)v66 + 2);
                          if (!v112) {
                            os_log_type_t v112 = "invalid";
                          }
                          *(_DWORD *)long long buf = 136446978;
                          unint64_t v137 = "__nw_protocol_updated_path";
                          __int16 v138 = 2082;
                          uint64_t v139 = (void *)v112;
                          __int16 v140 = 2048;
                          id v141 = v66;
                          __int16 v142 = 2082;
                          id v143 = backtrace_string;
                          _os_log_impl(&dword_1830D4000, v110, v120, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
                        }

                        free(backtrace_string);
                      }
                      else
                      {
                        if (v111)
                        {
                          uint64_t v118 = (const char *)*((void *)v66 + 2);
                          if (!v118) {
                            uint64_t v118 = "invalid";
                          }
                          *(_DWORD *)long long buf = 136446722;
                          unint64_t v137 = "__nw_protocol_updated_path";
                          __int16 v138 = 2082;
                          uint64_t v139 = (void *)v118;
                          __int16 v140 = 2048;
                          id v141 = v66;
                          _os_log_impl(&dword_1830D4000, v110, v120, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace", buf, 0x20u);
                        }
                      }
                      goto LABEL_197;
                    }
                    uint32_t v95 = __nwlog_obj();
                    os_log_type_t v116 = v131;
                    if (os_log_type_enabled(v95, v131))
                    {
                      uint64_t v117 = (const char *)*((void *)v66 + 2);
                      if (!v117) {
                        uint64_t v117 = "invalid";
                      }
                      *(_DWORD *)long long buf = 136446722;
                      unint64_t v137 = "__nw_protocol_updated_path";
                      __int16 v138 = 2082;
                      uint64_t v139 = (void *)v117;
                      __int16 v140 = 2048;
                      id v141 = v66;
                      _os_log_impl(&dword_1830D4000, v95, v116, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, backtrace limit exceeded", buf, 0x20u);
                    }
                  }
                }
                else
                {
                  BOOL v107 = __nwlog_obj();
                  *(_DWORD *)long long buf = 136446210;
                  unint64_t v137 = "__nw_protocol_updated_path";
                  BOOL v126 = (void *)_os_log_send_and_compose_impl();

                  os_log_type_t v131 = OS_LOG_TYPE_ERROR;
                  char v130 = 0;
                  if (!__nwlog_fault((const char *)v126, &v131, &v130)) {
                    goto LABEL_197;
                  }
                  if (v131 == OS_LOG_TYPE_FAULT)
                  {
                    uint32_t v95 = __nwlog_obj();
                    os_log_type_t v108 = v131;
                    if (os_log_type_enabled(v95, v131))
                    {
                      *(_DWORD *)long long buf = 136446210;
                      unint64_t v137 = "__nw_protocol_updated_path";
                      _os_log_impl(&dword_1830D4000, v95, v108, "%{public}s called with null path", buf, 0xCu);
                    }
                  }
                  else if (v130)
                  {
                    uint64_t v114 = (char *)__nw_create_backtrace_string();
                    uint32_t v95 = __nwlog_obj();
                    os_log_type_t v121 = v131;
                    BOOL v115 = os_log_type_enabled(v95, v131);
                    if (v114)
                    {
                      if (v115)
                      {
                        *(_DWORD *)long long buf = 136446466;
                        unint64_t v137 = "__nw_protocol_updated_path";
                        __int16 v138 = 2082;
                        uint64_t v139 = v114;
                        _os_log_impl(&dword_1830D4000, v95, v121, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(v114);
                      goto LABEL_197;
                    }
                    if (v115)
                    {
                      *(_DWORD *)long long buf = 136446210;
                      unint64_t v137 = "__nw_protocol_updated_path";
                      _os_log_impl(&dword_1830D4000, v95, v121, "%{public}s called with null path, no backtrace", buf, 0xCu);
                    }
                  }
                  else
                  {
                    uint32_t v95 = __nwlog_obj();
                    os_log_type_t v119 = v131;
                    if (os_log_type_enabled(v95, v131))
                    {
                      *(_DWORD *)long long buf = 136446210;
                      unint64_t v137 = "__nw_protocol_updated_path";
                      _os_log_impl(&dword_1830D4000, v95, v119, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
                    }
                  }
                }

                goto LABEL_197;
              }
            }
            else
            {
            }
LABEL_117:

            goto LABEL_118;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v16 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            char v125 = nw_endpoint_handler_get_id_string(v9);
            BOOL v87 = nw_endpoint_handler_dry_run_string(v9);
            nw_endpoint_t v88 = nw_endpoint_handler_copy_endpoint(v9);
            id v89 = nw_endpoint_get_logging_description(v88);
            os_log_type_t v90 = nw_endpoint_handler_state_string(v9);
            uint64_t v91 = nw_endpoint_handler_mode_string(v9);
            id v92 = nw_endpoint_handler_copy_current_path(v9);
            *(_DWORD *)long long buf = 136448002;
            unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
            __int16 v138 = 2082;
            uint64_t v139 = (void *)v125;
            __int16 v140 = 2082;
            id v141 = v87;
            __int16 v142 = 2082;
            id v143 = (void *)v89;
            __int16 v144 = 2082;
            BOOL v145 = v90;
            __int16 v146 = 2082;
            os_log_type_t v147 = v91;
            __int16 v148 = 2114;
            id v149 = v92;
            __int16 v150 = 2112;
            id v151 = v128;
            _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Removing interface option details %@", buf, 0x52u);
          }
        }
        else
        {
          __int16 v14 = v9;
          char v15 = *((unsigned char *)v14 + 268);

          if ((v15 & 0x20) != 0) {
            goto LABEL_76;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v16 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            char v17 = v14;

            os_log_type_t v18 = v17;
            char v19 = *((unsigned char *)v14 + 268);

            if (v19) {
              uint64_t v20 = "dry-run ";
            }
            else {
              uint64_t v20 = "";
            }
            nw_endpoint_t v21 = nw_endpoint_handler_copy_endpoint(v18);
            uint64_t v22 = nw_endpoint_get_logging_description(v21);
            uint64_t v23 = v17->id_str;
            id v24 = v18;
            id v25 = v24;
            uint64_t v26 = v24[30];
            if (v26 > 5) {
              os_log_type_t v27 = "unknown-state";
            }
            else {
              os_log_type_t v27 = off_1E523FB38[v26];
            }
            char v122 = v27;

            os_log_type_t v55 = v25;
            BOOL v56 = v55;
            uint64_t v124 = v9;
            int v57 = v9->mode;
            char v58 = v22;
            BOOL v59 = "path";
            switch(v57)
            {
              case 0:
                break;
              case 1:
                BOOL v59 = "resolver";
                break;
              case 2:
                BOOL v59 = nw_endpoint_flow_mode_string(v55[31]);
                break;
              case 3:
                BOOL v59 = "proxy";
                break;
              case 4:
                BOOL v59 = "fallback";
                break;
              case 5:
                BOOL v59 = "transform";
                break;
              default:
                BOOL v59 = "unknown-mode";
                break;
            }

            os_log_type_t v64 = v56;
            os_unfair_lock_lock((os_unfair_lock_t)v64 + 28);
            id v65 = v64[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v64 + 28);

            *(_DWORD *)long long buf = 136448002;
            unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
            __int16 v138 = 2082;
            uint64_t v139 = v23;
            __int16 v140 = 2082;
            id v141 = v20;
            __int16 v142 = 2082;
            id v143 = (void *)v58;
            __int16 v144 = 2082;
            BOOL v145 = v122;
            __int16 v146 = 2082;
            os_log_type_t v147 = v59;
            __int16 v148 = 2114;
            id v149 = v65;
            __int16 v150 = 2112;
            id v151 = v128;
            _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Removing interface option details %@", buf, 0x52u);

            int v9 = v124;
          }
        }

        id v8 = v128;
        goto LABEL_76;
      }
      os_log_type_t v83 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
      char v84 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v132) = 0;
      if (__nwlog_fault(v84, type, &v132))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          id v85 = __nwlog_obj();
          os_log_type_t v86 = type[0];
          if (os_log_type_enabled(v85, type[0]))
          {
            *(_DWORD *)long long buf = 136446210;
            unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
            _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s called with null details", buf, 0xCu);
          }
        }
        else if ((_BYTE)v132)
        {
          __int16 v98 = (char *)__nw_create_backtrace_string();
          id v85 = __nwlog_obj();
          os_log_type_t v99 = type[0];
          BOOL v100 = os_log_type_enabled(v85, type[0]);
          if (v98)
          {
            if (v100)
            {
              *(_DWORD *)long long buf = 136446466;
              unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
              __int16 v138 = 2082;
              uint64_t v139 = v98;
              _os_log_impl(&dword_1830D4000, v85, v99, "%{public}s called with null details, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v98);
            goto LABEL_178;
          }
          if (v100)
          {
            *(_DWORD *)long long buf = 136446210;
            unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
            _os_log_impl(&dword_1830D4000, v85, v99, "%{public}s called with null details, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          id v85 = __nwlog_obj();
          os_log_type_t v113 = type[0];
          if (os_log_type_enabled(v85, type[0]))
          {
            *(_DWORD *)long long buf = 136446210;
            unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
            _os_log_impl(&dword_1830D4000, v85, v113, "%{public}s called with null details, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_178:
      if (v84) {
        free(v84);
      }
      os_log_type_t v28 = 0;
      goto LABEL_119;
    }
    os_log_type_t v28 = v8;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v29 = (id)gLogObj;
    if (mode > 5) {
      os_log_type_t v30 = "unknown-mode";
    }
    else {
      os_log_type_t v30 = off_1E523FB08[mode];
    }
    *(_DWORD *)long long buf = 136446722;
    unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
    __int16 v138 = 2082;
    uint64_t v139 = (void *)v30;
    __int16 v140 = 2082;
    id v141 = "flow";
    os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v132) = 0;
    if (__nwlog_fault(v31, type, &v132))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (id)gLogObj;
        os_log_type_t v33 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          if (mode > 5) {
            BOOL v34 = "unknown-mode";
          }
          else {
            BOOL v34 = off_1E523FB08[mode];
          }
          *(_DWORD *)long long buf = 136446722;
          unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
          __int16 v138 = 2082;
          uint64_t v139 = (void *)v34;
          __int16 v140 = 2082;
          id v141 = "flow";
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if ((_BYTE)v132)
      {
        os_log_type_t v35 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (id)gLogObj;
        os_log_type_t v36 = type[0];
        BOOL v37 = os_log_type_enabled(v32, type[0]);
        if (v35)
        {
          if (v37)
          {
            if (mode > 5) {
              os_log_type_t v38 = "unknown-mode";
            }
            else {
              os_log_type_t v38 = off_1E523FB08[mode];
            }
            *(_DWORD *)long long buf = 136446978;
            unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
            __int16 v138 = 2082;
            uint64_t v139 = (void *)v38;
            __int16 v140 = 2082;
            id v141 = "flow";
            __int16 v142 = 2082;
            id v143 = v35;
            _os_log_impl(&dword_1830D4000, v32, v36, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v35);
          if (!v31) {
            goto LABEL_119;
          }
          goto LABEL_110;
        }
        if (v37)
        {
          if (mode > 5) {
            BOOL v60 = "unknown-mode";
          }
          else {
            BOOL v60 = off_1E523FB08[mode];
          }
          *(_DWORD *)long long buf = 136446722;
          unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
          __int16 v138 = 2082;
          uint64_t v139 = (void *)v60;
          __int16 v140 = 2082;
          id v141 = "flow";
          _os_log_impl(&dword_1830D4000, v32, v36, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (id)gLogObj;
        os_log_type_t v53 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          if (mode > 5) {
            char v54 = "unknown-mode";
          }
          else {
            char v54 = off_1E523FB08[mode];
          }
          *(_DWORD *)long long buf = 136446722;
          unint64_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
          __int16 v138 = 2082;
          uint64_t v139 = (void *)v54;
          __int16 v140 = 2082;
          id v141 = "flow";
          _os_log_impl(&dword_1830D4000, v32, v53, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v31)
    {
LABEL_119:

      goto LABEL_120;
    }
LABEL_110:
    free(v31);
    goto LABEL_119;
  }
LABEL_120:
}

void sub_183803908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void nw_connection_remove_all_interface_options(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  nw_connection_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 2);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      nw_path_t v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = v2[112];
        *(_DWORD *)long long buf = 136446466;
        char v19 = "nw_connection_remove_all_interface_options";
        __int16 v20 = 1024;
        LODWORD(v21) = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u] Removing paths from connection", buf, 0x12u);
      }
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_connection_remove_all_interface_options_block_invoke;
    v14[3] = &unk_1E524BAA8;
    char v15 = v2;
    nw_connection_async_if_needed(v15, v14);

    goto LABEL_10;
  }
  int v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  char v19 = "nw_connection_remove_all_interface_options";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v19 = "nw_connection_remove_all_interface_options";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          char v19 = "nw_connection_remove_all_interface_options";
          __int16 v20 = 2082;
          nw_endpoint_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        char v19 = "nw_connection_remove_all_interface_options";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v19 = "nw_connection_remove_all_interface_options";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_27:
  if (v7) {
    free(v7);
  }
LABEL_10:
}

void sub_183803D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_connection_remove_all_interface_options_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v1 + 109) & 0x40) != 0)
  {
    int v6 = *(void **)(v1 + 144);
    nw_endpoint_handler_remove_all_interface_options(v6);
  }
  else
  {
    uint64_t v2 = *(void *)(v1 + 16);
    if (v2 && !nw_path_parameters_get_logging_disabled(*(void *)(v2 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      nw_path_t v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        int v7 = 136446466;
        id v8 = "nw_connection_remove_all_interface_options_block_invoke";
        __int16 v9 = 1024;
        int v10 = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection is not ready, ignore", (uint8_t *)&v7, 0x12u);
      }
    }
  }
}

void nw_connection_set_interface_use_callback(void *a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __int16 v14 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v35 = "nw_connection_set_interface_use_callback";
    char v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v15, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v35 = "nw_connection_set_interface_use_callback";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v16 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v35 = "nw_connection_set_interface_use_callback";
            __int16 v36 = 2082;
            BOOL v37 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v24)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v35 = "nw_connection_set_interface_use_callback";
          _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v16 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v35 = "nw_connection_set_interface_use_callback";
          _os_log_impl(&dword_1830D4000, v16, v28, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_40:
    if (v15) {
      free(v15);
    }
    goto LABEL_13;
  }
  uint64_t v5 = v3[2];
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = *((_DWORD *)v3 + 112);
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v35 = "nw_connection_set_interface_use_callback";
      __int16 v36 = 1024;
      LODWORD(v37) = v7;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [C%u] Setting interface use callback on connection", buf, 0x12u);
    }
  }
  if (v3[18])
  {
    id v8 = _Block_copy(v4);
    __int16 v9 = (void *)v3[64];
    v3[64] = v8;

    int v10 = (void *)v3[18];
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_set_interface_use_callback_block_invoke;
    aBlock[3] = &unk_1E523DC08;
    os_log_type_t v31 = v3;
    uint64_t v11 = v10;
    if (v11)
    {
      BOOL v12 = _Block_copy(aBlock);
      os_log_type_t v13 = (void *)v11[6];
      v11[6] = v12;

LABEL_12:
      goto LABEL_13;
    }
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v35 = "nw_endpoint_handler_set_migration_callback";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v19, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v35 = "nw_endpoint_handler_set_migration_callback";
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v32)
      {
        id v25 = (char *)__nw_create_backtrace_string();
        __int16 v20 = __nwlog_obj();
        os_log_type_t v26 = type;
        BOOL v27 = os_log_type_enabled(v20, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v35 = "nw_endpoint_handler_set_migration_callback";
            __int16 v36 = 2082;
            BOOL v37 = v25;
            _os_log_impl(&dword_1830D4000, v20, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v25);
          goto LABEL_48;
        }
        if (v27)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v35 = "nw_endpoint_handler_set_migration_callback";
          _os_log_impl(&dword_1830D4000, v20, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v20 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v35 = "nw_endpoint_handler_set_migration_callback";
          _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_48:
    if (v19) {
      free(v19);
    }
    goto LABEL_12;
  }
LABEL_13:
}

void __nw_connection_set_interface_use_callback_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      id v8 = v4 + 104;
      if (!v4) {
        id v8 = "(null)";
      }
      int v19 = 136446722;
      __int16 v20 = "nw_connection_set_interface_use_callback_block_invoke";
      __int16 v21 = 1024;
      int v22 = v7;
      __int16 v23 = 2080;
      BOOL v24 = v8;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [C%u] Got migration callback interface %s", (uint8_t *)&v19, 0x1Cu);
    }
  }
  BOOL v9 = nw_interface_shallow_compare(v4, *(void **)(*(void *)(a1 + 32) + 520));
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v9)
  {
    if (v10 && !nw_path_parameters_get_logging_disabled(*(void *)(v10 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v12 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        int v19 = 136446466;
        __int16 v20 = "nw_connection_set_interface_use_callback_block_invoke";
        __int16 v21 = 1024;
        int v22 = v12;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s [C%u] No change in AWDL usage", (uint8_t *)&v19, 0x12u);
      }
    }
  }
  else
  {
    if (v10 && !nw_path_parameters_get_logging_disabled(*(void *)(v10 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v13 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v15 = *(_DWORD *)(v14 + 448);
        uint64_t v16 = *(void *)(v14 + 520);
        if (v16) {
          os_log_type_t v17 = (const char *)(v16 + 104);
        }
        else {
          os_log_type_t v17 = "(null)";
        }
        os_log_type_t v18 = v4 + 104;
        if (!v4) {
          os_log_type_t v18 = "(null)";
        }
        int v19 = 136446978;
        __int16 v20 = "nw_connection_set_interface_use_callback_block_invoke";
        __int16 v21 = 1024;
        int v22 = v15;
        __int16 v23 = 2080;
        BOOL v24 = v17;
        __int16 v25 = 2080;
        os_log_type_t v26 = v18;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s [C%u] Changed from %s to %s", (uint8_t *)&v19, 0x26u);
      }
    }
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 512) + 16))();
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 520), a2);
    *(unsigned char *)(*(void *)(a1 + 32) + 109) |= 0x80u;
  }
}

void sub_183804804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_set_internet_fallback_endpoint(void *a1, void *a2)
{
  *(void *)&v24[13] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 2);
    if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v6 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v7 = *((_DWORD *)v3 + 112);
        *(_DWORD *)long long buf = 136446722;
        int v22 = "nw_connection_set_internet_fallback_endpoint";
        __int16 v23 = 1024;
        *(_DWORD *)BOOL v24 = v7;
        v24[2] = 2112;
        *(void *)&v24[3] = v4;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [C%u] Setting internet fallback endpoint %@", buf, 0x1Cu);
      }
    }
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_connection_set_internet_fallback_endpoint_block_invoke;
    v16[3] = &unk_1E524B9A0;
    id v17 = v3;
    id v18 = v4;
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 34);
    __nw_connection_set_internet_fallback_endpoint_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 34);

    goto LABEL_10;
  }
  id v8 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  int v22 = "nw_connection_set_internet_fallback_endpoint";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        int v22 = "nw_connection_set_internet_fallback_endpoint";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          int v22 = "nw_connection_set_internet_fallback_endpoint";
          __int16 v23 = 2082;
          *(void *)BOOL v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        int v22 = "nw_connection_set_internet_fallback_endpoint";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        int v22 = "nw_connection_set_internet_fallback_endpoint";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_27:
  if (v9) {
    free(v9);
  }
LABEL_10:
}

void __nw_connection_set_internet_fallback_endpoint_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  BOOL local_only = nw_parameters_get_local_only(*(nw_parameters_t *)(*(void *)(a1 + 32) + 16));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  if (local_only)
  {
    if (!v3 || nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104))) {
      return;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v4 = (id)gconnectionLogObj;
    int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
    *(_DWORD *)long long buf = 136446466;
    BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
    __int16 v46 = 1024;
    int v47 = v5;
    int v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v6, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v7 = (id)gconnectionLogObj;
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          int v9 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446466;
          BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
          __int16 v46 = 1024;
          int v47 = v9;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s [C%u] Connection is local only", buf, 0x12u);
        }
LABEL_83:

        goto LABEL_84;
      }
      if (!v42)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v7 = (id)gconnectionLogObj;
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v7, type))
        {
          int v34 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446466;
          BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
          __int16 v46 = 1024;
          int v47 = v34;
          _os_log_impl(&dword_1830D4000, v7, v33, "%{public}s [C%u] Connection is local only, backtrace limit exceeded", buf, 0x12u);
        }
        goto LABEL_83;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v7 = (id)gconnectionLogObj;
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          int v38 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446466;
          BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
          __int16 v46 = 1024;
          int v47 = v38;
          _os_log_impl(&dword_1830D4000, v7, v22, "%{public}s [C%u] Connection is local only, no backtrace", buf, 0x12u);
        }
        goto LABEL_83;
      }
      if (v23)
      {
        int v24 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        *(_DWORD *)long long buf = 136446722;
        BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
        __int16 v46 = 1024;
        int v47 = v24;
        __int16 v48 = 2082;
        BOOL v49 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v22, "%{public}s [C%u] Connection is local only, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      goto LABEL_71;
    }
LABEL_84:
    if (!v6) {
      return;
    }
    goto LABEL_85;
  }
  nw_multipath_service_t multipath_service = nw_parameters_get_multipath_service((nw_parameters_t)v3);
  os_log_type_t v11 = *(uint64_t **)(*(void *)(a1 + 32) + 16);
  if (multipath_service)
  {
    if (nw_parameters_get_server_mode(v11))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      if (*(void *)(a1 + 40) && !*(void *)(v12 + 56))
      {
        uint64_t v13 = *(void *)(v12 + 16);
        if (v13 && !nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v14 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            int v15 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
            *(_DWORD *)long long buf = 136446466;
            BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
            __int16 v46 = 1024;
            int v47 = v15;
            _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s [C%u] Starting server side candidate manager", buf, 0x12u);
          }
        }
        id v16 = nw_candidate_manager_create_with_connection(*(void **)(a1 + 32), 0);
        id v17 = *(void **)(*(void *)(a1 + 32) + 56);
        *(void *)(*(void *)(a1 + 32) + 56) = v16;

        uint64_t v12 = *(void *)(a1 + 32);
        if (!*(void *)(v12 + 56))
        {
          uint64_t v18 = *(void *)(v12 + 16);
          if (!v18 || nw_path_parameters_get_logging_disabled(*(void *)(v18 + 104))) {
            return;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          char v19 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            int v20 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
            *(_DWORD *)long long buf = 136446466;
            BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
            __int16 v46 = 1024;
            int v47 = v20;
            _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Failed to create candidate manager", buf, 0x12u);
          }
          goto LABEL_31;
        }
      }
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 32);
    }
    os_log_type_t v29 = *(void **)(v12 + 56);
    if (v29)
    {
      nw_candidate_manager_set_internet_fallback(v29, *(void **)(a1 + 40));
      return;
    }
    uint64_t v30 = *(void *)(v12 + 16);
    if (!v30 || nw_path_parameters_get_logging_disabled(*(void *)(v30 + 104))) {
      return;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    char v19 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v31 = *(char **)(a1 + 40);
      int v32 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446722;
      BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
      __int16 v46 = 1024;
      int v47 = v32;
      __int16 v48 = 2112;
      BOOL v49 = v31;
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s [C%u] No candidate manager present, can't set internet fallback %@", buf, 0x1Cu);
    }
LABEL_31:

    return;
  }
  if (!v11 || nw_path_parameters_get_logging_disabled(v11[13])) {
    return;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  id v25 = (id)gconnectionLogObj;
  int v26 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
  *(_DWORD *)long long buf = 136446466;
  BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
  __int16 v46 = 1024;
  int v47 = v26;
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v42 = 0;
  if (!__nwlog_fault(v6, &type, &v42)) {
    goto LABEL_84;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v7 = (id)gconnectionLogObj;
    os_log_type_t v27 = type;
    if (os_log_type_enabled(v7, type))
    {
      int v28 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
      __int16 v46 = 1024;
      int v47 = v28;
      _os_log_impl(&dword_1830D4000, v7, v27, "%{public}s [C%u] Connection does not support multi-path", buf, 0x12u);
    }
    goto LABEL_83;
  }
  if (!v42)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v7 = (id)gconnectionLogObj;
    os_log_type_t v39 = type;
    if (os_log_type_enabled(v7, type))
    {
      int v40 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
      __int16 v46 = 1024;
      int v47 = v40;
      _os_log_impl(&dword_1830D4000, v7, v39, "%{public}s [C%u] Connection does not support multi-path, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_83;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  int v7 = (id)gconnectionLogObj;
  os_log_type_t v35 = type;
  BOOL v36 = os_log_type_enabled(v7, type);
  if (!backtrace_string)
  {
    if (v36)
    {
      int v41 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
      __int16 v46 = 1024;
      int v47 = v41;
      _os_log_impl(&dword_1830D4000, v7, v35, "%{public}s [C%u] Connection does not support multi-path, no backtrace", buf, 0x12u);
    }
    goto LABEL_83;
  }
  if (v36)
  {
    int v37 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
    *(_DWORD *)long long buf = 136446722;
    BOOL v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
    __int16 v46 = 1024;
    int v47 = v37;
    __int16 v48 = 2082;
    BOOL v49 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v7, v35, "%{public}s [C%u] Connection does not support multi-path, dumping backtrace:%{public}s", buf, 0x1Cu);
  }
LABEL_71:

  free(backtrace_string);
  if (v6) {
LABEL_85:
  }
    free(v6);
}

void nw_connection_reset_traffic_class(void *a1, int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_reset_traffic_class_block_invoke;
    v13[3] = &unk_1E524A070;
    id v14 = v3;
    int v15 = a2;
    nw_connection_async_if_needed(v14, v13);

    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  char v19 = "nw_connection_reset_traffic_class";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v19 = "nw_connection_reset_traffic_class";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          char v19 = "nw_connection_reset_traffic_class";
          __int16 v20 = 2082;
          __int16 v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        char v19 = "nw_connection_reset_traffic_class";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v19 = "nw_connection_reset_traffic_class";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_18380580C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_connection_reset_traffic_class_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) != 0)
  {
    int v6 = *(void **)(v2 + 144);
    int v7 = *(_DWORD *)(a1 + 40);
    nw_endpoint_handler_reset_traffic_class(v6, v7);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        int v8 = 136446466;
        int v9 = "nw_connection_reset_traffic_class_block_invoke";
        __int16 v10 = 1024;
        int v11 = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection is not ready, ignore", (uint8_t *)&v8, 0x12u);
      }
    }
  }
}

void nw_connection_reset_expected_progress_target(void *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_reset_expected_progress_target_block_invoke;
    v13[3] = &unk_1E52491B0;
    id v14 = v3;
    uint64_t v15 = a2;
    nw_connection_async_if_needed(v14, v13);

    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  char v19 = "nw_connection_reset_expected_progress_target";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)long long buf = 136446210;
        char v19 = "nw_connection_reset_expected_progress_target";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = v17;
      BOOL v11 = os_log_type_enabled(v7, v17);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          char v19 = "nw_connection_reset_expected_progress_target";
          __int16 v20 = 2082;
          __int16 v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        char v19 = "nw_connection_reset_expected_progress_target";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)long long buf = 136446210;
        char v19 = "nw_connection_reset_expected_progress_target";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_183805C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __nw_connection_reset_expected_progress_target_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  id v3 = v2 + 34;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __nw_connection_reset_expected_progress_target_block_invoke_2;
  v6[3] = &unk_1E52491B0;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 40);
  int v7 = v4;
  uint64_t v8 = v5;
  os_unfair_lock_lock(v3);
  __nw_connection_reset_expected_progress_target_block_invoke_2((uint64_t)v6);
  os_unfair_lock_unlock(v3);
}

void __nw_connection_reset_expected_progress_target_block_invoke_2(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 80) == 3 && (*(unsigned char *)(v2 + 109) & 0x40) != 0)
  {
    *(void *)(v2 + 288) = 0;
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v8 = *(void **)(v7 + 144);
    nw_endpoint_handler_reset_expected_progress_target(v8, v6, (const unsigned __int8 *)(v7 + 452));
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        int v9 = 136446466;
        os_log_type_t v10 = "nw_connection_reset_expected_progress_target_block_invoke_2";
        __int16 v11 = 1024;
        int v12 = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection is not ready, pending progress target", (uint8_t *)&v9, 0x12u);
      }
    }
    *(void *)(*(void *)(a1 + 32) + 288) = *(void *)(a1 + 40);
    nw_endpoint_handler_reset_expected_progress_target(*(void **)(*(void *)(a1 + 32) + 144), *(void *)(a1 + 40), (const unsigned __int8 *)(*(void *)(a1 + 32) + 452));
  }
}

void nw_connection_decrement_estimated_bytes(void *a1, char a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v24 = "nw_connection_decrement_estimated_bytes";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        int v24 = "nw_connection_decrement_estimated_bytes";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446466;
          int v24 = "nw_connection_decrement_estimated_bytes";
          __int16 v25 = 2082;
          int v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446210;
        int v24 = "nw_connection_decrement_estimated_bytes";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        int v24 = "nw_connection_decrement_estimated_bytes";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a3)
  {
    nw_connection_modify_estimated_bytes(v5, a2, 0, a3);
    goto LABEL_4;
  }
  __int16 v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  int v24 = "nw_connection_decrement_estimated_bytes";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)long long buf = 136446210;
      int v24 = "nw_connection_decrement_estimated_bytes";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null estimated_bytes", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    int v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)long long buf = 136446210;
      int v24 = "nw_connection_decrement_estimated_bytes";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null estimated_bytes, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  char v16 = (char *)__nw_create_backtrace_string();
  int v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)long long buf = 136446210;
      int v24 = "nw_connection_decrement_estimated_bytes";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null estimated_bytes, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)long long buf = 136446466;
    int v24 = "nw_connection_decrement_estimated_bytes";
    __int16 v25 = 2082;
    int v26 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null estimated_bytes, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_18380636C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_inject_up(void *a1, int a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    if (a3)
    {
      long long v7 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)long long buf = *(_OWORD *)a3;
      *(_OWORD *)&buf[16] = v7;
      uint64_t v8 = *(void *)(a3 + 32);
    }
    else
    {
      uint64_t v8 = 0;
      memset(buf, 0, 32);
    }
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    long long v21 = *(_OWORD *)buf;
    long long v22 = *(_OWORD *)&buf[16];
    v19[2] = __nw_connection_inject_up_block_invoke;
    v19[3] = &unk_1E523DC30;
    BOOL v25 = a3 != 0;
    uint64_t v23 = v8;
    int v24 = a2;
    id v20 = v5;
    nw_connection_async_if_needed(v20, v19);

    goto LABEL_6;
  }
  int v9 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_inject_up";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_inject_up";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_inject_up";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_inject_up";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_inject_up";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v10) {
    free(v10);
  }
LABEL_6:
}

void sub_1838066A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __nw_connection_inject_up_block_invoke(uint64_t a1)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(a1 + 84);
  if (*(unsigned char *)(a1 + 84)) {
    uint64_t v3 = (void *)(a1 + 40);
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = *(_DWORD *)(a1 + 80);
  if (v4 == 3)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    char v11 = *(unsigned char *)(v10 + 109);
    uint64_t v12 = *(void *)(v10 + 16);
    if ((v11 & 0x40) != 0)
    {
      if (v12 && !nw_path_parameters_get_logging_disabled(*(void *)(v12 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v55 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
        {
          int v56 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446466;
          nw_endpoint_t v97 = "nw_connection_inject_up_block_invoke";
          __int16 v98 = 1024;
          *(_DWORD *)os_log_type_t v99 = v56;
          _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] injecting timed out", buf, 0x12u);
        }
      }
      nw_endpoint_handler_inject_disconnect_error(*(void **)(*(void *)(a1 + 32) + 144), v3, 60);
    }
    else if (v12 && !nw_path_parameters_get_logging_disabled(*(void *)(v12 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        *(_DWORD *)long long buf = 136446466;
        nw_endpoint_t v97 = "nw_connection_inject_up_block_invoke";
        __int16 v98 = 1024;
        *(_DWORD *)os_log_type_t v99 = v13;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [C%u] timed out failed, not connected", buf, 0x12u);
      }
      goto LABEL_30;
    }
    return;
  }
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      char v6 = *(unsigned char *)(v5 + 109);
      uint64_t v7 = *(void *)(v5 + 16);
      if ((v6 & 0x40) == 0)
      {
        if (v7 && !nw_path_parameters_get_logging_disabled(*(void *)(v7 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v8 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            int v9 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
            *(_DWORD *)long long buf = 136446466;
            nw_endpoint_t v97 = "nw_connection_inject_up_block_invoke";
            __int16 v98 = 1024;
            *(_DWORD *)os_log_type_t v99 = v9;
            _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [C%u] read close failed, not connected", buf, 0x12u);
          }
LABEL_30:

          return;
        }
        return;
      }
      if (v7 && !nw_path_parameters_get_logging_disabled(*(void *)(v7 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v24 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          int v25 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446466;
          nw_endpoint_t v97 = "nw_connection_inject_up_block_invoke";
          __int16 v98 = 1024;
          *(_DWORD *)os_log_type_t v99 = v25;
          _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] injecting read close", buf, 0x12u);
        }
      }
      id v26 = *(id *)(*(void *)(a1 + 32) + 144);
      uint64_t v27 = v26;
      if (v26)
      {
        int v28 = (NWConcrete_nw_endpoint_handler *)v26;
        uint64_t mode = v28->mode;

        if (mode == 2)
        {
          uint64_t v30 = nw_endpoint_handler_copy_flow(v28);
          os_log_type_t v31 = v30;
          if (v30)
          {
            if ((*((unsigned char *)v30 + 33) & 4) != 0 && (*((_WORD *)v30 + 354) & 0x10) == 0)
            {
              int v32 = (char *)v30 + 376;
              if (v2)
              {
                os_log_type_t v33 = (char *)*((void *)v31 + 51);
                if (!v33)
                {
LABEL_64:
                  BOOL v45 = v28;
                  BOOL v46 = (*((unsigned char *)v45 + 268) & 0x20) == 0;

                  if (v46)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    int v47 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
                    {
                      id_string = nw_endpoint_handler_get_id_string(v45);
                      BOOL v49 = nw_endpoint_handler_dry_run_string(v45);
                      uint64_t v50 = id_string;
                      nw_endpoint_t v93 = nw_endpoint_handler_copy_endpoint(v45);
                      logging_description = nw_endpoint_get_logging_description(v93);
                      __int16 v52 = nw_endpoint_handler_state_string(v45);
                      os_log_type_t v53 = nw_endpoint_handler_mode_string(v45);
                      id v54 = nw_endpoint_handler_copy_current_path(v45);
                      *(_DWORD *)long long buf = 136447746;
                      nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
                      __int16 v98 = 2082;
                      *(void *)os_log_type_t v99 = v50;
                      *(_WORD *)&v99[8] = 2082;
                      *(void *)&v99[10] = v49;
                      __int16 v100 = 2082;
                      id v101 = (void *)logging_description;
                      __int16 v102 = 2082;
                      os_log_type_t v103 = v52;
                      __int16 v104 = 2082;
                      uint64_t v105 = v53;
                      __int16 v106 = 2114;
                      id v107 = v54;
                      _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Inject read-closed failed, could not locate protocol", buf, 0x48u);
                    }
                  }
                  goto LABEL_148;
                }
                while (1)
                {
                  int v34 = v33;
                  os_log_type_t v35 = (uint64_t *)*((void *)v33 + 2);
                  uint64_t v36 = *v35;
                  uint64_t v37 = v35[1];
                  uint64_t v38 = v35[2];
                  uint64_t v39 = v35[3];
                  uint64_t v40 = v35[4];
                  BOOL v41 = *v3 == v36 && v3[1] == v37;
                  BOOL v42 = v41 && v3[2] == v38;
                  BOOL v43 = v42 && v3[3] == v39;
                  if (v43 && v3[4] == v40) {
                    break;
                  }
                  os_log_type_t v33 = (char *)*((void *)v34 + 4);
                  int v32 = v34;
                  if (!v33) {
                    goto LABEL_64;
                  }
                }
              }
              (*(void (**)(void))(*((void *)v32 + 3) + 184))();
            }
LABEL_148:

LABEL_154:
            return;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v76 = (id)gLogObj;
          *(_DWORD *)long long buf = 136446210;
          nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
          char v77 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v94 = 0;
          if (__nwlog_fault(v77, &type, &v94))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v78 = (id)gLogObj;
              os_log_type_t v79 = type;
              if (os_log_type_enabled(v78, type))
              {
                *(_DWORD *)long long buf = 136446210;
                nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
                _os_log_impl(&dword_1830D4000, v78, v79, "%{public}s No endpoint flow", buf, 0xCu);
              }
            }
            else if (v94)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v78 = (id)gLogObj;
              os_log_type_t v83 = type;
              BOOL v84 = os_log_type_enabled(v78, type);
              if (backtrace_string)
              {
                if (v84)
                {
                  *(_DWORD *)long long buf = 136446466;
                  nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
                  __int16 v98 = 2082;
                  *(void *)os_log_type_t v99 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v78, v83, "%{public}s No endpoint flow, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(backtrace_string);
                goto LABEL_146;
              }
              if (v84)
              {
                *(_DWORD *)long long buf = 136446210;
                nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
                _os_log_impl(&dword_1830D4000, v78, v83, "%{public}s No endpoint flow, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v78 = (id)gLogObj;
              os_log_type_t v86 = type;
              if (os_log_type_enabled(v78, type))
              {
                *(_DWORD *)long long buf = 136446210;
                nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
                _os_log_impl(&dword_1830D4000, v78, v86, "%{public}s No endpoint flow, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_146:
          if (v77) {
            free(v77);
          }
          goto LABEL_148;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v63 = (id)gLogObj;
        if (mode > 5) {
          os_log_type_t v64 = "unknown-mode";
        }
        else {
          os_log_type_t v64 = off_1E523FB08[mode];
        }
        *(_DWORD *)long long buf = 136446722;
        nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
        __int16 v98 = 2082;
        *(void *)os_log_type_t v99 = v64;
        *(_WORD *)&v99[8] = 2082;
        *(void *)&v99[10] = "flow";
        id v67 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v94 = 0;
        if (!__nwlog_fault(v67, &type, &v94)) {
          goto LABEL_152;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v68 = (id)gLogObj;
          os_log_type_t v69 = type;
          if (os_log_type_enabled(v68, type))
          {
            if (mode > 5) {
              int v70 = "unknown-mode";
            }
            else {
              int v70 = off_1E523FB08[mode];
            }
            *(_DWORD *)long long buf = 136446722;
            nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
            __int16 v98 = 2082;
            *(void *)os_log_type_t v99 = v70;
            *(_WORD *)&v99[8] = 2082;
            *(void *)&v99[10] = "flow";
            _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
          }
        }
        else if (v94)
        {
          id v71 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v68 = (id)gLogObj;
          os_log_type_t v72 = type;
          BOOL v73 = os_log_type_enabled(v68, type);
          if (v71)
          {
            if (v73)
            {
              if (mode > 5) {
                char v74 = "unknown-mode";
              }
              else {
                char v74 = off_1E523FB08[mode];
              }
              *(_DWORD *)long long buf = 136446978;
              nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
              __int16 v98 = 2082;
              *(void *)os_log_type_t v99 = v74;
              *(_WORD *)&v99[8] = 2082;
              *(void *)&v99[10] = "flow";
              __int16 v100 = 2082;
              id v101 = v71;
              _os_log_impl(&dword_1830D4000, v68, v72, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v71);
            if (!v67) {
              goto LABEL_154;
            }
            goto LABEL_153;
          }
          if (v73)
          {
            if (mode > 5) {
              id v85 = "unknown-mode";
            }
            else {
              id v85 = off_1E523FB08[mode];
            }
            *(_DWORD *)long long buf = 136446722;
            nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
            __int16 v98 = 2082;
            *(void *)os_log_type_t v99 = v85;
            *(_WORD *)&v99[8] = 2082;
            *(void *)&v99[10] = "flow";
            _os_log_impl(&dword_1830D4000, v68, v72, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v68 = (id)gLogObj;
          os_log_type_t v80 = type;
          if (os_log_type_enabled(v68, type))
          {
            if (mode > 5) {
              nw_endpoint_t v81 = "unknown-mode";
            }
            else {
              nw_endpoint_t v81 = off_1E523FB08[mode];
            }
            *(_DWORD *)long long buf = 136446722;
            nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
            __int16 v98 = 2082;
            *(void *)os_log_type_t v99 = v81;
            *(_WORD *)&v99[8] = 2082;
            *(void *)&v99[10] = "flow";
            _os_log_impl(&dword_1830D4000, v68, v80, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
          }
        }
        goto LABEL_151;
      }
      BOOL v87 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
      id v67 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v94 = 0;
      if (__nwlog_fault(v67, &type, &v94))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v68 = __nwlog_obj();
          os_log_type_t v88 = type;
          if (os_log_type_enabled(v68, type))
          {
            *(_DWORD *)long long buf = 136446210;
            nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
            _os_log_impl(&dword_1830D4000, v68, v88, "%{public}s called with null handler", buf, 0xCu);
          }
LABEL_151:

          goto LABEL_152;
        }
        if (!v94)
        {
          uint64_t v68 = __nwlog_obj();
          os_log_type_t v92 = type;
          if (os_log_type_enabled(v68, type))
          {
            *(_DWORD *)long long buf = 136446210;
            nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
            _os_log_impl(&dword_1830D4000, v68, v92, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_151;
        }
        id v89 = (char *)__nw_create_backtrace_string();
        uint64_t v68 = __nwlog_obj();
        os_log_type_t v90 = type;
        BOOL v91 = os_log_type_enabled(v68, type);
        if (!v89)
        {
          if (v91)
          {
            *(_DWORD *)long long buf = 136446210;
            nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
            _os_log_impl(&dword_1830D4000, v68, v90, "%{public}s called with null handler, no backtrace", buf, 0xCu);
          }
          goto LABEL_151;
        }
        if (v91)
        {
          *(_DWORD *)long long buf = 136446466;
          nw_endpoint_t v97 = "nw_endpoint_handler_inject_read_closed";
          __int16 v98 = 2082;
          *(void *)os_log_type_t v99 = v89;
          _os_log_impl(&dword_1830D4000, v68, v90, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v89);
      }
LABEL_152:
      if (!v67) {
        goto LABEL_154;
      }
LABEL_153:
      free(v67);
      goto LABEL_154;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v18 = (id)gLogObj;
    int v19 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)long long buf = 136446466;
    nw_endpoint_t v97 = "nw_connection_inject_up_block_invoke";
    __int16 v98 = 1024;
    *(_DWORD *)os_log_type_t v99 = v19;
    id v20 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v94 = 0;
    if (__nwlog_fault((const char *)v20, &type, &v94))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        long long v21 = (id)gLogObj;
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          int v23 = *(_DWORD *)(a1 + 80);
          *(_DWORD *)long long buf = 136446466;
          nw_endpoint_t v97 = "nw_connection_inject_up_block_invoke";
          __int16 v98 = 1024;
          *(_DWORD *)os_log_type_t v99 = v23;
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s Unhandled failure type: %d", buf, 0x12u);
        }
      }
      else if (v94)
      {
        BOOL v59 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        long long v21 = (id)gLogObj;
        os_log_type_t v60 = type;
        BOOL v61 = os_log_type_enabled(v21, type);
        if (v59)
        {
          if (v61)
          {
            int v62 = *(_DWORD *)(a1 + 80);
            *(_DWORD *)long long buf = 136446722;
            nw_endpoint_t v97 = "nw_connection_inject_up_block_invoke";
            __int16 v98 = 1024;
            *(_DWORD *)os_log_type_t v99 = v62;
            *(_WORD *)&v99[4] = 2082;
            *(void *)&v99[6] = v59;
            _os_log_impl(&dword_1830D4000, v21, v60, "%{public}s Unhandled failure type: %d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v59);
          if (!v20) {
            return;
          }
LABEL_112:
          free(v20);
          return;
        }
        if (v61)
        {
          int v75 = *(_DWORD *)(a1 + 80);
          *(_DWORD *)long long buf = 136446466;
          nw_endpoint_t v97 = "nw_connection_inject_up_block_invoke";
          __int16 v98 = 1024;
          *(_DWORD *)os_log_type_t v99 = v75;
          _os_log_impl(&dword_1830D4000, v21, v60, "%{public}s Unhandled failure type: %d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        long long v21 = (id)gLogObj;
        os_log_type_t v65 = type;
        if (os_log_type_enabled(v21, type))
        {
          int v66 = *(_DWORD *)(a1 + 80);
          *(_DWORD *)long long buf = 136446466;
          nw_endpoint_t v97 = "nw_connection_inject_up_block_invoke";
          __int16 v98 = 1024;
          *(_DWORD *)os_log_type_t v99 = v66;
          _os_log_impl(&dword_1830D4000, v21, v65, "%{public}s Unhandled failure type: %d, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v20) {
      return;
    }
    goto LABEL_112;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(unsigned char *)(v14 + 109);
  uint64_t v16 = *(void *)(v14 + 16);
  if ((v15 & 0x40) != 0)
  {
    if (v16 && !nw_path_parameters_get_logging_disabled(*(void *)(v16 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v57 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        int v58 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        *(_DWORD *)long long buf = 136446466;
        nw_endpoint_t v97 = "nw_connection_inject_up_block_invoke";
        __int16 v98 = 1024;
        *(_DWORD *)os_log_type_t v99 = v58;
        _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] injecting reset", buf, 0x12u);
      }
    }
    nw_endpoint_handler_inject_disconnect_error(*(void **)(*(void *)(a1 + 32) + 144), v3, 54);
  }
  else if (v16 && !nw_path_parameters_get_logging_disabled(*(void *)(v16 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v8 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v17 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      nw_endpoint_t v97 = "nw_connection_inject_up_block_invoke";
      __int16 v98 = 1024;
      *(_DWORD *)os_log_type_t v99 = v17;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [C%u] reset failed, not connected", buf, 0x12u);
    }
    goto LABEL_30;
  }
}

void sub_1838078AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL nw_connection_read_multiple(void *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1;
  id v8 = a4;
  int v9 = v8;
  if (v7)
  {
    if (v8)
    {
      *(void *)int v62 = 0;
      *(void *)&v62[8] = v62;
      *(void *)&v62[16] = 0x2020000000;
      char v63 = 1;
      v54[0] = MEMORY[0x1E4F143A8];
      v54[1] = 3221225472;
      v54[2] = __nw_connection_read_multiple_block_invoke;
      v54[3] = &unk_1E524B978;
      int v56 = v62;
      uint64_t v10 = v7;
      os_log_type_t v55 = v10;
      os_unfair_lock_lock(v7 + 34);
      __nw_connection_read_multiple_block_invoke((uint64_t)v54);
      os_unfair_lock_unlock(v7 + 34);
      if (*(unsigned char *)(*(void *)&v62[8] + 24))
      {
        v51[0] = MEMORY[0x1E4F143A8];
        v51[1] = 3221225472;
        v51[2] = __nw_connection_read_multiple_block_invoke_32;
        v51[3] = &unk_1E523DC58;
        id v52 = v9;
        multiple = nw_read_request_create_multiple(a2, a3, v10, v51);
        BOOL v12 = multiple != 0;
        if (multiple)
        {
          nw_connection_add_read_request(v10, multiple);
LABEL_57:

          goto LABEL_58;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v20 = (id)gLogObj;
        *(_DWORD *)long long buf = 136446210;
        BOOL v59 = "nw_connection_read_multiple";
        long long v21 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v53 = 0;
        if (__nwlog_fault(v21, &type, &v53))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v22 = (id)gLogObj;
            os_log_type_t v23 = type;
            if (os_log_type_enabled(v22, type))
            {
              *(_DWORD *)long long buf = 136446210;
              BOOL v59 = "nw_connection_read_multiple";
              _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s nw_read_request_create_multiple failed", buf, 0xCu);
            }
          }
          else if (v53)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v22 = (id)gLogObj;
            os_log_type_t v30 = type;
            BOOL v31 = os_log_type_enabled(v22, type);
            if (backtrace_string)
            {
              if (v31)
              {
                *(_DWORD *)long long buf = 136446466;
                BOOL v59 = "nw_connection_read_multiple";
                __int16 v60 = 2082;
                v61[0] = backtrace_string;
                _os_log_impl(&dword_1830D4000, v22, v30, "%{public}s nw_read_request_create_multiple failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              if (!v21) {
                goto LABEL_57;
              }
              goto LABEL_56;
            }
            if (v31)
            {
              *(_DWORD *)long long buf = 136446210;
              BOOL v59 = "nw_connection_read_multiple";
              _os_log_impl(&dword_1830D4000, v22, v30, "%{public}s nw_read_request_create_multiple failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v22 = (id)gLogObj;
            os_log_type_t v34 = type;
            if (os_log_type_enabled(v22, type))
            {
              *(_DWORD *)long long buf = 136446210;
              BOOL v59 = "nw_connection_read_multiple";
              _os_log_impl(&dword_1830D4000, v22, v34, "%{public}s nw_read_request_create_multiple failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
        if (!v21) {
          goto LABEL_57;
        }
LABEL_56:
        free(v21);
        goto LABEL_57;
      }
      uint64_t v13 = *(void *)&v10[4]._os_unfair_lock_opaque;
      if (v13 && !nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v14 = (id)gconnectionLogObj;
        uint32_t os_unfair_lock_opaque = v10[112]._os_unfair_lock_opaque;
        *(_DWORD *)long long buf = 136446466;
        BOOL v59 = "nw_connection_read_multiple";
        __int16 v60 = 1024;
        LODWORD(v61[0]) = os_unfair_lock_opaque;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v53 = 0;
        if (__nwlog_fault(v16, &type, &v53))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v17 = (id)gconnectionLogObj;
            os_log_type_t v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              uint32_t v19 = v10[112]._os_unfair_lock_opaque;
              *(_DWORD *)long long buf = 136446466;
              BOOL v59 = "nw_connection_read_multiple";
              __int16 v60 = 1024;
              LODWORD(v61[0]) = v19;
              _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s [C%u] client_queue is nil", buf, 0x12u);
            }
          }
          else if (v53)
          {
            int v24 = __nw_create_backtrace_string();
            if (v24)
            {
              int v25 = (char *)v24;
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              id v26 = (id)gconnectionLogObj;
              os_log_type_t v27 = type;
              if (os_log_type_enabled(v26, type))
              {
                uint32_t v28 = v10[112]._os_unfair_lock_opaque;
                *(_DWORD *)long long buf = 136446722;
                BOOL v59 = "nw_connection_read_multiple";
                __int16 v60 = 1024;
                LODWORD(v61[0]) = v28;
                WORD2(v61[0]) = 2082;
                *(void *)((char *)v61 + 6) = v25;
                _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s [C%u] client_queue is nil, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v25);
              if (!v16) {
                goto LABEL_51;
              }
              goto LABEL_50;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v17 = (id)gconnectionLogObj;
            os_log_type_t v35 = type;
            if (os_log_type_enabled(v17, type))
            {
              uint32_t v36 = v10[112]._os_unfair_lock_opaque;
              *(_DWORD *)long long buf = 136446466;
              BOOL v59 = "nw_connection_read_multiple";
              __int16 v60 = 1024;
              LODWORD(v61[0]) = v36;
              _os_log_impl(&dword_1830D4000, v17, v35, "%{public}s [C%u] client_queue is nil, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v17 = (id)gconnectionLogObj;
            os_log_type_t v32 = type;
            if (os_log_type_enabled(v17, type))
            {
              uint32_t v33 = v10[112]._os_unfair_lock_opaque;
              *(_DWORD *)long long buf = 136446466;
              BOOL v59 = "nw_connection_read_multiple";
              __int16 v60 = 1024;
              LODWORD(v61[0]) = v33;
              _os_log_impl(&dword_1830D4000, v17, v32, "%{public}s [C%u] client_queue is nil, backtrace limit exceeded", buf, 0x12u);
            }
          }
        }
        if (v16) {
LABEL_50:
        }
          free(v16);
      }
LABEL_51:
      BOOL v12 = 0;
LABEL_58:

      _Block_object_dispose(v62, 8);
      goto LABEL_59;
    }
    BOOL v42 = __nwlog_obj();
    *(_DWORD *)int v62 = 136446210;
    *(void *)&v62[4] = "nw_connection_read_multiple";
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v39, buf, &type))
    {
      if (buf[0] == 17)
      {
        uint64_t v40 = __nwlog_obj();
        os_log_type_t v43 = buf[0];
        if (os_log_type_enabled(v40, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)int v62 = 136446210;
          *(void *)&v62[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_1830D4000, v40, v43, "%{public}s called with null handler", v62, 0xCu);
        }
LABEL_91:

        goto LABEL_92;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        uint64_t v40 = __nwlog_obj();
        os_log_type_t v50 = buf[0];
        if (os_log_type_enabled(v40, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)int v62 = 136446210;
          *(void *)&v62[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_1830D4000, v40, v50, "%{public}s called with null handler, backtrace limit exceeded", v62, 0xCu);
        }
        goto LABEL_91;
      }
      char v44 = (char *)__nw_create_backtrace_string();
      uint64_t v40 = __nwlog_obj();
      os_log_type_t v47 = buf[0];
      BOOL v48 = os_log_type_enabled(v40, (os_log_type_t)buf[0]);
      if (!v44)
      {
        if (v48)
        {
          *(_DWORD *)int v62 = 136446210;
          *(void *)&v62[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_1830D4000, v40, v47, "%{public}s called with null handler, no backtrace", v62, 0xCu);
        }
        goto LABEL_91;
      }
      if (v48)
      {
        *(_DWORD *)int v62 = 136446466;
        *(void *)&v62[4] = "nw_connection_read_multiple";
        *(_WORD *)&v62[12] = 2082;
        *(void *)&v62[14] = v44;
        _os_log_impl(&dword_1830D4000, v40, v47, "%{public}s called with null handler, dumping backtrace:%{public}s", v62, 0x16u);
      }
      goto LABEL_79;
    }
  }
  else
  {
    uint64_t v38 = __nwlog_obj();
    *(_DWORD *)int v62 = 136446210;
    *(void *)&v62[4] = "nw_connection_read_multiple";
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v39, buf, &type))
    {
      if (buf[0] == 17)
      {
        uint64_t v40 = __nwlog_obj();
        os_log_type_t v41 = buf[0];
        if (os_log_type_enabled(v40, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)int v62 = 136446210;
          *(void *)&v62[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s called with null connection", v62, 0xCu);
        }
        goto LABEL_91;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        uint64_t v40 = __nwlog_obj();
        os_log_type_t v49 = buf[0];
        if (os_log_type_enabled(v40, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)int v62 = 136446210;
          *(void *)&v62[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_1830D4000, v40, v49, "%{public}s called with null connection, backtrace limit exceeded", v62, 0xCu);
        }
        goto LABEL_91;
      }
      char v44 = (char *)__nw_create_backtrace_string();
      uint64_t v40 = __nwlog_obj();
      os_log_type_t v45 = buf[0];
      BOOL v46 = os_log_type_enabled(v40, (os_log_type_t)buf[0]);
      if (!v44)
      {
        if (v46)
        {
          *(_DWORD *)int v62 = 136446210;
          *(void *)&v62[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_1830D4000, v40, v45, "%{public}s called with null connection, no backtrace", v62, 0xCu);
        }
        goto LABEL_91;
      }
      if (v46)
      {
        *(_DWORD *)int v62 = 136446466;
        *(void *)&v62[4] = "nw_connection_read_multiple";
        *(_WORD *)&v62[12] = 2082;
        *(void *)&v62[14] = v44;
        _os_log_impl(&dword_1830D4000, v40, v45, "%{public}s called with null connection, dumping backtrace:%{public}s", v62, 0x16u);
      }
LABEL_79:

      free(v44);
    }
  }
LABEL_92:
  if (v39) {
    free(v39);
  }
  BOOL v12 = 0;
LABEL_59:

  return v12;
}

void sub_1838084A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

BOOL __nw_connection_read_multiple_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 200)) {
    BOOL result = 1;
  }
  else {
    BOOL result = nw_context_is_inline(*(void **)(v2 + 24));
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void __nw_connection_read_multiple_block_invoke_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = a5;
  id v7 = v6;
  if (v6) {

  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1838085B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_read_buffer(void *a1, char *a2, unint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1;
  id v11 = a5;
  BOOL v12 = v11;
  if (v10)
  {
    if (v11)
    {
      *(void *)BOOL v87 = 0;
      os_log_type_t v88 = v87;
      uint64_t v89 = 0x2020000000;
      char v90 = 1;
      v84[0] = MEMORY[0x1E4F143A8];
      v84[1] = 3221225472;
      v84[2] = __nw_connection_read_buffer_block_invoke;
      v84[3] = &unk_1E524B978;
      os_log_type_t v86 = v87;
      uint64_t v13 = v10;
      id v85 = v13;
      os_unfair_lock_lock(v10 + 34);
      __nw_connection_read_buffer_block_invoke((uint64_t)v84);
      os_unfair_lock_unlock(v10 + 34);
      if (*((unsigned char *)v88 + 24))
      {
        id v14 = v13;
        id v15 = v12;
        if (a2)
        {
          if (a3 <= 1) {
            unint64_t v16 = 1;
          }
          else {
            unint64_t v16 = a3;
          }
          if (v16 > a4)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v17 = (id)gLogObj;
            *(_DWORD *)long long buf = 136446722;
            char v94 = "nw_read_request_create_with_buffer";
            __int16 v95 = 2048;
            *(void *)os_log_type_t v96 = v16;
            *(_WORD *)&v96[8] = 2048;
            *(void *)&v96[10] = a4;
            os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v91 = 0;
            if (!__nwlog_fault(v18, &type, &v91)) {
              goto LABEL_76;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint32_t v19 = (id)gLogObj;
              os_log_type_t v20 = type;
              if (os_log_type_enabled(v19, type))
              {
                *(_DWORD *)long long buf = 136446722;
                char v94 = "nw_read_request_create_with_buffer";
                __int16 v95 = 2048;
                *(void *)os_log_type_t v96 = v16;
                *(_WORD *)&v96[8] = 2048;
                *(void *)&v96[10] = a4;
                _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s minlength (%zu) > max_data_count (%zu)", buf, 0x20u);
              }
LABEL_75:

              goto LABEL_76;
            }
            if (!v91)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint32_t v19 = (id)gLogObj;
              os_log_type_t v48 = type;
              if (os_log_type_enabled(v19, type))
              {
                *(_DWORD *)long long buf = 136446722;
                char v94 = "nw_read_request_create_with_buffer";
                __int16 v95 = 2048;
                *(void *)os_log_type_t v96 = v16;
                *(_WORD *)&v96[8] = 2048;
                *(void *)&v96[10] = a4;
                _os_log_impl(&dword_1830D4000, v19, v48, "%{public}s minlength (%zu) > max_data_count (%zu), backtrace limit exceeded", buf, 0x20u);
              }
              goto LABEL_75;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint32_t v19 = (id)gLogObj;
            os_log_type_t v40 = type;
            BOOL v41 = os_log_type_enabled(v19, type);
            if (!backtrace_string)
            {
              if (v41)
              {
                *(_DWORD *)long long buf = 136446722;
                char v94 = "nw_read_request_create_with_buffer";
                __int16 v95 = 2048;
                *(void *)os_log_type_t v96 = v16;
                *(_WORD *)&v96[8] = 2048;
                *(void *)&v96[10] = a4;
                _os_log_impl(&dword_1830D4000, v19, v40, "%{public}s minlength (%zu) > max_data_count (%zu), no backtrace", buf, 0x20u);
              }
              goto LABEL_75;
            }
            if (v41)
            {
              *(_DWORD *)long long buf = 136446978;
              char v94 = "nw_read_request_create_with_buffer";
              __int16 v95 = 2048;
              *(void *)os_log_type_t v96 = v16;
              *(_WORD *)&v96[8] = 2048;
              *(void *)&v96[10] = a4;
              __int16 v97 = 2082;
              __int16 v98 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v19, v40, "%{public}s minlength (%zu) > max_data_count (%zu), dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            if (v18) {
LABEL_77:
            }
              free(v18);
LABEL_87:

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v55 = (id)gLogObj;
            *(_DWORD *)long long buf = 136446210;
            char v94 = "nw_connection_read_buffer";
            int v56 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v91 = 0;
            if (__nwlog_fault(v56, &type, &v91))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                int v57 = (id)gLogObj;
                os_log_type_t v58 = type;
                if (os_log_type_enabled(v57, type))
                {
                  *(_DWORD *)long long buf = 136446210;
                  char v94 = "nw_connection_read_buffer";
                  _os_log_impl(&dword_1830D4000, v57, v58, "%{public}s nw_read_request_create_with_buffer failed", buf, 0xCu);
                }
              }
              else if (v91)
              {
                BOOL v59 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                int v57 = (id)gLogObj;
                os_log_type_t v60 = type;
                BOOL v61 = os_log_type_enabled(v57, type);
                if (v59)
                {
                  if (v61)
                  {
                    *(_DWORD *)long long buf = 136446466;
                    char v94 = "nw_connection_read_buffer";
                    __int16 v95 = 2082;
                    *(void *)os_log_type_t v96 = v59;
                    _os_log_impl(&dword_1830D4000, v57, v60, "%{public}s nw_read_request_create_with_buffer failed, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v59);
                  if (!v56) {
                    goto LABEL_106;
                  }
                  goto LABEL_105;
                }
                if (v61)
                {
                  *(_DWORD *)long long buf = 136446210;
                  char v94 = "nw_connection_read_buffer";
                  _os_log_impl(&dword_1830D4000, v57, v60, "%{public}s nw_read_request_create_with_buffer failed, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                int v57 = (id)gLogObj;
                os_log_type_t v62 = type;
                if (os_log_type_enabled(v57, type))
                {
                  *(_DWORD *)long long buf = 136446210;
                  char v94 = "nw_connection_read_buffer";
                  _os_log_impl(&dword_1830D4000, v57, v62, "%{public}s nw_read_request_create_with_buffer failed, backtrace limit exceeded", buf, 0xCu);
                }
              }
            }
            if (!v56)
            {
LABEL_106:
              uint64_t v33 = 0;
              os_log_type_t v32 = 0;
LABEL_107:

              goto LABEL_108;
            }
LABEL_105:
            free(v56);
            goto LABEL_106;
          }
          uint32_t v28 = objc_alloc_init(NWConcrete_nw_read_request);
          if (v28)
          {
            os_log_type_t v29 = _Block_copy(v15);
            id buffer_completion = v28->buffer_completion;
            v28->id buffer_completion = v29;

            objc_storeStrong((id *)&v28->connection, a1);
            qos_class_t v31 = qos_class_self();
            v28->min = v16;
            v28->max = a4;
            v28->buffer = a2;
            v28->qos_class = v31;
            v28->variant = 2;
            if (_nw_signposts_once != -1) {
              dispatch_once(&_nw_signposts_once, &__block_literal_global_52704);
            }
            if (_nw_signposts_enabled && kdebug_is_enabled()) {
              kdebug_trace();
            }
            os_log_type_t v32 = v28;

            nw_connection_add_read_request(v14, v32);
            uint64_t v33 = 1;
            goto LABEL_107;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v42 = (id)gLogObj;
          *(_DWORD *)long long buf = 136446210;
          char v94 = "nw_read_request_create_with_buffer";
          os_log_type_t v43 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v91 = 0;
          if (__nwlog_fault(v43, &type, &v91))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              char v44 = (id)gLogObj;
              os_log_type_t v45 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)long long buf = 136446210;
                char v94 = "nw_read_request_create_with_buffer";
                _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed", buf, 0xCu);
              }
            }
            else if (v91)
            {
              os_log_type_t v49 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              char v44 = (id)gLogObj;
              os_log_type_t v50 = type;
              BOOL v51 = os_log_type_enabled(v44, type);
              if (v49)
              {
                if (v51)
                {
                  *(_DWORD *)long long buf = 136446466;
                  char v94 = "nw_read_request_create_with_buffer";
                  __int16 v95 = 2082;
                  *(void *)os_log_type_t v96 = v49;
                  _os_log_impl(&dword_1830D4000, v44, v50, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v49);
                if (!v43) {
                  goto LABEL_86;
                }
                goto LABEL_85;
              }
              if (v51)
              {
                *(_DWORD *)long long buf = 136446210;
                char v94 = "nw_read_request_create_with_buffer";
                _os_log_impl(&dword_1830D4000, v44, v50, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              char v44 = (id)gLogObj;
              os_log_type_t v54 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)long long buf = 136446210;
                char v94 = "nw_read_request_create_with_buffer";
                _os_log_impl(&dword_1830D4000, v44, v54, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
          if (!v43)
          {
LABEL_86:

            goto LABEL_87;
          }
LABEL_85:
          free(v43);
          goto LABEL_86;
        }
        int v70 = __nwlog_obj();
        *(_DWORD *)long long buf = 136446210;
        char v94 = "nw_read_request_create_with_buffer";
        os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v91 = 0;
        if (__nwlog_fault(v18, &type, &v91))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            id v71 = __nwlog_obj();
            os_log_type_t v72 = type;
            if (os_log_type_enabled(v71, type))
            {
              *(_DWORD *)long long buf = 136446210;
              char v94 = "nw_read_request_create_with_buffer";
              _os_log_impl(&dword_1830D4000, v71, v72, "%{public}s called with null buffer", buf, 0xCu);
            }
LABEL_160:

            goto LABEL_76;
          }
          if (!v91)
          {
            id v71 = __nwlog_obj();
            os_log_type_t v83 = type;
            if (os_log_type_enabled(v71, type))
            {
              *(_DWORD *)long long buf = 136446210;
              char v94 = "nw_read_request_create_with_buffer";
              _os_log_impl(&dword_1830D4000, v71, v83, "%{public}s called with null buffer, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_160;
          }
          uint64_t v78 = (char *)__nw_create_backtrace_string();
          id v71 = __nwlog_obj();
          os_log_type_t v79 = type;
          BOOL v80 = os_log_type_enabled(v71, type);
          if (!v78)
          {
            if (v80)
            {
              *(_DWORD *)long long buf = 136446210;
              char v94 = "nw_read_request_create_with_buffer";
              _os_log_impl(&dword_1830D4000, v71, v79, "%{public}s called with null buffer, no backtrace", buf, 0xCu);
            }
            goto LABEL_160;
          }
          if (v80)
          {
            *(_DWORD *)long long buf = 136446466;
            char v94 = "nw_read_request_create_with_buffer";
            __int16 v95 = 2082;
            *(void *)os_log_type_t v96 = v78;
            _os_log_impl(&dword_1830D4000, v71, v79, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v78);
        }
LABEL_76:
        if (!v18) {
          goto LABEL_87;
        }
        goto LABEL_77;
      }
      uint64_t v21 = *(void *)&v13[4]._os_unfair_lock_opaque;
      if (v21 && !nw_path_parameters_get_logging_disabled(*(void *)(v21 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v22 = (id)gconnectionLogObj;
        uint32_t os_unfair_lock_opaque = v13[112]._os_unfair_lock_opaque;
        *(_DWORD *)long long buf = 136446466;
        char v94 = "nw_connection_read_buffer";
        __int16 v95 = 1024;
        *(_DWORD *)os_log_type_t v96 = os_unfair_lock_opaque;
        int v24 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v91 = 0;
        if (__nwlog_fault(v24, &type, &v91))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v25 = (id)gconnectionLogObj;
            os_log_type_t v26 = type;
            if (os_log_type_enabled(v25, type))
            {
              uint32_t v27 = v13[112]._os_unfair_lock_opaque;
              *(_DWORD *)long long buf = 136446466;
              char v94 = "nw_connection_read_buffer";
              __int16 v95 = 1024;
              *(_DWORD *)os_log_type_t v96 = v27;
              _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s [C%u] client_queue is nil", buf, 0x12u);
            }
          }
          else if (v91)
          {
            os_log_type_t v34 = __nw_create_backtrace_string();
            if (v34)
            {
              os_log_type_t v35 = (char *)v34;
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              uint32_t v36 = (id)gconnectionLogObj;
              os_log_type_t v37 = type;
              if (os_log_type_enabled(v36, type))
              {
                uint32_t v38 = v13[112]._os_unfair_lock_opaque;
                *(_DWORD *)long long buf = 136446722;
                char v94 = "nw_connection_read_buffer";
                __int16 v95 = 1024;
                *(_DWORD *)os_log_type_t v96 = v38;
                *(_WORD *)&v96[4] = 2082;
                *(void *)&v96[6] = v35;
                _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s [C%u] client_queue is nil, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v35);
              if (!v24) {
                goto LABEL_72;
              }
              goto LABEL_71;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v25 = (id)gconnectionLogObj;
            os_log_type_t v52 = type;
            if (os_log_type_enabled(v25, type))
            {
              uint32_t v53 = v13[112]._os_unfair_lock_opaque;
              *(_DWORD *)long long buf = 136446466;
              char v94 = "nw_connection_read_buffer";
              __int16 v95 = 1024;
              *(_DWORD *)os_log_type_t v96 = v53;
              _os_log_impl(&dword_1830D4000, v25, v52, "%{public}s [C%u] client_queue is nil, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v25 = (id)gconnectionLogObj;
            os_log_type_t v46 = type;
            if (os_log_type_enabled(v25, type))
            {
              uint32_t v47 = v13[112]._os_unfair_lock_opaque;
              *(_DWORD *)long long buf = 136446466;
              char v94 = "nw_connection_read_buffer";
              __int16 v95 = 1024;
              *(_DWORD *)os_log_type_t v96 = v47;
              _os_log_impl(&dword_1830D4000, v25, v46, "%{public}s [C%u] client_queue is nil, backtrace limit exceeded", buf, 0x12u);
            }
          }
        }
        if (v24) {
LABEL_71:
        }
          free(v24);
      }
LABEL_72:
      uint64_t v33 = 0;
LABEL_108:

      _Block_object_dispose(v87, 8);
      goto LABEL_109;
    }
    uint64_t v68 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v94 = "nw_connection_read_buffer";
    os_log_type_t v65 = (char *)_os_log_send_and_compose_impl();

    v87[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v65, v87, &type))
    {
      if (v87[0] == OS_LOG_TYPE_FAULT)
      {
        int v66 = __nwlog_obj();
        os_log_type_t v69 = v87[0];
        if (os_log_type_enabled(v66, v87[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          char v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_1830D4000, v66, v69, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_151:

        goto LABEL_152;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        int v66 = __nwlog_obj();
        os_log_type_t v82 = v87[0];
        if (os_log_type_enabled(v66, v87[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          char v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_1830D4000, v66, v82, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_151;
      }
      BOOL v73 = (char *)__nw_create_backtrace_string();
      int v66 = __nwlog_obj();
      os_log_type_t v76 = v87[0];
      BOOL v77 = os_log_type_enabled(v66, v87[0]);
      if (!v73)
      {
        if (v77)
        {
          *(_DWORD *)long long buf = 136446210;
          char v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_1830D4000, v66, v76, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v77)
      {
        *(_DWORD *)long long buf = 136446466;
        char v94 = "nw_connection_read_buffer";
        __int16 v95 = 2082;
        *(void *)os_log_type_t v96 = v73;
        _os_log_impl(&dword_1830D4000, v66, v76, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_134;
    }
  }
  else
  {
    uint64_t v64 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v94 = "nw_connection_read_buffer";
    os_log_type_t v65 = (char *)_os_log_send_and_compose_impl();

    v87[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v65, v87, &type))
    {
      if (v87[0] == OS_LOG_TYPE_FAULT)
      {
        int v66 = __nwlog_obj();
        os_log_type_t v67 = v87[0];
        if (os_log_type_enabled(v66, v87[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          char v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        int v66 = __nwlog_obj();
        os_log_type_t v81 = v87[0];
        if (os_log_type_enabled(v66, v87[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          char v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_1830D4000, v66, v81, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_151;
      }
      BOOL v73 = (char *)__nw_create_backtrace_string();
      int v66 = __nwlog_obj();
      os_log_type_t v74 = v87[0];
      BOOL v75 = os_log_type_enabled(v66, v87[0]);
      if (!v73)
      {
        if (v75)
        {
          *(_DWORD *)long long buf = 136446210;
          char v94 = "nw_connection_read_buffer";
          _os_log_impl(&dword_1830D4000, v66, v74, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_151;
      }
      if (v75)
      {
        *(_DWORD *)long long buf = 136446466;
        char v94 = "nw_connection_read_buffer";
        __int16 v95 = 2082;
        *(void *)os_log_type_t v96 = v73;
        _os_log_impl(&dword_1830D4000, v66, v74, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_134:

      free(v73);
    }
  }
LABEL_152:
  if (v65) {
    free(v65);
  }
  uint64_t v33 = 0;
LABEL_109:

  return v33;
}

void sub_183809988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, ...)
{
  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_connection_read_buffer_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 200)) {
    BOOL result = 1;
  }
  else {
    BOOL result = nw_context_is_inline(*(void **)(v2 + 24));
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void nw_connection_receive_multiple(void *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a4;
  int v9 = v8;
  if (!v7)
  {
    unint64_t v16 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint32_t v38 = "nw_connection_receive_multiple";
    id v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v36 = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v17, &v36, &v35)) {
      goto LABEL_41;
    }
    if (v36 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = v36;
      if (os_log_type_enabled(v18, v36))
      {
        *(_DWORD *)long long buf = 136446210;
        uint32_t v38 = "nw_connection_receive_multiple";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v23 = v36;
      BOOL v24 = os_log_type_enabled(v18, v36);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)long long buf = 136446466;
          uint32_t v38 = "nw_connection_receive_multiple";
          __int16 v39 = 2082;
          os_log_type_t v40 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v17) {
          goto LABEL_7;
        }
LABEL_42:
        free(v17);
        goto LABEL_7;
      }
      if (v24)
      {
        *(_DWORD *)long long buf = 136446210;
        uint32_t v38 = "nw_connection_receive_multiple";
        _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v28 = v36;
      if (os_log_type_enabled(v18, v36))
      {
        *(_DWORD *)long long buf = 136446210;
        uint32_t v38 = "nw_connection_receive_multiple";
        _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (v8)
  {
    unint64_t v10 = a3;
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    v33[2] = __nw_connection_receive_multiple_block_invoke;
    v33[3] = &unk_1E523DC58;
    id v11 = v8;
    id v34 = v11;
    multiple = nw_read_request_create_multiple(a2, v10, v7, v33);
    if (multiple)
    {
      nw_connection_add_read_request(v7, multiple);
    }
    else
    {
      uint64_t v13 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
      dispatch_qos_class_t v14 = v7[48];
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 3221225472;
      v30[2] = __nw_connection_receive_multiple_block_invoke_2;
      void v30[3] = &unk_1E524B950;
      id v31 = v13;
      id v32 = v11;
      id v15 = v13;
      nw_connection_async_client_if_needed_with_override(v7, 0, v14, v30);
    }
    goto LABEL_7;
  }
  os_log_type_t v20 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint32_t v38 = "nw_connection_receive_multiple";
  id v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v36 = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (!__nwlog_fault(v17, &v36, &v35)) {
    goto LABEL_41;
  }
  if (v36 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v18 = __nwlog_obj();
    os_log_type_t v21 = v36;
    if (os_log_type_enabled(v18, v36))
    {
      *(_DWORD *)long long buf = 136446210;
      uint32_t v38 = "nw_connection_receive_multiple";
      _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null completion", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v35)
  {
    os_log_type_t v18 = __nwlog_obj();
    os_log_type_t v29 = v36;
    if (os_log_type_enabled(v18, v36))
    {
      *(_DWORD *)long long buf = 136446210;
      uint32_t v38 = "nw_connection_receive_multiple";
      _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  int v25 = (char *)__nw_create_backtrace_string();
  os_log_type_t v18 = __nwlog_obj();
  os_log_type_t v26 = v36;
  BOOL v27 = os_log_type_enabled(v18, v36);
  if (!v25)
  {
    if (v27)
    {
      *(_DWORD *)long long buf = 136446210;
      uint32_t v38 = "nw_connection_receive_multiple";
      _os_log_impl(&dword_1830D4000, v18, v26, "%{public}s called with null completion, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v27)
  {
    *(_DWORD *)long long buf = 136446466;
    uint32_t v38 = "nw_connection_receive_multiple";
    __int16 v39 = 2082;
    os_log_type_t v40 = v25;
    _os_log_impl(&dword_1830D4000, v18, v26, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v25);
  if (v17) {
    goto LABEL_42;
  }
LABEL_7:
}

void sub_18380A004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void __nw_connection_receive_multiple_block_invoke(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  LODWORD(v5) = a4;
  id v10 = a5;
  if (v5)
  {
    uint64_t v9 = (v5 - 1);
    uint64_t v5 = v5;
    do
    {
      (*(void (**)(void, void, void, BOOL, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2++, *a3++, v9-- == 0, v10);
      --v5;
    }
    while (v5);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_18380A11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_receive_multiple_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, 1, *(void *)(a1 + 32));
}

void nw_connection_receive_file_at_path_with_progress(void *a1, const char *a2, unint64_t a3, void *a4)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v8 = a1;
  id v9 = a4;
  id v10 = v9;
  if (!v8)
  {
    char v44 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_receive_file_at_path_with_progress";
    os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

    v64[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v45, v64, &type)) {
      goto LABEL_83;
    }
    if (v64[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v46 = __nwlog_obj();
      os_log_type_t v47 = v64[0];
      if (os_log_type_enabled(v46, v64[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_receive_file_at_path_with_progress";
        _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v46 = __nwlog_obj();
      os_log_type_t v51 = v64[0];
      BOOL v52 = os_log_type_enabled(v46, v64[0]);
      if (backtrace_string)
      {
        if (v52)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_receive_file_at_path_with_progress";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v46, v51, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_83:
        if (!v45) {
          goto LABEL_44;
        }
LABEL_84:
        free(v45);
        goto LABEL_44;
      }
      if (v52)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_receive_file_at_path_with_progress";
        _os_log_impl(&dword_1830D4000, v46, v51, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v46 = __nwlog_obj();
      os_log_type_t v58 = v64[0];
      if (os_log_type_enabled(v46, v64[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_receive_file_at_path_with_progress";
        _os_log_impl(&dword_1830D4000, v46, v58, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_82:

    goto LABEL_83;
  }
  if (v9)
  {
    *(void *)uint64_t v64 = 0;
    os_log_type_t v65 = v64;
    uint64_t v66 = 0x3032000000;
    os_log_type_t v67 = __Block_byref_object_copy__24353;
    uint64_t v68 = __Block_byref_object_dispose__24354;
    id v69 = 0;
    int v11 = open(a2, 525, 511);
    if (v11 == -1)
    {
      posix_CFErrorRef error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8));
      os_log_type_t v28 = (void *)*((void *)v65 + 5);
      *((void *)v65 + 5) = posix_error;

      BOOL v12 = 0;
      uint64_t v13 = *((void *)v65 + 5);
    }
    else
    {
      BOOL v12 = nw_fd_wrapper_create(v11);
      v63[0] = MEMORY[0x1E4F143A8];
      v63[1] = 3221225472;
      v63[2] = __nw_connection_receive_file_at_path_with_progress_block_invoke;
      v63[3] = &unk_1E524A270;
      v63[4] = v64;
      nw_fd_wrapper_get_fd(v12, v63);
      uint64_t v13 = *((void *)v65 + 5);
      if (!v13 && v12)
      {
        uint64_t v14 = *((void *)v8 + 2);
        if (v14 && !nw_path_parameters_get_logging_disabled(*(void *)(v14 + 104)) && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          int v56 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
          {
            int v57 = *((_DWORD *)v8 + 112);
            *(_DWORD *)long long buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_receive_file_at_path_with_progress";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v57;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v12;
            _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] attempting file read request on fd: %@", buf, 0x1Cu);
          }
        }
        id v15 = v8;
        unint64_t v16 = v12;
        id v17 = v10;
        os_log_type_t v18 = v16;
        os_log_type_t v19 = v15;
        id v20 = v17;
        os_log_type_t v21 = objc_alloc_init(NWConcrete_nw_read_request);
        id v22 = v21;
        if (v21)
        {
          objc_storeStrong((id *)&v21->connection, a1);
          qos_class_t v23 = qos_class_self();
          v22->min = a3;
          v22->max = a3;
          v22->qos_class = v23;
          v22->variant = 4;
          objc_storeStrong((id *)&v22->fd, v12);
          BOOL v24 = _Block_copy(v20);
          id file_handler = v22->file_handler;
          v22->id file_handler = v24;

          v22->progress_msecs = 200;
          *((unsigned char *)v22 + 176) &= ~4u;
          if (_nw_signposts_once != -1) {
            dispatch_once(&_nw_signposts_once, &__block_literal_global_52704);
          }
          if (_nw_signposts_enabled && kdebug_is_enabled()) {
            kdebug_trace();
          }
          os_log_type_t v26 = v22;
          goto LABEL_39;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v32 = (id)gLogObj;
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_read_request_create_with_file";
        uint64_t v33 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v70 = 0;
        if (__nwlog_fault(v33, &type, &v70))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v34 = (id)gLogObj;
            os_log_type_t v35 = type;
            if (os_log_type_enabled(v34, type))
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_read_request_create_with_file";
              _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed", buf, 0xCu);
            }
          }
          else if (v70)
          {
            os_log_type_t v36 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v34 = (id)gLogObj;
            os_log_type_t v37 = type;
            BOOL v38 = os_log_type_enabled(v34, type);
            if (v36)
            {
              if (v38)
              {
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_read_request_create_with_file";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v36;
                _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v36);
              if (!v33) {
                goto LABEL_39;
              }
              goto LABEL_38;
            }
            if (v38)
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_read_request_create_with_file";
              _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v34 = (id)gLogObj;
            os_log_type_t v39 = type;
            if (os_log_type_enabled(v34, type))
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_read_request_create_with_file";
              _os_log_impl(&dword_1830D4000, v34, v39, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
        if (!v33)
        {
LABEL_39:

          if (v22)
          {
            nw_connection_add_read_request(v19, v22);
          }
          else
          {
            os_log_type_t v40 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
            dispatch_qos_class_t v41 = v19[48];
            *(void *)long long buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3221225472;
            *(void *)&buf[16] = ___ZL35nw_connection_receive_file_internalP24NWConcrete_nw_connectionPU27objcproto16OS_nw_fd_wrapper8NSObjectmU13block_pointerFbmPU32objcproto21OS_nw_content_contextS1_bPU22objcproto11OS_nw_errorS1_E_block_invoke;
            *(void *)&unsigned char buf[24] = &unk_1E524B950;
            id v42 = v20;
            id v73 = v40;
            id v74 = v42;
            os_log_type_t v43 = v40;
            nw_connection_async_client_if_needed_with_override(v19, 0, v41, buf);
          }
LABEL_43:

          _Block_object_dispose(v64, 8);
          goto LABEL_44;
        }
LABEL_38:
        free(v33);
        goto LABEL_39;
      }
    }
    if (!v13)
    {
      os_log_type_t v29 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 9);
      os_log_type_t v30 = (void *)*((void *)v65 + 5);
      *((void *)v65 + 5) = v29;
    }
    dispatch_qos_class_t v31 = *((_DWORD *)v8 + 48);
    v60[0] = MEMORY[0x1E4F143A8];
    v60[1] = 3221225472;
    v60[2] = __nw_connection_receive_file_at_path_with_progress_block_invoke_34;
    v60[3] = &unk_1E5242B38;
    id v61 = v10;
    os_log_type_t v62 = v64;
    nw_connection_async_client_if_needed_with_override(v8, 0, v31, v60);

    os_log_type_t v18 = v12;
    goto LABEL_43;
  }
  os_log_type_t v48 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_receive_file_at_path_with_progress";
  os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

  v64[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v45, v64, &type)) {
    goto LABEL_83;
  }
  if (v64[0] == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v46 = __nwlog_obj();
    os_log_type_t v49 = v64[0];
    if (os_log_type_enabled(v46, v64[0]))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_receive_file_at_path_with_progress";
      _os_log_impl(&dword_1830D4000, v46, v49, "%{public}s called with null handler", buf, 0xCu);
    }
    goto LABEL_82;
  }
  if (type == OS_LOG_TYPE_DEFAULT)
  {
    os_log_type_t v46 = __nwlog_obj();
    os_log_type_t v59 = v64[0];
    if (os_log_type_enabled(v46, v64[0]))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_receive_file_at_path_with_progress";
      _os_log_impl(&dword_1830D4000, v46, v59, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_82;
  }
  uint32_t v53 = (char *)__nw_create_backtrace_string();
  os_log_type_t v46 = __nwlog_obj();
  os_log_type_t v54 = v64[0];
  BOOL v55 = os_log_type_enabled(v46, v64[0]);
  if (!v53)
  {
    if (v55)
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_receive_file_at_path_with_progress";
      _os_log_impl(&dword_1830D4000, v46, v54, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_82;
  }
  if (v55)
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_connection_receive_file_at_path_with_progress";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v53;
    _os_log_impl(&dword_1830D4000, v46, v54, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v53);
  if (v45) {
    goto LABEL_84;
  }
LABEL_44:
}

void sub_18380AD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,id a36)
{
  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_receive_file_at_path_with_progress_block_invoke(uint64_t a1, int a2)
{
  memset(&v7, 0, sizeof(v7));
  if (fstat(a2, &v7) == -1)
  {
    posix_CFErrorRef error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8));
    goto LABEL_5;
  }
  if ((v7.st_mode & 0xF000) != 0x8000)
  {
    posix_CFErrorRef error = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 9);
LABEL_5:
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = posix_error;
  }
  return 1;
}

uint64_t ___ZL35nw_connection_receive_file_internalP24NWConcrete_nw_connectionPU27objcproto16OS_nw_fd_wrapper8NSObjectmU13block_pointerFbmPU32objcproto21OS_nw_content_contextS1_bPU22objcproto11OS_nw_errorS1_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, 0, *(void *)(a1 + 32));
}

uint64_t __nw_connection_receive_file_at_path_with_progress_block_invoke_34(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, 0, 0, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

uint64_t ___ZL30nw_connection_receive_internalP24NWConcrete_nw_connectionPU32objcproto21OS_nw_content_context8NSObjectjjU13block_pointerFvPU27objcproto16OS_dispatch_dataS1_S3_bPU22objcproto11OS_nw_errorS1_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, 0, *(void *)(a1 + 32));
}

void nw_connection_receive_message(nw_connection_t connection, nw_connection_receive_completion_t completion)
{
}

void nw_connection_receive_message_with_context(void *a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v6)
  {
    nw_connection_receive_internal(v5, v6, 0xFFFFFFFF, 0xFFFFFFFF, v7);
    goto LABEL_3;
  }
  id v8 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v19 = "nw_connection_receive_message_with_context";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v19 = "nw_connection_receive_message_with_context";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null message", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v19 = "nw_connection_receive_message_with_context";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v19 = "nw_connection_receive_message_with_context";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v19 = "nw_connection_receive_message_with_context";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

void sub_18380B1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_read(void *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a4;
  id v9 = v8;
  if (v7)
  {
    if (v8)
    {
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      v25[2] = __nw_connection_read_block_invoke;
      v25[3] = &unk_1E52485D0;
      id v26 = v8;
      nw_connection_receive_internal(v7, 0, a2, a3, v25);

      uint64_t v10 = 1;
      goto LABEL_4;
    }
    char v16 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v30 = "nw_connection_read";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v13, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v14 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v30 = "nw_connection_read";
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v27)
      {
        BOOL v14 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v30 = "nw_connection_read";
          _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v30 = "nw_connection_read";
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v22)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v30 = "nw_connection_read";
        __int16 v31 = 2082;
        id v32 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    BOOL v12 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v30 = "nw_connection_read";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v13, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v30 = "nw_connection_read";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v27)
      {
        BOOL v14 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v30 = "nw_connection_read";
          _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v30 = "nw_connection_read";
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v20)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v30 = "nw_connection_read";
        __int16 v31 = 2082;
        id v32 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v13) {
    free(v13);
  }
  uint64_t v10 = 0;
LABEL_4:

  return v10;
}

void sub_18380B6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_connection_read_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v11 = a2;
  id v8 = a3;
  id v9 = a5;
  uint64_t v10 = v9;
  if (v9) {

  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18380B7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __nw_connection_send_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
  (*(void (**)(uint64_t))(v1 + 16))(v1);
}

void sub_18380B85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_connection_send_idempotent(NSObject *a1, NSObject *a2, NSObject *a3, BOOL a4)
{
}

void nw_connection_send_reply(void *a1, void *a2, void *a3, void *a4, int a5, void *a6)
{
  *(void *)&v67[13] = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a6;
  char v16 = v15;
  id v59 = v11;
  if (!v11)
  {
    os_log_type_t v45 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v65 = "nw_connection_send_reply";
    os_log_type_t v46 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v46, &type, &v62)) {
      goto LABEL_92;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v47 = __nwlog_obj();
      os_log_type_t v48 = type;
      if (os_log_type_enabled(v47, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v65 = "nw_connection_send_reply";
        _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v62)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v47 = __nwlog_obj();
      os_log_type_t v52 = type;
      BOOL v53 = os_log_type_enabled(v47, type);
      if (backtrace_string)
      {
        if (v53)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v65 = "nw_connection_send_reply";
          __int16 v66 = 2082;
          *(void *)os_log_type_t v67 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v47, v52, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_92:
        if (!v46) {
          goto LABEL_29;
        }
LABEL_93:
        free(v46);
        goto LABEL_29;
      }
      if (v53)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v65 = "nw_connection_send_reply";
        _os_log_impl(&dword_1830D4000, v47, v52, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v47 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (os_log_type_enabled(v47, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v65 = "nw_connection_send_reply";
        _os_log_impl(&dword_1830D4000, v47, v57, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_91:

    goto LABEL_92;
  }
  if (v15)
  {
    if (!v12)
    {
      os_log_type_t v23 = "No original message provided";
      goto LABEL_21;
    }
    os_log_type_t v17 = (os_unfair_lock_s *)v12;
    os_log_type_t v18 = v17;
    if (v17 == (os_unfair_lock_s *)&__block_literal_global_10_42276)
    {
      os_log_type_t v19 = v16;
      id v20 = v12;
      id v21 = v13;
    }
    else
    {
      if (v17 == (os_unfair_lock_s *)&__block_literal_global_8_42267
        || v17 == (os_unfair_lock_s *)&__block_literal_global_6_42258
        || v17 == (os_unfair_lock_s *)&__block_literal_global_42249)
      {

        os_log_type_t v23 = "Protocol does not support replies";
LABEL_21:
        uint64_t v26 = *((void *)v59 + 2);
        if (v26 && !nw_path_parameters_get_logging_disabled(*(void *)(v26 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          char v27 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            int v28 = *((_DWORD *)v59 + 112);
            *(_DWORD *)long long buf = 136446722;
            os_log_type_t v65 = "nw_connection_send_reply";
            __int16 v66 = 1024;
            *(_DWORD *)os_log_type_t v67 = v28;
            v67[2] = 2082;
            *(void *)&void v67[3] = v23;
            _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_ERROR, "%{public}s [C%u] %{public}s, sending error callback", buf, 0x1Cu);
          }
        }
        dispatch_qos_class_t v29 = *((_DWORD *)v59 + 48);
        v60[0] = MEMORY[0x1E4F143A8];
        v60[1] = 3221225472;
        v60[2] = __nw_connection_send_reply_block_invoke;
        v60[3] = &unk_1E524AFA8;
        id v61 = v16;
        nw_connection_async_client_if_needed_with_override(v59, 0, v29, v60);

        goto LABEL_29;
      }
      os_log_type_t v19 = v16;
      id v20 = v12;
      id v21 = v13;
      os_unfair_lock_lock(v17 + 28);
      char v22 = BYTE2(v18[29]._os_unfair_lock_opaque);
      os_unfair_lock_unlock(v18 + 28);

      if ((v22 & 0x40) == 0)
      {
        os_log_type_t v23 = "Protocol does not support replies";
        id v13 = v21;
LABEL_20:
        id v12 = v20;
        char v16 = v19;
        goto LABEL_21;
      }
    }
    if (v14 == &__block_literal_global_8_42267)
    {
      os_log_type_t v23 = "Cannot send replies on stream context";
      id v13 = v21;
      goto LABEL_20;
    }
    id v13 = v21;
    if (v14 == &__block_literal_global_10_42276)
    {
      os_log_type_t v23 = "Cannot send replies on new inbound message context";
      goto LABEL_20;
    }
    os_log_type_t v24 = v14;
    int v25 = v24;
    id v12 = v20;
    if (!v24 || v24 == &__block_literal_global_42249 || v24 == &__block_literal_global_6_42258)
    {
      char v16 = v19;
      os_log_type_t v30 = nw_content_context_create("Reply");

      id repliable_metadata = nw_content_context_copy_first_repliable_metadata(v18);
      reply = nw_protocol_metadata_create_reply(repliable_metadata);
      nw_content_context_set_metadata_for_protocol(v30, reply);
      if (v25 == &__block_literal_global_6_42258) {
        nw_content_context_set_is_final(v30, 1);
      }
      int v25 = v30;
    }
    else
    {
      char v16 = v19;
    }
    uint64_t v33 = v25;
    if (v16 == &__block_literal_global_24376) {
      id v34 = nw_write_request_create_idempotent(v13, v25, v18, a5);
    }
    else {
      id v34 = nw_write_request_create(v13, v25, v18, a5, v59, v16);
    }
    os_log_type_t v35 = v34;
    if (v34)
    {
      nw_connection_add_write_request(v59, v34);
LABEL_57:

      goto LABEL_29;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v36 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v65 = "nw_connection_send_reply";
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v37, &type, &v62)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v38 = (id)gLogObj;
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v65 = "nw_connection_send_reply";
        _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s nw_write_request_create failed", buf, 0xCu);
      }
    }
    else
    {
      if (v62)
      {
        os_log_type_t v40 = (char *)__nw_create_backtrace_string();
        dispatch_qos_class_t v41 = __nwlog_obj();
        os_log_type_t v42 = type;
        BOOL v43 = os_log_type_enabled(v41, type);
        if (v40)
        {
          if (v43)
          {
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v65 = "nw_connection_send_reply";
            __int16 v66 = 2082;
            *(void *)os_log_type_t v67 = v40;
            _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s nw_write_request_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v40);
          if (!v37) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
        if (v43)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v65 = "nw_connection_send_reply";
          _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s nw_write_request_create failed, no backtrace", buf, 0xCu);
        }

LABEL_55:
        if (!v37) {
          goto LABEL_57;
        }
LABEL_56:
        free(v37);
        goto LABEL_57;
      }
      BOOL v38 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v65 = "nw_connection_send_reply";
        _os_log_impl(&dword_1830D4000, v38, v44, "%{public}s nw_write_request_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_55;
  }
  os_log_type_t v49 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v65 = "nw_connection_send_reply";
  os_log_type_t v46 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v62 = 0;
  if (!__nwlog_fault(v46, &type, &v62)) {
    goto LABEL_92;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v47 = __nwlog_obj();
    os_log_type_t v50 = type;
    if (os_log_type_enabled(v47, type))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v65 = "nw_connection_send_reply";
      _os_log_impl(&dword_1830D4000, v47, v50, "%{public}s called with null completion", buf, 0xCu);
    }
    goto LABEL_91;
  }
  if (!v62)
  {
    os_log_type_t v47 = __nwlog_obj();
    os_log_type_t v58 = type;
    if (os_log_type_enabled(v47, type))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v65 = "nw_connection_send_reply";
      _os_log_impl(&dword_1830D4000, v47, v58, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_91;
  }
  os_log_type_t v54 = (char *)__nw_create_backtrace_string();
  os_log_type_t v47 = __nwlog_obj();
  os_log_type_t v55 = type;
  BOOL v56 = os_log_type_enabled(v47, type);
  if (!v54)
  {
    if (v56)
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v65 = "nw_connection_send_reply";
      _os_log_impl(&dword_1830D4000, v47, v55, "%{public}s called with null completion, no backtrace", buf, 0xCu);
    }
    goto LABEL_91;
  }
  if (v56)
  {
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v65 = "nw_connection_send_reply";
    __int16 v66 = 2082;
    *(void *)os_log_type_t v67 = v54;
    _os_log_impl(&dword_1830D4000, v47, v55, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v54);
  if (v46) {
    goto LABEL_93;
  }
LABEL_29:
}

void sub_18380C2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void __nw_connection_send_reply_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
  (*(void (**)(uint64_t))(v1 + 16))(v1);
}

void sub_18380C3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_connection_send_file_at_path_with_progress(void *a1, const char *a2, void *a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  id v12 = a1;
  id v102 = a3;
  id v13 = a6;
  id v103 = v13;
  if (!v12)
  {
    os_log_type_t v67 = __nwlog_obj();
    *(_DWORD *)uint64_t v114 = 136446210;
    *(void *)&v114[4] = "nw_connection_send_file_at_path_with_progress";
    uint64_t v68 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v108) = 0;
    if (!__nwlog_fault(v68, buf, &v108)) {
      goto LABEL_145;
    }
    if (buf[0] == 17)
    {
      id v69 = __nwlog_obj();
      os_log_type_t v70 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v114 = 136446210;
        *(void *)&v114[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_1830D4000, v69, v70, "%{public}s called with null connection", v114, 0xCu);
      }
      goto LABEL_144;
    }
    if (!(_BYTE)v108)
    {
      id v69 = __nwlog_obj();
      os_log_type_t v88 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v114 = 136446210;
        *(void *)&v114[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_1830D4000, v69, v88, "%{public}s called with null connection, backtrace limit exceeded", v114, 0xCu);
      }
      goto LABEL_144;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v69 = __nwlog_obj();
    os_log_type_t v74 = buf[0];
    BOOL v75 = os_log_type_enabled(v69, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v75)
      {
        *(_DWORD *)uint64_t v114 = 136446210;
        *(void *)&v114[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_1830D4000, v69, v74, "%{public}s called with null connection, no backtrace", v114, 0xCu);
      }
      goto LABEL_144;
    }
    if (v75)
    {
      *(_DWORD *)uint64_t v114 = 136446466;
      *(void *)&v114[4] = "nw_connection_send_file_at_path_with_progress";
      *(_WORD *)&v114[12] = 2082;
      *(void *)&v114[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v69, v74, "%{public}s called with null connection, dumping backtrace:%{public}s", v114, 0x16u);
    }
    goto LABEL_117;
  }
  id v14 = v13;
  if (v13)
  {
    *(void *)uint64_t v114 = 0;
    *(void *)&v114[8] = v114;
    *(void *)&v114[16] = 0x3032000000;
    BOOL v115 = __Block_byref_object_copy__24353;
    os_log_type_t v116 = __Block_byref_object_dispose__24354;
    id v117 = 0;
    uint64_t v108 = 0;
    uint64_t v109 = &v108;
    uint64_t v110 = 0x2020000000;
    uint64_t v111 = a4;
    int v15 = open(a2, 4);
    if (v15 == -1)
    {
      posix_CFErrorRef error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8));
      BOOL v38 = *(void **)(*(void *)&v114[8] + 40);
      *(void *)(*(void *)&v114[8] + 40) = posix_error;

      char v16 = 0;
      uint64_t v17 = *(void *)(*(void *)&v114[8] + 40);
      id v14 = v103;
    }
    else
    {
      char v16 = nw_fd_wrapper_create(v15);
      v107[0] = MEMORY[0x1E4F143A8];
      v107[1] = 3221225472;
      v107[2] = __nw_connection_send_file_at_path_with_progress_block_invoke;
      v107[3] = &unk_1E523DCA0;
      v107[4] = v114;
      v107[5] = &v108;
      nw_fd_wrapper_get_fd(v16, v107);
      uint64_t v17 = *(void *)(*(void *)&v114[8] + 40);
      if (!v17 && v16)
      {
        uint64_t v18 = *((void *)v12 + 2);
        if (v18 && !nw_path_parameters_get_logging_disabled(*(void *)(v18 + 104)) && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v82 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
          {
            int v83 = *((_DWORD *)v12 + 112);
            *(_DWORD *)long long buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_send_file_at_path_with_progress";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v83;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v16;
            _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] attempting file write request on fd: %@", buf, 0x1Cu);
          }

          id v14 = v103;
        }
        uint64_t v19 = v109[3];
        id v20 = v12;
        id v21 = v12;
        char v22 = v16;
        id v23 = v102;
        id v24 = v14;
        id v101 = v22;
        __int16 v98 = v23;
        __int16 v100 = v24;
        if (v23 == &__block_literal_global_10_42276)
        {
          uint64_t v42 = v21[2];
          id v12 = v21;
          if (v42 && !nw_path_parameters_get_logging_disabled(*(void *)(v42 + 104)))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            BOOL v43 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            {
              int v44 = v20[112];
              *(_DWORD *)long long buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_connection_send_file_internal";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v44;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = "Cannot send replies on new inbound message context";
              _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s [C%u] %{public}s, sending error callback", buf, 0x1Cu);
            }
          }
          dispatch_qos_class_t v45 = v20[48];
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL32nw_connection_send_file_internalP24NWConcrete_nw_connectionPU27objcproto16OS_nw_fd_wrapper8NSObjectPU32objcproto21OS_nw_content_contextS1_mbU13block_pointerFbmbPU22objcproto11OS_nw_errorS1_E_block_invoke;
          *(void *)&unsigned char buf[24] = &unk_1E524AFA8;
          id v119 = v100;
          nw_connection_async_client_if_needed_with_override(v20, 0, v45, buf);
          os_log_type_t v46 = v119;
          goto LABEL_95;
        }
        int v25 = v24;
        __int16 v95 = v21;
        if (v23) {
          uint64_t v26 = v23;
        }
        else {
          uint64_t v26 = &__block_literal_global_42249;
        }
        id v27 = v26;
        char v94 = v22;
        id v28 = v27;
        __int16 v97 = v20;
        id aBlock = v25;
        uint64_t v99 = v28;
        if (v19
          || (a5 & 1) != 0
          || v28 != &__block_literal_global_6_42258
          && v28 != &__block_literal_global_42249
          && v28 != &__block_literal_global_8_42267
          && v28 != &__block_literal_global_10_42276)
        {
          dispatch_qos_class_t v29 = objc_alloc_init(NWConcrete_nw_write_request);
          os_log_type_t v30 = v29;
          id v12 = v95;
          if (v29)
          {
            objc_storeStrong((id *)&v29->context, v26);
            objc_storeStrong((id *)v30 + 13, 0);
            *((unsigned char *)v30 + 128) = v30[32] & 0xFE | a5;
            objc_storeStrong((id *)v30 + 5, a1);
            v30[12] = qos_class_self();
            __int16 v31 = v99;
            id v32 = v31;
            double v33 = 0.5;
            if (v31 != (double *)&__block_literal_global_10_42276
              && v31 != (double *)&__block_literal_global_8_42267
              && v31 != (double *)&__block_literal_global_6_42258
              && v31 != (double *)&__block_literal_global_42249
              && (*((unsigned char *)v31 + 118) & 1) == 0)
            {
              double v33 = v31[10];
            }

            *((double *)v30 + 15) = v33;
            if (a5)
            {
              id v34 = v32;
              int v35 = 0;
              if (v32 != (double *)&__block_literal_global_42249 && v32 != (double *)&__block_literal_global_10_42276)
              {
                int v35 = 1;
                if (v32 != (double *)&__block_literal_global_6_42258
                  && v32 != (double *)&__block_literal_global_8_42267)
                {
                  int v35 = *((unsigned char *)v34 + 118) & 1;
                }
              }

              if (v35) {
                char v36 = 8;
              }
              else {
                char v36 = 0;
              }
            }
            else
            {
              char v36 = 0;
            }
            *((unsigned char *)v30 + 128) = v30[32] & 0xF7 | v36;
            objc_storeStrong((id *)v30 + 9, v16);
            *((void *)v30 + 12) = v19;
            os_log_type_t v51 = _Block_copy(aBlock);
            os_log_type_t v52 = (void *)*((void *)v30 + 4);
            *((void *)v30 + 4) = v51;

            v30[22] = 200;
            *((unsigned char *)v30 + 128) &= ~0x20u;
            if (_nw_signposts_once != -1) {
              dispatch_once(&_nw_signposts_once, &__block_literal_global_33173);
            }
            if (_nw_signposts_enabled && kdebug_is_enabled())
            {
              char v90 = *((void *)v30 + 7);
              if (v90) {
                dispatch_data_get_size(v90);
              }
              nw_endpoint_t v93 = *((void *)v30 + 8);
              if (v93) {
                nw_content_context_get_is_final(v93);
              }
              id v12 = v95;
              kdebug_trace();
            }
            os_log_type_t v30 = v30;
            BOOL v53 = v30;
            goto LABEL_73;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v47 = (id)gLogObj;
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
          os_log_type_t v48 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v113 = OS_LOG_TYPE_ERROR;
          char v112 = 0;
          if (__nwlog_fault(v48, &v113, &v112))
          {
            if (v113 == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v49 = (id)gLogObj;
              os_log_type_t v50 = v113;
              if (os_log_type_enabled(v49, v113))
              {
                *(_DWORD *)long long buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
                _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed", buf, 0xCu);
              }
            }
            else if (v112)
            {
              os_log_type_t v54 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v49 = (id)gLogObj;
              os_log_type_t v55 = v113;
              BOOL v56 = os_log_type_enabled(v49, v113);
              if (v54)
              {
                if (v56)
                {
                  *(_DWORD *)long long buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v54;
                  _os_log_impl(&dword_1830D4000, v49, v55, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v54);
                if (!v48) {
                  goto LABEL_72;
                }
                goto LABEL_71;
              }
              if (v56)
              {
                *(_DWORD *)long long buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
                _os_log_impl(&dword_1830D4000, v49, v55, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v49 = (id)gLogObj;
              os_log_type_t v57 = v113;
              if (os_log_type_enabled(v49, v113))
              {
                *(_DWORD *)long long buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
                _os_log_impl(&dword_1830D4000, v49, v57, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
          if (!v48)
          {
LABEL_72:
            BOOL v53 = 0;
            goto LABEL_73;
          }
LABEL_71:
          free(v48);
          goto LABEL_72;
        }
        uint64_t v78 = __nwlog_obj();
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
        os_log_type_t v79 = (char *)_os_log_send_and_compose_impl();

        id v12 = v95;
        os_log_type_t v113 = OS_LOG_TYPE_ERROR;
        char v112 = 0;
        if (__nwlog_fault(v79, &v113, &v112))
        {
          if (v113 == OS_LOG_TYPE_FAULT)
          {
            BOOL v80 = __nwlog_obj();
            os_log_type_t v81 = v113;
            if (os_log_type_enabled(v80, v113))
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
              _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s Send content may only be nil if the request is marked as complete", buf, 0xCu);
            }
          }
          else
          {
            if (v112)
            {
              BOOL v84 = (char *)__nw_create_backtrace_string();
              id v85 = __nwlog_obj();
              os_log_type_t v86 = v113;
              BOOL v87 = os_log_type_enabled(v85, v113);
              if (v84)
              {
                if (v87)
                {
                  *(_DWORD *)long long buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v84;
                  _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s Send content may only be nil if the request is marked as complete, dumping backtrace:%{public}s", buf, 0x16u);
                }

                id v12 = v95;
                free(v84);
                goto LABEL_155;
              }
              if (v87)
              {
                *(_DWORD *)long long buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
                _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s Send content may only be nil if the request is marked as complete, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              id v85 = __nwlog_obj();
              os_log_type_t v91 = v113;
              if (os_log_type_enabled(v85, v113))
              {
                *(_DWORD *)long long buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_write_request_create_with_file";
                _os_log_impl(&dword_1830D4000, v85, v91, "%{public}s Send content may only be nil if the request is marked as complete, backtrace limit exceeded", buf, 0xCu);
              }
            }

            id v12 = v95;
          }
        }
LABEL_155:
        if (v79) {
          free(v79);
        }
        os_log_type_t v92 = v97[25];
        if (v92)
        {
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = __nw_write_request_create_with_file_block_invoke;
          *(void *)&unsigned char buf[24] = &unk_1E524AFA8;
          id v119 = aBlock;
          dispatch_async(v92, buf);
          BOOL v53 = 0;
          os_log_type_t v30 = v119;
        }
        else
        {
          os_log_type_t v30 = nw_error_create_posix_error(22);
          BOOL v53 = 0;
          (*((void (**)(id, void, void, _DWORD *))aBlock + 2))(aBlock, 0, 0, v30);
          id v12 = v95;
        }
LABEL_73:

        if (v53)
        {
          nw_connection_add_write_request(v97, v53);
LABEL_94:

          os_log_type_t v46 = v99;
LABEL_95:

          char v16 = v101;
LABEL_96:
          _Block_object_dispose(&v108, 8);

          _Block_object_dispose(v114, 8);
          __int16 v66 = v103;
          goto LABEL_97;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v58 = (id)gLogObj;
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_send_file_internal";
        id v59 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v113 = OS_LOG_TYPE_ERROR;
        char v112 = 0;
        if (__nwlog_fault(v59, &v113, &v112))
        {
          if (v113 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v60 = (id)gLogObj;
            os_log_type_t v61 = v113;
            if (os_log_type_enabled(v60, v113))
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_connection_send_file_internal";
              _os_log_impl(&dword_1830D4000, v60, v61, "%{public}s nw_write_request_create failed", buf, 0xCu);
            }
          }
          else if (v112)
          {
            char v62 = (char *)__nw_create_backtrace_string();
            os_log_type_t v60 = __nwlog_obj();
            os_log_type_t v63 = v113;
            BOOL v64 = os_log_type_enabled(v60, v113);
            if (v62)
            {
              if (v64)
              {
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_connection_send_file_internal";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v62;
                _os_log_impl(&dword_1830D4000, v60, v63, "%{public}s nw_write_request_create failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v62);
              if (!v59) {
                goto LABEL_94;
              }
              goto LABEL_93;
            }
            if (v64)
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_connection_send_file_internal";
              _os_log_impl(&dword_1830D4000, v60, v63, "%{public}s nw_write_request_create failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            os_log_type_t v60 = __nwlog_obj();
            os_log_type_t v65 = v113;
            if (os_log_type_enabled(v60, v113))
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_connection_send_file_internal";
              _os_log_impl(&dword_1830D4000, v60, v65, "%{public}s nw_write_request_create failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
        if (!v59) {
          goto LABEL_94;
        }
LABEL_93:
        free(v59);
        goto LABEL_94;
      }
    }
    if (!v17)
    {
      os_log_type_t v39 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 9);
      os_log_type_t v40 = *(void **)(*(void *)&v114[8] + 40);
      *(void *)(*(void *)&v114[8] + 40) = v39;

      id v14 = v103;
    }
    dispatch_qos_class_t v41 = *((_DWORD *)v12 + 48);
    v104[0] = MEMORY[0x1E4F143A8];
    v104[1] = 3221225472;
    v104[2] = __nw_connection_send_file_at_path_with_progress_block_invoke_42;
    v104[3] = &unk_1E5242B38;
    id v105 = v14;
    __int16 v106 = v114;
    nw_connection_async_client_if_needed_with_override(v12, 0, v41, v104);

    goto LABEL_96;
  }
  id v71 = __nwlog_obj();
  *(_DWORD *)uint64_t v114 = 136446210;
  *(void *)&v114[4] = "nw_connection_send_file_at_path_with_progress";
  uint64_t v68 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  LOBYTE(v108) = 0;
  if (__nwlog_fault(v68, buf, &v108))
  {
    if (buf[0] == 17)
    {
      id v69 = __nwlog_obj();
      os_log_type_t v72 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v114 = 136446210;
        *(void *)&v114[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_1830D4000, v69, v72, "%{public}s called with null handler", v114, 0xCu);
      }
LABEL_144:

      goto LABEL_145;
    }
    if (!(_BYTE)v108)
    {
      id v69 = __nwlog_obj();
      os_log_type_t v89 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v114 = 136446210;
        *(void *)&v114[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_1830D4000, v69, v89, "%{public}s called with null handler, backtrace limit exceeded", v114, 0xCu);
      }
      goto LABEL_144;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v69 = __nwlog_obj();
    os_log_type_t v76 = buf[0];
    BOOL v77 = os_log_type_enabled(v69, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v77)
      {
        *(_DWORD *)uint64_t v114 = 136446210;
        *(void *)&v114[4] = "nw_connection_send_file_at_path_with_progress";
        _os_log_impl(&dword_1830D4000, v69, v76, "%{public}s called with null handler, no backtrace", v114, 0xCu);
      }
      goto LABEL_144;
    }
    if (v77)
    {
      *(_DWORD *)uint64_t v114 = 136446466;
      *(void *)&v114[4] = "nw_connection_send_file_at_path_with_progress";
      *(_WORD *)&v114[12] = 2082;
      *(void *)&v114[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v69, v76, "%{public}s called with null handler, dumping backtrace:%{public}s", v114, 0x16u);
    }
LABEL_117:

    free(backtrace_string);
  }
LABEL_145:
  __int16 v66 = v103;
  if (v68) {
    free(v68);
  }
LABEL_97:
}

void sub_18380D7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v41 - 208), 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_connection_send_file_at_path_with_progress_block_invoke(uint64_t a1, int a2)
{
  memset(&v12, 0, sizeof(v12));
  if (fstat(a2, &v12) == -1)
  {
    posix_CFErrorRef error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8));
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = posix_error;
  }
  else
  {
    st_unsigned int size = v12.st_size;
    if ((v12.st_mode & 0xF000) != 0x8000)
    {
      uint64_t v4 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 9);
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
      id v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;
    }
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    if (st_size < *(void *)(v7 + 24)) {
      *(void *)(v7 + 24) = st_size;
    }
  }
  return 1;
}

void ___ZL32nw_connection_send_file_internalP24NWConcrete_nw_connectionPU27objcproto16OS_nw_fd_wrapper8NSObjectPU32objcproto21OS_nw_content_contextS1_mbU13block_pointerFbmbPU22objcproto11OS_nw_errorS1_E_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
  (*(void (**)(uint64_t, void, void))(v1 + 16))(v1, 0, 0);
}

void sub_18380D9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_send_file_at_path_with_progress_block_invoke_42(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, 0, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void nw_connection_batch(nw_connection_t connection, dispatch_block_t batch_block)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  nw_connection_t v3 = connection;
  uint64_t v4 = batch_block;
  uint64_t v5 = v4;
  if (!v3)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_batch";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_batch";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_batch";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v8) {
          goto LABEL_6;
        }
LABEL_41:
        free(v8);
        goto LABEL_6;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_batch";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_batch";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v29 = 0;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __nw_connection_batch_block_invoke;
    v23[3] = &unk_1E524B978;
    int v25 = buf;
    id v6 = v3;
    id v24 = v6;
    os_unfair_lock_lock((os_unfair_lock_t)&v3[17]);
    __nw_connection_batch_block_invoke((uint64_t)v23);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[17]);
    v5[2](v5);
    if (!*(unsigned char *)(*(void *)&buf[8] + 24))
    {
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_connection_batch_block_invoke_2;
      v21[3] = &unk_1E524BAA8;
      char v22 = v6;
      nw_connection_async_if_needed(v22, v21);
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  id v11 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_batch";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v8, &type, &v26)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_batch";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null batch_block", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v26)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_batch";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null batch_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  char v16 = (char *)__nw_create_backtrace_string();
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_batch";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null batch_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v18)
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_connection_batch";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null batch_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_18380DFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_batch_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = (*(unsigned char *)(*(void *)(result + 32) + 109) & 0x20) != 0;
  *(unsigned char *)(*(void *)(result + 32) + 109) |= 0x20u;
  return result;
}

void __nw_connection_batch_block_invoke_2(uint64_t a1)
{
  uint64_t v49 = 0;
  os_log_type_t v50 = &v49;
  uint64_t v51 = 0x3032000000;
  os_log_type_t v52 = __Block_byref_object_copy__24353;
  BOOL v53 = __Block_byref_object_dispose__24354;
  id v54 = 0;
  uint64_t v43 = 0;
  int v44 = &v43;
  uint64_t v45 = 0x3032000000;
  os_log_type_t v46 = __Block_byref_object_copy__24353;
  id v47 = __Block_byref_object_dispose__24354;
  id v48 = 0;
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  nw_connection_t v3 = v2 + 34;
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3221225472;
  v39[2] = __nw_connection_batch_block_invoke_3;
  v39[3] = &unk_1E5244950;
  os_log_type_t v40 = v2;
  uint64_t v41 = &v49;
  uint64_t v42 = &v43;
  os_unfair_lock_lock(v3);
  __nw_connection_batch_block_invoke_3(v39);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = (void *)v50[5];
  if (!v4) {
    goto LABEL_32;
  }
  uint64_t v5 = v4;
  id v6 = (unsigned __int8 *)v5;
  do
  {
    while (1)
    {
      uint64_t v7 = v5;
      id v6 = v6;
      id v8 = *((id *)v6 + 1);
      id v9 = v8;
      if (v8)
      {
        unsigned int v10 = v6[128];
        if ((v10 & 3) == 0 && !*((void *)v6 + 14) && !v8[14] && *((void *)v6 + 8) == v8[8])
        {
          int v11 = (v10 >> 2) & 1;
          unsigned int v12 = *((unsigned __int8 *)v8 + 128);
          if (v11 == ((v12 >> 2) & 1)
            && ((v12 ^ v10) & 8) == 0
            && *((void *)v6 + 13) == v8[13]
            && !*((void *)v6 + 9)
            && !v8[9])
          {
            break;
          }
        }
      }

      id v13 = (unsigned __int8 *)*((id *)v6 + 1);
      id v6 = v13;
      if (!v13) {
        goto LABEL_26;
      }
    }
    if (!v11)
    {
      os_log_type_t v37 = _Block_copy(*((const void **)v6 + 3));
      os_log_type_t v14 = _Block_copy(*((const void **)v9 + 3));
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZL35nw_write_request_coalesce_with_nextP27NWConcrete_nw_write_requestS0__block_invoke;
      aBlock[3] = &unk_1E523FDC8;
      id v56 = v37;
      id v57 = v14;
      id v38 = v37;
      id v15 = v14;
      char v16 = _Block_copy(aBlock);
      os_log_type_t v17 = (void *)*((void *)v6 + 3);
      *((void *)v6 + 3) = v16;
    }
    BOOL v18 = *((void *)v6 + 7);
    os_log_type_t v19 = *((void *)v9 + 7);
    if (v18)
    {
      if (!v19) {
        goto LABEL_21;
      }
      dispatch_data_t concat = dispatch_data_create_concat(v18, v19);
    }
    else
    {
      dispatch_data_t concat = v19;
    }
    id v21 = (void *)*((void *)v6 + 7);
    *((void *)v6 + 7) = concat;

LABEL_21:
    objc_storeStrong((id *)v6 + 1, *((id *)v9 + 1));
    if ((id)v5[2] == v9) {
      v5[2] = v6;
    }
    char v22 = (void *)*((void *)v9 + 1);
    *((void *)v9 + 1) = 0;
  }
  while (v6);
LABEL_26:

  while (1)
  {
    id v23 = v50;
    id v24 = (void *)v50[5];
    if (!v24) {
      break;
    }
    id v25 = v24;
    BOOL v26 = nw_write_request_list_remove_head((void *)v23[5]);
    id v27 = (void *)v50[5];
    void v50[5] = v26;

    nw_connection_add_write_request_on_queue(*(void **)(a1 + 32), v25, 0);
  }
  uint64_t v28 = *(void *)(a1 + 32);
  char v29 = *(void **)(v28 + 144);
  if (v29 && (*(unsigned char *)(v28 + 109) & 0x40) != 0) {
    nw_endpoint_handler_service_writes(v29);
  }
LABEL_32:
  uint64_t v30 = v44;
  __int16 v31 = (void *)v44[5];
  if (v31)
  {
    do
    {
      id v32 = v31;
      BOOL v33 = nw_read_request_list_remove_head((void *)v30[5]);
      id v34 = (void *)v44[5];
      v44[5] = v33;

      nw_connection_add_read_request_on_queue(*(void **)(a1 + 32), v32, 0);
      uint64_t v30 = v44;
      __int16 v31 = (void *)v44[5];
    }
    while (v31);
    uint64_t v35 = *(void *)(a1 + 32);
    char v36 = *(void **)(v35 + 144);
    if (v36 && (*(unsigned char *)(v35 + 109) & 0x40) != 0) {
      nw_endpoint_handler_service_reads(v36);
    }
  }

  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v49, 8);
}

void sub_18380E454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a24, 8);

  _Unwind_Resume(a1);
}

void __nw_connection_batch_block_invoke_3(void *a1)
{
  *(unsigned char *)(a1[4] + 109) &= ~0x20u;
  objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), *(id *)(a1[4] + 112));
  uint64_t v2 = a1[4];
  nw_connection_t v3 = *(void **)(v2 + 112);
  *(void *)(v2 + 112) = 0;

  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a1[4] + 120));
  uint64_t v4 = a1[4];
  uint64_t v5 = *(void **)(v4 + 120);
  *(void *)(v4 + 120) = 0;
}

uint64_t nw_connection_write(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = v7;
  if (v6)
  {
    if (v7)
    {
      if (v7 == &__block_literal_global_45)
      {
        uint64_t v9 = 1;
        nw_connection_send(v5, v6, (nw_content_context_t)&__block_literal_global_42249, 1, &__block_literal_global_24376);
      }
      else
      {
        completion[0] = MEMORY[0x1E4F143A8];
        completion[1] = 3221225472;
        completion[2] = __nw_connection_write_block_invoke;
        completion[3] = &unk_1E52485F8;
        id v25 = v7;
        nw_connection_send(v5, v6, (nw_content_context_t)&__block_literal_global_42249, 1, completion);

        uint64_t v9 = 1;
      }
      goto LABEL_6;
    }
    id v15 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v29 = "nw_connection_write";
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v12, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v13 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v29 = "nw_connection_write";
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v26)
      {
        id v13 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v29 = "nw_connection_write";
          _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v13 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)long long buf = 136446210;
          char v29 = "nw_connection_write";
          _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v21)
      {
        *(_DWORD *)long long buf = 136446466;
        char v29 = "nw_connection_write";
        __int16 v30 = 2082;
        __int16 v31 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    int v11 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v29 = "nw_connection_write";
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v12, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v29 = "nw_connection_write";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null data", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v26)
      {
        id v13 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          char v29 = "nw_connection_write";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)long long buf = 136446210;
          char v29 = "nw_connection_write";
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null data, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v19)
      {
        *(_DWORD *)long long buf = 136446466;
        char v29 = "nw_connection_write";
        __int16 v30 = 2082;
        __int16 v31 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v12) {
    free(v12);
  }
  uint64_t v9 = 0;
LABEL_6:

  return v9;
}

void sub_18380EA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_connection_write_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3) {

  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18380EB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_write_multiple(void *a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a4;
  uint64_t v9 = v8;
  if (v7)
  {
    if (v8)
    {
      *(void *)os_log_type_t v65 = 0;
      *(void *)&v65[8] = v65;
      *(void *)&v65[16] = 0x2020000000;
      char v66 = 0;
      v55[0] = MEMORY[0x1E4F143A8];
      v55[1] = 3221225472;
      v55[2] = __nw_connection_write_multiple_block_invoke;
      v55[3] = &unk_1E524B978;
      id v57 = v65;
      unsigned int v10 = v7;
      id v56 = v10;
      os_unfair_lock_lock(v7 + 34);
      __nw_connection_write_multiple_block_invoke((uint64_t)v55);
      os_unfair_lock_unlock(v7 + 34);
      if (*(unsigned char *)(*(void *)&v65[8] + 24))
      {
        if (a2)
        {
          if (a3)
          {
            batch_block[0] = MEMORY[0x1E4F143A8];
            batch_block[1] = 3221225472;
            batch_block[2] = __nw_connection_write_multiple_block_invoke_2;
            batch_block[3] = &unk_1E523DD10;
            id v49 = v9;
            int v51 = a3;
            id v48 = v10;
            uint64_t v50 = a2;
            nw_connection_batch(v48, batch_block);

            uint64_t v11 = 1;
LABEL_49:

            _Block_object_dispose(v65, 8);
            goto LABEL_50;
          }
          BOOL v19 = "datagram_count parameter is 0";
          uint64_t v20 = *(void *)&v10[4]._os_unfair_lock_opaque;
          if (!v20) {
            goto LABEL_35;
          }
        }
        else
        {
          BOOL v19 = "datagrams parameter is nil";
          uint64_t v20 = *(void *)&v10[4]._os_unfair_lock_opaque;
          if (!v20)
          {
LABEL_35:
            dispatch_qos_class_t os_unfair_lock_opaque = v10[48]._os_unfair_lock_opaque;
            v52[0] = MEMORY[0x1E4F143A8];
            v52[1] = 3221225472;
            v52[2] = __nw_connection_write_multiple_block_invoke_48;
            v52[3] = &unk_1E524AFA8;
            id v53 = v9;
            nw_connection_async_client_if_needed_with_override(v10, 0, os_unfair_lock_opaque, v52);

LABEL_48:
            uint64_t v11 = 0;
            goto LABEL_49;
          }
        }
        if (!nw_path_parameters_get_logging_disabled(*(void *)(v20 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          char v26 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            uint32_t v27 = v10[112]._os_unfair_lock_opaque;
            *(_DWORD *)long long buf = 136446722;
            os_log_type_t v60 = "nw_connection_write_multiple";
            __int16 v61 = 1024;
            uint32_t v62 = v27;
            __int16 v63 = 2082;
            BOOL v64 = v19;
            _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s [C%u] %{public}s, sending error callback", buf, 0x1Cu);
          }
        }
        goto LABEL_35;
      }
      uint64_t v12 = *(void *)&v10[4]._os_unfair_lock_opaque;
      if (!v12 || nw_path_parameters_get_logging_disabled(*(void *)(v12 + 104))) {
        goto LABEL_48;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v13 = (id)gconnectionLogObj;
      uint32_t v14 = v10[112]._os_unfair_lock_opaque;
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v60 = "nw_connection_write_multiple";
      __int16 v61 = 1024;
      uint32_t v62 = v14;
      id v15 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v58 = OS_LOG_TYPE_ERROR;
      char v54 = 0;
      if (__nwlog_fault(v15, &v58, &v54))
      {
        if (v58 == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v16 = (id)gconnectionLogObj;
          os_log_type_t v17 = v58;
          if (os_log_type_enabled(v16, v58))
          {
            uint32_t v18 = v10[112]._os_unfair_lock_opaque;
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v60 = "nw_connection_write_multiple";
            __int16 v61 = 1024;
            uint32_t v62 = v18;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s [C%u] no client queue", buf, 0x12u);
          }
        }
        else if (v54)
        {
          backtrace_string = __nw_create_backtrace_string();
          if (backtrace_string)
          {
            os_log_type_t v22 = (char *)backtrace_string;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v23 = (id)gconnectionLogObj;
            os_log_type_t v24 = v58;
            if (os_log_type_enabled(v23, v58))
            {
              uint32_t v25 = v10[112]._os_unfair_lock_opaque;
              *(_DWORD *)long long buf = 136446722;
              os_log_type_t v60 = "nw_connection_write_multiple";
              __int16 v61 = 1024;
              uint32_t v62 = v25;
              __int16 v63 = 2082;
              BOOL v64 = v22;
              _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s [C%u] no client queue, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v22);
            if (!v15) {
              goto LABEL_48;
            }
            goto LABEL_47;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v16 = (id)gconnectionLogObj;
          os_log_type_t v31 = v58;
          if (os_log_type_enabled(v16, v58))
          {
            uint32_t v32 = v10[112]._os_unfair_lock_opaque;
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v60 = "nw_connection_write_multiple";
            __int16 v61 = 1024;
            uint32_t v62 = v32;
            _os_log_impl(&dword_1830D4000, v16, v31, "%{public}s [C%u] no client queue, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v16 = (id)gconnectionLogObj;
          os_log_type_t v29 = v58;
          if (os_log_type_enabled(v16, v58))
          {
            uint32_t v30 = v10[112]._os_unfair_lock_opaque;
            *(_DWORD *)long long buf = 136446466;
            os_log_type_t v60 = "nw_connection_write_multiple";
            __int16 v61 = 1024;
            uint32_t v62 = v30;
            _os_log_impl(&dword_1830D4000, v16, v29, "%{public}s [C%u] no client queue, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
      if (!v15) {
        goto LABEL_48;
      }
LABEL_47:
      free(v15);
      goto LABEL_48;
    }
    id v38 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v65 = 136446210;
    *(void *)&v65[4] = "nw_connection_write_multiple";
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t v58 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v35, buf, &v58))
    {
      if (buf[0] == 17)
      {
        char v36 = __nwlog_obj();
        os_log_type_t v39 = buf[0];
        if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v65 = 136446210;
          *(void *)&v65[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_1830D4000, v36, v39, "%{public}s called with null handler", v65, 0xCu);
        }
LABEL_82:

        goto LABEL_83;
      }
      if (v58 == OS_LOG_TYPE_DEFAULT)
      {
        char v36 = __nwlog_obj();
        os_log_type_t v46 = buf[0];
        if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v65 = 136446210;
          *(void *)&v65[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_1830D4000, v36, v46, "%{public}s called with null handler, backtrace limit exceeded", v65, 0xCu);
        }
        goto LABEL_82;
      }
      os_log_type_t v40 = (char *)__nw_create_backtrace_string();
      char v36 = __nwlog_obj();
      os_log_type_t v43 = buf[0];
      BOOL v44 = os_log_type_enabled(v36, (os_log_type_t)buf[0]);
      if (!v40)
      {
        if (v44)
        {
          *(_DWORD *)os_log_type_t v65 = 136446210;
          *(void *)&v65[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_1830D4000, v36, v43, "%{public}s called with null handler, no backtrace", v65, 0xCu);
        }
        goto LABEL_82;
      }
      if (v44)
      {
        *(_DWORD *)os_log_type_t v65 = 136446466;
        *(void *)&v65[4] = "nw_connection_write_multiple";
        *(_WORD *)&v65[12] = 2082;
        *(void *)&v65[14] = v40;
        _os_log_impl(&dword_1830D4000, v36, v43, "%{public}s called with null handler, dumping backtrace:%{public}s", v65, 0x16u);
      }
      goto LABEL_70;
    }
  }
  else
  {
    id v34 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v65 = 136446210;
    *(void *)&v65[4] = "nw_connection_write_multiple";
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t v58 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v35, buf, &v58))
    {
      if (buf[0] == 17)
      {
        char v36 = __nwlog_obj();
        os_log_type_t v37 = buf[0];
        if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v65 = 136446210;
          *(void *)&v65[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s called with null connection", v65, 0xCu);
        }
        goto LABEL_82;
      }
      if (v58 == OS_LOG_TYPE_DEFAULT)
      {
        char v36 = __nwlog_obj();
        os_log_type_t v45 = buf[0];
        if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v65 = 136446210;
          *(void *)&v65[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_1830D4000, v36, v45, "%{public}s called with null connection, backtrace limit exceeded", v65, 0xCu);
        }
        goto LABEL_82;
      }
      os_log_type_t v40 = (char *)__nw_create_backtrace_string();
      char v36 = __nwlog_obj();
      os_log_type_t v41 = buf[0];
      BOOL v42 = os_log_type_enabled(v36, (os_log_type_t)buf[0]);
      if (!v40)
      {
        if (v42)
        {
          *(_DWORD *)os_log_type_t v65 = 136446210;
          *(void *)&v65[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_1830D4000, v36, v41, "%{public}s called with null connection, no backtrace", v65, 0xCu);
        }
        goto LABEL_82;
      }
      if (v42)
      {
        *(_DWORD *)os_log_type_t v65 = 136446466;
        *(void *)&v65[4] = "nw_connection_write_multiple";
        *(_WORD *)&v65[12] = 2082;
        *(void *)&v65[14] = v40;
        _os_log_impl(&dword_1830D4000, v36, v41, "%{public}s called with null connection, dumping backtrace:%{public}s", v65, 0x16u);
      }
LABEL_70:

      free(v40);
    }
  }
LABEL_83:
  if (v35) {
    free(v35);
  }
  uint64_t v11 = 0;
LABEL_50:

  return v11;
}

void sub_18380F59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_write_multiple_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 200) != 0;
  return result;
}

uint64_t __nw_connection_write_multiple_block_invoke_48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __nw_connection_write_multiple_block_invoke_2(uint64_t a1)
{
  if (*(_UNKNOWN **)(a1 + 40) == &__block_literal_global_45)
  {
    if (*(_DWORD *)(a1 + 56))
    {
      unint64_t v7 = 0;
      do
        nw_connection_send(*(nw_connection_t *)(a1 + 32), *(dispatch_data_t *)(*(void *)(a1 + 48) + 8 * v7++), (nw_content_context_t)&__block_literal_global_42249, 1, &__block_literal_global_24376);
      while (v7 < *(unsigned int *)(a1 + 56));
    }
  }
  else
  {
    v14[0] = 0;
    v14[1] = v14;
    int v15 = 0;
    v14[2] = 0x2020000000;
    uint64_t v2 = dispatch_group_create();
    if (*(_DWORD *)(a1 + 56))
    {
      unint64_t v3 = 0;
      do
      {
        dispatch_group_enter(v2);
        id v4 = *(NSObject **)(a1 + 32);
        uint64_t v5 = *(NSObject **)(*(void *)(a1 + 48) + 8 * v3);
        completion[0] = MEMORY[0x1E4F143A8];
        completion[1] = 3221225472;
        completion[2] = __nw_connection_write_multiple_block_invoke_3;
        completion[3] = &unk_1E523DCE8;
        id v13 = v14;
        uint64_t v12 = v2;
        nw_connection_send(v4, v5, (nw_content_context_t)&__block_literal_global_42249, 1, completion);

        ++v3;
      }
      while (v3 < *(unsigned int *)(a1 + 56));
    }
    id v6 = *(NSObject **)(*(void *)(a1 + 32) + 200);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __nw_connection_write_multiple_block_invoke_4;
    void v8[3] = &unk_1E5242B38;
    id v9 = *(id *)(a1 + 40);
    unsigned int v10 = v14;
    dispatch_group_notify(v2, v6, v8);

    _Block_object_dispose(v14, 8);
  }
}

void sub_18380F818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_write_multiple_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void __nw_connection_write_multiple_block_invoke_3(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5)
  {
    unint64_t v3 = v5;
    int v4 = v3[3];

    if (v4) {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4;
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

BOOL nw_connection_write_close(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v4)
  {
    if (v4 == &__block_literal_global_45)
    {
      nw_connection_send(v3, 0, (nw_content_context_t)&__block_literal_global_6_42258, 1, &__block_literal_global_24376);
    }
    else
    {
      completion[0] = MEMORY[0x1E4F143A8];
      completion[1] = 3221225472;
      completion[2] = __nw_connection_write_close_block_invoke;
      completion[3] = &unk_1E52485F8;
      id v16 = v4;
      nw_connection_send(v3, 0, (nw_content_context_t)&__block_literal_global_6_42258, 1, completion);
    }
    goto LABEL_5;
  }
  unint64_t v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v20 = "nw_connection_write_close";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v8, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_connection_write_close";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v20 = "nw_connection_write_close";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_connection_write_close";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_connection_write_close";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:

  return v5 != 0;
}

void sub_18380FC10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_connection_write_close_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3) {

  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18380FCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_get_unsent_byte_count(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    int v19 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_get_unsent_byte_count_block_invoke;
    v13[3] = &unk_1E524B978;
    os_log_type_t v14 = v1;
    int v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_get_unsent_byte_count_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    uint64_t v3 = *(unsigned int *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_get_unsent_byte_count";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_get_unsent_byte_count";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_get_unsent_byte_count";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_get_unsent_byte_count";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_get_unsent_byte_count";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_get_unsent_byte_count_block_invoke(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) != 0)
  {
    id v6 = (os_unfair_lock_s *)*(id *)(v2 + 144);
    unint64_t v7 = v6;
    if (v6)
    {
      os_unfair_lock_lock(v6 + 28);
      if (v7[29]._os_unfair_lock_opaque != 2)
      {
        int v13 = 0;
        goto LABEL_20;
      }
      os_log_type_t v8 = (os_unfair_lock_s *)*(id *)&v7[62]._os_unfair_lock_opaque;
      id v9 = v8;
      if (v8)
      {
        os_unfair_lock_lock(v8 + 220);
        *(void *)os_log_type_t type = 0;
        os_log_type_t v31 = type;
        uint64_t v32 = 0x2020000000;
        uint32_t os_unfair_lock_opaque = v9[224]._os_unfair_lock_opaque;
        id v10 = *(id *)&v9[222]._os_unfair_lock_opaque;
        if ((v9[8]._os_unfair_lock_opaque & 2) == 0)
        {
          BOOL v11 = *(void **)&v9[234]._os_unfair_lock_opaque;
          if (v11)
          {
            uint64_t v12 = nw_endpoint_handler_copy_connected_socket_wrapper(v11);

            id v10 = (id)v12;
          }
        }
        if (v10)
        {
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = __nw_endpoint_flow_get_unsent_byte_count_block_invoke;
          char v36 = &unk_1E524A270;
          os_log_type_t v37 = type;
          nw_fd_wrapper_get_fd(v10, buf);
        }
        os_unfair_lock_unlock(v9 + 220);
        int v13 = *((_DWORD *)v31 + 6);

        _Block_object_dispose(type, 8);
LABEL_18:

LABEL_20:
        os_unfair_lock_unlock(v7 + 28);
LABEL_21:

        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v13;
        return;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v18 = (id)gLogObj;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_unsent_byte_count";
      int v19 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v19, type, &v34))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v20 = (id)gLogObj;
          os_log_type_t v21 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_unsent_byte_count";
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null endpoint_flow", buf, 0xCu);
          }
        }
        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v20 = (id)gLogObj;
          os_log_type_t v26 = type[0];
          BOOL v27 = os_log_type_enabled(v20, type[0]);
          if (backtrace_string)
          {
            if (v27)
            {
              *(_DWORD *)long long buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_unsent_byte_count";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v20, v26, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_58;
          }
          if (v27)
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_unsent_byte_count";
            _os_log_impl(&dword_1830D4000, v20, v26, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v20 = (id)gLogObj;
          os_log_type_t v29 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_unsent_byte_count";
            _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_58:
      if (v19) {
        free(v19);
      }
      int v13 = 0;
      goto LABEL_18;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
    int v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v15, type, &v34))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v16 = (id)gLogObj;
        os_log_type_t v17 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v34)
      {
        os_log_type_t v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v16 = (id)gLogObj;
        os_log_type_t v23 = type[0];
        BOOL v24 = os_log_type_enabled(v16, type[0]);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v22;
            _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v22);
          goto LABEL_49;
        }
        if (v24)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
          _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v16 = (id)gLogObj;
        os_log_type_t v28 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
          _os_log_impl(&dword_1830D4000, v16, v28, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_49:
    if (v15) {
      free(v15);
    }
    int v13 = 0;
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_get_unsent_byte_count_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_get_unsent_byte_count on unconnected nw_connection", buf, 0x12u);
    }
  }
}

void sub_183810788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nw_connection_tls_apply(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (v3)
  {
    if (v4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      *(_DWORD *)long long buf = 136446210;
      BOOL v27 = "nw_connection_tls_apply";
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v24 = 0;
      if (!__nwlog_fault(v7, &type, &v24)) {
        goto LABEL_20;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s nw_connection_tls_apply is not implemented", buf, 0xCu);
        }
LABEL_19:

        goto LABEL_20;
      }
      if (!v24)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s nw_connection_tls_apply is not implemented, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s nw_connection_tls_apply is not implemented, no backtrace", buf, 0xCu);
        }
        goto LABEL_19;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v27 = "nw_connection_tls_apply";
        __int16 v28 = 2082;
        os_log_type_t v29 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s nw_connection_tls_apply is not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_12:

      free(backtrace_string);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    char v16 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v27 = "nw_connection_tls_apply";
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v7, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null apply_block", buf, 0xCu);
        }
        goto LABEL_19;
      }
      if (!v24)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_1830D4000, v8, v23, "%{public}s called with null apply_block, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s called with null apply_block, no backtrace", buf, 0xCu);
        }
        goto LABEL_19;
      }
      if (v21)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v27 = "nw_connection_tls_apply";
        __int16 v28 = 2082;
        os_log_type_t v29 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s called with null apply_block, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_12;
    }
  }
  else
  {
    id v14 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v27 = "nw_connection_tls_apply";
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v7, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_19;
      }
      if (!v24)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_1830D4000, v8, v22, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)long long buf = 136446210;
          BOOL v27 = "nw_connection_tls_apply";
          _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_19;
      }
      if (v19)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v27 = "nw_connection_tls_apply";
        __int16 v28 = 2082;
        os_log_type_t v29 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_12;
    }
  }
LABEL_20:
  if (v7) {
LABEL_21:
  }
    free(v7);
LABEL_22:
}

uint64_t nw_connection_modify_connected_protocol_stack_internal(void *a1, void *a2, char a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  unint64_t v7 = v6;
  if (v5)
  {
    if (v6)
    {
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = __nw_connection_modify_connected_protocol_stack_internal_block_invoke;
      v23[3] = &unk_1E523FD18;
      id v24 = v5;
      char v26 = a3;
      id v25 = v7;
      nw_connection_async_if_needed(v24, v23);

      uint64_t v8 = 1;
      goto LABEL_4;
    }
    id v14 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v30 = "nw_connection_modify_connected_protocol_stack_internal";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v28 = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v11, &v28, &v27))
    {
      if (v28 == OS_LOG_TYPE_FAULT)
      {
        BOOL v12 = __nwlog_obj();
        os_log_type_t v15 = v28;
        if (os_log_type_enabled(v12, v28))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null modifier", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v27)
      {
        BOOL v12 = __nwlog_obj();
        os_log_type_t v22 = v28;
        if (os_log_type_enabled(v12, v28))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null modifier, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v12 = __nwlog_obj();
      os_log_type_t v19 = v28;
      BOOL v20 = os_log_type_enabled(v12, v28);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null modifier, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v20)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v30 = "nw_connection_modify_connected_protocol_stack_internal";
        __int16 v31 = 2082;
        uint64_t v32 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null modifier, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    id v10 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v30 = "nw_connection_modify_connected_protocol_stack_internal";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v28 = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v11, &v28, &v27))
    {
      if (v28 == OS_LOG_TYPE_FAULT)
      {
        BOOL v12 = __nwlog_obj();
        os_log_type_t v13 = v28;
        if (os_log_type_enabled(v12, v28))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v27)
      {
        BOOL v12 = __nwlog_obj();
        os_log_type_t v21 = v28;
        if (os_log_type_enabled(v12, v28))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v12 = __nwlog_obj();
      os_log_type_t v17 = v28;
      BOOL v18 = os_log_type_enabled(v12, v28);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v30 = "nw_connection_modify_connected_protocol_stack_internal";
        __int16 v31 = 2082;
        uint64_t v32 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v11) {
    free(v11);
  }
  uint64_t v8 = 0;
LABEL_4:

  return v8;
}

void sub_1838113E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_connection_modify_connected_protocol_stack_internal_block_invoke(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) != 0)
  {
    id v6 = *(void **)(v2 + 144);
    if (*(unsigned char *)(a1 + 48)) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = nw_endpoint_handler_copy_top_protocol_flow_handler(v6);
    }
    p_super = &v7->super;
    if (nw_endpoint_handler_modify_protocol_stack(v7, *(void **)(a1 + 40))) {
      goto LABEL_34;
    }
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 16);
    if (v8 && !nw_path_parameters_get_logging_disabled(*(void *)(v8 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v9 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        *(_DWORD *)long long buf = 136446466;
        uint64_t v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
        __int16 v33 = 1024;
        int v34 = v10;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Failed to modify protocol stack, cancelling connection", buf, 0x12u);
      }
    }
    uint64_t v11 = *(void *)(a1 + 32);
    BOOL v12 = *(void **)(v11 + 144);
    if (v12)
    {
      nw_endpoint_handler_cancel(v12, 0, 0);
LABEL_34:

      return;
    }
    uint64_t v13 = *(void *)(v11 + 16);
    if (!v13 || nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104))) {
      goto LABEL_34;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v14 = (id)gconnectionLogObj;
    int v15 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
    *(_DWORD *)long long buf = 136446466;
    uint64_t v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
    __int16 v33 = 1024;
    int v34 = v15;
    char v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v16, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v17 = (id)gconnectionLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          int v19 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446466;
          uint64_t v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
          __int16 v33 = 1024;
          int v34 = v19;
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s [C%u] No parent endpoint handler found", buf, 0x12u);
        }
      }
      else if (v29)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          os_log_type_t v21 = (char *)backtrace_string;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v22 = (id)gconnectionLogObj;
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v22, type))
          {
            int v24 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
            *(_DWORD *)long long buf = 136446722;
            uint64_t v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
            __int16 v33 = 1024;
            int v34 = v24;
            __int16 v35 = 2082;
            char v36 = v21;
            _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s [C%u] No parent endpoint handler found, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v21);
          if (!v16) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v17 = (id)gconnectionLogObj;
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v17, type))
        {
          int v28 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446466;
          uint64_t v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
          __int16 v33 = 1024;
          int v34 = v28;
          _os_log_impl(&dword_1830D4000, v17, v27, "%{public}s [C%u] No parent endpoint handler found, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v17 = (id)gconnectionLogObj;
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v17, type))
        {
          int v26 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446466;
          uint64_t v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
          __int16 v33 = 1024;
          int v34 = v26;
          _os_log_impl(&dword_1830D4000, v17, v25, "%{public}s [C%u] No parent endpoint handler found, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v16) {
      goto LABEL_34;
    }
LABEL_33:
    free(v16);
    goto LABEL_34;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    p_super = (id)gconnectionLogObj;
    if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      uint64_t v32 = "nw_connection_modify_connected_protocol_stack_internal_block_invoke";
      __int16 v33 = 1024;
      int v34 = v5;
      _os_log_impl(&dword_1830D4000, p_super, OS_LOG_TYPE_ERROR, "%{public}s [C%u] No connected endpoint handler found", buf, 0x12u);
    }
    goto LABEL_34;
  }
}

void sub_183811978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_modify_connected_protocol_stack(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v6 = nw_connection_modify_connected_protocol_stack_internal(v3, v4, 0);
      goto LABEL_4;
    }
    BOOL v12 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v24 = "nw_connection_modify_connected_protocol_stack";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null modifier", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        int v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null modifier, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)long long buf = 136446210;
          int v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null modifier, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)long long buf = 136446466;
        int v24 = "nw_connection_modify_connected_protocol_stack";
        __int16 v25 = 2082;
        int v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null modifier, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v24 = "nw_connection_modify_connected_protocol_stack";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        int v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)long long buf = 136446210;
          int v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)long long buf = 136446210;
          int v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)long long buf = 136446466;
        int v24 = "nw_connection_modify_connected_protocol_stack";
        __int16 v25 = 2082;
        int v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_4:

  return v6;
}

void sub_183811E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_append_and_start_application_protocol(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    uint64_t v6 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    int v26 = "nw_connection_append_and_start_application_protocol";
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v24 = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v7, &v24, &v23)) {
      goto LABEL_38;
    }
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v24;
      if (os_log_type_enabled(v8, v24))
      {
        *(_DWORD *)long long buf = 136446210;
        int v26 = "nw_connection_append_and_start_application_protocol";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = v24;
      BOOL v14 = os_log_type_enabled(v8, v24);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          int v26 = "nw_connection_append_and_start_application_protocol";
          __int16 v27 = 2082;
          int v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        int v26 = "nw_connection_append_and_start_application_protocol";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v18 = v24;
      if (os_log_type_enabled(v8, v24))
      {
        *(_DWORD *)long long buf = 136446210;
        int v26 = "nw_connection_append_and_start_application_protocol";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __nw_connection_append_and_start_application_protocol_block_invoke;
    v20[3] = &unk_1E524B9A0;
    id v21 = v3;
    id v22 = v5;
    nw_connection_async_if_needed(v21, v20);

    goto LABEL_4;
  }
  int v10 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  int v26 = "nw_connection_append_and_start_application_protocol";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v24 = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v7, &v24, &v23)) {
    goto LABEL_38;
  }
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v11 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)long long buf = 136446210;
      int v26 = "nw_connection_append_and_start_application_protocol";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v19 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)long long buf = 136446210;
      int v26 = "nw_connection_append_and_start_application_protocol";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  uint64_t v8 = __nwlog_obj();
  os_log_type_t v16 = v24;
  BOOL v17 = os_log_type_enabled(v8, v24);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)long long buf = 136446210;
      int v26 = "nw_connection_append_and_start_application_protocol";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)long long buf = 136446466;
    int v26 = "nw_connection_append_and_start_application_protocol";
    __int16 v27 = 2082;
    int v28 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_183812388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_connection_append_and_start_application_protocol_block_invoke(uint64_t a1)
{
  *(void *)&v38[13] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 80) == 3)
  {
    if ((*(unsigned char *)(v2 + 109) & 0x40) == 0)
    {
      uint64_t v3 = *(void *)(v2 + 16);
      if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v4 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446466;
          char v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
          __int16 v37 = 1024;
          *(_DWORD *)uint64_t v38 = v5;
          _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] No connected endpoint handler found, cannot add new protocol", buf, 0x12u);
        }
      }
      return;
    }
    if (nw_endpoint_handler_append_and_start_application_protocol(*(void **)(v2 + 144), *(void **)(a1 + 40))) {
      return;
    }
    uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 16);
    if (v14 && !nw_path_parameters_get_logging_disabled(*(void *)(v14 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v15 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        *(_DWORD *)long long buf = 136446466;
        char v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
        __int16 v37 = 1024;
        *(_DWORD *)uint64_t v38 = v16;
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Failed to append and start new protocol, cancelling connection", buf, 0x12u);
      }
    }
    BOOL v17 = *(void **)(*(void *)(a1 + 32) + 144);
    if (v17)
    {
      nw_endpoint_handler_cancel(v17, 0, 0);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v25 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    char v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
    int v26 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v26, &type, &v33)) {
      goto LABEL_66;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v27 = (id)gLogObj;
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
        _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s Connection has no parent endpoint handler", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v27 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v27, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)long long buf = 136446466;
          char v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
          __int16 v37 = 2082;
          *(void *)uint64_t v38 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s Connection has no parent endpoint handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_66;
      }
      if (v31)
      {
        *(_DWORD *)long long buf = 136446210;
        char v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
        _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s Connection has no parent endpoint handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v27 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)long long buf = 136446210;
        char v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
        _os_log_impl(&dword_1830D4000, v27, v32, "%{public}s Connection has no parent endpoint handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_66:
    if (!v26) {
      return;
    }
    os_log_type_t v13 = (char *)v26;
LABEL_23:
    free(v13);
    return;
  }
  uint64_t v6 = *(void *)(v2 + 16);
  if (!v6 || nw_path_parameters_get_logging_disabled(*(void *)(v6 + 104))) {
    return;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  id v7 = (id)gconnectionLogObj;
  int v8 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
  *(_DWORD *)long long buf = 136446466;
  char v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
  __int16 v37 = 1024;
  *(_DWORD *)uint64_t v38 = v8;
  os_log_type_t v9 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (!__nwlog_fault(v9, &type, &v33)) {
    goto LABEL_21;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v10 = (id)gconnectionLogObj;
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v10, type))
    {
      int v12 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      char v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = v12;
      _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s [C%u] Connection is not ready, cannot add new protocol", buf, 0x12u);
    }
LABEL_20:

LABEL_21:
    if (!v9) {
      return;
    }
    goto LABEL_22;
  }
  if (!v33)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v10 = (id)gconnectionLogObj;
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v10, type))
    {
      int v23 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      char v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = v23;
      _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s [C%u] Connection is not ready, cannot add new protocol, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_20;
  }
  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  int v10 = (id)gconnectionLogObj;
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v10, type);
  if (!v18)
  {
    if (v20)
    {
      int v24 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      char v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = v24;
      _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s [C%u] Connection is not ready, cannot add new protocol, no backtrace", buf, 0x12u);
    }
    goto LABEL_20;
  }
  if (v20)
  {
    int v21 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
    *(_DWORD *)long long buf = 136446722;
    char v36 = "nw_connection_append_and_start_application_protocol_block_invoke";
    __int16 v37 = 1024;
    *(_DWORD *)uint64_t v38 = v21;
    v38[2] = 2082;
    *(void *)&v38[3] = v18;
    _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s [C%u] Connection is not ready, cannot add new protocol, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v18);
  if (v9)
  {
LABEL_22:
    os_log_type_t v13 = (char *)v9;
    goto LABEL_23;
  }
}

void __nw_connection_start_tls_block_invoke(uint64_t a1)
{
  *(void *)&v42[13] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 80) == 3)
  {
    if ((*(unsigned char *)(v2 + 109) & 0x40) == 0)
    {
      uint64_t v3 = *(void *)(v2 + 16);
      if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v4 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
          __int16 v41 = 1024;
          *(_DWORD *)BOOL v42 = v5;
          _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] No connected endpoint handler found", buf, 0x12u);
        }
      }
      return;
    }
    if (nw_endpoint_start_tls_while_connected(*(void **)(v2 + 144))) {
      return;
    }
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 16);
    if (v11 && !nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v12 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
        __int16 v41 = 1024;
        *(_DWORD *)BOOL v42 = v13;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Failed to start TLS, cancelling connection", buf, 0x12u);
      }
    }
    uint64_t v14 = *(void **)(*(void *)(a1 + 32) + 144);
    if (v14)
    {
      nw_endpoint_handler_cancel(v14, 0, 0);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v26 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
    __int16 v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v27, &type, &v37)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v28 = (id)gLogObj;
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
        _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s Connection has no parent endpoint handler", buf, 0xCu);
      }
    }
    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v28, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
          __int16 v41 = 2082;
          *(void *)BOOL v42 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s Connection has no parent endpoint handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_74;
      }
      if (v34)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
        _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s Connection has no parent endpoint handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
        _os_log_impl(&dword_1830D4000, v28, v36, "%{public}s Connection has no parent endpoint handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_74:
    if (!v27) {
      return;
    }
    int v21 = (char *)v27;
    goto LABEL_76;
  }
  uint64_t v6 = *(void *)(v2 + 144);
  uint64_t v7 = *(void *)(v2 + 16);
  if (v6)
  {
    if (v7 && !nw_path_parameters_get_logging_disabled(*(void *)(v7 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
        __int16 v41 = 1024;
        *(_DWORD *)BOOL v42 = v9;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Connection is not ready yet, setting TLS on parameters", buf, 0x12u);
      }
    }
    id v10 = nw_endpoint_handler_copy_parameters(*(void **)(*(void *)(a1 + 32) + 144));
    nw_parameters_set_tls(v10, 1);
    nw_parameters_set_tls_session_id(v10, *(void **)(a1 + 40));

    return;
  }
  if (!v7 || nw_path_parameters_get_logging_disabled(*(void *)(v7 + 104))) {
    return;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  id v15 = (id)gconnectionLogObj;
  int v16 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
  *(_DWORD *)long long buf = 136446466;
  os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
  __int16 v41 = 1024;
  *(_DWORD *)BOOL v42 = v16;
  BOOL v17 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (!__nwlog_fault(v17, &type, &v37)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v18 = (id)gconnectionLogObj;
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v18, type))
    {
      int v20 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
      __int16 v41 = 1024;
      *(_DWORD *)BOOL v42 = v20;
      _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s [C%u] No parent endpoint handler found", buf, 0x12u);
    }
LABEL_39:

LABEL_40:
    if (!v17) {
      return;
    }
    goto LABEL_41;
  }
  if (!v37)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v18 = (id)gconnectionLogObj;
    os_log_type_t v30 = type;
    if (os_log_type_enabled(v18, type))
    {
      int v31 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
      __int16 v41 = 1024;
      *(_DWORD *)BOOL v42 = v31;
      _os_log_impl(&dword_1830D4000, v18, v30, "%{public}s [C%u] No parent endpoint handler found, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_39;
  }
  os_log_type_t v22 = (char *)__nw_create_backtrace_string();
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  os_log_type_t v18 = (id)gconnectionLogObj;
  os_log_type_t v23 = type;
  BOOL v24 = os_log_type_enabled(v18, type);
  if (!v22)
  {
    if (v24)
    {
      int v35 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
      __int16 v41 = 1024;
      *(_DWORD *)BOOL v42 = v35;
      _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s [C%u] No parent endpoint handler found, no backtrace", buf, 0x12u);
    }
    goto LABEL_39;
  }
  if (v24)
  {
    int v25 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
    *(_DWORD *)long long buf = 136446722;
    os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
    __int16 v41 = 1024;
    *(_DWORD *)BOOL v42 = v25;
    v42[2] = 2082;
    *(void *)&void v42[3] = v22;
    _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s [C%u] No parent endpoint handler found, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v22);
  if (v17)
  {
LABEL_41:
    int v21 = (char *)v17;
LABEL_76:
    free(v21);
  }
}

void sub_183813374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_set_better_path_available_handler(nw_connection_t connection, nw_connection_BOOLean_event_handler_t handler)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = connection;
  nw_connection_BOOLean_event_handler_t v4 = handler;
  if (v3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_set_better_path_available_handler_block_invoke;
    v13[3] = &unk_1E524B950;
    uint64_t v14 = v3;
    id v15 = v4;
    nw_connection_async_if_needed(v14, v13);

    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v19 = "nw_connection_set_better_path_available_handler";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v19 = "nw_connection_set_better_path_available_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = v17;
      BOOL v11 = os_log_type_enabled(v7, v17);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v19 = "nw_connection_set_better_path_available_handler";
          __int16 v20 = 2082;
          int v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v19 = "nw_connection_set_better_path_available_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v19 = "nw_connection_set_better_path_available_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_18381369C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_connection_set_better_path_available_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  nw_connection_BOOLean_event_handler_t v4 = *(void **)(v3 + 240);
  *(void *)(v3 + 240) = v2;
}

void nw_connection_set_path_changed_handler(nw_connection_t connection, nw_connection_path_event_handler_t handler)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = connection;
  nw_connection_path_event_handler_t v4 = handler;
  if (v3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_set_path_changed_handler_block_invoke;
    v13[3] = &unk_1E524B950;
    uint64_t v14 = v3;
    id v15 = v4;
    nw_connection_async_if_needed(v14, v13);

    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v19 = "nw_connection_set_path_changed_handler";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v19 = "nw_connection_set_path_changed_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = v17;
      BOOL v11 = os_log_type_enabled(v7, v17);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v19 = "nw_connection_set_path_changed_handler";
          __int16 v20 = 2082;
          int v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v19 = "nw_connection_set_path_changed_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v19 = "nw_connection_set_path_changed_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_183813A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_connection_set_path_changed_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  nw_connection_path_event_handler_t v4 = *(void **)(v3 + 256);
  *(void *)(v3 + 256) = v2;
}

void nw_connection_set_adaptive_read_handler(void *a1, int a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (v5)
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_set_adaptive_read_handler_block_invoke;
    v15[3] = &unk_1E524BB48;
    id v16 = v5;
    int v18 = a2;
    id v17 = v6;
    nw_connection_async_if_needed(v16, v15);

    goto LABEL_3;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v22 = "nw_connection_set_adaptive_read_handler";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v20 = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v8, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v22 = "nw_connection_set_adaptive_read_handler";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v12 = v20;
      BOOL v13 = os_log_type_enabled(v9, v20);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v22 = "nw_connection_set_adaptive_read_handler";
          __int16 v23 = 2082;
          BOOL v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v22 = "nw_connection_set_adaptive_read_handler";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v14 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v22 = "nw_connection_set_adaptive_read_handler";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:
}

void sub_183813DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_connection_set_adaptive_read_handler_block_invoke(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 40);
  int v2 = *(_DWORD *)(a1 + 48);
  id v3 = *(id *)(*(void *)(a1 + 32) + 144);
  id v4 = v1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v32 = "nw_endpoint_handler_set_adaptive_read_handler";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v12, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v13 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_endpoint_handler_set_adaptive_read_handler";
          _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null handler", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (!v29)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v13 = (id)gLogObj;
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_endpoint_handler_set_adaptive_read_handler";
          _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v13 = (id)gLogObj;
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_endpoint_handler_set_adaptive_read_handler";
          _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (v27)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v32 = "nw_endpoint_handler_set_adaptive_read_handler";
        __int16 v33 = 2082;
        BOOL v34 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_38:
    if (!v12) {
      goto LABEL_40;
    }
LABEL_39:
    free(v12);
    goto LABEL_40;
  }
  id v5 = (NWConcrete_nw_endpoint_handler *)v3;
  uint64_t mode = v5->mode;

  if (mode == 2)
  {
    uint64_t v7 = nw_endpoint_handler_copy_flow(v5);
    os_log_type_t v8 = _Block_copy(v4);
    int v9 = (void *)*((void *)v7 + 127);
    *((void *)v7 + 127) = v8;

    *((_DWORD *)v7 + 252) = v2;
    if ((*((unsigned char *)v7 + 33) & 4) != 0) {
      nw_endpoint_handler_register_adaptive_read_handler(v5);
    }

    goto LABEL_40;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = (id)gLogObj;
  if (mode > 5) {
    BOOL v11 = "unknown-mode";
  }
  else {
    BOOL v11 = off_1E523FB08[mode];
  }
  *(_DWORD *)long long buf = 136446722;
  os_log_type_t v32 = "nw_endpoint_handler_set_adaptive_read_handler";
  __int16 v33 = 2082;
  BOOL v34 = (void *)v11;
  __int16 v35 = 2082;
  os_log_type_t v36 = "flow";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (!__nwlog_fault(v12, &type, &v29)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v13 = (id)gLogObj;
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5) {
        id v15 = "unknown-mode";
      }
      else {
        id v15 = off_1E523FB08[mode];
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v32 = "nw_endpoint_handler_set_adaptive_read_handler";
      __int16 v33 = 2082;
      BOOL v34 = (void *)v15;
      __int16 v35 = 2082;
      os_log_type_t v36 = "flow";
      _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_37:

    goto LABEL_38;
  }
  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v13 = (id)gLogObj;
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5) {
        int v21 = "unknown-mode";
      }
      else {
        int v21 = off_1E523FB08[mode];
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v32 = "nw_endpoint_handler_set_adaptive_read_handler";
      __int16 v33 = 2082;
      BOOL v34 = (void *)v21;
      __int16 v35 = 2082;
      os_log_type_t v36 = "flow";
      _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_37;
  }
  id v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v13 = (id)gLogObj;
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v13, type);
  if (!v16)
  {
    if (v18)
    {
      if (mode > 5) {
        uint64_t v22 = "unknown-mode";
      }
      else {
        uint64_t v22 = off_1E523FB08[mode];
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v32 = "nw_endpoint_handler_set_adaptive_read_handler";
      __int16 v33 = 2082;
      BOOL v34 = (void *)v22;
      __int16 v35 = 2082;
      os_log_type_t v36 = "flow";
      _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    if (mode > 5) {
      char v19 = "unknown-mode";
    }
    else {
      char v19 = off_1E523FB08[mode];
    }
    *(_DWORD *)long long buf = 136446978;
    os_log_type_t v32 = "nw_endpoint_handler_set_adaptive_read_handler";
    __int16 v33 = 2082;
    BOOL v34 = (void *)v19;
    __int16 v35 = 2082;
    os_log_type_t v36 = "flow";
    __int16 v37 = 2082;
    uint64_t v38 = v16;
    _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v16);
  if (v12) {
    goto LABEL_39;
  }
LABEL_40:
}

void sub_1838144D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_set_adaptive_write_handler(void *a1, int a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (v5)
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_set_adaptive_write_handler_block_invoke;
    v15[3] = &unk_1E524BB48;
    id v16 = v5;
    int v18 = a2;
    id v17 = v6;
    nw_connection_async_if_needed(v16, v15);

    goto LABEL_3;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v22 = "nw_connection_set_adaptive_write_handler";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v20 = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v8, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v22 = "nw_connection_set_adaptive_write_handler";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v12 = v20;
      BOOL v13 = os_log_type_enabled(v9, v20);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v22 = "nw_connection_set_adaptive_write_handler";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v22 = "nw_connection_set_adaptive_write_handler";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v14 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v22 = "nw_connection_set_adaptive_write_handler";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:
}

void sub_18381480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void nw_connection_set_excessive_keepalive_handler(void *a1, int a2, int a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a4;
  if (v7)
  {
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __nw_connection_set_excessive_keepalive_handler_block_invoke;
    v17[3] = &unk_1E52498B8;
    id v18 = v7;
    int v20 = a2;
    int v21 = a3;
    id v19 = v8;
    nw_connection_async_if_needed(v18, v17);

    goto LABEL_3;
  }
  int v9 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v25 = "nw_connection_set_excessive_keepalive_handler";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v23 = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v10, &v23, &v22))
  {
    if (v23 == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = v23;
      if (os_log_type_enabled(v11, v23))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v25 = "nw_connection_set_excessive_keepalive_handler";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = v23;
      BOOL v15 = os_log_type_enabled(v11, v23);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v25 = "nw_connection_set_excessive_keepalive_handler";
          __int16 v26 = 2082;
          BOOL v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v25 = "nw_connection_set_excessive_keepalive_handler";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = v23;
      if (os_log_type_enabled(v11, v23))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v25 = "nw_connection_set_excessive_keepalive_handler";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v10) {
    free(v10);
  }
LABEL_3:
}

void sub_183814B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __nw_connection_set_excessive_keepalive_handler_block_invoke(void *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)a1[5];
  int32x2_t v2 = (int32x2_t)a1[6];
  id v3 = *(id *)(a1[4] + 144);
  id v4 = v1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v32 = "nw_endpoint_handler_set_keepalive_handler";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v12, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v13 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_endpoint_handler_set_keepalive_handler";
          _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null handler", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (!v29)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v13 = (id)gLogObj;
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_endpoint_handler_set_keepalive_handler";
          _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v13 = (id)gLogObj;
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v32 = "nw_endpoint_handler_set_keepalive_handler";
          _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (v27)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v32 = "nw_endpoint_handler_set_keepalive_handler";
        __int16 v33 = 2082;
        BOOL v34 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_38:
    if (!v12) {
      goto LABEL_40;
    }
LABEL_39:
    free(v12);
    goto LABEL_40;
  }
  id v5 = (NWConcrete_nw_endpoint_handler *)v3;
  uint64_t mode = v5->mode;

  if (mode == 2)
  {
    id v7 = nw_endpoint_handler_copy_flow(v5);
    id v8 = _Block_copy(v4);
    int v9 = (void *)*((void *)v7 + 129);
    *((void *)v7 + 129) = v8;

    *(int32x2_t *)((char *)v7 + 996) = vrev64_s32(v2);
    if ((*((unsigned char *)v7 + 33) & 4) != 0) {
      nw_endpoint_handler_register_keepalive_handler(v5);
    }

    goto LABEL_40;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = (id)gLogObj;
  if (mode > 5) {
    BOOL v11 = "unknown-mode";
  }
  else {
    BOOL v11 = off_1E523FB08[mode];
  }
  *(_DWORD *)long long buf = 136446722;
  os_log_type_t v32 = "nw_endpoint_handler_set_keepalive_handler";
  __int16 v33 = 2082;
  BOOL v34 = (void *)v11;
  __int16 v35 = 2082;
  os_log_type_t v36 = "flow";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (!__nwlog_fault(v12, &type, &v29)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v13 = (id)gLogObj;
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5) {
        BOOL v15 = "unknown-mode";
      }
      else {
        BOOL v15 = off_1E523FB08[mode];
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v32 = "nw_endpoint_handler_set_keepalive_handler";
      __int16 v33 = 2082;
      BOOL v34 = (void *)v15;
      __int16 v35 = 2082;
      os_log_type_t v36 = "flow";
      _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_37:

    goto LABEL_38;
  }
  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v13 = (id)gLogObj;
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5) {
        int v21 = "unknown-mode";
      }
      else {
        int v21 = off_1E523FB08[mode];
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v32 = "nw_endpoint_handler_set_keepalive_handler";
      __int16 v33 = 2082;
      BOOL v34 = (void *)v21;
      __int16 v35 = 2082;
      os_log_type_t v36 = "flow";
      _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_37;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v13 = (id)gLogObj;
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v13, type);
  if (!v16)
  {
    if (v18)
    {
      if (mode > 5) {
        char v22 = "unknown-mode";
      }
      else {
        char v22 = off_1E523FB08[mode];
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v32 = "nw_endpoint_handler_set_keepalive_handler";
      __int16 v33 = 2082;
      BOOL v34 = (void *)v22;
      __int16 v35 = 2082;
      os_log_type_t v36 = "flow";
      _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    if (mode > 5) {
      id v19 = "unknown-mode";
    }
    else {
      id v19 = off_1E523FB08[mode];
    }
    *(_DWORD *)long long buf = 136446978;
    os_log_type_t v32 = "nw_endpoint_handler_set_keepalive_handler";
    __int16 v33 = 2082;
    BOOL v34 = (void *)v19;
    __int16 v35 = 2082;
    os_log_type_t v36 = "flow";
    __int16 v37 = 2082;
    uint64_t v38 = v16;
    _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v16);
  if (v12) {
    goto LABEL_39;
  }
LABEL_40:
}

void sub_183815290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_set_low_throughput_handler(void *a1, int a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (v5)
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_set_low_throughput_handler_block_invoke;
    v15[3] = &unk_1E524BB48;
    id v16 = v5;
    id v17 = v6;
    int v18 = a2;
    nw_connection_async_if_needed(v16, v15);

    goto LABEL_3;
  }
  id v7 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  char v22 = "nw_connection_set_low_throughput_handler";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v20 = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v8, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)long long buf = 136446210;
        char v22 = "nw_connection_set_low_throughput_handler";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v12 = v20;
      BOOL v13 = os_log_type_enabled(v9, v20);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          char v22 = "nw_connection_set_low_throughput_handler";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        char v22 = "nw_connection_set_low_throughput_handler";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v14 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)long long buf = 136446210;
        char v22 = "nw_connection_set_low_throughput_handler";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:
}

void sub_1838155CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_connection_set_low_throughput_handler_block_invoke(uint64_t a1)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int32x2_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 384);
  *(void *)(v3 + 384) = v2;

  int v5 = *(_DWORD *)(a1 + 48);
  id v6 = *(void **)(a1 + 32);
  if (!v5)
  {
    os_log_type_t v12 = v6;
    BOOL v13 = v12;
    if (v12)
    {
      nw_context_assert_queue(v12[3]);
      uint64_t v14 = (uint64_t)v13[46];
      if (v14)
      {
        nw_queue_cancel_source(v14);
        *((_OWORD *)v13 + 22) = 0u;
        *((_OWORD *)v13 + 23) = 0u;
        *((_OWORD *)v13 + 21) = 0u;
      }
LABEL_14:

      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v41 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
    BOOL v42 = (char *)_os_log_send_and_compose_impl();

    v55[0] = OS_LOG_TYPE_ERROR;
    v60[0] = 0;
    if (__nwlog_fault(v42, v55, v60))
    {
      if (v55[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v43 = (id)gLogObj;
        os_log_type_t v44 = v55[0];
        if (os_log_type_enabled(v43, v55[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v60[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v43 = (id)gLogObj;
        os_log_type_t v49 = v55[0];
        BOOL v50 = os_log_type_enabled(v43, v55[0]);
        if (backtrace_string)
        {
          if (v50)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v43, v49, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_91;
        }
        if (v50)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v43, v49, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v43 = (id)gLogObj;
        os_log_type_t v52 = v55[0];
        if (os_log_type_enabled(v43, v55[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v43, v52, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_91:
    if (v42) {
      free(v42);
    }
    goto LABEL_14;
  }
  id v7 = v6;
  id v8 = v7;
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v37 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();

    v55[0] = OS_LOG_TYPE_ERROR;
    v60[0] = 0;
    if (__nwlog_fault(v38, v55, v60))
    {
      if (v55[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v39 = (id)gLogObj;
        os_log_type_t v40 = v55[0];
        if (os_log_type_enabled(v39, v55[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v60[0])
      {
        os_log_type_t v45 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v39 = (id)gLogObj;
        os_log_type_t v46 = v55[0];
        BOOL v47 = os_log_type_enabled(v39, v55[0]);
        if (v45)
        {
          if (v47)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v45;
            _os_log_impl(&dword_1830D4000, v39, v46, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v45);
          goto LABEL_83;
        }
        if (v47)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v39, v46, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v39 = (id)gLogObj;
        os_log_type_t v51 = v55[0];
        if (os_log_type_enabled(v39, v55[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v39, v51, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_83:
    if (v38) {
      free(v38);
    }
    goto LABEL_56;
  }
  nw_context_assert_queue(v7[3]);
  if ((*((unsigned char *)v8 + 109) & 0x40) == 0)
  {
    int v9 = v8[2];
    if (v9 && !nw_path_parameters_get_logging_disabled(v9[13]))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v10 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v11 = *((_DWORD *)v8 + 112);
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection does not have a connected handler", buf, 0x12u);
      }
    }
    goto LABEL_56;
  }
  BOOL v15 = v8;
  id v16 = v15[2];

  BOOL multipath = nw_parameters_get_multipath(v16);
  if (multipath)
  {
    int v18 = v15[2];
    if (v18 && !nw_path_parameters_get_logging_disabled(v18[13]))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v19 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v20 = *((_DWORD *)v15 + 112);
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v20;
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s [C%u] MPTCP incompatible with minimum throughput", buf, 0x12u);
      }
    }
    goto LABEL_56;
  }
  *((_DWORD *)v15 + 94) = v5;
  if (!v15[46])
  {
    uint64_t v68 = 0;
    memset(v67, 0, sizeof(v67));
    long long v65 = 0u;
    long long v66 = 0u;
    memset(buf, 0, sizeof(buf));
    int v21 = v15;
    nw_context_assert_queue(v8[3]);
    char v22 = v21;
    if (nw_parameters_get_ip_protocol(v15[2]) == 6)
    {
      BOOL v23 = nw_endpoint_handler_fillout_tcp_info(v22[18], buf);

      if (v23)
      {
        v22[42] = (void *)(*(void *)((char *)&v67[2] + 12) + *(void *)((char *)v67 + 12));
        uint64_t v24 = mach_continuous_time();
        if (v24 <= 1) {
          uint64_t v25 = 1;
        }
        else {
          uint64_t v25 = v24;
        }
        v22[43] = (void *)v25;
        os_log_type_t v26 = v8[3];
        *(void *)os_log_type_t v55 = MEMORY[0x1E4F143A8];
        uint64_t v56 = 3221225472;
        id v57 = __nw_connection_start_throughput_monitor_on_nw_queue_block_invoke;
        os_log_type_t v58 = &unk_1E524BAA8;
        id v59 = v22;
        uint64_t source = nw_queue_context_create_source(v26, 2, 3, 0, v55, 0);
        if (source)
        {
          dispatch_time_t v28 = dispatch_time(0x8000000000000000, 1000000000);
          if (*(void *)source)
          {
            dispatch_source_set_timer(*(dispatch_source_t *)source, v28, 0x3B9ACA00uLL, 0xF4240uLL);
          }
          else
          {
            *(void *)(source + 32) = v28;
            *(void *)(source + 40) = 1000000000;
            if (*(unsigned char *)(source + 48) && *(unsigned char *)(source + 49)) {
              nw_queue_source_run_timer(source);
            }
          }
          nw_queue_activate_source(source);
          v15[46] = (id)source;
LABEL_55:

          goto LABEL_56;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v29 = (id)gLogObj;
        *(_DWORD *)os_log_type_t v60 = 136446210;
        __int16 v61 = "nw_connection_start_throughput_monitor_on_nw_queue";
        os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v53 = 0;
        if (__nwlog_fault(v30, &type, &v53))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v31 = (id)gLogObj;
            os_log_type_t v32 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)os_log_type_t v60 = 136446210;
              __int16 v61 = "nw_connection_start_throughput_monitor_on_nw_queue";
              _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s nw_queue_context_create_source(timer) failed", v60, 0xCu);
            }
          }
          else if (v53)
          {
            __int16 v33 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v31 = (id)gLogObj;
            os_log_type_t v34 = type;
            BOOL v35 = os_log_type_enabled(v31, type);
            if (v33)
            {
              if (v35)
              {
                *(_DWORD *)os_log_type_t v60 = 136446466;
                __int16 v61 = "nw_connection_start_throughput_monitor_on_nw_queue";
                __int16 v62 = 2082;
                __int16 v63 = v33;
                _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s", v60, 0x16u);
              }

              free(v33);
              goto LABEL_53;
            }
            if (v35)
            {
              *(_DWORD *)os_log_type_t v60 = 136446210;
              __int16 v61 = "nw_connection_start_throughput_monitor_on_nw_queue";
              _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s nw_queue_context_create_source(timer) failed, no backtrace", v60, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v31 = (id)gLogObj;
            os_log_type_t v36 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)os_log_type_t v60 = 136446210;
              __int16 v61 = "nw_connection_start_throughput_monitor_on_nw_queue";
              _os_log_impl(&dword_1830D4000, v31, v36, "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded", v60, 0xCu);
            }
          }
        }
LABEL_53:
        if (v30) {
          free(v30);
        }
        goto LABEL_55;
      }
    }
    else
    {
    }
  }
LABEL_56:
}

void sub_1838161A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void nw_connection_set_metadata_changed_handler(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    id v29 = "nw_connection_set_metadata_changed_handler";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v9, &type, &v26)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v29 = "nw_connection_set_metadata_changed_handler";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)long long buf = 136446466;
          id v29 = "nw_connection_set_metadata_changed_handler";
          __int16 v30 = 2082;
          int v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9) {
          goto LABEL_4;
        }
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)long long buf = 136446210;
        id v29 = "nw_connection_set_metadata_changed_handler";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v29 = "nw_connection_set_metadata_changed_handler";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v6)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __nw_connection_set_metadata_changed_handler_block_invoke;
    v22[3] = &unk_1E5248030;
    id v23 = v5;
    id v24 = v6;
    id v25 = v7;
    nw_connection_async_if_needed(v23, v22);

    goto LABEL_4;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  id v29 = "nw_connection_set_metadata_changed_handler";
  int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v9, &type, &v26)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)long long buf = 136446210;
      id v29 = "nw_connection_set_metadata_changed_handler";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v26)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)long long buf = 136446210;
      id v29 = "nw_connection_set_metadata_changed_handler";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  id v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)long long buf = 136446210;
      id v29 = "nw_connection_set_metadata_changed_handler";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)long long buf = 136446466;
    id v29 = "nw_connection_set_metadata_changed_handler";
    __int16 v30 = 2082;
    int v31 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_183816740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_connection_set_metadata_changed_handler_block_invoke(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1 + 32);
  int32x2_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = v3[33];
  id v5 = v3;
  id v6 = v2;
  if (!v6)
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v38 = "nw_connection_get_metadata_changed_registration_on_nw_queue";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v14, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "nw_connection_get_metadata_changed_registration_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)long long buf = 136446466;
            uint64_t v38 = "nw_connection_get_metadata_changed_registration_on_nw_queue";
            __int16 v39 = 2082;
            uint64_t v40 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (v19)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "nw_connection_get_metadata_changed_registration_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "nw_connection_get_metadata_changed_registration_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_28:
    if (v14) {
      free(v14);
    }
    goto LABEL_30;
  }
  nw_context_assert_queue(v5[3]);
  id v7 = v3 + 33;
  while (1)
  {
    id v7 = (void *)*v7;
    if (!v7) {
      break;
    }
    if (nw_protocol_definition_is_equal_unsafe(v7[2], (uint64_t)v6))
    {

      id v8 = *(const void **)(a1 + 48);
      if (v8)
      {
        if (v8 != (const void *)v7[3])
        {
          int v9 = _Block_copy(v8);
          os_log_type_t v10 = (void *)v7[3];
          v7[3] = v9;
        }
      }
      else
      {
        os_log_type_t v11 = (void *)*v7;
        os_log_type_t v12 = (void *)v7[1];
        if (*v7)
        {
          v11[1] = v12;
          os_log_type_t v12 = (void *)v7[1];
        }
        else
        {
          *(void *)(*(void *)(a1 + 32) + 272) = v12;
        }
        void *v12 = v11;
        void *v7 = 0;
        v7[1] = 0;
      }
      goto LABEL_32;
    }
  }
LABEL_30:

  os_log_type_t v21 = (id *)malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (!v21)
  {
    int v31 = __nwlog_obj();
    os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long buf = 136446722;
    uint64_t v38 = "strict_calloc";
    __int16 v39 = 2048;
    uint64_t v40 = 1;
    __int16 v41 = 2048;
    uint64_t v42 = 32;
    uint64_t v32 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v32))
    {
      __break(1u);
      return;
    }
    free(v32);
  }
  objc_storeStrong(v21 + 2, *(id *)(a1 + 40));
  char v22 = _Block_copy(*(const void **)(a1 + 48));
  id v23 = v21[3];
  v21[3] = v22;

  id *v21 = 0;
  id v24 = *(id ***)(*(void *)(a1 + 32) + 272);
  v21[1] = v24;
  char *v24 = v21;
  *(void *)(*(void *)(a1 + 32) + 272) = v21;
LABEL_32:
  uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 264);
  if (gLogDatapath)
  {
    dispatch_time_t v28 = __nwlog_obj();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      id v29 = _Block_copy(*(const void **)(a1 + 48));
      identifier = nw_protocol_definition_get_identifier(*(void **)(a1 + 40));
      *(_DWORD *)long long buf = 136447234;
      uint64_t v38 = "nw_connection_set_metadata_changed_handler_block_invoke";
      __int16 v39 = 2048;
      uint64_t v40 = (uint64_t)v29;
      __int16 v41 = 2082;
      uint64_t v42 = (uint64_t)identifier;
      __int16 v43 = 1024;
      BOOL v44 = v4 == 0;
      __int16 v45 = 1024;
      BOOL v46 = v25 == 0;
      _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s Set metadata changed handler: %p for protocol: %{public}s, was empty: %u now empty: %u", buf, 0x2Cu);
    }
  }
  if (v4 || !v25)
  {
    if (v4)
    {
      if (!v25) {
        nw_endpoint_handler_set_metadata_changed_handler(*(void **)(*(void *)(a1 + 32) + 144), 0);
      }
    }
  }
  else
  {
    char v26 = *(void **)(a1 + 32);
    BOOL v27 = (void *)v26[18];
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    v33[2] = __nw_connection_set_metadata_changed_handler_block_invoke_49;
    v33[3] = &unk_1E523DD38;
    os_log_type_t v34 = v26;
    nw_endpoint_handler_set_metadata_changed_handler(v27, v33);
  }
}

void sub_183816CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_connection_set_metadata_changed_handler_block_invoke_49(uint64_t a1, void *a2, void *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void **)*(id *)(a1 + 32);
  id v8 = v5;
  id v9 = v6;
  os_log_type_t v10 = v9;
  if (!v7)
  {
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_78:
        if (!v19) {
          goto LABEL_13;
        }
LABEL_79:
        free(v19);
        goto LABEL_13;
      }
      if (v30)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v43, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_77:

    goto LABEL_78;
  }
  if (!v8)
  {
    char v22 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null protocol", buf, 0xCu);
      }
      goto LABEL_77;
    }
    if (!v47)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v44, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_77;
    }
    int v31 = (char *)__nw_create_backtrace_string();
    os_log_type_t v20 = __nwlog_obj();
    os_log_type_t v32 = type;
    BOOL v33 = os_log_type_enabled(v20, type);
    if (!v31)
    {
      if (v33)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
      goto LABEL_77;
    }
    if (v33)
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v31;
      _os_log_impl(&dword_1830D4000, v20, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_48;
  }
  if (!v9)
  {
    id v24 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null metadata", buf, 0xCu);
      }
      goto LABEL_77;
    }
    if (!v47)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v45, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_77;
    }
    int v31 = (char *)__nw_create_backtrace_string();
    os_log_type_t v20 = __nwlog_obj();
    os_log_type_t v34 = type;
    BOOL v35 = os_log_type_enabled(v20, type);
    if (!v31)
    {
      if (v35)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v20, v34, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
      goto LABEL_77;
    }
    if (v35)
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v31;
      _os_log_impl(&dword_1830D4000, v20, v34, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_48:

    free(v31);
    if (!v19) {
      goto LABEL_13;
    }
    goto LABEL_79;
  }
  nw_context_assert_queue(v7[3]);
  os_log_type_t v11 = v7;
  id v12 = v8;
  nw_context_assert_queue(v7[3]);
  os_log_type_t v13 = (char *)(v11 + 33);
  while (1)
  {
    os_log_type_t v13 = *(char **)v13;
    if (!v13) {
      break;
    }
    if (nw_protocol_definition_is_equal_unsafe(*((void *)v13 + 2), (uint64_t)v12))
    {

      uint64_t v14 = _Block_copy(*((const void **)v13 + 3));
      os_log_type_t v15 = v14;
      if (v14)
      {
        dispatch_qos_class_t v16 = *((_DWORD *)v11 + 48);
        *(void *)long long buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = ___ZL56nw_connection_deliver_metadata_changed_event_on_nw_queueP24NWConcrete_nw_connectionPU36objcproto25OS_nw_protocol_definition8NSObjectPU34objcproto23OS_nw_protocol_metadataS1__block_invoke;
        *(void *)&unsigned char buf[24] = &unk_1E524B950;
        id v51 = v14;
        id v50 = v10;
        nw_connection_async_client(v11, v16, buf);

LABEL_9:
        goto LABEL_13;
      }
      os_log_type_t v36 = __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
      id v37 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v47 = 0;
      if (__nwlog_fault(v37, &type, &v47))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v38 = __nwlog_obj();
          os_log_type_t v39 = type;
          if (os_log_type_enabled(v38, type))
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
            _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null handler_copy", buf, 0xCu);
          }
          goto LABEL_85;
        }
        if (v47)
        {
          uint64_t v40 = (char *)__nw_create_backtrace_string();
          uint64_t v38 = __nwlog_obj();
          os_log_type_t v41 = type;
          BOOL v42 = os_log_type_enabled(v38, type);
          if (v40)
          {
            if (v42)
            {
              *(_DWORD *)long long buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v40;
              _os_log_impl(&dword_1830D4000, v38, v41, "%{public}s called with null handler_copy, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v40);
            goto LABEL_86;
          }
          if (v42)
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
            _os_log_impl(&dword_1830D4000, v38, v41, "%{public}s called with null handler_copy, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v38 = __nwlog_obj();
          os_log_type_t v46 = type;
          if (os_log_type_enabled(v38, type))
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
            _os_log_impl(&dword_1830D4000, v38, v46, "%{public}s called with null handler_copy, backtrace limit exceeded", buf, 0xCu);
          }
        }
LABEL_85:
      }
LABEL_86:
      if (v37) {
        free(v37);
      }
      goto LABEL_9;
    }
  }

  id v17 = v11[2];
  if (v17 && !nw_path_parameters_get_logging_disabled(v17[13]) && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    char v26 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      int v27 = *((_DWORD *)v11 + 112);
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_connection_deliver_metadata_changed_event_on_nw_queue";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = nw_protocol_definition_get_identifier(v12);
      _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] %{public}s does not have handler registered, ignoring metadata change notification", buf, 0x1Cu);
    }
  }
LABEL_13:
}

void sub_18381779C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL56nw_connection_deliver_metadata_changed_event_on_nw_queueP24NWConcrete_nw_connectionPU36objcproto25OS_nw_protocol_definition8NSObjectPU34objcproto23OS_nw_protocol_metadataS1__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void nw_connection_get_parent_uuid(void *a1, unsigned __int8 *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  if (!a2)
  {
    uint64_t v4 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    id v24 = "nw_connection_get_parent_uuid";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v22 = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v5, &v22, &v21)) {
      goto LABEL_38;
    }
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = v22;
      if (os_log_type_enabled(v6, v22))
      {
        *(_DWORD *)long long buf = 136446210;
        id v24 = "nw_connection_get_parent_uuid";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null out_uuid", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v11 = v22;
      BOOL v12 = os_log_type_enabled(v6, v22);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          id v24 = "nw_connection_get_parent_uuid";
          __int16 v25 = 2082;
          char v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null out_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v5) {
          goto LABEL_4;
        }
LABEL_39:
        free(v5);
        goto LABEL_4;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        id v24 = "nw_connection_get_parent_uuid";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null out_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v16 = v22;
      if (os_log_type_enabled(v6, v22))
      {
        *(_DWORD *)long long buf = 136446210;
        id v24 = "nw_connection_get_parent_uuid";
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null out_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  uuid_clear(a2);
  if (v3)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __nw_connection_get_parent_uuid_block_invoke;
    v18[3] = &unk_1E52491B0;
    os_log_type_t v20 = a2;
    BOOL v19 = v3;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_get_parent_uuid_block_invoke((uint64_t)v18);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }
  id v8 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  id v24 = "nw_connection_get_parent_uuid";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v22 = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v5, &v22, &v21)) {
    goto LABEL_38;
  }
  if (v22 == OS_LOG_TYPE_FAULT)
  {
    id v6 = __nwlog_obj();
    os_log_type_t v9 = v22;
    if (os_log_type_enabled(v6, v22))
    {
      *(_DWORD *)long long buf = 136446210;
      id v24 = "nw_connection_get_parent_uuid";
      _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null connection", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    id v6 = __nwlog_obj();
    os_log_type_t v17 = v22;
    if (os_log_type_enabled(v6, v22))
    {
      *(_DWORD *)long long buf = 136446210;
      id v24 = "nw_connection_get_parent_uuid";
      _os_log_impl(&dword_1830D4000, v6, v17, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v13 = (char *)__nw_create_backtrace_string();
  id v6 = __nwlog_obj();
  os_log_type_t v14 = v22;
  BOOL v15 = os_log_type_enabled(v6, v22);
  if (!v13)
  {
    if (v15)
    {
      *(_DWORD *)long long buf = 136446210;
      id v24 = "nw_connection_get_parent_uuid";
      _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v15)
  {
    *(_DWORD *)long long buf = 136446466;
    id v24 = "nw_connection_get_parent_uuid";
    __int16 v25 = 2082;
    char v26 = v13;
    _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v13);
  if (v5) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_183817D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __nw_connection_get_parent_uuid_block_invoke(uint64_t a1)
{
  uint64_t v1 = (__n128 *)(*(void *)(a1 + 32) + 468);
  __n128 result = *v1;
  *(__n128 *)*(void *)(a1 + 40) = *v1;
  return result;
}

void nw_connection_set_group_uuid(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (!a2)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v25 = "nw_connection_set_group_uuid";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v23 = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v6, &v23, &v22)) {
      goto LABEL_38;
    }
    if (v23 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = v23;
      if (os_log_type_enabled(v7, v23))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v25 = "nw_connection_set_group_uuid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null in_uuid", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = v23;
      BOOL v13 = os_log_type_enabled(v7, v23);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v25 = "nw_connection_set_group_uuid";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null in_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v25 = "nw_connection_set_group_uuid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null in_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v17 = v23;
      if (os_log_type_enabled(v7, v23))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v25 = "nw_connection_set_group_uuid";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null in_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v3)
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __nw_connection_set_group_uuid_block_invoke;
    v19[3] = &unk_1E52491B0;
    os_log_type_t v20 = v3;
    uint64_t v21 = a2;
    os_unfair_lock_lock(v4 + 34);
    __nw_connection_set_group_uuid_block_invoke((uint64_t)v19);
    os_unfair_lock_unlock(v4 + 34);

    goto LABEL_4;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v25 = "nw_connection_set_group_uuid";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v23 = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v6, &v23, &v22)) {
    goto LABEL_38;
  }
  if (v23 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v10 = v23;
    if (os_log_type_enabled(v7, v23))
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v25 = "nw_connection_set_group_uuid";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v22)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v18 = v23;
    if (os_log_type_enabled(v7, v23))
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v25 = "nw_connection_set_group_uuid";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  os_log_type_t v7 = __nwlog_obj();
  os_log_type_t v15 = v23;
  BOOL v16 = os_log_type_enabled(v7, v23);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v25 = "nw_connection_set_group_uuid";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)long long buf = 136446466;
    __int16 v25 = "nw_connection_set_group_uuid";
    __int16 v26 = 2082;
    uint64_t v27 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

__n128 __nw_connection_set_group_uuid_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(__n128 **)(a1 + 40);
  __n128 result = *v1;
  *(__n128 *)(*(void *)(a1 + 32) + 484) = *v1;
  return result;
}

void nw_connection_get_group_uuid(void *a1, unsigned __int8 *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  if (!a2)
  {
    uint64_t v4 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    id v24 = "nw_connection_get_group_uuid";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v22 = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v5, &v22, &v21)) {
      goto LABEL_38;
    }
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = v22;
      if (os_log_type_enabled(v6, v22))
      {
        *(_DWORD *)long long buf = 136446210;
        id v24 = "nw_connection_get_group_uuid";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null out_uuid", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v11 = v22;
      BOOL v12 = os_log_type_enabled(v6, v22);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          id v24 = "nw_connection_get_group_uuid";
          __int16 v25 = 2082;
          __int16 v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null out_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v5) {
          goto LABEL_4;
        }
LABEL_39:
        free(v5);
        goto LABEL_4;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        id v24 = "nw_connection_get_group_uuid";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null out_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v16 = v22;
      if (os_log_type_enabled(v6, v22))
      {
        *(_DWORD *)long long buf = 136446210;
        id v24 = "nw_connection_get_group_uuid";
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null out_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  uuid_clear(a2);
  if (v3)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __nw_connection_get_group_uuid_block_invoke;
    v18[3] = &unk_1E52491B0;
    os_log_type_t v20 = a2;
    BOOL v19 = v3;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_get_group_uuid_block_invoke((uint64_t)v18);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_4;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  id v24 = "nw_connection_get_group_uuid";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v22 = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v5, &v22, &v21)) {
    goto LABEL_38;
  }
  if (v22 == OS_LOG_TYPE_FAULT)
  {
    id v6 = __nwlog_obj();
    os_log_type_t v9 = v22;
    if (os_log_type_enabled(v6, v22))
    {
      *(_DWORD *)long long buf = 136446210;
      id v24 = "nw_connection_get_group_uuid";
      _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null connection", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    id v6 = __nwlog_obj();
    os_log_type_t v17 = v22;
    if (os_log_type_enabled(v6, v22))
    {
      *(_DWORD *)long long buf = 136446210;
      id v24 = "nw_connection_get_group_uuid";
      _os_log_impl(&dword_1830D4000, v6, v17, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  BOOL v13 = (char *)__nw_create_backtrace_string();
  id v6 = __nwlog_obj();
  os_log_type_t v14 = v22;
  BOOL v15 = os_log_type_enabled(v6, v22);
  if (!v13)
  {
    if (v15)
    {
      *(_DWORD *)long long buf = 136446210;
      id v24 = "nw_connection_get_group_uuid";
      _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v15)
  {
    *(_DWORD *)long long buf = 136446466;
    id v24 = "nw_connection_get_group_uuid";
    __int16 v25 = 2082;
    __int16 v26 = v13;
    _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v13);
  if (v5) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_18381879C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __nw_connection_get_group_uuid_block_invoke(uint64_t a1)
{
  uint64_t v1 = (__n128 *)(*(void *)(a1 + 32) + 484);
  __n128 result = *v1;
  *(__n128 *)*(void *)(a1 + 40) = *v1;
  return result;
}

void sub_183818988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__25849(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 48) = v2;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v6;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

void sub_183818AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_endpoint_copy_custom_data(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v2 = v1;
  if (!v1)
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    id v24 = "nw_endpoint_copy_custom_data";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)long long buf = 136446210;
          id v24 = "nw_endpoint_copy_custom_data";
          _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null endpoint", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v21)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)long long buf = 136446210;
          id v24 = "nw_endpoint_copy_custom_data";
          _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)long long buf = 136446210;
          id v24 = "nw_endpoint_copy_custom_data";
          _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v19)
      {
        *(_DWORD *)long long buf = 136446466;
        id v24 = "nw_endpoint_copy_custom_data";
        __int16 v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v7)
    {
LABEL_23:
      id v5 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v7);
    goto LABEL_23;
  }
  long long v3 = (id *)v1;
  unsigned int v4 = [v3 type];

  if (v4 <= 0x3E7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    id v24 = "nw_endpoint_copy_custom_data";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v7, &type, &v21)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v24 = "nw_endpoint_copy_custom_data";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s non-custom endpoint", buf, 0xCu);
      }
    }
    else if (v21)
    {
      os_log_type_t v10 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (v10)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          id v24 = "nw_endpoint_copy_custom_data";
          __int16 v25 = 2082;
          __int16 v26 = v10;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s non-custom endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v10);
        if (!v7) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        id v24 = "nw_endpoint_copy_custom_data";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s non-custom endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v24 = "nw_endpoint_copy_custom_data";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s non-custom endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  id v5 = v3[29];
LABEL_24:

  return v5;
}

void sub_183819364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

size_t nw_endpoint_get_custom_data_length(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v2 = v1;
  if (!v1)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v25 = "nw_endpoint_get_custom_data_length";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v8, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v25 = "nw_endpoint_get_custom_data_length";
          _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null endpoint", buf, 0xCu);
        }
LABEL_21:

        goto LABEL_22;
      }
      if (!v22)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v25 = "nw_endpoint_get_custom_data_length";
          _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v25 = "nw_endpoint_get_custom_data_length";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_21;
      }
      if (v20)
      {
        *(_DWORD *)long long buf = 136446466;
        __int16 v25 = "nw_endpoint_get_custom_data_length";
        __int16 v26 = 2082;
        uint64_t v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_22:
    if (!v8) {
      goto LABEL_24;
    }
LABEL_23:
    free(v8);
    goto LABEL_24;
  }
  long long v3 = v1;
  unsigned int v4 = [v3 type];

  if (v4 <= 0x3E7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    __int16 v25 = "nw_endpoint_get_custom_data_length";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v8, &type, &v22)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v25 = "nw_endpoint_get_custom_data_length";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s non-custom endpoint", buf, 0xCu);
      }
    }
    else if (v22)
    {
      os_log_type_t v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (v11)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v25 = "nw_endpoint_get_custom_data_length";
          __int16 v26 = 2082;
          uint64_t v27 = v11;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s non-custom endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v11);
        if (!v8) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v25 = "nw_endpoint_get_custom_data_length";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s non-custom endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v25 = "nw_endpoint_get_custom_data_length";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s non-custom endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_21;
  }
  id v5 = v3[29];
  if (!v5)
  {
LABEL_24:
    size_t size = 0;
    goto LABEL_25;
  }
  size_t size = dispatch_data_get_size(v5);
LABEL_25:

  return size;
}

void sub_1838198B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_endpoint_copy_custom_resolver_block(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v2 = v1;
  if (!v1)
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    id v24 = "nw_endpoint_copy_custom_resolver_block";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)long long buf = 136446210;
          id v24 = "nw_endpoint_copy_custom_resolver_block";
          _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null endpoint", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v21)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)long long buf = 136446210;
          id v24 = "nw_endpoint_copy_custom_resolver_block";
          _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)long long buf = 136446210;
          id v24 = "nw_endpoint_copy_custom_resolver_block";
          _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v19)
      {
        *(_DWORD *)long long buf = 136446466;
        id v24 = "nw_endpoint_copy_custom_resolver_block";
        __int16 v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v7)
    {
LABEL_23:
      id v5 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v7);
    goto LABEL_23;
  }
  long long v3 = (const void **)v1;
  unsigned int v4 = [v3 type];

  if (v4 <= 0x3E7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)long long buf = 136446210;
    id v24 = "nw_endpoint_copy_custom_resolver_block";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v7, &type, &v21)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v24 = "nw_endpoint_copy_custom_resolver_block";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s non-custom endpoint", buf, 0xCu);
      }
    }
    else if (v21)
    {
      os_log_type_t v10 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (v10)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          id v24 = "nw_endpoint_copy_custom_resolver_block";
          __int16 v25 = 2082;
          __int16 v26 = v10;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s non-custom endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v10);
        if (!v7) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        id v24 = "nw_endpoint_copy_custom_resolver_block";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s non-custom endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        id v24 = "nw_endpoint_copy_custom_resolver_block";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s non-custom endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  id v5 = _Block_copy(v3[30]);
LABEL_24:

  return v5;
}

void sub_183819E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int *nw_protocol_demux_identifier()
{
  if (nw_protocol_demux_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_demux_identifier::onceToken, &__block_literal_global_25983);
  }
  return &g_demux_protocol_identifier;
}

double __nw_protocol_demux_identifier_block_invoke()
{
  unk_1E8F6B5DE = 0;
  unk_1E8F6B5D6 = 0;
  word_1E8F6B5EE = 0;
  unk_1E8F6B5E6 = 0;
  strcpy((char *)&g_demux_protocol_identifier, "demux");
  *(void *)&double result = 0x200000000;
  qword_1E8F6B5F0 = 0x200000000;
  qword_1E8F6B248 = (uint64_t)nw_protocol_default_replace_input_handler;
  qword_1E8F6B280 = (uint64_t)nw_protocol_default_output_available;
  qword_1E8F6B2F0 = (uint64_t)nw_protocol_default_input_finished;
  qword_1E8F6B2F8 = (uint64_t)nw_protocol_default_output_finished;
  qword_1E8F6B340 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F6B330 = (uint64_t)nw_protocol_default_get_message_properties;
  qword_1E8F6B2A0 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F6B2A8 = (uint64_t)nw_protocol_default_get_parameters;
  qword_1E8F6B2B8 = (uint64_t)nw_protocol_default_get_local;
  qword_1E8F6B2C0 = (uint64_t)nw_protocol_default_get_remote;
  qword_1E8F6B2B0 = (uint64_t)nw_protocol_default_get_path;
  qword_1E8F6B2E0 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F6B300 = (uint64_t)nw_protocol_default_get_output_local;
  qword_1E8F6B308 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F6B270 = (uint64_t)nw_protocol_default_error;
  qword_1E8F6B338 = (uint64_t)nw_protocol_default_reset;
  qword_1E8F6B310 = (uint64_t)nw_protocol_default_waiting_for_output;
  qword_1E8F6B318 = (uint64_t)nw_protocol_default_copy_info;
  qword_1E8F6B2C8 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F6B2D0 = (uint64_t)nw_protocol_default_unregister_notification;
  qword_1E8F6B2D8 = (uint64_t)nw_protocol_default_notify;
  qword_1E8F6B320 = (uint64_t)nw_protocol_default_add_listen_handler;
  qword_1E8F6B328 = (uint64_t)nw_protocol_default_remove_listen_handler;
  g_demux_protocol_callbacks = (uint64_t)nw_protocol_demux_add_input_handler;
  qword_1E8F6B240 = (uint64_t)nw_protocol_demux_remove_input_handler;
  qword_1E8F6B250 = (uint64_t)nw_protocol_demux_connect;
  qword_1E8F6B260 = (uint64_t)nw_protocol_common_connected;
  qword_1E8F6B258 = (uint64_t)nw_protocol_demux_disconnect;
  qword_1E8F6B268 = (uint64_t)nw_protocol_demux_disconnected;
  qword_1E8F6B2E8 = (uint64_t)nw_protocol_demux_supports_external_data;
  qword_1E8F6B290 = (uint64_t)nw_protocol_demux_get_output_frames;
  qword_1E8F6B298 = (uint64_t)nw_protocol_demux_finalize_output_frames;
  qword_1E8F6B288 = (uint64_t)nw_protocol_demux_get_input_frames;
  qword_1E8F6B278 = (uint64_t)nw_protocol_demux_input_available;
  return result;
}

void nw_protocol_demux_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v19 = "nw_protocol_demux_input_available";
    id v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v7, &v17, &v16)) {
      goto LABEL_40;
    }
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v17;
      if (!os_log_type_enabled(v8, v17)) {
        goto LABEL_40;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v19 = "nw_protocol_demux_input_available";
      os_log_type_t v10 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v17;
      BOOL v12 = os_log_type_enabled(v8, v17);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v19 = "nw_protocol_demux_input_available";
          __int16 v20 = 2082;
          char v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_40:
        if (!v7) {
          return;
        }
LABEL_41:
        free(v7);
        return;
      }
      if (!v12) {
        goto LABEL_40;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v19 = "nw_protocol_demux_input_available";
      os_log_type_t v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v17;
      if (!os_log_type_enabled(v8, v17)) {
        goto LABEL_40;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v19 = "nw_protocol_demux_input_available";
      os_log_type_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_39:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_40;
  }
  handle = a1->handle;
  if (handle)
  {
    handle[89] = 1;
    default_input_handler = a1->default_input_handler;
    if (!default_input_handler
      || (callbacks = default_input_handler->callbacks) == 0
      || (input_available = (void (*)(void))callbacks->input_available) == 0
      || (input_available(), handle[89]))
    {
      uint64_t v6 = *((void *)handle + 10);
      if (v6)
      {
        if (*(_DWORD *)(v6 + 40))
        {
          v15[0] = MEMORY[0x1E4F143A8];
          v15[1] = 0x40000000;
          v15[2] = ___ZL33nw_protocol_demux_input_availableP11nw_protocolS0__block_invoke;
          v15[3] = &__block_descriptor_tmp_37_25998;
          void v15[4] = handle;
          nw_hash_table_apply((char *)v6, (uint64_t)v15);
        }
      }
    }
    handle[89] = 0;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v19 = "nw_protocol_demux_input_available";
  id v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v7, &v17, &v16)) {
    goto LABEL_40;
  }
  if (v17 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_40;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v19 = "nw_protocol_demux_input_available";
    os_log_type_t v10 = "%{public}s called with null demux";
    goto LABEL_39;
  }
  if (!v16)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_40;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v19 = "nw_protocol_demux_input_available";
    os_log_type_t v10 = "%{public}s called with null demux, backtrace limit exceeded";
    goto LABEL_39;
  }
  os_log_type_t v13 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v9 = v17;
  BOOL v14 = os_log_type_enabled(v8, v17);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_40;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v19 = "nw_protocol_demux_input_available";
    os_log_type_t v10 = "%{public}s called with null demux, no backtrace";
    goto LABEL_39;
  }
  if (v14)
  {
    *(_DWORD *)long long buf = 136446466;
    BOOL v19 = "nw_protocol_demux_input_available";
    __int16 v20 = 2082;
    char v21 = v13;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null demux, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7) {
    goto LABEL_41;
  }
}

uint64_t ___ZL33nw_protocol_demux_input_availableP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t v4 = object;
  if (object)
  {
    uint64_t v5 = *(void *)(object + 24);
    if (v5)
    {
      uint64_t v6 = *(void (**)(uint64_t, void))(v5 + 64);
      if (v6)
      {
        v6(object, *(void *)(a1 + 32));
        return *(unsigned __int8 *)(*(void *)(a1 + 32) + 89);
      }
    }
    __nwlog_obj();
    os_log_type_t v8 = *(const char **)(v4 + 16);
    if (!v8) {
      os_log_type_t v8 = "invalid";
    }
  }
  else
  {
    __nwlog_obj();
    os_log_type_t v8 = "invalid";
  }
  *(_DWORD *)long long buf = 136446466;
  uint64_t v22 = "nw_protocol_demux_input_available_block_invoke";
  __int16 v23 = 2082;
  id v24 = v8;
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_36;
      }
      BOOL v12 = "invalid";
      if (v4 && *(void *)(v4 + 16)) {
        BOOL v12 = *(const char **)(v4 + 16);
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v22 = "nw_protocol_demux_input_available_block_invoke";
      __int16 v23 = 2082;
      id v24 = v12;
      os_log_type_t v13 = "%{public}s protocol %{public}s has invalid input_available callback";
      goto LABEL_35;
    }
    if (!v19)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_36;
      }
      os_log_type_t v17 = "invalid";
      if (v4 && *(void *)(v4 + 16)) {
        os_log_type_t v17 = *(const char **)(v4 + 16);
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v22 = "nw_protocol_demux_input_available_block_invoke";
      __int16 v23 = 2082;
      id v24 = v17;
      os_log_type_t v13 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v15 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v15)
      {
        char v16 = "invalid";
        if (v4 && *(void *)(v4 + 16)) {
          char v16 = *(const char **)(v4 + 16);
        }
        *(_DWORD *)long long buf = 136446722;
        uint64_t v22 = "nw_protocol_demux_input_available_block_invoke";
        __int16 v23 = 2082;
        id v24 = v16;
        __int16 v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_36;
    }
    if (v15)
    {
      os_log_type_t v18 = "invalid";
      if (v4 && *(void *)(v4 + 16)) {
        os_log_type_t v18 = *(const char **)(v4 + 16);
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v22 = "nw_protocol_demux_input_available_block_invoke";
      __int16 v23 = 2082;
      id v24 = v18;
      os_log_type_t v13 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v10, v11, v13, buf, 0x16u);
    }
  }
LABEL_36:
  if (v9) {
    free(v9);
  }
  return *(unsigned __int8 *)(*(void *)(a1 + 32) + 89);
}

uint64_t nw_protocol_demux_get_input_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_demux_get_input_frames";
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type) = 16;
    LOBYTE(v70) = 0;
    if (!__nwlog_fault(v26, &type, &v70)) {
      goto LABEL_72;
    }
    if (type != 17)
    {
      if (!(_BYTE)v70)
      {
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, (os_log_type_t)type)) {
          goto LABEL_72;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_get_input_frames";
        os_log_type_t v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_71;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v31 = os_log_type_enabled(v27, (os_log_type_t)type);
      if (!backtrace_string)
      {
        if (!v31) {
          goto LABEL_72;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_get_input_frames";
        os_log_type_t v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_71;
      }
      if (v31)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v32 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_51:
        _os_log_impl(&dword_1830D4000, v27, v28, v32, buf, 0x16u);
      }
LABEL_52:
      free(backtrace_string);
      goto LABEL_72;
    }
    uint64_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    if (!os_log_type_enabled(v27, (os_log_type_t)type)) {
      goto LABEL_72;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_demux_get_input_frames";
    os_log_type_t v29 = "%{public}s called with null protocol";
LABEL_71:
    _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
LABEL_72:
    if (v26) {
      free(v26);
    }
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_demux_get_input_frames";
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type) = 16;
    LOBYTE(v70) = 0;
    if (!__nwlog_fault(v26, &type, &v70)) {
      goto LABEL_72;
    }
    if (type == 17)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, (os_log_type_t)type)) {
        goto LABEL_72;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_demux_get_input_frames";
      os_log_type_t v29 = "%{public}s called with null demux";
      goto LABEL_71;
    }
    if (!(_BYTE)v70)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, (os_log_type_t)type)) {
        goto LABEL_72;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_demux_get_input_frames";
      os_log_type_t v29 = "%{public}s called with null demux, backtrace limit exceeded";
      goto LABEL_71;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v33 = os_log_type_enabled(v27, (os_log_type_t)type);
    if (backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v32 = "%{public}s called with null demux, dumping backtrace:%{public}s";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v33) {
      goto LABEL_72;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_demux_get_input_frames";
    os_log_type_t v29 = "%{public}s called with null demux, no backtrace";
    goto LABEL_71;
  }
  int v9 = a5;
  int v10 = a4;
  handle[89] = 0;
  uint64_t output_handler = a1->output_handler;
  if (a1->default_input_handler == a2)
  {
    output_handler_context = 0;
    BOOL v14 = handle + 64;
    if (*((void *)handle + 8)) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }
  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v25 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_demux_get_input_frames";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = handle + 90;
      _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_ERROR, "%{public}s %s No valid node found", buf, 0x16u);
      return 0;
    }
    return 0;
  }
  BOOL v14 = output_handler_context + 4;
  if (output_handler_context[4])
  {
LABEL_6:
    return nw_frame_array_fill_from_pending_array(v14, (uint64_t)a6, a4, a5);
  }
LABEL_10:
  uint64_t v16 = *((void *)handle + 10);
  if (v16 && *(_DWORD *)(v16 + 40))
  {
    v78[0] = 0;
    v78[1] = v78;
    nw_protocol_get_input_frames((uint64_t)output_handler, (uint64_t)a1, a3, a4, a5, (uint64_t)v78);
    uint64_t v17 = v78[0];
    if (v78[0])
    {
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      unsigned char buf[24] = 0;
      uint64_t type = 0;
      p_uint64_t type = &type;
      uint64_t v76 = 0x2000000000;
      char v77 = 0;
      uint64_t v70 = 0;
      id v71 = &v70;
      int v73 = 0;
      uint64_t v72 = 0x2000000000;
      v58[0] = MEMORY[0x1E4F143A8];
      v58[1] = 0x40000000;
      id v59 = ___ZL34nw_protocol_demux_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      os_log_type_t v60 = &unk_1E523E0B8;
      long long v65 = handle;
      long long v66 = output_handler_context;
      uint64_t v67 = a6;
      __int16 v61 = &v70;
      __int16 v62 = buf;
      uint64_t v68 = a2;
      uint64_t v69 = a1;
      __int16 v63 = &type;
      BOOL v64 = v78;
      do
      {
        if (!v17) {
          break;
        }
        uint64_t v18 = *(void *)(v17 + 32);
        char v19 = ((uint64_t (*)(void *))v59)(v58);
        uint64_t v17 = v18;
      }
      while ((v19 & 1) != 0);
      if (*(unsigned char *)(*(void *)&buf[8] + 24))
      {
        __int16 v20 = (char *)*((void *)handle + 10);
        v57[0] = MEMORY[0x1E4F143A8];
        v57[1] = 0x40000000;
        v57[2] = ___ZL34nw_protocol_demux_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_35;
        v57[3] = &__block_descriptor_tmp_36_26017;
        v57[4] = handle;
        nw_hash_table_apply(v20, (uint64_t)v57);
      }
      if (!*((unsigned char *)p_type + 24)) {
        goto LABEL_23;
      }
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        callbacks = default_input_handler->callbacks;
        if (callbacks)
        {
          input_available = (void (*)(void))callbacks->input_available;
          if (input_available)
          {
            input_available();
LABEL_23:
            uint64_t v24 = *((unsigned int *)v71 + 6);
            if (!v24)
            {
              if ((*(unsigned char *)(*(void *)&buf[8] + 24) || *((unsigned char *)p_type + 24)) && *v14) {
                uint64_t v24 = nw_frame_array_fill_from_pending_array(v14, (uint64_t)a6, v10, v9);
              }
              else {
                uint64_t v24 = 0;
              }
            }
            _Block_object_dispose(&v70, 8);
            _Block_object_dispose(&type, 8);
            _Block_object_dispose(buf, 8);
            return v24;
          }
        }
      }
      __nwlog_obj();
      os_log_type_t v34 = a1->default_input_handler;
      BOOL v35 = "invalid";
      if (v34)
      {
        identifier = v34->identifier;
        if (identifier) {
          BOOL v35 = (const char *)identifier;
        }
      }
      int v79 = 136446466;
      BOOL v80 = "nw_protocol_demux_get_input_frames";
      __int16 v81 = 2082;
      os_log_type_t v82 = v35;
      id v37 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v56 = OS_LOG_TYPE_ERROR;
      char v55 = 0;
      if (__nwlog_fault(v37, &v56, &v55))
      {
        if (v56 == OS_LOG_TYPE_FAULT)
        {
          uint64_t v38 = __nwlog_obj();
          os_log_type_t v39 = v56;
          if (!os_log_type_enabled(v38, v56)) {
            goto LABEL_95;
          }
          uint64_t v40 = a1->default_input_handler;
          os_log_type_t v41 = "invalid";
          if (v40)
          {
            BOOL v42 = v40->identifier;
            if (v42) {
              os_log_type_t v41 = (const char *)v42;
            }
          }
          int v79 = 136446466;
          BOOL v80 = "nw_protocol_demux_get_input_frames";
          __int16 v81 = 2082;
          os_log_type_t v82 = v41;
          os_log_type_t v43 = "%{public}s protocol %{public}s has invalid input_available callback";
          goto LABEL_94;
        }
        if (!v55)
        {
          uint64_t v38 = __nwlog_obj();
          os_log_type_t v39 = v56;
          if (!os_log_type_enabled(v38, v56)) {
            goto LABEL_95;
          }
          os_log_type_t v49 = a1->default_input_handler;
          id v50 = "invalid";
          if (v49)
          {
            id v51 = v49->identifier;
            if (v51) {
              id v50 = (const char *)v51;
            }
          }
          int v79 = 136446466;
          BOOL v80 = "nw_protocol_demux_get_input_frames";
          __int16 v81 = 2082;
          os_log_type_t v82 = v50;
          os_log_type_t v43 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
          goto LABEL_94;
        }
        os_log_type_t v44 = (char *)__nw_create_backtrace_string();
        uint64_t v38 = __nwlog_obj();
        os_log_type_t v39 = v56;
        BOOL v45 = os_log_type_enabled(v38, v56);
        if (v44)
        {
          if (v45)
          {
            os_log_type_t v46 = a1->default_input_handler;
            char v47 = "invalid";
            if (v46)
            {
              id v48 = v46->identifier;
              if (v48) {
                char v47 = (const char *)v48;
              }
            }
            int v79 = 136446722;
            BOOL v80 = "nw_protocol_demux_get_input_frames";
            __int16 v81 = 2082;
            os_log_type_t v82 = v47;
            __int16 v83 = 2082;
            BOOL v84 = v44;
            _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", (uint8_t *)&v79, 0x20u);
          }
          free(v44);
          goto LABEL_95;
        }
        if (v45)
        {
          uint64_t v52 = a1->default_input_handler;
          char v53 = "invalid";
          if (v52)
          {
            char v54 = v52->identifier;
            if (v54) {
              char v53 = (const char *)v54;
            }
          }
          int v79 = 136446466;
          BOOL v80 = "nw_protocol_demux_get_input_frames";
          __int16 v81 = 2082;
          os_log_type_t v82 = v53;
          os_log_type_t v43 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_94:
          _os_log_impl(&dword_1830D4000, v38, v39, v43, (uint8_t *)&v79, 0x16u);
        }
      }
LABEL_95:
      if (v37) {
        free(v37);
      }
      goto LABEL_23;
    }
    return 0;
  }

  return nw_protocol_get_input_frames((uint64_t)output_handler, (uint64_t)a1, a3, a4, a5, (uint64_t)a6);
}

BOOL ___ZL34nw_protocol_demux_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t extra = nw_hash_node_get_extra(a2);
  for (uint64_t i = *(uint64_t **)(extra + 16); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v6 = *((unsigned __int16 *)i + 9);
    if (*((_WORD *)i + 9))
    {
      uint64_t v7 = *((unsigned __int16 *)i + 8);
      if (*(_DWORD *)(a1 + 96) >= (v7 + v6))
      {
        os_log_type_t v8 = (unsigned __int8 *)(*(void *)(a1 + 56) + v7);
        for (uint64_t j = (unsigned __int8 *)i + 50; ; ++j)
        {
          int v10 = *v8++;
          if (((*(j - 30) ^ v10) & *j) != 0) {
            break;
          }
          if (!--v6)
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
            if (*(void *)(a1 + 64) == a2)
            {
              uint64_t v13 = *(void *)(a1 + 72);
              uint64_t v14 = *(void *)(a1 + 80);
              *(void *)(v14 + 32) = 0;
              BOOL v15 = *(void **)(v13 + 8);
              *(void *)(v14 + 40) = v15;
              *BOOL v15 = v14;
              *(void *)(v13 + 8) = v14 + 32;
              if (gLogDatapath)
              {
                __int16 v20 = __nwlog_obj();
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v21 = *(void *)(a1 + 88);
                  if (v21) {
                    uint64_t v22 = (const char *)(v21 + 90);
                  }
                  else {
                    uint64_t v22 = "";
                  }
                  int v23 = 136446466;
                  uint64_t v24 = "nw_protocol_demux_get_input_frames_block_invoke_2";
                  __int16 v25 = 2080;
                  __int16 v26 = v22;
                  _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %s Found frame matching pattern", (uint8_t *)&v23, 0x16u);
                }
              }
              ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
            }
            else
            {
              uint64_t v11 = *(void *)(a1 + 80);
              *(void *)(v11 + 32) = 0;
              BOOL v12 = *(void **)(extra + 8);
              *(void *)(v11 + 40) = v12;
              void *v12 = v11;
              *(void *)(extra + 8) = v11 + 32;
              if (gLogDatapath)
              {
                uint64_t v17 = __nwlog_obj();
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v18 = *(void *)(a1 + 88);
                  if (v18) {
                    char v19 = (const char *)(v18 + 90);
                  }
                  else {
                    char v19 = "";
                  }
                  int v23 = 136446466;
                  uint64_t v24 = "nw_protocol_demux_get_input_frames_block_invoke";
                  __int16 v25 = 2080;
                  __int16 v26 = v19;
                  _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %s Found frame matching pattern, pending", (uint8_t *)&v23, 0x16u);
                }
              }
              *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
            }
            return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
          }
        }
      }
    }
  }
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t nw_protocol_demux_get_output_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v20 = "nw_protocol_demux_get_output_frames";
    int v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v20 = "nw_protocol_demux_get_output_frames";
      BOOL v12 = "%{public}s called with null protocol";
      goto LABEL_33;
    }
    if (!v17)
    {
      int v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v20 = "nw_protocol_demux_get_output_frames";
      BOOL v12 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v14 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (!v14) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v20 = "nw_protocol_demux_get_output_frames";
      BOOL v12 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_33;
    }
    if (v14)
    {
      *(_DWORD *)long long buf = 136446466;
      __int16 v20 = "nw_protocol_demux_get_output_frames";
      __int16 v21 = 2082;
      uint64_t v22 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_34:
    if (!v9) {
      return 0;
    }
LABEL_35:
    free(v9);
    return 0;
  }
  if (!a1->handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v20 = "nw_protocol_demux_get_output_frames";
    int v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v20 = "nw_protocol_demux_get_output_frames";
      BOOL v12 = "%{public}s called with null demux";
      goto LABEL_33;
    }
    if (!v17)
    {
      int v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v20 = "nw_protocol_demux_get_output_frames";
      BOOL v12 = "%{public}s called with null demux, backtrace limit exceeded";
      goto LABEL_33;
    }
    BOOL v15 = (char *)__nw_create_backtrace_string();
    int v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (v15)
    {
      if (v16)
      {
        *(_DWORD *)long long buf = 136446466;
        __int16 v20 = "nw_protocol_demux_get_output_frames";
        __int16 v21 = 2082;
        uint64_t v22 = v15;
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null demux, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v15);
      if (!v9) {
        return 0;
      }
      goto LABEL_35;
    }
    if (v16)
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v20 = "nw_protocol_demux_get_output_frames";
      BOOL v12 = "%{public}s called with null demux, no backtrace";
LABEL_33:
      _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  uint64_t output_handler = a1->output_handler;

  return nw_protocol_get_output_frames((uint64_t)output_handler, (uint64_t)a1, a3, a4, a5, (uint64_t)a6);
}

BOOL nw_protocol_demux_supports_external_data(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[88] != 0;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v14 = "nw_protocol_demux_supports_external_data";
    long long v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v14 = "nw_protocol_demux_supports_external_data";
        uint64_t v6 = "%{public}s called with null demux";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v14 = "nw_protocol_demux_supports_external_data";
        uint64_t v6 = "%{public}s called with null demux, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v14 = "nw_protocol_demux_supports_external_data";
        uint64_t v6 = "%{public}s called with null demux, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 136446466;
      BOOL v14 = "nw_protocol_demux_supports_external_data";
      __int16 v15 = 2082;
      BOOL v16 = backtrace_string;
      int v9 = "%{public}s called with null demux, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v14 = "nw_protocol_demux_supports_external_data";
  long long v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v14 = "nw_protocol_demux_supports_external_data";
        uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v14 = "nw_protocol_demux_supports_external_data";
        uint64_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)long long buf = 136446466;
      BOOL v14 = "nw_protocol_demux_supports_external_data";
      __int16 v15 = 2082;
      BOOL v16 = backtrace_string;
      int v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)long long buf = 136446210;
    BOOL v14 = "nw_protocol_demux_supports_external_data";
    uint64_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

void nw_protocol_demux_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v21 = "nw_protocol_demux_disconnected";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v8, &v19, &v18)) {
      goto LABEL_41;
    }
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = v19;
      if (!os_log_type_enabled(v9, v19)) {
        goto LABEL_41;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v21 = "nw_protocol_demux_disconnected";
      char v11 = "%{public}s called with null protocol";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v10 = v19;
      BOOL v14 = os_log_type_enabled(v9, v19);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v21 = "nw_protocol_demux_disconnected";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_41:
        if (!v8) {
          return;
        }
LABEL_42:
        free(v8);
        return;
      }
      if (!v14) {
        goto LABEL_41;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v21 = "nw_protocol_demux_disconnected";
      char v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = v19;
      if (!os_log_type_enabled(v9, v19)) {
        goto LABEL_41;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v21 = "nw_protocol_demux_disconnected";
      char v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_40:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_41;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    if (gLogDatapath)
    {
      BOOL v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446466;
        __int16 v21 = "nw_protocol_demux_disconnected";
        __int16 v22 = 2080;
        uint64_t v23 = handle + 90;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %s Disconnected from output handler", buf, 0x16u);
      }
    }
    nw_protocol_remove_instance((uint64_t)a1);
    uint64_t v4 = (char *)*((void *)handle + 10);
    if (v4)
    {
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 0x40000000;
      v17[2] = ___ZL30nw_protocol_demux_disconnectedP11nw_protocolS0__block_invoke;
      v17[3] = &__block_descriptor_tmp_31_26081;
      void v17[4] = handle;
      nw_hash_table_apply(v4, (uint64_t)v17);
    }
    uint64_t v5 = *((void *)handle + 6);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 24);
      if (v6)
      {
        uint64_t v7 = *(void (**)(void))(v6 + 48);
        if (v7) {
          v7();
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v21 = "nw_protocol_demux_disconnected";
  BOOL v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v19 = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (!__nwlog_fault(v8, &v19, &v18)) {
    goto LABEL_41;
  }
  if (v19 == OS_LOG_TYPE_FAULT)
  {
    int v9 = __nwlog_obj();
    os_log_type_t v10 = v19;
    if (!os_log_type_enabled(v9, v19)) {
      goto LABEL_41;
    }
    *(_DWORD *)long long buf = 136446210;
    __int16 v21 = "nw_protocol_demux_disconnected";
    char v11 = "%{public}s called with null demux";
    goto LABEL_40;
  }
  if (!v18)
  {
    int v9 = __nwlog_obj();
    os_log_type_t v10 = v19;
    if (!os_log_type_enabled(v9, v19)) {
      goto LABEL_41;
    }
    *(_DWORD *)long long buf = 136446210;
    __int16 v21 = "nw_protocol_demux_disconnected";
    char v11 = "%{public}s called with null demux, backtrace limit exceeded";
    goto LABEL_40;
  }
  __int16 v15 = (char *)__nw_create_backtrace_string();
  int v9 = __nwlog_obj();
  os_log_type_t v10 = v19;
  BOOL v16 = os_log_type_enabled(v9, v19);
  if (!v15)
  {
    if (!v16) {
      goto LABEL_41;
    }
    *(_DWORD *)long long buf = 136446210;
    __int16 v21 = "nw_protocol_demux_disconnected";
    char v11 = "%{public}s called with null demux, no backtrace";
    goto LABEL_40;
  }
  if (v16)
  {
    *(_DWORD *)long long buf = 136446466;
    __int16 v21 = "nw_protocol_demux_disconnected";
    __int16 v22 = 2082;
    uint64_t v23 = v15;
    _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null demux, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v15);
  if (v8) {
    goto LABEL_42;
  }
}

uint64_t ___ZL30nw_protocol_demux_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t v4 = object;
  if (object)
  {
    uint64_t v5 = *(void *)(object + 24);
    if (v5)
    {
      uint64_t v6 = *(void (**)(uint64_t, void))(v5 + 48);
      if (v6)
      {
        v6(object, *(void *)(a1 + 32));
        return 1;
      }
    }
    __nwlog_obj();
    BOOL v8 = *(const char **)(v4 + 16);
    if (!v8) {
      BOOL v8 = "invalid";
    }
  }
  else
  {
    __nwlog_obj();
    BOOL v8 = "invalid";
  }
  *(_DWORD *)long long buf = 136446466;
  __int16 v22 = "nw_protocol_demux_disconnected_block_invoke";
  __int16 v23 = 2082;
  uint64_t v24 = v8;
  int v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_36;
      }
      BOOL v12 = "invalid";
      if (v4 && *(void *)(v4 + 16)) {
        BOOL v12 = *(const char **)(v4 + 16);
      }
      *(_DWORD *)long long buf = 136446466;
      __int16 v22 = "nw_protocol_demux_disconnected_block_invoke";
      __int16 v23 = 2082;
      uint64_t v24 = v12;
      uint64_t v13 = "%{public}s protocol %{public}s has invalid disconnected callback";
      goto LABEL_35;
    }
    if (!v19)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_36;
      }
      uint64_t v17 = "invalid";
      if (v4 && *(void *)(v4 + 16)) {
        uint64_t v17 = *(const char **)(v4 + 16);
      }
      *(_DWORD *)long long buf = 136446466;
      __int16 v22 = "nw_protocol_demux_disconnected_block_invoke";
      __int16 v23 = 2082;
      uint64_t v24 = v17;
      uint64_t v13 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v15 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v15)
      {
        BOOL v16 = "invalid";
        if (v4 && *(void *)(v4 + 16)) {
          BOOL v16 = *(const char **)(v4 + 16);
        }
        *(_DWORD *)long long buf = 136446722;
        __int16 v22 = "nw_protocol_demux_disconnected_block_invoke";
        __int16 v23 = 2082;
        uint64_t v24 = v16;
        __int16 v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_36;
    }
    if (v15)
    {
      char v18 = "invalid";
      if (v4 && *(void *)(v4 + 16)) {
        char v18 = *(const char **)(v4 + 16);
      }
      *(_DWORD *)long long buf = 136446466;
      __int16 v22 = "nw_protocol_demux_disconnected_block_invoke";
      __int16 v23 = 2082;
      uint64_t v24 = v18;
      uint64_t v13 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v10, v11, v13, buf, 0x16u);
    }
  }
LABEL_36:
  if (v9) {
    free(v9);
  }
  return 1;
}

void nw_protocol_demux_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v19 = "nw_protocol_demux_disconnect";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)long long buf = 136446210;
      char v19 = "nw_protocol_demux_disconnect";
      os_log_type_t v11 = "%{public}s called with null protocol";
      goto LABEL_41;
    }
    if (!v16)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)long long buf = 136446210;
      char v19 = "nw_protocol_demux_disconnect";
      os_log_type_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_42;
      }
      *(_DWORD *)long long buf = 136446210;
      char v19 = "nw_protocol_demux_disconnect";
      os_log_type_t v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_41;
    }
    if (v13)
    {
      *(_DWORD *)long long buf = 136446466;
      char v19 = "nw_protocol_demux_disconnect";
      __int16 v20 = 2082;
      __int16 v21 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_42:
    if (!v8) {
      return;
    }
    goto LABEL_43;
  }
  handle = (nw_protocol **)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    char v19 = "nw_protocol_demux_disconnect";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)long long buf = 136446210;
      char v19 = "nw_protocol_demux_disconnect";
      os_log_type_t v11 = "%{public}s called with null demux";
      goto LABEL_41;
    }
    if (!v16)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)long long buf = 136446210;
      char v19 = "nw_protocol_demux_disconnect";
      os_log_type_t v11 = "%{public}s called with null demux, backtrace limit exceeded";
      goto LABEL_41;
    }
    BOOL v14 = (char *)__nw_create_backtrace_string();
    int v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (v14)
    {
      if (v15)
      {
        *(_DWORD *)long long buf = 136446466;
        char v19 = "nw_protocol_demux_disconnect";
        __int16 v20 = 2082;
        __int16 v21 = v14;
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null demux, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v14);
      if (!v8) {
        return;
      }
LABEL_43:
      free(v8);
      return;
    }
    if (v15)
    {
      *(_DWORD *)long long buf = 136446210;
      char v19 = "nw_protocol_demux_disconnect";
      os_log_type_t v11 = "%{public}s called with null demux, no backtrace";
LABEL_41:
      _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      goto LABEL_42;
    }
    goto LABEL_42;
  }
  if (handle[6] == a2)
  {
    uint64_t output_handler = a1->output_handler;
    if (!output_handler) {
      return;
    }
    callbacks = output_handler->callbacks;
    if (!callbacks) {
      return;
    }
    disconnect = (void (*)(nw_protocol *, nw_protocol *))callbacks->disconnect;
    if (!disconnect) {
      return;
    }
  }
  else
  {
    if (!a2) {
      return;
    }
    uint64_t v4 = a2->callbacks;
    if (!v4) {
      return;
    }
    disconnect = (void (*)(nw_protocol *, nw_protocol *))v4->disconnected;
    if (!disconnect) {
      return;
    }
    uint64_t output_handler = a2;
  }

  disconnect(output_handler, a1);
}

uint64_t nw_protocol_demux_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v20 = "nw_protocol_demux_connect";
    int v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17)) {
      goto LABEL_43;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_43;
        }
        *(_DWORD *)long long buf = 136446210;
        __int16 v20 = "nw_protocol_demux_connect";
        BOOL v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_42;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (!v14) {
          goto LABEL_43;
        }
        *(_DWORD *)long long buf = 136446210;
        __int16 v20 = "nw_protocol_demux_connect";
        BOOL v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_42;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446466;
        __int16 v20 = "nw_protocol_demux_connect";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        BOOL v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v10, v11, v15, buf, 0x16u);
      }
LABEL_33:
      free(backtrace_string);
      goto LABEL_43;
    }
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)long long buf = 136446210;
    __int16 v20 = "nw_protocol_demux_connect";
    BOOL v12 = "%{public}s called with null protocol";
LABEL_42:
    _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
LABEL_43:
    if (v9) {
      free(v9);
    }
    return 0;
  }
  handle = (nw_protocol **)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v20 = "nw_protocol_demux_connect";
    int v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v20 = "nw_protocol_demux_connect";
      BOOL v12 = "%{public}s called with null demux";
      goto LABEL_42;
    }
    if (!v17)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v20 = "nw_protocol_demux_connect";
      BOOL v12 = "%{public}s called with null demux, backtrace limit exceeded";
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)long long buf = 136446466;
        __int16 v20 = "nw_protocol_demux_connect";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        BOOL v15 = "%{public}s called with null demux, dumping backtrace:%{public}s";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (!v16) {
      goto LABEL_43;
    }
    *(_DWORD *)long long buf = 136446210;
    __int16 v20 = "nw_protocol_demux_connect";
    BOOL v12 = "%{public}s called with null demux, no backtrace";
    goto LABEL_42;
  }
  if (handle[6] != a2)
  {
    if (a2)
    {
      callbacks = a2->callbacks;
      if (callbacks)
      {
        connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
        if (connected) {
          connected(a2, a1);
        }
      }
    }
    return 1;
  }
  uint64_t result = (uint64_t)handle[4];
  if (!result) {
    return result;
  }
  uint64_t v7 = *(void *)(result + 24);
  if (!v7) {
    return 0;
  }
  BOOL v8 = *(uint64_t (**)(void))(v7 + 24);
  if (!v8) {
    return 0;
  }

  return v8();
}

uint64_t nw_protocol_demux_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v24 = "nw_protocol_demux_remove_input_handler";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v11, &type, &v21)) {
      goto LABEL_48;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        BOOL v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_48;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v24 = "nw_protocol_demux_remove_input_handler";
        BOOL v14 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_47;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (!v16) {
          goto LABEL_48;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v24 = "nw_protocol_demux_remove_input_handler";
        BOOL v14 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_47;
      }
      if (v16)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v24 = "nw_protocol_demux_remove_input_handler";
        __int16 v25 = 2082;
        __int16 v26 = backtrace_string;
        char v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
        _os_log_impl(&dword_1830D4000, v12, v13, v17, buf, 0x16u);
      }
LABEL_38:
      free(backtrace_string);
      goto LABEL_48;
    }
    BOOL v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_48;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v24 = "nw_protocol_demux_remove_input_handler";
    BOOL v14 = "%{public}s called with null protocol";
LABEL_47:
    _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
LABEL_48:
    if (v11) {
      free(v11);
    }
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v24 = "nw_protocol_demux_remove_input_handler";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v11, &type, &v21)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_protocol_demux_remove_input_handler";
      BOOL v14 = "%{public}s called with null demux";
      goto LABEL_47;
    }
    if (!v21)
    {
      BOOL v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_protocol_demux_remove_input_handler";
      BOOL v14 = "%{public}s called with null demux, backtrace limit exceeded";
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v24 = "nw_protocol_demux_remove_input_handler";
        __int16 v25 = 2082;
        __int16 v26 = backtrace_string;
        char v17 = "%{public}s called with null demux, dumping backtrace:%{public}s";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    if (!v18) {
      goto LABEL_48;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v24 = "nw_protocol_demux_remove_input_handler";
    BOOL v14 = "%{public}s called with null demux, no backtrace";
    goto LABEL_47;
  }
  uint64_t v5 = a2;
  if (!a2) {
    return (uint64_t)v5;
  }
  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  }
  if (a1->default_input_handler != v5)
  {
    uint64_t output_handler_context = (uint64_t)v5->output_handler_context;
    if (output_handler_context)
    {
      v5->uint64_t output_handler_context = 0;
      nw_protocol_set_output_handler((uint64_t)v5, 0);
      uint64_t v5 = (nw_protocol *)nw_protocol_demux_destroy_entry((uint64_t)handle, output_handler_context);
      if (a3)
      {
        if (!a1->default_input_handler)
        {
          uint64_t v8 = *((void *)handle + 10);
          if (!v8 || !*(_DWORD *)(v8 + 40)) {
            nw_protocol_demux_destroy(handle);
          }
        }
      }
      return (uint64_t)v5;
    }
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  uint64_t output_handler = a1->output_handler;
  if (output_handler)
  {
    ((void (*)(void))output_handler->callbacks->remove_input_handler)();
    nw_protocol_set_output_handler((uint64_t)a1, 0);
  }
  if (a3)
  {
    uint64_t v10 = *((void *)handle + 10);
    if (v10 && *(_DWORD *)(v10 + 40))
    {
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 0x40000000;
      v20[2] = ___ZL38nw_protocol_demux_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v20[3] = &__block_descriptor_tmp_22_26117;
      void v20[4] = handle;
      nw_hash_table_apply((char *)v10, (uint64_t)v20);
    }
    else
    {
      nw_protocol_demux_destroy(handle);
    }
  }
  return 1;
}

void nw_protocol_demux_destroy(char *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*((char **)a1 + 5) != a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v29 = "nw_protocol_demux_destroy";
    long long v2 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v2))
    {
      __break(1u);
      return;
    }
    free(v2);
  }
  if (gLogDatapath)
  {
    BOOL v16 = __nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v29 = "nw_protocol_demux_destroy";
      __int16 v30 = 2080;
      BOOL v31 = a1 + 90;
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %s Destroying protocol", buf, 0x16u);
    }
  }
  long long v3 = (char *)*((void *)a1 + 10);
  if (v3)
  {
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 0x40000000;
    v25[2] = ___ZL25nw_protocol_demux_destroyP8nw_demux_block_invoke;
    v25[3] = &__block_descriptor_tmp_23_26145;
    void v25[4] = a1;
    nw_hash_table_apply(v3, (uint64_t)v25);
    uint64_t v4 = (os_unfair_lock_s *)*((void *)a1 + 10);
    if (v4)
    {
      _nw_hash_table_release(v4);
      *((void *)a1 + 10) = 0;
    }
  }
  uint64_t v5 = (void *)*((void *)a1 + 8);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        if (!v5) {
          goto LABEL_29;
        }
        uint64_t v6 = (void (*)(void *, void, uint64_t))v5[10];
        uint64_t v7 = (void *)v5[4];
        if (!v6) {
          break;
        }
        uint64_t v8 = v5[11];
        v5[10] = 0;
        v5[11] = 0;
        v6(v5, 0, v8);
        uint64_t v5 = v7;
      }
      __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v29 = "__nw_frame_finalize";
      int v9 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v26 = 0;
      uint64_t v24 = (char *)v9;
      if (__nwlog_fault(v9, &type, &v26))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v21 = __nwlog_obj();
          os_log_type_t log = type;
          if (!os_log_type_enabled(v21, type)) {
            goto LABEL_26;
          }
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v29 = "__nw_frame_finalize";
          uint64_t v10 = v21;
          os_log_type_t v11 = log;
          BOOL v12 = "%{public}s called with null frame->finalizer";
LABEL_25:
          _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
          goto LABEL_26;
        }
        if (!v26)
        {
          uint64_t v23 = __nwlog_obj();
          os_log_type_t logb = type;
          if (!os_log_type_enabled(v23, type)) {
            goto LABEL_26;
          }
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v29 = "__nw_frame_finalize";
          uint64_t v10 = v23;
          os_log_type_t v11 = logb;
          BOOL v12 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
          goto LABEL_25;
        }
        backtrace_string = __nw_create_backtrace_string();
        nw_endpoint_t loga = __nwlog_obj();
        os_log_type_t v17 = type;
        BOOL v13 = os_log_type_enabled(loga, type);
        BOOL v14 = (char *)backtrace_string;
        if (!backtrace_string)
        {
          if (!v13) {
            goto LABEL_26;
          }
          *(_DWORD *)long long buf = 136446210;
          os_log_type_t v29 = "__nw_frame_finalize";
          uint64_t v10 = loga;
          os_log_type_t v11 = v17;
          BOOL v12 = "%{public}s called with null frame->finalizer, no backtrace";
          goto LABEL_25;
        }
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v29 = "__nw_frame_finalize";
          __int16 v30 = 2082;
          BOOL v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, loga, v17, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
          BOOL v14 = (char *)backtrace_string;
        }
        free(v14);
      }
LABEL_26:
      if (v24) {
        free(v24);
      }
      uint64_t v5 = v7;
    }
  }
LABEL_29:
  nw_protocol_remove_instance((uint64_t)a1);
  uint64_t v15 = *((void *)a1 + 4);
  if (v15)
  {
    (*(void (**)(uint64_t, char *))(*(void *)(v15 + 24) + 8))(v15, a1);
    nw_protocol_set_output_handler((uint64_t)a1, 0);
  }
  free(a1);
}

uint64_t ___ZL38nw_protocol_demux_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t v4 = object;
  if (object)
  {
    uint64_t v5 = *(void *)(object + 24);
    if (v5)
    {
      uint64_t v6 = *(void (**)(uint64_t, void))(v5 + 48);
      if (v6)
      {
        v6(object, *(void *)(a1 + 32));
        return 1;
      }
    }
    __nwlog_obj();
    uint64_t v8 = *(const char **)(v4 + 16);
    if (!v8) {
      uint64_t v8 = "invalid";
    }
  }
  else
  {
    __nwlog_obj();
    uint64_t v8 = "invalid";
  }
  *(_DWORD *)long long buf = 136446466;
  uint64_t v22 = "nw_protocol_demux_remove_input_handler_block_invoke";
  __int16 v23 = 2082;
  uint64_t v24 = v8;
  int v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_36;
      }
      BOOL v12 = "invalid";
      if (v4 && *(void *)(v4 + 16)) {
        BOOL v12 = *(const char **)(v4 + 16);
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v22 = "nw_protocol_demux_remove_input_handler_block_invoke";
      __int16 v23 = 2082;
      uint64_t v24 = v12;
      BOOL v13 = "%{public}s protocol %{public}s has invalid disconnected callback";
      goto LABEL_35;
    }
    if (!v19)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_36;
      }
      os_log_type_t v17 = "invalid";
      if (v4 && *(void *)(v4 + 16)) {
        os_log_type_t v17 = *(const char **)(v4 + 16);
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v22 = "nw_protocol_demux_remove_input_handler_block_invoke";
      __int16 v23 = 2082;
      uint64_t v24 = v17;
      BOOL v13 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v15 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v15)
      {
        BOOL v16 = "invalid";
        if (v4 && *(void *)(v4 + 16)) {
          BOOL v16 = *(const char **)(v4 + 16);
        }
        *(_DWORD *)long long buf = 136446722;
        uint64_t v22 = "nw_protocol_demux_remove_input_handler_block_invoke";
        __int16 v23 = 2082;
        uint64_t v24 = v16;
        __int16 v25 = 2082;
        char v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_36;
    }
    if (v15)
    {
      BOOL v18 = "invalid";
      if (v4 && *(void *)(v4 + 16)) {
        BOOL v18 = *(const char **)(v4 + 16);
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v22 = "nw_protocol_demux_remove_input_handler_block_invoke";
      __int16 v23 = 2082;
      uint64_t v24 = v18;
      BOOL v13 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v10, v11, v13, buf, 0x16u);
    }
  }
LABEL_36:
  if (v9) {
    free(v9);
  }
  return 1;
}

BOOL nw_protocol_demux_destroy_entry(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t extra = (void *)nw_hash_node_get_extra(a2);
  uint64_t v5 = (void *)*extra;
  if (*extra)
  {
    while (1)
    {
      while (1)
      {
        if (!v5) {
          goto LABEL_22;
        }
        uint64_t v6 = (void (*)(void *, void, uint64_t))v5[10];
        uint64_t v7 = (void *)v5[4];
        if (!v6) {
          break;
        }
        uint64_t v8 = v5[11];
        v5[10] = 0;
        v5[11] = 0;
        v6(v5, 0, v8);
        uint64_t v5 = v7;
      }
      __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      uint64_t v38 = "__nw_frame_finalize";
      int v9 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v35 = 0;
      os_log_type_t v34 = (char *)v9;
      if (__nwlog_fault(v9, &type, &v35))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v31 = __nwlog_obj();
          os_log_type_t log = type;
          if (!os_log_type_enabled(v31, type)) {
            goto LABEL_19;
          }
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "__nw_frame_finalize";
          uint64_t v10 = v31;
          os_log_type_t v11 = log;
          BOOL v12 = "%{public}s called with null frame->finalizer";
LABEL_18:
          _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
          goto LABEL_19;
        }
        if (!v35)
        {
          BOOL v33 = __nwlog_obj();
          os_log_type_t logb = type;
          if (!os_log_type_enabled(v33, type)) {
            goto LABEL_19;
          }
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "__nw_frame_finalize";
          uint64_t v10 = v33;
          os_log_type_t v11 = logb;
          BOOL v12 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
          goto LABEL_18;
        }
        backtrace_string = __nw_create_backtrace_string();
        nw_endpoint_t loga = __nwlog_obj();
        os_log_type_t v27 = type;
        BOOL v13 = os_log_type_enabled(loga, type);
        BOOL v14 = (char *)backtrace_string;
        if (!backtrace_string)
        {
          if (!v13) {
            goto LABEL_19;
          }
          *(_DWORD *)long long buf = 136446210;
          uint64_t v38 = "__nw_frame_finalize";
          uint64_t v10 = loga;
          os_log_type_t v11 = v27;
          BOOL v12 = "%{public}s called with null frame->finalizer, no backtrace";
          goto LABEL_18;
        }
        if (v13)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v38 = "__nw_frame_finalize";
          __int16 v39 = 2082;
          uint64_t v40 = backtrace_string;
          _os_log_impl(&dword_1830D4000, loga, v27, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
          BOOL v14 = (char *)backtrace_string;
        }
        free(v14);
      }
LABEL_19:
      if (v34) {
        free(v34);
      }
      uint64_t v5 = v7;
    }
  }
LABEL_22:
  BOOL v15 = (void *)extra[2];
  if (v15)
  {
    do
    {
      os_log_type_t v17 = (void *)*v15;
      BOOL v16 = (void *)v15[1];
      if (*v15)
      {
        v17[1] = v16;
        BOOL v16 = (void *)v15[1];
      }
      else
      {
        extra[3] = v16;
      }
      void *v16 = v17;
      *BOOL v15 = 0;
      v15[1] = 0;
      if (v15 != extra + 4) {
        free(v15);
      }
      BOOL v15 = v17;
    }
    while (v17);
  }
  BOOL v18 = nw_hash_table_remove_node(*(void *)(a1 + 80), a2);
  if (!v18)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v19 = (const char *)(a1 + 90);
    *(_DWORD *)long long buf = 136446466;
    uint64_t v38 = "nw_protocol_demux_destroy_entry";
    __int16 v39 = 2080;
    uint64_t v40 = (const char *)(a1 + 90);
    __int16 v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v20, &type, &v35)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v21 = gLogObj;
      os_log_type_t v22 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v38 = "nw_protocol_demux_destroy_entry";
      __int16 v39 = 2080;
      uint64_t v40 = v19;
      __int16 v23 = "%{public}s %s nw_hash_table_remove_node failed";
    }
    else if (v35)
    {
      uint64_t v24 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v21 = gLogObj;
      os_log_type_t v22 = type;
      BOOL v25 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v24)
      {
        if (v25)
        {
          *(_DWORD *)long long buf = 136446722;
          uint64_t v38 = "nw_protocol_demux_destroy_entry";
          __int16 v39 = 2080;
          uint64_t v40 = v19;
          __int16 v41 = 2082;
          BOOL v42 = v24;
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s %s nw_hash_table_remove_node failed, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v24);
        goto LABEL_45;
      }
      if (!v25)
      {
LABEL_45:
        if (v20) {
          free(v20);
        }
        return v18;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v38 = "nw_protocol_demux_destroy_entry";
      __int16 v39 = 2080;
      uint64_t v40 = v19;
      __int16 v23 = "%{public}s %s nw_hash_table_remove_node failed, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v21 = gLogObj;
      os_log_type_t v22 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v38 = "nw_protocol_demux_destroy_entry";
      __int16 v39 = 2080;
      uint64_t v40 = v19;
      __int16 v23 = "%{public}s %s nw_hash_table_remove_node failed, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v21, v22, v23, buf, 0x16u);
    goto LABEL_45;
  }
  return v18;
}

uint64_t ___ZL25nw_protocol_demux_destroyP8nw_demux_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

BOOL nw_protocol_demux_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
    char v26 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v26, &type, &v37)) {
      goto LABEL_67;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_67;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
        os_log_type_t v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_66;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v31 = os_log_type_enabled(v27, type);
      if (!backtrace_string)
      {
        if (!v31) {
          goto LABEL_67;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
        os_log_type_t v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_66;
      }
      if (v31)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v32 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_54:
        _os_log_impl(&dword_1830D4000, v27, v28, v32, buf, 0x16u);
      }
LABEL_55:
      free(backtrace_string);
      goto LABEL_67;
    }
    os_log_type_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    if (!os_log_type_enabled(v27, type)) {
      goto LABEL_67;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
    os_log_type_t v29 = "%{public}s called with null protocol";
LABEL_66:
    _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
LABEL_67:
    if (v26) {
      free(v26);
    }
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
    char v26 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v26, &type, &v37)) {
      goto LABEL_67;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
      os_log_type_t v29 = "%{public}s called with null demux";
      goto LABEL_66;
    }
    if (!v37)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
      os_log_type_t v29 = "%{public}s called with null demux, backtrace limit exceeded";
      goto LABEL_66;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v33 = os_log_type_enabled(v27, type);
    if (backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v32 = "%{public}s called with null demux, dumping backtrace:%{public}s";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (!v33) {
      goto LABEL_67;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
    os_log_type_t v29 = "%{public}s called with null demux, no backtrace";
    goto LABEL_66;
  }
  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    if (default_input_handler != a2)
    {
      if (!a2
        || (callbacks = a2->callbacks) == 0
        || (get_parameters = (uint64_t (*)(nw_protocol *))callbacks->get_parameters) == 0)
      {
        os_log_type_t v22 = __nwlog_obj();
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = handle + 90;
        __int16 v23 = "%{public}s %s Input handler does not support parameters";
        goto LABEL_29;
      }
      uint64_t v8 = (void *)get_parameters(a2);
      int v9 = nw_parameters_copy_protocol_options_legacy(v8, (nw_protocol *)handle);
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t internal = *((void *)handle + 10);
        if (!internal)
        {
          uint64_t internal = nw_hash_table_create_internal(5u, 112, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
          if (internal) {
            *(_DWORD *)(internal + 48) &= ~2u;
          }
          *((void *)handle + 10) = internal;
        }
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        BOOL v12 = nw_hash_table_add_object(internal, (uint64_t)a2, (char *)&type);
        BOOL v13 = type != OS_LOG_TYPE_DEFAULT;
        if (type)
        {
          BOOL v14 = (void *)v12;
          uint64_t extra = nw_hash_node_get_extra(v12);
          *(void *)uint64_t extra = 0;
          *(void *)(extra + 8) = extra;
          *(void *)(extra + 16) = 0;
          *(void *)(extra + 24) = extra + 16;
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 0x40000000;
          *(void *)&buf[16] = ___ZL35nw_demux_options_copy_pattern_chainP19nw_protocol_optionsP21nw_demux_pattern_headP16nw_demux_pattern_block_invoke;
          *(void *)&long long v40 = &__block_descriptor_tmp_20_26159;
          *((void *)&v40 + 1) = extra + 16;
          uint64_t v41 = extra + 32;
          nw_protocol_options_access_handle(v10, buf);
          os_release(v10);
          if (gLogDatapath)
          {
            os_log_type_t v34 = __nwlog_obj();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              int v35 = *(unsigned __int16 *)(extra + 50);
              int v36 = *(unsigned __int16 *)(extra + 48);
              *(_DWORD *)long long buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = handle + 90;
              *(_WORD *)&unsigned char buf[22] = 1024;
              LODWORD(v40) = v35;
              WORD2(v40) = 1024;
              *(_DWORD *)((char *)&v40 + 6) = v36;
              _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %s Received pattern of length %u at offset %u", buf, 0x22u);
            }
          }
          a2->uint64_t output_handler_context = v14;
          nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v24 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = handle + 90;
            *(_WORD *)&unsigned char buf[22] = 1042;
            LODWORD(v40) = 16;
            WORD2(v40) = 2098;
            *(void *)((char *)&v40 + 6) = a2;
            _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_ERROR, "%{public}s %s Input handler already registered for %{public,uuid_t}.16P", buf, 0x26u);
          }
          os_release(v10);
        }
        return v13;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v22 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = handle + 90;
        __int16 v23 = "%{public}s %s Input handler did not provide options";
LABEL_29:
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, v23, buf, 0x16u);
      }
    }
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
  if (!a2) {
    return 1;
  }
  *(_OWORD *)a1->uint64_t flow_id = *(_OWORD *)a2->flow_id;
  if (!a2->output_handler) {
    nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
  }
  BOOL v16 = a2->callbacks;
  if (!v16) {
    return 1;
  }
  os_log_type_t v17 = (uint64_t (*)(nw_protocol *))v16->get_parameters;
  if (v17)
  {
    BOOL v18 = (void *)v17(a2);
    if (v18)
    {
      char v19 = nw_parameters_copy_protocol_options_legacy(v18, (nw_protocol *)handle);
      nw_protocol_options_get_log_id_str(v19, handle + 90, 84);
      if (v19) {
        os_release(v19);
      }
    }
  }
  __int16 v20 = a2->callbacks;
  if (!v20) {
    return 1;
  }
  supports_external_data = (uint64_t (*)(nw_protocol *))v20->supports_external_data;
  if (!supports_external_data) {
    return 1;
  }
  handle[88] = supports_external_data(a2);
  return 1;
}

uint64_t ___ZL35nw_demux_options_copy_pattern_chainP19nw_protocol_optionsP21nw_demux_pattern_headP16nw_demux_pattern_block_invoke(uint64_t a1, uint64_t **a2)
{
  return 1;
}

void nw_demux_copy_pattern_chain(uint64_t **a1, void *a2, _DWORD *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v24 = "nw_demux_copy_pattern_chain";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_demux_copy_pattern_chain";
      BOOL v15 = "%{public}s called with null old_head";
      goto LABEL_40;
    }
    if (!v21)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_demux_copy_pattern_chain";
      BOOL v15 = "%{public}s called with null old_head, backtrace limit exceeded";
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v17 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (!v17) {
        goto LABEL_41;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_demux_copy_pattern_chain";
      BOOL v15 = "%{public}s called with null old_head, no backtrace";
      goto LABEL_40;
    }
    if (v17)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v24 = "nw_demux_copy_pattern_chain";
      __int16 v25 = 2082;
      uint64_t v26 = (uint64_t)backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null old_head, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_41:
    if (!v12) {
      return;
    }
    goto LABEL_42;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v24 = "nw_demux_copy_pattern_chain";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_demux_copy_pattern_chain";
      BOOL v15 = "%{public}s called with null new_head";
      goto LABEL_40;
    }
    if (!v21)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_demux_copy_pattern_chain";
      BOOL v15 = "%{public}s called with null new_head, backtrace limit exceeded";
      goto LABEL_40;
    }
    BOOL v18 = (char *)__nw_create_backtrace_string();
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v19 = os_log_type_enabled(v13, type);
    if (v18)
    {
      if (v19)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v24 = "nw_demux_copy_pattern_chain";
        __int16 v25 = 2082;
        uint64_t v26 = (uint64_t)v18;
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null new_head, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v18);
      if (!v12) {
        return;
      }
LABEL_42:
      free(v12);
      return;
    }
    if (v19)
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_demux_copy_pattern_chain";
      BOOL v15 = "%{public}s called with null new_head, no backtrace";
LABEL_40:
      _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
      goto LABEL_41;
    }
    goto LABEL_41;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v6 = a3 + 5;
    uint64_t v7 = (char *)a3 + 50;
    do
    {
      if (a3 && !*a2)
      {
        a3[4] = *((_DWORD *)v4 + 4);
        memcpy(v6, (char *)v4 + 20, *((unsigned __int16 *)v4 + 9));
        memcpy(v7, (char *)v4 + 50, *((unsigned __int16 *)v4 + 9));
        *(void *)a3 = 0;
        uint64_t v8 = (void *)a2[1];
        *((void *)a3 + 1) = v8;
        *uint64_t v8 = a3;
        int v9 = a3;
      }
      else
      {
        int v9 = malloc_type_calloc(1uLL, 0x50uLL, 0xEAFB8F1AuLL);
        if (!v9)
        {
          os_log_type_t v11 = __nwlog_obj();
          os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long buf = 136446722;
          uint64_t v24 = "strict_calloc";
          __int16 v25 = 2048;
          uint64_t v26 = 1;
          __int16 v27 = 2048;
          uint64_t v28 = 80;
          __int16 v20 = (void *)_os_log_send_and_compose_impl();
          if (__nwlog_abort((uint64_t)v20))
          {
            __break(1u);
            return;
          }
          free(v20);
        }
        void v9[4] = *((_DWORD *)v4 + 4);
        memcpy(v9 + 5, (char *)v4 + 20, *((unsigned __int16 *)v4 + 9));
        memcpy((char *)v9 + 50, (char *)v4 + 50, *((unsigned __int16 *)v4 + 9));
        *(void *)int v9 = 0;
        uint64_t v10 = (void *)a2[1];
        *((void *)v9 + 1) = v10;
        void *v10 = v9;
      }
      a2[1] = v9;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
}

void *nw_protocol_demux_copy_definition()
{
  if (nw_protocol_demux_copy_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
  }
  uint64_t result = (void *)nw_protocol_demux_copy_definition::definition;
  if (nw_protocol_demux_copy_definition::definition)
  {
    return os_retain(result);
  }
  return result;
}

BOOL __nw_protocol_demux_copy_definition_block_invoke()
{
  if (nw_protocol_demux_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_demux_identifier::onceToken, &__block_literal_global_25983);
  }
  nw_protocol_demux_copy_definition::definition = (uint64_t)nw_protocol_definition_create_with_identifier((long long *)&g_demux_protocol_identifier);
  nw_protocol_definition_set_options_allocator((void *)nw_protocol_demux_copy_definition::definition, (uint64_t)nw_demux_allocate_options, (uint64_t)nw_demux_copy_options, (uint64_t)nw_demux_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_demux_copy_definition::definition, (uint64_t)nw_demux_option_is_equal);
  nw_protocol_definition_set_options_comparator((void *)nw_protocol_demux_copy_definition::definition, (uint64_t)nw_demux_compare_options);
  id v0 = (void *)nw_protocol_demux_copy_definition::definition;

  return nw_protocol_register_handle((uint64_t)&g_demux_protocol_identifier, v0, (uint64_t)nw_protocol_demux_create, 0);
}

uint64_t nw_protocol_demux_create(const nw_protocol_identifier *a1, nw_object *a2, nw_endpoint *a3, nw_parameters *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 0xB0uLL, 0x68FF3B34uLL))
  {
    uint64_t result = (uint64_t)memptr;
    if (memptr) {
      goto LABEL_3;
    }
  }
  uint64_t v5 = __nwlog_obj();
  os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  int v8 = 136446722;
  int v9 = "strict_memalign";
  __int16 v10 = 2048;
  uint64_t v11 = 8;
  __int16 v12 = 2048;
  uint64_t v13 = 176;
  uint64_t v6 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v6);
  if (!result)
  {
    free(v6);
    uint64_t result = (uint64_t)memptr;
LABEL_3:
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(void *)(result + 16) = &g_demux_protocol_identifier;
    *(void *)(result + 24) = &g_demux_protocol_callbacks;
    *(void *)(result + 40) = result;
    *(void *)(result + 72) = result + 64;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t nw_demux_compare_options(uint64_t a1, void *a2, void *a3, int a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v24 = "nw_demux_compare_options";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v13, &type, &v21)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_demux_compare_options";
      BOOL v16 = "%{public}s called with null handle1";
      goto LABEL_51;
    }
    if (!v21)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_demux_compare_options";
      BOOL v16 = "%{public}s called with null handle1, backtrace limit exceeded";
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v18 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v18) {
        goto LABEL_52;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_demux_compare_options";
      BOOL v16 = "%{public}s called with null handle1, no backtrace";
      goto LABEL_51;
    }
    if (v18)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v24 = "nw_demux_compare_options";
      __int16 v25 = 2082;
      uint64_t v26 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null handle1, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_52:
    if (!v13) {
      return 0;
    }
LABEL_53:
    free(v13);
    return 0;
  }
  uint64_t v4 = a3;
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v24 = "nw_demux_compare_options";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v13, &type, &v21)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_demux_compare_options";
      BOOL v16 = "%{public}s called with null handle2";
      goto LABEL_51;
    }
    if (!v21)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_demux_compare_options";
      BOOL v16 = "%{public}s called with null handle2, backtrace limit exceeded";
      goto LABEL_51;
    }
    BOOL v19 = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v20 = os_log_type_enabled(v14, type);
    if (v19)
    {
      if (v20)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v24 = "nw_demux_compare_options";
        __int16 v25 = 2082;
        uint64_t v26 = v19;
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null handle2, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v19);
      if (!v13) {
        return 0;
      }
      goto LABEL_53;
    }
    if (v20)
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_demux_compare_options";
      BOOL v16 = "%{public}s called with null handle2, no backtrace";
LABEL_51:
      _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
      goto LABEL_52;
    }
    goto LABEL_52;
  }
  if ((a4 - 2) < 3) {
    return 1;
  }
  uint64_t v6 = a2;
  int v7 = -1;
  int v8 = a2;
  do
  {
    int v8 = (void *)*v8;
    ++v7;
  }
  while (v8);
  int v9 = -1;
  __int16 v10 = a3;
  do
  {
    __int16 v10 = (void *)*v10;
    ++v9;
  }
  while (v10);
  if (v7 != v9) {
    return 0;
  }
  if (!v7) {
    return 1;
  }
  while (1)
  {
    uint64_t v4 = (void *)*v4;
    uint64_t v6 = (void *)*v6;
    BOOL v11 = !v6 || v4 == 0;
    uint64_t result = v11;
    if (v11) {
      break;
    }
    if (*((unsigned __int16 *)v6 + 8) == *((unsigned __int16 *)v4 + 8))
    {
      size_t v12 = *((unsigned __int16 *)v6 + 9);
      if (v12 == *((unsigned __int16 *)v4 + 9)
        && !memcmp((char *)v6 + 20, (char *)v4 + 20, *((unsigned __int16 *)v6 + 9))
        && !memcmp((char *)v6 + 50, (char *)v4 + 50, v12))
      {
        continue;
      }
    }
    return 0;
  }
  return result;
}

BOOL nw_demux_option_is_equal(nw_protocol_definition *a1, void **a2, void **a3)
{
  long long v3 = a3;
  uint64_t v4 = a2;
  int v5 = -1;
  uint64_t v6 = a2;
  do
  {
    uint64_t v6 = (void **)*v6;
    ++v5;
  }
  while (v6);
  int v7 = -1;
  int v8 = a3;
  do
  {
    int v8 = (void **)*v8;
    ++v7;
  }
  while (v8);
  if (v5 != v7) {
    return 0;
  }
  if (!v5) {
    return 1;
  }
  while (1)
  {
    long long v3 = (void **)*v3;
    uint64_t v4 = (void **)*v4;
    BOOL v9 = !v4 || v3 == 0;
    BOOL result = v9;
    if (v9) {
      break;
    }
    if (*((unsigned __int16 *)v4 + 8) == *((unsigned __int16 *)v3 + 8))
    {
      size_t v11 = *((unsigned __int16 *)v4 + 9);
      if (v11 == *((unsigned __int16 *)v3 + 9)
        && !memcmp((char *)v4 + 20, (char *)v3 + 20, *((unsigned __int16 *)v4 + 9))
        && !memcmp((char *)v4 + 50, (char *)v3 + 50, v11))
      {
        continue;
      }
    }
    return 0;
  }
  return result;
}

void nw_demux_deallocate_options(nw_protocol_definition *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    long long v3 = (char *)*a2;
    if (*a2)
    {
      uint64_t v4 = (char *)(a2 + 2);
      do
      {
        uint64_t v6 = *(char **)v3;
        int v5 = (char **)*((void *)v3 + 1);
        if (*(void *)v3)
        {
          *((void *)v6 + 1) = v5;
          int v5 = (char **)*((void *)v3 + 1);
        }
        else
        {
          a2[1] = v5;
        }
        *int v5 = v6;
        *(void *)long long v3 = 0;
        *((void *)v3 + 1) = 0;
        if (v3 != v4) {
          free(v3);
        }
        long long v3 = v6;
      }
      while (v6);
    }
    free(a2);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_demux_free_pattern_chain";
  int v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v16 = "nw_demux_free_pattern_chain";
      __int16 v10 = "%{public}s called with null head";
      goto LABEL_26;
    }
    if (!v13)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v16 = "nw_demux_free_pattern_chain";
      __int16 v10 = "%{public}s called with null head, backtrace limit exceeded";
      goto LABEL_26;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v16 = "nw_demux_free_pattern_chain";
        __int16 v17 = 2082;
        BOOL v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null head, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_27;
    }
    if (v12)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v16 = "nw_demux_free_pattern_chain";
      __int16 v10 = "%{public}s called with null head, no backtrace";
LABEL_26:
      _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    }
  }
LABEL_27:
  if (v7) {
    free(v7);
  }
}

BOOL nw_demux_copy_options(nw_protocol_definition *a1, uint64_t **a2)
{
  long long v3 = malloc_type_calloc(1uLL, 0x60uLL, 0xEAFB8F1AuLL);
  if (v3) {
    goto LABEL_2;
  }
  int v5 = __nwlog_obj();
  os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  uint64_t v6 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v6);
  if (!result)
  {
    free(v6);
LABEL_2:
    void *v3 = 0;
    v3[1] = v3;
    nw_demux_copy_pattern_chain(a2, v3, (_DWORD *)v3 + 4);
    return (BOOL)v3;
  }
  __break(1u);
  return result;
}

BOOL nw_demux_allocate_options(nw_protocol_definition *a1)
{
  id v1 = malloc_type_calloc(1uLL, 0x60uLL, 0xEAFB8F1AuLL);
  if (v1) {
    goto LABEL_2;
  }
  long long v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  uint64_t v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
LABEL_2:
    void *v1 = 0;
    v1[1] = v1;
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

NWConcrete_nw_protocol_options *nw_demux_create_options()
{
  if (nw_protocol_demux_copy_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
  }
  if (nw_protocol_demux_copy_definition::definition)
  {
    id v0 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
    options = nw_protocol_create_options(v0);
    if (v0) {
      os_release(v0);
    }
    return options;
  }
  else
  {
    return nw_protocol_create_options(0);
  }
}

BOOL __nw_demux_options_add_pattern_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a2)
  {
    uint64_t v4 = (_WORD *)(a2 + 16);
    *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 48);
    *(_WORD *)(a2 + 34) = *(_WORD *)(a1 + 50);
    memcpy((void *)(a2 + 36), *(const void **)(a1 + 32), *(unsigned __int16 *)(a1 + 50));
    os_log_type_t v9 = *(const void **)(a1 + 40);
    __int16 v10 = (void *)(a2 + 66);
    size_t v11 = *(unsigned __int16 *)(a1 + 50);
    if (v9) {
      memcpy(v10, v9, v11);
    }
    else {
      memset(v10, 255, v11);
    }
    BOOL v12 = *(void **)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v12;
    goto LABEL_11;
  }
  uint64_t v4 = malloc_type_calloc(1uLL, 0x50uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    v4[8] = *(_WORD *)(a1 + 48);
    size_t v5 = *(unsigned __int16 *)(a1 + 50);
    v4[9] = v5;
    memcpy(v4 + 10, *(const void **)(a1 + 32), v5);
    uint64_t v6 = *(const void **)(a1 + 40);
    int v7 = v4 + 25;
    size_t v8 = *(unsigned __int16 *)(a1 + 50);
    if (v6) {
      memcpy(v7, v6, v8);
    }
    else {
      memset(v7, 255, v8);
    }
    *(void *)uint64_t v4 = 0;
    BOOL v12 = *(void **)(a2 + 8);
    *((void *)v4 + 1) = v12;
LABEL_11:
    void *v12 = v4;
    *(void *)(a2 + 8) = v4;
    return 1;
  }
  uint64_t v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

BOOL __nw_demux_options_add_pattern_data_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a2)
  {
    uint64_t v4 = (_WORD *)(a2 + 16);
    *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 32);
    *(_WORD *)(a2 + 34) = v8;
    os_log_type_t v9 = *(NSObject **)(a1 + 40);
    uint64_t v17 = 0;
    BOOL v18 = &v17;
    uint64_t v19 = 0x2000000000;
    uint64_t v20 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x2000000000;
    BOOL v16 = (char *)(a2 + 36);
    if (v9)
    {
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      uint64_t v22 = (uint64_t)&unk_1E5242B60;
      uint64_t v24 = &v13;
      uint64_t v25 = v8;
      __int16 v23 = &v17;
      dispatch_data_apply(v9, applier);
    }
    _Block_object_dispose(&v13, 8);
    _Block_object_dispose(&v17, 8);
    memset((void *)(a2 + 66), 255, *(void *)(a1 + 32));
    int v7 = *(void **)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v7;
    goto LABEL_9;
  }
  uint64_t v4 = malloc_type_calloc(1uLL, 0x50uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    v4[8] = *(_WORD *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 32);
    v4[9] = v5;
    uint64_t v6 = *(NSObject **)(a1 + 40);
    uint64_t v17 = 0;
    BOOL v18 = &v17;
    uint64_t v19 = 0x2000000000;
    uint64_t v20 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x2000000000;
    BOOL v16 = (char *)(v4 + 10);
    if (v6)
    {
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      uint64_t v22 = (uint64_t)&unk_1E5242B60;
      uint64_t v24 = &v13;
      uint64_t v25 = v5;
      __int16 v23 = &v17;
      dispatch_data_apply(v6, applier);
    }
    _Block_object_dispose(&v13, 8);
    _Block_object_dispose(&v17, 8);
    memset(v4 + 25, 255, *(void *)(a1 + 32));
    *(void *)uint64_t v4 = 0;
    int v7 = *(void **)(a2 + 8);
    *((void *)v4 + 1) = v7;
LABEL_9:
    void *v7 = v4;
    *(void *)(a2 + 8) = v4;
    return 1;
  }
  size_t v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v22 = 80;
  BOOL v12 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_demux_options_enumerate_patterns(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 0x40000000;
      v10[2] = __nw_demux_options_enumerate_patterns_block_invoke;
      v10[3] = &unk_1E523DFE8;
      v10[4] = a2;
      nw_protocol_options_access_handle(a1, v10);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_demux_options_enumerate_patterns";
    long long v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v2, &v12, &v11))
    {
      if (v12 == OS_LOG_TYPE_FAULT)
      {
        long long v3 = __nwlog_obj();
        os_log_type_t v4 = v12;
        if (!os_log_type_enabled(v3, v12)) {
          goto LABEL_33;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_demux_options_enumerate_patterns";
        uint64_t v5 = "%{public}s called with null enumerate_block";
        goto LABEL_32;
      }
      if (!v11)
      {
        long long v3 = __nwlog_obj();
        os_log_type_t v4 = v12;
        if (!os_log_type_enabled(v3, v12)) {
          goto LABEL_33;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_demux_options_enumerate_patterns";
        uint64_t v5 = "%{public}s called with null enumerate_block, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      long long v3 = __nwlog_obj();
      os_log_type_t v4 = v12;
      BOOL v9 = os_log_type_enabled(v3, v12);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v14 = "nw_demux_options_enumerate_patterns";
          __int16 v15 = 2082;
          BOOL v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v14 = "nw_demux_options_enumerate_patterns";
        uint64_t v5 = "%{public}s called with null enumerate_block, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v14 = "nw_demux_options_enumerate_patterns";
    long long v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v2, &v12, &v11)) {
      goto LABEL_33;
    }
    if (v12 == OS_LOG_TYPE_FAULT)
    {
      long long v3 = __nwlog_obj();
      os_log_type_t v4 = v12;
      if (!os_log_type_enabled(v3, v12)) {
        goto LABEL_33;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v14 = "nw_demux_options_enumerate_patterns";
      uint64_t v5 = "%{public}s called with null options";
      goto LABEL_32;
    }
    if (!v11)
    {
      long long v3 = __nwlog_obj();
      os_log_type_t v4 = v12;
      if (!os_log_type_enabled(v3, v12)) {
        goto LABEL_33;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v14 = "nw_demux_options_enumerate_patterns";
      uint64_t v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_32;
    }
    uint64_t v6 = (char *)__nw_create_backtrace_string();
    long long v3 = __nwlog_obj();
    os_log_type_t v4 = v12;
    BOOL v7 = os_log_type_enabled(v3, v12);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v14 = "nw_demux_options_enumerate_patterns";
      uint64_t v5 = "%{public}s called with null options, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v14 = "nw_demux_options_enumerate_patterns";
      __int16 v15 = 2082;
      BOOL v16 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

uint64_t __nw_demux_options_enumerate_patterns_block_invoke(uint64_t a1, void *a2)
{
  do
    a2 = (void *)*a2;
  while (a2 && ((*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))() & 1) != 0);
  return 1;
}

void __nw_authentication_credential_storage_copy_shared_block_invoke()
{
  id v0 = objc_alloc_init(NWConcrete_nw_authentication_credential_storage);
  id v1 = (void *)nw_authentication_credential_storage_copy_shared_storage;
  nw_authentication_credential_storage_copy_shared_storage = (uint64_t)v0;

  uint64_t v2 = [MEMORY[0x1E4F18D90] sharedCredentialStorage];
  long long v3 = *(void **)(nw_authentication_credential_storage_copy_shared_storage + 8);
  *(void *)(nw_authentication_credential_storage_copy_shared_storage + 8) = v2;
}

NWConcrete_nw_authentication_credential_storage *nw_authentication_credential_storage_create_ns(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(NWConcrete_nw_authentication_credential_storage);
  credentialStorage = v2->credentialStorage;
  v2->credentialStorage = v1;

  return v2;
}

void nw_authentication_credential_cache_entry_set_http_authentication(void *a1, const void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v3 = a1;
  os_log_type_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = (const void *)v3[1];
    if (v5)
    {
      CFRelease(v5);
      v4[1] = 0;
    }
    if (a2) {
      v4[1] = CFRetain(a2);
    }
    goto LABEL_6;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v16 = "nw_authentication_credential_cache_entry_set_http_authentication";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_authentication_credential_cache_entry_set_http_authentication";
        __int16 v10 = "%{public}s called with null cache_entry";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)long long buf = 136446466;
            BOOL v16 = "nw_authentication_credential_cache_entry_set_http_authentication";
            __int16 v17 = 2082;
            BOOL v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v12) {
          goto LABEL_21;
        }
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_authentication_credential_cache_entry_set_http_authentication";
        __int16 v10 = "%{public}s called with null cache_entry, no backtrace";
        goto LABEL_20;
      }
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v16 = "nw_authentication_credential_cache_entry_set_http_authentication";
        __int16 v10 = "%{public}s called with null cache_entry, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void nw_authentication_credential_cache_entry_set_for_proxy(uint64_t a1, char a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(unsigned char *)(a1 + 28) = a2;
    return;
  }
  uint64_t v2 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v12 = "nw_authentication_credential_cache_entry_set_for_proxy";
  long long v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v12 = "nw_authentication_credential_cache_entry_set_for_proxy";
        uint64_t v6 = "%{public}s called with null cache_entry";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)long long buf = 136446466;
            BOOL v12 = "nw_authentication_credential_cache_entry_set_for_proxy";
            __int16 v13 = 2082;
            uint64_t v14 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v8) {
          goto LABEL_18;
        }
        *(_DWORD *)long long buf = 136446210;
        BOOL v12 = "nw_authentication_credential_cache_entry_set_for_proxy";
        uint64_t v6 = "%{public}s called with null cache_entry, no backtrace";
        goto LABEL_17;
      }
      os_log_type_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v12 = "nw_authentication_credential_cache_entry_set_for_proxy";
        uint64_t v6 = "%{public}s called with null cache_entry, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v3) {
    free(v3);
  }
}

void sub_183822490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL35nw_endpoint_proxy_configs_are_equalPU22objcproto11OS_nw_array8NSObjectS1__block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = nw_array_get_object_at_index(*(void *)(a1 + 32), a2);
  char is_equal = nw_proxy_config_is_equal(v5, v6);

  if ((is_equal & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

  return v8;
}

void sub_1838225FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_proxy_unsatisfied_handler_should_use_proxy_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  if (!nw_proxy_config_supports_unsatisfied_paths(a3)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

void sub_183822F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18382544C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_18382578C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183825904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183825A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL31nw_endpoint_proxy_check_for_pacP30NWConcrete_nw_endpoint_handlerPU22objcproto11OS_nw_array8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = nw_proxy_config_get_mode(a3) & 0xFFFFFFFE;
  if (v4 == 2)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 97) |= 2u;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return v4 != 2;
}

uint64_t __Block_byref_object_copy__26574(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26575(uint64_t a1)
{
}

uint64_t ___ZL43nw_endpoint_proxy_check_for_companion_proxyPU22objcproto11OS_nw_array8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (!nw_proxy_config_get_is_companion_proxy(v5)) {
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void *)(v6 + 40);
  BOOL v7 = (id *)(v6 + 40);
  if (!v8)
  {
    objc_storeStrong(v7, a3);
LABEL_7:
    uint64_t v11 = 1;
    goto LABEL_8;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v9 = (id)gLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    int v13 = 136446722;
    uint64_t v14 = "nw_endpoint_proxy_check_for_companion_proxy_block_invoke";
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s Can only have a single companion proxy, got %@ and %@", (uint8_t *)&v13, 0x20u);
  }

  uint64_t v11 = 0;
LABEL_8:

  return v11;
}

CFURLRef nw_endpoint_proxy_copy_synthesized_url(void *a1, void *a2, int a3, unsigned char *a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  if (!v7)
  {
    os_log_type_t v44 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    v52[0] = 16;
    char v51 = 0;
    if (!__nwlog_fault(v24, v52, &v51)) {
      goto LABEL_68;
    }
    if (v52[0] == 17)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v45 = v52[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v52[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_1830D4000, v25, v45, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v51)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v47 = v52[0];
      BOOL v48 = os_log_type_enabled(v25, (os_log_type_t)v52[0]);
      if (backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v25, v47, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_68;
      }
      if (v48)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_1830D4000, v25, v47, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v49 = v52[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v52[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_1830D4000, v25, v49, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_67:

    goto LABEL_68;
  }
  char v9 = v7;
  int v10 = [v9 type];

  if ((v10 - 3) <= 0xFFFFFFFD)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s Endpoint type is not an address or host, cannot synthesize URL", buf, 0xCu);
    }

    goto LABEL_6;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v57 = 0;
    if (v8 && a3)
    {
      v50[0] = MEMORY[0x1E4F143A8];
      v50[1] = 3221225472;
      v50[2] = __nw_endpoint_proxy_copy_synthesized_url_block_invoke;
      v50[3] = &unk_1E523FA40;
      void v50[4] = buf;
      nw_parameters_internal_iterate_protocol_stack(v8, 4, 0, v50);
      if (*(unsigned char *)(*(void *)&buf[8] + 24))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v15 = (id)gLogObj;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v52 = 136446210;
          char v53 = "nw_endpoint_proxy_copy_synthesized_url";
          _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s Found TLS protocol, using https://", v52, 0xCu);
        }

        uint64_t v16 = v9;
        int v17 = [v16 port];

        BOOL v18 = v17 != 47873;
        if (a4 && v17 != 47873) {
          *a4 = 1;
        }
        CFStringAppend(Mutable, @"https://");
        if (v10 != 2)
        {
LABEL_17:
          if (v10 == 1)
          {
            uint64_t v19 = nw_endpoint_copy_address_string(v9);
            if (v19)
            {
              int address_family = nw_endpoint_get_address_family(v9);
              BOOL v22 = address_family == 30 || address_family == 18;
              if (v18 && v22) {
                CFStringAppendFormat(Mutable, 0, @"[%s]", v19);
              }
              else {
                CFStringAppendFormat(Mutable, 0, @"%s", v19);
              }
              free(v19);
            }
          }
LABEL_44:
          if (v18)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v34 = (id)gLogObj;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uint64_t v52 = 136446210;
              char v53 = "nw_endpoint_proxy_copy_synthesized_url";
              _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s Overrode to https://, adding port number to URL", v52, 0xCu);
            }

            int v35 = v9;
            unsigned int v36 = [v35 port];

            CFStringAppendFormat(Mutable, 0, @":%u", __rev16(v36));
          }
          CFURLRef v12 = CFURLCreateWithString(v13, Mutable, 0);
          CFRelease(Mutable);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v37 = (id)gLogObj;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t v52 = 136446466;
            char v53 = "nw_endpoint_proxy_copy_synthesized_url";
            __int16 v54 = 2114;
            CFURLRef v55 = v12;
            _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Synthesized URL %{public}@", v52, 0x16u);
          }

LABEL_60:
          _Block_object_dispose(buf, 8);
          goto LABEL_61;
        }
LABEL_42:
        uint64_t v32 = v9;
        uint64_t v33 = [v32 hostname];

        if (v33) {
          CFStringAppendFormat(Mutable, 0, @"%s", v33);
        }
        goto LABEL_44;
      }
    }
    else if (!v8)
    {
      goto LABEL_39;
    }
    if (nw_parameters_get_ip_protocol(v8) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v27 = (id)gLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v52 = 136446210;
        char v53 = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s Using datagram service lookup for UDP", v52, 0xCu);
      }

      uint64_t v28 = "udp";
LABEL_40:
      uint64_t v29 = v9;
      int v30 = [v29 port];

      BOOL v31 = getservbyport(v30, v28);
      if (!v31)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v41 = (id)gLogObj;
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v52 = 136446210;
          char v53 = "nw_endpoint_proxy_copy_synthesized_url";
          _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s Unknown service and did not find TLS protocol, cannot synthesize URL", v52, 0xCu);
        }

        CFRelease(Mutable);
        CFURLRef v12 = 0;
        goto LABEL_60;
      }
      CFStringAppendFormat(Mutable, 0, @"%s://", v31->s_name);
      BOOL v18 = 0;
      if (v10 != 2) {
        goto LABEL_17;
      }
      goto LABEL_42;
    }
LABEL_39:
    uint64_t v28 = "tcp";
    goto LABEL_40;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v23 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
  uint64_t v24 = (char *)_os_log_send_and_compose_impl();

  v52[0] = 16;
  char v51 = 0;
  if (__nwlog_fault(v24, v52, &v51))
  {
    if (v52[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v25 = (id)gLogObj;
      os_log_type_t v26 = v52[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v52[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s CFStringCreateMutable failed", buf, 0xCu);
      }
    }
    else if (v51)
    {
      uint64_t v38 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v25 = (id)gLogObj;
      os_log_type_t v39 = v52[0];
      BOOL v40 = os_log_type_enabled(v25, (os_log_type_t)v52[0]);
      if (v38)
      {
        if (v40)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v38;
          _os_log_impl(&dword_1830D4000, v25, v39, "%{public}s CFStringCreateMutable failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v38);
        if (!v24) {
          goto LABEL_6;
        }
        goto LABEL_69;
      }
      if (v40)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_1830D4000, v25, v39, "%{public}s CFStringCreateMutable failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v25 = (id)gLogObj;
      os_log_type_t v43 = v52[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v52[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_1830D4000, v25, v43, "%{public}s CFStringCreateMutable failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_67;
  }
LABEL_68:
  if (v24) {
LABEL_69:
  }
    free(v24);
LABEL_6:
  CFURLRef v12 = 0;
LABEL_61:

  return v12;
}

void sub_18382667C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_endpoint_proxy_process_configP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (nw_proxy_config_is_privacy_proxy(v4, 0) && !nw_proxy_config_use_over_privacy_proxy(v4)) {
    nw_array_append(*(void *)(a1 + 32), v4);
  }

  return 1;
}

uint64_t ___ZL32nw_endpoint_proxy_process_configP30NWConcrete_nw_endpoint_handler_block_invoke_2(void **a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (nw_proxy_config_is_privacy_proxy(v4, 0)) {
    nw_endpoint_proxy_add_config_if_applicable(a1[4], a1[5], v4, a1[6], a1[7], 0);
  }

  return 1;
}

void sub_1838267B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_endpoint_proxy_process_configP30NWConcrete_nw_endpoint_handler_block_invoke_3(void **a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ((nw_proxy_config_is_privacy_proxy(v4, 0) & 1) == 0) {
    nw_endpoint_proxy_add_config_if_applicable(a1[4], a1[5], v4, a1[6], a1[7], 0);
  }

  return 1;
}

void sub_183826820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_endpoint_proxy_process_configP30NWConcrete_nw_endpoint_handler_block_invoke_4(void **a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ((nw_proxy_config_is_privacy_proxy(v4, 0) & 1) == 0) {
    nw_endpoint_proxy_add_config_if_applicable(a1[4], a1[5], v4, a1[6], a1[7], 1);
  }

  return 1;
}

void sub_18382688C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_proxy_has_unresolved_proxies(NWConcrete_nw_endpoint_handler *a1, BOOL *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  long long v3 = a1;
  uint64_t v39 = 0;
  BOOL v40 = &v39;
  uint64_t v41 = 0x2020000000;
  char v42 = 0;
  uint64_t v35 = 0;
  unsigned int v36 = &v35;
  uint64_t v37 = 0x2020000000;
  char v38 = 0;
  id v4 = nw_endpoint_handler_copy_proxy(v3);
  id v5 = (atomic_uchar *)*((void *)v4 + 7);
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 3221225472;
  v34[2] = ___ZL40nw_endpoint_proxy_has_unresolved_proxiesP30NWConcrete_nw_endpoint_handlerPb_block_invoke;
  v34[3] = &unk_1E5248260;
  v34[4] = &v39;
  v34[5] = &v35;
  nw_array_apply(v5, (uint64_t)v34);
  if (!*((unsigned char *)v40 + 24) && !*((unsigned char *)v36 + 24))
  {
    if ((*((unsigned char *)v4 + 96) & 0xA0) == 0x20)
    {
      int minimize_logging = nw_endpoint_handler_get_minimize_logging(v3);
      char logging_disabled = nw_endpoint_handler_get_logging_disabled(v3);
      if (minimize_logging)
      {
        if (logging_disabled) {
          goto LABEL_19;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v8 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(v3);
          uint64_t v27 = nw_endpoint_handler_dry_run_string(v3);
          nw_endpoint_t v28 = nw_endpoint_handler_copy_endpoint(v3);
          logging_description = nw_endpoint_get_logging_description(v28);
          int v30 = nw_endpoint_handler_state_string(v3);
          BOOL v31 = nw_endpoint_handler_mode_string(v3);
          id v32 = nw_endpoint_handler_copy_current_path(v3);
          *(_DWORD *)long long buf = 136447746;
          os_log_type_t v44 = "nw_endpoint_proxy_has_unresolved_proxies";
          __int16 v45 = 2082;
          os_log_type_t v46 = id_string;
          __int16 v47 = 2082;
          BOOL v48 = v27;
          __int16 v49 = 2082;
          id v50 = logging_description;
          __int16 v51 = 2082;
          uint64_t v52 = v30;
          __int16 v53 = 2082;
          __int16 v54 = v31;
          __int16 v55 = 2114;
          id v56 = v32;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] direct attempts prohibited, not recommending", buf, 0x48u);
        }
        goto LABEL_10;
      }
      if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v8 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          char v9 = nw_endpoint_handler_get_id_string(v3);
          int v10 = nw_endpoint_handler_dry_run_string(v3);
          nw_endpoint_t v11 = nw_endpoint_handler_copy_endpoint(v3);
          CFURLRef v12 = nw_endpoint_get_logging_description(v11);
          CFAllocatorRef v13 = nw_endpoint_handler_state_string(v3);
          uint64_t v14 = nw_endpoint_handler_mode_string(v3);
          id v15 = nw_endpoint_handler_copy_current_path(v3);
          *(_DWORD *)long long buf = 136447746;
          os_log_type_t v44 = "nw_endpoint_proxy_has_unresolved_proxies";
          __int16 v45 = 2082;
          os_log_type_t v46 = v9;
          __int16 v47 = 2082;
          BOOL v48 = v10;
          __int16 v49 = 2082;
          id v50 = v12;
          __int16 v51 = 2082;
          uint64_t v52 = v13;
          __int16 v53 = 2082;
          __int16 v54 = v14;
          __int16 v55 = 2114;
          id v56 = v15;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] direct attempts prohibited, not recommending", buf, 0x48u);
        }
LABEL_10:
      }
    }
    else if (a2)
    {
      if ((nw_endpoint_handler_get_logging_disabled(v3) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v16 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          int v17 = nw_endpoint_handler_get_id_string(v3);
          BOOL v18 = nw_endpoint_handler_dry_run_string(v3);
          uint64_t v19 = v17;
          nw_endpoint_t v33 = nw_endpoint_handler_copy_endpoint(v3);
          uint64_t v20 = nw_endpoint_get_logging_description(v33);
          char v21 = nw_endpoint_handler_state_string(v3);
          BOOL v22 = nw_endpoint_handler_mode_string(v3);
          id v23 = nw_endpoint_handler_copy_current_path(v3);
          *(_DWORD *)long long buf = 136447746;
          os_log_type_t v44 = "nw_endpoint_proxy_has_unresolved_proxies";
          __int16 v45 = 2082;
          os_log_type_t v46 = v19;
          __int16 v47 = 2082;
          BOOL v48 = v18;
          __int16 v49 = 2082;
          id v50 = v20;
          __int16 v51 = 2082;
          uint64_t v52 = v21;
          __int16 v53 = 2082;
          __int16 v54 = v22;
          __int16 v55 = 2114;
          id v56 = v23;
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no resolved proxies or missing url, recommending direct attempt", buf, 0x48u);
        }
      }
      *a2 = 1;
    }
  }
LABEL_19:
  BOOL v24 = *((unsigned char *)v40 + 24) != 0;

  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);

  return v24;
}

void sub_183826E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

BOOL ___ZL34nw_endpoint_proxy_complete_resolveP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int mode = nw_proxy_config_get_mode(a3);
  if (mode == 4) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return mode != 4;
}

uint64_t nw_endpoint_proxy_get_failure_count(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    long long v3 = v1;
    nw_endpoint_handler_initialize_association(v3);
    id v4 = v3[7];

    if (!v4) {
      goto LABEL_7;
    }
    if (nw_protocol_copy_proxy_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_proxy_definition(void)::onceToken, &__block_literal_global_26625);
    }
    uint64_t cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v4, (void *)nw_protocol_copy_proxy_definition(void)::proxy_definition);
    if (cached_content_for_protocol) {
      uint64_t v6 = *(unsigned int *)(cached_content_for_protocol + 4);
    }
    else {
LABEL_7:
    }
      uint64_t v6 = 0;

    goto LABEL_9;
  }
  id v8 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v19 = "nw_endpoint_proxy_get_failure_count";
  char v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v19 = "nw_endpoint_proxy_get_failure_count";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null child_handler", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v19 = "nw_endpoint_proxy_get_failure_count";
          __int16 v20 = 2082;
          char v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null child_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v19 = "nw_endpoint_proxy_get_failure_count";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null child_handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v19 = "nw_endpoint_proxy_get_failure_count";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null child_handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_26:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

void sub_183827218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_endpoint_proxy_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1)
{
  return nw_endpoint_proxy_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
}

unint64_t nw_endpoint_proxy_get_timeout_nanos(NWConcrete_nw_endpoint_handler *a1, int a2)
{
  long long v3 = a1;
  id v4 = &nw_setting_proxy_fast_rtt_delay_factor;
  if (a2)
  {
    int64_t v5 = 1;
  }
  else
  {
    id v4 = &nw_setting_proxy_rtt_delay_factor;
    int64_t v5 = 4;
  }
  int64_t int64_with_default = networkd_settings_get_int64_with_default(*v4, v5);
  if (v3)
  {
    unint64_t v7 = nw_endpoint_handler_get_child_timeout_nanos(v3) * int64_with_default;
    if (!a2) {
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v7 = 250000000 * int64_with_default;
    if (!a2) {
      goto LABEL_8;
    }
  }
  int64_t v8 = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_fast_max_delay_ms, 10000);
  if (v7 >= 1000000 * v8) {
    unint64_t v7 = 1000000 * v8;
  }
LABEL_8:

  return v7;
}

void sub_1838272F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_endpoint_proxy_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke_166(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 100) |= 1u;
  return nw_endpoint_proxy_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 40));
}

void ___ZL33nw_protocol_copy_proxy_definitionv_block_invoke()
{
  named = nw_protocol_definition_create_named(1, 0);
  id v1 = (void *)nw_protocol_copy_proxy_definition(void)::proxy_definition;
  nw_protocol_copy_proxy_definition(void)::proxy_definition = (uint64_t)named;

  nw_protocol_definition_set_cache_entry_deallocator((void *)nw_protocol_copy_proxy_definition(void)::proxy_definition, nw_proxy_deallocate_cache_entry);
  uint64_t v2 = (void *)nw_protocol_copy_proxy_definition(void)::proxy_definition;

  nw_protocol_definition_set_should_flush_cache_entry(v2, nw_proxy_should_flush_cache_entry);
}

size_t nw_proxy_should_flush_cache_entry(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5)
{
  id v7 = a4;
  id v8 = a5;
  char v9 = v8;
  if (a3) {
    size_t v10 = 1;
  }
  else {
    size_t v10 = nw_path_signature_changed_from_previous(v8, v7);
  }

  return v10;
}

void sub_1838273F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_deallocate_cache_entry(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

void ___ZL38nw_endpoint_proxy_add_child_for_configP30NWConcrete_nw_endpoint_handlerPU29objcproto18OS_nw_proxy_config8NSObjectS3__block_invoke(uint64_t a1, void *a2)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  long long v3 = a2;
  if (nw_protocol_options_is_serializable_tls(v3))
  {
    v8[0] = 0;
    v8[1] = 0;
    options_from_serializable = nw_tls_create_options_from_serializable(v3, (uint64_t)v8, 0);

    long long v3 = options_from_serializable;
  }
  if (nw_protocol_options_is_tls(v3)
    && nw_parameters_get_should_trust_invalid_certificates(*(void **)(a1 + 32)))
  {
    int64_t v5 = v3;
    sec_protocol_options_set_peer_authentication_required(v5, 0);
  }
  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = nw_protocol_options_copy(v3);
  nw_protocol_stack_append_application_protocol(v6, v7);
}

void sub_1838274F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_protocol_copy_proxy_definition(void)
{
  if (nw_protocol_copy_proxy_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_proxy_definition(void)::onceToken, &__block_literal_global_26625);
  }
  id v0 = (void *)nw_protocol_copy_proxy_definition(void)::proxy_definition;

  return v0;
}

BOOL ___ZL32nw_endpoint_proxy_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  unint64_t v7 = *(unsigned int *)(*(void *)(a1 + 32) + 24);
  if (v7 > a2 && *(id *)(a1 + 40) != v5) {
    nw_endpoint_handler_cancel(v5, 0, 0);
  }

  return v7 > a2;
}

void sub_18382761C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_endpoint_proxy_has_unresolved_proxiesP30NWConcrete_nw_endpoint_handlerPb_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int mode = nw_proxy_config_get_mode(a3);
  if ((mode & 0xFFFFFFFE) == 2)
  {
    uint64_t v5 = a1 + 32;
LABEL_5:
    *(unsigned char *)(*(void *)(*(void *)v5 + 8) + 24) = 1;
    return 1;
  }
  if (mode)
  {
    uint64_t v5 = a1 + 40;
    goto LABEL_5;
  }
  return 1;
}

void ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_153(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = v5[29];

    if (v6 == 3)
    {
      if ((int)nw_endpoint_handler_get_state(*(void **)(a1 + 32)) <= 2)
      {
        BOOL v7 = nw_array_create();
        id v8 = *(atomic_uchar **)(*(void *)(a1 + 40) + 56);
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 3221225472;
        v20[2] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_154;
        v20[3] = &unk_1E52497B8;
        id v21 = *(id *)(a1 + 48);
        id v22 = v3;
        id v9 = (id)v7;
        id v23 = v9;
        nw_array_apply(v8, (uint64_t)v20);
        objc_storeStrong((id *)(*(void *)(a1 + 40) + 56), (id)v7);
        nw_endpoint_proxy_complete_resolve(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        if (v6 > 5) {
          os_log_type_t v11 = "unknown-mode";
        }
        else {
          os_log_type_t v11 = off_1E523FB08[v6];
        }
        *(_DWORD *)long long buf = 136446722;
        uint64_t v27 = "nw_endpoint_proxy_resolve_config_block_invoke";
        __int16 v28 = 2082;
        uint64_t v29 = (void *)v11;
        __int16 v30 = 2082;
        BOOL v31 = "proxy";
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    goto LABEL_11;
  }
  CFURLRef v12 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v27 = "nw_endpoint_proxy_resolve_config_block_invoke";
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v13, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v27 = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v27 = "nw_endpoint_proxy_resolve_config_block_invoke";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }
      if (v18)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v27 = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v27 = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_28:
  if (v13) {
    free(v13);
  }
LABEL_11:
}

void sub_183827A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_157(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = v5[29];

    if (v6 == 3)
    {
      if ((int)nw_endpoint_handler_get_state(*(void **)(a1 + 32)) <= 2)
      {
        BOOL v7 = nw_array_create();
        id v8 = *(atomic_uchar **)(*(void *)(a1 + 40) + 56);
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 3221225472;
        v20[2] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_158;
        v20[3] = &unk_1E52497B8;
        id v21 = *(id *)(a1 + 48);
        id v22 = v3;
        id v9 = (id)v7;
        id v23 = v9;
        nw_array_apply(v8, (uint64_t)v20);
        objc_storeStrong((id *)(*(void *)(a1 + 40) + 56), (id)v7);
        nw_endpoint_proxy_complete_resolve(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        if (v6 > 5) {
          os_log_type_t v11 = "unknown-mode";
        }
        else {
          os_log_type_t v11 = off_1E523FB08[v6];
        }
        *(_DWORD *)long long buf = 136446722;
        uint64_t v27 = "nw_endpoint_proxy_resolve_config_block_invoke";
        __int16 v28 = 2082;
        uint64_t v29 = (void *)v11;
        __int16 v30 = 2082;
        BOOL v31 = "proxy";
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    goto LABEL_11;
  }
  CFURLRef v12 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v27 = "nw_endpoint_proxy_resolve_config_block_invoke";
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v13, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v27 = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v27 = "nw_endpoint_proxy_resolve_config_block_invoke";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }
      if (v18)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v27 = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v27 = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_28:
  if (v13) {
    free(v13);
  }
LABEL_11:
}

void sub_183827EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_158(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (*(id *)(a1 + 32) == v4)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_2_159;
    v7[3] = &unk_1E524AE18;
    uint64_t v5 = *(atomic_uchar **)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    nw_array_apply(v5, (uint64_t)v7);
  }
  else
  {
    nw_array_append(*(void *)(a1 + 48), v4);
  }

  return 1;
}

uint64_t ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_2_159(uint64_t a1, int a2, void *object)
{
  return 1;
}

uint64_t ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_154(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (*(id *)(a1 + 32) == v4)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_2;
    v7[3] = &unk_1E524AE18;
    uint64_t v5 = *(atomic_uchar **)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    nw_array_apply(v5, (uint64_t)v7);
  }
  else
  {
    nw_array_append(*(void *)(a1 + 48), v4);
  }

  return 1;
}

uint64_t ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_2(uint64_t a1, int a2, void *object)
{
  return 1;
}

void nw_endpoint_proxy_add_config_if_applicable(void *a1, void *a2, void *a3, void *a4, void *a5, char a6)
{
  uint64_t v188 = *MEMORY[0x1E4F143B8];
  os_log_type_t v11 = a1;
  id v12 = a2;
  id v13 = a3;
  uint64_t object = a4;
  id v158 = a5;
  BOOL v156 = v12;
  if (v13)
  {
    char v152 = a6;
    *(void *)os_log_type_t type = 0;
    unint64_t v165 = type;
    uint64_t v166 = 0x3032000000;
    int v167 = __Block_byref_object_copy__26574;
    v168 = __Block_byref_object_dispose__26575;
    id v169 = v13;
    BOOL v14 = nw_endpoint_handler_copy_proxy(v11);
    if (*((void *)v14 + 7))
    {
      nw_endpoint_t v154 = nw_endpoint_handler_copy_endpoint(v11);
      id v155 = nw_endpoint_handler_copy_current_path(v11);
      if (!nw_proxy_config_supports_connection(*((void **)v165 + 5), v154, v12, v155))
      {
        if ((nw_endpoint_handler_get_logging_disabled(v11) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v39 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
          {
            __int16 v144 = v14;
            id_string = nw_endpoint_handler_get_id_string(v11);
            uint64_t v41 = nw_endpoint_handler_dry_run_string(v11);
            nw_endpoint_t v42 = nw_endpoint_handler_copy_endpoint(v11);
            logging_description = nw_endpoint_get_logging_description(v42);
            os_log_type_t v44 = nw_endpoint_handler_state_string(v11);
            __int16 v45 = nw_endpoint_handler_mode_string(v11);
            id v46 = nw_endpoint_handler_copy_current_path(v11);
            __int16 v47 = (const char *)*((void *)v165 + 5);
            *(_DWORD *)long long buf = 136448002;
            uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
            __int16 v174 = 2082;
            unint64_t v175 = (void *)id_string;
            __int16 v176 = 2082;
            nw_endpoint_t v177 = v41;
            __int16 v178 = 2082;
            unint64_t v179 = logging_description;
            __int16 v180 = 2082;
            uint64_t v181 = v44;
            __int16 v182 = 2082;
            unint64_t v183 = v45;
            __int16 v184 = 2114;
            id v185 = v46;
            __int16 v186 = 2114;
            unint64_t v187 = v47;
            _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping proxy %{public}@, not eligible", buf, 0x52u);

            BOOL v14 = v144;
          }
        }
        goto LABEL_153;
      }
      int v15 = nw_proxy_config_get_type(*((void **)v165 + 5));
      int is_opaque = nw_parameters_get_https_proxy_is_opaque(v12);
      if (v15 == 4001)
      {
        int v17 = is_opaque;
        if (nw_parameters_get_https_proxy_over_tls(v12))
        {
          int minimize_logging = nw_endpoint_handler_get_minimize_logging(v11);
          char logging_disabled = nw_endpoint_handler_get_logging_disabled(v11);
          if (minimize_logging)
          {
            if (logging_disabled)
            {
LABEL_13:
              __int16 v28 = nw_proxy_config_copy(*((void **)v165 + 5));
              uint64_t v29 = (void *)*((void *)v165 + 5);
              *((void *)v165 + 5) = v28;

              nw_proxy_config_set_type(*((void **)v165 + 5), 4002);
              *(_DWORD *)int v163 = 4;
              __int16 v30 = (void *)*((void *)v165 + 5);
              if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
                dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
              }
              id v31 = (id)g_tcp_definition;
              uint64_t v32 = nw_proxy_config_copy_protocol_stack(v30, v31, v163);

              id v33 = v156;
              if (v33)
              {
                os_log_type_t v34 = (void *)nw_protocol_boringssl_copy_definition();
                options = nw_protocol_create_options(v34);

                unsigned int v36 = v33;
                if (os_variant_allows_internal_security_policies())
                {
                  BOOL v37 = (v36[12] & 0x200000000000) == 0;

                  if (!v37)
                  {
                    char v38 = options;
                    sec_protocol_options_set_peer_authentication_required(v38, 0);

                    options = (NWConcrete_nw_protocol_options *)v38;
                  }
                }
                else
                {
                }
LABEL_37:

                nw_protocol_stack_append_application_protocol(v32, options);
LABEL_131:
                if ((v152 & 1) == 0)
                {
                  if (nw_proxy_config_get_mode(*((void **)v165 + 5)) == 1
                    && (BOOL v121 = nw_proxy_config_use_over_privacy_proxy(*((void **)v165 + 5)), object)
                    && v121
                    && *((void *)object + 2) != *((void *)object + 3))
                  {
                    v159[0] = MEMORY[0x1E4F143A8];
                    v159[1] = 3221225472;
                    v159[2] = ___ZL42nw_endpoint_proxy_add_config_if_applicableP30NWConcrete_nw_endpoint_handlerPU27objcproto16OS_nw_parameters8NSObjectPU29objcproto18OS_nw_proxy_configS1_PU22objcproto11OS_nw_arrayS1_S5_b_block_invoke;
                    v159[3] = &unk_1E5244660;
                    unint64_t v162 = type;
                    uint64_t v160 = v14;
                    unint64_t v161 = v11;
                    nw_array_apply(object, (uint64_t)v159);

                    merged = (NWConcrete_nw_proxy_config *)v160;
                  }
                  else if (v158 && nw_proxy_config_is_privacy_proxy(*((void **)v165 + 5), 0))
                  {
                    merged = nw_proxy_config_create_merged(*((void **)v165 + 5), v158);
                    nw_array_append(*((void *)v14 + 7), merged);
                    if ((nw_endpoint_handler_get_logging_disabled(v11) & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                      }
                      os_log_type_t v123 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
                      {
                        __int16 v150 = v14;
                        uint64_t v124 = nw_endpoint_handler_get_id_string(v11);
                        char v125 = nw_endpoint_handler_dry_run_string(v11);
                        nw_endpoint_t v153 = nw_endpoint_handler_copy_endpoint(v11);
                        BOOL v126 = nw_endpoint_get_logging_description(v153);
                        char v127 = nw_endpoint_handler_state_string(v11);
                        id v128 = nw_endpoint_handler_mode_string(v11);
                        id v129 = nw_endpoint_handler_copy_current_path(v11);
                        char v130 = (const char *)*((void *)v165 + 5);
                        *(_DWORD *)long long buf = 136448002;
                        uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
                        __int16 v174 = 2082;
                        unint64_t v175 = (void *)v124;
                        __int16 v176 = 2082;
                        nw_endpoint_t v177 = v125;
                        __int16 v178 = 2082;
                        unint64_t v179 = v126;
                        __int16 v180 = 2082;
                        uint64_t v181 = v127;
                        __int16 v182 = 2082;
                        unint64_t v183 = v128;
                        __int16 v184 = 2114;
                        id v185 = v129;
                        __int16 v186 = 2114;
                        unint64_t v187 = v130;
                        _os_log_impl(&dword_1830D4000, v123, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding proxy merged with companion %{public}@", buf, 0x52u);

                        BOOL v14 = v150;
                      }
                    }
                  }
                  else
                  {
                    nw_array_append(*((void *)v14 + 7), *((void **)v165 + 5));
                    if (nw_endpoint_handler_get_logging_disabled(v11)) {
                      goto LABEL_151;
                    }
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    merged = (NWConcrete_nw_proxy_config *)(id)gconnectionLogObj;
                    if (os_log_type_enabled(&merged->super, OS_LOG_TYPE_DEBUG))
                    {
                      id v151 = v14;
                      os_log_type_t v131 = nw_endpoint_handler_get_id_string(v11);
                      uint64_t v132 = nw_endpoint_handler_dry_run_string(v11);
                      nw_endpoint_t v133 = nw_endpoint_handler_copy_endpoint(v11);
                      __int16 v134 = nw_endpoint_get_logging_description(v133);
                      char v135 = nw_endpoint_handler_state_string(v11);
                      __int16 v136 = nw_endpoint_handler_mode_string(v11);
                      id v137 = nw_endpoint_handler_copy_current_path(v11);
                      __int16 v138 = (const char *)*((void *)v165 + 5);
                      *(_DWORD *)long long buf = 136448002;
                      uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
                      __int16 v174 = 2082;
                      unint64_t v175 = (void *)v131;
                      __int16 v176 = 2082;
                      nw_endpoint_t v177 = v132;
                      __int16 v178 = 2082;
                      unint64_t v179 = v134;
                      __int16 v180 = 2082;
                      uint64_t v181 = v135;
                      __int16 v182 = 2082;
                      unint64_t v183 = v136;
                      __int16 v184 = 2114;
                      id v185 = v137;
                      __int16 v186 = 2114;
                      unint64_t v187 = v138;
                      _os_log_impl(&dword_1830D4000, &merged->super, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding proxy %{public}@", buf, 0x52u);

                      BOOL v14 = v151;
                    }
                  }

LABEL_151:
                  if (nw_proxy_config_prohibits_direct(*((void **)v165 + 5))) {
                    *((unsigned char *)v14 + 96) |= 0x20u;
                  }
                }
LABEL_153:

LABEL_154:
                _Block_object_dispose(type, 8);

                goto LABEL_155;
              }
              __int16 v97 = __nwlog_obj();
              *(_DWORD *)long long buf = 136446210;
              uint64_t v173 = "nw_endpoint_proxy_copy_tls_proxy_options";
              __int16 v98 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v171 = OS_LOG_TYPE_ERROR;
              char v170 = 0;
              if (__nwlog_fault(v98, &v171, &v170))
              {
                if (v171 == OS_LOG_TYPE_FAULT)
                {
                  uint64_t v99 = __nwlog_obj();
                  os_log_type_t v100 = v171;
                  if (os_log_type_enabled(v99, v171))
                  {
                    *(_DWORD *)long long buf = 136446210;
                    uint64_t v173 = "nw_endpoint_proxy_copy_tls_proxy_options";
                    _os_log_impl(&dword_1830D4000, v99, v100, "%{public}s called with null parameters", buf, 0xCu);
                  }
                }
                else
                {
                  if (v170)
                  {
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    uint64_t v110 = __nwlog_obj();
                    os_log_type_t v111 = v171;
                    BOOL v112 = os_log_type_enabled(v110, v171);
                    if (backtrace_string)
                    {
                      if (v112)
                      {
                        *(_DWORD *)long long buf = 136446466;
                        uint64_t v173 = "nw_endpoint_proxy_copy_tls_proxy_options";
                        __int16 v174 = 2082;
                        unint64_t v175 = backtrace_string;
                        _os_log_impl(&dword_1830D4000, v110, v111, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(backtrace_string);
                    }
                    else
                    {
                      if (v112)
                      {
                        *(_DWORD *)long long buf = 136446210;
                        uint64_t v173 = "nw_endpoint_proxy_copy_tls_proxy_options";
                        _os_log_impl(&dword_1830D4000, v110, v111, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
                      }
                    }
                    goto LABEL_125;
                  }
                  uint64_t v99 = __nwlog_obj();
                  os_log_type_t v120 = v171;
                  if (os_log_type_enabled(v99, v171))
                  {
                    *(_DWORD *)long long buf = 136446210;
                    uint64_t v173 = "nw_endpoint_proxy_copy_tls_proxy_options";
                    _os_log_impl(&dword_1830D4000, v99, v120, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
                  }
                }
              }
LABEL_125:
              if (v98) {
                free(v98);
              }
              options = 0;
              goto LABEL_37;
            }
            os_log_type_t v147 = v14;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            __int16 v20 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              char v90 = nw_endpoint_handler_get_id_string(v11);
              os_log_type_t v91 = nw_endpoint_handler_dry_run_string(v11);
              nw_endpoint_t v92 = nw_endpoint_handler_copy_endpoint(v11);
              nw_endpoint_t v93 = nw_endpoint_get_logging_description(v92);
              char v94 = nw_endpoint_handler_state_string(v11);
              __int16 v95 = nw_endpoint_handler_mode_string(v11);
              id v96 = nw_endpoint_handler_copy_current_path(v11);
              *(_DWORD *)long long buf = 136447746;
              uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
              __int16 v174 = 2082;
              unint64_t v175 = (void *)v90;
              __int16 v176 = 2082;
              nw_endpoint_t v177 = v91;
              __int16 v178 = 2082;
              unint64_t v179 = v93;
              __int16 v180 = 2082;
              uint64_t v181 = v94;
              __int16 v182 = 2082;
              unint64_t v183 = v95;
              __int16 v184 = 2114;
              id v185 = v96;
              _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Running HTTP Connect proxy over TLS", buf, 0x48u);

              BOOL v14 = v147;
            }
          }
          else
          {
            if (logging_disabled) {
              goto LABEL_13;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            __int16 v20 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
            {
              id v143 = v14;
              id v21 = nw_endpoint_handler_get_id_string(v11);
              id v22 = nw_endpoint_handler_dry_run_string(v11);
              nw_endpoint_t v23 = nw_endpoint_handler_copy_endpoint(v11);
              char v24 = nw_endpoint_get_logging_description(v23);
              uint64_t v25 = nw_endpoint_handler_state_string(v11);
              os_log_type_t v26 = nw_endpoint_handler_mode_string(v11);
              id v27 = nw_endpoint_handler_copy_current_path(v11);
              *(_DWORD *)long long buf = 136447746;
              uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
              __int16 v174 = 2082;
              unint64_t v175 = (void *)v21;
              __int16 v176 = 2082;
              nw_endpoint_t v177 = v22;
              __int16 v178 = 2082;
              unint64_t v179 = v24;
              __int16 v180 = 2082;
              uint64_t v181 = v25;
              __int16 v182 = 2082;
              unint64_t v183 = v26;
              __int16 v184 = 2114;
              id v185 = v27;
              _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Running HTTP Connect proxy over TLS", buf, 0x48u);

              BOOL v14 = v143;
            }
          }

          goto LABEL_13;
        }
        if (v17)
        {
          if (nw_proxy_config_override_opaque_https(*((void **)v165 + 5)))
          {
            int v48 = nw_endpoint_handler_get_minimize_logging(v11);
            char v49 = nw_endpoint_handler_get_logging_disabled(v11);
            if (v48)
            {
              id v149 = v14;
              if ((v49 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                id v50 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
                {
                  os_log_type_t v113 = nw_endpoint_handler_get_id_string(v11);
                  uint64_t v114 = nw_endpoint_handler_dry_run_string(v11);
                  nw_endpoint_t v115 = nw_endpoint_handler_copy_endpoint(v11);
                  os_log_type_t v116 = nw_endpoint_get_logging_description(v115);
                  id v117 = nw_endpoint_handler_state_string(v11);
                  uint64_t v118 = nw_endpoint_handler_mode_string(v11);
                  id v119 = nw_endpoint_handler_copy_current_path(v11);
                  *(_DWORD *)long long buf = 136447746;
                  uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
                  __int16 v174 = 2082;
                  unint64_t v175 = (void *)v113;
                  __int16 v176 = 2082;
                  nw_endpoint_t v177 = v114;
                  __int16 v178 = 2082;
                  unint64_t v179 = v116;
                  __int16 v180 = 2082;
                  uint64_t v181 = v117;
                  __int16 v182 = 2082;
                  unint64_t v183 = v118;
                  __int16 v184 = 2114;
                  id v185 = v119;
                  _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Client overrode HTTP Connect proxies to be transparent", buf, 0x48u);

                  BOOL v14 = v149;
                }
                goto LABEL_33;
              }
            }
            else if ((v49 & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              id v50 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
              {
                BOOL v145 = v14;
                __int16 v51 = nw_endpoint_handler_get_id_string(v11);
                uint64_t v52 = nw_endpoint_handler_dry_run_string(v11);
                nw_endpoint_t v53 = nw_endpoint_handler_copy_endpoint(v11);
                __int16 v54 = nw_endpoint_get_logging_description(v53);
                __int16 v55 = nw_endpoint_handler_state_string(v11);
                id v56 = nw_endpoint_handler_mode_string(v11);
                id v57 = nw_endpoint_handler_copy_current_path(v11);
                *(_DWORD *)long long buf = 136447746;
                uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
                __int16 v174 = 2082;
                unint64_t v175 = (void *)v51;
                __int16 v176 = 2082;
                nw_endpoint_t v177 = v52;
                __int16 v178 = 2082;
                unint64_t v179 = v54;
                __int16 v180 = 2082;
                uint64_t v181 = v55;
                __int16 v182 = 2082;
                unint64_t v183 = v56;
                __int16 v184 = 2114;
                id v185 = v57;
                _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Client overrode HTTP Connect proxies to be transparent", buf, 0x48u);

                BOOL v14 = v145;
              }
LABEL_33:
            }
LABEL_129:
            if (*((unsigned char *)v14 + 98) & 1) == 0 || (*((unsigned char *)v14 + 97)) {
              goto LABEL_153;
            }
            goto LABEL_131;
          }
          uint64_t v58 = nw_proxy_config_copy(*((void **)v165 + 5));
          id v59 = (void *)*((void *)v165 + 5);
          *((void *)v165 + 5) = v58;

          int v15 = 2002;
          nw_proxy_config_set_type(*((void **)v165 + 5), 2002);
        }
        else
        {
          int v15 = 4001;
        }
        int v60 = nw_endpoint_handler_get_minimize_logging(v11);
        char v61 = nw_endpoint_handler_get_logging_disabled(v11);
        if (v60)
        {
          __int16 v148 = v14;
          if (v61)
          {
            if (v15 == 4001) {
              goto LABEL_129;
            }
LABEL_49:
            if (v15 != 2002)
            {
              if (v15 == 2001 && (*((char *)v14 + 97) & 0x80000000) == 0) {
                goto LABEL_153;
              }
              goto LABEL_131;
            }
            goto LABEL_129;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          id v101 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
          {
            __int16 v140 = nw_endpoint_handler_get_id_string(v11);
            id v102 = nw_endpoint_handler_dry_run_string(v11);
            nw_endpoint_t loga = nw_endpoint_handler_copy_endpoint(v11);
            id v103 = nw_endpoint_get_logging_description(loga);
            __int16 v104 = nw_endpoint_handler_state_string(v11);
            id v105 = nw_endpoint_handler_mode_string(v11);
            id v106 = nw_endpoint_handler_copy_current_path(v11);
            id v107 = v106;
            *(_DWORD *)long long buf = 136448002;
            uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
            uint64_t v108 = "not ";
            unint64_t v175 = (void *)v140;
            __int16 v174 = 2082;
            if (v17) {
              uint64_t v108 = "";
            }
            __int16 v176 = 2082;
            nw_endpoint_t v177 = v102;
            __int16 v178 = 2082;
            unint64_t v179 = v103;
            __int16 v180 = 2082;
            uint64_t v181 = v104;
            __int16 v182 = 2082;
            unint64_t v183 = v105;
            __int16 v184 = 2114;
            id v185 = v106;
            __int16 v186 = 2082;
            unint64_t v187 = v108;
            __int16 v62 = v101;
            _os_log_impl(&dword_1830D4000, v101, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] HTTP Connect proxies are %{public}sopaque", buf, 0x52u);

            BOOL v14 = v148;
          }
          else
          {
            __int16 v62 = v101;
          }
        }
        else
        {
          if (v61) {
            goto LABEL_48;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          __int16 v62 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
          {
            __int16 v146 = v14;
            __int16 v63 = nw_endpoint_handler_get_id_string(v11);
            BOOL v64 = nw_endpoint_handler_dry_run_string(v11);
            os_log_type_t log = v62;
            nw_endpoint_t v139 = nw_endpoint_handler_copy_endpoint(v11);
            long long v65 = nw_endpoint_get_logging_description(v139);
            long long v66 = nw_endpoint_handler_state_string(v11);
            uint64_t v67 = nw_endpoint_handler_mode_string(v11);
            id v68 = nw_endpoint_handler_copy_current_path(v11);
            uint64_t v69 = v68;
            *(_DWORD *)long long buf = 136448002;
            uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
            uint64_t v70 = "not ";
            unint64_t v175 = (void *)v63;
            __int16 v174 = 2082;
            if (v17) {
              uint64_t v70 = "";
            }
            __int16 v176 = 2082;
            nw_endpoint_t v177 = v64;
            __int16 v178 = 2082;
            unint64_t v179 = v65;
            __int16 v180 = 2082;
            uint64_t v181 = v66;
            __int16 v182 = 2082;
            unint64_t v183 = v67;
            __int16 v184 = 2114;
            id v185 = v68;
            __int16 v186 = 2082;
            unint64_t v187 = v70;
            __int16 v62 = log;
            _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] HTTP Connect proxies are %{public}sopaque", buf, 0x52u);

            BOOL v14 = v146;
          }
        }
      }
LABEL_48:
      if (v15 == 4001) {
        goto LABEL_129;
      }
      goto LABEL_49;
    }
    BOOL v75 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
    uint64_t v76 = (char *)_os_log_send_and_compose_impl();

    v163[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v171 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v76, v163, &v171))
    {
      if (v163[0] == OS_LOG_TYPE_FAULT)
      {
        char v77 = __nwlog_obj();
        os_log_type_t v78 = v163[0];
        if (os_log_type_enabled(v77, v163[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
          _os_log_impl(&dword_1830D4000, v77, v78, "%{public}s called with null endpoint_proxy->parsed_proxy_configs", buf, 0xCu);
        }
      }
      else
      {
        if (v171)
        {
          __int16 v83 = v14;
          BOOL v84 = (char *)__nw_create_backtrace_string();
          id v85 = __nwlog_obj();
          os_log_type_t v86 = v163[0];
          BOOL v87 = os_log_type_enabled(v85, v163[0]);
          if (v84)
          {
            if (v87)
            {
              *(_DWORD *)long long buf = 136446466;
              uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
              __int16 v174 = 2082;
              unint64_t v175 = v84;
              _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s called with null endpoint_proxy->parsed_proxy_configs, dumping backtrace:%{public}s", buf, 0x16u);
            }

            BOOL v14 = v83;
            free(v84);
          }
          else
          {
            if (v87)
            {
              *(_DWORD *)long long buf = 136446210;
              uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
              _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s called with null endpoint_proxy->parsed_proxy_configs, no backtrace", buf, 0xCu);
            }

            BOOL v14 = v83;
          }
          goto LABEL_97;
        }
        char v77 = __nwlog_obj();
        os_log_type_t v89 = v163[0];
        if (os_log_type_enabled(v77, v163[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
          _os_log_impl(&dword_1830D4000, v77, v89, "%{public}s called with null endpoint_proxy->parsed_proxy_configs, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_97:
    if (v76) {
      free(v76);
    }
    goto LABEL_154;
  }
  id v71 = __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
  uint64_t v72 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v163[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v72, type, v163))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v73 = __nwlog_obj();
      os_log_type_t v74 = type[0];
      if (os_log_type_enabled(v73, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
        _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s called with null original_config", buf, 0xCu);
      }
    }
    else
    {
      if (v163[0])
      {
        int v79 = (char *)__nw_create_backtrace_string();
        BOOL v80 = __nwlog_obj();
        os_log_type_t v81 = type[0];
        BOOL v82 = os_log_type_enabled(v80, type[0]);
        if (v79)
        {
          if (v82)
          {
            *(_DWORD *)long long buf = 136446466;
            uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
            __int16 v174 = 2082;
            unint64_t v175 = v79;
            _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s called with null original_config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v79);
        }
        else
        {
          if (v82)
          {
            *(_DWORD *)long long buf = 136446210;
            uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
            _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s called with null original_config, no backtrace", buf, 0xCu);
          }
        }
        goto LABEL_92;
      }
      int v73 = __nwlog_obj();
      os_log_type_t v88 = type[0];
      if (os_log_type_enabled(v73, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v173 = "nw_endpoint_proxy_add_config_if_applicable";
        _os_log_impl(&dword_1830D4000, v73, v88, "%{public}s called with null original_config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_92:
  if (v72) {
    free(v72);
  }
LABEL_155:
}

void sub_183829758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_endpoint_proxy_add_config_if_applicableP30NWConcrete_nw_endpoint_handlerPU27objcproto16OS_nw_parameters8NSObjectPU29objcproto18OS_nw_proxy_configS1_PU22objcproto11OS_nw_arrayS1_S5_b_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  merged = nw_proxy_config_create_merged(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v4);
  nw_array_append(*(void *)(*(void *)(a1 + 32) + 56), merged);
  if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
      id v8 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
      nw_endpoint_t v9 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
      logging_description = nw_endpoint_get_logging_description(v9);
      os_log_type_t v11 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
      id v12 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
      id v13 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
      int v15 = 136448002;
      char v16 = "nw_endpoint_proxy_add_config_if_applicable_block_invoke";
      __int16 v17 = 2082;
      BOOL v18 = id_string;
      __int16 v19 = 2082;
      __int16 v20 = v8;
      __int16 v21 = 2082;
      id v22 = logging_description;
      __int16 v23 = 2082;
      char v24 = v11;
      __int16 v25 = 2082;
      os_log_type_t v26 = v12;
      __int16 v27 = 2114;
      id v28 = v13;
      __int16 v29 = 2114;
      __int16 v30 = merged;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding merged proxy %{public}@", (uint8_t *)&v15, 0x52u);
    }
  }

  return 1;
}

void sub_183829AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_proxy_copy_synthesized_url_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  identifier = nw_protocol_definition_get_identifier(a3);
  uint64_t v5 = (void *)nw_protocol_boringssl_identifier();
  if (!v5) {
    return 1;
  }
  BOOL v6 = nw_protocols_are_equal(identifier, v5);
  uint64_t result = 1;
  if (v6)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    return 0;
  }
  return result;
}

void sub_183829CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_endpoint_proxy_handler_should_use_proxy_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v4 = nw_proxy_config_supports_connection(a3, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
  if (v4) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
  return !v4;
}

uint64_t network_proxy_get_type(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v14 = "network_proxy_get_type";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v5, &type, &v11)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v14 = "network_proxy_get_type";
      id v8 = "%{public}s called with null proxy";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v14 = "network_proxy_get_type";
          __int16 v15 = 2082;
          char v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null proxy, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (v5)
        {
          free(v5);
          return 0xFFFFFFFFLL;
        }
        return 0xFFFFFFFFLL;
      }
      if (!v10) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v14 = "network_proxy_get_type";
      id v8 = "%{public}s called with null proxy, no backtrace";
    }
    else
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v14 = "network_proxy_get_type";
      id v8 = "%{public}s called with null proxy, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_34;
  }
  id v1 = a1;
  if (v1[38] != 1)
  {

    return 0xFFFFFFFFLL;
  }
  int v2 = v1[39];

  if (v2 > 3000) {
    return (v2 - 3003) < 4 || (v2 - 4001) < 2 || (v2 - 3001) <= 1;
  }
  if (v2 <= 2000)
  {
    if (v2 >= 2 && (v2 - 1001) >= 2) {
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  if (v2 == 2002) {
    unsigned int v4 = 3;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v2 == 2001) {
    return 2;
  }
  else {
    return v4;
  }
}

uint64_t network_proxy_get_port(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v19 = "network_proxy_get_port";
    nw_endpoint_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v9, &type, &v16)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v19 = "network_proxy_get_port";
      id v12 = "%{public}s called with null proxy";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v19 = "network_proxy_get_port";
          __int16 v20 = 2082;
          __int16 v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null proxy, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_22;
      }
      if (!v14)
      {
LABEL_22:
        if (v9) {
          free(v9);
        }
        return 0;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v19 = "network_proxy_get_port";
      id v12 = "%{public}s called with null proxy, no backtrace";
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v19 = "network_proxy_get_port";
      id v12 = "%{public}s called with null proxy, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
    goto LABEL_22;
  }
  id v1 = a1;
  id v2 = v1[5];

  if (!v2) {
    return 0;
  }
  id v3 = v2;
  int v4 = [v3 type];

  if (v4 == 2 || (id v5 = v3, v6 = [v5 type], v5, v6 == 1))
  {
    id v7 = v3;
    uint64_t v8 = [v7 port];
  }
  else
  {
    uint64_t v8 = 0;
  }
  os_release(v3);
  return v8;
}

void sub_18382A2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18382AB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27026(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27027(uint64_t a1)
{
}

id nw_shoes_copy_udp_framer_definition()
{
  if (nw_shoes_copy_udp_framer_definition::onceToken != -1) {
    dispatch_once(&nw_shoes_copy_udp_framer_definition::onceToken, &__block_literal_global_27067);
  }
  id v0 = (void *)nw_shoes_copy_udp_framer_definition::definition;

  return v0;
}

void __nw_shoes_copy_udp_framer_definition_block_invoke()
{
  nw_protocol_definition_t definition = nw_framer_create_definition("lv", 0, &__block_literal_global_4);
  id v1 = (void *)nw_shoes_copy_udp_framer_definition::definition;
  nw_shoes_copy_udp_framer_definition::nw_protocol_definition_t definition = (uint64_t)definition;
}

uint64_t __nw_shoes_copy_udp_framer_definition_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  nw_framer_set_input_handler(v2, &__block_literal_global_7);
  nw_framer_set_output_handler(v2, &__block_literal_global_12);

  return 1;
}

void __nw_shoes_copy_udp_framer_definition_block_invoke_9(uint64_t a1, void *a2, uint64_t a3, size_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  int v6 = v5;
  if (a4 < 0x10000)
  {
    *(_WORD *)output_buffer = bswap32(a4) >> 16;
    nw_framer_write_output(v5, output_buffer, 2uLL);
    if (gLogDatapath)
    {
      uint64_t v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v11 = "nw_shoes_copy_udp_framer_definition_block_invoke";
        __int16 v12 = 1024;
        LODWORD(v13) = a4;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s Shoes LV: Writing frame of length %u", buf, 0x12u);
      }
    }
    nw_framer_write_output_no_copy(v6, a4);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v11 = "nw_shoes_copy_udp_framer_definition_block_invoke";
      __int16 v12 = 2048;
      size_t v13 = a4;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s Message length exceeds maximum: %zu", buf, 0x16u);
    }
  }
}

void sub_18382B808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_shoes_copy_udp_framer_definition_block_invoke_4(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  uint64_t result = 0;
  if (a2)
  {
    if (a3 >= 2)
    {
      *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = bswap32(*a2) >> 16;
      return 2;
    }
  }
  return result;
}

void nw_shoes_tlv_parser(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2 >= 3)
  {
    unsigned __int16 v6 = 0;
    id v7 = a1;
    while (1)
    {
      unsigned __int16 v8 = a2 - v6;
      if ((unsigned __int16)(a2 - v6) <= 2u)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (id)gLogObj;
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_12;
        }
        int v12 = *a1;
        int v17 = 136446978;
        BOOL v18 = "nw_shoes_tlv_parser";
        __int16 v19 = 1024;
        int v20 = v8;
        __int16 v21 = 2048;
        uint64_t v22 = 3;
        __int16 v23 = 1024;
        int v24 = v12;
        size_t v13 = "%{public}s Incomplete tlv buffer (%u < %zu) type %u";
        uint64_t v14 = v11;
        uint32_t v15 = 34;
        goto LABEL_11;
      }
      uint64_t v9 = bswap32(*(unsigned __int16 *)(v7 + 1)) >> 16;
      uint64_t v10 = v9 + 3;
      if (v9 + 3 > (unint64_t)v8) {
        break;
      }
      ((void (**)(id, unsigned __int8 *))v5)[2](v5, v7);
      v7 += v10;
      v6 += v10;
      if (a2 <= v6) {
        goto LABEL_13;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = (id)gLogObj;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    int v16 = *a1;
    int v17 = 136447234;
    BOOL v18 = "nw_shoes_tlv_parser";
    __int16 v19 = 1024;
    int v20 = v8;
    __int16 v21 = 2048;
    uint64_t v22 = 3;
    __int16 v23 = 1024;
    int v24 = v9;
    __int16 v25 = 1024;
    int v26 = v16;
    size_t v13 = "%{public}s Invalid tlv buffer (%u < %zu + %u) type %u";
    uint64_t v14 = v11;
    uint32_t v15 = 40;
LABEL_11:
    _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v17, v15);
LABEL_12:
  }
LABEL_13:
}

void sub_18382BA90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_shoes_add_tlv(uint64_t a1, unsigned int a2, unsigned int a3, size_t __n, void *__src)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v12 = __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v23 = "nw_shoes_add_tlv";
    size_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v13, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v23 = "nw_shoes_add_tlv";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null buffer", buf, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)long long buf = 136446466;
            __int16 v23 = "nw_shoes_add_tlv";
            __int16 v24 = 2082;
            __int16 v25 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (v18)
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v23 = "nw_shoes_add_tlv";
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null buffer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v23 = "nw_shoes_add_tlv";
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null buffer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_28:
    if (v13) {
      free(v13);
    }
    return 0;
  }
  unsigned __int16 v7 = __n + 3;
  unsigned int v8 = (unsigned __int16)(__n + 3);
  if (v8 > a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (a3 > 9) {
        uint64_t v10 = "unknown";
      }
      else {
        uint64_t v10 = off_1E523A4C0[a3];
      }
      *(_DWORD *)long long buf = 136446978;
      __int16 v23 = "nw_shoes_add_tlv";
      __int16 v24 = 2082;
      __int16 v25 = (void *)v10;
      __int16 v26 = 1024;
      unsigned int v27 = a2;
      __int16 v28 = 1024;
      unsigned int v29 = v8;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s Insufficient buffer length to write tlv %{public}s (%u < %u)", buf, 0x22u);
    }

    return 0;
  }
  *(unsigned char *)a1 = a3;
  *(_WORD *)(a1 + 1) = __rev16(__n);
  memcpy((void *)(a1 + 3), __src, __n);
  return v7;
}

void nw_shoes_server_set_outer_connection_handler(void *a1, const void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (v3)
  {
    int v4 = _Block_copy(a2);
    id v5 = (void *)v3[12];
    v3[12] = v4;

    goto LABEL_3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v17 = "nw_socks5_server_set_outer_connection_handler";
  unsigned __int16 v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v17 = "nw_socks5_server_set_outer_connection_handler";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v8 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v17 = "nw_socks5_server_set_outer_connection_handler";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v17 = "nw_socks5_server_set_outer_connection_handler";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v8 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v17 = "nw_socks5_server_set_outer_connection_handler";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void nw_frame_cache_init(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v23 = "nw_frame_cache_init";
    unsigned __int16 v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_frame_cache_init";
      uint64_t v10 = "%{public}s called with null frame_cache";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 136446466;
          __int16 v23 = "nw_frame_cache_init";
          __int16 v24 = 2082;
          __int16 v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null frame_cache, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_62:
        if (!v7) {
          return;
        }
        goto LABEL_63;
      }
      if (!v14) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_frame_cache_init";
      uint64_t v10 = "%{public}s called with null frame_cache, no backtrace";
    }
    else
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_frame_cache_init";
      uint64_t v10 = "%{public}s called with null frame_cache, backtrace limit exceeded";
    }
    goto LABEL_61;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v23 = "nw_frame_cache_init";
    unsigned __int16 v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_62;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        unsigned int v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_62;
        }
        *(_DWORD *)long long buf = 136446210;
        __int16 v23 = "nw_frame_cache_init";
        uint64_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_61;
      }
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v16 = os_log_type_enabled(v8, type);
      if (!v15)
      {
        if (!v16) {
          goto LABEL_62;
        }
        *(_DWORD *)long long buf = 136446210;
        __int16 v23 = "nw_frame_cache_init";
        uint64_t v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_61;
      }
      if (!v16) {
        goto LABEL_43;
      }
      *(_DWORD *)long long buf = 136446466;
      __int16 v23 = "nw_frame_cache_init";
      __int16 v24 = 2082;
      __int16 v25 = v15;
      os_log_type_t v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
    unsigned int v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_62;
    }
    *(_DWORD *)long long buf = 136446210;
    __int16 v23 = "nw_frame_cache_init";
    uint64_t v10 = "%{public}s called with null protocol";
LABEL_61:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_62;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v23 = "nw_frame_cache_init";
    unsigned __int16 v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_frame_cache_init";
      uint64_t v10 = "%{public}s called with null max_frame_count";
      goto LABEL_61;
    }
    if (!v20)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_frame_cache_init";
      uint64_t v10 = "%{public}s called with null max_frame_count, backtrace limit exceeded";
      goto LABEL_61;
    }
    os_log_type_t v15 = (char *)__nw_create_backtrace_string();
    unsigned int v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v18 = os_log_type_enabled(v8, type);
    if (!v15)
    {
      if (!v18) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_frame_cache_init";
      uint64_t v10 = "%{public}s called with null max_frame_count, no backtrace";
      goto LABEL_61;
    }
    if (!v18) {
      goto LABEL_43;
    }
    *(_DWORD *)long long buf = 136446466;
    __int16 v23 = "nw_frame_cache_init";
    __int16 v24 = 2082;
    __int16 v25 = v15;
    os_log_type_t v17 = "%{public}s called with null max_frame_count, dumping backtrace:%{public}s";
LABEL_42:
    _os_log_impl(&dword_1830D4000, v8, v9, v17, buf, 0x16u);
    goto LABEL_43;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    __int16 v23 = "nw_frame_cache_init";
    unsigned __int16 v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_frame_cache_init";
      uint64_t v10 = "%{public}s called with null max_byte_count";
      goto LABEL_61;
    }
    if (!v20)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_frame_cache_init";
      uint64_t v10 = "%{public}s called with null max_byte_count, backtrace limit exceeded";
      goto LABEL_61;
    }
    os_log_type_t v15 = (char *)__nw_create_backtrace_string();
    unsigned int v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v19 = os_log_type_enabled(v8, type);
    if (!v15)
    {
      if (!v19) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_frame_cache_init";
      uint64_t v10 = "%{public}s called with null max_byte_count, no backtrace";
      goto LABEL_61;
    }
    if (v19)
    {
      *(_DWORD *)long long buf = 136446466;
      __int16 v23 = "nw_frame_cache_init";
      __int16 v24 = 2082;
      __int16 v25 = v15;
      os_log_type_t v17 = "%{public}s called with null max_byte_count, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
LABEL_43:
    free(v15);
    if (!v7) {
      return;
    }
LABEL_63:
    free(v7);
    return;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a3;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  if (gLogDatapath)
  {
    os_log_type_t v11 = __nwlog_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a2 + 16);
      *(_DWORD *)long long buf = 136446722;
      __int16 v23 = "nw_frame_cache_init";
      __int16 v24 = 2048;
      __int16 v25 = (char *)a1;
      __int16 v26 = 2080;
      uint64_t v27 = v12;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s initialized frame cache %p for protocol %s", buf, 0x20u);
    }
  }
}

void nw_frame_cache_remove_all(uint64_t *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (gLogDatapath)
    {
      os_log_type_t v9 = __nwlog_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v10 = *((_DWORD *)a1 + 6);
        uint64_t v11 = a1[2];
        uint64_t v12 = "<null>";
        if (v11)
        {
          os_log_type_t v13 = *(const char **)(v11 + 16);
          if (v13) {
            uint64_t v12 = v13;
          }
        }
        *(_DWORD *)long long buf = 136446978;
        __int16 v23 = "nw_frame_cache_remove_all";
        __int16 v24 = 1024;
        *(_DWORD *)__int16 v25 = v10;
        *(_WORD *)&void v25[4] = 2048;
        *(void *)&v25[6] = a1;
        __int16 v26 = 2080;
        uint64_t v27 = v12;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s purging %u frames from frame cache %p for protocol %s", buf, 0x26u);
      }
    }
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 0x40000000;
    os_log_type_t v17 = __nw_frame_cache_remove_all_block_invoke;
    BOOL v18 = &__block_descriptor_tmp_27124;
    BOOL v19 = a1;
    uint64_t v2 = *a1;
    do
    {
      if (!v2) {
        break;
      }
      uint64_t v3 = *(void *)(v2 + 16);
      char v4 = ((uint64_t (*)(void *))v17)(v16);
      uint64_t v2 = v3;
    }
    while ((v4 & 1) != 0);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  __int16 v23 = "nw_frame_cache_remove_all";
  id v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v5, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_frame_cache_remove_all";
      unsigned int v8 = "%{public}s called with null frame_cache";
      goto LABEL_25;
    }
    if (!v20)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_frame_cache_remove_all";
      unsigned int v8 = "%{public}s called with null frame_cache, backtrace limit exceeded";
      goto LABEL_25;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v15 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)long long buf = 136446466;
        __int16 v23 = "nw_frame_cache_remove_all";
        __int16 v24 = 2082;
        *(void *)__int16 v25 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null frame_cache, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_26;
    }
    if (v15)
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v23 = "nw_frame_cache_remove_all";
      unsigned int v8 = "%{public}s called with null frame_cache, no backtrace";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    }
  }
LABEL_26:
  if (v5) {
    free(v5);
  }
}

BOOL __nw_frame_cache_remove_all_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if ((*(_WORD *)(a2 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
    {
      int v4 = 0;
      uint64_t v5 = 0;
    }
    else
    {
      int v4 = *(_DWORD *)(a2 + 48);
      uint64_t v5 = *(void *)(a2 + 112);
    }
    if (gLogDatapath)
    {
      os_log_type_t v17 = __nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446978;
        __int16 v21 = "nw_frame_cache_remove_all_block_invoke";
        __int16 v22 = 2048;
        __int16 v23 = (char *)a2;
        __int16 v24 = 2048;
        uint64_t v25 = v5;
        __int16 v26 = 1024;
        int v27 = v4;
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s destroying frame %p (buffer: %p, length %u)", buf, 0x26u);
      }
    }
    frame_cache_remove_from_cache(*(void *)(a1 + 32), (void *)a2);
    return a2 != 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)long long buf = 136446210;
  __int16 v21 = "nw_frame_cache_remove_all_block_invoke";
  id v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v6, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v21 = "nw_frame_cache_remove_all_block_invoke";
      os_log_type_t v9 = "%{public}s foreach gave null empty_frame";
LABEL_19:
      BOOL v14 = v7;
      os_log_type_t v15 = v8;
LABEL_20:
      _os_log_impl(&dword_1830D4000, v14, v15, v9, buf, 0xCu);
      goto LABEL_21;
    }
    if (!v18)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v21 = "nw_frame_cache_remove_all_block_invoke";
      os_log_type_t v9 = "%{public}s foreach gave null empty_frame, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = gLogObj;
    os_log_type_t v12 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)long long buf = 136446466;
        __int16 v21 = "nw_frame_cache_remove_all_block_invoke";
        __int16 v22 = 2082;
        __int16 v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s foreach gave null empty_frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_21;
    }
    if (v13)
    {
      *(_DWORD *)long long buf = 136446210;
      __int16 v21 = "nw_frame_cache_remove_all_block_invoke";
      os_log_type_t v9 = "%{public}s foreach gave null empty_frame, no backtrace";
      BOOL v14 = v11;
      os_log_type_t v15 = v12;
      goto LABEL_20;
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
  return a2 != 0;
}

void frame_cache_remove_from_cache(uint64_t a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    finalizer_context = (void *)nw_frame_get_finalizer_context((uint64_t)a2);
    if (finalizer_context) {
      free(finalizer_context);
    }
    uint64_t v5 = a2[2];
    id v6 = (void *)a2[3];
    if (v5)
    {
      *(void *)(v5 + 24) = v6;
      id v6 = (void *)a2[3];
    }
    else
    {
      *(void *)(a1 + 8) = v6;
    }
    *id v6 = v5;
    a2[2] = 0;
    a2[3] = 0;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v7 - 1;
    if (v7) {
      goto LABEL_25;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)long long buf = 136446978;
    unsigned int v29 = "frame_cache_remove_from_cache";
    __int16 v30 = 2082;
    uint64_t v31 = "frame_cache->empty_frames_count";
    __int16 v32 = 2048;
    uint64_t v33 = 1;
    __int16 v34 = 2048;
    uint64_t v35 = v8;
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v9, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v10 = gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v12 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)long long buf = 136446978;
          unsigned int v29 = "frame_cache_remove_from_cache";
          __int16 v30 = 2082;
          uint64_t v31 = "frame_cache->empty_frames_count";
          __int16 v32 = 2048;
          uint64_t v33 = 1;
          __int16 v34 = 2048;
          uint64_t v35 = v12;
          BOOL v13 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_21:
          _os_log_impl(&dword_1830D4000, v10, v11, v13, buf, 0x2Au);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v10 = gLogObj;
        os_log_type_t v11 = type;
        BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v15)
          {
            uint64_t v16 = *(unsigned int *)(a1 + 24);
            *(_DWORD *)long long buf = 136447234;
            unsigned int v29 = "frame_cache_remove_from_cache";
            __int16 v30 = 2082;
            uint64_t v31 = "frame_cache->empty_frames_count";
            __int16 v32 = 2048;
            uint64_t v33 = 1;
            __int16 v34 = 2048;
            uint64_t v35 = v16;
            __int16 v36 = 2082;
            BOOL v37 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(backtrace_string);
          goto LABEL_22;
        }
        if (v15)
        {
          uint64_t v18 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)long long buf = 136446978;
          unsigned int v29 = "frame_cache_remove_from_cache";
          __int16 v30 = 2082;
          uint64_t v31 = "frame_cache->empty_frames_count";
          __int16 v32 = 2048;
          uint64_t v33 = 1;
          __int16 v34 = 2048;
          uint64_t v35 = v18;
          BOOL v13 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_21;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v10 = gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v17 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)long long buf = 136446978;
          unsigned int v29 = "frame_cache_remove_from_cache";
          __int16 v30 = 2082;
          uint64_t v31 = "frame_cache->empty_frames_count";
          __int16 v32 = 2048;
          uint64_t v33 = 1;
          __int16 v34 = 2048;
          uint64_t v35 = v17;
          BOOL v13 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_21;
        }
      }
    }
LABEL_22:
    if (v9) {
      free(v9);
    }
    *(_DWORD *)(a1 + 24) = 0;
LABEL_25:
    buffer = (void *)nw_frame_get_buffer((uint64_t)a2, 0);
    if (buffer) {
      free(buffer);
    }
    nw_frame_reset((uint64_t)a2, 0, 0, 0, 0);
    os_release(a2);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  unsigned int v29 = "frame_cache_remove_from_cache";
  char v20 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v20, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)long long buf = 136446210;
      unsigned int v29 = "frame_cache_remove_from_cache";
      __int16 v23 = "%{public}s called with null frame_cache";
      goto LABEL_42;
    }
    if (!v26)
    {
      __int16 v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)long long buf = 136446210;
      unsigned int v29 = "frame_cache_remove_from_cache";
      __int16 v23 = "%{public}s called with null frame_cache, backtrace limit exceeded";
      goto LABEL_42;
    }
    __int16 v24 = (char *)__nw_create_backtrace_string();
    __int16 v21 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v25 = os_log_type_enabled(v21, type);
    if (v24)
    {
      if (v25)
      {
        *(_DWORD *)long long buf = 136446466;
        unsigned int v29 = "frame_cache_remove_from_cache";
        __int16 v30 = 2082;
        uint64_t v31 = v24;
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null frame_cache, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v24);
      goto LABEL_43;
    }
    if (v25)
    {
      *(_DWORD *)long long buf = 136446210;
      unsigned int v29 = "frame_cache_remove_from_cache";
      __int16 v23 = "%{public}s called with null frame_cache, no backtrace";
LABEL_42:
      _os_log_impl(&dword_1830D4000, v21, v22, v23, buf, 0xCu);
    }
  }
LABEL_43:
  if (v20) {
    free(v20);
  }
}

void nw_frame_cache_destroy(uint64_t *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (gLogDatapath)
    {
      id v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = a1[2];
        uint64_t v8 = "<null>";
        if (v7)
        {
          os_log_type_t v9 = *(const char **)(v7 + 16);
          if (v9) {
            uint64_t v8 = v9;
          }
        }
        *(_DWORD *)long long buf = 136446722;
        BOOL v15 = "nw_frame_cache_destroy";
        __int16 v16 = 2048;
        uint64_t v17 = a1;
        __int16 v18 = 2080;
        BOOL v19 = v8;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s destroying frame cache %p for protocol %s", buf, 0x20u);
      }
    }
    nw_frame_cache_remove_all(a1);
    a1[2] = 0;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v15 = "nw_frame_cache_destroy";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v2, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v15 = "nw_frame_cache_destroy";
      uint64_t v5 = "%{public}s called with null frame_cache";
      goto LABEL_23;
    }
    if (!v12)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v15 = "nw_frame_cache_destroy";
      uint64_t v5 = "%{public}s called with null frame_cache, backtrace limit exceeded";
      goto LABEL_23;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v11 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v15 = "nw_frame_cache_destroy";
        __int16 v16 = 2082;
        uint64_t v17 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null frame_cache, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_24;
    }
    if (v11)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v15 = "nw_frame_cache_destroy";
      uint64_t v5 = "%{public}s called with null frame_cache, no backtrace";
LABEL_23:
      _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_24:
  if (v2) {
    free(v2);
  }
}

BOOL nw_frame_cache_create_frame(uint64_t *a1, size_t size)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    int buf = 136446210;
    id v68 = "nw_frame_cache_create_frame";
    BOOL v40 = (char *)_os_log_send_and_compose_impl();
    v63[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v59) = 0;
    if (__nwlog_fault(v40, v63, &v59))
    {
      if (v63[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v42 = v63[0];
        if (os_log_type_enabled(v41, v63[0]))
        {
          int buf = 136446210;
          id v68 = "nw_frame_cache_create_frame";
          os_log_type_t v43 = "%{public}s called with null frame_cache";
LABEL_85:
          _os_log_impl(&dword_1830D4000, v41, v42, v43, (uint8_t *)&buf, 0xCu);
        }
      }
      else if ((_BYTE)v59)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v42 = v63[0];
        BOOL v46 = os_log_type_enabled(v41, v63[0]);
        if (backtrace_string)
        {
          if (v46)
          {
            int buf = 136446466;
            id v68 = "nw_frame_cache_create_frame";
            __int16 v69 = 2082;
            uint64_t v70 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null frame_cache, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_86;
        }
        if (v46)
        {
          int buf = 136446210;
          id v68 = "nw_frame_cache_create_frame";
          os_log_type_t v43 = "%{public}s called with null frame_cache, no backtrace";
          goto LABEL_85;
        }
      }
      else
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v42 = v63[0];
        if (os_log_type_enabled(v41, v63[0]))
        {
          int buf = 136446210;
          id v68 = "nw_frame_cache_create_frame";
          os_log_type_t v43 = "%{public}s called with null frame_cache, backtrace limit exceeded";
          goto LABEL_85;
        }
      }
    }
LABEL_86:
    if (v40) {
      free(v40);
    }
    return 0;
  }
  unsigned int v2 = size;
  *(void *)__int16 v63 = 0;
  BOOL v64 = v63;
  uint64_t v65 = 0x2000000000;
  uint64_t v66 = 0;
  uint64_t v59 = 0;
  int v60 = &v59;
  uint64_t v61 = 0x2000000000;
  uint64_t v62 = 0;
  if (gLogDatapath)
  {
    os_log_type_t v44 = __nwlog_obj();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      int buf = 136446466;
      id v68 = "nw_frame_cache_create_frame";
      __int16 v69 = 1024;
      LODWORD(v70) = v2;
      _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_DEBUG, "%{public}s requested frame of length %u", (uint8_t *)&buf, 0x12u);
    }
  }
  v52[0] = MEMORY[0x1E4F143A8];
  v52[1] = 0x40000000;
  nw_endpoint_t v53 = __nw_frame_cache_create_frame_block_invoke;
  __int16 v54 = &unk_1E523E298;
  id v56 = &v59;
  id v57 = a1;
  unsigned int v58 = v2;
  __int16 v55 = v63;
  uint64_t v4 = *a1;
  do
  {
    if (!v4) {
      break;
    }
    uint64_t v5 = *(void *)(v4 + 16);
    char v6 = ((uint64_t (*)(void *))v53)(v52);
    uint64_t v4 = v5;
  }
  while ((v6 & 1) != 0);
  if (*((void *)v64 + 3)) {
    goto LABEL_7;
  }
  if (!v2) {
    goto LABEL_14;
  }
  os_log_type_t v9 = malloc_type_calloc(1uLL, v2, 0xEAFB8F1AuLL);
  if (v9) {
    goto LABEL_15;
  }
  int v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  int buf = 136446722;
  id v68 = "strict_calloc";
  __int16 v69 = 2048;
  uint64_t v70 = 1;
  __int16 v71 = 2048;
  uint64_t v72 = v2;
  BOOL v11 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
LABEL_14:
    os_log_type_t v9 = 0;
LABEL_15:
    uint64_t v13 = v60[3];
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 16);
      BOOL v15 = *(void **)(v13 + 24);
      if (v14)
      {
        *(void *)(v14 + 24) = v15;
        BOOL v15 = *(void **)(v13 + 24);
      }
      else
      {
        a1[1] = (uint64_t)v15;
      }
      *BOOL v15 = v14;
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      int v21 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 6) = v21 - 1;
      if (v21) {
        goto LABEL_51;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v22 = *((unsigned int *)a1 + 6);
      int buf = 136446978;
      id v68 = "nw_frame_cache_create_frame";
      __int16 v69 = 2082;
      uint64_t v70 = (uint64_t)"frame_cache->empty_frames_count";
      __int16 v71 = 2048;
      uint64_t v72 = 1;
      __int16 v73 = 2048;
      uint64_t v74 = v22;
      __int16 v23 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v50 = 0;
      if (__nwlog_fault(v23, &type, &v50))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v24 = gLogObj;
          os_log_type_t v25 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            uint64_t v26 = *((unsigned int *)a1 + 6);
            int buf = 136446978;
            id v68 = "nw_frame_cache_create_frame";
            __int16 v69 = 2082;
            uint64_t v70 = (uint64_t)"frame_cache->empty_frames_count";
            __int16 v71 = 2048;
            uint64_t v72 = 1;
            __int16 v73 = 2048;
            uint64_t v74 = v26;
            int v27 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_47:
            _os_log_impl(&dword_1830D4000, v24, v25, v27, (uint8_t *)&buf, 0x2Au);
          }
        }
        else if (v50)
        {
          __int16 v32 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v24 = gLogObj;
          os_log_type_t v25 = type;
          BOOL v33 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v32)
          {
            if (v33)
            {
              uint64_t v34 = *((unsigned int *)a1 + 6);
              int buf = 136447234;
              id v68 = "nw_frame_cache_create_frame";
              __int16 v69 = 2082;
              uint64_t v70 = (uint64_t)"frame_cache->empty_frames_count";
              __int16 v71 = 2048;
              uint64_t v72 = 1;
              __int16 v73 = 2048;
              uint64_t v74 = v34;
              __int16 v75 = 2082;
              uint64_t v76 = v32;
              _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x34u);
            }
            free(v32);
            goto LABEL_48;
          }
          if (v33)
          {
            uint64_t v38 = *((unsigned int *)a1 + 6);
            int buf = 136446978;
            id v68 = "nw_frame_cache_create_frame";
            __int16 v69 = 2082;
            uint64_t v70 = (uint64_t)"frame_cache->empty_frames_count";
            __int16 v71 = 2048;
            uint64_t v72 = 1;
            __int16 v73 = 2048;
            uint64_t v74 = v38;
            int v27 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_47;
          }
        }
        else
        {
          __int16 v24 = __nwlog_obj();
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            uint64_t v37 = *((unsigned int *)a1 + 6);
            int buf = 136446978;
            id v68 = "nw_frame_cache_create_frame";
            __int16 v69 = 2082;
            uint64_t v70 = (uint64_t)"frame_cache->empty_frames_count";
            __int16 v71 = 2048;
            uint64_t v72 = 1;
            __int16 v73 = 2048;
            uint64_t v74 = v37;
            int v27 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_47;
          }
        }
      }
LABEL_48:
      if (v23) {
        free(v23);
      }
      *((_DWORD *)a1 + 6) = 0;
LABEL_51:
      nw_frame_reset(v60[3], (uint64_t)v9, v2, 0, 0);
      nw_frame_set_buffer_used_malloc(v60[3], 1);
      *((void *)v64 + 3) = v60[3];
      if (!gLogDatapath) {
        goto LABEL_52;
      }
      __int16 v47 = __nwlog_obj();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v48 = *((void *)v64 + 3);
        int buf = 136446722;
        id v68 = "nw_frame_cache_create_frame";
        __int16 v69 = 2048;
        uint64_t v70 = v48;
        __int16 v71 = 1024;
        LODWORD(v72) = v2;
        __int16 v18 = "%{public}s reused bufferless frame %p, allocated buffer of length %u";
        BOOL v19 = v47;
        uint32_t v20 = 28;
        goto LABEL_78;
      }
      goto LABEL_7;
    }
    if (gLogDatapath)
    {
      char v49 = __nwlog_obj();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        int buf = 136446466;
        id v68 = "nw_frame_cache_create_frame";
        __int16 v69 = 1024;
        LODWORD(v70) = v2;
        _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_DEBUG, "%{public}s no frame to reuse for length %u", (uint8_t *)&buf, 0x12u);
      }
    }
    uint64_t v16 = nw_frame_create(*((_DWORD *)a1 + 9), (uint64_t)v9, v2, 0, 0);
    *((void *)v64 + 3) = v16;
    if (v16)
    {
      *(_WORD *)(v16 + 204) |= 1u;
      if (!gLogDatapath)
      {
LABEL_52:
        uint64_t v39 = *((void *)v64 + 3);
LABEL_53:
        _Block_object_dispose(&v59, 8);
        _Block_object_dispose(v63, 8);
        return v39;
      }
      uint64_t v17 = __nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int buf = 136446466;
        id v68 = "nw_frame_cache_create_frame";
        __int16 v69 = 1024;
        LODWORD(v70) = v2;
        __int16 v18 = "%{public}s allocated new frame of length %u";
        BOOL v19 = v17;
        uint32_t v20 = 18;
LABEL_78:
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&buf, v20);
      }
LABEL_7:
      if (gLogDatapath)
      {
        uint64_t v7 = __nwlog_obj();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v8 = *((void *)v64 + 3);
          int buf = 136446722;
          id v68 = "nw_frame_cache_create_frame";
          __int16 v69 = 2048;
          uint64_t v70 = v8;
          __int16 v71 = 1024;
          LODWORD(v72) = v2;
          _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s returning frame %p for requested length %u", (uint8_t *)&buf, 0x1Cu);
        }
      }
      goto LABEL_52;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int buf = 136446210;
    id v68 = "nw_frame_cache_create_frame";
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v28, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unsigned int v29 = gLogObj;
        os_log_type_t v30 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          int buf = 136446210;
          id v68 = "nw_frame_cache_create_frame";
          uint64_t v31 = "%{public}s nw_frame_create new frame failed";
LABEL_59:
          _os_log_impl(&dword_1830D4000, v29, v30, v31, (uint8_t *)&buf, 0xCu);
        }
      }
      else if (v50)
      {
        uint64_t v35 = (char *)__nw_create_backtrace_string();
        unsigned int v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v36 = os_log_type_enabled(v29, type);
        if (v35)
        {
          if (v36)
          {
            int buf = 136446466;
            id v68 = "nw_frame_cache_create_frame";
            __int16 v69 = 2082;
            uint64_t v70 = (uint64_t)v35;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s nw_frame_create new frame failed, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
          }
          free(v35);
          goto LABEL_60;
        }
        if (v36)
        {
          int buf = 136446210;
          id v68 = "nw_frame_cache_create_frame";
          uint64_t v31 = "%{public}s nw_frame_create new frame failed, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        unsigned int v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          int buf = 136446210;
          id v68 = "nw_frame_cache_create_frame";
          uint64_t v31 = "%{public}s nw_frame_create new frame failed, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v28) {
      free(v28);
    }
    if (v9) {
      free(v9);
    }
    uint64_t v39 = 0;
    goto LABEL_53;
  }
  __break(1u);
  return result;
}

BOOL __nw_frame_cache_create_frame_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
    char v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (!__nwlog_fault(v12, &type, &v60)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = gLogObj;
      os_log_type_t v14 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
      BOOL v15 = "%{public}s foreach gave null candidate_frame";
    }
    else
    {
      if (v60)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = gLogObj;
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
            __int16 v64 = 2082;
            *(void *)uint64_t v65 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s foreach gave null candidate_frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_56;
        }
        if (!v19)
        {
LABEL_56:
          if (v12) {
            free(v12);
          }
          return 0;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
        BOOL v15 = "%{public}s foreach gave null candidate_frame, no backtrace";
        os_log_type_t v30 = v17;
        os_log_type_t v31 = v18;
LABEL_55:
        _os_log_impl(&dword_1830D4000, v30, v31, v15, buf, 0xCu);
        goto LABEL_56;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = gLogObj;
      os_log_type_t v14 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
      BOOL v15 = "%{public}s foreach gave null candidate_frame, backtrace limit exceeded";
    }
    os_log_type_t v30 = v13;
    os_log_type_t v31 = v14;
    goto LABEL_55;
  }
  if ((*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    unsigned int v4 = *(_DWORD *)(a2 + 48);
    uint64_t v5 = *(void *)(a2 + 112);
  }
  if (gLogDatapath)
  {
    __int16 v54 = __nwlog_obj();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446978;
      __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
      __int16 v64 = 2048;
      *(void *)uint64_t v65 = a2;
      *(_WORD *)&v65[8] = 2048;
      uint64_t v66 = v5;
      __int16 v67 = 1024;
      LODWORD(v68) = v4;
      _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_DEBUG, "%{public}s existing frame %p found, buffer %p, length %u", buf, 0x26u);
    }
  }
  int v6 = *(_DWORD *)(a2 + 52);
  if (v6) {
    v6 -= *(_DWORD *)(a2 + 56) + *(_DWORD *)(a2 + 60);
  }
  if (v6 != v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (!__nwlog_fault(v8, &type, &v60)) {
      goto LABEL_71;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_71;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
      BOOL v11 = "%{public}s candidate frame is not fully unclaimed, destroying";
      goto LABEL_69;
    }
    if (!v60)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_71;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
      BOOL v11 = "%{public}s candidate frame is not fully unclaimed, destroying, backtrace limit exceeded";
      goto LABEL_69;
    }
    uint64_t v22 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v23 = gLogObj;
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v22)
    {
      if (!v25) {
        goto LABEL_71;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
      BOOL v11 = "%{public}s candidate frame is not fully unclaimed, destroying, no backtrace";
      goto LABEL_78;
    }
    if (v25)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
      __int16 v64 = 2082;
      *(void *)uint64_t v65 = v22;
      _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s candidate frame is not fully unclaimed, destroying, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v22);
LABEL_71:
    if (!v8)
    {
LABEL_73:
      frame_cache_remove_from_cache(*(void *)(a1 + 48), (void *)a2);
      return 1;
    }
LABEL_72:
    free(v8);
    goto LABEL_73;
  }
  if (!v5 && v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446722;
      __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
      __int16 v64 = 2048;
      *(void *)uint64_t v65 = a2;
      *(_WORD *)&v65[8] = 1024;
      LODWORD(v66) = v4;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s candidate frame %p has length %u, but buffer is NULL, removing", buf, 0x1Cu);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (__nwlog_fault(v8, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_71;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
        BOOL v11 = "%{public}s candidate frame has length > 0, but buffer is NULL";
LABEL_69:
        uint64_t v35 = v9;
        os_log_type_t v36 = v10;
LABEL_70:
        _os_log_impl(&dword_1830D4000, v35, v36, v11, buf, 0xCu);
        goto LABEL_71;
      }
      if (!v60)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_71;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
        BOOL v11 = "%{public}s candidate frame has length > 0, but buffer is NULL, backtrace limit exceeded";
        goto LABEL_69;
      }
      uint64_t v28 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v23 = gLogObj;
      os_log_type_t v24 = type;
      BOOL v29 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v28)
      {
        if (v29)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
          __int16 v64 = 2082;
          *(void *)uint64_t v65 = v28;
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s candidate frame has length > 0, but buffer is NULL, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v28);
        if (!v8) {
          goto LABEL_73;
        }
        goto LABEL_72;
      }
      if (v29)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
        BOOL v11 = "%{public}s candidate frame has length > 0, but buffer is NULL, no backtrace";
LABEL_78:
        uint64_t v35 = v23;
        os_log_type_t v36 = v24;
        goto LABEL_70;
      }
    }
    goto LABEL_71;
  }
  uint64_t v20 = *(unsigned int *)(a1 + 56);
  if (*MEMORY[0x1E4F14B00] + v20 < (unint64_t)v4)
  {
    if (gLogDatapath)
    {
      int v21 = __nwlog_obj();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446722;
        __int16 v63 = "frame_cache_candidate_frame_length_is_match";
        __int16 v64 = 1024;
        *(_DWORD *)uint64_t v65 = v4;
        *(_WORD *)&v65[4] = 1024;
        *(_DWORD *)&v65[6] = v20;
        _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s candidate frame (%u bytes) is too much larger than requested (%u bytes), skipping", buf, 0x18u);
      }
    }
    goto LABEL_41;
  }
  if (v4 < v20)
  {
LABEL_41:
    if (!v5)
    {
      uint64_t v26 = *(void *)(*(void *)(a1 + 40) + 8);
      if (!*(void *)(v26 + 24))
      {
        *(void *)(v26 + 24) = a2;
        if (gLogDatapath)
        {
          int v27 = __nwlog_obj();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
            __int16 v64 = 2048;
            *(void *)uint64_t v65 = a2;
            _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s reserving bufferless frame %p if better candidate not found", buf, 0x16u);
          }
        }
      }
    }
    return 1;
  }
  uint64_t v33 = *(void *)(a2 + 16);
  uint64_t v34 = *(void **)(a2 + 24);
  if (v33)
  {
    *(void *)(v33 + 24) = v34;
    uint64_t v34 = *(void **)(a2 + 24);
  }
  else
  {
    *(void *)(*(void *)(a1 + 48) + 8) = v34;
  }
  *uint64_t v34 = v33;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v37 = *(void *)(a1 + 48);
  int v38 = *(_DWORD *)(v37 + 24);
  *(_DWORD *)(v37 + 24) = v38 - 1;
  if (!v38)
  {
    __nwlog_obj();
    uint64_t v39 = *(unsigned int *)(*(void *)(a1 + 48) + 24);
    *(_DWORD *)int buf = 136446978;
    __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
    __int16 v64 = 2082;
    *(void *)uint64_t v65 = "frame_cache->empty_frames_count";
    *(_WORD *)&v65[8] = 2048;
    uint64_t v66 = 1;
    __int16 v67 = 2048;
    uint64_t v68 = v39;
    BOOL v40 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (__nwlog_fault(v40, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v41, type))
        {
          uint64_t v43 = *(unsigned int *)(*(void *)(a1 + 48) + 24);
          *(_DWORD *)int buf = 136446978;
          __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
          __int16 v64 = 2082;
          *(void *)uint64_t v65 = "frame_cache->empty_frames_count";
          *(_WORD *)&v65[8] = 2048;
          uint64_t v66 = 1;
          __int16 v67 = 2048;
          uint64_t v68 = v43;
          os_log_type_t v44 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_94:
          _os_log_impl(&dword_1830D4000, v41, v42, v44, buf, 0x2Au);
        }
      }
      else if (v60)
      {
        __int16 v45 = (char *)__nw_create_backtrace_string();
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v42 = type;
        BOOL v46 = os_log_type_enabled(v41, type);
        if (v45)
        {
          if (v46)
          {
            uint64_t v47 = *(unsigned int *)(*(void *)(a1 + 48) + 24);
            *(_DWORD *)int buf = 136447234;
            __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
            __int16 v64 = 2082;
            *(void *)uint64_t v65 = "frame_cache->empty_frames_count";
            *(_WORD *)&v65[8] = 2048;
            uint64_t v66 = 1;
            __int16 v67 = 2048;
            uint64_t v68 = v47;
            __int16 v69 = 2082;
            uint64_t v70 = v45;
            _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v45);
          goto LABEL_95;
        }
        if (v46)
        {
          uint64_t v49 = *(unsigned int *)(*(void *)(a1 + 48) + 24);
          *(_DWORD *)int buf = 136446978;
          __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
          __int16 v64 = 2082;
          *(void *)uint64_t v65 = "frame_cache->empty_frames_count";
          *(_WORD *)&v65[8] = 2048;
          uint64_t v66 = 1;
          __int16 v67 = 2048;
          uint64_t v68 = v49;
          os_log_type_t v44 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_94;
        }
      }
      else
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v41, type))
        {
          uint64_t v48 = *(unsigned int *)(*(void *)(a1 + 48) + 24);
          *(_DWORD *)int buf = 136446978;
          __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
          __int16 v64 = 2082;
          *(void *)uint64_t v65 = "frame_cache->empty_frames_count";
          *(_WORD *)&v65[8] = 2048;
          uint64_t v66 = 1;
          __int16 v67 = 2048;
          uint64_t v68 = v48;
          os_log_type_t v44 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_94;
        }
      }
    }
LABEL_95:
    if (v40) {
      free(v40);
    }
    *(_DWORD *)(*(void *)(a1 + 48) + 24) = 0;
  }
  if (!gLogDatapath)
  {
    int v50 = *(_DWORD *)(a1 + 56);
    int v51 = v4 - v50;
    if (v4 == v50) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
  __int16 v55 = __nwlog_obj();
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
  {
    int v56 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)int buf = 136446722;
    __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
    __int16 v64 = 1024;
    *(_DWORD *)uint64_t v65 = v4;
    *(_WORD *)&v65[4] = 1024;
    *(_DWORD *)&v65[6] = v56;
    _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEBUG, "%{public}s reusing frame of length %u, adjusting to %u", buf, 0x18u);
  }
  int v57 = *(_DWORD *)(a1 + 56);
  int v51 = v4 - v57;
  if (v4 != v57)
  {
    if (gLogDatapath)
    {
      uint64_t v59 = __nwlog_obj();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
        __int16 v64 = 1024;
        *(_DWORD *)uint64_t v65 = v51;
        _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_DEBUG, "%{public}s claiming %u bytes off end of frame", buf, 0x12u);
      }
    }
LABEL_100:
    nw_frame_claim(a2, a2, 0, v51);
    goto LABEL_101;
  }
  if (gLogDatapath)
  {
    unsigned int v58 = __nwlog_obj();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446210;
      __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
      _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_DEBUG, "%{public}s frame was exact match, not modifying", buf, 0xCu);
    }
  }
LABEL_101:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  if (!gLogDatapath) {
    return 0;
  }
  uint64_t v52 = __nwlog_obj();
  BOOL result = os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    int v53 = nw_frame_unclaimed_length(*(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    *(_DWORD *)int buf = 136446466;
    __int16 v63 = "nw_frame_cache_create_frame_block_invoke";
    __int16 v64 = 1024;
    *(_DWORD *)uint64_t v65 = v53;
    _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_DEBUG, "%{public}s returning frame with unclaimed bytes %u", buf, 0x12u);
    return 0;
  }
  return result;
}

void nw_frame_cache_return_frame(uint64_t a1, uint64_t a2)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v76 = "nw_frame_cache_return_frame";
    char v60 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v73 = 0;
    if (!__nwlog_fault(v60, &type, &v73)) {
      goto LABEL_125;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v61 = __nwlog_obj();
      os_log_type_t v62 = type;
      if (!os_log_type_enabled(v61, type)) {
        goto LABEL_125;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v76 = "nw_frame_cache_return_frame";
      __int16 v63 = "%{public}s called with null frame_cache";
    }
    else if (v73)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v61 = __nwlog_obj();
      os_log_type_t v62 = type;
      BOOL v69 = os_log_type_enabled(v61, type);
      if (backtrace_string)
      {
        if (v69)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v76 = "nw_frame_cache_return_frame";
          __int16 v77 = 2082;
          *(void *)os_log_type_t v78 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v61, v62, "%{public}s called with null frame_cache, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_125:
        if (!v60) {
          return;
        }
LABEL_126:
        free(v60);
        return;
      }
      if (!v69) {
        goto LABEL_125;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v76 = "nw_frame_cache_return_frame";
      __int16 v63 = "%{public}s called with null frame_cache, no backtrace";
    }
    else
    {
      uint64_t v61 = __nwlog_obj();
      os_log_type_t v62 = type;
      if (!os_log_type_enabled(v61, type)) {
        goto LABEL_125;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v76 = "nw_frame_cache_return_frame";
      __int16 v63 = "%{public}s called with null frame_cache, backtrace limit exceeded";
    }
LABEL_124:
    _os_log_impl(&dword_1830D4000, v61, v62, v63, buf, 0xCu);
    goto LABEL_125;
  }
  if (a2)
  {
    if (gLogDatapath)
    {
      __int16 v64 = __nwlog_obj();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v76 = "nw_frame_cache_return_frame";
        __int16 v77 = 2048;
        *(void *)os_log_type_t v78 = a2;
        _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s caching frame %p", buf, 0x16u);
      }
    }
    if ((*(_WORD *)(a2 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(a2, *(void *)(a2 + 88))
      || (uint64_t v4 = *(void *)(a2 + 112)) == 0)
    {
      if (!gLogDatapath)
      {
        uint64_t v4 = 0;
        int v5 = 0;
        uint64_t v6 = *(void *)(a2 + 88);
        goto LABEL_14;
      }
      uint64_t v72 = __nwlog_obj();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v76 = "nw_frame_cache_return_frame";
        __int16 v77 = 2048;
        *(void *)os_log_type_t v78 = a2;
        _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_DEBUG, "%{public}s frame %p no longer has buffer, setting length to 0", buf, 0x16u);
      }
      int v5 = 0;
      uint64_t v4 = 0;
    }
    else
    {
      int v5 = *(_DWORD *)(a2 + 48);
    }
    uint64_t v6 = *(void *)(a2 + 88);
    if (gLogDatapath)
    {
      uint64_t v7 = __nwlog_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136447234;
        uint64_t v76 = "nw_frame_cache_return_frame";
        __int16 v77 = 2048;
        *(void *)os_log_type_t v78 = a2;
        *(_WORD *)&v78[8] = 2048;
        *(void *)&v78[10] = v4;
        *(_WORD *)&v78[18] = 1024;
        *(_DWORD *)int v79 = v5;
        *(_WORD *)&v79[4] = 2048;
        *(void *)&v79[6] = v6;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s resetting frame %p to buffer %p, length %u, context %p", buf, 0x30u);
      }
    }
LABEL_14:
    nw_frame_reset(a2, v4, v5, 0, v6);
    uint64_t v8 = *(void *)a1;
    *(void *)(a2 + 16) = *(void *)a1;
    uint64_t v9 = a1 + 8;
    if (v8) {
      os_log_type_t v10 = (void *)(v8 + 24);
    }
    else {
      os_log_type_t v10 = (void *)(a1 + 8);
    }
    void *v10 = a2 + 16;
    *(void *)a1 = a2;
    *(void *)(a2 + 24) = a1;
    uint64_t v11 = *(unsigned int *)(a1 + 24) + 1;
    uint64_t v12 = v11 << 31 >> 31;
    *(_DWORD *)(a1 + 24) = v11;
    if (v12 == v11 && (v12 & 0x8000000000000000) == 0) {
      goto LABEL_36;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v13 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)int buf = 136446978;
    uint64_t v76 = "frame_cache_add_to_cache";
    __int16 v77 = 2082;
    *(void *)os_log_type_t v78 = "frame_cache->empty_frames_count";
    *(_WORD *)&v78[8] = 2048;
    *(void *)&v78[10] = 1;
    *(_WORD *)&v78[18] = 2048;
    *(void *)int v79 = v13;
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v73 = 0;
    if (__nwlog_fault(v14, &type, &v73))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v15 = gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v17 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)int buf = 136446978;
          uint64_t v76 = "frame_cache_add_to_cache";
          __int16 v77 = 2082;
          *(void *)os_log_type_t v78 = "frame_cache->empty_frames_count";
          *(_WORD *)&v78[8] = 2048;
          *(void *)&v78[10] = 1;
          *(_WORD *)&v78[18] = 2048;
          *(void *)int v79 = v17;
          os_log_type_t v18 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_32:
          _os_log_impl(&dword_1830D4000, v15, v16, v18, buf, 0x2Au);
        }
      }
      else if (v73)
      {
        BOOL v19 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v15 = gLogObj;
        os_log_type_t v16 = type;
        BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v19)
        {
          if (v20)
          {
            uint64_t v21 = *(unsigned int *)(a1 + 24);
            *(_DWORD *)int buf = 136447234;
            uint64_t v76 = "frame_cache_add_to_cache";
            __int16 v77 = 2082;
            *(void *)os_log_type_t v78 = "frame_cache->empty_frames_count";
            *(_WORD *)&v78[8] = 2048;
            *(void *)&v78[10] = 1;
            *(_WORD *)&v78[18] = 2048;
            *(void *)int v79 = v21;
            *(_WORD *)&v79[8] = 2082;
            *(void *)&v79[10] = v19;
            _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v19);
          goto LABEL_33;
        }
        if (v20)
        {
          uint64_t v23 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)int buf = 136446978;
          uint64_t v76 = "frame_cache_add_to_cache";
          __int16 v77 = 2082;
          *(void *)os_log_type_t v78 = "frame_cache->empty_frames_count";
          *(_WORD *)&v78[8] = 2048;
          *(void *)&v78[10] = 1;
          *(_WORD *)&v78[18] = 2048;
          *(void *)int v79 = v23;
          os_log_type_t v18 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_32;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v15 = gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v22 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)int buf = 136446978;
          uint64_t v76 = "frame_cache_add_to_cache";
          __int16 v77 = 2082;
          *(void *)os_log_type_t v78 = "frame_cache->empty_frames_count";
          *(_WORD *)&v78[8] = 2048;
          *(void *)&v78[10] = 1;
          *(_WORD *)&v78[18] = 2048;
          *(void *)int v79 = v22;
          os_log_type_t v18 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_32;
        }
      }
    }
LABEL_33:
    if (v14) {
      free(v14);
    }
    *(_DWORD *)(a1 + 24) = -1;
LABEL_36:
    if (gLogDatapath)
    {
      uint64_t v65 = __nwlog_obj();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v76 = "nw_frame_cache_return_frame";
        __int16 v77 = 1024;
        *(_DWORD *)os_log_type_t v78 = v5;
        _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_DEBUG, "%{public}s reset frame of length %u, eligible for reuse", buf, 0x12u);
      }
      if (gLogDatapath)
      {
        uint64_t v66 = __nwlog_obj();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
        {
          int v67 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)int buf = 136446466;
          uint64_t v76 = "frame_cache_purge_if_necessary";
          __int16 v77 = 1024;
          *(_DWORD *)os_log_type_t v78 = v67;
          _os_log_impl(&dword_1830D4000, v66, OS_LOG_TYPE_DEBUG, "%{public}s total %u empty frames in cache (initial)", buf, 0x12u);
        }
      }
    }
    if (*(_DWORD *)(a1 + 24) > *(_DWORD *)(a1 + 28))
    {
      while (1)
      {
        if (gLogDatapath)
        {
          BOOL v25 = __nwlog_obj();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            int v26 = *(_DWORD *)(a1 + 24);
            int v27 = *(_DWORD *)(a1 + 28);
            *(_DWORD *)int buf = 136446722;
            uint64_t v76 = "frame_cache_purge_if_necessary";
            __int16 v77 = 1024;
            *(_DWORD *)os_log_type_t v78 = v26;
            *(_WORD *)&v78[4] = 1024;
            *(_DWORD *)&v78[6] = v27;
            _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s too many frames in frame cache (%u > %u), pruning", buf, 0x18u);
          }
        }
        os_log_type_t v24 = **(void ***)(*(void *)v9 + 8);
        if (!v24) {
          break;
        }
        frame_cache_remove_from_cache(a1, v24);
        if (*(_DWORD *)(a1 + 24) <= *(_DWORD *)(a1 + 28)) {
          goto LABEL_44;
        }
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v34 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)int buf = 136446466;
      uint64_t v76 = "frame_cache_purge_if_necessary";
      __int16 v77 = 1024;
      *(_DWORD *)os_log_type_t v78 = v34;
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v73 = 0;
      if (!__nwlog_fault(v35, &type, &v73)) {
        goto LABEL_83;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v36 = gLogObj;
        os_log_type_t v37 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          int v38 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)int buf = 136446466;
          uint64_t v76 = "frame_cache_purge_if_necessary";
          __int16 v77 = 1024;
          *(_DWORD *)os_log_type_t v78 = v38;
          uint64_t v39 = "%{public}s no more frames in frame cache, we thought we had %u frames";
LABEL_78:
          int v56 = v36;
          os_log_type_t v57 = v37;
          uint32_t v58 = 18;
LABEL_82:
          _os_log_impl(&dword_1830D4000, v56, v57, v39, buf, v58);
          goto LABEL_83;
        }
        goto LABEL_83;
      }
      if (!v73)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v36 = gLogObj;
        os_log_type_t v37 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          int v53 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)int buf = 136446466;
          uint64_t v76 = "frame_cache_purge_if_necessary";
          __int16 v77 = 1024;
          *(_DWORD *)os_log_type_t v78 = v53;
          uint64_t v39 = "%{public}s no more frames in frame cache, we thought we had %u frames, backtrace limit exceeded";
          goto LABEL_78;
        }
LABEL_83:
        if (v35) {
          free(v35);
        }
        *(_DWORD *)(a1 + 24) = 0;
        return;
      }
      os_log_type_t v44 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v36 = gLogObj;
      os_log_type_t v37 = type;
      BOOL v45 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v44)
      {
        if (v45)
        {
          int v55 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)int buf = 136446466;
          uint64_t v76 = "frame_cache_purge_if_necessary";
          __int16 v77 = 1024;
          *(_DWORD *)os_log_type_t v78 = v55;
          uint64_t v39 = "%{public}s no more frames in frame cache, we thought we had %u frames, no backtrace";
          goto LABEL_78;
        }
        goto LABEL_83;
      }
      if (v45)
      {
        int v46 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)int buf = 136446722;
        uint64_t v76 = "frame_cache_purge_if_necessary";
        __int16 v77 = 1024;
        *(_DWORD *)os_log_type_t v78 = v46;
        *(_WORD *)&v78[4] = 2082;
        *(void *)&v78[6] = v44;
        uint64_t v47 = "%{public}s no more frames in frame cache, we thought we had %u frames, dumping backtrace:%{public}s";
        uint64_t v48 = v36;
        os_log_type_t v49 = v37;
        uint32_t v50 = 28;
LABEL_70:
        _os_log_impl(&dword_1830D4000, v48, v49, v47, buf, v50);
        goto LABEL_71;
      }
      goto LABEL_71;
    }
LABEL_44:
    *(_DWORD *)int buf = 0;
    nw_frame_array_get_frame_count((uint64_t *)a1, 0, buf);
    int v28 = *(_DWORD *)buf;
    if (*(_DWORD *)buf <= *(_DWORD *)(a1 + 32))
    {
LABEL_51:
      if (gLogDatapath)
      {
        __int16 v32 = __nwlog_obj();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          int v33 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)int buf = 136446466;
          uint64_t v76 = "frame_cache_purge_if_necessary";
          __int16 v77 = 1024;
          *(_DWORD *)os_log_type_t v78 = v33;
          _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s total %u empty frames in cache (final)", buf, 0x12u);
        }
      }
      return;
    }
    while (1)
    {
      if (gLogDatapath)
      {
        os_log_type_t v30 = __nwlog_obj();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          int v31 = *(_DWORD *)(a1 + 32);
          *(_DWORD *)int buf = 136446722;
          uint64_t v76 = "frame_cache_purge_if_necessary";
          __int16 v77 = 1024;
          *(_DWORD *)os_log_type_t v78 = v28;
          *(_WORD *)&v78[4] = 1024;
          *(_DWORD *)&v78[6] = v31;
          _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s too many bytes in frame cache (%u > %u), pruning", buf, 0x18u);
        }
      }
      BOOL v29 = **(void ***)(*(void *)v9 + 8);
      if (!v29) {
        break;
      }
      frame_cache_remove_from_cache(a1, v29);
      *(_DWORD *)int buf = 0;
      nw_frame_array_get_frame_count((uint64_t *)a1, 0, buf);
      int v28 = *(_DWORD *)buf;
      if (*(_DWORD *)buf <= *(_DWORD *)(a1 + 32)) {
        goto LABEL_51;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v40 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)int buf = 136446722;
    uint64_t v76 = "frame_cache_purge_if_necessary";
    __int16 v77 = 1024;
    *(_DWORD *)os_log_type_t v78 = v28;
    *(_WORD *)&v78[4] = 1024;
    *(_DWORD *)&v78[6] = v40;
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v73 = 0;
    if (!__nwlog_fault(v35, &type, &v73)) {
      goto LABEL_83;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v41 = gLogObj;
      os_log_type_t v42 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_83;
      }
      int v43 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)int buf = 136446722;
      uint64_t v76 = "frame_cache_purge_if_necessary";
      __int16 v77 = 1024;
      *(_DWORD *)os_log_type_t v78 = v28;
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = v43;
      uint64_t v39 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames";
    }
    else if (v73)
    {
      os_log_type_t v44 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v41 = gLogObj;
      os_log_type_t v42 = type;
      BOOL v51 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v44)
      {
        if (v51)
        {
          int v52 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)int buf = 136446978;
          uint64_t v76 = "frame_cache_purge_if_necessary";
          __int16 v77 = 1024;
          *(_DWORD *)os_log_type_t v78 = v28;
          *(_WORD *)&v78[4] = 1024;
          *(_DWORD *)&v78[6] = v52;
          *(_WORD *)&v78[10] = 2082;
          *(void *)&v78[12] = v44;
          uint64_t v47 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames, dumping backtrace:%{public}s";
          uint64_t v48 = v41;
          os_log_type_t v49 = v42;
          uint32_t v50 = 34;
          goto LABEL_70;
        }
LABEL_71:
        free(v44);
        goto LABEL_83;
      }
      if (!v51) {
        goto LABEL_83;
      }
      int v59 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)int buf = 136446722;
      uint64_t v76 = "frame_cache_purge_if_necessary";
      __int16 v77 = 1024;
      *(_DWORD *)os_log_type_t v78 = v28;
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = v59;
      uint64_t v39 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v41 = gLogObj;
      os_log_type_t v42 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_83;
      }
      int v54 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)int buf = 136446722;
      uint64_t v76 = "frame_cache_purge_if_necessary";
      __int16 v77 = 1024;
      *(_DWORD *)os_log_type_t v78 = v28;
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = v54;
      uint64_t v39 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames, backtrace limit exceeded";
    }
    int v56 = v41;
    os_log_type_t v57 = v42;
    uint32_t v58 = 24;
    goto LABEL_82;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v76 = "nw_frame_cache_return_frame";
  char v60 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v73 = 0;
  if (!__nwlog_fault(v60, &type, &v73)) {
    goto LABEL_125;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v61 = __nwlog_obj();
    os_log_type_t v62 = type;
    if (!os_log_type_enabled(v61, type)) {
      goto LABEL_125;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v76 = "nw_frame_cache_return_frame";
    __int16 v63 = "%{public}s called with null frame";
    goto LABEL_124;
  }
  if (!v73)
  {
    uint64_t v61 = __nwlog_obj();
    os_log_type_t v62 = type;
    if (!os_log_type_enabled(v61, type)) {
      goto LABEL_125;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v76 = "nw_frame_cache_return_frame";
    __int16 v63 = "%{public}s called with null frame, backtrace limit exceeded";
    goto LABEL_124;
  }
  uint64_t v70 = (char *)__nw_create_backtrace_string();
  uint64_t v61 = __nwlog_obj();
  os_log_type_t v62 = type;
  BOOL v71 = os_log_type_enabled(v61, type);
  if (!v70)
  {
    if (!v71) {
      goto LABEL_125;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v76 = "nw_frame_cache_return_frame";
    __int16 v63 = "%{public}s called with null frame, no backtrace";
    goto LABEL_124;
  }
  if (v71)
  {
    *(_DWORD *)int buf = 136446466;
    uint64_t v76 = "nw_frame_cache_return_frame";
    __int16 v77 = 2082;
    *(void *)os_log_type_t v78 = v70;
    _os_log_impl(&dword_1830D4000, v61, v62, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v70);
  if (v60) {
    goto LABEL_126;
  }
}

uint64_t nw_masque_listener_add_client_demux_pattern(void *a1, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!nw_protocol_metadata_is_masque_listener(a1))
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_listener_add_client_demux_pattern";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    out[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v21) = 0;
    if (!__nwlog_fault(v8, out, &v21)) {
      goto LABEL_27;
    }
    if (out[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = out[0];
      if (!os_log_type_enabled(v9, out[0])) {
        goto LABEL_27;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_listener_add_client_demux_pattern";
      uint64_t v11 = "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata)";
    }
    else if ((_BYTE)v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = out[0];
      BOOL v13 = os_log_type_enabled(v9, out[0]);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_add_client_demux_pattern";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_27;
      }
      if (!v13)
      {
LABEL_27:
        if (v8) {
          free(v8);
        }
        return 0;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_listener_add_client_demux_pattern";
      uint64_t v11 = "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata), no backtrace";
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = out[0];
      if (!os_log_type_enabled(v9, out[0])) {
        goto LABEL_27;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_listener_add_client_demux_pattern";
      uint64_t v11 = "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata), backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_27;
  }
  if (a2 && !uuid_is_null(a3))
  {
    memset(out, 0, 37);
    uuid_unparse(a3, (char *)out);
    uint64_t v21 = 0;
    uint64_t v22 = &v21;
    uint64_t v23 = 0x2000000000;
    uint64_t v24 = 0;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = __nw_masque_listener_add_client_demux_pattern_block_invoke;
    v20[3] = &unk_1E523E2C0;
    void v20[4] = &v21;
    void v20[5] = out;
    nw_protocol_metadata_access_handle((uint64_t)a1, (uint64_t)v20);
    uint64_t v6 = v22[3];
    if (!v6)
    {
LABEL_7:
      _Block_object_dispose(&v21, 8);
      return 0;
    }
    if (nw_protocol_metadata_is_masque_listener(a1))
    {
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL49nw_masque_listener_add_demux_pattern_for_endpointP20nw_protocol_metadataP19nw_protocol_optionsP11nw_endpoint_block_invoke;
      BOOL v29 = &__block_descriptor_tmp_31_27254;
      uint64_t v30 = a2;
      uint64_t v31 = v6;
      nw_protocol_metadata_access_handle((uint64_t)a1, (uint64_t)buf);
      goto LABEL_7;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_listener_add_demux_pattern_for_endpoint";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v14, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_39;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_listener_add_demux_pattern_for_endpoint";
        uint64_t v17 = "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata)";
        goto LABEL_38;
      }
      if (!v25)
      {
        BOOL v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_39;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_listener_add_demux_pattern_for_endpoint";
        uint64_t v17 = "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata), backtrace limit exceeded";
        goto LABEL_38;
      }
      os_log_type_t v18 = (char *)__nw_create_backtrace_string();
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (v18)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_add_demux_pattern_for_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v18;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v18);
        goto LABEL_39;
      }
      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_listener_add_demux_pattern_for_endpoint";
        uint64_t v17 = "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata), no backtrace";
LABEL_38:
        _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
      }
    }
LABEL_39:
    if (v14) {
      free(v14);
    }
    goto LABEL_7;
  }
  return 0;
}

BOOL nw_protocol_metadata_is_masque_listener(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_masque_listener_get_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_207);
    }
    if (nw_protocol_masque_listener_get_definition(void)::definition) {
      uint64_t v3 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
    }
    else {
      uint64_t v3 = 0;
    }
    return nw_protocol_definition_is_equal_unsafe((uint64_t)v2, (uint64_t)v3);
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v14 = "nw_protocol_metadata_is_masque_listener";
  int v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v14 = "nw_protocol_metadata_is_masque_listener";
        uint64_t v8 = "%{public}s called with null metadata";
LABEL_23:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v14 = "nw_protocol_metadata_is_masque_listener";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_24;
      }
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v14 = "nw_protocol_metadata_is_masque_listener";
        uint64_t v8 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v14 = "nw_protocol_metadata_is_masque_listener";
        uint64_t v8 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_23;
      }
    }
  }
LABEL_24:
  if (v5) {
    free(v5);
  }
  return 0;
}

uint64_t __nw_masque_listener_add_client_demux_pattern_block_invoke(uint64_t a1, os_unfair_lock_s *a2)
{
  uint64_t v4 = a2 + 2;
  os_unfair_lock_lock(a2 + 2);
  uint64_t v5 = *(void *)(*(void *)&a2->_os_unfair_lock_opaque + 488);
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_dictionary_copy_value(v5, *(void *)(a1 + 40));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

BOOL ___ZL49nw_masque_listener_add_demux_pattern_for_endpointP20nw_protocol_metadataP19nw_protocol_optionsP11nw_endpoint_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (os_unfair_lock_s *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 8));
  uint64_t v5 = *(void *)a2;
  uint64_t v37 = 0;
  int v38 = &v37;
  uint64_t v39 = 0x2000000000;
  uint64_t v40 = 0;
  uint64_t v6 = *(void **)(a1 + 32);
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 0x40000000;
  v36[2] = ___ZL49nw_masque_listener_add_demux_pattern_for_endpointP20nw_protocol_metadataP19nw_protocol_optionsP11nw_endpoint_block_invoke_2;
  v36[3] = &unk_1E523E498;
  v36[4] = &v37;
  nw_demux_options_enumerate_patterns(v6, (uint64_t)v36);
  uint64_t v7 = v38[3];
  if (!v7)
  {
LABEL_26:
    _Block_object_dispose(&v37, 8);
    return 1;
  }
  address = nw_endpoint_get_address(*(nw_endpoint_t *)(a1 + 40));
  int sa_family = address->sa_family;
  uint64_t v10 = 28;
  if (sa_family != 30) {
    uint64_t v10 = 0;
  }
  if (sa_family == 2) {
    size_t v11 = 16;
  }
  else {
    size_t v11 = v10;
  }
  int v12 = v7 + v11;
  size_t v13 = v7 + v11 + 8;
  if (v7 + v11 == -8)
  {
    uint64_t v30 = __nwlog_obj();
    os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v42 = "strict_calloc";
    uint64_t v31 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v31);
    if (result) {
      goto LABEL_31;
    }
    free(v31);
  }
  os_log_type_t v14 = (char *)malloc_type_calloc(1uLL, v13, 0xEAFB8F1AuLL);
  if (v14) {
    goto LABEL_9;
  }
  uint64_t v32 = __nwlog_obj();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446722;
  os_log_type_t v42 = "strict_calloc";
  __int16 v43 = 2048;
  uint64_t v44 = 1;
  __int16 v45 = 2048;
  int v46 = (const char *)v13;
  int v33 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v33);
  if (!result)
  {
    free(v33);
LABEL_9:
    v35[0] = 0;
    v35[1] = v35;
    v35[2] = 0x2000000000;
    *(_WORD *)os_log_type_t v14 = bswap32(v12 + 6) >> 16;
    v14[2] = 2;
    *(_WORD *)(v14 + 3) = (_WORD)v11 << 8;
    memcpy(v14 + 5, address, v11);
    __int16 v15 = &v14[v11 + 5];
    *__int16 v15 = 1;
    *(_WORD *)(v15 + 1) = bswap32(*((unsigned __int16 *)v38 + 12)) >> 16;
    v35[3] = v15 + 3;
    os_log_type_t v16 = *(void **)(a1 + 32);
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 0x40000000;
    v34[2] = ___ZL49nw_masque_listener_add_demux_pattern_for_endpointP20nw_protocol_metadataP19nw_protocol_optionsP11nw_endpoint_block_invoke_3;
    v34[3] = &unk_1E523E4C0;
    v34[4] = v35;
    nw_demux_options_enumerate_patterns(v16, (uint64_t)v34);
    dispatch_data_t v17 = dispatch_data_create(v14, v13, 0, 0);
    metadata_for_capsule = nw_http_create_metadata_for_capsule(16770306, v17);
    char v19 = nw_masque_send_metadata(v5, (uint64_t)metadata_for_capsule, *(void *)(v5 + 32));
    int v20 = *(_DWORD *)(v5 + 527);
    if (v19)
    {
      if ((v20 & 0x10000) != 0) {
        goto LABEL_21;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v21 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_21;
      }
      uint64_t v22 = *(void *)(a1 + 40);
      *(_DWORD *)int buf = 136446978;
      os_log_type_t v42 = "nw_masque_listener_add_demux_pattern_for_endpoint_block_invoke";
      __int16 v43 = 2082;
      uint64_t v44 = v5 + 531;
      __int16 v45 = 2080;
      int v46 = " ";
      __int16 v47 = 2112;
      uint64_t v48 = v22;
      uint64_t v23 = "%{public}s %{public}s%sSent REGISTER_LISTENER_DEMUX_PATTERN capsule for endpoint %@";
      uint64_t v24 = v21;
      os_log_type_t v25 = OS_LOG_TYPE_DEBUG;
      uint32_t v26 = 42;
    }
    else
    {
      if ((v20 & 0x10000) != 0) {
        goto LABEL_21;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v27 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      int v28 = *(const char **)(a1 + 40);
      *(_DWORD *)int buf = 136446722;
      os_log_type_t v42 = (const char *)(v5 + 531);
      __int16 v43 = 2080;
      uint64_t v44 = (uint64_t)" ";
      __int16 v45 = 2112;
      int v46 = v28;
      uint64_t v23 = "%{public}s%sFailed to send REGISTER_LISTENER_DEMUX_PATTERN capsule for endpoint %@";
      uint64_t v24 = v27;
      os_log_type_t v25 = OS_LOG_TYPE_ERROR;
      uint32_t v26 = 32;
    }
    _os_log_impl(&dword_1830D4000, v24, v25, v23, buf, v26);
LABEL_21:
    free(v14);
    if (v17) {
      dispatch_release(v17);
    }
    if (metadata_for_capsule) {
      os_release(metadata_for_capsule);
    }
    os_unfair_lock_unlock(v4);
    _Block_object_dispose(v35, 8);
    goto LABEL_26;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t ___ZL49nw_masque_listener_add_demux_pattern_for_endpointP20nw_protocol_metadataP19nw_protocol_optionsP11nw_endpoint_block_invoke_2(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += a2 + 4;
  if (a5) {
    uint64_t v5 = a2 + 1;
  }
  else {
    uint64_t v5 = 1;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v5;
  return 1;
}

uint64_t ___ZL49nw_masque_listener_add_demux_pattern_for_endpointP20nw_protocol_metadataP19nw_protocol_optionsP11nw_endpoint_block_invoke_3(uint64_t a1, size_t __n, __int16 a3, void *__src, const void *a5)
{
  **(_WORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = __n;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += 2;
  **(_WORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += 2;
  size_t v7 = __n;
  memcpy(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), __src, __n);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v7;
  uint64_t v8 = *(unsigned char **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (a5)
  {
    *uint64_t v8 = 1;
    memcpy((void *)++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), a5, v7);
  }
  else
  {
    *uint64_t v8 = 0;
    size_t v7 = 1;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v7;
  return 1;
}

uint64_t nw_masque_send_metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_send_metadata";
    size_t v11 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v11, type, &v28)) {
      goto LABEL_27;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v12 = __nwlog_obj();
      os_log_type_t v13 = type[0];
      if (!os_log_type_enabled(v12, type[0])) {
        goto LABEL_27;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_send_metadata";
      os_log_type_t v14 = "%{public}s called with null masque";
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v12 = __nwlog_obj();
      os_log_type_t v13 = type[0];
      BOOL v17 = os_log_type_enabled(v12, type[0]);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_send_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_27;
      }
      if (!v17)
      {
LABEL_27:
        if (v11) {
          free(v11);
        }
        return 0;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_send_metadata";
      os_log_type_t v14 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      int v12 = __nwlog_obj();
      os_log_type_t v13 = type[0];
      if (!os_log_type_enabled(v12, type[0])) {
        goto LABEL_27;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_send_metadata";
      os_log_type_t v14 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
    goto LABEL_27;
  }
  *(void *)os_log_type_t type = 0;
  uint64_t v27 = type;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, os_log_type_t *))(*(void *)(a3 + 24)
                                                                                             + 88))(a3, a1, 0, 0, 1, type);
  if ((*(unsigned char *)(a1 + 529) & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    __int16 v15 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_masque_send_metadata";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 531;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v30 = " ";
      __int16 v31 = 1024;
      int v32 = v6;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sGot %u output frames", buf, 0x26u);
    }
  }
  if (!v6) {
    return 0;
  }
  *(void *)int buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000;
  LOBYTE(v30) = 0;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 0x40000000;
  int v20 = ___ZL23nw_masque_send_metadataP9nw_masqueP20nw_protocol_metadataP11nw_protocol_block_invoke;
  uint64_t v21 = &unk_1E523E508;
  uint64_t v22 = buf;
  uint64_t v23 = type;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v7 = *(void *)type;
  do
  {
    if (!v7) {
      break;
    }
    uint64_t v8 = *(void *)(v7 + 32);
    char v9 = ((uint64_t (*)(void *))v20)(v19);
    uint64_t v7 = v8;
  }
  while ((v9 & 1) != 0);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, os_log_type_t *))(*(void *)(a3 + 24) + 96))(a3, type);
  _Block_object_dispose(buf, 8);
  return v10;
}

uint64_t ___ZL23nw_masque_send_metadataP9nw_masqueP20nw_protocol_metadataP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    nw_frame_finalize(a2);
    uint64_t v4 = *(void *)(a2 + 32);
    uint64_t v5 = *(void **)(a2 + 40);
    if (v4)
    {
      *(void *)(v4 + 40) = v5;
      uint64_t v5 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(*(void *)(a1 + 40) + 8) = v5;
    }
    *uint64_t v5 = v4;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    uint64_t v6 = *(void *)(a1 + 48);
    if ((!v6 || (*(unsigned char *)(v6 + 529) & 1) == 0) && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v8 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = *(void *)(a1 + 48);
        uint64_t v10 = "";
        BOOL v11 = v9 == 0;
        if (v9) {
          int v12 = (const char *)(v9 + 531);
        }
        else {
          int v12 = "";
        }
        int v13 = 136446722;
        os_log_type_t v14 = "nw_masque_send_metadata_block_invoke";
        if (!v11) {
          uint64_t v10 = " ";
        }
        __int16 v15 = 2082;
        os_log_type_t v16 = v12;
        __int16 v17 = 2080;
        os_log_type_t v18 = v10;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDropping unneeded output frame", (uint8_t *)&v13, 0x20u);
      }
    }
  }
  else
  {
    nw_frame_collapse(a2);
    nw_frame_set_metadata(a2, *(NSObject **)(a1 + 56), 0, 0);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return 1;
}

BOOL ___ZL42nw_protocol_masque_listener_get_definitionv_block_invoke()
{
  if (nw_protocol_masque_listener_identifier(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_listener_identifier(void)::onceToken, &__block_literal_global_210);
  }
  nw_protocol_masque_listener_get_definition(void)::nw_protocol_definition_t definition = (uint64_t)nw_protocol_definition_create_with_identifier(&nw_protocol_masque_listener_identifier(void)::g_masque_protocol_identifier);
  nw_protocol_definition_set_is_proxy((void *)nw_protocol_masque_listener_get_definition(void)::definition);
  nw_protocol_definition_set_globals_allocator((void *)nw_protocol_masque_listener_get_definition(void)::definition, nw_masque_allocate_globals, nw_masque_deallocate_globals);
  nw_protocol_definition_set_options_allocator((void *)nw_protocol_masque_listener_get_definition(void)::definition, (uint64_t)nw_masque_allocate_options, (uint64_t)nw_masque_copy_options, (uint64_t)nw_masque_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_masque_listener_get_definition(void)::definition, (uint64_t)nw_masque_option_is_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_masque_listener_get_definition(void)::definition, 0, (uint64_t)nw_masque_serialize_options, (uint64_t)nw_masque_deserialize_options);
  nw_protocol_definition_set_metadata_allocator((void *)nw_protocol_masque_listener_get_definition(void)::definition, (uint64_t)nw_masque_listener_allocate_metadata, (uint64_t)nw_masque_listener_deallocate_metadata);
  nw_protocol_definition_set_metadata_comparator((void *)nw_protocol_masque_listener_get_definition(void)::definition, (uint64_t)nw_masque_listener_compare_metadata);
  id v0 = (void *)nw_protocol_masque_listener_get_definition(void)::definition;

  return nw_protocol_register_handle((uint64_t)&nw_protocol_masque_listener_identifier(void)::g_masque_protocol_identifier, v0, (uint64_t)nw_protocol_masque_listener_create, (uint64_t)nw_protocol_masque_listener_accept);
}

uint64_t nw_protocol_masque_listener_accept(nw_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v17 = "nw_protocol_masque_listener_accept";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v17 = "nw_protocol_masque_listener_accept";
      uint64_t v7 = "%{public}s called with null many_to_one_handler";
LABEL_45:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      goto LABEL_46;
    }
    if (!v14)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v17 = "nw_protocol_masque_listener_accept";
      uint64_t v7 = "%{public}s called with null many_to_one_handler, backtrace limit exceeded";
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v17 = "nw_protocol_masque_listener_accept";
      uint64_t v7 = "%{public}s called with null many_to_one_handler, no backtrace";
      goto LABEL_45;
    }
    if (v9)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v17 = "nw_protocol_masque_listener_accept";
      __int16 v18 = 2082;
      uint64_t v19 = backtrace_string;
      uint64_t v10 = "%{public}s called with null many_to_one_handler, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v5, v6, v10, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    if (!v4) {
      return 0;
    }
    goto LABEL_47;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v17 = "nw_protocol_masque_listener_accept";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v17 = "nw_protocol_masque_listener_accept";
      uint64_t v7 = "%{public}s called with null endpoint";
      goto LABEL_45;
    }
    if (!v14)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v17 = "nw_protocol_masque_listener_accept";
      uint64_t v7 = "%{public}s called with null endpoint, backtrace limit exceeded";
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v11) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v17 = "nw_protocol_masque_listener_accept";
      uint64_t v7 = "%{public}s called with null endpoint, no backtrace";
      goto LABEL_45;
    }
    if (v11)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v17 = "nw_protocol_masque_listener_accept";
      __int16 v18 = 2082;
      uint64_t v19 = backtrace_string;
      uint64_t v10 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  if (a3) {
    return 1;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_protocol_masque_listener_accept";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v4, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v17 = "nw_protocol_masque_listener_accept";
      uint64_t v7 = "%{public}s called with null parameters";
      goto LABEL_45;
    }
    if (!v14)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v17 = "nw_protocol_masque_listener_accept";
      uint64_t v7 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_45;
    }
    int v12 = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v13 = os_log_type_enabled(v5, type);
    if (!v12)
    {
      if (!v13) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v17 = "nw_protocol_masque_listener_accept";
      uint64_t v7 = "%{public}s called with null parameters, no backtrace";
      goto LABEL_45;
    }
    if (v13)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v17 = "nw_protocol_masque_listener_accept";
      __int16 v18 = 2082;
      uint64_t v19 = v12;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v12);
  }
LABEL_46:
  if (v4) {
LABEL_47:
  }
    free(v4);
  return 0;
}

BOOL nw_protocol_masque_listener_create(const nw_protocol_identifier *a1, nw_object *a2, nw_endpoint *a3, nw_parameters *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 8uLL, 0x270uLL, 0x68FF3B34uLL) || (os_log_type_t v6 = (char *)memptr) == 0)
  {
    BOOL v13 = __nwlog_obj();
    os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__int16 v17 = 136446722;
    *(void *)&void v17[4] = "strict_memalign";
    *(_WORD *)&v17[12] = 2048;
    *(void *)&v17[14] = 8;
    *(_WORD *)&v17[22] = 2048;
    uint64_t v18 = 624;
    char v14 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v14);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v14);
    os_log_type_t v6 = (char *)memptr;
  }
  bzero(v6, 0x270uLL);
  *(void *)__int16 v17 = 0;
  *(void *)&v17[8] = v17;
  *(void *)&v17[16] = 0x2000000000;
  uint64_t v18 = (uint64_t)v6;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZL34nw_protocol_masque_listener_createPK22nw_protocol_identifierP9nw_objectP11nw_endpointP13nw_parameters_block_invoke;
  aBlock[3] = &unk_1E523ECF8;
  void aBlock[4] = v17;
  *((void *)v6 + 62) = _Block_copy(aBlock);
  _Block_object_dispose(v17, 8);
  if (nw_protocol_masque_listener_identifier(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_listener_identifier(void)::onceToken, &__block_literal_global_210);
  }
  *((void *)v6 + 2) = &nw_protocol_masque_listener_identifier(void)::g_masque_protocol_identifier;
  if (nw_protocol_masque_listener_get_callbacks(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_listener_get_callbacks(void)::onceToken, &__block_literal_global_215);
  }
  *((void *)v6 + 3) = &nw_protocol_masque_listener_get_callbacks(void)::g_masque_listener_callbacks;
  *((void *)v6 + 5) = v6;
  *((void *)v6 + 32) = 0;
  *((void *)v6 + 33) = v6 + 256;
  if (a3) {
    uint64_t v7 = os_retain(a3);
  }
  else {
    uint64_t v7 = 0;
  }
  *((void *)v6 + 38) = v7;
  *((_DWORD *)v6 + 128) = 0;
  *((void *)v6 + 63) = 1;
  *(_DWORD *)(v6 + 527) |= 0x10u;
  if (!*((void *)v6 + 60))
  {
    uint64_t internal = nw_hash_table_create_internal(5u, 24, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
    if (internal) {
      *(_DWORD *)(internal + 48) &= ~2u;
    }
    *((void *)v6 + 60) = internal;
  }
  if (nw_parameters_get_logging_disabled((uint64_t)a4)) {
    int v9 = 0x10000;
  }
  else {
    int v9 = 0;
  }
  *(_DWORD *)(v6 + 527) = *(_DWORD *)(v6 + 527) & 0xFFFEFFFF | v9;
  if (nw_protocol_masque_listener_get_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_207);
  }
  uint64_t v10 = (void *)nw_protocol_masque_listener_get_definition(void)::definition;
  if (nw_protocol_masque_listener_get_definition(void)::definition) {
    uint64_t v10 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
  }
  singleton = nw_protocol_metadata_create_singleton(v10);
  *((void *)v6 + 58) = singleton;
  *(void *)__int16 v17 = MEMORY[0x1E4F143A8];
  *(void *)&v17[8] = 0x40000000;
  *(void *)&v17[16] = ___ZL32nw_masque_listener_set_callbacksP20nw_protocol_metadataPv_block_invoke;
  uint64_t v18 = (uint64_t)&__block_descriptor_tmp_63;
  uint64_t v19 = v6;
  nw_protocol_metadata_access_handle((uint64_t)singleton, (uint64_t)v17);
  return (BOOL)v6;
}

uint64_t ___ZL34nw_protocol_masque_listener_createPK22nw_protocol_identifierP9nw_objectP11nw_endpointP13nw_parameters_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

uint64_t ___ZL32nw_masque_listener_set_callbacksP20nw_protocol_metadataPv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 8));
  *(void *)a2 = *(void *)(a1 + 32);
  os_unfair_lock_unlock(v4);
  return 1;
}

void ___ZL41nw_protocol_masque_listener_get_callbacksv_block_invoke()
{
  qword_1E8F79558 = (uint64_t)nw_protocol_default_output_available;
  qword_1E8F795D0 = (uint64_t)nw_protocol_default_output_finished;
  qword_1E8F79618 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F79608 = (uint64_t)nw_protocol_default_get_message_properties;
  qword_1E8F79578 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F79590 = (uint64_t)nw_protocol_default_get_local;
  qword_1E8F79588 = (uint64_t)nw_protocol_default_get_path;
  qword_1E8F795B8 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F795E0 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F79610 = (uint64_t)nw_protocol_default_reset;
  qword_1E8F795A0 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F795A8 = (uint64_t)nw_protocol_default_unregister_notification;
  nw_protocol_masque_listener_get_callbacks(void)::g_masque_listener_callbacks = (uint64_t)nw_protocol_masque_listener_add_input_handler;
  qword_1E8F79520 = (uint64_t)nw_protocol_masque_replace_input_handler;
  qword_1E8F79518 = (uint64_t)nw_protocol_masque_remove_input_handler;
  qword_1E8F79528 = (uint64_t)nw_protocol_masque_connect;
  qword_1E8F79538 = (uint64_t)nw_protocol_masque_connected;
  qword_1E8F79530 = (uint64_t)nw_protocol_masque_disconnect;
  qword_1E8F79540 = (uint64_t)nw_protocol_masque_disconnected;
  qword_1E8F79548 = (uint64_t)nw_protocol_masque_error;
  qword_1E8F795C0 = (uint64_t)nw_protocol_masque_supports_external_data;
  qword_1E8F795E8 = (uint64_t)nw_protocol_masque_waiting_for_output;
  qword_1E8F79568 = (uint64_t)nw_protocol_masque_listener_get_output_frames;
  qword_1E8F79570 = (uint64_t)nw_protocol_masque_listener_finalize_output_frames;
  qword_1E8F79560 = (uint64_t)nw_protocol_masque_listener_get_input_frames;
  qword_1E8F79550 = (uint64_t)nw_protocol_masque_input_available;
  qword_1E8F795C8 = (uint64_t)nw_protocol_masque_input_finished;
  qword_1E8F79598 = (uint64_t)nw_protocol_masque_get_remote_endpoint;
  qword_1E8F79580 = (uint64_t)nw_protocol_masque_get_parameters;
  qword_1E8F795D8 = (uint64_t)nw_protocol_masque_get_output_local_endpoint;
  qword_1E8F795F0 = (uint64_t)nw_protocol_masque_copy_info;
  qword_1E8F795B0 = (uint64_t)nw_protocol_masque_notify;
  qword_1E8F795F8 = (uint64_t)nw_protocol_masque_add_listen_handler;
  qword_1E8F79600 = (uint64_t)nw_protocol_masque_remove_listen_handler;
}

uint64_t nw_protocol_masque_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((handle[529] & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        int v9 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446978;
          uint64_t v18 = "nw_protocol_masque_remove_listen_handler";
          __int16 v19 = 2082;
          uint64_t v20 = handle + 531;
          __int16 v21 = 2080;
          uint64_t v22 = " ";
          __int16 v23 = 2048;
          uint64_t v24 = a2;
          _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled with listen_protocol %p", buf, 0x2Au);
        }
      }
      if (*((nw_listen_protocol **)handle + 55) == a2)
      {
        *((void *)handle + 55) = 0;
        a2->protocol_handler = 0;
      }
      uint64_t result = 1;
      if ((handle[529] & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v10 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446722;
          uint64_t v18 = "nw_protocol_masque_remove_listen_handler";
          __int16 v19 = 2082;
          uint64_t v20 = handle + 531;
          __int16 v21 = 2080;
          uint64_t v22 = " ";
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sremoved protocol listen handler", buf, 0x20u);
        }
        return 1;
      }
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v18 = "nw_protocol_masque_remove_listen_handler";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v5, &type, &v15)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_protocol_masque_remove_listen_handler";
        uint64_t v8 = "%{public}s called with null masque";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (!v15)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_protocol_masque_remove_listen_handler";
        uint64_t v8 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v14 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_protocol_masque_remove_listen_handler";
        uint64_t v8 = "%{public}s called with null masque, no backtrace";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (v14)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v18 = "nw_protocol_masque_remove_listen_handler";
      __int16 v19 = 2082;
      uint64_t v20 = backtrace_string;
      BOOL v13 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v18 = "nw_protocol_masque_remove_listen_handler";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v5, &type, &v15)) {
    goto LABEL_46;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_protocol_masque_remove_listen_handler";
        uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_protocol_masque_remove_listen_handler";
        uint64_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (v12)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v18 = "nw_protocol_masque_remove_listen_handler";
      __int16 v19 = 2082;
      uint64_t v20 = backtrace_string;
      BOOL v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v6, v7, v13, buf, 0x16u);
    }
LABEL_36:
    free(backtrace_string);
    goto LABEL_46;
  }
  os_log_type_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)int buf = 136446210;
    uint64_t v18 = "nw_protocol_masque_remove_listen_handler";
    uint64_t v8 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
  }
LABEL_46:
  if (v5) {
    free(v5);
  }
  return 0;
}

BOOL nw_protocol_masque_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2, char a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v23 = "nw_protocol_masque_add_listen_handler";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20)) {
      goto LABEL_52;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_52;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v23 = "nw_protocol_masque_add_listen_handler";
        BOOL v13 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_51;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (!v16) {
          goto LABEL_52;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v23 = "nw_protocol_masque_add_listen_handler";
        BOOL v13 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_51;
      }
      if (v16)
      {
        *(_DWORD *)int buf = 136446466;
        __int16 v23 = "nw_protocol_masque_add_listen_handler";
        __int16 v24 = 2082;
        uint64_t v25 = backtrace_string;
        __int16 v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
        _os_log_impl(&dword_1830D4000, v11, v12, v17, buf, 0x16u);
      }
LABEL_38:
      free(backtrace_string);
      goto LABEL_52;
    }
    BOOL v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_52;
    }
    *(_DWORD *)int buf = 136446210;
    __int16 v23 = "nw_protocol_masque_add_listen_handler";
    BOOL v13 = "%{public}s called with null protocol";
LABEL_51:
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
LABEL_52:
    if (v10) {
      free(v10);
    }
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v23 = "nw_protocol_masque_add_listen_handler";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v23 = "nw_protocol_masque_add_listen_handler";
      BOOL v13 = "%{public}s called with null masque";
      goto LABEL_51;
    }
    if (!v20)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v23 = "nw_protocol_masque_add_listen_handler";
      BOOL v13 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v18 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446466;
        __int16 v23 = "nw_protocol_masque_add_listen_handler";
        __int16 v24 = 2082;
        uint64_t v25 = backtrace_string;
        __int16 v17 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    if (!v18) {
      goto LABEL_52;
    }
    *(_DWORD *)int buf = 136446210;
    __int16 v23 = "nw_protocol_masque_add_listen_handler";
    BOOL v13 = "%{public}s called with null masque, no backtrace";
    goto LABEL_51;
  }
  if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    BOOL v14 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446978;
      __int16 v23 = "nw_protocol_masque_add_listen_handler";
      __int16 v24 = 2082;
      uint64_t v25 = handle + 531;
      __int16 v26 = 2080;
      uint64_t v27 = " ";
      __int16 v28 = 2048;
      BOOL v29 = a2;
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled with listen_protocol %p", buf, 0x2Au);
    }
  }
  int v7 = *(_DWORD *)(handle + 527);
  if (*((void *)handle + 55))
  {
    if ((v7 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v8 = gprivacy_proxyLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)int buf = 136446466;
        __int16 v23 = handle + 531;
        __int16 v24 = 2080;
        uint64_t v25 = " ";
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s%salready have a listen handler, ignoring add", buf, 0x16u);
        return 0;
      }
      return result;
    }
    return 0;
  }
  if ((v7 & 0x10000) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    __int16 v19 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446722;
      __int16 v23 = "nw_protocol_masque_add_listen_handler";
      __int16 v24 = 2082;
      uint64_t v25 = handle + 531;
      __int16 v26 = 2080;
      uint64_t v27 = " ";
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sadded protocol listen handler", buf, 0x20u);
    }
  }
  *((void *)handle + 55) = a2;
  a2->protocol_handler = a1;
  if (a3) {
    nw_protocol_remove_instance((uint64_t)a1);
  }
  return 1;
}

void nw_protocol_masque_notify(nw_protocol *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v42 = "nw_protocol_masque_notify";
    __int16 v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v28, &type, &v39)) {
      goto LABEL_103;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_103;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v42 = "nw_protocol_masque_notify";
      __int16 v31 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v33 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v42 = "nw_protocol_masque_notify";
          __int16 v43 = 2082;
          uint64_t v44 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_103:
        if (!v28) {
          return;
        }
        goto LABEL_104;
      }
      if (!v33) {
        goto LABEL_103;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v42 = "nw_protocol_masque_notify";
      __int16 v31 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_103;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v42 = "nw_protocol_masque_notify";
      __int16 v31 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_102;
  }
  uint64_t handle = (uint64_t)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v42 = "nw_protocol_masque_notify";
    __int16 v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v28, &type, &v39)) {
      goto LABEL_103;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v39)
      {
        BOOL v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (!os_log_type_enabled(v29, type)) {
          goto LABEL_103;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v42 = "nw_protocol_masque_notify";
        __int16 v31 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_102;
      }
      int v34 = (char *)__nw_create_backtrace_string();
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v35 = os_log_type_enabled(v29, type);
      if (!v34)
      {
        if (!v35) {
          goto LABEL_103;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v42 = "nw_protocol_masque_notify";
        __int16 v31 = "%{public}s called with null masque, no backtrace";
        goto LABEL_102;
      }
      if (v35)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v42 = "nw_protocol_masque_notify";
        __int16 v43 = 2082;
        uint64_t v44 = v34;
        uint64_t v36 = "%{public}s called with null masque, dumping backtrace:%{public}s";
LABEL_87:
        _os_log_impl(&dword_1830D4000, v29, v30, v36, buf, 0x16u);
      }
LABEL_88:
      free(v34);
      if (!v28) {
        return;
      }
LABEL_104:
      free(v28);
      return;
    }
    BOOL v29 = __nwlog_obj();
    os_log_type_t v30 = type;
    if (!os_log_type_enabled(v29, type)) {
      goto LABEL_103;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v42 = "nw_protocol_masque_notify";
    __int16 v31 = "%{public}s called with null masque";
LABEL_102:
    _os_log_impl(&dword_1830D4000, v29, v30, v31, buf, 0xCu);
    goto LABEL_103;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v42 = "nw_protocol_masque_notify";
    __int16 v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v28, &type, &v39)) {
      goto LABEL_103;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_103;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v42 = "nw_protocol_masque_notify";
      __int16 v31 = "%{public}s called with null other_protocol";
      goto LABEL_102;
    }
    if (!v39)
    {
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_103;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v42 = "nw_protocol_masque_notify";
      __int16 v31 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_102;
    }
    int v34 = (char *)__nw_create_backtrace_string();
    BOOL v29 = __nwlog_obj();
    os_log_type_t v30 = type;
    BOOL v37 = os_log_type_enabled(v29, type);
    if (!v34)
    {
      if (!v37) {
        goto LABEL_103;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v42 = "nw_protocol_masque_notify";
      __int16 v31 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_102;
    }
    if (v37)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v42 = "nw_protocol_masque_notify";
      __int16 v43 = 2082;
      uint64_t v44 = v34;
      uint64_t v36 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_87;
    }
    goto LABEL_88;
  }
  if ((*(unsigned char *)(handle + 529) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    os_log_type_t v6 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      if (a3 > 0x1A) {
        int v7 = "unknown";
      }
      else {
        int v7 = off_1E5241E58[a3];
      }
      *(_DWORD *)int buf = 136446978;
      os_log_type_t v42 = "nw_protocol_masque_notify";
      __int16 v43 = 2082;
      uint64_t v44 = (const char *)(handle + 531);
      __int16 v45 = 2080;
      int v46 = " ";
      __int16 v47 = 2082;
      uint64_t v48 = v7;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreceived notification %{public}s", buf, 0x2Au);
    }
  }
  switch(a3)
  {
    case 5u:
      uint64_t secondary_certificate_count = nw_http_connection_metadata_get_secondary_certificate_count(*(void **)(handle + 456));
      int v17 = *(_DWORD *)(handle + 516);
      if (v17 != 1 || secondary_certificate_count == 0)
      {
        if (v17) {
          BOOL v19 = 1;
        }
        else {
          BOOL v19 = secondary_certificate_count == 0;
        }
        if (!v19 && *(_DWORD *)(handle + 508) == 2 && (*(unsigned char *)(handle + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          char v20 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v42 = (const char *)(handle + 531);
            __int16 v43 = 2080;
            uint64_t v44 = " ";
            _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_INFO, "%{public}s%sHave secondary certificates, not utilizing without rejection from proxy", buf, 0x16u);
          }
        }
      }
      else
      {
        if ((*(unsigned char *)(handle + 529) & 1) == 0 && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          int v38 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446722;
            os_log_type_t v42 = "nw_protocol_masque_notify";
            __int16 v43 = 2082;
            uint64_t v44 = (const char *)(handle + 531);
            __int16 v45 = 2080;
            int v46 = " ";
            _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMASQUE waiting for secondary certs, checking to reverse proxy", buf, 0x20u);
          }
        }
        if (nw_masque_setup_reverse_proxy(handle)) {
          return;
        }
      }
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        callbacks = default_input_handler->callbacks;
        if (callbacks)
        {
          notify = (void (*)(void))callbacks->notify;
          if (notify) {
            goto LABEL_60;
          }
        }
      }
      return;
    case 7u:
    case 0x15u:
      return;
    case 0xDu:
      nw_masque_report_error_to_proxy_agent(handle, 1302);
      uint64_t output_handler = a1->output_handler;
      if (output_handler)
      {
        uint64_t v25 = output_handler->callbacks;
        if (v25)
        {
          notify = (void (*)(void))v25->notify;
          if (notify) {
            goto LABEL_60;
          }
        }
      }
      return;
    case 0x12u:
    case 0x18u:
      uint64_t v8 = *(void *)(handle + 432);
      if (!v8 || !*(void *)(handle + 384) || !*(void *)(handle + 392)) {
        goto LABEL_46;
      }
      nw_protocol_masque_reset_demux_protocol(a1);
      if (v8 != *(void *)(handle + 432))
      {
        int v9 = *(void **)(handle + 424);
        if (v9)
        {
          os_release(v9);
          *(void *)(handle + 424) = 0;
        }
        *(_DWORD *)(handle + 527) &= ~0x20000u;
        uint64_t v10 = *(void *)(handle + 160);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 24);
          if (v11)
          {
            os_log_type_t v12 = *(void (**)(void))(v11 + 8);
            if (v12) {
              v12();
            }
          }
        }
        uint64_t v13 = *(void *)(handle + 224);
        if (v13)
        {
          uint64_t v14 = *(void *)(v13 + 24);
          if (v14)
          {
            char v15 = *(void (**)(void))(v14 + 8);
            if (v15) {
              v15();
            }
          }
        }
        nw_masque_setup_demux(handle, 1);
        nw_masque_setup_demux(handle, 0);
      }
      return;
    default:
      if (a3 - 15 > 1)
      {
LABEL_46:
        __int16 v21 = a1->default_input_handler;
        if (!v21) {
          return;
        }
      }
      else
      {
        __int16 v21 = a1->output_handler;
        if (!v21) {
          return;
        }
      }
      uint64_t v22 = v21->callbacks;
      if (v22)
      {
        notify = (void (*)(void))v22->notify;
        if (notify) {
LABEL_60:
        }
          notify();
      }
      return;
  }
}

void nw_protocol_masque_reset_demux_protocol(nw_protocol *a1)
{
  v25[3] = *MEMORY[0x1E4F143B8];
  uint64_t handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_reset_demux_protocol";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v13, &type, &v21)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_reset_demux_protocol";
      BOOL v16 = "%{public}s called with null masque";
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_masque_reset_demux_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_48;
      }
      if (!v18)
      {
LABEL_48:
        if (v13) {
          free(v13);
        }
        return;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_reset_demux_protocol";
      BOOL v16 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_reset_demux_protocol";
      BOOL v16 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
    goto LABEL_48;
  }
  uint64_t output_handler = a1->output_handler;
  if (!output_handler) {
    return;
  }
  int v3 = 0;
  while (1)
  {
    identifier = output_handler->identifier;
    if (nw_protocol_demux_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_demux_identifier::onceToken, &__block_literal_global_25983);
    }
    if (nw_protocols_are_equal(identifier, &g_demux_protocol_identifier)) {
      break;
    }
    name = output_handler->identifier->name;
    if (!strcmp(name, "quic"))
    {
      if (v3) {
        return;
      }
      int v3 = 1;
      uint64_t output_handler = output_handler->output_handler;
      if (!output_handler) {
        return;
      }
    }
    else
    {
      BOOL v6 = strcmp(name, "quic-connection") == 0;
      if (v6 & v3) {
        return;
      }
      v3 |= v6;
      uint64_t output_handler = output_handler->output_handler;
      if (!output_handler) {
        return;
      }
    }
  }
  if (v3)
  {
    *((void *)handle + 54) = output_handler;
    if ((handle[529] & 1) == 0 && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      BOOL v19 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_masque_reset_demux_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 531;
        *(_WORD *)&unsigned char buf[22] = 2080;
        __int16 v24 = " ";
        LOWORD(v25[0]) = 2048;
        *(void *)((char *)v25 + 2) = output_handler;
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound demux protocol %p", buf, 0x2Au);
      }
    }
    id v7 = nw_parameters_copy_channel_demux_options(*((void **)handle + 40));
    if (v7)
    {
      uint64_t v8 = v7;
      if (nw_protocol_demux_copy_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
      }
      if (nw_protocol_demux_copy_definition::definition)
      {
        int v9 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
        BOOL v10 = nw_protocol_options_matches_definition(v8, v9);
        BOOL v11 = v10;
        if (v9)
        {
          os_release(v9);
          if (!v11) {
            return;
          }
        }
        else if (!v10)
        {
          return;
        }
      }
      else if (!nw_protocol_options_matches_definition(v8, 0))
      {
        return;
      }
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 0x40000000;
      v20[2] = ___ZL39nw_protocol_masque_reset_demux_protocolP11nw_protocol_block_invoke;
      v20[3] = &__block_descriptor_tmp_77_27390;
      void v20[4] = handle;
      void v20[5] = v8;
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = __nw_demux_options_enumerate_patterns_block_invoke;
      __int16 v24 = (const char *)&unk_1E523DFE8;
      v25[0] = v20;
      nw_protocol_options_access_handle(v8, buf);
    }
  }
  else if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    os_log_type_t v12 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_reset_demux_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = handle + 531;
      *(_WORD *)&unsigned char buf[22] = 2080;
      __int16 v24 = " ";
      LOWORD(v25[0]) = 2048;
      *(void *)((char *)v25 + 2) = output_handler;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound demux protocol %p, but no QUIC found. Ignoring.", buf, 0x2Au);
    }
  }
}

uint64_t nw_masque_setup_demux(uint64_t a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v21 = "nw_masque_setup_demux";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v12, &type, &v18)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)int buf = 136446210;
      char v21 = "nw_masque_setup_demux";
      os_log_type_t v15 = "%{public}s called with null masque";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          char v21 = "nw_masque_setup_demux";
          __int16 v22 = 2082;
          __int16 v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_43;
      }
      if (!v17)
      {
LABEL_43:
        if (v12) {
          free(v12);
        }
        return 0;
      }
      *(_DWORD *)int buf = 136446210;
      char v21 = "nw_masque_setup_demux";
      os_log_type_t v15 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)int buf = 136446210;
      char v21 = "nw_masque_setup_demux";
      os_log_type_t v15 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_43;
  }
  if ((*(unsigned char *)(a1 + 530) & 2) != 0) {
    return 1;
  }
  uint64_t result = *(void *)(a1 + 432);
  if (!result) {
    return result;
  }
  if (a2)
  {
    if (*(void *)(a1 + 384)) {
      goto LABEL_9;
    }
  }
  else if (*(void *)(a1 + 392))
  {
    goto LABEL_9;
  }
  if (!*(void *)(a1 + 448)) {
    return 0;
  }
LABEL_9:
  uint64_t v5 = *(uint64_t (***)(void))(result + 24);
  if (!v5) {
    return 0;
  }
  BOOL v6 = *v5;
  if (!v6) {
    return 0;
  }
  char v7 = v6();
  int v8 = *(_DWORD *)(a1 + 527);
  if ((v7 & 1) == 0)
  {
    if ((v8 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      BOOL v11 = gprivacy_proxyLogObj;
      uint64_t result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_DWORD *)int buf = 136446466;
      char v21 = (const char *)(a1 + 531);
      __int16 v22 = 2080;
      __int16 v23 = " ";
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s%sFailed to add demux protocol", buf, 0x16u);
    }
    return 0;
  }
  uint64_t result = 1;
  if ((v8 & 0x10000) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    int v9 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446978;
      char v21 = "nw_masque_setup_demux";
      __int16 v22 = 2082;
      __int16 v23 = (const char *)(a1 + 531);
      __int16 v24 = 2080;
      uint64_t v25 = " ";
      if (a2) {
        BOOL v10 = "input";
      }
      else {
        BOOL v10 = "output";
      }
      __int16 v26 = 2082;
      uint64_t v27 = v10;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAdded %{public}s demux protocol", buf, 0x2Au);
    }
    return 1;
  }
  return result;
}

uint64_t nw_masque_setup_reverse_proxy(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (!nw_http_connection_metadata_get_secondary_certificate_count(*(void **)(a1 + 456))) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 527);
  if ((v2 & 0x1000000) == 0)
  {
    if ((v2 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      int v3 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = a1 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = " ";
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s%sHave certificates, but no HTTP in the stack identified for forwarding", buf, 0x16u);
      }
    }
    return 0;
  }
  uint64_t v5 = a1;
  while (1)
  {
    BOOL v6 = *(void **)(v5 + 16);
    if (nw_protocol_http_messaging_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_77555);
    }
    BOOL v7 = nw_protocols_are_equal(v6, nw_protocol_http_messaging_identifier::protocol_identifier);
    if (v7) {
      break;
    }
    uint64_t v5 = *(void *)(v5 + 48);
    if (!v5) {
      goto LABEL_17;
    }
  }
  if ((*(unsigned char *)(a1 + 529) & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v40 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_masque_setup_reverse_proxy";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 531;
      *(_WORD *)&unsigned char buf[22] = 2080;
      BOOL v51 = " ";
      __int16 v52 = 2048;
      uint64_t v53 = v5;
      _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound HTTP Messaging protocol %p", buf, 0x2Au);
    }
  }
LABEL_17:
  char v8 = !v7;
  uint64_t v9 = a1;
  do
  {
    uint64_t v9 = *(void *)(v9 + 32);
    if (!v9)
    {
      uint64_t v11 = 0;
      goto LABEL_27;
    }
    BOOL v10 = *(void **)(v9 + 16);
    if (nw_protocol_http3_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_13_62491);
    }
  }
  while (!nw_protocols_are_equal(v10, &nw_protocol_http3_identifier::http3_protocol_identifier));
  if ((*(unsigned char *)(a1 + 529) & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v41 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_masque_setup_reverse_proxy";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 531;
      *(_WORD *)&unsigned char buf[22] = 2080;
      BOOL v51 = " ";
      __int16 v52 = 2048;
      uint64_t v53 = v9;
      _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound HTTP protocol %p", buf, 0x2Au);
    }
  }
  uint64_t v11 = v9;
LABEL_27:
  os_log_type_t v12 = *(void **)(a1 + 320);
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
  }
  uint64_t v13 = nw_parameters_copy_protocol_options_for_definition(v12, (id)nw_protocol_copy_http_messaging_definition_definition);
  os_log_type_t v14 = v13;
  if (v9) {
    char v15 = v8;
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) == 0 && v13)
  {
    BOOL v16 = *(void **)(a1 + 312);
    if (!v16)
    {
      if ((*(unsigned char *)(a1 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        int v34 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = a1 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = " ";
          _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_ERROR, "%{public}s%sNo target endpoint, not attempting to reverse proxy", buf, 0x16u);
        }
      }
      uint64_t v4 = 0;
      goto LABEL_74;
    }
    BOOL v17 = v16;
    char v18 = (const char *)[v17 hostname];

    unsigned int port = nw_endpoint_get_port(*(nw_endpoint_t *)(a1 + 304));
    host_with_numeric_unsigned int port = nw_endpoint_create_host_with_numeric_port(v18, port);
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    LOBYTE(v51) = 0;
    char v21 = *(void **)(a1 + 456);
    v43[0] = MEMORY[0x1E4F143A8];
    v43[1] = 0x40000000;
    v43[2] = ___ZL29nw_masque_setup_reverse_proxyP9nw_masque_block_invoke;
    v43[3] = &unk_1E523E720;
    v43[5] = a1;
    v43[6] = host_with_numeric_port;
    v43[4] = buf;
    nw_http_connection_metadata_enumerate_secondary_certificates(v21, v43);
    if (host_with_numeric_port) {
      os_release((void *)host_with_numeric_port);
    }
    int v22 = *(_DWORD *)(a1 + 527);
    if (*(unsigned char *)(*(void *)&buf[8] + 24))
    {
      if ((v22 & 0x10000) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        __int16 v23 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
        {
          __int16 v24 = v17;
          uint64_t v25 = [v24 hostname];

          *(_DWORD *)uint64_t v44 = 136446722;
          uint64_t v45 = a1 + 531;
          __int16 v46 = 2080;
          __int16 v47 = " ";
          __int16 v48 = 2080;
          uint64_t v49 = v25;
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_INFO, "%{public}s%sFound secondary certificate for %s, attempting TLS termination and restart for reverse proxy", v44, 0x20u);
        }
      }
      uint64_t v26 = *(void *)(a1 + 352);
      if (v26)
      {
        nw_queue_cancel_source(v26);
        *(void *)(a1 + 352) = 0;
      }
      uint64_t v27 = nw_protocol_copy_info(v11, 253);
      if (nw_http_messaging_options_override_version_specific_protocol(v14, v11, *(void **)(a1 + 456)) || v27)
      {
        uint64_t v37 = *(void *)(a1 + 496);
        int v38 = *(void **)(a1 + 328);
        v42[0] = MEMORY[0x1E4F143A8];
        v42[1] = 0x40000000;
        v42[2] = ___ZL29nw_masque_setup_reverse_proxyP9nw_masque_block_invoke_75;
        void v42[3] = &unk_1E523E748;
        v42[4] = v37;
        nw_queue_context_async(v38, v42);
        uint64_t v4 = 1;
        goto LABEL_73;
      }
      if (*(unsigned char *)(a1 + 529)) {
        goto LABEL_71;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v28 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
LABEL_71:
        uint64_t v4 = 0;
LABEL_73:
        _Block_object_dispose(buf, 8);
LABEL_74:
        os_release(v14);
        return v4;
      }
      *(_DWORD *)uint64_t v44 = 136446466;
      uint64_t v45 = a1 + 531;
      __int16 v46 = 2080;
      __int16 v47 = " ";
      BOOL v29 = "%{public}s%sFailed to override persistent stack HTTP with reverse-proxying HTTP";
      os_log_type_t v30 = v28;
      os_log_type_t v31 = OS_LOG_TYPE_ERROR;
      uint32_t v32 = 22;
    }
    else
    {
      if ((v22 & 0x10000) != 0) {
        goto LABEL_71;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v35 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_71;
      }
      hostname = nw_endpoint_get_hostname(v17);
      *(_DWORD *)uint64_t v44 = 136446722;
      uint64_t v45 = a1 + 531;
      __int16 v46 = 2080;
      __int16 v47 = " ";
      __int16 v48 = 2080;
      uint64_t v49 = (uint64_t)hostname;
      BOOL v29 = "%{public}s%sNo matching secondary certificates found for %s, not reverse-proxying";
      os_log_type_t v30 = v35;
      os_log_type_t v31 = OS_LOG_TYPE_INFO;
      uint32_t v32 = 32;
    }
    _os_log_impl(&dword_1830D4000, v30, v31, v29, v44, v32);
    goto LABEL_71;
  }
  if ((*(unsigned char *)(a1 + 529) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    BOOL v33 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = a1 + 531;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = " ";
      _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_ERROR, "%{public}s%sFailed to find HTTP protocol, proceeding without attempting to reverse proxy", buf, 0x16u);
    }
  }
  uint64_t v4 = 0;
  if (v14) {
    goto LABEL_74;
  }
  return v4;
}

void sub_183834A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_masque_report_error_to_proxy_agent(uint64_t a1, int a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v22 = "nw_masque_report_error_to_proxy_agent";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    uu[0] = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v12, uu, &v20)) {
      goto LABEL_46;
    }
    if (uu[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = uu[0];
      if (!os_log_type_enabled(v13, uu[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      int v22 = "nw_masque_report_error_to_proxy_agent";
      char v15 = "%{public}s called with null masque";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = uu[0];
      BOOL v17 = os_log_type_enabled(v13, uu[0]);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          int v22 = "nw_masque_report_error_to_proxy_agent";
          __int16 v23 = 2082;
          __int16 v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_46:
        if (!v12) {
          return;
        }
LABEL_47:
        free(v12);
        return;
      }
      if (!v17) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      int v22 = "nw_masque_report_error_to_proxy_agent";
      char v15 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = uu[0];
      if (!os_log_type_enabled(v13, uu[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      int v22 = "nw_masque_report_error_to_proxy_agent";
      char v15 = "%{public}s called with null masque, backtrace limit exceeded";
    }
LABEL_45:
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_46;
  }
  int v3 = *(void **)(a1 + 320);
  if (v3)
  {
    memset(uu, 0, 16);
    uint64_t v5 = v3;
    id v6 = v5[23];

    if (v6)
    {
      BOOL v7 = (char *)v6;
      *(_OWORD *)uu = *(_OWORD *)(v7 + 56);

      os_release(v7);
    }
    int is_null = uuid_is_null((const unsigned __int8 *)uu);
    int v9 = *(_DWORD *)(a1 + 527);
    if (is_null)
    {
      if ((v9 & 0x10000) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        BOOL v10 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446722;
          int v22 = (const char *)(a1 + 531);
          __int16 v23 = 2080;
          __int16 v24 = " ";
          __int16 v25 = 1024;
          int v26 = a2;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s%sCannot report error %d, no proxy agent", buf, 0x1Cu);
        }
      }
    }
    else
    {
      if ((v9 & 0x10000) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v11 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)int buf = 136447234;
          int v22 = (const char *)(a1 + 531);
          __int16 v23 = 2080;
          __int16 v24 = " ";
          __int16 v25 = 1024;
          int v26 = a2;
          __int16 v27 = 1042;
          int v28 = 16;
          __int16 v29 = 2098;
          os_log_type_t v30 = (unsigned __int8 *)uu;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s%sReporting error %d to proxy agent %{public, uuid_t}.16P", buf, 0x2Cu);
        }
      }
      nw_path_report_error_to_agent(*(void **)(a1 + 336), (const unsigned __int8 *)uu, a2);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  int v22 = "nw_masque_report_error_to_proxy_agent";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
  uu[0] = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v12, uu, &v20)) {
    goto LABEL_46;
  }
  if (uu[0] == OS_LOG_TYPE_FAULT)
  {
    uint64_t v13 = __nwlog_obj();
    os_log_type_t v14 = uu[0];
    if (!os_log_type_enabled(v13, uu[0])) {
      goto LABEL_46;
    }
    *(_DWORD *)int buf = 136446210;
    int v22 = "nw_masque_report_error_to_proxy_agent";
    char v15 = "%{public}s called with null masque->parameters";
    goto LABEL_45;
  }
  if (!v20)
  {
    uint64_t v13 = __nwlog_obj();
    os_log_type_t v14 = uu[0];
    if (!os_log_type_enabled(v13, uu[0])) {
      goto LABEL_46;
    }
    *(_DWORD *)int buf = 136446210;
    int v22 = "nw_masque_report_error_to_proxy_agent";
    char v15 = "%{public}s called with null masque->parameters, backtrace limit exceeded";
    goto LABEL_45;
  }
  char v18 = (char *)__nw_create_backtrace_string();
  uint64_t v13 = __nwlog_obj();
  os_log_type_t v14 = uu[0];
  BOOL v19 = os_log_type_enabled(v13, uu[0]);
  if (!v18)
  {
    if (!v19) {
      goto LABEL_46;
    }
    *(_DWORD *)int buf = 136446210;
    int v22 = "nw_masque_report_error_to_proxy_agent";
    char v15 = "%{public}s called with null masque->parameters, no backtrace";
    goto LABEL_45;
  }
  if (v19)
  {
    *(_DWORD *)int buf = 136446466;
    int v22 = "nw_masque_report_error_to_proxy_agent";
    __int16 v23 = 2082;
    __int16 v24 = v18;
    _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null masque->parameters, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v18);
  if (v12) {
    goto LABEL_47;
  }
}

uint64_t ___ZL29nw_masque_setup_reverse_proxyP9nw_masque_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 40);
  if ((!v4 || (*(unsigned char *)(v4 + 529) & 1) == 0) && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    BOOL v7 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      BOOL v9 = v8 == 0;
      if (v8) {
        BOOL v10 = (const char *)(v8 + 531);
      }
      else {
        BOOL v10 = "";
      }
      int v12 = 136446978;
      uint64_t v13 = "nw_masque_setup_reverse_proxy_block_invoke";
      __int16 v14 = 2082;
      char v15 = v10;
      if (v9) {
        uint64_t v11 = "";
      }
      else {
        uint64_t v11 = " ";
      }
      __int16 v16 = 2080;
      BOOL v17 = v11;
      __int16 v18 = 2112;
      BOOL v19 = a2;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sChecking secondary certificate %@ to join for reverse-proxying", (uint8_t *)&v12, 0x2Au);
    }
  }
  int is_equal = nw_endpoint_is_equal(a2, *(void **)(a1 + 48), 0);
  if (is_equal) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return is_equal ^ 1u;
}

void ___ZL29nw_masque_setup_reverse_proxyP9nw_masque_block_invoke_75(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v1)
  {
    uint64_t v2 = v1;
    if ((*(unsigned char *)(v1 + 529) & 1) == 0 && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      int v3 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v4 = 136446722;
        uint64_t v5 = "nw_masque_setup_reverse_proxy_block_invoke";
        __int16 v6 = 2082;
        uint64_t v7 = v2 + 531;
        __int16 v8 = 2080;
        BOOL v9 = " ";
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRestarting HTTP request stack for reverse proxy", (uint8_t *)&v4, 0x20u);
      }
    }
    nw_protocol_notify(*(void **)(v2 + 48), v2, 25);
  }
}

BOOL ___ZL39nw_protocol_masque_reset_demux_protocolP11nw_protocol_block_invoke(uint64_t a1, int a2)
{
  if (a2) {
    *(void *)(*(void *)(a1 + 32) + 448) = nw_protocol_options_copy(*(void **)(a1 + 40));
  }
  return a2 == 0;
}

uint64_t nw_protocol_masque_copy_info(uint64_t a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v26 = "nw_protocol_masque_copy_info";
    char v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v15, &type, &v23)) {
      goto LABEL_58;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v23)
      {
        __int16 v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_58;
        }
        *(_DWORD *)int buf = 136446210;
        int v26 = "nw_protocol_masque_copy_info";
        __int16 v18 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_57;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (!v20) {
          goto LABEL_58;
        }
        *(_DWORD *)int buf = 136446210;
        int v26 = "nw_protocol_masque_copy_info";
        __int16 v18 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_57;
      }
      if (v20)
      {
        *(_DWORD *)int buf = 136446466;
        int v26 = "nw_protocol_masque_copy_info";
        __int16 v27 = 2082;
        int v28 = backtrace_string;
        char v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_47:
        _os_log_impl(&dword_1830D4000, v16, v17, v21, buf, 0x16u);
      }
LABEL_48:
      free(backtrace_string);
      goto LABEL_58;
    }
    __int16 v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    if (!os_log_type_enabled(v16, type)) {
      goto LABEL_58;
    }
    *(_DWORD *)int buf = 136446210;
    int v26 = "nw_protocol_masque_copy_info";
    __int16 v18 = "%{public}s called with null protocol";
LABEL_57:
    _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
LABEL_58:
    if (v15) {
      free(v15);
    }
    return 0;
  }
  uint64_t v2 = *(unint64_t **)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v26 = "nw_protocol_masque_copy_info";
    char v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v15, &type, &v23)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_58;
      }
      *(_DWORD *)int buf = 136446210;
      int v26 = "nw_protocol_masque_copy_info";
      __int16 v18 = "%{public}s called with null masque";
      goto LABEL_57;
    }
    if (!v23)
    {
      __int16 v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_58;
      }
      *(_DWORD *)int buf = 136446210;
      int v26 = "nw_protocol_masque_copy_info";
      __int16 v18 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v22 = os_log_type_enabled(v16, type);
    if (backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)int buf = 136446466;
        int v26 = "nw_protocol_masque_copy_info";
        __int16 v27 = 2082;
        int v28 = backtrace_string;
        char v21 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    if (!v22) {
      goto LABEL_58;
    }
    *(_DWORD *)int buf = 136446210;
    int v26 = "nw_protocol_masque_copy_info";
    __int16 v18 = "%{public}s called with null masque, no backtrace";
    goto LABEL_57;
  }
  if (a2 == 254)
  {
    if (v2[37])
    {
      uint64_t v7 = *(void *)(a1 + 32);
      if (!v7 || (__int16 v8 = *(uint64_t (**)(void))(*(void *)(v7 + 24) + 224)) == 0 || (v4 = v8()) == 0) {
        uint64_t v4 = nw_array_create();
      }
      if (nw_protocol_masque_get_definition(void)::onceToken != -1) {
        dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27403);
      }
      if (nw_protocol_masque_get_definition(void)::definition
        && (BOOL v9 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition)) != 0)
      {
        uint64_t v10 = os_retain(v9);
      }
      else
      {
        uint64_t v10 = 0;
      }
      __int16 v14 = nw_protocol_establishment_report_create(v10, v2[37], v2[37]);
      nw_array_append(v4, v14);
      if (v14) {
        os_release(v14);
      }
      if (v10) {
        os_release(v10);
      }
      return v4;
    }
  }
  else if (a2 == 255)
  {
    if (v2[58] || v2[59])
    {
      BOOL v3 = nw_array_create();
      uint64_t v4 = v3;
      uint64_t v5 = (void *)v2[59];
      if (v5) {
        nw_array_append(v3, v5);
      }
      __int16 v6 = (void *)v2[58];
      if (v6) {
        nw_array_append(v4, v6);
      }
      return v4;
    }
    return 0;
  }
  uint64_t v11 = *(void *)(a1 + 32);
  if (!v11) {
    return 0;
  }
  int v12 = *(uint64_t (**)(void))(*(void *)(v11 + 24) + 224);
  if (!v12) {
    return 0;
  }

  return v12();
}

BOOL ___ZL33nw_protocol_masque_get_definitionv_block_invoke()
{
  if (nw_protocol_masque_identifier(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_identifier(void)::onceToken, &__block_literal_global_42);
  }
  nw_protocol_masque_get_definition(void)::nw_protocol_definition_t definition = (uint64_t)nw_protocol_definition_create_with_identifier((long long *)nw_protocol_masque_identifier(void)::g_masque_protocol_identifier);
  nw_protocol_definition_set_is_proxy((void *)nw_protocol_masque_get_definition(void)::definition);
  nw_protocol_definition_set_globals_allocator((void *)nw_protocol_masque_get_definition(void)::definition, nw_masque_allocate_globals, nw_masque_deallocate_globals);
  nw_protocol_definition_set_options_allocator((void *)nw_protocol_masque_get_definition(void)::definition, (uint64_t)nw_masque_allocate_options, (uint64_t)nw_masque_copy_options, (uint64_t)nw_masque_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_masque_get_definition(void)::definition, (uint64_t)nw_masque_option_is_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_masque_get_definition(void)::definition, 0, (uint64_t)nw_masque_serialize_options, (uint64_t)nw_masque_deserialize_options);
  nw_protocol_definition_set_metadata_allocator((void *)nw_protocol_masque_get_definition(void)::definition, (uint64_t)nw_masque_allocate_metadata, (uint64_t)nw_masque_deallocate_metadata);
  nw_protocol_definition_set_metadata_comparator((void *)nw_protocol_masque_get_definition(void)::definition, (uint64_t)nw_masque_compare_metadata);
  id v0 = (void *)nw_protocol_masque_get_definition(void)::definition;

  return nw_protocol_register_handle((uint64_t)nw_protocol_masque_identifier(void)::g_masque_protocol_identifier, v0, (uint64_t)nw_protocol_masque_create, 0);
}

BOOL nw_protocol_masque_create(const nw_protocol_identifier *a1, nw_object *a2, nw_endpoint *a3, nw_parameters *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 8uLL, 0x270uLL, 0x68FF3B34uLL) || (__int16 v6 = (char *)memptr) == 0)
  {
    int v12 = __nwlog_obj();
    os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__int16 v16 = 136446722;
    *(void *)&void v16[4] = "strict_memalign";
    *(_WORD *)&v16[12] = 2048;
    *(void *)&v16[14] = 8;
    *(_WORD *)&v16[22] = 2048;
    uint64_t v17 = 624;
    uint64_t v13 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v13);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v13);
    __int16 v6 = (char *)memptr;
  }
  bzero(v6, 0x270uLL);
  *(void *)__int16 v16 = 0;
  *(void *)&v16[8] = v16;
  *(void *)&v16[16] = 0x2000000000;
  uint64_t v17 = (uint64_t)v6;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZL25nw_protocol_masque_createPK22nw_protocol_identifierP9nw_objectP11nw_endpointP13nw_parameters_block_invoke;
  aBlock[3] = &unk_1E523E5C0;
  void aBlock[4] = v16;
  *((void *)v6 + 62) = _Block_copy(aBlock);
  _Block_object_dispose(v16, 8);
  if (nw_protocol_masque_identifier(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_identifier(void)::onceToken, &__block_literal_global_42);
  }
  *((void *)v6 + 2) = nw_protocol_masque_identifier(void)::g_masque_protocol_identifier;
  if (nw_protocol_masque_get_callbacks(void)::onceToken[0] != -1) {
    dispatch_once(nw_protocol_masque_get_callbacks(void)::onceToken, &__block_literal_global_48);
  }
  *((void *)v6 + 3) = &nw_protocol_masque_get_callbacks(void)::g_masque_protocol_callbacks;
  *((void *)v6 + 5) = v6;
  if (nw_protocol_masque_identifier(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_identifier(void)::onceToken, &__block_literal_global_42);
  }
  *((void *)v6 + 18) = nw_protocol_masque_identifier(void)::g_masque_protocol_identifier;
  if (nw_protocol_masque_get_callbacks(void)::onceToken[0] != -1) {
    dispatch_once(nw_protocol_masque_get_callbacks(void)::onceToken, &__block_literal_global_48);
  }
  *((void *)v6 + 19) = &nw_protocol_masque_get_callbacks(void)::g_masque_protocol_callbacks;
  *((void *)v6 + 21) = v6;
  if (nw_protocol_masque_identifier(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_identifier(void)::onceToken, &__block_literal_global_42);
  }
  *((void *)v6 + 26) = nw_protocol_masque_identifier(void)::g_masque_protocol_identifier;
  if (nw_protocol_masque_get_callbacks(void)::onceToken[0] != -1) {
    dispatch_once(nw_protocol_masque_get_callbacks(void)::onceToken, &__block_literal_global_48);
  }
  *((void *)v6 + 27) = &nw_protocol_masque_get_callbacks(void)::g_masque_protocol_callbacks;
  *((void *)v6 + 29) = v6;
  if (nw_protocol_masque_identifier(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_identifier(void)::onceToken, &__block_literal_global_42);
  }
  *((void *)v6 + 10) = nw_protocol_masque_identifier(void)::g_masque_protocol_identifier;
  if (nw_protocol_masque_get_callbacks(void)::onceToken[0] != -1) {
    dispatch_once(nw_protocol_masque_get_callbacks(void)::onceToken, &__block_literal_global_48);
  }
  *((void *)v6 + 11) = &nw_protocol_masque_get_callbacks(void)::g_masque_protocol_callbacks;
  *((void *)v6 + 13) = v6;
  *((void *)v6 + 32) = 0;
  *((void *)v6 + 33) = v6 + 256;
  if (a3) {
    uint64_t v7 = os_retain(a3);
  }
  else {
    uint64_t v7 = 0;
  }
  *((void *)v6 + 38) = v7;
  *((_DWORD *)v6 + 128) = 0;
  *((void *)v6 + 63) = 1;
  if (nw_parameters_get_logging_disabled((uint64_t)a4)) {
    int v8 = 0x10000;
  }
  else {
    int v8 = 0;
  }
  *(_DWORD *)(v6 + 527) = *(_DWORD *)(v6 + 527) & 0xFFFEFFFF | v8;
  if (nw_protocol_masque_get_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27403);
  }
  BOOL v9 = (void *)nw_protocol_masque_get_definition(void)::definition;
  if (nw_protocol_masque_get_definition(void)::definition) {
    BOOL v9 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
  }
  singleton = nw_protocol_metadata_create_singleton(v9);
  *((void *)v6 + 59) = singleton;
  *(void *)__int16 v16 = MEMORY[0x1E4F143A8];
  *(void *)&v16[8] = 0x40000000;
  *(void *)&v16[16] = ___ZL23nw_masque_set_callbacksP20nw_protocol_metadataPv_block_invoke;
  uint64_t v17 = (uint64_t)&__block_descriptor_tmp_204;
  __int16 v18 = v6;
  nw_protocol_metadata_access_handle((uint64_t)singleton, (uint64_t)v16);
  return (BOOL)v6;
}

uint64_t ___ZL25nw_protocol_masque_createPK22nw_protocol_identifierP9nw_objectP11nw_endpointP13nw_parameters_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

uint64_t ___ZL23nw_masque_set_callbacksP20nw_protocol_metadataPv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 8));
  *(void *)a2 = *(void *)(a1 + 32);
  os_unfair_lock_unlock(v4);
  return 1;
}

void ___ZL32nw_protocol_masque_get_callbacksv_block_invoke()
{
  qword_1E8F6AE40 = (uint64_t)nw_protocol_default_output_available;
  qword_1E8F6AEB8 = (uint64_t)nw_protocol_default_output_finished;
  qword_1E8F6AF00 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F6AEF0 = (uint64_t)nw_protocol_default_get_message_properties;
  qword_1E8F6AE60 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F6AE78 = (uint64_t)nw_protocol_default_get_local;
  qword_1E8F6AE70 = (uint64_t)nw_protocol_default_get_path;
  qword_1E8F6AEA0 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F6AEC8 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F6AEF8 = (uint64_t)nw_protocol_default_reset;
  qword_1E8F6AE88 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F6AE90 = (uint64_t)nw_protocol_default_unregister_notification;
  qword_1E8F6AEE0 = (uint64_t)nw_protocol_default_add_listen_handler;
  qword_1E8F6AEE8 = (uint64_t)nw_protocol_default_remove_listen_handler;
  nw_protocol_masque_get_callbacks(void)::g_masque_protocol_callbacks = (uint64_t)nw_protocol_masque_add_input_handler;
  qword_1E8F6AE08 = (uint64_t)nw_protocol_masque_replace_input_handler;
  qword_1E8F6AE00 = (uint64_t)nw_protocol_masque_remove_input_handler;
  qword_1E8F6AE10 = (uint64_t)nw_protocol_masque_connect;
  qword_1E8F6AE20 = (uint64_t)nw_protocol_masque_connected;
  qword_1E8F6AE18 = (uint64_t)nw_protocol_masque_disconnect;
  qword_1E8F6AE28 = (uint64_t)nw_protocol_masque_disconnected;
  qword_1E8F6AE30 = (uint64_t)nw_protocol_masque_error;
  qword_1E8F6AEA8 = (uint64_t)nw_protocol_masque_supports_external_data;
  qword_1E8F6AED0 = (uint64_t)nw_protocol_masque_waiting_for_output;
  qword_1E8F6AE50 = (uint64_t)nw_protocol_masque_get_output_frames;
  qword_1E8F6AE58 = (uint64_t)nw_protocol_masque_finalize_output_frames;
  qword_1E8F6AE48 = (uint64_t)nw_protocol_masque_get_input_frames;
  qword_1E8F6AE38 = (uint64_t)nw_protocol_masque_input_available;
  qword_1E8F6AEB0 = (uint64_t)nw_protocol_masque_input_finished;
  qword_1E8F6AE80 = (uint64_t)nw_protocol_masque_get_remote_endpoint;
  qword_1E8F6AE68 = (uint64_t)nw_protocol_masque_get_parameters;
  qword_1E8F6AEC0 = (uint64_t)nw_protocol_masque_get_output_local_endpoint;
  qword_1E8F6AED8 = (uint64_t)nw_protocol_masque_copy_info;
  qword_1E8F6AE98 = (uint64_t)nw_protocol_masque_notify;
}

uint64_t nw_protocol_masque_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v70 = "nw_protocol_masque_get_input_frames";
    uint64_t v36 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v56) = 0;
    if (!__nwlog_fault(v36, type, &v56)) {
      goto LABEL_86;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v56)
      {
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v38 = type[0];
        if (!os_log_type_enabled(v37, type[0])) {
          goto LABEL_86;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v70 = "nw_protocol_masque_get_input_frames";
        char v39 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_85;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      BOOL v41 = os_log_type_enabled(v37, type[0]);
      if (!backtrace_string)
      {
        if (!v41) {
          goto LABEL_86;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v70 = "nw_protocol_masque_get_input_frames";
        char v39 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_85;
      }
      if (v41)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v70 = "nw_protocol_masque_get_input_frames";
        __int16 v71 = 2082;
        uint64_t v72 = backtrace_string;
        os_log_type_t v42 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_68:
        _os_log_impl(&dword_1830D4000, v37, v38, v42, buf, 0x16u);
      }
LABEL_69:
      free(backtrace_string);
      goto LABEL_86;
    }
    uint64_t v37 = __nwlog_obj();
    os_log_type_t v38 = type[0];
    if (!os_log_type_enabled(v37, type[0])) {
      goto LABEL_86;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v70 = "nw_protocol_masque_get_input_frames";
    char v39 = "%{public}s called with null protocol";
LABEL_85:
    _os_log_impl(&dword_1830D4000, v37, v38, v39, buf, 0xCu);
LABEL_86:
    if (v36) {
      free(v36);
    }
    return 0;
  }
  uint64_t handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v70 = "nw_protocol_masque_get_input_frames";
    uint64_t v36 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v56) = 0;
    if (!__nwlog_fault(v36, type, &v56)) {
      goto LABEL_86;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_86;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v70 = "nw_protocol_masque_get_input_frames";
      char v39 = "%{public}s called with null masque";
      goto LABEL_85;
    }
    if (!(_BYTE)v56)
    {
      uint64_t v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_86;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v70 = "nw_protocol_masque_get_input_frames";
      char v39 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v37 = __nwlog_obj();
    os_log_type_t v38 = type[0];
    BOOL v43 = os_log_type_enabled(v37, type[0]);
    if (backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v70 = "nw_protocol_masque_get_input_frames";
        __int16 v71 = 2082;
        uint64_t v72 = backtrace_string;
        os_log_type_t v42 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_68;
      }
      goto LABEL_69;
    }
    if (!v43) {
      goto LABEL_86;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v70 = "nw_protocol_masque_get_input_frames";
    char v39 = "%{public}s called with null masque, no backtrace";
    goto LABEL_85;
  }
  if (*((_DWORD *)handle + 127) != 4) {
    return 0;
  }
  uint64_t output_handler = a1->output_handler;
  *(void *)os_log_type_t type = 0;
  uint64_t v66 = type;
  int v68 = 0;
  uint64_t v67 = 0x2000000000;
  int v68 = ((uint64_t (*)(void))output_handler->callbacks->get_input_frames)();
  if (*((_DWORD *)v66 + 6))
  {
    if ((*(_DWORD *)((unsigned char *)handle + 527) & 0x9000) == 0x1000 || (*(_DWORD *)((unsigned char *)handle + 527) & 0x28) != 0)
    {
      if (nw_protocol_copy_http_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
      }
      id v11 = (id)nw_protocol_copy_http_definition_http_definition;
      v58[0] = MEMORY[0x1E4F143A8];
      v58[1] = 0x40000000;
      int v59 = (uint64_t (*)(void *))___ZL35nw_protocol_masque_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      char v60 = &unk_1E523EA28;
      __int16 v63 = handle;
      __int16 v64 = a6;
      uint64_t v61 = type;
      id v62 = v11;
      tqh_first = a6->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        uint64_t v13 = (nw_frame *)*((void *)tqh_first + 4);
        char v14 = v59(v58);
        tqh_first = v13;
      }
      while ((v14 & 1) != 0);
      if (v11) {
        os_release(v11);
      }
    }
  }
  uint64_t v15 = *((unsigned int *)v66 + 6);
  if (v15)
  {
    __int16 v16 = (int *)((char *)handle + 527);
    if ((~*(_DWORD *)((char *)handle + 527) & 0x100008) == 0 && *((void *)handle + 54) && !*((void *)handle + 49))
    {
      uint64_t v17 = a6->tqh_first;
      LODWORD(v56) = 0;
      __int16 v18 = (unsigned __int8 *)nw_frame_unclaimed_bytes((uint64_t)v17, &v56);
      if (v56 >= 7)
      {
        unsigned int v19 = *v18;
        if (v19 >= 0xC0 && (v19 & 0x30) == 0)
        {
          unint64_t v21 = v18[5];
          if (v21 <= 0x14)
          {
            unint64_t v22 = v21 + 7;
            if (v21 + 7 < v56)
            {
              char v23 = &v18[v21];
              uint64_t v24 = v23[6];
              unint64_t v25 = v22 + v24;
              if ((v24 - 1) <= 0x13 && v25 < v56)
              {
                *((void *)handle + 49) = dispatch_data_create(v23 + 7, v23[6], 0, 0);
                if ((*((unsigned char *)handle + 529) & 1) == 0 && gLogDatapath)
                {
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                  }
                  BOOL v51 = gprivacy_proxyLogObj;
                  if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)int buf = 136446978;
                    uint64_t v70 = "nw_protocol_masque_get_input_frames";
                    __int16 v71 = 2082;
                    uint64_t v72 = (char *)handle + 531;
                    __int16 v73 = 2080;
                    uint64_t v74 = " ";
                    __int16 v75 = 1024;
                    int v76 = v24;
                    _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected a server CID of length %u", buf, 0x26u);
                  }
                }
                if (nw_masque_setup_demux((uint64_t)handle, 0))
                {
                  int v35 = *((_DWORD *)handle + 126);
                  if (v35 == 2)
                  {
                    BOOL connection_id_capsule = nw_masque_create_connection_id_capsule(*((NSObject **)handle + 49), v33, v34);
                    char v45 = nw_masque_send_metadata((uint64_t)handle, connection_id_capsule, *((void *)handle + 4));
                    int v46 = *v16;
                    if (v45)
                    {
                      if ((v46 & 0x10000) == 0)
                      {
                        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                        }
                        __int16 v47 = gprivacy_proxyLogObj;
                        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)int buf = 136446722;
                          uint64_t v70 = "nw_protocol_masque_get_input_frames";
                          __int16 v71 = 2082;
                          uint64_t v72 = (char *)handle + 531;
                          __int16 v73 = 2080;
                          uint64_t v74 = " ";
                          _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSent REGISTER_TARGET_CID capsule", buf, 0x20u);
                        }
                      }
                      *v16 |= 0x4000000u;
                      *((_DWORD *)handle + 127) = 3;
                    }
                    else if ((v46 & 0x10000) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                      }
                      uint32_t v50 = gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)int buf = 136446466;
                        uint64_t v70 = (char *)handle + 531;
                        __int16 v71 = 2080;
                        uint64_t v72 = " ";
                        _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_ERROR, "%{public}s%sFailed to send REGISTER_TARGET_CID capsule", buf, 0x16u);
                      }
                    }
                    if (connection_id_capsule) {
                      os_release((void *)connection_id_capsule);
                    }
                  }
                  else if (v35 == 1)
                  {
                    nw_masque_setup_server_connect((uint64_t)handle);
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v15 = *((unsigned int *)v66 + 6);
    }
  }
  if (a5 > v15)
  {
    uint64_t v27 = *((void *)handle + 20);
    if (v27)
    {
      uint64_t v56 = 0;
      os_log_type_t v57 = (nw_frame **)&v56;
      int v28 = (*(uint64_t (**)(void))(*(void *)(v27 + 24) + 80))();
      if (v28 && (*((unsigned char *)handle + 529) & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v49 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446978;
          uint64_t v70 = "nw_protocol_masque_get_input_frames";
          __int16 v71 = 2082;
          uint64_t v72 = (char *)handle + 531;
          __int16 v73 = 2080;
          uint64_t v74 = " ";
          __int16 v75 = 1024;
          int v76 = v28;
          _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived %u frames directly from demux", buf, 0x26u);
        }
      }
      v52[0] = MEMORY[0x1E4F143A8];
      v52[1] = 0x40000000;
      uint64_t v53 = ___ZL35nw_protocol_masque_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_154;
      uint64_t v54 = &__block_descriptor_tmp_155;
      int v55 = handle;
      uint64_t v29 = v56;
      do
      {
        if (!v29) {
          break;
        }
        uint64_t v30 = *(void *)(v29 + 32);
        char v31 = ((uint64_t (*)(void *))v53)(v52);
        uint64_t v29 = v30;
      }
      while ((v31 & 1) != 0);
      if (v56)
      {
        *a6->tqh_last = (nw_frame *)v56;
        uint64_t v32 = v57;
        *(void *)(v56 + 40) = a6->tqh_last;
        a6->tqh_last = v32;
      }
      uint64_t v15 = (*((_DWORD *)v66 + 6) + v28);
      *((_DWORD *)v66 + 6) = v15;
    }
  }
  _Block_object_dispose(type, 8);
  return v15;
}

uint64_t ___ZL35nw_protocol_masque_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = nw_frame_copy_metadata_for_protocol(a2, a1[5]);
  if (v4)
  {
    uint64_t v5 = v4;
    BOOL is_capsule = nw_http_metadata_is_capsule(v4);
    uint64_t v7 = a1[6];
    if (is_capsule)
    {
      nw_masque_handle_capsule(a1[6], v5);
      uint64_t v8 = *(void *)(a2 + 32);
      BOOL v9 = *(void **)(a2 + 40);
      if (v8)
      {
        *(void *)(v8 + 40) = v9;
        BOOL v9 = *(void **)(a2 + 40);
      }
      else
      {
        *(void *)(a1[7] + 8) = v9;
      }
      void *v9 = v8;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      uint64_t v25 = *(void *)(a1[4] + 8);
      int v26 = *(_DWORD *)(v25 + 24);
      *(_DWORD *)(v25 + 24) = v26 - 1;
      if (v26)
      {
LABEL_65:
        nw_frame_finalize(a2);
        goto LABEL_66;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v27 = *(unsigned int *)(*(void *)(a1[4] + 8) + 24);
      *(_DWORD *)int buf = 136446978;
      uint64_t v56 = "nw_protocol_masque_get_input_frames_block_invoke";
      __int16 v57 = 2082;
      uint32_t v58 = "count";
      __int16 v59 = 2048;
      uint64_t v60 = 1;
      __int16 v61 = 2048;
      uint64_t v62 = v27;
      int v28 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v53 = 0;
      if (__nwlog_fault(v28, &type, &v53))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v29 = gLogObj;
          os_log_type_t v30 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            uint64_t v31 = *(unsigned int *)(*(void *)(a1[4] + 8) + 24);
            *(_DWORD *)int buf = 136446978;
            uint64_t v56 = "nw_protocol_masque_get_input_frames_block_invoke";
            __int16 v57 = 2082;
            uint32_t v58 = "count";
            __int16 v59 = 2048;
            uint64_t v60 = 1;
            __int16 v61 = 2048;
            uint64_t v62 = v31;
            uint64_t v32 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_61:
            _os_log_impl(&dword_1830D4000, v29, v30, v32, buf, 0x2Au);
          }
        }
        else if (v53)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v29 = gLogObj;
          os_log_type_t v30 = type;
          BOOL v37 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v37)
            {
              uint64_t v38 = *(unsigned int *)(*(void *)(a1[4] + 8) + 24);
              *(_DWORD *)int buf = 136447234;
              uint64_t v56 = "nw_protocol_masque_get_input_frames_block_invoke";
              __int16 v57 = 2082;
              uint32_t v58 = "count";
              __int16 v59 = 2048;
              uint64_t v60 = 1;
              __int16 v61 = 2048;
              uint64_t v62 = v38;
              __int16 v63 = 2082;
              __int16 v64 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(backtrace_string);
            goto LABEL_62;
          }
          if (v37)
          {
            uint64_t v43 = *(unsigned int *)(*(void *)(a1[4] + 8) + 24);
            *(_DWORD *)int buf = 136446978;
            uint64_t v56 = "nw_protocol_masque_get_input_frames_block_invoke";
            __int16 v57 = 2082;
            uint32_t v58 = "count";
            __int16 v59 = 2048;
            uint64_t v60 = 1;
            __int16 v61 = 2048;
            uint64_t v62 = v43;
            uint64_t v32 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_61;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v29 = gLogObj;
          os_log_type_t v30 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            uint64_t v42 = *(unsigned int *)(*(void *)(a1[4] + 8) + 24);
            *(_DWORD *)int buf = 136446978;
            uint64_t v56 = "nw_protocol_masque_get_input_frames_block_invoke";
            __int16 v57 = 2082;
            uint32_t v58 = "count";
            __int16 v59 = 2048;
            uint64_t v60 = 1;
            __int16 v61 = 2048;
            uint64_t v62 = v42;
            uint64_t v32 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_61;
          }
        }
      }
LABEL_62:
      if (v28) {
        free(v28);
      }
      *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = 0;
      goto LABEL_65;
    }
    uint64_t v10 = (unsigned char *)(v7 + 527);
    if ((*(_DWORD *)(v7 + 527) & 0x9000) != 0x1000)
    {
LABEL_66:
      os_release(v5);
      return 1;
    }
    if (nw_protocol_metadata_is_http(v5))
    {
      id v11 = nw_http_metadata_copy_response(v5);
      if (v11)
      {
        id v12 = v11;
        int status_code = _nw_http_response_get_status_code();

        if ((status_code - 200) <= 0x63)
        {
          if ((*v10 & 2) != 0 && !uuid_is_null((const unsigned __int8 *)(v7 + 272)))
          {
            char v14 = *(void **)(v7 + 456);
            if (v14) {
              nw_http_connection_metadata_set_cached_token(v14, 0, 0);
            }
            nw_path_report_error_to_agent(*(void **)(v7 + 336), (const unsigned __int8 *)(v7 + 272), 0);
          }
          uint64_t v15 = *(void *)(v7 + 288);
          uint64_t v16 = mach_continuous_time();
          if (v16 <= 1) {
            uint64_t v17 = 1;
          }
          else {
            uint64_t v17 = v16;
          }
          unint64_t v18 = nw_delta_nanos(v15, v17);
          uint64_t v19 = (v18 / 0xF4240);
          if (v18 > 0xF423FFFFFFFFFLL) {
            uint64_t v19 = 0xFFFFFFFFLL;
          }
          *(void *)(v7 + 296) = v19;
          if (*(unsigned char *)(v7 + 529)) {
            goto LABEL_55;
          }
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v20 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO)) {
            goto LABEL_55;
          }
          *(_DWORD *)int buf = 136446466;
          uint64_t v56 = (const char *)(v7 + 531);
          __int16 v57 = 2080;
          uint32_t v58 = " ";
          unint64_t v21 = "%{public}s%sReceived 200 OK for proxied message";
          unint64_t v22 = v20;
          os_log_type_t v23 = OS_LOG_TYPE_INFO;
          uint32_t v24 = 22;
          goto LABEL_51;
        }
        int v33 = *(_DWORD *)v10;
        if (!status_code)
        {
          if ((v33 & 0x10000) != 0) {
            goto LABEL_55;
          }
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v39 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_55;
          }
          *(_DWORD *)int buf = 136446722;
          uint64_t v56 = "nw_masque_handle_message_response";
          __int16 v57 = 2082;
          uint32_t v58 = (const char *)(v7 + 531);
          __int16 v59 = 2080;
          uint64_t v60 = (uint64_t)" ";
          unint64_t v21 = "%{public}s %{public}s%sReceived no response code, ignoring";
          unint64_t v22 = v39;
          os_log_type_t v23 = OS_LOG_TYPE_DEBUG;
          uint32_t v24 = 32;
LABEL_51:
          _os_log_impl(&dword_1830D4000, v22, v23, v21, buf, v24);
LABEL_55:
          *(_DWORD *)v10 |= 0x8000u;
LABEL_56:
          os_release(v12);
          goto LABEL_66;
        }
        if ((v33 & 0x10000) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          int v34 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446722;
            uint64_t v56 = (const char *)(v7 + 531);
            __int16 v57 = 2080;
            uint32_t v58 = " ";
            __int16 v59 = 1024;
            LODWORD(v60) = status_code;
            _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_ERROR, "%{public}s%sReceived response code %u for proxied message", buf, 0x1Cu);
          }
        }
        if (status_code == 401)
        {
          if (!uuid_is_null((const unsigned __int8 *)(v7 + 272)))
          {
            int v35 = *(void **)(v7 + 456);
            if (v35) {
              nw_http_connection_metadata_mark_cached_token_failed(v35);
            }
            nw_path_report_error_to_agent(*(void **)(v7 + 336), (const unsigned __int8 *)(v7 + 272), 80);
            nw_masque_mark_failed_with_error(v7, 80);
            goto LABEL_56;
          }
        }
        else if ((status_code - 400) > 0x63)
        {
          uint64_t v40 = v7;
          if ((status_code - 500) > 0x63) {
            int v41 = 1101;
          }
          else {
            int v41 = 1105;
          }
          goto LABEL_54;
        }
        uint64_t v40 = v7;
        int v41 = 1104;
LABEL_54:
        nw_masque_report_error_to_proxy_agent(v40, v41);
        goto LABEL_55;
      }
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      uint64_t v56 = "nw_masque_handle_message_response";
      char v45 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v53 = 0;
      if (!__nwlog_fault(v45, &type, &v53)) {
        goto LABEL_99;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v46 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (!os_log_type_enabled(v46, type)) {
          goto LABEL_99;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v56 = "nw_masque_handle_message_response";
        __int16 v48 = "%{public}s called with null response";
        goto LABEL_98;
      }
      if (!v53)
      {
        int v46 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (!os_log_type_enabled(v46, type)) {
          goto LABEL_99;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v56 = "nw_masque_handle_message_response";
        __int16 v48 = "%{public}s called with null response, backtrace limit exceeded";
        goto LABEL_98;
      }
      BOOL v51 = (char *)__nw_create_backtrace_string();
      int v46 = __nwlog_obj();
      os_log_type_t v47 = type;
      BOOL v52 = os_log_type_enabled(v46, type);
      if (v51)
      {
        if (v52)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v56 = "nw_masque_handle_message_response";
          __int16 v57 = 2082;
          uint32_t v58 = v51;
          _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null response, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v51);
        if (!v45) {
          goto LABEL_66;
        }
        goto LABEL_100;
      }
      if (v52)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v56 = "nw_masque_handle_message_response";
        __int16 v48 = "%{public}s called with null response, no backtrace";
LABEL_98:
        _os_log_impl(&dword_1830D4000, v46, v47, v48, buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      uint64_t v56 = "nw_masque_handle_message_response";
      char v45 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v53 = 0;
      if (!__nwlog_fault(v45, &type, &v53)) {
        goto LABEL_99;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v46 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (!os_log_type_enabled(v46, type)) {
          goto LABEL_99;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v56 = "nw_masque_handle_message_response";
        __int16 v48 = "%{public}s called with null nw_protocol_metadata_is_http(metadata)";
        goto LABEL_98;
      }
      if (!v53)
      {
        int v46 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (!os_log_type_enabled(v46, type)) {
          goto LABEL_99;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v56 = "nw_masque_handle_message_response";
        __int16 v48 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), backtrace limit exceeded";
        goto LABEL_98;
      }
      uint64_t v49 = (char *)__nw_create_backtrace_string();
      int v46 = __nwlog_obj();
      os_log_type_t v47 = type;
      BOOL v50 = os_log_type_enabled(v46, type);
      if (!v49)
      {
        if (!v50) {
          goto LABEL_99;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v56 = "nw_masque_handle_message_response";
        __int16 v48 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), no backtrace";
        goto LABEL_98;
      }
      if (v50)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v56 = "nw_masque_handle_message_response";
        __int16 v57 = 2082;
        uint32_t v58 = v49;
        _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null nw_protocol_metadata_is_http(metadata), dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v49);
    }
LABEL_99:
    if (!v45) {
      goto LABEL_66;
    }
LABEL_100:
    free(v45);
    goto LABEL_66;
  }
  return 1;
}

void nw_masque_setup_server_connect(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 320))
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint32_t v24 = "nw_masque_setup_server_connect";
    id v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)int buf = 136446210;
      uint32_t v24 = "nw_masque_setup_server_connect";
      uint64_t v15 = "%{public}s called with null masque->parameters";
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          uint32_t v24 = "nw_masque_setup_server_connect";
          __int16 v25 = 2082;
          int v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null masque->parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_54;
      }
      if (!v17)
      {
LABEL_54:
        if (v12) {
          free(v12);
        }
        return;
      }
      *(_DWORD *)int buf = 136446210;
      uint32_t v24 = "nw_masque_setup_server_connect";
      uint64_t v15 = "%{public}s called with null masque->parameters, no backtrace";
    }
    else
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)int buf = 136446210;
      uint32_t v24 = "nw_masque_setup_server_connect";
      uint64_t v15 = "%{public}s called with null masque->parameters, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_54;
  }
  if (!*(void *)(a1 + 392) || *(_DWORD *)(a1 + 512)) {
    return;
  }
  uint64_t v2 = (void *)a1;
  while (1)
  {
    uint64_t v2 = (void *)v2[4];
    if (!v2) {
      break;
    }
    BOOL v3 = (void *)v2[2];
    if (nw_protocol_http3_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_13_62491);
    }
    if (!nw_protocols_are_equal(v3, &nw_protocol_http3_identifier::http3_protocol_identifier))
    {
      uint64_t v4 = (void *)v2[2];
      if (nw_protocol_http2_identifier::onceToken[0] != -1) {
        dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_85036);
      }
      if (!nw_protocols_are_equal(v4, &nw_protocol_http2_identifier::http2_protocol_identifier)) {
        continue;
      }
    }
    if ((*(unsigned char *)(a1 + 529) & 1) == 0 && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      unint64_t v18 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446978;
        uint32_t v24 = "nw_masque_setup_server_connect";
        __int16 v25 = 2082;
        int v26 = (const char *)(a1 + 531);
        __int16 v27 = 2080;
        int v28 = " ";
        __int16 v29 = 2048;
        os_log_type_t v30 = v2;
        _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound HTTP protocol %p", buf, 0x2Au);
      }
    }
    uint64_t v5 = (void *)v2[3];
    if (v5 && *v5 && v5[3])
    {
      if (!*(void *)(a1 + 416) && v5[14])
      {
        id v6 = (id)nw_protocol_get_parameters((uint64_t)v2);
        BOOL v7 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v6, 0, 1);

        *(void *)(a1 + 416) = v7;
      }
      nw_protocol_set_input_handler(a1 + 64, *(void *)(a1 + 48));
      *(_OWORD *)(a1 + 64) = *(_OWORD *)a1;
      char v8 = (*(uint64_t (**)(void *, uint64_t))v2[3])(v2, a1 + 64);
      int v9 = *(_DWORD *)(a1 + 527);
      if (v8)
      {
        if ((v9 & 0x10000) == 0 && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v19 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v20 = *(void *)(a1 + 96);
            *(_DWORD *)int buf = 136447234;
            uint32_t v24 = "nw_masque_setup_server_connect";
            __int16 v25 = 2082;
            int v26 = (const char *)(a1 + 531);
            __int16 v27 = 2080;
            int v28 = " ";
            __int16 v29 = 2048;
            os_log_type_t v30 = (void *)(a1 + 64);
            __int16 v31 = 2048;
            uint64_t v32 = v20;
            _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sserver_connect_protocol %p output_handler %p", buf, 0x34u);
          }
        }
        (*(void (**)(void))(*(void *)(*(void *)(a1 + 96) + 24) + 24))();
        return;
      }
      if ((v9 & 0x10000) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v10 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446466;
          uint32_t v24 = (const char *)(a1 + 531);
          __int16 v25 = 2080;
          int v26 = " ";
          id v11 = "%{public}s%sFailed to add server connect stream";
          goto LABEL_35;
        }
      }
    }
    return;
  }
  if ((*(unsigned char *)(a1 + 529) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v10 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446466;
      uint32_t v24 = (const char *)(a1 + 531);
      __int16 v25 = 2080;
      int v26 = " ";
      id v11 = "%{public}s%sFailed to find HTTP protocol";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x16u);
    }
  }
}

void sub_183837A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_masque_create_connection_id_capsule(NSObject *a1, dispatch_data_s *a2, dispatch_data_s *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  size_t size = dispatch_data_get_size(a1);
  size_t v5 = size;
  unint64_t __src = 0;
  if (size > 0x3F)
  {
    if (size >> 14)
    {
      if (size >> 30)
      {
        if (size >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)applier = 136446466;
          *(void *)&applier[4] = "_http_vle_encode";
          *(_WORD *)&applier[12] = 2048;
          *(void *)&applier[14] = v5;
          BOOL v7 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v7);
          if (result)
          {
            __break(1u);
            return result;
          }
          free(v7);
          size_t v6 = 0;
        }
        else
        {
          unint64_t __src = bswap64(size | 0xC000000000000000);
          size_t v6 = 8;
        }
      }
      else
      {
        unint64_t __src = bswap32(size | 0x80000000);
        size_t v6 = 4;
      }
    }
    else
    {
      unint64_t __src = bswap32(size | 0x4000) >> 16;
      size_t v6 = 2;
    }
  }
  else
  {
    unint64_t __src = size;
    size_t v6 = 1;
  }
  alloc = dispatch_data_create_alloc();
  memcpy(0, &__src, v6);
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2000000000;
  v13[3] = 0;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  v12[3] = v6;
  if (a1)
  {
    *(void *)applier = MEMORY[0x1E4F143A8];
    *(void *)&applier[8] = 0x40000000;
    *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    uint64_t v15 = &unk_1E5242B60;
    BOOL v17 = v12;
    size_t v18 = v5;
    uint64_t v16 = v13;
    dispatch_data_apply(a1, applier);
  }
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(v13, 8);
  *(unsigned char *)(v6 + v5) = 0;
  metadata_for_capsule = nw_http_create_metadata_for_capsule(16770049, alloc);
  if (alloc) {
    dispatch_release(alloc);
  }
  return (BOOL)metadata_for_capsule;
}

uint64_t ___ZL35nw_protocol_masque_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_154(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unsigned int v20 = 0;
  uint64_t v3 = nw_frame_unclaimed_bytes(a2, &v20);
  if (v3)
  {
    unint64_t v4 = v20;
    if (v20)
    {
      size_t v5 = (unsigned char *)v3;
      uint64_t v6 = *(void *)(a1 + 32);
      BOOL v7 = *(NSObject **)(v6 + 384);
      if (v7)
      {
        char v8 = *(NSObject **)(v6 + 400);
        if (v8)
        {
          size_t size = dispatch_data_get_size(v7);
          if (size + 1 < v4)
          {
            size_t v10 = size;
            if (dispatch_data_get_size(v8) == size && (*v5 & 0xC0) == 0x40)
            {
              uint64_t v11 = (uint64_t)(v5 + 1);
              id v12 = dispatch_data_create(v5 + 1, v10, 0, (dispatch_block_t)*MEMORY[0x1E4F14400]);
              if (nw_dispatch_data_is_equal(v12, *(NSObject **)(*(void *)(a1 + 32) + 400)))
              {
                nw_dispatch_data_copyout(*(NSObject **)(*(void *)(a1 + 32) + 384), v11, v10);
                uint64_t v13 = *(void *)(a1 + 32);
                if (!v13 || (*(unsigned char *)(v13 + 529) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                    }
                    uint64_t v15 = gprivacy_proxyLogObj;
                    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v16 = *(void *)(a1 + 32);
                      BOOL v17 = "";
                      BOOL v18 = v16 == 0;
                      if (v16) {
                        uint64_t v19 = (const char *)(v16 + 531);
                      }
                      else {
                        uint64_t v19 = "";
                      }
                      *(_DWORD *)int buf = 136446722;
                      unint64_t v22 = "nw_protocol_masque_get_input_frames_block_invoke";
                      if (!v18) {
                        BOOL v17 = " ";
                      }
                      __int16 v23 = 2082;
                      uint32_t v24 = v19;
                      __int16 v25 = 2080;
                      int v26 = v17;
                      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReplacing with real client CID before processing", buf, 0x20u);
                    }
                  }
                }
              }
              if (v12) {
                dispatch_release(v12);
              }
            }
          }
        }
      }
    }
  }
  return 1;
}

void nw_masque_handle_capsule(uint64_t a1, void *a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
    __int16 v83 = (char *)_os_log_send_and_compose_impl();
    length[0].os_log_type_t sa_len = 16;
    LOBYTE(address) = 0;
    if (!__nwlog_fault(v83, length, &address)) {
      goto LABEL_327;
    }
    if (length[0].sa_len != 17)
    {
      if (!(_BYTE)address)
      {
        BOOL v84 = __nwlog_obj();
        os_log_type_t sa_len = length[0].sa_len;
        if (!os_log_type_enabled(v84, (os_log_type_t)length[0].sa_len)) {
          goto LABEL_327;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
        os_log_type_t v86 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_326;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v84 = __nwlog_obj();
      os_log_type_t sa_len = length[0].sa_len;
      BOOL v88 = os_log_type_enabled(v84, (os_log_type_t)length[0].sa_len);
      if (!backtrace_string)
      {
        if (!v88) {
          goto LABEL_327;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
        os_log_type_t v86 = "%{public}s called with null masque, no backtrace";
        goto LABEL_326;
      }
      if (v88)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v84, sa_len, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_327:
      if (v83) {
        goto LABEL_328;
      }
      return;
    }
    BOOL v84 = __nwlog_obj();
    os_log_type_t sa_len = length[0].sa_len;
    if (!os_log_type_enabled(v84, (os_log_type_t)length[0].sa_len)) {
      goto LABEL_327;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
    os_log_type_t v86 = "%{public}s called with null masque";
    goto LABEL_326;
  }
  if (!nw_protocol_metadata_is_http(a2))
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
    __int16 v83 = (char *)_os_log_send_and_compose_impl();
    length[0].os_log_type_t sa_len = 16;
    LOBYTE(address) = 0;
    if (!__nwlog_fault(v83, length, &address)) {
      goto LABEL_327;
    }
    if (length[0].sa_len != 17)
    {
      if (!(_BYTE)address)
      {
        BOOL v84 = __nwlog_obj();
        os_log_type_t sa_len = length[0].sa_len;
        if (!os_log_type_enabled(v84, (os_log_type_t)length[0].sa_len)) {
          goto LABEL_327;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
        os_log_type_t v86 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), backtrace limit exceeded";
        goto LABEL_326;
      }
      os_log_type_t v89 = (char *)__nw_create_backtrace_string();
      BOOL v84 = __nwlog_obj();
      os_log_type_t sa_len = length[0].sa_len;
      BOOL v90 = os_log_type_enabled(v84, (os_log_type_t)length[0].sa_len);
      if (!v89)
      {
        if (!v90) {
          goto LABEL_327;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
        os_log_type_t v86 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), no backtrace";
        goto LABEL_326;
      }
      if (!v90) {
        goto LABEL_308;
      }
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v89;
      os_log_type_t v91 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), dumping backtrace:%{public}s";
      goto LABEL_307;
    }
    BOOL v84 = __nwlog_obj();
    os_log_type_t sa_len = length[0].sa_len;
    if (!os_log_type_enabled(v84, (os_log_type_t)length[0].sa_len)) {
      goto LABEL_327;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
    os_log_type_t v86 = "%{public}s called with null nw_protocol_metadata_is_http(metadata)";
LABEL_326:
    _os_log_impl(&dword_1830D4000, v84, sa_len, v86, buf, 0xCu);
    goto LABEL_327;
  }
  if (!nw_http_metadata_is_capsule(a2))
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
    __int16 v83 = (char *)_os_log_send_and_compose_impl();
    length[0].os_log_type_t sa_len = 16;
    LOBYTE(address) = 0;
    if (!__nwlog_fault(v83, length, &address)) {
      goto LABEL_327;
    }
    if (length[0].sa_len == 17)
    {
      BOOL v84 = __nwlog_obj();
      os_log_type_t sa_len = length[0].sa_len;
      if (!os_log_type_enabled(v84, (os_log_type_t)length[0].sa_len)) {
        goto LABEL_327;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
      os_log_type_t v86 = "%{public}s called with null nw_http_metadata_is_capsule(metadata)";
      goto LABEL_326;
    }
    if (!(_BYTE)address)
    {
      BOOL v84 = __nwlog_obj();
      os_log_type_t sa_len = length[0].sa_len;
      if (!os_log_type_enabled(v84, (os_log_type_t)length[0].sa_len)) {
        goto LABEL_327;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
      os_log_type_t v86 = "%{public}s called with null nw_http_metadata_is_capsule(metadata), backtrace limit exceeded";
      goto LABEL_326;
    }
    os_log_type_t v89 = (char *)__nw_create_backtrace_string();
    BOOL v84 = __nwlog_obj();
    os_log_type_t sa_len = length[0].sa_len;
    BOOL v92 = os_log_type_enabled(v84, (os_log_type_t)length[0].sa_len);
    if (!v89)
    {
      if (!v92) {
        goto LABEL_327;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
      os_log_type_t v86 = "%{public}s called with null nw_http_metadata_is_capsule(metadata), no backtrace";
      goto LABEL_326;
    }
    if (!v92) {
      goto LABEL_308;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v89;
    os_log_type_t v91 = "%{public}s called with null nw_http_metadata_is_capsule(metadata), dumping backtrace:%{public}s";
LABEL_307:
    _os_log_impl(&dword_1830D4000, v84, sa_len, v91, buf, 0x16u);
    goto LABEL_308;
  }
  capsule_os_log_type_t type = nw_http_metadata_get_capsule_type(a2);
  size_t v5 = nw_http_metadata_copy_capsule_data(a2);
  if (v5)
  {
    uint64_t v6 = v5;
    if (capsule_type > 16770303)
    {
      if (capsule_type == 16770304)
      {
        if ((*(unsigned char *)(a1 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v11 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = a1 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = " ";
            id v12 = "%{public}s%sReceived unexpected REGISTER_DEMUX_PATTERN capsule";
LABEL_26:
            _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x16u);
          }
        }
LABEL_27:
        nw_masque_mark_failed_with_error(a1, 94);
        goto LABEL_266;
      }
      if (capsule_type != 16770305)
      {
        if (capsule_type == 16770307)
        {
          if (*(unsigned char *)(a1 + 529)) {
            goto LABEL_266;
          }
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v7 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_266;
          }
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 531;
          *(_WORD *)&unsigned char buf[22] = 2080;
          id v101 = " ";
          char v8 = "%{public}s %{public}s%sReceived ACK_LISTENER_DEMUX capsule, ignoring";
LABEL_14:
          int v9 = v7;
          os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
          goto LABEL_61;
        }
LABEL_43:
        if (*(unsigned char *)(a1 + 529)) {
          goto LABEL_266;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v15 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_266;
        }
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = a1 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = " ";
        *(_WORD *)&unsigned char buf[22] = 2048;
        id v101 = (const char *)capsule_type;
        char v8 = "%{public}s%sUnknown capsule type %llx";
LABEL_48:
        int v9 = v15;
LABEL_60:
        os_log_type_t v10 = OS_LOG_TYPE_ERROR;
LABEL_61:
        _os_log_impl(&dword_1830D4000, v9, v10, v8, buf, 0x20u);
        goto LABEL_266;
      }
      if ((*(unsigned char *)(a1 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v13 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 531;
          *(_WORD *)&unsigned char buf[22] = 2080;
          id v101 = " ";
          _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived ACK_DEMUX capsule", buf, 0x20u);
        }
      }
      os_log_type_t v14 = *(void **)(a1 + 448);
      if (v14)
      {
        if (!dispatch_data_get_size(v6))
        {
          if (*(unsigned char *)(a1 + 529)) {
            goto LABEL_266;
          }
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v18 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
            goto LABEL_266;
          }
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = a1 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = " ";
          *(_WORD *)&unsigned char buf[22] = 2048;
          id v101 = 0;
          char v8 = "%{public}s%sReceived short ACK_DEMUX_PATTERN capsule (%zu bytes)";
LABEL_59:
          int v9 = v18;
          goto LABEL_60;
        }
        *(void *)&length[0].os_log_type_t sa_len = 0;
        *(void *)&length[0].sa_data[6] = length;
        length[1] = (sockaddr)0x2000000000uLL;
        v97[0] = MEMORY[0x1E4F143A8];
        v97[1] = 0x40000000;
        v97[2] = ___ZL24nw_masque_handle_capsuleP9nw_masqueP20nw_protocol_metadata_block_invoke;
        v97[3] = &unk_1E523EA70;
        v97[4] = length;
        v97[5] = v6;
        v97[6] = a1;
        *(void *)int buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = __nw_demux_options_enumerate_patterns_block_invoke;
        id v101 = (const char *)&unk_1E523DFE8;
        *(void *)&long long v102 = v97;
        nw_protocol_options_access_handle(v14, buf);
        *(_DWORD *)(a1 + 527) |= 0x100400u;
        _Block_object_dispose(length, 8);
LABEL_266:
        dispatch_release(v6);
        goto LABEL_267;
      }
      if (*(unsigned char *)(a1 + 529)) {
        goto LABEL_266;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v16 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_266;
      }
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = a1 + 531;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = " ";
      BOOL v17 = "%{public}s%sReceived ACK_DEMUX_PATTERN capsule without a stored client demux options, ignoring";
LABEL_252:
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, v17, buf, 0x16u);
      goto LABEL_266;
    }
    switch(capsule_type)
    {
      case 16770048:
        if (*(unsigned char *)(a1 + 529)) {
          goto LABEL_27;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v11 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = a1 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = " ";
        id v12 = "%{public}s%sReceived unexpected REGISTER_CLIENT_CID capsule";
        goto LABEL_26;
      case 16770049:
        if (*(unsigned char *)(a1 + 529)) {
          goto LABEL_27;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v11 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = a1 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = " ";
        id v12 = "%{public}s%sReceived unexpected REGISTER_TARGET_CID capsule";
        goto LABEL_26;
      case 16770050:
        uint64_t v19 = *(NSObject **)(a1 + 384);
        if (!v19)
        {
          if ((*(unsigned char *)(a1 + 529) & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            uint64_t v16 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = a1 + 531;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = " ";
              BOOL v17 = "%{public}s%sReceived ACK_CLIENT_CID capsule without a stored client CID, ignoring";
              goto LABEL_252;
            }
          }
          goto LABEL_266;
        }
        if (v19 != v5)
        {
          size_t size = dispatch_data_get_size(*(dispatch_data_t *)(a1 + 384));
          if (size == dispatch_data_get_size(v6))
          {
            *(void *)&length[0].os_log_type_t sa_len = 0;
            *(void *)&length[0].sa_data[6] = length;
            *(void *)&length[1].os_log_type_t sa_len = 0x2000000000;
            length[1].sa_data[6] = 1;
            *(void *)int buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 0x40000000;
            *(void *)&buf[16] = __nw_dispatch_data_is_equal_block_invoke;
            id v101 = (const char *)&unk_1E5242BF8;
            *(void *)&long long v102 = length;
            *((void *)&v102 + 1) = v6;
            dispatch_data_apply(v19, buf);
            int v21 = *(unsigned __int8 *)(*(void *)&length[0].sa_data[6] + 24);
            _Block_object_dispose(length, 8);
            unint64_t v22 = (_DWORD *)(a1 + 527);
            int v23 = *(_DWORD *)(a1 + 527);
            if (v21)
            {
              if ((v23 & 0x10000) != 0) {
                goto LABEL_219;
              }
              goto LABEL_215;
            }
            if ((v23 & 0x10000) != 0) {
              goto LABEL_266;
            }
          }
          else if (*(unsigned char *)(a1 + 529))
          {
            goto LABEL_266;
          }
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v16 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
            goto LABEL_266;
          }
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = a1 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = " ";
          BOOL v17 = "%{public}s%sReceived ACK_CLIENT_CID capsule with mismatched CID, ignoring";
          goto LABEL_252;
        }
        unint64_t v22 = (_DWORD *)(a1 + 527);
        if (*(unsigned char *)(a1 + 529))
        {
LABEL_219:
          *v22 |= 0x80u;
          goto LABEL_266;
        }
LABEL_215:
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v80 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 531;
          *(_WORD *)&unsigned char buf[22] = 2080;
          id v101 = " ";
          _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived ACK_CLIENT_CID capsule, server supports forwarding", buf, 0x20u);
        }
        goto LABEL_219;
      case 16770051:
        if (*(void *)(a1 + 392))
        {
          size_t v24 = dispatch_data_get_size(v5);
          if (v24)
          {
            unint64_t v25 = v24;
            v105[0] = 0;
            *(void *)&length[0].os_log_type_t sa_len = 0;
            *(void *)&length[0].sa_data[6] = length;
            length[1] = (sockaddr)0x2000000000uLL;
            uint64_t address = 0;
            *(void *)&address_8.os_log_type_t sa_len = &address;
            *(void *)&address_8.sa_data[6] = 0x2000000000;
            uint64_t v109 = 0;
            *(void *)int buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 0x40000000;
            *(void *)&buf[16] = __nw_dispatch_data_copyout_from_offset_block_invoke;
            id v101 = (const char *)&unk_1E5242B88;
            *(void *)&long long v102 = &address;
            *((void *)&v102 + 1) = length;
            uint64_t v103 = 1;
            __int16 v104 = v105;
            dispatch_data_apply(v6, buf);
            _Block_object_dispose(&address, 8);
            _Block_object_dispose(length, 8);
            if (v25 <= v105[0])
            {
              if ((*(unsigned char *)(a1 + 529) & 1) == 0)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                uint64_t v15 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = a1 + 531;
                  *(_WORD *)&buf[12] = 2080;
                  *(void *)&buf[14] = " ";
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  id v101 = (const char *)v25;
                  char v8 = "%{public}s%sReceived short ACK_TARGET_CID capsule (%zu bytes)";
                  goto LABEL_48;
                }
              }
            }
            else
            {
              subrange = dispatch_data_create_subrange(v6, 1uLL, v105[0]);
              if (subrange)
              {
                uint64_t v27 = subrange;
                BOOL is_equal = nw_dispatch_data_is_equal(*(dispatch_data_t *)(a1 + 392), subrange);
                dispatch_release(v27);
                int v29 = *(_DWORD *)(a1 + 527);
                if (is_equal)
                {
                  if ((v29 & 0x10000) == 0)
                  {
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                    }
                    os_log_type_t v30 = gprivacy_proxyLogObj;
                    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)int buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = a1 + 531;
                      *(_WORD *)&unsigned char buf[22] = 2080;
                      id v101 = " ";
                      _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived ACK_TARGET_CID capsule, forwarding allowed", buf, 0x20u);
                    }
                  }
                  *(_DWORD *)(a1 + 527) |= 0x100u;
                  length[0].os_log_type_t sa_len = 0;
                  nw_dispatch_data_copyout_from_offset(v6, (uint64_t)length, 1, v105[0] + 1);
                  size_t v31 = v105[0] + 2;
                  size_t v32 = length[0].sa_len;
                  if (v25 >= v31 + length[0].sa_len)
                  {
                    uint64_t v33 = *(NSObject **)(a1 + 408);
                    if (v33)
                    {
                      dispatch_release(v33);
                      *(void *)(a1 + 408) = 0;
                      size_t v32 = length[0].sa_len;
                      size_t v31 = v105[0] + 2;
                    }
                    *(void *)(a1 + 408) = dispatch_data_create_subrange(v6, v31, v32);
                    if ((*(unsigned char *)(a1 + 529) & 1) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                      }
                      int v34 = gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)int buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = a1 + 531;
                        *(_WORD *)&unsigned char buf[22] = 2080;
                        id v101 = " ";
                        LOWORD(v102) = 1024;
                        *(_DWORD *)((char *)&v102 + 2) = length[0].sa_len;
                        _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived ACK_TARGET_CID virtual CID of length %u", buf, 0x26u);
                      }
                    }
                  }
                }
                else if ((v29 & 0x10000) == 0)
                {
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                  }
                  uint64_t v16 = gprivacy_proxyLogObj;
                  if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = a1 + 531;
                    *(_WORD *)&buf[12] = 2080;
                    *(void *)&buf[14] = " ";
                    BOOL v17 = "%{public}s%sReceived ACK_TARGET_CID capsule with mismatched CID, ignoring";
                    goto LABEL_252;
                  }
                }
              }
              else if ((*(unsigned char *)(a1 + 529) & 1) == 0)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                uint64_t v15 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = a1 + 531;
                  *(_WORD *)&buf[12] = 2080;
                  *(void *)&buf[14] = " ";
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  id v101 = (const char *)v25;
                  char v8 = "%{public}s%sFailed to parse ACK_TARGET_CID capsule (%zu bytes)";
                  goto LABEL_48;
                }
              }
            }
          }
          else if ((*(unsigned char *)(a1 + 529) & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            uint64_t v18 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = a1 + 531;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = " ";
              *(_WORD *)&unsigned char buf[22] = 2048;
              id v101 = 0;
              char v8 = "%{public}s%sReceived short ACK_TARGET_CID capsule (%zu bytes)";
              goto LABEL_59;
            }
          }
        }
        else if ((*(unsigned char *)(a1 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v16 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = a1 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = " ";
            BOOL v17 = "%{public}s%sReceived ACK_TARGET_CID capsule without a stored server CID, ignoring";
            goto LABEL_252;
          }
        }
        goto LABEL_266;
      case 16770052:
        if ((*(unsigned char *)(a1 + 529) & 1) != 0 || !gLogDatapath) {
          goto LABEL_266;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v7 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_266;
        }
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 531;
        *(_WORD *)&unsigned char buf[22] = 2080;
        id v101 = " ";
        char v8 = "%{public}s %{public}s%sReceived CLOSE_CLIENT_CID capsule, ignoring";
        goto LABEL_14;
      case 16770053:
        if ((*(unsigned char *)(a1 + 529) & 1) == 0 && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          char v94 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 531;
            *(_WORD *)&unsigned char buf[22] = 2080;
            id v101 = " ";
            _os_log_impl(&dword_1830D4000, v94, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived CLOSE_TARGET_CID capsule", buf, 0x20u);
          }
        }
        int v35 = *(NSObject **)(a1 + 392);
        if (v35)
        {
          dispatch_release(v35);
          *(void *)(a1 + 392) = 0;
        }
        goto LABEL_266;
      default:
        switch(capsule_type)
        {
          case 0:
            if ((*(unsigned char *)(a1 + 529) & 1) != 0 || !gLogDatapath) {
              goto LABEL_266;
            }
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            uint64_t v7 = gprivacy_proxyLogObj;
            if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_266;
            }
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 531;
            *(_WORD *)&unsigned char buf[22] = 2080;
            id v101 = " ";
            char v8 = "%{public}s %{public}s%sReceived DATAGRAM capsule";
            goto LABEL_14;
          case 1:
            memset(v105, 0, 18);
            uint64_t v95 = MEMORY[0x1E4F143A8];
            while (2)
            {
              uint64_t v96 = 0;
              *(void *)&length[0].os_log_type_t sa_len = 0;
              *(void *)&length[0].sa_data[6] = length;
              length[1] = (sockaddr)0x2000000000uLL;
              uint64_t address = 0;
              *(void *)&address_8.os_log_type_t sa_len = &address;
              *(void *)&address_8.sa_data[6] = 0x2000000000;
              uint64_t v109 = &v96;
              *(void *)int buf = v95;
              *(void *)&buf[8] = 0x40000000;
              *(void *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
              id v101 = (const char *)&unk_1E5242B60;
              *((void *)&v102 + 1) = &address;
              uint64_t v103 = 8;
              *(void *)&long long v102 = length;
              dispatch_data_apply(v6, buf);
              unint64_t v40 = *(void *)(*(void *)&length[0].sa_data[6] + 24);
              _Block_object_dispose(&address, 8);
              _Block_object_dispose(length, 8);
              if (v40)
              {
                unint64_t v41 = v96;
                if (v96 > 0x3Fu)
                {
                  if (v96 >> 6 == 2)
                  {
                    if (v40 < 4) {
                      break;
                    }
                    unint64_t v41 = bswap32(v96 & 0xFFFFFF7F);
                    uint64_t v42 = 4;
                  }
                  else if (v96 >> 6 == 1)
                  {
                    if (v40 < 2) {
                      break;
                    }
                    unint64_t v41 = bswap32(v96 & 0xFFBF) >> 16;
                    uint64_t v42 = 2;
                  }
                  else
                  {
                    if (v40 < 8) {
                      break;
                    }
                    unint64_t v41 = bswap64(v96 & 0xFFFFFFFFFFFFFF3FLL);
                    uint64_t v42 = 8;
                  }
                }
                else
                {
                  uint64_t v42 = 1;
                }
                if ((*(unsigned char *)(a1 + 529) & 1) == 0 && gLogDatapath)
                {
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                  }
                  uint64_t v54 = gprivacy_proxyLogObj;
                  if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)int buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = a1 + 531;
                    *(_WORD *)&unsigned char buf[22] = 2080;
                    id v101 = " ";
                    LOWORD(v102) = 2048;
                    *(void *)((char *)&v102 + 2) = v41;
                    _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sADDRESS_ASSIGN capsule contains request ID %llu", buf, 0x2Au);
                  }
                }
                size_t v43 = dispatch_data_get_size(v6);
                unint64_t v44 = v42 + 6;
                if (v43 < v42 + 6)
                {
                  if (*(unsigned char *)(a1 + 529)) {
                    goto LABEL_265;
                  }
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                  }
                  uint64_t v81 = gprivacy_proxyLogObj;
                  if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_265;
                  }
                }
                else
                {
                  *(void *)&length[0].os_log_type_t sa_len = 0;
                  *(void *)&length[0].sa_data[6] = length;
                  length[1] = (sockaddr)0x2000000000uLL;
                  uint64_t address = 0;
                  *(void *)&address_8.os_log_type_t sa_len = &address;
                  *(void *)&address_8.sa_data[6] = 0x2000000000;
                  uint64_t v109 = (uint64_t *)v42;
                  *(void *)int buf = MEMORY[0x1E4F143A8];
                  *(void *)&buf[8] = 0x40000000;
                  *(void *)&buf[16] = __nw_dispatch_data_copyout_from_offset_block_invoke;
                  id v101 = (const char *)&unk_1E5242B88;
                  *(void *)&long long v102 = &address;
                  *((void *)&v102 + 1) = length;
                  uint64_t v103 = 1;
                  __int16 v104 = v105;
                  dispatch_data_apply(v6, buf);
                  _Block_object_dispose(&address, 8);
                  _Block_object_dispose(length, 8);
                  if (v105[0] != 6)
                  {
                    if (v105[0] != 4)
                    {
                      if ((*(unsigned char *)(a1 + 529) & 1) == 0)
                      {
                        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                        }
                        char v53 = gprivacy_proxyLogObj;
                        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)int buf = 136446722;
                          *(void *)&uint8_t buf[4] = a1 + 531;
                          *(_WORD *)&buf[12] = 2080;
                          *(void *)&buf[14] = " ";
                          *(_WORD *)&unsigned char buf[22] = 1024;
                          LODWORD(v101) = v105[0];
                          _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_ERROR, "%{public}s%sUnknown ADDRESS_ASSIGN version %u", buf, 0x1Cu);
                        }
                      }
                      if (!v6) {
                        goto LABEL_265;
                      }
                      continue;
                    }
                    *(void *)&length[0].os_log_type_t sa_len = 0;
                    *(void *)&length[0].sa_data[6] = length;
                    length[1] = (sockaddr)0x2000000000uLL;
                    uint64_t address = 0;
                    *(void *)&address_8.os_log_type_t sa_len = &address;
                    *(void *)&address_8.sa_data[6] = 0x2000000000;
                    uint64_t v109 = (uint64_t *)v42;
                    *(void *)int buf = MEMORY[0x1E4F143A8];
                    *(void *)&buf[8] = 0x40000000;
                    *(void *)&buf[16] = __nw_dispatch_data_copyout_from_offset_block_invoke;
                    id v101 = (const char *)&unk_1E5242B88;
                    *(void *)&long long v102 = &address;
                    *((void *)&v102 + 1) = length;
                    uint64_t v103 = 6;
                    __int16 v104 = v105;
                    dispatch_data_apply(v6, buf);
                    _Block_object_dispose(&address, 8);
                    _Block_object_dispose(length, 8);
                    *(_DWORD *)&length[0].os_log_type_t sa_len = 528;
                    *(_DWORD *)&length[0].sa_data[2] = *(_DWORD *)&v105[1];
                    *(void *)&length[0].sa_data[6] = 0;
                    nw_endpoint_t v45 = nw_endpoint_create_address(length);
                    if ((*(unsigned char *)(a1 + 529) & 1) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                      }
                      int v46 = gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
                      {
                        logging_description = nw_endpoint_get_logging_description(v45);
                        *(_DWORD *)int buf = 136446722;
                        *(void *)&uint8_t buf[4] = a1 + 531;
                        *(_WORD *)&buf[12] = 2080;
                        *(void *)&buf[14] = " ";
                        *(_WORD *)&unsigned char buf[22] = 2082;
                        id v101 = logging_description;
                        _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_INFO, "%{public}s%sReceived ADDRESS_ASSIGN capsule for %{public}s", buf, 0x20u);
                      }
                    }
                    if (v45)
                    {
                      __int16 v48 = *(void **)(a1 + 360);
                      if (v48) {
                        os_release(v48);
                      }
                      *(void *)(a1 + 360) = v45;
                    }
                    nw_protocol_notify(*(void **)(a1 + 48), a1, 17);
                    size_t v37 = v43 - v44;
                    if (v43 > v44)
                    {
                      uint64_t v38 = v6;
                      size_t v36 = v44;
LABEL_105:
                      dispatch_data_t v39 = dispatch_data_create_subrange(v38, v36, v37);
                      dispatch_release(v6);
                      uint64_t v6 = v39;
                      if (!v39) {
                        goto LABEL_265;
                      }
                      continue;
                    }
                    goto LABEL_265;
                  }
                  if (v43 > 0x11)
                  {
                    *(void *)&length[0].os_log_type_t sa_len = 0;
                    *(void *)&length[0].sa_data[6] = length;
                    length[1] = (sockaddr)0x2000000000uLL;
                    uint64_t address = 0;
                    *(void *)&address_8.os_log_type_t sa_len = &address;
                    *(void *)&address_8.sa_data[6] = 0x2000000000;
                    uint64_t v109 = (uint64_t *)v42;
                    *(void *)int buf = MEMORY[0x1E4F143A8];
                    *(void *)&buf[8] = 0x40000000;
                    *(void *)&buf[16] = __nw_dispatch_data_copyout_from_offset_block_invoke;
                    id v101 = (const char *)&unk_1E5242B88;
                    *(void *)&long long v102 = &address;
                    *((void *)&v102 + 1) = length;
                    uint64_t v103 = 18;
                    __int16 v104 = v105;
                    dispatch_data_apply(v6, buf);
                    _Block_object_dispose(&address, 8);
                    _Block_object_dispose(length, 8);
                    *(void *)&length[0].os_log_type_t sa_len = 7708;
                    *(sockaddr *)&length[0].sa_data[6] = *(sockaddr *)&v105[1];
                    *(_DWORD *)&length[1].sa_data[6] = 0;
                    nw_endpoint_t v49 = nw_endpoint_create_address(length);
                    if ((*(unsigned char *)(a1 + 529) & 1) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                      }
                      BOOL v50 = gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
                      {
                        BOOL v51 = nw_endpoint_get_logging_description(v49);
                        *(_DWORD *)int buf = 136446722;
                        *(void *)&uint8_t buf[4] = a1 + 531;
                        *(_WORD *)&buf[12] = 2080;
                        *(void *)&buf[14] = " ";
                        *(_WORD *)&unsigned char buf[22] = 2082;
                        id v101 = v51;
                        _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_INFO, "%{public}s%sReceived ADDRESS_ASSIGN capsule for %{public}s", buf, 0x20u);
                      }
                    }
                    if (v49)
                    {
                      BOOL v52 = *(void **)(a1 + 360);
                      if (v52) {
                        os_release(v52);
                      }
                      *(void *)(a1 + 360) = v49;
                    }
                    nw_protocol_notify(*(void **)(a1 + 48), a1, 17);
                    size_t v36 = v42 + 18;
                    size_t v37 = v43 - (v42 + 18);
                    if (v43 > v42 + 18)
                    {
                      uint64_t v38 = v6;
                      goto LABEL_105;
                    }
LABEL_265:
                    if (!v6)
                    {
LABEL_267:
                      nw_masque_mark_connected(a1);
                      return;
                    }
                    goto LABEL_266;
                  }
                  if (*(unsigned char *)(a1 + 529)) {
                    goto LABEL_265;
                  }
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                  }
                  uint64_t v81 = gprivacy_proxyLogObj;
                  if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_265;
                  }
                }
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = a1 + 531;
                *(_WORD *)&buf[12] = 2080;
                *(void *)&buf[14] = " ";
                *(_WORD *)&unsigned char buf[22] = 2048;
                id v101 = (const char *)v43;
                int v76 = "%{public}s%sADDRESS_ASSIGN capsule too short: %zu bytes";
                uint64_t v77 = v81;
                goto LABEL_263;
              }
              break;
            }
            if (*(unsigned char *)(a1 + 529)) {
              goto LABEL_265;
            }
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            uint64_t v75 = gprivacy_proxyLogObj;
            if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_265;
            }
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = a1 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = " ";
            int v76 = "%{public}s%sADDRESS_ASSIGN capsule failed to decode request ID";
            uint64_t v77 = v75;
            uint32_t v78 = 22;
            goto LABEL_264;
          case 2:
            if (*(unsigned char *)(a1 + 529)) {
              goto LABEL_266;
            }
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            uint64_t v16 = gprivacy_proxyLogObj;
            if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_266;
            }
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = a1 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = " ";
            BOOL v17 = "%{public}s%sADDRESS_REQUEST capsules not supported";
            goto LABEL_252;
          case 3:
            __int16 v99 = 0;
            memset(length, 0, sizeof(length));
            int v55 = &unk_1E8F6B000;
            while (2)
            {
              size_t v60 = dispatch_data_get_size(v6);
              if (v60 <= 9)
              {
                if (*(unsigned char *)(a1 + 529)) {
                  goto LABEL_265;
                }
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                int v79 = *((void *)v55 + 8);
                if (!os_log_type_enabled(v79, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_265;
                }
              }
              else
              {
                uint64_t address = 0;
                *(void *)&address_8.os_log_type_t sa_len = &address;
                *(void *)&address_8.sa_data[6] = 0x2000000000;
                uint64_t v109 = 0;
                *(void *)id v105 = 0;
                *(void *)&v105[8] = v105;
                *(void *)&v105[16] = 0x2000000000;
                id v106 = length;
                *(void *)int buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 0x40000000;
                *(void *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
                id v101 = (const char *)&unk_1E5242B60;
                *((void *)&v102 + 1) = v105;
                uint64_t v103 = 1;
                *(void *)&long long v102 = &address;
                dispatch_data_apply(v6, buf);
                _Block_object_dispose(v105, 8);
                _Block_object_dispose(&address, 8);
                if (length[0].sa_len != 6)
                {
                  if (length[0].sa_len != 4)
                  {
                    if (*(unsigned char *)(a1 + 529)) {
                      goto LABEL_265;
                    }
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                    }
                    BOOL v82 = *((void *)v55 + 8);
                    if (!os_log_type_enabled(v82, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_265;
                    }
                    *(_DWORD *)int buf = 136446722;
                    *(void *)&uint8_t buf[4] = a1 + 531;
                    *(_WORD *)&buf[12] = 2080;
                    *(void *)&buf[14] = " ";
                    *(_WORD *)&unsigned char buf[22] = 1024;
                    LODWORD(v101) = length[0].sa_len;
                    int v76 = "%{public}s%sUnknown ROUTE_ADVERTISEMENT version %u";
                    uint64_t v77 = v82;
                    uint32_t v78 = 28;
LABEL_264:
                    _os_log_impl(&dword_1830D4000, v77, OS_LOG_TYPE_ERROR, v76, buf, v78);
                    goto LABEL_265;
                  }
                  uint64_t address = 0;
                  *(void *)&address_8.os_log_type_t sa_len = &address;
                  *(void *)&address_8.sa_data[6] = 0x2000000000;
                  uint64_t v109 = 0;
                  *(void *)id v105 = 0;
                  *(void *)&v105[8] = v105;
                  *(void *)&v105[16] = 0x2000000000;
                  id v106 = length;
                  *(void *)int buf = MEMORY[0x1E4F143A8];
                  *(void *)&buf[8] = 0x40000000;
                  *(void *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
                  id v101 = (const char *)&unk_1E5242B60;
                  *((void *)&v102 + 1) = v105;
                  uint64_t v103 = 10;
                  *(void *)&long long v102 = &address;
                  dispatch_data_apply(v6, buf);
                  _Block_object_dispose(v105, 8);
                  _Block_object_dispose(&address, 8);
                  LODWORD(address) = 528;
                  HIDWORD(address) = *(_DWORD *)&length[0].sa_family;
                  *(void *)&address_8.os_log_type_t sa_len = 0;
                  *(_DWORD *)id v105 = 528;
                  *(_DWORD *)&v105[4] = *(_DWORD *)&length[0].sa_family;
                  *(void *)&v105[8] = 0;
                  nw_endpoint_t v61 = nw_endpoint_create_address((const sockaddr *)&address);
                  nw_endpoint_t v62 = nw_endpoint_create_address((const sockaddr *)v105);
                  if ((*(unsigned char *)(a1 + 529) & 1) == 0)
                  {
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                    }
                    __int16 v63 = *((void *)v55 + 8);
                    if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
                    {
                      __int16 v64 = nw_endpoint_get_logging_description(v61);
                      uint64_t v65 = nw_endpoint_get_logging_description(v62);
                      *(_DWORD *)int buf = 136446978;
                      *(void *)&uint8_t buf[4] = a1 + 531;
                      *(_WORD *)&buf[12] = 2080;
                      *(void *)&buf[14] = " ";
                      *(_WORD *)&unsigned char buf[22] = 2082;
                      id v101 = v64;
                      int v55 = &unk_1E8F6B000;
                      LOWORD(v102) = 2082;
                      *(void *)((char *)&v102 + 2) = v65;
                      _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_INFO, "%{public}s%sReceived ROUTE_ADVERTISEMENT capsule for %{public}s-%{public}s", buf, 0x2Au);
                    }
                  }
                  if (v61)
                  {
                    uint64_t v66 = *(void **)(a1 + 368);
                    if (v66) {
                      os_release(v66);
                    }
                    *(void *)(a1 + 368) = v61;
                  }
                  if (v62)
                  {
                    uint64_t v67 = *(void **)(a1 + 376);
                    if (v67) {
                      os_release(v67);
                    }
                    *(void *)(a1 + 376) = v62;
                  }
                  if (v60 < 0xB) {
                    goto LABEL_265;
                  }
                  size_t v56 = v60 - 10;
                  __int16 v57 = v6;
                  size_t v58 = 10;
LABEL_162:
                  dispatch_data_t v59 = dispatch_data_create_subrange(v57, v58, v56);
                  dispatch_release(v6);
                  uint64_t v6 = v59;
                  if (!v59) {
                    goto LABEL_265;
                  }
                  continue;
                }
                if (v60 > 0x21)
                {
                  uint64_t address = 0;
                  *(void *)&address_8.os_log_type_t sa_len = &address;
                  *(void *)&address_8.sa_data[6] = 0x2000000000;
                  uint64_t v109 = 0;
                  *(void *)id v105 = 0;
                  *(void *)&v105[8] = v105;
                  *(void *)&v105[16] = 0x2000000000;
                  id v106 = length;
                  *(void *)int buf = MEMORY[0x1E4F143A8];
                  *(void *)&buf[8] = 0x40000000;
                  *(void *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
                  id v101 = (const char *)&unk_1E5242B60;
                  *((void *)&v102 + 1) = v105;
                  uint64_t v103 = 34;
                  *(void *)&long long v102 = &address;
                  dispatch_data_apply(v6, buf);
                  _Block_object_dispose(v105, 8);
                  _Block_object_dispose(&address, 8);
                  uint64_t address = 7708;
                  sockaddr address_8 = *(sockaddr *)&length[0].sa_family;
                  LODWORD(v109) = 0;
                  *(void *)id v105 = 7708;
                  *(sockaddr *)&v105[8] = *(sockaddr *)&length[0].sa_family;
                  LODWORD(v106) = 0;
                  nw_endpoint_t v68 = nw_endpoint_create_address((const sockaddr *)&address);
                  nw_endpoint_t v69 = nw_endpoint_create_address((const sockaddr *)v105);
                  if ((*(unsigned char *)(a1 + 529) & 1) == 0)
                  {
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                    }
                    uint64_t v70 = *((void *)v55 + 8);
                    if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
                    {
                      __int16 v71 = nw_endpoint_get_logging_description(v68);
                      uint64_t v72 = nw_endpoint_get_logging_description(v69);
                      *(_DWORD *)int buf = 136446978;
                      *(void *)&uint8_t buf[4] = a1 + 531;
                      *(_WORD *)&buf[12] = 2080;
                      *(void *)&buf[14] = " ";
                      *(_WORD *)&unsigned char buf[22] = 2082;
                      id v101 = v71;
                      int v55 = &unk_1E8F6B000;
                      LOWORD(v102) = 2082;
                      *(void *)((char *)&v102 + 2) = v72;
                      _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_INFO, "%{public}s%sReceived ROUTE_ADVERTISEMENT capsule for %{public}s-%{public}s", buf, 0x2Au);
                    }
                  }
                  if (v68)
                  {
                    __int16 v73 = *(void **)(a1 + 368);
                    if (v73) {
                      os_release(v73);
                    }
                    *(void *)(a1 + 368) = v68;
                  }
                  if (v69)
                  {
                    uint64_t v74 = *(void **)(a1 + 376);
                    if (v74) {
                      os_release(v74);
                    }
                    *(void *)(a1 + 376) = v69;
                  }
                  if (v60 < 0x23) {
                    goto LABEL_265;
                  }
                  size_t v56 = v60 - 34;
                  __int16 v57 = v6;
                  size_t v58 = 34;
                  goto LABEL_162;
                }
                if (*(unsigned char *)(a1 + 529)) {
                  goto LABEL_265;
                }
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                int v79 = *((void *)v55 + 8);
                if (!os_log_type_enabled(v79, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_265;
                }
              }
              break;
            }
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = a1 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = " ";
            *(_WORD *)&unsigned char buf[22] = 2048;
            id v101 = (const char *)v60;
            int v76 = "%{public}s%sROUTE_ADVERTISEMENT capsule too short: %zu bytes";
            uint64_t v77 = v79;
LABEL_263:
            uint32_t v78 = 32;
            goto LABEL_264;
          default:
            goto LABEL_43;
        }
    }
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
  __int16 v83 = (char *)_os_log_send_and_compose_impl();
  length[0].os_log_type_t sa_len = 16;
  LOBYTE(address) = 0;
  if (!__nwlog_fault(v83, length, &address)) {
    goto LABEL_327;
  }
  if (length[0].sa_len == 17)
  {
    BOOL v84 = __nwlog_obj();
    os_log_type_t sa_len = length[0].sa_len;
    if (!os_log_type_enabled(v84, (os_log_type_t)length[0].sa_len)) {
      goto LABEL_327;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
    os_log_type_t v86 = "%{public}s called with null capsule_data";
    goto LABEL_326;
  }
  if (!(_BYTE)address)
  {
    BOOL v84 = __nwlog_obj();
    os_log_type_t sa_len = length[0].sa_len;
    if (!os_log_type_enabled(v84, (os_log_type_t)length[0].sa_len)) {
      goto LABEL_327;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
    os_log_type_t v86 = "%{public}s called with null capsule_data, backtrace limit exceeded";
    goto LABEL_326;
  }
  os_log_type_t v89 = (char *)__nw_create_backtrace_string();
  BOOL v84 = __nwlog_obj();
  os_log_type_t sa_len = length[0].sa_len;
  BOOL v93 = os_log_type_enabled(v84, (os_log_type_t)length[0].sa_len);
  if (!v89)
  {
    if (!v93) {
      goto LABEL_327;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
    os_log_type_t v86 = "%{public}s called with null capsule_data, no backtrace";
    goto LABEL_326;
  }
  if (v93)
  {
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v89;
    os_log_type_t v91 = "%{public}s called with null capsule_data, dumping backtrace:%{public}s";
    goto LABEL_307;
  }
LABEL_308:
  free(v89);
  if (v83) {
LABEL_328:
  }
    free(v83);
}

void nw_masque_mark_failed_with_error(uint64_t a1, int a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(_DWORD *)(a1 + 508) == 5) {
      return;
    }
    if ((*(unsigned char *)(a1 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      unint64_t v4 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v47 = (const char *)(a1 + 531);
        __int16 v48 = 2080;
        nw_endpoint_t v49 = " ";
        __int16 v50 = 1024;
        LODWORD(v51) = a2;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s%sClosing connection with error %{darwin.errno}d", buf, 0x1Cu);
      }
    }
    *(_DWORD *)(a1 + 508) = 5;
    uint64_t v5 = *(void *)(a1 + 256);
    do
    {
      if (!v5) {
        break;
      }
      uint64_t v6 = *(void *)(v5 + 16);
      char v7 = ___ZL32nw_masque_mark_failed_with_errorP9nw_masquei_block_invoke((uint64_t)&__block_literal_global_102, v5);
      uint64_t v5 = v6;
    }
    while ((v7 & 1) != 0);
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 24);
      if (v9)
      {
        os_log_type_t v10 = *(void (**)(void))(v9 + 56);
        if (!v10 || (v10(), (v11 = *(void *)(a1 + 48)) != 0) && (uint64_t v9 = *(void *)(v11 + 24)) != 0)
        {
          id v12 = *(void (**)(void))(v9 + 48);
          if (v12) {
            v12();
          }
        }
      }
    }
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 24);
      if (v14)
      {
        uint64_t v15 = *(void (**)(void))(v14 + 32);
        if (v15)
        {
          v15();
          return;
        }
      }
    }
    __nwlog_obj();
    uint64_t v16 = *(void *)(a1 + 32);
    BOOL v17 = "invalid";
    if (v16)
    {
      uint64_t v18 = *(const char **)(v16 + 16);
      if (v18) {
        BOOL v17 = v18;
      }
    }
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v47 = "nw_masque_mark_failed_with_error";
    __int16 v48 = 2082;
    nw_endpoint_t v49 = v17;
    uint64_t v19 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v19, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (!os_log_type_enabled(v20, type)) {
          goto LABEL_63;
        }
        uint64_t v22 = *(void *)(a1 + 32);
        int v23 = "invalid";
        if (v22)
        {
          size_t v24 = *(const char **)(v22 + 16);
          if (v24) {
            int v23 = v24;
          }
        }
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v47 = "nw_masque_mark_failed_with_error";
        __int16 v48 = 2082;
        nw_endpoint_t v49 = v23;
        unint64_t v25 = "%{public}s protocol %{public}s has invalid disconnect callback";
LABEL_62:
        _os_log_impl(&dword_1830D4000, v20, v21, v25, buf, 0x16u);
        goto LABEL_63;
      }
      if (!v44)
      {
        unsigned int v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (!os_log_type_enabled(v20, type)) {
          goto LABEL_63;
        }
        uint64_t v37 = *(void *)(a1 + 32);
        uint64_t v38 = "invalid";
        if (v37)
        {
          dispatch_data_t v39 = *(const char **)(v37 + 16);
          if (v39) {
            uint64_t v38 = v39;
          }
        }
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v47 = "nw_masque_mark_failed_with_error";
        __int16 v48 = 2082;
        nw_endpoint_t v49 = v38;
        unint64_t v25 = "%{public}s protocol %{public}s has invalid disconnect callback, backtrace limit exceeded";
        goto LABEL_62;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v31 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (!v31) {
          goto LABEL_63;
        }
        uint64_t v40 = *(void *)(a1 + 32);
        unint64_t v41 = "invalid";
        if (v40)
        {
          uint64_t v42 = *(const char **)(v40 + 16);
          if (v42) {
            unint64_t v41 = v42;
          }
        }
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v47 = "nw_masque_mark_failed_with_error";
        __int16 v48 = 2082;
        nw_endpoint_t v49 = v41;
        unint64_t v25 = "%{public}s protocol %{public}s has invalid disconnect callback, no backtrace";
        goto LABEL_62;
      }
      if (v31)
      {
        uint64_t v32 = *(void *)(a1 + 32);
        uint64_t v33 = "invalid";
        if (v32)
        {
          int v34 = *(const char **)(v32 + 16);
          if (v34) {
            uint64_t v33 = v34;
          }
        }
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v47 = "nw_masque_mark_failed_with_error";
        __int16 v48 = 2082;
        nw_endpoint_t v49 = v33;
        __int16 v50 = 2082;
        BOOL v51 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s has invalid disconnect callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
    }
LABEL_63:
    if (v19)
    {
      size_t v43 = (char *)v19;
LABEL_70:
      free(v43);
      return;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v47 = "nw_masque_mark_failed_with_error";
  int v26 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (__nwlog_fault(v26, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_68;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v47 = "nw_masque_mark_failed_with_error";
      int v29 = "%{public}s called with null masque";
LABEL_67:
      _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      goto LABEL_68;
    }
    if (!v44)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_68;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v47 = "nw_masque_mark_failed_with_error";
      int v29 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_67;
    }
    int v35 = (char *)__nw_create_backtrace_string();
    uint64_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v36 = os_log_type_enabled(v27, type);
    if (!v35)
    {
      if (!v36) {
        goto LABEL_68;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v47 = "nw_masque_mark_failed_with_error";
      int v29 = "%{public}s called with null masque, no backtrace";
      goto LABEL_67;
    }
    if (v36)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v47 = "nw_masque_mark_failed_with_error";
      __int16 v48 = 2082;
      nw_endpoint_t v49 = v35;
      _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v35);
  }
LABEL_68:
  if (v26)
  {
    size_t v43 = (char *)v26;
    goto LABEL_70;
  }
}

uint64_t ___ZL32nw_masque_mark_failed_with_errorP9nw_masquei_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

BOOL ___ZL24nw_masque_handle_capsuleP9nw_masqueP20nw_protocol_metadata_block_invoke(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4, const void *a5)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v46 = 0;
  nw_dispatch_data_copyout_from_offset(*(NSObject **)(a1 + 40), (uint64_t)&v46, 2, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  if (v46 != a2)
  {
    uint64_t v18 = *(void *)(a1 + 48);
    if (v18 && (*(unsigned char *)(v18 + 529) & 1) != 0) {
      return 0;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v19 = gprivacy_proxyLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v20 = *(void *)(a1 + 48);
    os_log_type_t v21 = (const char *)(v20 + 531);
    uint64_t v22 = "";
    if (!v20) {
      os_log_type_t v21 = "";
    }
    *(_DWORD *)int buf = 136446978;
    if (v20) {
      uint64_t v22 = " ";
    }
    __int16 v48 = v21;
    __int16 v49 = 2080;
    __int16 v50 = v22;
    __int16 v51 = 1024;
    int v52 = v46;
    __int16 v53 = 1024;
    unsigned int v54 = a2;
    int v23 = "%{public}s%sReceived pattern length (%u bytes) does not match actual pattern length (%u bytes)";
    goto LABEL_37;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += 2;
  unsigned __int16 v45 = 0;
  nw_dispatch_data_copyout_from_offset(*(NSObject **)(a1 + 40), (uint64_t)&v45, 2, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  if (v45 != a3)
  {
    uint64_t v24 = *(void *)(a1 + 48);
    if (v24 && (*(unsigned char *)(v24 + 529) & 1) != 0) {
      return 0;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v19 = gprivacy_proxyLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v25 = *(void *)(a1 + 48);
    int v26 = (const char *)(v25 + 531);
    uint64_t v27 = "";
    if (!v25) {
      int v26 = "";
    }
    *(_DWORD *)int buf = 136446978;
    if (v25) {
      uint64_t v27 = " ";
    }
    __int16 v48 = v26;
    __int16 v49 = 2080;
    __int16 v50 = v27;
    __int16 v51 = 1024;
    int v52 = v45;
    __int16 v53 = 1024;
    unsigned int v54 = a3;
    int v23 = "%{public}s%sReceived pattern offset (%u bytes) does not match actual pattern offset (%u bytes)";
LABEL_37:
    os_log_type_t v28 = v19;
    uint32_t v29 = 34;
LABEL_72:
    _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_ERROR, v23, buf, v29);
    return 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += 2;
  subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), a2);
  uint64_t v11 = (void *)*MEMORY[0x1E4F14400];
  id v12 = dispatch_data_create(a4, a2, 0, (dispatch_block_t)*MEMORY[0x1E4F14400]);
  BOOL is_equal = nw_dispatch_data_is_equal(subrange, v12);
  if (subrange) {
    dispatch_release(subrange);
  }
  if (v12) {
    dispatch_release(v12);
  }
  if (is_equal)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += a2;
    char v44 = 0;
    nw_dispatch_data_copyout_from_offset(*(NSObject **)(a1 + 40), (uint64_t)&v44, 1, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    if (v44 == (a5 != 0))
    {
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (!a5) {
        return 1;
      }
      uint64_t v14 = dispatch_data_create_subrange(*(dispatch_data_t *)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), a2);
      uint64_t v15 = dispatch_data_create(a5, a2, 0, v11);
      BOOL v16 = nw_dispatch_data_is_equal(v14, v15);
      if (v14) {
        dispatch_release(v14);
      }
      if (v15) {
        dispatch_release(v15);
      }
      if (v16)
      {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += a2;
        return 1;
      }
      uint64_t v41 = *(void *)(a1 + 48);
      if (v41 && (*(unsigned char *)(v41 + 529) & 1) != 0) {
        return 0;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v31 = gprivacy_proxyLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        uint64_t v42 = *(void *)(a1 + 48);
        BOOL v43 = v42 == 0;
        if (v42) {
          dispatch_data_t v39 = (const char *)(v42 + 531);
        }
        else {
          dispatch_data_t v39 = "";
        }
        uint64_t v40 = " ";
        if (v43) {
          uint64_t v40 = "";
        }
LABEL_70:
        *(_DWORD *)int buf = 136446466;
        __int16 v48 = v39;
        __int16 v49 = 2080;
        __int16 v50 = v40;
        int v23 = "%{public}s%sReceived pattern mask does not match actual pattern mask";
LABEL_71:
        os_log_type_t v28 = v31;
        uint32_t v29 = 22;
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v36 = *(void *)(a1 + 48);
      if (v36 && (*(unsigned char *)(v36 + 529) & 1) != 0) {
        return 0;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v31 = gprivacy_proxyLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        uint64_t v37 = *(void *)(a1 + 48);
        BOOL v38 = v37 == 0;
        if (v37) {
          dispatch_data_t v39 = (const char *)(v37 + 531);
        }
        else {
          dispatch_data_t v39 = "";
        }
        uint64_t v40 = " ";
        if (v38) {
          uint64_t v40 = "";
        }
        goto LABEL_70;
      }
    }
  }
  else
  {
    uint64_t v30 = *(void *)(a1 + 48);
    if (v30 && (*(unsigned char *)(v30 + 529) & 1) != 0) {
      return 0;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v31 = gprivacy_proxyLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
    if (result)
    {
      uint64_t v32 = *(void *)(a1 + 48);
      BOOL v33 = v32 == 0;
      if (v32) {
        int v34 = (const char *)(v32 + 531);
      }
      else {
        int v34 = "";
      }
      int v35 = " ";
      if (v33) {
        int v35 = "";
      }
      *(_DWORD *)int buf = 136446466;
      __int16 v48 = v34;
      __int16 v49 = 2080;
      __int16 v50 = v35;
      int v23 = "%{public}s%sReceived pattern does not match actual pattern";
      goto LABEL_71;
    }
  }
  return result;
}

void nw_masque_mark_connected(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 508);
  if (v2 == 5)
  {
    if ((*(unsigned char *)(a1 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      unint64_t v4 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        int v20 = 136446466;
        os_log_type_t v21 = (const char *)(a1 + 531);
        __int16 v22 = 2080;
        int v23 = " ";
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s%sAlready in the disconnected state", (uint8_t *)&v20, 0x16u);
      }
    }
  }
  else
  {
    if (v2 == 4)
    {
      if ((*(unsigned char *)(a1 + 529) & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v3 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v20 = 136446722;
          os_log_type_t v21 = "nw_masque_mark_connected";
          __int16 v22 = 2082;
          int v23 = (const char *)(a1 + 531);
          __int16 v24 = 2080;
          uint64_t v25 = " ";
          _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAlready in the connected state", (uint8_t *)&v20, 0x20u);
        }
      }
      return;
    }
    uint64_t v5 = (_DWORD *)(a1 + 527);
    int v6 = *(_DWORD *)(a1 + 527);
    if ((v6 & 0x20) != 0 && (!*(void *)(a1 + 360) || !*(void *)(a1 + 368) || !*(void *)(a1 + 376)))
    {
      if ((v6 & 0x10000) != 0) {
        goto LABEL_56;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v8 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_56;
      }
      int v20 = 136446466;
      os_log_type_t v21 = (const char *)(a1 + 531);
      __int16 v22 = 2080;
      int v23 = " ";
      uint64_t v9 = "%{public}s%sCONNECT-IP waiting for addresses, not marking ready yet";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, v9, (uint8_t *)&v20, 0x16u);
LABEL_56:
      *(_DWORD *)(a1 + 508) = 3;
      return;
    }
    if ((v6 & 8) != 0 && (v6 & 0x200) == 0)
    {
      uint64_t v19 = *(void **)(a1 + 448);
      if (v19)
      {
        if (nw_masque_send_demux_options(a1, v19, 1)) {
          *v5 |= 0x200u;
        }
        goto LABEL_56;
      }
    }
    if ((v6 & 0x100000) != 0 && ((v6 & 0x8000080) == 0x8000000 || (v6 & 0x4000100) == 0x4000000))
    {
      if ((v6 & 0x10000) != 0) {
        goto LABEL_56;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v8 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_56;
      }
      int v20 = 136446466;
      os_log_type_t v21 = (const char *)(a1 + 531);
      __int16 v22 = 2080;
      int v23 = " ";
      uint64_t v9 = "%{public}s%swaiting for ACK capsules, not marking ready yet";
      goto LABEL_35;
    }
    *(_DWORD *)(a1 + 508) = 4;
    if ((v6 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      os_log_type_t v10 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        int v20 = 136446466;
        os_log_type_t v21 = (const char *)(a1 + 531);
        __int16 v22 = 2080;
        int v23 = " ";
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s%smarking connected", (uint8_t *)&v20, 0x16u);
      }
    }
    if ((*(unsigned char *)(a1 + 529) & 0x40) != 0)
    {
      uint64_t v11 = *(void *)(a1 + 256);
      do
      {
        if (!v11) {
          break;
        }
        uint64_t v12 = *(void *)(v11 + 16);
        char v13 = ___ZL24nw_masque_mark_connectedP9nw_masque_block_invoke((uint64_t)&__block_literal_global_86, v11);
        uint64_t v11 = v12;
      }
      while ((v13 & 1) != 0);
    }
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 24);
      if (v15)
      {
        BOOL v16 = *(void (**)(void))(v15 + 40);
        if (!v16 || (v16(), (v17 = *(void *)(a1 + 48)) != 0) && (uint64_t v15 = *(void *)(v17 + 24)) != 0)
        {
          uint64_t v18 = *(void (**)(void))(v15 + 72);
          if (v18) {
            v18();
          }
        }
      }
    }
  }
}

uint64_t nw_masque_send_demux_options(uint64_t a1, void *a2, char a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
    int v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v29[0]) = 0;
    if (!__nwlog_fault(v20, type, v29)) {
      goto LABEL_62;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!LOBYTE(v29[0]))
      {
        os_log_type_t v21 = __nwlog_obj();
        os_log_type_t v22 = type[0];
        if (!os_log_type_enabled(v21, type[0])) {
          goto LABEL_62;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
        int v23 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_61;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      BOOL v25 = os_log_type_enabled(v21, type[0]);
      if (!backtrace_string)
      {
        if (!v25) {
          goto LABEL_62;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
        int v23 = "%{public}s called with null masque, no backtrace";
        goto LABEL_61;
      }
      if (v25)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v26 = "%{public}s called with null masque, dumping backtrace:%{public}s";
LABEL_51:
        _os_log_impl(&dword_1830D4000, v21, v22, v26, buf, 0x16u);
      }
LABEL_52:
      free(backtrace_string);
      goto LABEL_62;
    }
    os_log_type_t v21 = __nwlog_obj();
    os_log_type_t v22 = type[0];
    if (!os_log_type_enabled(v21, type[0])) {
      goto LABEL_62;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
    int v23 = "%{public}s called with null masque";
LABEL_61:
    _os_log_impl(&dword_1830D4000, v21, v22, v23, buf, 0xCu);
LABEL_62:
    if (v20) {
      free(v20);
    }
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
    int v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v29[0]) = 0;
    if (!__nwlog_fault(v20, type, v29)) {
      goto LABEL_62;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_62;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
      int v23 = "%{public}s called with null demux_options";
      goto LABEL_61;
    }
    if (!LOBYTE(v29[0]))
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_62;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
      int v23 = "%{public}s called with null demux_options, backtrace limit exceeded";
      goto LABEL_61;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v21 = __nwlog_obj();
    os_log_type_t v22 = type[0];
    BOOL v27 = os_log_type_enabled(v21, type[0]);
    if (backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v26 = "%{public}s called with null demux_options, dumping backtrace:%{public}s";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v27) {
      goto LABEL_62;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
    int v23 = "%{public}s called with null demux_options, no backtrace";
    goto LABEL_61;
  }
  int v5 = *(_DWORD *)(a1 + 508);
  if (a3)
  {
    if (v5 == 5)
    {
      if ((*(unsigned char *)(a1 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        int v6 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = a1 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = " ";
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s%sCannot send demux options in disconnected state", buf, 0x16u);
        }
      }
      return 0;
    }
  }
  else if (v5 != 4)
  {
    return 0;
  }
  char v7 = (int *)(a1 + 527);
  int v8 = *(_DWORD *)(a1 + 527);
  if ((v8 & 8) == 0) {
    return 0;
  }
  if ((v8 & 0x2000000) == 0 && nw_masque_setup_demux(a1, 1) && nw_masque_setup_demux(a1, 0)) {
    *v7 |= 0x2000000u;
  }
  *(void *)os_log_type_t type = 0;
  uint64_t v32 = type;
  uint64_t v33 = 0x2000000000;
  uint64_t v34 = 0;
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 0x40000000;
  v30[2] = ___ZL28nw_masque_send_demux_optionsP9nw_masqueP19nw_protocol_optionsb_block_invoke;
  void v30[3] = &unk_1E523E530;
  void v30[4] = type;
  *(void *)int buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = __nw_demux_options_enumerate_patterns_block_invoke;
  uint64_t v36 = (const char *)&unk_1E523DFE8;
  uint64_t v37 = v30;
  nw_protocol_options_access_handle(a2, buf);
  v29[4] = 0;
  alloc = dispatch_data_create_alloc();
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x2000000000;
  v29[3] = 0;
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 0x40000000;
  v28[2] = ___ZL28nw_masque_send_demux_optionsP9nw_masqueP19nw_protocol_optionsb_block_invoke_2;
  void v28[3] = &unk_1E523E558;
  v28[4] = v29;
  *(void *)int buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = __nw_demux_options_enumerate_patterns_block_invoke;
  uint64_t v36 = (const char *)&unk_1E523DFE8;
  uint64_t v37 = v28;
  nw_protocol_options_access_handle(a2, buf);
  metadata_for_capsule = nw_http_create_metadata_for_capsule(16770304, alloc);
  uint64_t v9 = nw_masque_send_metadata(a1, (uint64_t)metadata_for_capsule, *(void *)(a1 + 32));
  int v12 = *v7;
  if (v9)
  {
    if ((v12 & 0x10000) != 0) {
      goto LABEL_29;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v13 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_29;
    }
    *(_DWORD *)int buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_masque_send_demux_options";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = a1 + 531;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v36 = " ";
    uint64_t v14 = "%{public}s %{public}s%sSent REGISTER_DEMUX_PATTERN capsule";
    uint64_t v15 = v13;
    os_log_type_t v16 = OS_LOG_TYPE_DEBUG;
    uint32_t v17 = 32;
  }
  else
  {
    if ((v12 & 0x10000) != 0) {
      goto LABEL_29;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v18 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_29;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = a1 + 531;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = " ";
    uint64_t v14 = "%{public}s%sFailed to send REGISTER_DEMUX_PATTERN capsule";
    uint64_t v15 = v18;
    os_log_type_t v16 = OS_LOG_TYPE_ERROR;
    uint32_t v17 = 22;
  }
  _os_log_impl(&dword_1830D4000, v15, v16, v14, buf, v17);
LABEL_29:
  if (alloc) {
    dispatch_release(alloc);
  }
  if (metadata_for_capsule) {
    os_release(metadata_for_capsule);
  }
  _Block_object_dispose(v29, 8);
  _Block_object_dispose(type, 8);
  return v9;
}

uint64_t ___ZL24nw_masque_mark_connectedP9nw_masque_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t ___ZL28nw_masque_send_demux_optionsP9nw_masqueP19nw_protocol_optionsb_block_invoke(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += a2 + 4;
  if (a5) {
    uint64_t v5 = a2 + 1;
  }
  else {
    uint64_t v5 = 1;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v5;
  return 1;
}

uint64_t ___ZL28nw_masque_send_demux_optionsP9nw_masqueP19nw_protocol_optionsb_block_invoke_2(uint64_t a1, size_t __n, __int16 a3, void *__src, const void *a5)
{
  **(_WORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = __n;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += 2;
  **(_WORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += 2;
  size_t v7 = __n;
  memcpy(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), __src, __n);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v7;
  int v8 = *(unsigned char **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (a5)
  {
    *int v8 = 1;
    memcpy((void *)++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), a5, v7);
  }
  else
  {
    *int v8 = 0;
    size_t v7 = 1;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v7;
  return 1;
}

uint64_t nw_protocol_masque_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t handle = a1->handle;
    if (handle)
    {
      uint64_t v36 = 0;
      uint64_t v37 = &v36;
      tqh_first = a2->tqh_first;
      if (a2->tqh_first)
      {
        *((void *)tqh_first + 5) = &v36;
        tqh_last = a2->tqh_last;
        uint64_t v36 = tqh_first;
        uint64_t v37 = tqh_last;
        a2->tqh_first = 0;
        a2->tqh_last = &a2->tqh_first;
      }
      if (*((void *)handle + 32))
      {
        int v6 = handle[127];
        if (v6 == 1 || v6 == 2 && (*(_DWORD *)((char *)handle + 527) & 0x600000) == 0x200000)
        {
          *(void *)int buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2000000000;
          char v39 = 0;
          v30[0] = MEMORY[0x1E4F143A8];
          v30[1] = 0x40000000;
          uint64_t v31 = (uint64_t (*)(void *))___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
          uint64_t v32 = &unk_1E523E8F0;
          uint64_t v33 = buf;
          uint64_t v34 = handle;
          int v35 = a1;
          do
          {
            size_t v7 = v36;
            if (!v36) {
              break;
            }
            uint64_t v8 = *((void *)v36 + 4);
            uint64_t v9 = (void *)*((void *)v36 + 5);
            if (v8)
            {
              *(void *)(v8 + 40) = v9;
              uint64_t v9 = (void *)*((void *)v7 + 5);
            }
            else
            {
              uint64_t v37 = (nw_frame **)*((void *)v36 + 5);
            }
            void *v9 = v8;
            *((void *)v7 + 4) = 0;
            *((void *)v7 + 5) = 0;
          }
          while ((v31(v30) & 1) != 0);
          _Block_object_dispose(buf, 8);
        }
      }
      *(void *)int buf = 0;
      *(void *)&buf[8] = buf;
      v29[0] = 0;
      v29[1] = v29;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 0x40000000;
      int v23 = ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_138;
      __int16 v24 = &__block_descriptor_tmp_143;
      BOOL v25 = handle;
      uint64_t v26 = buf;
      BOOL v27 = a1;
      os_log_type_t v28 = v29;
      do
      {
        uint64_t v11 = v36;
        if (!v36) {
          break;
        }
        uint64_t v12 = *((void *)v36 + 4);
        os_log_type_t v10 = (void *)*((void *)v36 + 5);
        if (v12)
        {
          *(void *)(v12 + 40) = v10;
          os_log_type_t v10 = (void *)*((void *)v11 + 5);
        }
        else
        {
          uint64_t v37 = (nw_frame **)*((void *)v36 + 5);
        }
        void *v10 = v12;
        *((void *)v11 + 4) = 0;
        *((void *)v11 + 5) = 0;
      }
      while ((((uint64_t (*)(void *))v23)(v22) & 1) != 0);
      if (v29[0]) {
        (*(void (**)(void))(*(void *)(*((void *)handle + 28) + 24) + 96))();
      }
      if (*(void *)buf) {
        ((void (*)(void))a1->output_handler->callbacks->finalize_output_frames)();
      }
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v36) = 16;
    LOBYTE(v29[0]) = 0;
    if (!__nwlog_fault(v14, &v36, v29)) {
      goto LABEL_55;
    }
    if (v36 == 17)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = v36;
      if (os_log_type_enabled(v15, (os_log_type_t)v36))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames";
        uint32_t v17 = "%{public}s called with null masque";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (!LOBYTE(v29[0]))
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = v36;
      if (os_log_type_enabled(v15, (os_log_type_t)v36))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames";
        uint32_t v17 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v15 = __nwlog_obj();
    os_log_type_t v16 = v36;
    BOOL v21 = os_log_type_enabled(v15, (os_log_type_t)v36);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames";
        uint32_t v17 = "%{public}s called with null masque, no backtrace";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (v21)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      int v20 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames";
  uint64_t v14 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(v36) = 16;
  LOBYTE(v29[0]) = 0;
  if (!__nwlog_fault(v14, &v36, v29)) {
    goto LABEL_55;
  }
  if (v36 != 17)
  {
    if (!LOBYTE(v29[0]))
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = v36;
      if (os_log_type_enabled(v15, (os_log_type_t)v36))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames";
        uint32_t v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v15 = __nwlog_obj();
    os_log_type_t v16 = v36;
    BOOL v19 = os_log_type_enabled(v15, (os_log_type_t)v36);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames";
        uint32_t v17 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (v19)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      int v20 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v15, v16, v20, buf, 0x16u);
    }
LABEL_45:
    free(backtrace_string);
    goto LABEL_55;
  }
  uint64_t v15 = __nwlog_obj();
  os_log_type_t v16 = v36;
  if (os_log_type_enabled(v15, (os_log_type_t)v36))
  {
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames";
    uint32_t v17 = "%{public}s called with null protocol";
LABEL_54:
    _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
  }
LABEL_55:
  if (v14) {
    free(v14);
  }
  return 0;
}

uint64_t ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    uint64_t v4 = a1[5];
    goto LABEL_4;
  }
  uint64_t finalizer_context = nw_frame_get_finalizer_context(a2);
  uint64_t v4 = a1[5];
  if (finalizer_context != v4)
  {
LABEL_4:
    if (!v4 || (*(unsigned char *)(v4 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      int v6 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = a1[5];
        BOOL v8 = v7 == 0;
        if (v7) {
          uint64_t v9 = (const char *)(v7 + 531);
        }
        else {
          uint64_t v9 = "";
        }
        os_log_type_t v10 = " ";
        if (v8) {
          os_log_type_t v10 = "";
        }
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v10;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s%sReceived invalid early output frame", buf, 0x16u);
      }
    }
    uint64_t v11 = a2;
    goto LABEL_16;
  }
  *(_DWORD *)(finalizer_context + 527) |= 0x200000u;
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  unsigned int v103 = 0;
  uint64_t v13 = (unsigned __int8 *)nw_frame_unclaimed_bytes(a2, &v103);
  uint64_t v14 = a1[5];
  if (*(_DWORD *)(v14 + 508) == 1)
  {
    if ((*(unsigned char *)(v14 + 528) & 8) == 0) {
      goto LABEL_85;
    }
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    id v15 = (id)nw_protocol_copy_http_definition_http_definition;
    os_log_type_t v16 = nw_frame_copy_metadata_for_protocol(a2, (uint64_t)v15);
    if (v15) {
      os_release(v15);
    }
    uint64_t v14 = a1[5];
    if (!v16) {
      goto LABEL_85;
    }
    if ((!v14 || (*(unsigned char *)(v14 + 529) & 1) == 0) && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      int v79 = gprivacy_proxyLogObj;
      BOOL v80 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
      uint64_t v14 = a1[5];
      if (v80)
      {
        uint64_t v81 = (const char *)(v14 + 531);
        if (!v14) {
          uint64_t v81 = "";
        }
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v81;
        if (v14) {
          BOOL v82 = " ";
        }
        else {
          BOOL v82 = "";
        }
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v118 = (uint64_t (*)(uint64_t, uint64_t))v82;
        LOWORD(v119) = 1024;
        *(_DWORD *)((char *)&v119 + 2) = v103;
        _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived HTTP message to proxy, with %u bytes", buf, 0x26u);
        uint64_t v14 = a1[5];
      }
    }
    *(_DWORD *)(v14 + 527) |= 0x1000u;
    uint64_t v17 = a1[5];
    if (v17)
    {
      uint64_t v18 = mach_continuous_time();
      if (v18 <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = v18;
      }
      *(void *)(v17 + 288) = v19;
      id v20 = nw_http_metadata_copy_request(v16);
      if (!v20)
      {
        if ((*(unsigned char *)(v17 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint32_t v29 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = v17 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = " ";
            _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_ERROR, "%{public}s%sHTTP message is not a request", buf, 0x16u);
          }
        }
        nw_masque_mark_failed_with_error(v17, 22);
        goto LABEL_84;
      }
      BOOL v21 = v20;
      if (!nw_http_request_has_method(v20, (uint64_t)"POST"))
      {
        if ((*(unsigned char *)(v17 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v30 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = v17 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = " ";
            _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_ERROR, "%{public}s%sUnsupported method", buf, 0x16u);
          }
        }
        nw_masque_mark_failed_with_error(v17, 45);
        goto LABEL_83;
      }
      if (*(void *)(v17 + 320))
      {
        os_log_type_t v22 = *(void **)(v17 + 344);
        if (v22)
        {
          int v23 = nw_protocol_options_copy_proxy_endpoint(v22);
          if (v23)
          {
            __int16 v24 = v23;
            if (nw_endpoint_get_type(v23) == nw_endpoint_type_url)
            {
              BOOL v25 = nw_parameters_copy_url_endpoint(*(void **)(v17 + 320));
              if (v25)
              {
                uint64_t v26 = v25;
                uint64_t v110 = 0;
                hostname = nw_endpoint_get_hostname(v24);
                int port = nw_endpoint_get_port(v24);
                asprintf(&v110, "%s:%u", hostname, port);
                uint64_t v109 = 0;
                nw_endpoint_get_url_path(v24);
                nw_endpoint_get_url_path(v26);
                int v89 = nw_endpoint_get_port(v26);
                BOOL object = nw_endpoint_copy_host_port_endpoint_for_url(v24);
                BOOL v91 = nw_endpoint_copy_host_port_endpoint_for_url(v26);
                if (nw_endpoint_is_equal((void *)object, (void *)v91, 0))
                {
                  asprintf(&v109, "%s");
                }
                else
                {
                  nw_endpoint_get_hostname(v26);
                  if (v89 == 443) {
                    asprintf(&v109, "%s?targethost=%s&targetpath=%s");
                  }
                  else {
                    asprintf(&v109, "%s?targethost=%s:%u&targetpath=%s");
                  }
                }
                uint64_t url_scheme = nw_endpoint_get_url_scheme(v26);
                *(void *)int buf = 0;
                *(void *)&buf[8] = buf;
                *(void *)&buf[16] = 0x3802000000;
                uint64_t v118 = __Block_byref_object_copy__27583;
                id v119 = __Block_byref_object_dispose__27584;
                uint64_t v120 = _nw_http_request_create("POST", url_scheme, v110, v109);
                v121 |= 1u;
                if (v110)
                {
                  free(v110);
                  uint64_t v110 = 0;
                }
                if (v109)
                {
                  free(v109);
                  uint64_t v109 = 0;
                }
                if (object) {
                  os_release((void *)object);
                }
                if (v91) {
                  os_release((void *)v91);
                }
                os_release(v26);
                os_release(v24);
                *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
                uint64_t v105 = 0x40000000;
                id v106 = ___ZL30nw_masque_send_proxied_messageP9nw_masqueP20nw_protocol_metadata_block_invoke;
                id v107 = &unk_1E523E988;
                uint64_t v108 = buf;
                nw_http_request_access_extended_connect_protocol(v21, type);
                nw_http_request_set_header_fields(*(void **)(*(void *)&buf[8] + 40), v21);
                if (nw_masque_add_extra_headers_to_request(v17, *(void **)(*(void *)&buf[8] + 40)))
                {
                  nw_http_metadata_set_request(v16, *(void **)(*(void *)&buf[8] + 40));
                  if (nw_masque_send_metadata(v17, (uint64_t)v16, *(void *)(v17 + 32)))
                  {
                    if ((*(unsigned char *)(v17 + 529) & 1) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                      }
                      uint64_t v65 = gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)os_log_type_t v111 = 136446722;
                        BOOL v112 = "nw_masque_send_proxied_message";
                        __int16 v113 = 2082;
                        uint64_t v114 = v17 + 531;
                        __int16 v115 = 2080;
                        os_log_type_t v116 = " ";
                        _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSent request", v111, 0x20u);
                      }
                    }
                    nw_masque_mark_connected(v17);
                  }
                  else
                  {
                    nw_masque_mark_failed_with_error(v17, 12);
                  }
                }
                _Block_object_dispose(buf, 8);
                if ((v121 & 1) == 0) {
                  goto LABEL_83;
                }
                char v39 = (void *)v120;
                if (!v120) {
                  goto LABEL_83;
                }
                goto LABEL_82;
              }
              if (*(unsigned char *)(v17 + 529)) {
                goto LABEL_81;
              }
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
              }
              uint64_t v38 = gprivacy_proxyLogObj;
              if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
              {
LABEL_81:
                nw_masque_mark_failed_with_error(v17, 22);
                char v39 = v24;
LABEL_82:
                os_release(v39);
                goto LABEL_83;
              }
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = v17 + 531;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = " ";
              int v35 = "%{public}s%sURL endpoint not found";
              uint64_t v36 = v38;
              uint32_t v37 = 22;
            }
            else
            {
              if (*(unsigned char *)(v17 + 529)) {
                goto LABEL_81;
              }
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
              }
              uint64_t v33 = gprivacy_proxyLogObj;
              if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
                goto LABEL_81;
              }
              logging_description = nw_endpoint_get_logging_description(v24);
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = v17 + 531;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = " ";
              *(_WORD *)&unsigned char buf[22] = 2082;
              uint64_t v118 = (uint64_t (*)(uint64_t, uint64_t))logging_description;
              int v35 = "%{public}s%sProxy endpoint %{public}s is not of type URL";
              uint64_t v36 = v33;
              uint32_t v37 = 32;
            }
            _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, v35, buf, v37);
            goto LABEL_81;
          }
          if (*(unsigned char *)(v17 + 529)) {
            goto LABEL_69;
          }
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v31 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
LABEL_69:
            nw_masque_mark_failed_with_error(v17, 22);
LABEL_83:
            os_release(v21);
LABEL_84:
            os_release(v16);
            uint64_t v14 = a1[5];
LABEL_85:
            int v40 = *(_DWORD *)(v14 + 527);
            if ((v40 & 0x1000) == 0)
            {
              if ((v40 & 0x10000) == 0 && gLogDatapath)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                uint64_t v66 = gprivacy_proxyLogObj;
                BOOL v67 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
                uint64_t v14 = a1[5];
                if (v67)
                {
                  nw_endpoint_t v68 = (const char *)(v14 + 531);
                  if (!v14) {
                    nw_endpoint_t v68 = "";
                  }
                  *(_DWORD *)int buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v68;
                  if (v14) {
                    nw_endpoint_t v69 = " ";
                  }
                  else {
                    nw_endpoint_t v69 = "";
                  }
                  *(_WORD *)&unsigned char buf[22] = 2080;
                  uint64_t v118 = (uint64_t (*)(uint64_t, uint64_t))v69;
                  LOWORD(v119) = 1024;
                  *(_DWORD *)((char *)&v119 + 2) = v103;
                  _os_log_impl(&dword_1830D4000, v66, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived early output %u bytes", buf, 0x26u);
                  uint64_t v14 = a1[5];
                }
              }
              if (v103 >= 7 && !*(void *)(v14 + 384))
              {
                unsigned int v58 = *v13;
                if (v58 >= 0xC0 && (v58 & 0x30) == 0)
                {
                  unint64_t v59 = v13[5];
                  if (v59 <= 0x14)
                  {
                    unint64_t v60 = v59 + 7;
                    if (v59 + 7 < v103)
                    {
                      nw_endpoint_t v61 = &v13[v59];
                      size_t v62 = v61[6];
                      if ((v62 - 1) <= 0x13 && v60 + v62 < v103)
                      {
                        *(void *)(a1[5] + 384) = dispatch_data_create(v61 + 7, v61[6], 0, 0);
                        uint64_t v63 = a1[5];
                        if (*(_DWORD *)(v63 + 504) == 2
                          && (*(void *)int buf = 0,
                              *(void *)(a1[5] + 400) = dispatch_data_create_alloc(),
                              arc4random_buf(*(void **)buf, v62),
                              (uint64_t v63 = a1[5]) == 0)
                          || (*(unsigned char *)(v63 + 529) & 1) == 0)
                        {
                          if (gLogDatapath)
                          {
                            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                            }
                            id v85 = gprivacy_proxyLogObj;
                            BOOL v86 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
                            uint64_t v63 = a1[5];
                            if (v86)
                            {
                              BOOL v87 = (const char *)(v63 + 531);
                              if (!v63) {
                                BOOL v87 = "";
                              }
                              *(_DWORD *)int buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = v87;
                              BOOL v88 = " ";
                              if (!v63) {
                                BOOL v88 = "";
                              }
                              *(_WORD *)&unsigned char buf[22] = 2080;
                              uint64_t v118 = (uint64_t (*)(uint64_t, uint64_t))v88;
                              LOWORD(v119) = 1024;
                              *(_DWORD *)((char *)&v119 + 2) = v62;
                              _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected a client CID of length %u", buf, 0x26u);
                              uint64_t v63 = a1[5];
                            }
                          }
                        }
                        nw_masque_setup_demux(v63, 1);
                        uint64_t v14 = a1[5];
                      }
                    }
                  }
                }
              }
              nw_masque_send_connect(v14);
              uint64_t v14 = a1[5];
            }
            goto LABEL_91;
          }
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = v17 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = " ";
          uint64_t v32 = "%{public}s%sProxy endpoint not found";
        }
        else
        {
          if (*(unsigned char *)(v17 + 529)) {
            goto LABEL_69;
          }
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v31 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
            goto LABEL_69;
          }
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = v17 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = " ";
          uint64_t v32 = "%{public}s%sOptions not found";
        }
      }
      else
      {
        if (*(unsigned char *)(v17 + 529)) {
          goto LABEL_69;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v31 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_69;
        }
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = v17 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = " ";
        uint64_t v32 = "%{public}s%sParameters not found";
      }
      _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_ERROR, v32, buf, 0x16u);
      goto LABEL_69;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_send_proxied_message";
    uint64_t v75 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v111[0] = 0;
    if (__nwlog_fault(v75, type, v111))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        int v76 = __nwlog_obj();
        os_log_type_t v77 = type[0];
        if (!os_log_type_enabled(v76, type[0])) {
          goto LABEL_199;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_send_proxied_message";
        uint32_t v78 = "%{public}s called with null masque";
        goto LABEL_198;
      }
      if (!v111[0])
      {
        int v76 = __nwlog_obj();
        os_log_type_t v77 = type[0];
        if (!os_log_type_enabled(v76, type[0])) {
          goto LABEL_199;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_send_proxied_message";
        uint32_t v78 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_198;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v76 = __nwlog_obj();
      os_log_type_t v77 = type[0];
      BOOL v84 = os_log_type_enabled(v76, type[0]);
      if (backtrace_string)
      {
        if (v84)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_send_proxied_message";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v76, v77, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_199;
      }
      if (v84)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_send_proxied_message";
        uint32_t v78 = "%{public}s called with null masque, no backtrace";
LABEL_198:
        _os_log_impl(&dword_1830D4000, v76, v77, v78, buf, 0xCu);
      }
    }
LABEL_199:
    if (v75) {
      free(v75);
    }
    goto LABEL_84;
  }
LABEL_91:
  int v41 = *(_DWORD *)(v14 + 508);
  if (v41 != 5 && v103 != 0 && v13 != 0)
  {
    *(void *)os_log_type_t type = 0;
    uint64_t v105 = (uint64_t)type;
    uint64_t v44 = *(void *)(a1[6] + 32);
    if ((*(unsigned int (**)(uint64_t))(*(void *)(v44 + 24) + 88))(v44))
    {
      char is_metadata_complete = nw_frame_is_metadata_complete(a2);
      unsigned int v46 = *(unsigned __int8 *)(a2 + 186);
      v92[0] = MEMORY[0x1E4F143A8];
      v92[1] = 0x40000000;
      BOOL v93 = ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_135;
      char v94 = &__block_descriptor_tmp_136;
      unsigned int v100 = v103;
      uint64_t v47 = a1[6];
      uint64_t v95 = a1[5];
      uint64_t v96 = type;
      __int16 v97 = v13;
      uint64_t v98 = a2;
      uint64_t v99 = v47;
      char v101 = v46 >> 7;
      char v102 = is_metadata_complete;
      uint64_t v48 = *(void *)type;
      do
      {
        if (!v48) {
          break;
        }
        uint64_t v49 = *(void *)(v48 + 32);
        char v50 = ((uint64_t (*)(void *))v93)(v92);
        uint64_t v48 = v49;
      }
      while ((v50 & 1) != 0);
      if (*(void *)type)
      {
        uint64_t v51 = a1[5];
        if ((!v51 || (*(unsigned char *)(v51 + 529) & 1) == 0) && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v70 = gprivacy_proxyLogObj;
          BOOL v71 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
          uint64_t v51 = a1[5];
          if (v71)
          {
            BOOL v72 = v51 == 0;
            if (v51) {
              __int16 v73 = (const char *)(v51 + 531);
            }
            else {
              __int16 v73 = "";
            }
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v73;
            if (v72) {
              uint64_t v74 = "";
            }
            else {
              uint64_t v74 = " ";
            }
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v118 = (uint64_t (*)(uint64_t, uint64_t))v74;
            LOWORD(v119) = 1024;
            *(_DWORD *)((char *)&v119 + 2) = v103;
            _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSending %u early bytes", buf, 0x26u);
            uint64_t v51 = a1[5];
          }
        }
        *(_DWORD *)(v51 + 527) |= 0x400000u;
        (*(void (**)(uint64_t, os_log_type_t *))(*(void *)(v44 + 24) + 96))(v44, type);
      }
    }
    else
    {
      uint64_t v52 = a1[5];
      if (!v52 || (*(unsigned char *)(v52 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        __int16 v53 = gprivacy_proxyLogObj;
        BOOL v54 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
        uint64_t v52 = a1[5];
        if (v54)
        {
          BOOL v55 = v52 == 0;
          if (v52) {
            size_t v56 = (const char *)(v52 + 531);
          }
          else {
            size_t v56 = "";
          }
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = v56;
          __int16 v57 = " ";
          if (v55) {
            __int16 v57 = "";
          }
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v57;
          *(_WORD *)&unsigned char buf[22] = 1024;
          LODWORD(v118) = v103;
          _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_ERROR, "%{public}s%sUnable to send %u early bytes", buf, 0x1Cu);
          uint64_t v52 = a1[5];
        }
      }
      if ((*(unsigned char *)(v52 + 527) & 8) != 0) {
        nw_frame_finalize(a2);
      }
    }
    int v41 = *(_DWORD *)(a1[5] + 508);
  }
  if (v41 == 4)
  {
    uint64_t v11 = a2;
LABEL_16:
    nw_frame_finalize(v11);
  }
  return 1;
}

uint64_t ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_138(uint64_t a1, uint64_t a2)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  unsigned int v138 = 0;
  uint64_t v4 = (unsigned char *)nw_frame_unclaimed_bytes(a2, &v138);
  uint64_t finalizer_context = nw_frame_get_finalizer_context(a2);
  uint64_t v6 = *(void *)(a1 + 32);
  if (finalizer_context == v6)
  {
    uint64_t v21 = finalizer_context;
    *(void *)BOOL v156 = 0;
    *(void *)&v156[8] = v156;
    uint64_t v22 = *(void *)(a1 + 40);
    uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 32);
    if (*(void *)(finalizer_context + 224))
    {
      __int16 v24 = *(NSObject **)(finalizer_context + 392);
      if (v24)
      {
        size_t size = dispatch_data_get_size(v24);
        if (size + 1 < v138)
        {
          size_t v26 = size;
          BOOL v27 = *(NSObject **)(v21 + 408);
          if ((!v27 || dispatch_data_get_size(v27) == v26) && (*v4 & 0xC0) == 0x40)
          {
            os_log_type_t v28 = dispatch_data_create(v4 + 1, v26, 0, (dispatch_block_t)*MEMORY[0x1E4F14400]);
            if (nw_dispatch_data_is_equal(v28, *(NSObject **)(*(void *)(a1 + 32) + 392)))
            {
              uint64_t v29 = *(void *)(a1 + 32);
              if ((!v29 || (*(unsigned char *)(v29 + 529) & 1) == 0) && gLogDatapath)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                BOOL v90 = gprivacy_proxyLogObj;
                BOOL v91 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
                uint64_t v29 = *(void *)(a1 + 32);
                if (v91)
                {
                  BOOL v92 = v29 == 0;
                  if (v29) {
                    BOOL v93 = (const char *)(v29 + 531);
                  }
                  else {
                    BOOL v93 = "";
                  }
                  *(_DWORD *)nw_protocol_options_t v159 = 136446978;
                  *(void *)&void v159[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
                  *(_WORD *)&v159[12] = 2082;
                  *(void *)&v159[14] = v93;
                  if (v92) {
                    char v94 = "";
                  }
                  else {
                    char v94 = " ";
                  }
                  *(_WORD *)&v159[22] = 2080;
                  uint64_t v160 = (uint64_t (*)(uint64_t, uint64_t))v94;
                  LOWORD(v161) = 1024;
                  *(_DWORD *)((char *)&v161 + 2) = v138;
                  _os_log_impl(&dword_1830D4000, v90, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected packet of length %u to forward directly to demux", v159, 0x26u);
                  uint64_t v29 = *(void *)(a1 + 32);
                }
              }
              uint64_t v30 = *(NSObject **)(v29 + 408);
              if (v30)
              {
                nw_dispatch_data_copyout(v30, (uint64_t)(v4 + 1), v26);
                uint64_t v29 = *(void *)(a1 + 32);
                if (!v29 || (*(unsigned char *)(v29 + 529) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                    }
                    uint64_t v105 = gprivacy_proxyLogObj;
                    BOOL v106 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
                    uint64_t v29 = *(void *)(a1 + 32);
                    if (v106)
                    {
                      id v107 = "";
                      BOOL v108 = v29 == 0;
                      if (v29) {
                        uint64_t v109 = (const char *)(v29 + 531);
                      }
                      else {
                        uint64_t v109 = "";
                      }
                      *(_DWORD *)nw_protocol_options_t v159 = 136446722;
                      *(void *)&void v159[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
                      if (!v108) {
                        id v107 = " ";
                      }
                      *(_WORD *)&v159[12] = 2082;
                      *(void *)&v159[14] = v109;
                      *(_WORD *)&v159[22] = 2080;
                      uint64_t v160 = (uint64_t (*)(uint64_t, uint64_t))v107;
                      _os_log_impl(&dword_1830D4000, v105, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReplacing with virtual CID before forwarding", v159, 0x20u);
                      uint64_t v29 = *(void *)(a1 + 32);
                    }
                  }
                }
              }
              uint64_t v23 = *(void *)(v29 + 224);
              uint64_t v22 = *(void *)(a1 + 56);
            }
            if (v28) {
              dispatch_release(v28);
            }
          }
        }
      }
      else if ((*(unsigned char *)(v21 + 528) & 4) != 0)
      {
        BOOL v43 = *(void **)(v21 + 448);
        if (v43)
        {
          if (v4)
          {
            if (v138)
            {
              *(void *)os_log_type_t type = 0;
              uint64_t v140 = (uint64_t)type;
              uint64_t v141 = 0x2000000000;
              LOBYTE(v142) = 0;
              *(void *)nw_protocol_options_t v159 = MEMORY[0x1E4F143A8];
              *(void *)&v159[8] = 0x40000000;
              *(void *)&v159[16] = ___ZL29nw_masque_match_demux_patternPKhmP19nw_protocol_options_block_invoke;
              uint64_t v160 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E523E9B0;
              unint64_t v162 = v138;
              int v163 = v4;
              unint64_t v161 = type;
              nw_demux_options_enumerate_patterns(v43, (uint64_t)v159);
              int v44 = *(unsigned __int8 *)(v140 + 24);
              _Block_object_dispose(type, 8);
              if (v44)
              {
                uint64_t v45 = *(void *)(a1 + 32);
                if ((!v45 || (*(unsigned char *)(v45 + 529) & 1) == 0) && gLogDatapath)
                {
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                  }
                  unsigned int v100 = gprivacy_proxyLogObj;
                  BOOL v101 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
                  uint64_t v45 = *(void *)(a1 + 32);
                  if (v101)
                  {
                    BOOL v102 = v45 == 0;
                    if (v45) {
                      unsigned int v103 = (const char *)(v45 + 531);
                    }
                    else {
                      unsigned int v103 = "";
                    }
                    *(_DWORD *)nw_protocol_options_t v159 = 136446978;
                    *(void *)&void v159[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
                    *(_WORD *)&v159[12] = 2082;
                    *(void *)&v159[14] = v103;
                    if (v102) {
                      __int16 v104 = "";
                    }
                    else {
                      __int16 v104 = " ";
                    }
                    *(_WORD *)&v159[22] = 2080;
                    uint64_t v160 = (uint64_t (*)(uint64_t, uint64_t))v104;
                    LOWORD(v161) = 1024;
                    *(_DWORD *)((char *)&v161 + 2) = v138;
                    _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected packet of length %u to forward directly to demux (fast path)", v159, 0x26u);
                    uint64_t v45 = *(void *)(a1 + 32);
                  }
                }
                uint64_t v23 = *(void *)(v45 + 224);
                uint64_t v22 = *(void *)(a1 + 56);
              }
            }
          }
        }
      }
    }
    if ((*(unsigned int (**)(uint64_t, void, void, void, uint64_t, unsigned char *))(*(void *)(v23 + 24) + 88))(v23, *(void *)(a1 + 48), v138, v138, 1, v156))
    {
      *(void *)nw_protocol_options_t v159 = 0;
      *(void *)&v159[8] = v159;
      *(void *)&v159[16] = 0x2000000000;
      LOBYTE(v160) = 0;
      v128[0] = MEMORY[0x1E4F143A8];
      v128[1] = 0x40000000;
      id v129 = ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_139;
      char v130 = &unk_1E523E918;
      unsigned int v137 = v138;
      uint64_t v46 = *(void *)(a1 + 32);
      os_log_type_t v131 = v159;
      uint64_t v132 = v156;
      uint64_t v133 = v46;
      __int16 v134 = v4;
      uint64_t v135 = *(void *)(a1 + 48);
      uint64_t v136 = v22;
      uint64_t v47 = *(void *)v156;
      do
      {
        if (!v47) {
          break;
        }
        uint64_t v48 = *(void *)(v47 + 32);
        char v49 = ((uint64_t (*)(void *))v129)(v128);
        uint64_t v47 = v48;
      }
      while ((v49 & 1) != 0);
      goto LABEL_102;
    }
    uint64_t v50 = *(void *)(a1 + 32);
    if (v50 && (*(unsigned char *)(v50 + 529) & 1) != 0) {
      goto LABEL_114;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v51 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_114;
    }
    uint64_t v52 = *(void *)(a1 + 32);
    __int16 v53 = "";
    BOOL v54 = v52 == 0;
    if (v52) {
      BOOL v55 = (const char *)(v52 + 531);
    }
    else {
      BOOL v55 = "";
    }
    unsigned int v56 = v138;
    *(_DWORD *)nw_protocol_options_t v159 = 136446722;
    if (!v54) {
      __int16 v53 = " ";
    }
LABEL_113:
    *(void *)&void v159[4] = v55;
    *(_WORD *)&v159[12] = 2080;
    *(void *)&v159[14] = v53;
    *(_WORD *)&v159[22] = 1024;
    LODWORD(v160) = v56;
    _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_ERROR, "%{public}s%sUnable to send %u bytes", v159, 0x1Cu);
    goto LABEL_114;
  }
  int v7 = *(_DWORD *)(v6 + 527);
  if ((v7 & 0x800000) == 0)
  {
    if ((*(_DWORD *)(v6 + 527) & 0x6000) != 0x2000) {
      goto LABEL_156;
    }
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    id v8 = (id)nw_protocol_copy_http_definition_http_definition;
    uint64_t v9 = nw_frame_copy_metadata_for_protocol(a2, (uint64_t)v8);
    if (v8) {
      os_release(v8);
    }
    if (!v9) {
      goto LABEL_156;
    }
    uint64_t v10 = *(void *)(a1 + 32);
    if ((!v10 || (*(unsigned char *)(v10 + 529) & 1) == 0) && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      __int16 v83 = gprivacy_proxyLogObj;
      BOOL v84 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
      uint64_t v10 = *(void *)(a1 + 32);
      if (v84)
      {
        id v85 = "";
        BOOL v86 = v10 == 0;
        if (v10) {
          BOOL v87 = (const char *)(v10 + 531);
        }
        else {
          BOOL v87 = "";
        }
        *(_DWORD *)nw_protocol_options_t v159 = 136446722;
        *(void *)&void v159[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
        if (!v86) {
          id v85 = " ";
        }
        *(_WORD *)&v159[12] = 2082;
        *(void *)&v159[14] = v87;
        *(_WORD *)&v159[22] = 2080;
        uint64_t v160 = (uint64_t (*)(uint64_t, uint64_t))v85;
        _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSending oblivious HTTP message to proxy", v159, 0x20u);
        uint64_t v10 = *(void *)(a1 + 32);
      }
    }
    *(_DWORD *)(v10 + 527) |= 0x4000u;
    uint64_t v11 = *(void *)(a1 + 32);
    if (v11)
    {
      uint64_t v12 = mach_continuous_time();
      if (v12 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v12;
      }
      *(void *)(v11 + 288) = v13;
      id v14 = nw_http_metadata_copy_request(v9);
      if (!v14)
      {
        if ((*(unsigned char *)(v11 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          nw_endpoint_t v69 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)nw_protocol_options_t v159 = 136446466;
            *(void *)&void v159[4] = v11 + 531;
            *(_WORD *)&v159[12] = 2080;
            *(void *)&v159[14] = " ";
            _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_ERROR, "%{public}s%sHTTP message is not a request", v159, 0x16u);
          }
        }
        nw_masque_mark_failed_with_error(v11, 22);
        goto LABEL_155;
      }
      id v15 = v14;
      char has_method = _nw_http_request_has_method((uint64_t)v15);

      if ((has_method & 1) == 0)
      {
        if ((*(unsigned char *)(v11 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v70 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)nw_protocol_options_t v159 = 136446466;
            *(void *)&void v159[4] = v11 + 531;
            *(_WORD *)&v159[12] = 2080;
            *(void *)&v159[14] = " ";
            _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_ERROR, "%{public}s%sUnsupported method", v159, 0x16u);
          }
        }
        nw_masque_mark_failed_with_error(v11, 45);
        goto LABEL_154;
      }
      uint64_t v17 = *(void **)(v11 + 344);
      if (v17)
      {
        uint64_t v18 = nw_protocol_options_copy_proxy_endpoint(v17);
        if (v18)
        {
          uint64_t v19 = v18;
          if (nw_endpoint_get_type(v18) == nw_endpoint_type_url)
          {
            *(void *)nw_protocol_options_t v159 = 0;
            *(void *)&v159[8] = v159;
            *(void *)&v159[16] = 0x3802000000;
            uint64_t v160 = __Block_byref_object_copy__27583;
            unint64_t v161 = (os_log_type_t *)__Block_byref_object_dispose__27584;
            unint64_t v162 = 0;
            LOBYTE(v163) = -1;
            uint64_t v146 = 0;
            os_log_type_t v147 = &v146;
            uint64_t v148 = 0x2000000000;
            char v149 = 0;
            *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
            uint64_t v140 = 0x40000000;
            uint64_t v141 = (uint64_t)___ZL42nw_masque_modify_proxied_oblivious_messageP9nw_masqueP20nw_protocol_metadata_block_invoke;
            __int16 v142 = &unk_1E523E9D8;
            __int16 v144 = v159;
            BOOL v145 = v19;
            id v143 = &v146;
            nw_http_request_access_path(v15, type);
            if (*((unsigned char *)v147 + 24))
            {
              *(void *)BOOL v156 = MEMORY[0x1E4F143A8];
              *(void *)&v156[8] = 0x40000000;
              *(void *)&v156[16] = ___ZL42nw_masque_modify_proxied_oblivious_messageP9nw_masqueP20nw_protocol_metadata_block_invoke_150;
              os_log_type_t v157 = &unk_1E523EA00;
              id v158 = v159;
              nw_http_request_access_extended_connect_protocol(v15, v156);
              nw_http_request_set_header_fields(*(void **)(*(void *)&v159[8] + 40), v15);
              if (nw_masque_add_extra_headers_to_request(v11, *(void **)(*(void *)&v159[8] + 40)))
              {
                nw_http_metadata_set_request(v9, *(void **)(*(void *)&v159[8] + 40));
                os_release(v19);
                if ((*(unsigned char *)(v11 + 529) & 1) == 0)
                {
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                  }
                  id v20 = gprivacy_proxyLogObj;
                  if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)int buf = 136446722;
                    id v151 = "nw_masque_modify_proxied_oblivious_message";
                    __int16 v152 = 2082;
                    uint64_t v153 = v11 + 531;
                    __int16 v154 = 2080;
                    id v155 = " ";
                    _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sModified oblivious request", buf, 0x20u);
                  }
                }
              }
            }
            else
            {
              if ((*(unsigned char *)(v11 + 529) & 1) == 0)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                int v76 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)BOOL v156 = 136446466;
                  *(void *)&v156[4] = v11 + 531;
                  *(_WORD *)&v156[12] = 2080;
                  *(void *)&v156[14] = " ";
                  _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_ERROR, "%{public}s%sPath missing from message", v156, 0x16u);
                }
              }
              nw_masque_mark_failed_with_error(v11, 22);
              os_release(v19);
            }
            _Block_object_dispose(&v146, 8);
            _Block_object_dispose(v159, 8);
            if ((v163 & 1) == 0) {
              goto LABEL_154;
            }
            uint64_t v75 = v162;
            if (!v162) {
              goto LABEL_154;
            }
          }
          else
          {
            if ((*(unsigned char *)(v11 + 529) & 1) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
              }
              __int16 v73 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
              {
                logging_description = nw_endpoint_get_logging_description(v19);
                *(_DWORD *)nw_protocol_options_t v159 = 136446722;
                *(void *)&void v159[4] = v11 + 531;
                *(_WORD *)&v159[12] = 2080;
                *(void *)&v159[14] = " ";
                *(_WORD *)&v159[22] = 2082;
                uint64_t v160 = (uint64_t (*)(uint64_t, uint64_t))logging_description;
                _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_ERROR, "%{public}s%sProxy endpoint %{public}s is not of type URL", v159, 0x20u);
              }
            }
            nw_masque_mark_failed_with_error(v11, 22);
            uint64_t v75 = v19;
          }
          os_release(v75);
LABEL_154:
          os_release(v15);
LABEL_155:
          os_release(v9);
LABEL_156:
          uint64_t v60 = *(void *)(a1 + 40);
LABEL_157:
          *(void *)(a2 + 32) = 0;
          os_log_type_t v77 = *(uint64_t **)(v60 + 8);
          *(void *)(a2 + 40) = v77;
          *os_log_type_t v77 = a2;
          *(void *)(v60 + 8) = a2 + 32;
          return 1;
        }
        if (*(unsigned char *)(v11 + 529)) {
          goto LABEL_138;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        BOOL v71 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        {
LABEL_138:
          nw_masque_mark_failed_with_error(v11, 22);
          goto LABEL_154;
        }
        *(_DWORD *)nw_protocol_options_t v159 = 136446466;
        *(void *)&void v159[4] = v11 + 531;
        *(_WORD *)&v159[12] = 2080;
        *(void *)&v159[14] = " ";
        BOOL v72 = "%{public}s%sProxy endpoint not found";
      }
      else
      {
        if (*(unsigned char *)(v11 + 529)) {
          goto LABEL_138;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        BOOL v71 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_138;
        }
        *(_DWORD *)nw_protocol_options_t v159 = 136446466;
        *(void *)&void v159[4] = v11 + 531;
        *(_WORD *)&v159[12] = 2080;
        *(void *)&v159[14] = " ";
        BOOL v72 = "%{public}s%sOptions not found";
      }
      _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_ERROR, v72, v159, 0x16u);
      goto LABEL_138;
    }
    __nwlog_obj();
    *(_DWORD *)nw_protocol_options_t v159 = 136446210;
    *(void *)&void v159[4] = "nw_masque_modify_proxied_oblivious_message";
    int v79 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v156[0] = 0;
    if (__nwlog_fault(v79, type, v156))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v80 = __nwlog_obj();
        os_log_type_t v81 = type[0];
        if (!os_log_type_enabled(v80, type[0])) {
          goto LABEL_192;
        }
        *(_DWORD *)nw_protocol_options_t v159 = 136446210;
        *(void *)&void v159[4] = "nw_masque_modify_proxied_oblivious_message";
        BOOL v82 = "%{public}s called with null masque";
        goto LABEL_191;
      }
      if (!v156[0])
      {
        BOOL v80 = __nwlog_obj();
        os_log_type_t v81 = type[0];
        if (!os_log_type_enabled(v80, type[0])) {
          goto LABEL_192;
        }
        *(_DWORD *)nw_protocol_options_t v159 = 136446210;
        *(void *)&void v159[4] = "nw_masque_modify_proxied_oblivious_message";
        BOOL v82 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_191;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v80 = __nwlog_obj();
      os_log_type_t v81 = type[0];
      BOOL v89 = os_log_type_enabled(v80, type[0]);
      if (backtrace_string)
      {
        if (v89)
        {
          *(_DWORD *)nw_protocol_options_t v159 = 136446466;
          *(void *)&void v159[4] = "nw_masque_modify_proxied_oblivious_message";
          *(_WORD *)&v159[12] = 2082;
          *(void *)&v159[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s called with null masque, dumping backtrace:%{public}s", v159, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_192;
      }
      if (v89)
      {
        *(_DWORD *)nw_protocol_options_t v159 = 136446210;
        *(void *)&void v159[4] = "nw_masque_modify_proxied_oblivious_message";
        BOOL v82 = "%{public}s called with null masque, no backtrace";
LABEL_191:
        _os_log_impl(&dword_1830D4000, v80, v81, v82, v159, 0xCu);
      }
    }
LABEL_192:
    if (v79) {
      free(v79);
    }
    goto LABEL_155;
  }
  if (!*(void *)(v6 + 224)) {
    goto LABEL_98;
  }
  uint64_t v31 = *(NSObject **)(v6 + 392);
  if (!v31)
  {
    if ((v7 & 0x400) != 0)
    {
      __int16 v57 = *(void **)(v6 + 448);
      if (v57)
      {
        if (v4)
        {
          if (v138)
          {
            *(void *)os_log_type_t type = 0;
            uint64_t v140 = (uint64_t)type;
            uint64_t v141 = 0x2000000000;
            LOBYTE(v142) = 0;
            *(void *)nw_protocol_options_t v159 = MEMORY[0x1E4F143A8];
            *(void *)&v159[8] = 0x40000000;
            *(void *)&v159[16] = ___ZL29nw_masque_match_demux_patternPKhmP19nw_protocol_options_block_invoke;
            uint64_t v160 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E523E9B0;
            unint64_t v162 = v138;
            int v163 = v4;
            unint64_t v161 = type;
            nw_demux_options_enumerate_patterns(v57, (uint64_t)v159);
            int v58 = *(unsigned __int8 *)(v140 + 24);
            _Block_object_dispose(type, 8);
            if (v58)
            {
              uint64_t v59 = *(void *)(a1 + 32);
              if ((!v59 || (*(unsigned char *)(v59 + 529) & 1) == 0) && gLogDatapath)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                uint64_t v110 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v111 = *(void *)(a1 + 32);
                  BOOL v112 = (const char *)(v111 + 531);
                  __int16 v113 = "";
                  if (!v111) {
                    BOOL v112 = "";
                  }
                  *(void *)&void v159[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
                  *(_WORD *)&v159[12] = 2082;
                  *(_DWORD *)nw_protocol_options_t v159 = 136446978;
                  if (v111) {
                    __int16 v113 = " ";
                  }
                  *(void *)&v159[14] = v112;
                  *(_WORD *)&v159[22] = 2080;
                  uint64_t v160 = (uint64_t (*)(uint64_t, uint64_t))v113;
                  LOWORD(v161) = 1024;
                  *(_DWORD *)((char *)&v161 + 2) = v138;
                  _os_log_impl(&dword_1830D4000, v110, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected packet of length %u to forward directly to demux (fast path)", v159, 0x26u);
                }
              }
              uint64_t v60 = *(void *)(a1 + 56);
              goto LABEL_157;
            }
          }
        }
      }
    }
    goto LABEL_98;
  }
  size_t v32 = dispatch_data_get_size(v31);
  if (v32 + 1 >= v138) {
    goto LABEL_98;
  }
  size_t v33 = v32;
  uint64_t v34 = *(NSObject **)(v6 + 408);
  if (v34)
  {
    if (dispatch_data_get_size(v34) != v33) {
      goto LABEL_98;
    }
  }
  if ((*v4 & 0xC0) != 0x40) {
    goto LABEL_98;
  }
  int v35 = dispatch_data_create(v4 + 1, v33, 0, (dispatch_block_t)*MEMORY[0x1E4F14400]);
  BOOL is_equal = nw_dispatch_data_is_equal(v35, *(NSObject **)(*(void *)(a1 + 32) + 392));
  BOOL v37 = is_equal;
  if (is_equal)
  {
    uint64_t v38 = *(void *)(a1 + 32);
    if ((!v38 || (*(unsigned char *)(v38 + 529) & 1) == 0) && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v95 = gprivacy_proxyLogObj;
      BOOL v96 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
      uint64_t v38 = *(void *)(a1 + 32);
      if (v96)
      {
        BOOL v97 = v38 == 0;
        if (v38) {
          uint64_t v98 = (const char *)(v38 + 531);
        }
        else {
          uint64_t v98 = "";
        }
        *(_DWORD *)nw_protocol_options_t v159 = 136446978;
        *(void *)&void v159[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
        *(_WORD *)&v159[12] = 2082;
        *(void *)&v159[14] = v98;
        if (v97) {
          uint64_t v99 = "";
        }
        else {
          uint64_t v99 = " ";
        }
        *(_WORD *)&v159[22] = 2080;
        uint64_t v160 = (uint64_t (*)(uint64_t, uint64_t))v99;
        LOWORD(v161) = 1024;
        *(_DWORD *)((char *)&v161 + 2) = v138;
        _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected packet of length %u to forward directly to demux (fast path)", v159, 0x26u);
        uint64_t v38 = *(void *)(a1 + 32);
      }
    }
    char v39 = *(NSObject **)(v38 + 408);
    if (v39)
    {
      nw_dispatch_data_copyout(v39, (uint64_t)(v4 + 1), v33);
      uint64_t v40 = *(void *)(a1 + 32);
      if (!v40 || (*(unsigned char *)(v40 + 529) & 1) == 0)
      {
        if (gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v114 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v115 = *(void *)(a1 + 32);
            os_log_type_t v116 = "";
            BOOL v117 = v115 == 0;
            if (v115) {
              uint64_t v118 = (const char *)(v115 + 531);
            }
            else {
              uint64_t v118 = "";
            }
            *(_DWORD *)nw_protocol_options_t v159 = 136446722;
            *(void *)&void v159[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
            if (!v117) {
              os_log_type_t v116 = " ";
            }
            *(_WORD *)&v159[12] = 2082;
            *(void *)&v159[14] = v118;
            *(_WORD *)&v159[22] = 2080;
            uint64_t v160 = (uint64_t (*)(uint64_t, uint64_t))v116;
            _os_log_impl(&dword_1830D4000, v114, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReplacing with virtual CID before forwarding", v159, 0x20u);
          }
        }
      }
    }
    uint64_t v41 = *(void *)(a1 + 56);
    *(void *)(a2 + 32) = 0;
    uint64_t v42 = *(uint64_t **)(v41 + 8);
    *(void *)(a2 + 40) = v42;
    *uint64_t v42 = a2;
    *(void *)(v41 + 8) = a2 + 32;
  }
  if (v35) {
    dispatch_release(v35);
  }
  if (!v37)
  {
LABEL_98:
    uint64_t v61 = *(void *)(*(void *)(a1 + 48) + 32);
    *(void *)os_log_type_t type = 0;
    uint64_t v140 = (uint64_t)type;
    if ((*(unsigned int (**)(void))(*(void *)(v61 + 24) + 88))())
    {
      *(void *)nw_protocol_options_t v159 = 0;
      *(void *)&v159[8] = v159;
      *(void *)&v159[16] = 0x2000000000;
      LOBYTE(v160) = 0;
      v119[0] = MEMORY[0x1E4F143A8];
      v119[1] = 0x40000000;
      uint64_t v120 = ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_141;
      char v121 = &unk_1E523E940;
      unsigned int v127 = v138;
      uint64_t v62 = *(void *)(a1 + 32);
      uint64_t v122 = v159;
      os_log_type_t v123 = type;
      uint64_t v124 = v62;
      char v125 = v4;
      int8x16_t v126 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
      uint64_t v63 = *(void *)type;
      do
      {
        if (!v63) {
          break;
        }
        uint64_t v64 = *(void *)(v63 + 32);
        char v65 = ((uint64_t (*)(void *))v120)(v119);
        uint64_t v63 = v64;
      }
      while ((v65 & 1) != 0);
LABEL_102:
      _Block_object_dispose(v159, 8);
LABEL_114:
      nw_frame_finalize(a2);
      return 1;
    }
    uint64_t v66 = *(void *)(a1 + 32);
    if (v66 && (*(unsigned char *)(v66 + 529) & 1) != 0) {
      goto LABEL_114;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v51 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_114;
    }
    uint64_t v67 = *(void *)(a1 + 32);
    __int16 v53 = "";
    BOOL v68 = v67 == 0;
    if (v67) {
      BOOL v55 = (const char *)(v67 + 531);
    }
    else {
      BOOL v55 = "";
    }
    unsigned int v56 = v138;
    *(_DWORD *)nw_protocol_options_t v159 = 136446722;
    if (!v68) {
      __int16 v53 = " ";
    }
    goto LABEL_113;
  }
  return 1;
}

uint64_t ___ZL29nw_masque_match_demux_patternPKhmP19nw_protocol_options_block_invoke(void *a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v5 = a2;
  if (a1[5] < a2 + (unint64_t)a3) {
    return 1;
  }
  if (a2)
  {
    int v7 = (unsigned __int8 *)a1[6];
    if (a5)
    {
      while (1)
      {
        int v9 = *v7++;
        int v8 = v9;
        int v11 = *a5++;
        int v10 = v11;
        int v12 = *a4++;
        int v13 = (v8 ^ v12) & v10;
        BOOL v14 = v13 != 0;
        if (v13) {
          break;
        }
        if (!--v5) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      while (1)
      {
        int v17 = *v7++;
        int v16 = v17;
        int v18 = *a4++;
        BOOL v19 = v16 == v18;
        BOOL v14 = v16 != v18;
        if (!v19) {
          break;
        }
        if (!--v5) {
          goto LABEL_7;
        }
      }
    }
    char v15 = 0;
  }
  else
  {
LABEL_7:
    BOOL v14 = 0;
    char v15 = 1;
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v15;
  return v14;
}

uint64_t ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_139(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unsigned int v21 = 0;
  uint64_t v4 = (void *)nw_frame_unclaimed_bytes(a2, &v21);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void **)(a2 + 40);
  int v7 = (void *)(a2 + 32);
  if (v5)
  {
    *(void *)(v5 + 40) = v6;
    uint64_t v6 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 40) + 8) = v6;
  }
  *uint64_t v6 = v5;
  void *v7 = 0;
  *(void *)(a2 + 40) = 0;
  size_t v8 = *(unsigned int *)(a1 + 80);
  if (v21 >= v8 && v4)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    memcpy(v4, *(const void **)(a1 + 56), v8);
    nw_frame_claim(a2, v9, *(_DWORD *)(a1 + 80), 0);
    nw_frame_collapse(a2);
    nw_frame_unclaim(a2, v10, *(_DWORD *)(a1 + 80), 0);
    uint64_t v11 = *(void *)(a1 + 72);
    *(void *)(a2 + 32) = 0;
    int v12 = *(uint64_t **)(v11 + 8);
    *(void *)(a2 + 40) = v12;
    uint64_t *v12 = a2;
    *(void *)(v11 + 8) = v7;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 48);
    if (!v13 || (*(unsigned char *)(v13 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      BOOL v14 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(a1 + 48);
        int v16 = (const char *)(v15 + 531);
        BOOL v17 = v15 == 0;
        int v18 = " ";
        int v19 = *(_DWORD *)(a1 + 80);
        if (v17)
        {
          int v16 = "";
          int v18 = "";
        }
        *(_DWORD *)int buf = 136446978;
        uint64_t v23 = v16;
        __int16 v24 = 2080;
        BOOL v25 = v18;
        __int16 v26 = 1024;
        int v27 = v19;
        __int16 v28 = 1024;
        unsigned int v29 = v21;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s%sUnable to send %u bytes, only received %u bytes", buf, 0x22u);
      }
    }
    nw_frame_finalize(a2);
  }
  return 1;
}

uint64_t ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_141(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unsigned int v21 = 0;
  uint64_t v4 = (void *)nw_frame_unclaimed_bytes(a2, &v21);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void **)(a2 + 40);
  int v7 = (void *)(a2 + 32);
  if (v5)
  {
    *(void *)(v5 + 40) = v6;
    uint64_t v6 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 40) + 8) = v6;
  }
  *uint64_t v6 = v5;
  void *v7 = 0;
  *(void *)(a2 + 40) = 0;
  size_t v8 = *(unsigned int *)(a1 + 80);
  if (v21 >= v8 && v4)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    memcpy(v4, *(const void **)(a1 + 56), v8);
    nw_frame_claim(a2, v9, *(_DWORD *)(a1 + 80), 0);
    nw_frame_collapse(a2);
    nw_frame_unclaim(a2, v10, *(_DWORD *)(a1 + 80), 0);
    uint64_t v11 = *(void *)(a1 + 72);
    *(void *)(a2 + 32) = 0;
    int v12 = *(uint64_t **)(v11 + 8);
    *(void *)(a2 + 40) = v12;
    uint64_t *v12 = a2;
    *(void *)(v11 + 8) = v7;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 48);
    if (!v13 || (*(unsigned char *)(v13 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      BOOL v14 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(a1 + 48);
        int v16 = (const char *)(v15 + 531);
        BOOL v17 = v15 == 0;
        int v18 = " ";
        int v19 = *(_DWORD *)(a1 + 80);
        if (v17)
        {
          int v16 = "";
          int v18 = "";
        }
        *(_DWORD *)int buf = 136446978;
        uint64_t v23 = v16;
        __int16 v24 = 2080;
        BOOL v25 = v18;
        __int16 v26 = 1024;
        int v27 = v19;
        __int16 v28 = 1024;
        unsigned int v29 = v21;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s%sUnable to send %u bytes, only received %u bytes", buf, 0x22u);
      }
    }
    nw_frame_finalize(a2);
  }
  return 1;
}

uint64_t __Block_byref_object_copy__27583(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__27584(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    int v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZL42nw_masque_modify_proxied_oblivious_messageP9nw_masqueP20nw_protocol_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    uint64_t v13 = 0;
    int port = nw_endpoint_get_port(*(nw_endpoint_t *)(a1 + 48));
    if (port == 443)
    {
      hostname = (void *)nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 48));
    }
    else
    {
      int v6 = port;
      int v7 = nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 48));
      asprintf(&v13, "%s:%u", v7, v6);
      hostname = v13;
    }
    uint64_t url_scheme = nw_endpoint_get_url_scheme(*(void **)(a1 + 48));
    uint64_t v9 = _nw_http_request_create("POST", url_scheme, hostname, a2);
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    char v11 = *(unsigned char *)(v10 + 48);
    if (v11)
    {
      int v12 = *(void **)(v10 + 40);
      if (v12)
      {
        os_release(v12);
        char v11 = *(unsigned char *)(v10 + 48);
      }
    }
    *(void *)(v10 + 40) = v9;
    *(unsigned char *)(v10 + 48) = v11 | 1;
    if (v13) {
      free(v13);
    }
  }
}

void ___ZL42nw_masque_modify_proxied_oblivious_messageP9nw_masqueP20nw_protocol_metadata_block_invoke_150(uint64_t a1, uint64_t a2)
{
}

BOOL nw_masque_add_extra_headers_to_request(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    *(void *)os_log_type_t type = 0;
    int v18 = type;
    uint64_t v19 = 0x2000000000;
    char v20 = 0;
    uint64_t v4 = *(void **)(a1 + 344);
    if (v4)
    {
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 0x40000000;
      void v16[2] = ___ZL38nw_masque_add_extra_headers_to_requestP9nw_masqueP14nw_http_fields_block_invoke;
      v16[3] = &unk_1E523E810;
      void v16[4] = type;
      v16[5] = a1;
      v16[6] = a2;
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL41nw_masque_options_enumerate_extra_headersP19nw_protocol_optionsU13block_pointerFbPKcS2_E_block_invoke;
      uint64_t v23 = &unk_1E523E838;
      __int16 v24 = v16;
      nw_protocol_options_access_handle(v4, buf);
    }
    uint64_t v5 = *(void **)(a1 + 336);
    if (!v5) {
      goto LABEL_11;
    }
    int v6 = v5;
    if (nw_path_network_is_satisfied_update_reason(v6, 0))
    {
      int effective_traffic_class = v6->effective_traffic_class;
      if (!effective_traffic_class) {
        int effective_traffic_class = nw_parameters_get_traffic_class(v6->parameters);
      }

      if ((effective_traffic_class - 1) > 0xC7) {
        goto LABEL_11;
      }
      int v6 = a2;
      _nw_http_fields_append(v6, "Sec-CH-Background", "?1");
    }

LABEL_11:
    BOOL v8 = *((unsigned char *)v18 + 24) == 0;
    _Block_object_dispose(type, 8);
    return v8;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request";
  uint64_t v10 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v10, type, &v21))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request";
        uint64_t v13 = "%{public}s called with null request";
LABEL_26:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      BOOL v15 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request";
        uint64_t v13 = "%{public}s called with null request, no backtrace";
        goto LABEL_26;
      }
    }
    else
    {
      char v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request";
        uint64_t v13 = "%{public}s called with null request, backtrace limit exceeded";
        goto LABEL_26;
      }
    }
  }
LABEL_27:
  if (v10) {
    free(v10);
  }
  return 0;
}

void sub_18383F690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL38nw_masque_add_extra_headers_to_requestP9nw_masqueP14nw_http_fields_block_invoke(uint64_t a1, const char *a2, char *__s1)
{
  uint64_t v3 = __s1;
  uint64_t v207 = *MEMORY[0x1E4F143B8];
  int v6 = strstr(__s1, "<token=");
  if (v6)
  {
    int v7 = v6;
    size_t v192 = strlen(v3);
    BOOL v8 = v7 + 7;
    uint64_t v9 = strchr(v7 + 7, 62);
    uint64_t v10 = strstr(v3, "{domain=");
    char v11 = strstr(v3, "[type=");
    long long uu = 0uLL;
    if ((unint64_t)v10 | (unint64_t)v11)
    {
      if (v10 && (os_log_type_t v12 = v11) != 0)
      {
        uint64_t v13 = v10 + 8;
        BOOL v14 = strchr(v13, 125);
        BOOL v15 = v12 + 6;
        int v16 = strchr(v15, 93);
        if (v14 && v16)
        {
          size_t v17 = v14 - v13;
          int64_t v18 = v16 - v15;
          BOOL v21 = v17 > 0x20 || v18 < 0 || v18 > 32;
          if (v21)
          {
            uint64_t v22 = *(void *)(a1 + 40);
            if (!v22 || (*(unsigned char *)(v22 + 529) & 1) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
              }
              uint64_t v23 = gprivacy_proxyLogObj;
              BOOL v24 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
              uint64_t v22 = *(void *)(a1 + 40);
              if (v24)
              {
                uint64_t v25 = (const char *)(v22 + 531);
                if (!v22) {
                  uint64_t v25 = "";
                }
                *(_DWORD *)int buf = 136446978;
                *(void *)&uint8_t buf[4] = v25;
                *(_WORD *)&buf[12] = 2080;
                __int16 v26 = " ";
                if (!v22) {
                  __int16 v26 = "";
                }
                *(void *)&buf[14] = v26;
                *(_WORD *)&unsigned char buf[22] = 2048;
                *(void *)&unsigned char buf[24] = v17;
                *(_WORD *)&unsigned char buf[32] = 2048;
                *(void *)&buf[34] = v18;
                _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s%sInvalid agent domain/type length (%zu/%zu)", buf, 0x2Au);
                uint64_t v22 = *(void *)(a1 + 40);
              }
            }
            goto LABEL_27;
          }
          char v201 = 0;
          long long v200 = 0u;
          *(_OWORD *)__dst = 0u;
          char v198 = 0;
          long long v196 = 0u;
          long long v197 = 0u;
          memcpy(__dst, v13, v17);
          memcpy(&v196, v15, v18);
          uint64_t v99 = *(void *)(a1 + 40);
          if (!v99 || (*(unsigned char *)(v99 + 529) & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            unsigned int v100 = gprivacy_proxyLogObj;
            BOOL v101 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
            uint64_t v99 = *(void *)(a1 + 40);
            if (v101)
            {
              BOOL v102 = "";
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
              BOOL v103 = v99 == 0;
              if (v99) {
                __int16 v104 = (const char *)(v99 + 531);
              }
              else {
                __int16 v104 = "";
              }
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v104;
              *(_WORD *)&unsigned char buf[22] = 2080;
              if (!v103) {
                BOOL v102 = " ";
              }
              *(void *)&unsigned char buf[24] = v102;
              *(_WORD *)&unsigned char buf[32] = 2080;
              *(void *)&buf[34] = __dst;
              *(_WORD *)&buf[42] = 2080;
              *(void *)&buf[44] = &v196;
              _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinding token agent with domain '%s' type '%s'", buf, 0x34u);
              uint64_t v99 = *(void *)(a1 + 40);
            }
          }
          uint64_t v105 = *(void *)(v99 + 336);
          if (v105)
          {
            BOOL v106 = *(void **)(v105 + 224);
            if (v106)
            {
              id v107 = v106;
              applier[0] = MEMORY[0x1E4F143A8];
              applier[1] = 0x40000000;
              applier[2] = ___ZL38nw_masque_add_extra_headers_to_requestP9nw_masqueP14nw_http_fields_block_invoke_109;
              applier[3] = &__block_descriptor_tmp_112_27608;
              applier[4] = __dst;
              void applier[5] = &v196;
              void applier[6] = *(void *)(a1 + 40);
              applier[7] = &uu;
              xpc_dictionary_apply(v107, applier);
              xpc_release(v107);
            }
          }
          if (uuid_is_null((const unsigned __int8 *)&uu)) {
            return !v21;
          }
          *(_OWORD *)(*(void *)(a1 + 40) + 272) = uu;
          goto LABEL_42;
        }
        uint64_t v22 = *(void *)(a1 + 40);
        if (v22 && (*(unsigned char *)(v22 + 529) & 1) != 0) {
          goto LABEL_27;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v45 = gprivacy_proxyLogObj;
        BOOL v68 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
        uint64_t v22 = *(void *)(a1 + 40);
        if (!v68) {
          goto LABEL_27;
        }
        nw_endpoint_t v69 = (const char *)(v22 + 531);
        uint64_t v70 = "";
        if (v22) {
          uint64_t v70 = " ";
        }
        else {
          nw_endpoint_t v69 = "";
        }
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = v69;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v70;
        char v49 = "%{public}s%sInvalid agent type suffix";
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 40);
        if (v22 && (*(unsigned char *)(v22 + 529) & 1) != 0) {
          goto LABEL_27;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v45 = gprivacy_proxyLogObj;
        BOOL v46 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
        uint64_t v22 = *(void *)(a1 + 40);
        if (!v46) {
          goto LABEL_27;
        }
        uint64_t v47 = (const char *)(v22 + 531);
        uint64_t v48 = "";
        if (v22) {
          uint64_t v48 = " ";
        }
        else {
          uint64_t v47 = "";
        }
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = v47;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v48;
        char v49 = "%{public}s%sInvalid agent type configuration";
      }
      _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_ERROR, v49, buf, 0x16u);
      uint64_t v22 = *(void *)(a1 + 40);
LABEL_27:
      nw_masque_mark_failed_with_error(v22, 22);
      return 0;
    }
    if (!v9 || v9 - v8 != 36)
    {
      uint64_t v50 = *(void *)(a1 + 40);
      if (!v50 || (*(unsigned char *)(v50 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v51 = gprivacy_proxyLogObj;
        BOOL v52 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
        uint64_t v50 = *(void *)(a1 + 40);
        if (v52)
        {
          __int16 v53 = (const char *)(v50 + 531);
          if (!v50) {
            __int16 v53 = "";
          }
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = v53;
          *(_WORD *)&buf[12] = 2080;
          BOOL v54 = " ";
          if (!v50) {
            BOOL v54 = "";
          }
          *(void *)&buf[14] = v54;
          *(_WORD *)&unsigned char buf[22] = 2082;
          *(void *)&unsigned char buf[24] = "<token=";
          *(_WORD *)&unsigned char buf[32] = 2082;
          *(void *)&buf[34] = v3;
          _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_ERROR, "%{public}s%sValue included \"%{public}s\", but token UUID cannot be read: %{public}s", buf, 0x2Au);
          uint64_t v50 = *(void *)(a1 + 40);
        }
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      nw_masque_mark_failed_with_error(v50, 22);
      return 1;
    }
    buf[36] = 0;
    long long v36 = *(_OWORD *)v8;
    long long v37 = *(_OWORD *)(v7 + 23);
    *(_DWORD *)&unsigned char buf[32] = *(_DWORD *)(v7 + 39);
    *(_OWORD *)int buf = v36;
    *(_OWORD *)&buf[16] = v37;
    uuid_parse(buf, (unsigned __int8 *)(*(void *)(a1 + 40) + 272));
LABEL_42:
    *(void *)uint64_t v205 = 0;
    unsigned __int8 v194 = 0;
    uint64_t v38 = *(void *)(a1 + 40);
    char v39 = *(void **)(v38 + 456);
    if (!v39)
    {
      uint64_t v44 = 0;
LABEL_140:
      if ((*(unsigned char *)(v38 + 527) & 2) != 0 || v44 || v39)
      {
        if (!v44)
        {
          uint64_t v44 = nw_path_copy_token_from_agent(*(void **)(v38 + 336), (const unsigned __int8 *)(v38 + 272), v205);
          uint64_t v38 = *(void *)(a1 + 40);
        }
        if (v44 && *(void *)v205)
        {
          if (!v38 || (*(unsigned char *)(v38 + 529) & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            __int16 v83 = gprivacy_proxyLogObj;
            BOOL v84 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
            uint64_t v38 = *(void *)(a1 + 40);
            if (v84)
            {
              id v85 = (const char *)(v38 + 531);
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
              if (!v38) {
                id v85 = "";
              }
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v85;
              *(_WORD *)&unsigned char buf[22] = 2080;
              BOOL v86 = " ";
              if (!v38) {
                BOOL v86 = "";
              }
              *(void *)&unsigned char buf[24] = v86;
              *(_WORD *)&unsigned char buf[32] = 1042;
              *(_DWORD *)&buf[34] = 16;
              *(_WORD *)&buf[38] = 2098;
              *(void *)&uint8_t buf[40] = v38 + 272;
              _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFetched token from %{public, uuid_t}.16P", buf, 0x30u);
              uint64_t v38 = *(void *)(a1 + 40);
            }
          }
          BOOL v87 = *(void **)(v38 + 456);
          size_t v88 = *(void *)v205;
          if (v87)
          {
            nw_http_connection_metadata_set_cached_token(v87, v44, *(uint64_t *)v205);
            size_t v88 = *(void *)v205;
          }
          BOOL v89 = &v3[v192];
          BOOL v90 = dispatch_data_create((const void *)v44, v88, 0, (dispatch_block_t)*MEMORY[0x1E4F143F0]);
          BOOL v91 = dispatch_data_create_with_transform();
          if (v90) {
            dispatch_release(v90);
          }
          BOOL v92 = v9 + 1;
          uint64_t v193 = &v3[v192];
          size_t size = dispatch_data_get_size(v91);
          size_t __n = v89 - (v9 + 1);
          BOOL v94 = nw_calloc_type<unsigned char>(v7 - v3 + v89 - v9 + size);
          __dst[0] = 0;
          __dst[1] = (char *)__dst;
          long long v200 = 0x2000000000uLL;
          *(void *)&long long v196 = 0;
          *((void *)&v196 + 1) = &v196;
          *(void *)&long long v197 = 0x2000000000;
          *((void *)&v197 + 1) = v94 + v7 - v3;
          if (v91)
          {
            *(void *)int buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 0x40000000;
            *(void *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
            *(void *)&unsigned char buf[24] = &unk_1E5242B60;
            *(void *)&uint8_t buf[40] = &v196;
            *(void *)&buf[48] = size;
            *(void *)&unsigned char buf[32] = __dst;
            dispatch_data_apply(v91, buf);
            _Block_object_dispose(&v196, 8);
            _Block_object_dispose(__dst, 8);
            dispatch_release(v91);
          }
          else
          {
            _Block_object_dispose(&v196, 8);
            _Block_object_dispose(__dst, 8);
          }
          for (uint64_t i = (char *)(v94 + v7 - v3); ; uint64_t i = v121 + 1)
          {
            char v121 = strchr(i, 43);
            if (!v121) {
              break;
            }
            *char v121 = 45;
          }
          for (uint64_t j = (char *)(v94 + v7 - v3); ; uint64_t j = v123 + 1)
          {
            os_log_type_t v123 = strchr(j, 47);
            if (!v123) {
              break;
            }
            *os_log_type_t v123 = 95;
          }
          if (v7 != v3) {
            memcpy((void *)v94, v3, v7 - v3);
          }
          if (v193 != v92) {
            memcpy((void *)(v94 + v7 - v3 + size), v92, __n);
          }
          nw_http_fields_append(*(void **)(a1 + 48), (uint64_t)a2, v94);
          if (v94) {
            free((void *)v94);
          }
        }
        else
        {
          if (!v38 || (*(unsigned char *)(v38 + 529) & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            uint64_t v95 = gprivacy_proxyLogObj;
            BOOL v96 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
            uint64_t v38 = *(void *)(a1 + 40);
            if (v96)
            {
              BOOL v97 = "";
              uint64_t v98 = (const char *)(v38 + 531);
              if (!v38) {
                uint64_t v98 = "";
              }
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = v98;
              *(_WORD *)&buf[12] = 2080;
              if (v38) {
                BOOL v97 = " ";
              }
              *(void *)&buf[14] = v97;
              *(_WORD *)&unsigned char buf[22] = 1042;
              *(_DWORD *)&unsigned char buf[24] = 16;
              *(_WORD *)&buf[28] = 2098;
              *(void *)&buf[30] = v38 + 272;
              _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_ERROR, "%{public}s%sFailed to fetch token from %{public, uuid_t}.16P", buf, 0x26u);
              uint64_t v38 = *(void *)(a1 + 40);
            }
          }
          nw_path_report_error_to_agent(*(void **)(v38 + 336), (const unsigned __int8 *)(v38 + 272), 81);
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
          nw_masque_mark_failed_with_error(*(void *)(a1 + 40), 2);
        }
      }
      return 1;
    }
    uint64_t v40 = v39;
    uint64_t v41 = nw_protocol_metadata_copy_definition(v40);
    if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v41, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

    if (is_equal)
    {
      __dst[0] = 0;
      __dst[1] = (char *)__dst;
      long long v200 = 0x2020000000uLL;
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __nw_http_connection_metadata_copy_cached_token_block_invoke;
      *(void *)&unsigned char buf[24] = &unk_1E5249200;
      *(void *)&unsigned char buf[32] = __dst;
      *(void *)&uint8_t buf[40] = &v194;
      *(void *)&buf[48] = v205;
      uint64_t isa = (uint64_t)v40[4].isa;
      if (isa)
      {
        __nw_http_connection_metadata_copy_cached_token_block_invoke((uint64_t)buf, isa);
        uint64_t v44 = *((void *)__dst[1] + 3);
      }
      else
      {
        uint64_t v44 = 0;
      }
      _Block_object_dispose(__dst, 8);
LABEL_139:

      uint64_t v38 = *(void *)(a1 + 40);
      LODWORD(v39) = v194;
      goto LABEL_140;
    }
    uint64_t v160 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_copy_cached_token";
    unint64_t v161 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__dst[0]) = 16;
    LOBYTE(v196) = 0;
    if (__nwlog_fault(v161, __dst, &v196))
    {
      if (LOBYTE(__dst[0]) == 17)
      {
        unint64_t v162 = __nwlog_obj();
        os_log_type_t v163 = (os_log_type_t)__dst[0];
        if (os_log_type_enabled(v162, (os_log_type_t)__dst[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_copy_cached_token";
          _os_log_impl(&dword_1830D4000, v162, v163, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
      }
      else if ((_BYTE)v196)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v162 = __nwlog_obj();
        os_log_type_t type = (os_log_type_t)__dst[0];
        BOOL v170 = os_log_type_enabled(v162, (os_log_type_t)__dst[0]);
        if (backtrace_string)
        {
          if (v170)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_copy_cached_token";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v162, type, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_403;
        }
        if (v170)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_copy_cached_token";
          _os_log_impl(&dword_1830D4000, v162, type, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unint64_t v162 = __nwlog_obj();
        os_log_type_t v180 = (os_log_type_t)__dst[0];
        if (os_log_type_enabled(v162, (os_log_type_t)__dst[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_copy_cached_token";
          _os_log_impl(&dword_1830D4000, v162, v180, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_403:
    if (v161) {
      free(v161);
    }
    uint64_t v44 = 0;
    goto LABEL_139;
  }
  int v28 = strcasecmp(a2, "Sec-CH-Geohash");
  int v29 = strcasecmp(a2, "Priority");
  int v30 = strcasecmp(a2, "Require-Interface");
  int v31 = strcasecmp(a2, "Prohibit-Interface");
  int v32 = strcasecmp(a2, "Client-Application");
  int v33 = strcasecmp(a2, "Multipath");
  int v34 = strcasecmp(a2, "Listener-Association");
  if (!v28)
  {
    BOOL v55 = *(void **)(*(void *)(a1 + 40) + 320);
    if (v55
      && ((nw_parameters_get_is_known_tracker(v55) & 1) != 0
       || (nw_parameters_get_parent_is_known_tracker(*(void **)(*(void *)(a1 + 40) + 320)) & 1) != 0
       || (nw_parameters_get_use_enhanced_privacy_mode(*(void **)(*(void *)(a1 + 40) + 320)) & 1) != 0))
    {
      return 1;
    }
    if (v3)
    {
      uint64_t v56 = *(void *)(a1 + 40);
      if (*v3)
      {
        if ((!v56 || (*(unsigned char *)(v56 + 529) & 1) == 0) && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          __int16 v57 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v58 = *(void *)(a1 + 40);
            BOOL v59 = v58 == 0;
            if (v58) {
              uint64_t v60 = (const char *)(v58 + 531);
            }
            else {
              uint64_t v60 = "";
            }
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
            *(void *)&buf[14] = v60;
            uint64_t v61 = " ";
            *(_WORD *)&buf[12] = 2082;
            if (v59) {
              uint64_t v61 = "";
            }
            *(_WORD *)&unsigned char buf[22] = 2080;
            *(void *)&unsigned char buf[24] = v61;
            *(_WORD *)&unsigned char buf[32] = 2082;
            *(void *)&buf[34] = v3;
            _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived geohash hint %{public}s", buf, 0x2Au);
          }
        }
LABEL_236:
        if (!*v3) {
          return 1;
        }
        goto LABEL_237;
      }
    }
    else
    {
      uint64_t v56 = *(void *)(a1 + 40);
    }
    if (v56)
    {
      uint64_t v118 = *(void **)(v56 + 328);
      if (v118)
      {
        if (nw_protocol_masque_get_definition(void)::onceToken != -1) {
          dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27403);
        }
        if (nw_protocol_masque_get_definition(void)::definition) {
          id v119 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
        }
        else {
          id v119 = 0;
        }
        uint64_t globals_for_protocol = nw_context_get_globals_for_protocol(v118, v119);
        if (globals_for_protocol)
        {
          uint64_t v3 = (char *)(globals_for_protocol + 4);
          *(unsigned char *)(globals_for_protocol + 10) = 0;
          uint64_t v125 = *(void *)(a1 + 40);
          if (v125) {
            goto LABEL_233;
          }
          goto LABEL_234;
        }
        __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        os_log_type_t v171 = (void *)_os_log_send_and_compose_impl();
        LOBYTE(__dst[0]) = 16;
        LOBYTE(v196) = 0;
        if (!__nwlog_fault((const char *)v171, __dst, &v196))
        {
LABEL_422:
          if (v171) {
            free(v171);
          }
          uint64_t v3 = 0;
          uint64_t v125 = *(void *)(a1 + 40);
          if (v125)
          {
LABEL_233:
            if (*(unsigned char *)(v125 + 529)) {
              goto LABEL_235;
            }
          }
LABEL_234:
          if (gLogDatapath)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            unint64_t v175 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v176 = *(void *)(a1 + 40);
              BOOL v177 = v176 == 0;
              if (v176) {
                __int16 v178 = (const char *)(v176 + 531);
              }
              else {
                __int16 v178 = "";
              }
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
              *(void *)&buf[14] = v178;
              unint64_t v179 = " ";
              *(_WORD *)&buf[12] = 2082;
              if (v177) {
                unint64_t v179 = "";
              }
              *(_WORD *)&unsigned char buf[22] = 2080;
              *(void *)&unsigned char buf[24] = v179;
              *(_WORD *)&unsigned char buf[32] = 2082;
              *(void *)&buf[34] = v3;
              _os_log_impl(&dword_1830D4000, v175, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sUsing cached geohash hint %{public}s", buf, 0x2Au);
            }
          }
LABEL_235:
          if (!v3) {
            return 1;
          }
          goto LABEL_236;
        }
        if (LOBYTE(__dst[0]) == 17)
        {
          int v172 = __nwlog_obj();
          os_log_type_t v173 = (os_log_type_t)__dst[0];
          if (!os_log_type_enabled(v172, (os_log_type_t)__dst[0])) {
            goto LABEL_422;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
          __int16 v174 = "%{public}s called with null globals";
          goto LABEL_421;
        }
        if (!(_BYTE)v196)
        {
          int v172 = __nwlog_obj();
          os_log_type_t v173 = (os_log_type_t)__dst[0];
          if (!os_log_type_enabled(v172, (os_log_type_t)__dst[0])) {
            goto LABEL_422;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
          __int16 v174 = "%{public}s called with null globals, backtrace limit exceeded";
          goto LABEL_421;
        }
        uint64_t v181 = (char *)__nw_create_backtrace_string();
        int v172 = __nwlog_obj();
        os_log_type_t v173 = (os_log_type_t)__dst[0];
        BOOL v185 = os_log_type_enabled(v172, (os_log_type_t)__dst[0]);
        if (!v181)
        {
          if (!v185) {
            goto LABEL_422;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
          __int16 v174 = "%{public}s called with null globals, no backtrace";
          goto LABEL_421;
        }
        if (v185)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v181;
          unint64_t v183 = "%{public}s called with null globals, dumping backtrace:%{public}s";
          goto LABEL_398;
        }
LABEL_399:
        free(v181);
        goto LABEL_422;
      }
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
      os_log_type_t v171 = (void *)_os_log_send_and_compose_impl();
      LOBYTE(__dst[0]) = 16;
      LOBYTE(v196) = 0;
      if (!__nwlog_fault((const char *)v171, __dst, &v196)) {
        goto LABEL_422;
      }
      if (LOBYTE(__dst[0]) == 17)
      {
        int v172 = __nwlog_obj();
        os_log_type_t v173 = (os_log_type_t)__dst[0];
        if (!os_log_type_enabled(v172, (os_log_type_t)__dst[0])) {
          goto LABEL_422;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        __int16 v174 = "%{public}s called with null masque->context";
        goto LABEL_421;
      }
      if (!(_BYTE)v196)
      {
        int v172 = __nwlog_obj();
        os_log_type_t v173 = (os_log_type_t)__dst[0];
        if (!os_log_type_enabled(v172, (os_log_type_t)__dst[0])) {
          goto LABEL_422;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        __int16 v174 = "%{public}s called with null masque->context, backtrace limit exceeded";
        goto LABEL_421;
      }
      uint64_t v181 = (char *)__nw_create_backtrace_string();
      int v172 = __nwlog_obj();
      os_log_type_t v173 = (os_log_type_t)__dst[0];
      BOOL v184 = os_log_type_enabled(v172, (os_log_type_t)__dst[0]);
      if (!v181)
      {
        if (!v184) {
          goto LABEL_422;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        __int16 v174 = "%{public}s called with null masque->context, no backtrace";
        goto LABEL_421;
      }
      if (!v184) {
        goto LABEL_399;
      }
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v181;
      unint64_t v183 = "%{public}s called with null masque->context, dumping backtrace:%{public}s";
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
      os_log_type_t v171 = (void *)_os_log_send_and_compose_impl();
      LOBYTE(__dst[0]) = 16;
      LOBYTE(v196) = 0;
      if (!__nwlog_fault((const char *)v171, __dst, &v196)) {
        goto LABEL_422;
      }
      if (LOBYTE(__dst[0]) == 17)
      {
        int v172 = __nwlog_obj();
        os_log_type_t v173 = (os_log_type_t)__dst[0];
        if (!os_log_type_enabled(v172, (os_log_type_t)__dst[0])) {
          goto LABEL_422;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        __int16 v174 = "%{public}s called with null masque";
LABEL_421:
        _os_log_impl(&dword_1830D4000, v172, v173, v174, buf, 0xCu);
        goto LABEL_422;
      }
      if (!(_BYTE)v196)
      {
        int v172 = __nwlog_obj();
        os_log_type_t v173 = (os_log_type_t)__dst[0];
        if (!os_log_type_enabled(v172, (os_log_type_t)__dst[0])) {
          goto LABEL_422;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        __int16 v174 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_421;
      }
      uint64_t v181 = (char *)__nw_create_backtrace_string();
      int v172 = __nwlog_obj();
      os_log_type_t v173 = (os_log_type_t)__dst[0];
      BOOL v182 = os_log_type_enabled(v172, (os_log_type_t)__dst[0]);
      if (!v181)
      {
        if (!v182) {
          goto LABEL_422;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
        __int16 v174 = "%{public}s called with null masque, no backtrace";
        goto LABEL_421;
      }
      if (!v182) {
        goto LABEL_399;
      }
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_masque_get_cached_geohash_value";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v181;
      unint64_t v183 = "%{public}s called with null masque, dumping backtrace:%{public}s";
    }
LABEL_398:
    _os_log_impl(&dword_1830D4000, v172, v173, v183, buf, 0x16u);
    goto LABEL_399;
  }
  int v35 = v34;
  if (!strcasecmp(a2, "User-Agent"))
  {
    __dst[0] = 0;
    if (v3 && *v3)
    {
      uint64_t v62 = *(void *)(a1 + 40);
      if ((!v62 || (*(unsigned char *)(v62 + 529) & 1) == 0) && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v63 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v64 = *(void *)(a1 + 40);
          BOOL v65 = v64 == 0;
          if (v64) {
            uint64_t v66 = (const char *)(v64 + 531);
          }
          else {
            uint64_t v66 = "";
          }
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
          *(void *)&buf[14] = v66;
          uint64_t v67 = " ";
          *(_WORD *)&buf[12] = 2082;
          if (v65) {
            uint64_t v67 = "";
          }
          *(_WORD *)&unsigned char buf[22] = 2080;
          *(void *)&unsigned char buf[24] = v67;
          *(_WORD *)&unsigned char buf[32] = 2082;
          *(void *)&buf[34] = v3;
          _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived user agent \"%{public}s\"", buf, 0x2Au);
        }
      }
LABEL_128:
      if (*v3) {
        nw_http_fields_append(*(void **)(a1 + 48), (uint64_t)a2, (uint64_t)v3);
      }
LABEL_130:
      uint32_t v78 = __dst[0];
      if (!__dst[0]) {
        return 1;
      }
LABEL_131:
      free(v78);
      return 1;
    }
    if (nw_utilities_get_user_agent::onceToken != -1) {
      dispatch_once(&nw_utilities_get_user_agent::onceToken, &__block_literal_global_13);
    }
    uint64_t v3 = (char *)nw_utilities_get_user_agent::user_agent_string;
    int v76 = *(_DWORD *)(*(void *)(a1 + 40) + 527);
    if ((v76 & 0x1000000) != 0)
    {
      asprintf(__dst, "%s (nwhttp)", (const char *)nw_utilities_get_user_agent::user_agent_string);
      uint64_t v3 = __dst[0];
      uint64_t v77 = *(void *)(a1 + 40);
      if (!v77)
      {
LABEL_126:
        if (gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v164 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v165 = *(void *)(a1 + 40);
            BOOL v166 = v165 == 0;
            if (v165) {
              int v167 = (const char *)(v165 + 531);
            }
            else {
              int v167 = "";
            }
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
            *(void *)&buf[14] = v167;
            v168 = " ";
            *(_WORD *)&buf[12] = 2082;
            if (v166) {
              v168 = "";
            }
            *(_WORD *)&unsigned char buf[22] = 2080;
            *(void *)&unsigned char buf[24] = v168;
            *(_WORD *)&unsigned char buf[32] = 2082;
            *(void *)&buf[34] = v3;
            _os_log_impl(&dword_1830D4000, v164, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sUsing process user agent \"%{public}s\"", buf, 0x2Au);
          }
        }
LABEL_127:
        if (!v3) {
          goto LABEL_130;
        }
        goto LABEL_128;
      }
      int v76 = *(_DWORD *)(v77 + 527);
    }
    if ((v76 & 0x10000) != 0) {
      goto LABEL_127;
    }
    goto LABEL_126;
  }
  if (v29 || v3 && *v3)
  {
    if (!v30 && (!v3 || !*v3))
    {
      uint64_t v79 = *(void *)(a1 + 40);
      BOOL v80 = *(void **)(a1 + 48);
      unsigned int v81 = nw_parameters_get_companion_proxy_required_interface_type(*(void *)(v79 + 320)) - 1;
      if (v81 <= 2)
      {
        uint64_t v82 = (uint64_t)*off_1E523ED80[v81];
        if (v82) {
          nw_http_fields_append(v80, (uint64_t)"Require-Interface", v82);
        }
      }
      return 1;
    }
    if (!v31 && (!v3 || !*v3))
    {
      uint64_t v109 = *(void *)(a1 + 40);
      BOOL v108 = *(void **)(a1 + 48);
      __dst[0] = 0;
      __dst[1] = (char *)__dst;
      long long v200 = 0x2000000000uLL;
      *(void *)&long long v196 = 0;
      *((void *)&v196 + 1) = &v196;
      long long v197 = 0x2000000000uLL;
      *(void *)&long long uu = 0;
      *((void *)&uu + 1) = &uu;
      uint64_t v203 = 0x2000000000;
      uint64_t v204 = 0;
      BOOL prohibit_expensive = nw_parameters_get_prohibit_expensive(*(nw_parameters_t *)(v109 + 320));
      BOOL v111 = prohibit_expensive;
      BOOL v112 = 0;
      if (prohibit_expensive)
      {
        *(void *)(*((void *)&uu + 1) + 24) += 9;
        BOOL v112 = "expensive";
      }
      BOOL prohibit_constrained = nw_parameters_get_prohibit_constrained(*(nw_parameters_t *)(v109 + 320));
      BOOL v114 = prohibit_constrained;
      if (prohibit_constrained)
      {
        uint64_t v115 = *((void *)&uu + 1);
        uint64_t v116 = *(void *)(*((void *)&uu + 1) + 24);
        if (v116) {
          *(void *)(*((void *)&uu + 1) + 24) = ++v116;
        }
        *(void *)(v115 + 24) = v116 + 11;
        BOOL v117 = "constrained";
      }
      else
      {
        BOOL v117 = 0;
      }
      int8x16_t v126 = *(NSObject **)(v109 + 320);
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL50nw_masque_add_prohibit_interface_header_to_requestP9nw_masqueP14nw_http_fields_block_invoke;
      *(void *)&unsigned char buf[24] = &unk_1E523E860;
      *(void *)&unsigned char buf[32] = &uu;
      *(void *)&uint8_t buf[40] = &v196;
      *(void *)&buf[48] = __dst;
      nw_parameters_iterate_prohibited_interface_types(v126, buf);
      uint64_t v127 = *(void *)(*((void *)&uu + 1) + 24);
      if (!v127) {
        goto LABEL_340;
      }
      *(void *)(*((void *)&uu + 1) + 24) = v127 + 1;
      id v128 = (void *)nw_calloc_type<unsigned char>(v127 + 1);
      id v129 = v128;
      *(unsigned char *)id v128 = 0;
      uint64_t v130 = *(void *)(*((void *)&v196 + 1) + 24);
      if (v130)
      {
        unint64_t v131 = *(void *)(*((void *)&uu + 1) + 24);
        if (v131)
        {
          uint64_t v132 = v128;
          while (*v132)
          {
            ++v132;
            if (!--v131) {
              goto LABEL_272;
            }
          }
          if (v131 < 2)
          {
LABEL_271:
            *uint64_t v132 = 0;
          }
          else
          {
            uint64_t v137 = 0;
            while (1)
            {
              int v138 = *(unsigned __int8 *)(v130 + v137);
              v132[v137] = v138;
              if (!v138) {
                break;
              }
              --v131;
              ++v137;
              if (v131 <= 1)
              {
                v132 += v137;
                goto LABEL_271;
              }
            }
          }
        }
LABEL_272:
        uint64_t v133 = *((void *)__dst[1] + 3);
        if (!v133) {
          goto LABEL_299;
        }
        unint64_t v135 = *(void *)(*((void *)&uu + 1) + 24);
        if (!v135) {
          goto LABEL_299;
        }
        nw_endpoint_t v139 = v128;
        unint64_t v140 = *(void *)(*((void *)&uu + 1) + 24);
        while (*v139)
        {
          ++v139;
          if (!--v140) {
            goto LABEL_284;
          }
        }
        if (v140 >= 2) {
          *v139++ = 44;
        }
        *nw_endpoint_t v139 = 0;
        uint64_t v133 = *((void *)__dst[1] + 3);
        unint64_t v135 = *(void *)(*((void *)&uu + 1) + 24);
LABEL_284:
        if (v133)
        {
          int v134 = 0;
          if (v135)
          {
LABEL_286:
            uint64_t v141 = v129;
            while (*v141)
            {
              ++v141;
              if (!--v135) {
                goto LABEL_289;
              }
            }
            if (!v134)
            {
              if (v135 >= 2) {
                goto LABEL_294;
              }
LABEL_298:
              *uint64_t v141 = 0;
              goto LABEL_299;
            }
            uint64_t v188 = __nwlog_obj();
            os_log_type_enabled(v188, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v205 = 136446210;
            *(void *)&v205[4] = "_strict_strlcpy";
            uint64_t v189 = (void *)_os_log_send_and_compose_impl();
            BOOL result = __nwlog_abort((uint64_t)v189);
            if (!result)
            {
              free(v189);
              if (v135 >= 2)
              {
LABEL_294:
                uint64_t v144 = 0;
                while (1)
                {
                  int v145 = *(unsigned __int8 *)(v133 + v144);
                  v141[v144] = v145;
                  if (!v145) {
                    goto LABEL_299;
                  }
                  --v135;
                  ++v144;
                  if (v135 <= 1)
                  {
                    v141 += v144;
                    goto LABEL_298;
                  }
                }
              }
              goto LABEL_298;
            }
LABEL_429:
            __break(1u);
            return result;
          }
        }
        else
        {
          __int16 v186 = __nwlog_obj();
          os_log_type_enabled(v186, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v205 = 136446210;
          *(void *)&v205[4] = "_strict_strlcat";
          unint64_t v187 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v187);
          if (result) {
            goto LABEL_429;
          }
          free(v187);
          uint64_t v133 = 0;
          int v134 = 1;
          if (v135) {
            goto LABEL_286;
          }
        }
      }
      else
      {
        uint64_t v133 = *((void *)__dst[1] + 3);
        if (!v133)
        {
          if (!v111)
          {
            if (v114)
            {
LABEL_328:
              unint64_t v155 = *(void *)(*((void *)&uu + 1) + 24);
              if (v155)
              {
                BOOL v156 = v129;
                while (*v156)
                {
                  ++v156;
                  if (!--v155) {
                    goto LABEL_339;
                  }
                }
                if (v155 < 2)
                {
LABEL_338:
                  *BOOL v156 = 0;
                }
                else
                {
                  uint64_t v157 = 0;
                  unint64_t v158 = v155 - 1;
                  while (1)
                  {
                    int v159 = v117[v157];
                    v156[v157] = v159;
                    if (!v159) {
                      break;
                    }
                    if (v158 == ++v157)
                    {
                      v156 += v157;
                      goto LABEL_338;
                    }
                  }
                }
              }
            }
LABEL_339:
            nw_http_fields_append(v108, (uint64_t)"Prohibit-Interface", (uint64_t)v129);
            free(v129);
LABEL_340:
            _Block_object_dispose(&uu, 8);
            _Block_object_dispose(&v196, 8);
            _Block_object_dispose(__dst, 8);
            return 1;
          }
          goto LABEL_308;
        }
        int v134 = 0;
        unint64_t v135 = *(void *)(*((void *)&uu + 1) + 24);
        if (v135) {
          goto LABEL_286;
        }
      }
LABEL_289:
      if (v134)
      {
        __int16 v142 = __nwlog_obj();
        os_log_type_enabled(v142, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v205 = 136446210;
        *(void *)&v205[4] = "_strict_strlcpy";
        id v143 = (void *)_os_log_send_and_compose_impl();
        BOOL result = __nwlog_abort((uint64_t)v143);
        if (result) {
          goto LABEL_429;
        }
        free(v143);
      }
LABEL_299:
      if (!v111) {
        goto LABEL_319;
      }
      unint64_t v146 = *(void *)(*((void *)&uu + 1) + 24);
      if (v146)
      {
        os_log_type_t v147 = v129;
        while (*v147)
        {
          ++v147;
          if (!--v146) {
            goto LABEL_308;
          }
        }
        if (v146 >= 2) {
          *v147++ = 44;
        }
        *os_log_type_t v147 = 0;
      }
LABEL_308:
      unint64_t v148 = *(void *)(*((void *)&uu + 1) + 24);
      if (v148)
      {
        char v149 = v129;
        while (*v149)
        {
          ++v149;
          if (!--v148) {
            goto LABEL_319;
          }
        }
        if (v148 < 2)
        {
LABEL_318:
          *char v149 = 0;
        }
        else
        {
          uint64_t v150 = 0;
          unint64_t v151 = v148 - 1;
          while (1)
          {
            int v152 = v112[v150];
            v149[v150] = v152;
            if (!v152) {
              break;
            }
            if (v151 == ++v150)
            {
              v149 += v150;
              goto LABEL_318;
            }
          }
        }
      }
LABEL_319:
      if (v114)
      {
        unint64_t v153 = *(void *)(*((void *)&uu + 1) + 24);
        if (v153)
        {
          __int16 v154 = v129;
          while (*v154)
          {
            ++v154;
            if (!--v153) {
              goto LABEL_328;
            }
          }
          if (v153 >= 2) {
            *v154++ = 44;
          }
          *__int16 v154 = 0;
        }
        goto LABEL_328;
      }
      goto LABEL_339;
    }
    if (!v32 && (!v3 || !*v3))
    {
      nw_masque_add_client_application_header_to_request(*(void **)(*(void *)(a1 + 40) + 320), *(void **)(a1 + 48));
      return 1;
    }
    if (!v33 && (!v3 || !*v3))
    {
      nw_masque_add_multipath_header_to_request(*(void *)(a1 + 40), *(void **)(a1 + 48));
      return 1;
    }
    if (!v35 && (!v3 || !*v3))
    {
      nw_masque_add_listener_association_header_to_request(*(void *)(a1 + 40), *(void **)(a1 + 48));
      return 1;
    }
LABEL_237:
    nw_http_fields_append(*(void **)(a1 + 48), (uint64_t)a2, (uint64_t)v3);
    return 1;
  }
  uint64_t v71 = *(void *)(a1 + 40);
  BOOL v72 = *(void **)(a1 + 48);
  int traffic_class = nw_parameters_get_traffic_class(*(void **)(v71 + 320));
  BOOL result = 1;
  if (traffic_class <= 499)
  {
    if (traffic_class <= 199)
    {
      if (!traffic_class)
      {
        uint64_t v74 = nw_http_priority_traffic_class_best_effort;
        uint64_t v75 = "u=6";
        goto LABEL_263;
      }
      if (traffic_class != 100) {
        return result;
      }
      uint64_t v74 = nw_http_priority_traffic_class_background_system;
    }
    else
    {
      if (traffic_class != 200)
      {
        if (traffic_class == 300)
        {
          uint64_t v74 = nw_http_priority_traffic_class_responsive_data;
          uint64_t v75 = "u=5";
        }
        else
        {
          if (traffic_class != 400) {
            return result;
          }
          uint64_t v74 = nw_http_priority_traffic_class_oam;
          uint64_t v75 = "u=4";
        }
        goto LABEL_263;
      }
      uint64_t v74 = nw_http_priority_traffic_class_background_user;
    }
    uint64_t v75 = "u=7";
    goto LABEL_263;
  }
  if (traffic_class > 699)
  {
    switch(traffic_class)
    {
      case 700:
        uint64_t v74 = nw_http_priority_traffic_class_video;
        break;
      case 900:
        uint64_t v74 = nw_http_priority_traffic_class_network_control;
        uint64_t v75 = "u=0";
        goto LABEL_263;
      case 800:
        uint64_t v74 = nw_http_priority_traffic_class_voice;
        break;
      default:
        return result;
    }
    uint64_t v75 = "u=1";
    goto LABEL_263;
  }
  if (traffic_class == 500)
  {
    uint64_t v74 = nw_http_priority_traffic_class_av_streaming;
    uint64_t v75 = "u=3";
  }
  else
  {
    if (traffic_class != 600) {
      return result;
    }
    uint64_t v74 = nw_http_priority_traffic_class_responsive_av;
    uint64_t v75 = "u=2";
  }
LABEL_263:
  uint64_t v136 = *v74;
  if (!v136) {
    return result;
  }
  *(void *)int buf = 0;
  asprintf((char **)buf, "%s,%s", v75, v136);
  nw_http_fields_append(v72, (uint64_t)"Priority", *(uint64_t *)buf);
  uint32_t v78 = *(char **)buf;
  if (*(void *)buf) {
    goto LABEL_131;
  }
  return 1;
}

void sub_1838416E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t ___ZL41nw_masque_options_enumerate_extra_headersP19nw_protocol_optionsU13block_pointerFbPKcS2_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  if (!v4)
  {
    size_t count = 0;
    int v6 = *(void **)(a2 + 16);
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  size_t count = xpc_array_get_count(v4);
  int v6 = *(void **)(a2 + 16);
  if (v6) {
LABEL_3:
  }
    int v6 = (void *)xpc_array_get_count(v6);
LABEL_4:
  if (count && (void *)count == v6)
  {
    size_t v7 = 0;
    size_t v8 = count - 1;
    do
    {
      uint64_t v9 = *(void *)(a1 + 32);
      string = xpc_array_get_string(*(xpc_object_t *)(a2 + 8), v7);
      char v11 = xpc_array_get_string(*(xpc_object_t *)(a2 + 16), v7);
      if ((*(unsigned int (**)(uint64_t, const char *, const char *))(v9 + 16))(v9, string, v11)) {
        BOOL v12 = v8 == v7;
      }
      else {
        BOOL v12 = 1;
      }
      ++v7;
    }
    while (!v12);
  }
  return 1;
}

__n128 ___ZL38nw_masque_add_extra_headers_to_requestP9nw_masqueP14nw_http_fields_block_invoke_109(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  size_t length = 0;
  data = (__n128 *)xpc_dictionary_get_data(xdict, "data", &length);
  if (!strcmp((const char *)&data[1], *(const char **)(a1 + 32))
    && !strcmp((const char *)&data[3], *(const char **)(a1 + 40)))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (!v6 || (*(unsigned char *)(v6 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      size_t v7 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 48);
        BOOL v9 = v8 == 0;
        *(_DWORD *)int buf = 136447234;
        BOOL v14 = "nw_masque_add_extra_headers_to_request_block_invoke";
        if (v8) {
          uint64_t v10 = (const char *)(v8 + 531);
        }
        else {
          uint64_t v10 = "";
        }
        __int16 v15 = 2082;
        int v16 = v10;
        if (v9) {
          char v11 = "";
        }
        else {
          char v11 = " ";
        }
        __int16 v17 = 2080;
        int64_t v18 = v11;
        __int16 v19 = 1042;
        int v20 = 16;
        __int16 v21 = 2098;
        uint64_t v22 = data;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound token agent %{public, uuid_t}.16P", buf, 0x30u);
      }
    }
    __n128 result = *data;
    *(__n128 *)*(void *)(a1 + 56) = *data;
  }
  return result;
}

uint64_t ___ZL50nw_masque_add_prohibit_interface_header_to_requestP9nw_masqueP14nw_http_fields_block_invoke(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = a1 + 32;
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v8 = *(void *)(v7 + 24);
    if (v8) {
      *(void *)(v7 + 24) = v8 + 1;
    }
    uint64_t v5 = a1 + 48;
    uint64_t v6 = "cellular";
    goto LABEL_9;
  }
  if (a2 == 1)
  {
    uint64_t v2 = a1 + 32;
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v4 = *(void *)(v3 + 24);
    if (v4) {
      *(void *)(v3 + 24) = v4 + 1;
    }
    uint64_t v5 = a1 + 40;
    uint64_t v6 = "wifi";
LABEL_9:
    *(void *)(*(void *)(*(void *)v5 + 8) + 24) = v6;
    *(void *)(*(void *)(*(void *)v2 + 8) + 24) += strlen(*(const char **)(*(void *)(*(void *)v5 + 8)
                                                                                  + 24));
  }
  return 1;
}

void nw_masque_add_client_application_header_to_request(void *a1, void *a2)
{
  uint64_t effective_bundle_id = nw_parameters_get_effective_bundle_id(a1);
  if (effective_bundle_id) {
    goto LABEL_5;
  }
  if (nw_utilities_get_self_bundle_id::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_9);
  }
  uint64_t effective_bundle_id = nw_utilities_get_self_bundle_id::bundle_identifier_string;
  if (nw_utilities_get_self_bundle_id::bundle_identifier_string)
  {
LABEL_5:
    nw_http_fields_append(a2, (uint64_t)"Client-Application", effective_bundle_id);
  }
}

void nw_masque_add_multipath_header_to_request(uint64_t a1, void *a2)
{
  if (nw_parameters_get_multipath(*(void **)(a1 + 320)))
  {
    if (nw_masque_is_multipath_allowed(void)::onceToken != -1) {
      dispatch_once(&nw_masque_is_multipath_allowed(void)::onceToken, &__block_literal_global_132);
    }
    if (nw_masque_is_multipath_allowed(void)::isAllowed == 1)
    {
      BOOL v4 = nw_endpoint_copy_proxy_original_endpoint(*(void **)(a1 + 312));
      uint64_t v6 = 0;
      alternate_int port = nw_endpoint_get_alternate_port((void *)v4);
      asprintf(&v6, "%s;port=%u", "interactive", alternate_port);
      nw_http_fields_append(a2, (uint64_t)"Multipath", (uint64_t)v6);
      if (v6) {
        free(v6);
      }
    }
  }
}

void nw_masque_add_listener_association_header_to_request(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long uu = 0uLL;
  BOOL v4 = *(void **)(a1 + 320);
  if (!v4)
  {
    BOOL v4 = *(void **)(a1 + 48);
    if (v4)
    {
      uint64_t v5 = v4[3];
      if (v5 && (uint64_t v6 = *(void (**)(void))(v5 + 112)) != 0)
      {
        v6();
        BOOL v4 = *(void **)(a1 + 320);
      }
      else
      {
        BOOL v4 = 0;
      }
    }
  }
  nw_parameters_get_listener_uuid(v4, &uu);
  if (!uuid_is_null((const unsigned __int8 *)&uu))
  {
    memset(out, 0, 37);
    uuid_unparse((const unsigned __int8 *)&uu, out);
    nw_http_fields_append(a2, (uint64_t)"Listener-Association", (uint64_t)out);
    if ((*(unsigned char *)(a1 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v7 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        char v8 = *(_DWORD *)(a1 + 527);
        int v10 = 136446978;
        uint64_t v11 = a1 + 531;
        __int16 v12 = 2080;
        uint64_t v13 = " ";
        if ((v8 & 0x10) != 0) {
          BOOL v9 = " (listener)";
        }
        else {
          BOOL v9 = "";
        }
        __int16 v14 = 2080;
        __int16 v15 = out;
        __int16 v16 = 2080;
        __int16 v17 = v9;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s%sadded association uuid %s%s", (uint8_t *)&v10, 0x2Au);
      }
    }
  }
}

void ___ZL30nw_masque_is_multipath_allowedv_block_invoke()
{
  id v0 = (void *)nw_utilities_copy_local_entitlement_value("com.apple.developer.networking.multipath_extended");
  if (v0)
  {
    uint64_t v1 = v0;
    if (object_getClass(v0) == (Class)MEMORY[0x1E4F14570] && xpc_BOOL_get_value(v1)) {
      nw_masque_is_multipath_allowed(void)::isAllowed = 1;
    }
    xpc_release(v1);
  }
}

void ___ZL30nw_masque_send_proxied_messageP9nw_masqueP20nw_protocol_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
}

void nw_masque_send_connect(uint64_t a1)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446210;
    *(void *)&buf[0].sa_data[2] = "nw_masque_send_connect";
    uint64_t v130 = (char *)_os_log_send_and_compose_impl();
    address[0] = 16;
    LOBYTE(v145) = 0;
    if (!__nwlog_fault(v130, address, &v145)) {
      goto LABEL_294;
    }
    if (address[0] == 17)
    {
      unint64_t v131 = __nwlog_obj();
      os_log_type_t v132 = address[0];
      if (!os_log_type_enabled(v131, (os_log_type_t)address[0])) {
        goto LABEL_294;
      }
      *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446210;
      *(void *)&buf[0].sa_data[2] = "nw_masque_send_connect";
      uint64_t v133 = "%{public}s called with null masque";
    }
    else if ((_BYTE)v145)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v131 = __nwlog_obj();
      os_log_type_t v132 = address[0];
      BOOL v135 = os_log_type_enabled(v131, (os_log_type_t)address[0]);
      if (backtrace_string)
      {
        if (v135)
        {
          *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446466;
          *(void *)&buf[0].sa_data[2] = "nw_masque_send_connect";
          *(_WORD *)&buf[0].sa_data[10] = 2082;
          *(void *)&buf[0].sa_data[12] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v131, v132, "%{public}s called with null masque, dumping backtrace:%{public}s", &buf[0].sa_len, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_294;
      }
      if (!v135)
      {
LABEL_294:
        if (v130) {
          free(v130);
        }
        return;
      }
      *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446210;
      *(void *)&buf[0].sa_data[2] = "nw_masque_send_connect";
      uint64_t v133 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      unint64_t v131 = __nwlog_obj();
      os_log_type_t v132 = address[0];
      if (!os_log_type_enabled(v131, (os_log_type_t)address[0])) {
        goto LABEL_294;
      }
      *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446210;
      *(void *)&buf[0].sa_data[2] = "nw_masque_send_connect";
      uint64_t v133 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v131, v132, v133, &buf[0].sa_len, 0xCu);
    goto LABEL_294;
  }
  uint64_t v2 = mach_continuous_time();
  if (v2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2;
  }
  *(void *)(a1 + 288) = v3;
  BOOL v4 = *(void **)(a1 + 344);
  if (!v4) {
    goto LABEL_7;
  }
  *(void *)uint64_t address = 0;
  *(void *)&address[8] = address;
  *(void *)&address[16] = 0x2000000000;
  size_t v148 = 0;
  *(void *)&buf[0].os_log_type_t sa_len = MEMORY[0x1E4F143A8];
  *(void *)&buf[0].sa_data[6] = 0x40000000;
  *(void *)&buf[1].os_log_type_t sa_len = __nw_masque_options_copy_target_endpoint_block_invoke;
  *(void *)&buf[1].sa_data[6] = &unk_1E523E368;
  *(void *)&buf[2].os_log_type_t sa_len = address;
  nw_protocol_options_access_handle(v4, buf);
  uint64_t v5 = *(void **)(*(void *)&address[8] + 24);
  _Block_object_dispose(address, 8);
  if (!v5)
  {
LABEL_7:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6 && (v7 = *(void *)(v6 + 24)) != 0 && (char v8 = *(uint64_t (**)(void))(v7 + 136)) != 0)
    {
      BOOL v9 = (void *)v8();
      if (!v9) {
        goto LABEL_109;
      }
    }
    else
    {
      BOOL v9 = *(void **)(a1 + 304);
      if (!v9) {
        goto LABEL_109;
      }
    }
    uint64_t v5 = os_retain(v9);
    if (v5) {
      goto LABEL_12;
    }
LABEL_109:
    nw_masque_mark_failed_with_error(a1, 22);
    return;
  }
LABEL_12:
  int v10 = *(void **)(a1 + 312);
  if (v10)
  {
    os_release(v10);
    *(void *)(a1 + 312) = 0;
  }
  *(void *)(a1 + 312) = nw_endpoint_copy_original_endpoint(v5, 2);
  os_release(v5);
  if (nw_endpoint_get_type(*(nw_endpoint_t *)(a1 + 312)) == nw_endpoint_type_address)
  {
    uint64_t v11 = nw_endpoint_get_address(*(nw_endpoint_t *)(a1 + 312));
    if (v11->sa_family == 30)
    {
      __int16 v12 = v11;
      int v145 = 0;
      int v13 = nw_nat64_copy_prefixes(0, &v145);
      if (v13 >= 1)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 16 * v13;
        while (1)
        {
          LODWORD(v144) = 0;
          if (nw_nat64_extract_v4((unsigned int *)&v145[v14], &v12->sa_data[6], (uint64_t)&v144)) {
            break;
          }
          v14 += 16;
          if (v15 == v14) {
            goto LABEL_29;
          }
        }
        *(void *)&address[8] = 0;
        *(void *)uint64_t address = 528;
        *(_WORD *)&address[2] = *(_WORD *)v12->sa_data;
        *(_DWORD *)&address[4] = v144;
        *(void *)&address[8] = 0;
        nw_endpoint_t v16 = nw_endpoint_create_address((const sockaddr *)address);
        if ((*(unsigned char *)(a1 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          __int16 v17 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            logging_description = nw_endpoint_get_logging_description(v16);
            __int16 v19 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
            *(_DWORD *)&buf[0].os_log_type_t sa_len = 136447234;
            *(void *)&buf[0].sa_data[2] = "nw_masque_send_connect";
            *(void *)&buf[0].sa_data[12] = a1 + 531;
            *(_WORD *)&buf[1].sa_data[4] = 2080;
            *(_WORD *)&buf[0].sa_data[10] = 2082;
            *(void *)&buf[1].sa_data[6] = " ";
            *(_WORD *)&buf[2].os_log_type_t sa_len = 2082;
            *(void *)buf[2].sa_data = logging_description;
            *(_WORD *)&buf[2].sa_data[8] = 2082;
            *(void *)&buf[2].sa_data[10] = v19;
            _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sExtracted address %{public}s from %{public}s", &buf[0].sa_len, 0x34u);
          }
        }
        uint64_t v20 = *(void **)(a1 + 312);
        if (v20) {
          os_release(v20);
        }
        *(void *)(a1 + 312) = v16;
      }
    }
  }
LABEL_29:
  uint64_t v144 = 0;
  int v145 = 0;
  __int16 v21 = (unsigned char *)(a1 + 527);
  int v22 = *(_DWORD *)(a1 + 527);
  if ((v22 & 0x10) != 0)
  {
    if ((v22 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      int v27 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446466;
        *(void *)&buf[0].sa_data[2] = a1 + 531;
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(void *)&buf[0].sa_data[12] = " ";
        _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_INFO, "%{public}s%sCreating CONNECT (connect-udp) request for listening", &buf[0].sa_len, 0x16u);
      }
    }
    int v28 = *(void **)(a1 + 344);
    if (v28)
    {
      int v29 = v28;
      id v30 = v29[3];

      if (v30)
      {
        id v31 = v30;
        uint64_t v32 = [v31 hostname];

        id v33 = v31;
        unsigned int v34 = [v33 port];

        os_release(v33);
        if (v32)
        {
          unsigned int v35 = __rev16(v34);
          if (v35 != 443 && v35) {
            asprintf(&v145, "%s:%u");
          }
          else {
            asprintf(&v145, "%s");
          }
          int v63 = 0;
          goto LABEL_113;
        }
        if (*(unsigned char *)(a1 + 529)) {
          goto LABEL_109;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        long long v36 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_109;
        }
LABEL_107:
        *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446466;
        *(void *)&buf[0].sa_data[2] = a1 + 531;
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(void *)&buf[0].sa_data[12] = " ";
        BOOL v68 = "%{public}s%sProxy hostname not found";
        goto LABEL_108;
      }
    }
    if (*(unsigned char *)(a1 + 529)) {
      goto LABEL_109;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    long long v36 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_109;
    }
LABEL_102:
    *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446466;
    *(void *)&buf[0].sa_data[2] = a1 + 531;
    *(_WORD *)&buf[0].sa_data[10] = 2080;
    *(void *)&buf[0].sa_data[12] = " ";
    BOOL v68 = "%{public}s%sProxy endpoint not found";
LABEL_108:
    _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, v68, &buf[0].sa_len, 0x16u);
    goto LABEL_109;
  }
  if ((v22 & 8) != 0)
  {
    if (*(_DWORD *)(a1 + 504) != 2)
    {
      if ((v22 & 0x10000) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        __int16 v57 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
        {
          uint64_t v58 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
          *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446722;
          *(void *)&buf[0].sa_data[2] = a1 + 531;
          *(_WORD *)&buf[0].sa_data[10] = 2080;
          *(void *)&buf[0].sa_data[12] = " ";
          *(_WORD *)&buf[1].sa_data[4] = 2082;
          *(void *)&buf[1].sa_data[6] = v58;
          _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_INFO, "%{public}s%sCreating CONNECT-UDP request for %{public}s", &buf[0].sa_len, 0x20u);
        }
      }
      uint64_t v25 = "https";
      __int16 v26 = nw_http_request_method_connect_udp;
LABEL_83:
      BOOL v59 = *v26;
      if (nw_endpoint_get_type(*(nw_endpoint_t *)(a1 + 312)) == nw_endpoint_type_address
        && nw_endpoint_get_address_family(*(void **)(a1 + 312)) == 30)
      {
        uint64_t v60 = "[%s]:%u";
      }
      else
      {
        uint64_t v60 = "%s:%u";
      }
      hostname = nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 312));
      unsigned int port = nw_endpoint_get_port(*(nw_endpoint_t *)(a1 + 312));
      asprintf(&v145, v60, hostname, port);
      if ((*v21 & 8) != 0)
      {
        BOOL v65 = strdup("/");
        if (!v65)
        {
          uint64_t v136 = __nwlog_obj();
          os_log_type_enabled(v136, OS_LOG_TYPE_ERROR);
          *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446210;
          *(void *)&buf[0].sa_data[2] = "strict_strdup";
          uint64_t v137 = (void *)_os_log_send_and_compose_impl();
          if (__nwlog_abort((uint64_t)v137)) {
            goto LABEL_306;
          }
          free(v137);
        }
        int v63 = 0;
        uint64_t v64 = 0;
        uint64_t v144 = v65;
      }
      else
      {
        int v63 = 0;
        uint64_t v64 = 0;
      }
      char v66 = 1;
      uint64_t v67 = v145;
      if (!v145)
      {
LABEL_172:
        BOOL v87 = (void *)nw_http_request_create((uint64_t)v59, (uint64_t)v25, (uint64_t)v67, (uint64_t)v144);
        if (v145)
        {
          free(v145);
          int v145 = 0;
        }
        if (v144)
        {
          free(v144);
          uint64_t v144 = 0;
        }
        if (v66)
        {
          if (v63) {
            goto LABEL_178;
          }
        }
        else
        {
          nw_http_request_set_extended_connect_protocol(v87, (uint64_t)v64);
          if (v63)
          {
LABEL_178:
            nw_http_fields_append(v87, (uint64_t)"Proxy-QUIC-Forwarding", (uint64_t)"?1");
            int v88 = *(_DWORD *)v21;
            if ((*(_DWORD *)v21 & 0x40000) != 0) {
              goto LABEL_179;
            }
            goto LABEL_183;
          }
        }
        int v88 = *(_DWORD *)v21;
        if ((*(_DWORD *)v21 & 0x40000) != 0)
        {
LABEL_179:
          nw_http_fields_append(v87, (uint64_t)"Capsule-Protocol", (uint64_t)"?1");
          if ((*(_DWORD *)v21 & 0x10) == 0)
          {
LABEL_185:
            nw_masque_add_listener_association_header_to_request(a1, v87);
            nw_http_fields_append(v87, (uint64_t)"Priority", (uint64_t)"i");
            if (!nw_masque_add_extra_headers_to_request(a1, v87))
            {
LABEL_276:
              if (v87) {
                os_release(v87);
              }
              return;
            }
            if (*(void *)(a1 + 384) && *(_DWORD *)(a1 + 504) == 1)
            {
              BOOL v89 = dispatch_data_create_with_transform();
              memset(&buf[0].sa_family, 0, 63);
              buf[0].os_log_type_t sa_len = 58;
              if (dispatch_data_get_size(v89) < 0x3E)
              {
                nw_masque_change_base64_to_base64url((char *)buf);
                *(_WORD *)(&buf[0].sa_family + nw_dispatch_data_copyout(v89, (uint64_t)&buf[0].sa_family, 61)) = 58;
                nw_http_fields_append(v87, (uint64_t)"Client-Connection-Id", (uint64_t)buf);
              }
              else if ((v21[2] & 1) == 0)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                BOOL v90 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                {
                  size_t size = dispatch_data_get_size(v89);
                  *(_DWORD *)uint64_t address = 136446722;
                  *(void *)&address[4] = a1 + 531;
                  *(_WORD *)&address[12] = 2080;
                  *(void *)&address[14] = " ";
                  *(_WORD *)&address[22] = 2048;
                  size_t v148 = size;
                  _os_log_impl(&dword_1830D4000, v90, OS_LOG_TYPE_ERROR, "%{public}s%sBase64 data is too large: %zu", address, 0x20u);
                }
              }
              if (v89) {
                dispatch_release(v89);
              }
            }
            metadata_for_request = nw_http_create_metadata_for_request(v87);
            BOOL v93 = metadata_for_request;
            if ((*v21 & 0x10) != 0) {
              nw_http_metadata_set_datagram_context_id(metadata_for_request, 2);
            }
            if ((nw_masque_send_metadata(a1, (uint64_t)v93, *(void *)(a1 + 32)) & 1) == 0)
            {
              nw_masque_mark_failed_with_error(a1, 12);
LABEL_274:
              if (v93) {
                os_release(v93);
              }
              goto LABEL_276;
            }
            int v96 = *(_DWORD *)v21;
            if ((*(_DWORD *)v21 & 0x10000) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
              }
              BOOL v97 = gprivacy_proxyLogObj;
              BOOL v98 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
              int v96 = *(_DWORD *)v21;
              if (v98)
              {
                uint64_t v99 = "-IP";
                if ((v96 & 0x20) == 0) {
                  uint64_t v99 = "";
                }
                *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446978;
                *(void *)&buf[0].sa_data[2] = "nw_masque_send_connect";
                *(_WORD *)&buf[0].sa_data[10] = 2082;
                *(void *)&buf[0].sa_data[12] = a1 + 531;
                *(_WORD *)&buf[1].sa_data[4] = 2080;
                *(void *)&buf[1].sa_data[6] = " ";
                if ((v96 & 8) != 0) {
                  unsigned int v100 = "-UDP";
                }
                else {
                  unsigned int v100 = v99;
                }
                *(_WORD *)&buf[2].os_log_type_t sa_len = 2080;
                *(void *)buf[2].sa_data = v100;
                _os_log_impl(&dword_1830D4000, v97, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSent CONNECT%s request", &buf[0].sa_len, 0x2Au);
                int v96 = *(_DWORD *)v21;
              }
            }
            *(_DWORD *)(a1 + 508) = 2;
            if ((v96 & 8) != 0)
            {
              BOOL v101 = *(NSObject **)(a1 + 384);
              if (v101)
              {
                if (*(_DWORD *)(a1 + 504) == 2 && *(void *)(a1 + 432))
                {
                  if (*(void *)(a1 + 400)) {
                    BOOL v102 = *(NSObject **)(a1 + 400);
                  }
                  else {
                    BOOL v102 = *(NSObject **)(a1 + 384);
                  }
                  virtual_BOOL connection_id_capsule = nw_masque_create_virtual_connection_id_capsule(v101, v102, v94, v95);
                  char v104 = nw_masque_send_metadata(a1, virtual_connection_id_capsule, *(void *)(a1 + 32));
                  int v105 = *(_DWORD *)v21;
                  if (v104)
                  {
                    if ((v105 & 0x10000) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                      }
                      BOOL v106 = gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446722;
                        *(void *)&buf[0].sa_data[2] = "nw_masque_send_connect";
                        *(_WORD *)&buf[0].sa_data[10] = 2082;
                        *(void *)&buf[0].sa_data[12] = a1 + 531;
                        *(_WORD *)&buf[1].sa_data[4] = 2080;
                        *(void *)&buf[1].sa_data[6] = " ";
                        _os_log_impl(&dword_1830D4000, v106, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSent REGISTER_CLIENT_CID capsule", &buf[0].sa_len, 0x20u);
                      }
                    }
                    *(_DWORD *)v21 |= 0x8000000u;
                  }
                  else if ((v105 & 0x10000) == 0)
                  {
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                    }
                    id v107 = gprivacy_proxyLogObj;
                    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446466;
                      *(void *)&buf[0].sa_data[2] = a1 + 531;
                      *(_WORD *)&buf[0].sa_data[10] = 2080;
                      *(void *)&buf[0].sa_data[12] = " ";
                      _os_log_impl(&dword_1830D4000, v107, OS_LOG_TYPE_ERROR, "%{public}s%sFailed to send REGISTER_CLIENT_CID capsule", &buf[0].sa_len, 0x16u);
                    }
                  }
                  if (virtual_connection_id_capsule) {
                    os_release((void *)virtual_connection_id_capsule);
                  }
                }
              }
            }
            int v108 = *(_DWORD *)v21;
            if ((*(_DWORD *)v21 & 0x20) == 0) {
              goto LABEL_274;
            }
            uint64_t v109 = *(void **)(a1 + 456);
            if (v109)
            {
              unint64_t next_connect_ip_request_id = nw_http_connection_metadata_get_next_connect_ip_request_id(v109);
              unint64_t v111 = nw_http_connection_metadata_get_next_connect_ip_request_id(*(void **)(a1 + 456));
              int v108 = *(_DWORD *)v21;
            }
            else
            {
              unint64_t next_connect_ip_request_id = 0;
              unint64_t v111 = 0;
            }
            if ((v108 & 0x10000) == 0 && gLogDatapath)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
              }
              int v138 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)&buf[0].os_log_type_t sa_len = 136447234;
                *(void *)&buf[0].sa_data[2] = "nw_masque_send_connect";
                *(_WORD *)&buf[0].sa_data[10] = 2082;
                *(void *)&buf[0].sa_data[12] = a1 + 531;
                *(_WORD *)&buf[1].sa_data[4] = 2080;
                *(void *)&buf[1].sa_data[6] = " ";
                *(_WORD *)&buf[2].os_log_type_t sa_len = 2048;
                *(void *)buf[2].sa_data = next_connect_ip_request_id;
                *(_WORD *)&buf[2].sa_data[8] = 2048;
                *(void *)&buf[2].sa_data[10] = v111;
                _os_log_impl(&dword_1830D4000, v138, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sADDRESS_REQUEST capsule v4 request ID: %llu, v6 request ID %llu", &buf[0].sa_len, 0x34u);
              }
            }
            *(void *)uint64_t address = 0;
            if (next_connect_ip_request_id > 0x3F)
            {
              if (next_connect_ip_request_id >> 14)
              {
                if (next_connect_ip_request_id >> 30)
                {
                  if (next_connect_ip_request_id >> 62)
                  {
                    __int16 v113 = __nwlog_obj();
                    os_log_type_enabled(v113, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446466;
                    *(void *)&buf[0].sa_data[2] = "_http_vle_encode";
                    *(_WORD *)&buf[0].sa_data[10] = 2048;
                    *(void *)&buf[0].sa_data[12] = next_connect_ip_request_id;
                    BOOL v114 = (void *)_os_log_send_and_compose_impl();
                    if (__nwlog_abort((uint64_t)v114)) {
                      goto LABEL_306;
                    }
                    free(v114);
                    size_t v112 = 0;
                  }
                  else
                  {
                    *(void *)uint64_t address = bswap64(next_connect_ip_request_id | 0xC000000000000000);
                    size_t v112 = 8;
                  }
                }
                else
                {
                  *(void *)uint64_t address = bswap32(next_connect_ip_request_id | 0x80000000);
                  size_t v112 = 4;
                }
              }
              else
              {
                *(void *)uint64_t address = bswap32(next_connect_ip_request_id | 0x4000) >> 16;
                size_t v112 = 2;
              }
            }
            else
            {
              *(void *)uint64_t address = next_connect_ip_request_id;
              size_t v112 = 1;
            }
            unint64_t __src = 0;
            if (v111 <= 0x3F)
            {
              unint64_t __src = v111;
              size_t v115 = 1;
              goto LABEL_258;
            }
            if (!(v111 >> 14))
            {
              unint64_t __src = bswap32(v111 | 0x4000) >> 16;
              size_t v115 = 2;
              goto LABEL_258;
            }
            if (!(v111 >> 30))
            {
              unint64_t __src = bswap32(v111 | 0x80000000);
              size_t v115 = 4;
              goto LABEL_258;
            }
            if (!(v111 >> 62))
            {
              unint64_t __src = bswap64(v111 | 0xC000000000000000);
              size_t v115 = 8;
              goto LABEL_258;
            }
            uint64_t v116 = __nwlog_obj();
            os_log_type_enabled(v116, OS_LOG_TYPE_ERROR);
            *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446466;
            *(void *)&buf[0].sa_data[2] = "_http_vle_encode";
            *(_WORD *)&buf[0].sa_data[10] = 2048;
            *(void *)&buf[0].sa_data[12] = v111;
            BOOL v117 = (void *)_os_log_send_and_compose_impl();
            if (!__nwlog_abort((uint64_t)v117))
            {
              free(v117);
              size_t v115 = 0;
LABEL_258:
              alloc = dispatch_data_create_alloc();
              memcpy(0, address, v112);
              *(unsigned char *)size_t v112 = 4;
              *(_DWORD *)(v112 + 1) = 0;
              *(unsigned char *)(v112 + 5) = 32;
              id v119 = (char *)(v112 + 6);
              memcpy(v119, &__src, v115);
              uint64_t v120 = &v119[v115];
              *uint64_t v120 = 6;
              *(void *)(v120 + 9) = 0;
              *(void *)(v120 + 1) = 0;
              v120[17] = 0x80;
              metadata_for_capsule = nw_http_create_metadata_for_capsule(2, alloc);
              if (alloc) {
                dispatch_release(alloc);
              }
              char v122 = nw_masque_send_metadata(a1, (uint64_t)metadata_for_capsule, *(void *)(a1 + 32));
              int v123 = *(_DWORD *)v21;
              if (v122)
              {
                if ((v123 & 0x10000) != 0) {
                  goto LABEL_272;
                }
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                uint64_t v124 = gprivacy_proxyLogObj;
                if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_272;
                }
                *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446722;
                *(void *)&buf[0].sa_data[2] = "nw_masque_send_connect";
                *(_WORD *)&buf[0].sa_data[10] = 2082;
                *(void *)&buf[0].sa_data[12] = a1 + 531;
                *(_WORD *)&buf[1].sa_data[4] = 2080;
                *(void *)&buf[1].sa_data[6] = " ";
                uint64_t v125 = "%{public}s %{public}s%sSent ADDRESS_REQUEST capsule";
                int8x16_t v126 = v124;
                os_log_type_t v127 = OS_LOG_TYPE_DEBUG;
                uint32_t v128 = 32;
              }
              else
              {
                if ((v123 & 0x10000) != 0) {
                  goto LABEL_272;
                }
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                uint64_t v129 = gprivacy_proxyLogObj;
                if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_272;
                }
                *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446466;
                *(void *)&buf[0].sa_data[2] = a1 + 531;
                *(_WORD *)&buf[0].sa_data[10] = 2080;
                *(void *)&buf[0].sa_data[12] = " ";
                uint64_t v125 = "%{public}s%sFailed to send ADDRESS_REQUEST capsule";
                int8x16_t v126 = v129;
                os_log_type_t v127 = OS_LOG_TYPE_ERROR;
                uint32_t v128 = 22;
              }
              _os_log_impl(&dword_1830D4000, v126, v127, v125, &buf[0].sa_len, v128);
LABEL_272:
              if (metadata_for_capsule) {
                os_release(metadata_for_capsule);
              }
              goto LABEL_274;
            }
LABEL_306:
            __break(1u);
            return;
          }
LABEL_184:
          nw_http_fields_append(v87, (uint64_t)"Connect-UDP-Bind", (uint64_t)"2");
          goto LABEL_185;
        }
LABEL_183:
        if ((v88 & 0x10) == 0) {
          goto LABEL_185;
        }
        goto LABEL_184;
      }
      goto LABEL_149;
    }
    if ((v22 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      long long v37 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v38 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
        *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446722;
        *(void *)&buf[0].sa_data[2] = a1 + 531;
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(void *)&buf[0].sa_data[12] = " ";
        *(_WORD *)&buf[1].sa_data[4] = 2082;
        *(void *)&buf[1].sa_data[6] = v38;
        _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_INFO, "%{public}s%sCreating CONNECT (connect-udp) request for %{public}s", &buf[0].sa_len, 0x20u);
      }
    }
    char v39 = *(void **)(a1 + 344);
    if (v39)
    {
      uint64_t v40 = v39;
      id v41 = v40[3];

      if (v41)
      {
        id v42 = v41;
        uint64_t v43 = [v42 hostname];

        id v44 = v42;
        unsigned int v45 = [v44 port];

        os_release(v44);
        if (v43)
        {
          unsigned int v46 = __rev16(v45);
          if (v46 != 443 && v46) {
            asprintf(&v145, "%s:%u");
          }
          else {
            asprintf(&v145, "%s");
          }
          int v63 = 1;
LABEL_113:
          uint64_t v64 = "connect-udp";
          goto LABEL_114;
        }
        if (*(unsigned char *)(a1 + 529)) {
          goto LABEL_109;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        long long v36 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_109;
        }
        goto LABEL_107;
      }
    }
    if (*(unsigned char *)(a1 + 529)) {
      goto LABEL_109;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    long long v36 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_109;
    }
    goto LABEL_102;
  }
  if ((v22 & 0x20) == 0)
  {
    if ((v22 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v23 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        BOOL v24 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
        *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446722;
        *(void *)&buf[0].sa_data[2] = a1 + 531;
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(void *)&buf[0].sa_data[12] = " ";
        *(_WORD *)&buf[1].sa_data[4] = 2082;
        *(void *)&buf[1].sa_data[6] = v24;
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_INFO, "%{public}s%sCreating CONNECT request for %{public}s", &buf[0].sa_len, 0x20u);
      }
    }
    uint64_t v25 = 0;
    __int16 v26 = nw_http_request_method_connect;
    goto LABEL_83;
  }
  if ((v22 & 0x10000) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v47 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v48 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
      *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446722;
      *(void *)&buf[0].sa_data[2] = a1 + 531;
      *(_WORD *)&buf[0].sa_data[10] = 2080;
      *(void *)&buf[0].sa_data[12] = " ";
      *(_WORD *)&buf[1].sa_data[4] = 2082;
      *(void *)&buf[1].sa_data[6] = v48;
      _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_INFO, "%{public}s%sCreating CONNECT (connect-ip) request for %{public}s", &buf[0].sa_len, 0x20u);
    }
  }
  char v49 = *(void **)(a1 + 344);
  if (!v49 || (v50 = v49, id v51 = v50[3], v50, !v51))
  {
    if (*(unsigned char *)(a1 + 529)) {
      goto LABEL_109;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    long long v36 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_109;
    }
    goto LABEL_102;
  }
  id v52 = v51;
  uint64_t v53 = [v52 hostname];

  id v54 = v52;
  unsigned int v55 = [v54 port];

  os_release(v54);
  if (!v53)
  {
    if (*(unsigned char *)(a1 + 529)) {
      goto LABEL_109;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    long long v36 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_109;
    }
    goto LABEL_107;
  }
  unsigned int v56 = __rev16(v55);
  if (v56 != 443 && v56) {
    asprintf(&v145, "%s:%u");
  }
  else {
    asprintf(&v145, "%s");
  }
  int v63 = 0;
  uint64_t v64 = "connect-ip";
LABEL_114:
  int v69 = *(_DWORD *)v21;
  *(_DWORD *)v21 |= 0x40000u;
  if ((v69 & 0x10) != 0)
  {
    asprintf(&v144, "/.well-known/masque/udp/*/*/");
  }
  else if ((v69 & 0x28) != 0)
  {
    uint64_t v70 = nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 312));
    CFAllocatorRef v71 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v72 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v70, 0x8000100u);
    if (v72)
    {
      CFStringRef v73 = v72;
      CFCharacterSetRef URLPathAllowedCharacterSet = (const __CFCharacterSet *)_CFURLComponentsGetURLPathAllowedCharacterSet();
      MutableCopy = CFCharacterSetCreateMutableCopy(v71, URLPathAllowedCharacterSet);
      if (MutableCopy)
      {
        int v76 = MutableCopy;
        CFCharacterSetRemoveCharactersInString(MutableCopy, @":");
        CFStringRef v77 = (const __CFString *)_CFStringCreateByAddingPercentEncodingWithAllowedCharacters();
        if (v77)
        {
          CFStringRef v78 = v77;
          CFIndex Length = CFStringGetLength(v77);
          size_t v80 = Length + 1;
          if (Length == -1)
          {
            nw_endpoint_t v139 = __nwlog_obj();
            os_log_type_enabled(v139, OS_LOG_TYPE_ERROR);
            *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "strict_calloc";
            unint64_t v140 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v140)) {
              goto LABEL_306;
            }
            free(v140);
          }
          unsigned int v81 = (char *)malloc_type_calloc(1uLL, v80, 0xEAFB8F1AuLL);
          if (!v81)
          {
            uint64_t v141 = __nwlog_obj();
            os_log_type_enabled(v141, OS_LOG_TYPE_ERROR);
            *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446722;
            *(void *)&buf[0].sa_data[2] = "strict_calloc";
            *(_WORD *)&buf[0].sa_data[10] = 2048;
            *(void *)&buf[0].sa_data[12] = 1;
            *(_WORD *)&buf[1].sa_data[4] = 2048;
            *(void *)&buf[1].sa_data[6] = v80;
            __int16 v142 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v142)) {
              goto LABEL_306;
            }
            free(v142);
            __int16 v21 = (unsigned char *)(a1 + 527);
          }
          CFStringGetCString(v78, v81, v80, 0x8000100u);
          CFRelease(v78);
        }
        else
        {
          unsigned int v81 = 0;
        }
        CFRelease(v76);
      }
      else
      {
        unsigned int v81 = 0;
      }
      CFRelease(v73);
    }
    else
    {
      unsigned int v81 = 0;
    }
    if ((*(_DWORD *)v21 & 8) != 0)
    {
      nw_endpoint_get_port(*(nw_endpoint_t *)(a1 + 312));
      asprintf(&v144, "/.well-known/masque/udp/%s/%u/");
    }
    else if ((*(_DWORD *)v21 & 0x20) != 0)
    {
      asprintf(&v144, "/.well-known/masque/ip/%s/%u/");
    }
    if (v81) {
      free(v81);
    }
  }
  char v66 = 0;
  BOOL v59 = "CONNECT";
  uint64_t v25 = "https";
  uint64_t v67 = v145;
  if (!v145) {
    goto LABEL_172;
  }
LABEL_149:
  int v82 = *v67;
  if (v82 != 32 && v82 != 9)
  {
    if (!*v67) {
      goto LABEL_172;
    }
    __int16 v83 = v67 - 1;
    while (1)
    {
      BOOL v84 = (v82 - 33) < 0x5E || v82 == 9;
      if (!v84 && v82 != 32 && (v82 & 0x80) == 0) {
        break;
      }
      int v82 = v83[2];
      ++v83;
      if (!v82)
      {
        int v85 = *v83;
        if (v85 != 9 && v85 != 32) {
          goto LABEL_172;
        }
        break;
      }
    }
  }
  if ((v21[2] & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    BOOL v86 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)&buf[0].os_log_type_t sa_len = 136446722;
      *(void *)&buf[0].sa_data[2] = a1 + 531;
      *(_WORD *)&buf[0].sa_data[10] = 2080;
      *(void *)&buf[0].sa_data[12] = " ";
      *(_WORD *)&buf[1].sa_data[4] = 2080;
      *(void *)&buf[1].sa_data[6] = v145;
      _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_ERROR, "%{public}s%sInvalid characters in authority: %s", &buf[0].sa_len, 0x20u);
    }
  }
  nw_masque_mark_failed_with_error(a1, 22);
  if (v145)
  {
    free(v145);
    int v145 = 0;
  }
  if (v144) {
    free(v144);
  }
}

void sub_183843964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_135(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!nw_frame_uses_external_data(a2))
  {
    unsigned int v30 = 0;
    uint64_t v15 = (void *)nw_frame_unclaimed_bytes(a2, &v30);
    size_t v16 = *(unsigned int *)(a1 + 72);
    if (v30 < v16 || v15 == 0)
    {
      uint64_t v18 = *(void *)(a1 + 32);
      if (v18 && (*(unsigned char *)(v18 + 529) & 1) != 0) {
        goto LABEL_27;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v19 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(a1 + 32);
      __int16 v21 = (const char *)(v20 + 531);
      BOOL v12 = v20 == 0;
      int v22 = " ";
      int v23 = *(_DWORD *)(a1 + 72);
      if (v12)
      {
        __int16 v21 = "";
        int v22 = "";
      }
      *(_DWORD *)int buf = 136446978;
      uint64_t v32 = v21;
      __int16 v33 = 2080;
      unsigned int v34 = v22;
      __int16 v35 = 1024;
      int v36 = v23;
      __int16 v37 = 1024;
      unsigned int v38 = v30;
      uint64_t v14 = v19;
      goto LABEL_26;
    }
    memcpy(v15, *(const void **)(a1 + 48), v16);
LABEL_31:
    nw_frame_claim(a2, v27, *(_DWORD *)(a1 + 72), 0);
    nw_frame_collapse(a2);
    nw_frame_unclaim(a2, v28, *(_DWORD *)(a1 + 72), 0);
    *(unsigned char *)(a2 + 186) = *(unsigned char *)(a2 + 186) & 0x7F | ((*(unsigned char *)(a1 + 76) != 0) << 7);
    nw_frame_set_metadata(a2, 0, 0, *(unsigned __int8 *)(a1 + 77));
    return 1;
  }
  unsigned int v4 = nw_frame_unclaimed_length((_DWORD *)a2);
  size_t v5 = *(unsigned int *)(a1 + 72);
  if (v4 >= v5)
  {
    __int16 v26 = dispatch_data_create(*(const void **)(a1 + 48), v5, 0, (dispatch_block_t)*MEMORY[0x1E4F143F0]);
    nw_frame_will_free_buffer_externally(*(void *)(a1 + 56));
    nw_frame_set_external_data(a2, v26, 0);
    if (v26) {
      os_release(v26);
    }
    goto LABEL_31;
  }
  unsigned int v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7 && (*(unsigned char *)(v7 + 529) & 1) != 0) {
    goto LABEL_27;
  }
  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
  }
  uint64_t v8 = gprivacy_proxyLogObj;
  if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = (const char *)(v9 + 531);
  uint64_t v11 = "";
  BOOL v12 = v9 == 0;
  int v13 = *(_DWORD *)(a1 + 72);
  if (v12) {
    int v10 = "";
  }
  *(_DWORD *)int buf = 136446978;
  if (!v12) {
    uint64_t v11 = " ";
  }
  uint64_t v32 = v10;
  __int16 v33 = 2080;
  unsigned int v34 = v11;
  __int16 v35 = 1024;
  int v36 = v13;
  __int16 v37 = 1024;
  unsigned int v38 = v6;
  uint64_t v14 = v8;
LABEL_26:
  _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s%sUnable to send %u early bytes, only received %u bytes", buf, 0x22u);
LABEL_27:
  uint64_t v24 = *(void *)(a2 + 32);
  uint64_t v25 = *(void **)(a2 + 40);
  if (v24)
  {
    *(void *)(v24 + 40) = v25;
    uint64_t v25 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 40) + 8) = v25;
  }
  void *v25 = v24;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t __nw_masque_options_copy_target_endpoint_block_invoke(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = os_retain(v3);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  return 1;
}

char *nw_masque_change_base64_to_base64url(char *a1)
{
  uint64_t v1 = a1;
  while (1)
  {
    uint64_t v2 = strchr(a1, 43);
    if (!v2) {
      break;
    }
    char *v2 = 45;
    a1 = v2 + 1;
  }
  while (1)
  {
    __n128 result = strchr(v1, 47);
    if (!result) {
      break;
    }
    *__n128 result = 95;
    uint64_t v1 = result + 1;
  }
  return result;
}

BOOL nw_masque_create_virtual_connection_id_capsule(NSObject *a1, NSObject *a2, dispatch_data_s *a3, dispatch_data_s *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  size_t size = dispatch_data_get_size(a1);
  size_t v7 = size;
  unint64_t __src = 0;
  if (size > 0x3F)
  {
    if (size >> 14)
    {
      if (size >> 30)
      {
        if (size >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)applier = 136446466;
          *(void *)&applier[4] = "_http_vle_encode";
          *(_WORD *)&applier[12] = 2048;
          *(void *)&applier[14] = v7;
          uint64_t v9 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v9);
          if (result) {
            goto LABEL_28;
          }
          free(v9);
          size_t v8 = 0;
        }
        else
        {
          unint64_t __src = bswap64(size | 0xC000000000000000);
          size_t v8 = 8;
        }
      }
      else
      {
        unint64_t __src = bswap32(size | 0x80000000);
        size_t v8 = 4;
      }
    }
    else
    {
      unint64_t __src = bswap32(size | 0x4000) >> 16;
      size_t v8 = 2;
    }
  }
  else
  {
    unint64_t __src = size;
    size_t v8 = 1;
  }
  size_t v11 = dispatch_data_get_size(a2);
  size_t v12 = v11;
  unint64_t v19 = 0;
  if (v11 > 0x3F)
  {
    if (!(v11 >> 14))
    {
      unint64_t v19 = bswap32(v11 | 0x4000) >> 16;
      size_t v13 = 2;
      goto LABEL_21;
    }
    if (!(v11 >> 30))
    {
      unint64_t v19 = bswap32(v11 | 0x80000000);
      size_t v13 = 4;
      goto LABEL_21;
    }
    if (!(v11 >> 62))
    {
      unint64_t v19 = bswap64(v11 | 0xC000000000000000);
      size_t v13 = 8;
      goto LABEL_21;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)applier = 136446466;
    *(void *)&applier[4] = "_http_vle_encode";
    *(_WORD *)&applier[12] = 2048;
    *(void *)&applier[14] = v12;
    uint64_t v14 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v14);
    if (!result)
    {
      free(v14);
      size_t v13 = 0;
      goto LABEL_21;
    }
LABEL_28:
    __break(1u);
    return result;
  }
  unint64_t v19 = v11;
  size_t v13 = 1;
LABEL_21:
  alloc = dispatch_data_create_alloc();
  memcpy(0, &__src, v8);
  uint64_t v25 = 0;
  __int16 v26 = &v25;
  uint64_t v27 = 0x2000000000;
  uint64_t v28 = 0;
  uint64_t v21 = 0;
  int v22 = &v21;
  uint64_t v23 = 0x2000000000;
  size_t v24 = v8;
  if (a1)
  {
    *(void *)applier = MEMORY[0x1E4F143A8];
    *(void *)&void applier[8] = 0x40000000;
    *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    unsigned int v30 = &unk_1E5242B60;
    uint64_t v32 = &v21;
    size_t v33 = v7;
    id v31 = &v25;
    dispatch_data_apply(a1, applier);
  }
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  size_t v16 = (char *)(v8 + v7);
  memcpy(v16, &v19, v13);
  __int16 v17 = &v16[v13];
  uint64_t v25 = 0;
  __int16 v26 = &v25;
  uint64_t v27 = 0x2000000000;
  uint64_t v28 = 0;
  uint64_t v21 = 0;
  int v22 = &v21;
  uint64_t v23 = 0x2000000000;
  size_t v24 = (size_t)v17;
  if (a2)
  {
    *(void *)applier = MEMORY[0x1E4F143A8];
    *(void *)&void applier[8] = 0x40000000;
    *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    unsigned int v30 = &unk_1E5242B60;
    uint64_t v32 = &v21;
    size_t v33 = v12;
    id v31 = &v25;
    dispatch_data_apply(a2, applier);
  }
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  v17[v12] = 0;
  metadata_for_capsule = nw_http_create_metadata_for_capsule(16770048, alloc);
  if (alloc) {
    dispatch_release(alloc);
  }
  return (BOOL)metadata_for_capsule;
}

uint64_t nw_protocol_masque_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v42 = "nw_protocol_masque_get_output_frames";
    id v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v31, &type, &v39)) {
      goto LABEL_80;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      id v42 = "nw_protocol_masque_get_output_frames";
      uint64_t v34 = "%{public}s called with null protocol";
      goto LABEL_79;
    }
    if (!v39)
    {
      uint64_t v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      id v42 = "nw_protocol_masque_get_output_frames";
      uint64_t v34 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_79;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v32 = __nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v36 = os_log_type_enabled(v32, type);
    if (!backtrace_string)
    {
      if (!v36) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      id v42 = "nw_protocol_masque_get_output_frames";
      uint64_t v34 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_79;
    }
    if (v36)
    {
      *(_DWORD *)int buf = 136446466;
      id v42 = "nw_protocol_masque_get_output_frames";
      __int16 v43 = 2082;
      id v44 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_80:
    if (!v31) {
      return 0;
    }
LABEL_81:
    free(v31);
    return 0;
  }
  uint64_t handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v42 = "nw_protocol_masque_get_output_frames";
    id v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v31, &type, &v39)) {
      goto LABEL_80;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      id v42 = "nw_protocol_masque_get_output_frames";
      uint64_t v34 = "%{public}s called with null masque";
      goto LABEL_79;
    }
    if (!v39)
    {
      uint64_t v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)int buf = 136446210;
      id v42 = "nw_protocol_masque_get_output_frames";
      uint64_t v34 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_79;
    }
    __int16 v37 = (char *)__nw_create_backtrace_string();
    uint64_t v32 = __nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v38 = os_log_type_enabled(v32, type);
    if (v37)
    {
      if (v38)
      {
        *(_DWORD *)int buf = 136446466;
        id v42 = "nw_protocol_masque_get_output_frames";
        __int16 v43 = 2082;
        id v44 = v37;
        _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v37);
      if (!v31) {
        return 0;
      }
      goto LABEL_81;
    }
    if (v38)
    {
      *(_DWORD *)int buf = 136446210;
      id v42 = "nw_protocol_masque_get_output_frames";
      uint64_t v34 = "%{public}s called with null masque, no backtrace";
LABEL_79:
      _os_log_impl(&dword_1830D4000, v32, v33, v34, buf, 0xCu);
      goto LABEL_80;
    }
    goto LABEL_80;
  }
  int v8 = handle[127];
  if (v8 == 1) {
    goto LABEL_20;
  }
  if (v8 == 2)
  {
    int v18 = *(_DWORD *)((char *)handle + 527);
    if ((v18 & 0x600000) != 0x200000) {
      goto LABEL_30;
    }
LABEL_20:
    if (!*((void *)handle + 32))
    {
      if ((*((unsigned char *)handle + 527) & 0x28) != 0) {
        a4 = a3;
      }
      if (a4 >= 0x7D0) {
        size_t v20 = 2000;
      }
      else {
        size_t v20 = a4;
      }
      if (v20)
      {
        BOOL v21 = nw_calloc_type<unsigned char>(v20);
        int v22 = v20;
      }
      else
      {
        BOOL v21 = 0;
        int v22 = 0;
      }
      uint64_t v27 = nw_frame_create(0, v21, v22, (uint64_t)nw_protocol_masque_frame_finalizer, (uint64_t)handle);
      uint64_t v15 = 1;
      nw_frame_set_buffer_used_malloc(v27, 1);
      *(void *)(v27 + 16) = 0;
      uint64_t v28 = (uint64_t *)*((void *)handle + 33);
      *(void *)(v27 + 24) = v28;
      *uint64_t v28 = v27;
      *((void *)handle + 33) = v27 + 16;
      *(void *)(v27 + 32) = 0;
      tqh_last = a6->tqh_last;
      *(void *)(v27 + 40) = tqh_last;
      *tqh_last = (nw_frame *)v27;
      a6->tqh_last = (nw_frame **)(v27 + 32);
      if ((*((unsigned char *)handle + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        unsigned int v30 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446978;
          id v42 = "nw_protocol_masque_get_output_frames";
          __int16 v43 = 2082;
          id v44 = (char *)handle + 531;
          __int16 v45 = 2080;
          unsigned int v46 = " ";
          __int16 v47 = 1024;
          int v48 = v20;
          _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMASQUE waiting for early data, returning 1 frame with %u bytes", buf, 0x26u);
        }
      }
      return v15;
    }
    return 0;
  }
  if (v8 != 4)
  {
    int v18 = *(_DWORD *)((char *)handle + 527);
LABEL_30:
    if ((v18 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v23 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446722;
        id v42 = "nw_protocol_masque_get_output_frames";
        __int16 v43 = 2082;
        id v44 = (char *)handle + 531;
        __int16 v45 = 2080;
        unsigned int v46 = " ";
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMASQUE not yet connected, returning 0 frames", buf, 0x20u);
      }
    }
    return 0;
  }
  int v9 = *(_DWORD *)((char *)handle + 527);
  if ((v9 & 0x800000) != 0)
  {
    size_t v11 = (nw_protocol *)*((void *)handle + 28);
LABEL_38:
    if (v11) {
      uint64_t output_handler = v11;
    }
    else {
      uint64_t output_handler = a1->output_handler;
    }
    goto LABEL_42;
  }
  BOOL v10 = (v9 & 0x500) == 0 || (v9 & 0x100000) == 0;
  if (!v10 || handle[128] == 4)
  {
    size_t v11 = (nw_protocol *)*((void *)handle + 28);
    if (v11)
    {
      if (*((void *)handle + 32))
      {
        if (a3 >= 0x7D0) {
          size_t v12 = 2000;
        }
        else {
          size_t v12 = a3;
        }
        BOOL v13 = nw_calloc_type<unsigned char>(v12);
        uint64_t v14 = nw_frame_create(0, v13, v12, (uint64_t)nw_protocol_masque_frame_finalizer, (uint64_t)handle);
        uint64_t v15 = 1;
        nw_frame_set_buffer_used_malloc(v14, 1);
        *(void *)(v14 + 16) = 0;
        size_t v16 = (uint64_t *)*((void *)handle + 33);
        *(void *)(v14 + 24) = v16;
        uint64_t *v16 = v14;
        *((void *)handle + 33) = v14 + 16;
        *(void *)(v14 + 32) = 0;
        __int16 v17 = a6->tqh_last;
        *(void *)(v14 + 40) = v17;
        char *v17 = (nw_frame *)v14;
        a6->tqh_last = (nw_frame **)(v14 + 32);
        return v15;
      }
      *(_DWORD *)((char *)handle + 527) = v9 | 0x800000;
      goto LABEL_38;
    }
  }
  uint64_t output_handler = a1->output_handler;
LABEL_42:
  get_output_frames = (uint64_t (*)(void))output_handler->callbacks->get_output_frames;

  return get_output_frames();
}