void sub_183687E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_framer_options_copy_peer_protocol_definition_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

nw_framer_message_t nw_framer_message_create(nw_framer_t framer)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (framer)
  {
    isa = framer[1].isa;
    return nw_framer_protocol_create_message(isa);
  }
  v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_framer_message_create";
  v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_message_create";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_framer_message_create";
          __int16 v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_message_create";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_message_create";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v4) {
    free(v4);
  }
  return 0;
}

id nw_framer_message_copy_original_message(void *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  v2 = v1;
  if (!v1)
  {
    char v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_message_copy_original_message";
    v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null reply", buf, 0xCu);
      }
      goto LABEL_44;
    }
    if (!v25)
    {
      v13 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null reply, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null reply, no backtrace", buf, 0xCu);
      }
      goto LABEL_44;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_message_copy_original_message";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null reply, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_32;
  }
  id v3 = v1;
  id v4 = *((id *)v3 + 1);

  char is_framer = nw_protocol_definition_is_framer(v4);
  if ((is_framer & 1) == 0)
  {
    __int16 v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_message_copy_original_message";
    v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null nw_protocol_metadata_is_framer_message(reply)", buf, 0xCu);
      }
LABEL_44:

LABEL_45:
      if (v12) {
        free(v12);
      }
      goto LABEL_9;
    }
    if (!v25)
    {
      v13 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null nw_protocol_metadata_is_framer_message(reply), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null nw_protocol_metadata_is_framer_message(reply), no backtrace", buf, 0xCu);
      }
      goto LABEL_44;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_message_copy_original_message";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null nw_protocol_metadata_is_framer_message(reply), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_32:

    free(backtrace_string);
    goto LABEL_45;
  }
  if ((nw_protocol_metadata_supports_replies(v3) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_framer_message_copy_original_message";
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s Protocol does not support replies, cannot copy reply", buf, 0xCu);
    }

LABEL_9:
    id v9 = 0;
    goto LABEL_12;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  v28 = __Block_byref_object_copy__4450;
  v29 = __Block_byref_object_dispose__4451;
  id v30 = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __nw_framer_message_copy_original_message_block_invoke;
  v24[3] = &unk_1E5248E90;
  v24[4] = buf;
  uint64_t v6 = *((void *)v3 + 4);
  if (v6)
  {
    __nw_framer_message_copy_original_message_block_invoke((uint64_t)v24, v6);
    v7 = *(void **)(*(void *)&buf[8] + 40);
  }
  else
  {
    v7 = 0;
  }
  id v9 = v7;
  _Block_object_dispose(buf, 8);

LABEL_12:
  return v9;
}

uint64_t __nw_framer_message_copy_original_message_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_framer_message_set_value(nw_framer_message_t message, const char *key, void *value, nw_framer_message_dispose_value_t dispose_value)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  v7 = message;
  nw_framer_message_dispose_value_t v8 = dispose_value;
  if (!v7)
  {
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_framer_message_set_value";
    __int16 v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v15, &type, &v37)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_framer_message_set_value";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null message", buf, 0xCu);
      }
    }
    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_framer_message_set_value";
          __int16 v41 = 2082;
          v42 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v15) {
          goto LABEL_7;
        }
LABEL_58:
        free(v15);
        goto LABEL_7;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_framer_message_set_value";
        _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_framer_message_set_value";
        _os_log_impl(&dword_1830D4000, v16, v30, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  id v9 = v7;
  os_log_type_t v10 = v9[1].isa;

  char is_framer = nw_protocol_definition_is_framer(v10);
  if ((is_framer & 1) == 0)
  {
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_framer_message_set_value";
    __int16 v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v15, &type, &v37)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_framer_message_set_value";
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null nw_protocol_metadata_is_framer_message(message)", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v37)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_framer_message_set_value";
        _os_log_impl(&dword_1830D4000, v16, v31, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    char v25 = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v27 = os_log_type_enabled(v16, type);
    if (!v25)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_framer_message_set_value";
        _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_framer_message_set_value";
      __int16 v41 = 2082;
      v42 = v25;
      _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!key)
  {
    os_log_type_t v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_framer_message_set_value";
    __int16 v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v15, &type, &v37)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_framer_message_set_value";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v37)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_framer_message_set_value";
        _os_log_impl(&dword_1830D4000, v16, v32, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    char v25 = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v29 = os_log_type_enabled(v16, type);
    if (!v25)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_framer_message_set_value";
        _os_log_impl(&dword_1830D4000, v16, v28, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_framer_message_set_value";
      __int16 v41 = 2082;
      v42 = v25;
      _os_log_impl(&dword_1830D4000, v16, v28, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v25);
    if (!v15) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  v33[2] = __nw_framer_message_set_value_block_invoke;
  v33[3] = &unk_1E523B108;
  v35 = key;
  id v12 = v8;
  id v34 = v12;
  v36 = value;
  uint64_t isa = (uint64_t)v9[4].isa;
  if (isa)
  {
    __nw_framer_message_set_value_block_invoke((uint64_t)v33, isa);
    id v12 = v34;
  }

LABEL_7:
}

void sub_183688F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_framer_message_set_value_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    if (*(void *)(a2 + 8)) {
      goto LABEL_3;
    }
  }
  else
  {
    xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
    v13 = *(void **)a2;
    *(void *)a2 = v12;

    if (*(void *)(a2 + 8)) {
      goto LABEL_3;
    }
  }
  os_log_type_t v14 = nw_dictionary_create();
  __int16 v15 = *(void **)(a2 + 8);
  *(void *)(a2 + 8) = v14;

LABEL_3:
  uint64_t pointer = xpc_dictionary_get_pointer();
  if (pointer)
  {
    uint64_t v5 = pointer;
    uint64_t v6 = nw_dictionary_copy_value(*(void *)(a2 + 8), *(void *)(a1 + 40));
    v7 = v6;
    if (v6) {
      (*((void (**)(void *, uint64_t))v6 + 2))(v6, v5);
    }
  }
  uint64_t v8 = *(void *)(a2 + 8);
  id v9 = *(const char **)(a1 + 40);
  os_log_type_t v10 = _Block_copy(*(const void **)(a1 + 32));
  nw_dictionary_set_value(v8, v9, v10);

  xpc_dictionary_set_pointer();
  return 1;
}

void sub_18368902C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_framer_message_access_value(nw_framer_message_t message, const char *key, void *access_value)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = message;
  uint64_t v6 = access_value;
  if (!v5)
  {
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_framer_message_access_value";
    __int16 v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v41 = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v15, &v41, &v40)) {
      goto LABEL_50;
    }
    if (v41 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = v41;
      if (os_log_type_enabled(v16, v41))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_framer_message_access_value";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null message", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (!v40)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v33 = v41;
      if (os_log_type_enabled(v16, v41))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_framer_message_access_value";
        _os_log_impl(&dword_1830D4000, v16, v33, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v25 = v41;
    BOOL v26 = os_log_type_enabled(v16, v41);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_framer_message_access_value";
        _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_framer_message_access_value";
      __int16 v44 = 2082;
      v45 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_49:

    free(backtrace_string);
    goto LABEL_50;
  }
  v7 = v5;
  uint64_t v8 = v7[1].isa;

  char is_framer = nw_protocol_definition_is_framer(v8);
  if ((is_framer & 1) == 0)
  {
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_framer_message_access_value";
    __int16 v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v41 = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v15, &v41, &v40)) {
      goto LABEL_50;
    }
    if (v41 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v19 = v41;
      if (os_log_type_enabled(v16, v41))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_framer_message_access_value";
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null nw_protocol_metadata_is_framer_message(message)", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (!v40)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v34 = v41;
      if (os_log_type_enabled(v16, v41))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_framer_message_access_value";
        _os_log_impl(&dword_1830D4000, v16, v34, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v27 = v41;
    BOOL v28 = os_log_type_enabled(v16, v41);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_framer_message_access_value";
        _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_framer_message_access_value";
      __int16 v44 = 2082;
      v45 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
  if (!key)
  {
    os_log_type_t v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v43 = "nw_framer_message_access_value";
    __int16 v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v41 = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v15, &v41, &v40)) {
      goto LABEL_50;
    }
    if (v41 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v21 = v41;
      if (os_log_type_enabled(v16, v41))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_framer_message_access_value";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (!v40)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v35 = v41;
      if (os_log_type_enabled(v16, v41))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_framer_message_access_value";
        _os_log_impl(&dword_1830D4000, v16, v35, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v29 = v41;
    BOOL v30 = os_log_type_enabled(v16, v41);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_framer_message_access_value";
        _os_log_impl(&dword_1830D4000, v16, v29, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_framer_message_access_value";
      __int16 v44 = 2082;
      v45 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v16, v29, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
  if (v6)
  {
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = __nw_framer_message_access_value_block_invoke;
    v37[3] = &unk_1E5249228;
    id v10 = v6;
    id v38 = v10;
    v39 = key;
    uint64_t isa = v7[4].isa;
    if (isa)
    {
      char v12 = __nw_framer_message_access_value_block_invoke((uint64_t)v37, isa);
      id v10 = v38;
    }
    else
    {
      char v12 = 0;
    }

    goto LABEL_9;
  }
  os_log_type_t v22 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v43 = "nw_framer_message_access_value";
  __int16 v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v41 = OS_LOG_TYPE_ERROR;
  char v40 = 0;
  if (__nwlog_fault(v15, &v41, &v40))
  {
    if (v41 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v23 = v41;
      if (os_log_type_enabled(v16, v41))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_framer_message_access_value";
        _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null access_value", buf, 0xCu);
      }
LABEL_76:

      goto LABEL_50;
    }
    if (!v40)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v36 = v41;
      if (os_log_type_enabled(v16, v41))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_framer_message_access_value";
        _os_log_impl(&dword_1830D4000, v16, v36, "%{public}s called with null access_value, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v31 = v41;
    BOOL v32 = os_log_type_enabled(v16, v41);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_framer_message_access_value";
        _os_log_impl(&dword_1830D4000, v16, v31, "%{public}s called with null access_value, no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_framer_message_access_value";
      __int16 v44 = 2082;
      v45 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v16, v31, "%{public}s called with null access_value, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
LABEL_50:
  if (v15) {
    free(v15);
  }
  char v12 = 0;
LABEL_9:

  return v12;
}

void sub_18368999C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_framer_message_access_value_block_invoke(uint64_t a1, void *a2)
{
  if (*a2) {
    xpc_dictionary_get_pointer();
  }
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v3();
}

id nw_framer_message_copy_object_value(nw_framer_message_t message, const char *key)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = message;
  id v4 = v3;
  if (!v3)
  {
    char v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
    v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null message", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_1830D4000, v14, v27, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(backtrace_string);
    goto LABEL_57;
  }
  uint64_t v5 = v3;
  uint64_t v6 = v5[1].isa;

  char is_framer = nw_protocol_definition_is_framer(v6);
  if ((is_framer & 1) == 0)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
    v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null nw_protocol_metadata_is_framer_message(message)", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (key)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    os_log_type_t v34 = __Block_byref_object_copy__4450;
    os_log_type_t v35 = __Block_byref_object_dispose__4451;
    id v36 = 0;
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = __nw_framer_message_copy_object_value_block_invoke;
    v30[3] = &unk_1E5249098;
    v30[4] = buf;
    v30[5] = key;
    uint64_t isa = (uint64_t)v5[4].isa;
    if (isa)
    {
      __nw_framer_message_copy_object_value_block_invoke((uint64_t)v30, isa);
      id v9 = *(void **)(*(void *)&buf[8] + 40);
    }
    else
    {
      id v9 = 0;
    }
    id v10 = v9;
    _Block_object_dispose(buf, 8);

    goto LABEL_8;
  }
  os_log_type_t v18 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
  v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (__nwlog_fault(v13, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null key", buf, 0xCu);
      }
LABEL_56:

      goto LABEL_57;
    }
    if (!v31)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_1830D4000, v14, v29, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_message_copy_object_value";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
LABEL_57:
  if (v13) {
    free(v13);
  }
  id v10 = 0;
LABEL_8:

  return v10;
}

uint64_t __nw_framer_message_copy_object_value_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    id v4 = nw_dictionary_copy_value(v3, *(void *)(a1 + 40));
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  return 1;
}

BOOL NWPBEndpointReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int)*MEMORY[0x1E4F940E8];
  unint64_t v5 = *(void *)(a2 + v4);
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]);
  uint64_t v8 = (int *)MEMORY[0x1E4F940C8];
  if (v5 < v7)
  {
    id v10 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      char v11 = (unsigned char *)(a2 + *v8);
      if (*v11) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
      if (v5 >= v7) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)(a2 + *v10) + v5);
      *(void *)(a2 + (int)v4) = v5 + 1;
      unint64_t v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0) {
        goto LABEL_37;
      }
      uint64_t v14 = *v3;
      unint64_t v15 = *(void *)(a2 + v14);
      if (v15 == -1 || v15 >= *(void *)(a2 + *v6)) {
        goto LABEL_35;
      }
      unint64_t v16 = v15 + 1;
      int v17 = *(char *)(*(void *)(a2 + *v10) + v15);
      *(void *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << 7;
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_37;
      }
      uint64_t v18 = *v3;
      unint64_t v19 = *(void *)(a2 + v18);
      if (v19 == -1 || v19 >= *(void *)(a2 + *v6)) {
        goto LABEL_35;
      }
      unint64_t v20 = v19 + 1;
      int v21 = *(char *)(*(void *)(a2 + *v10) + v19);
      *(void *)(a2 + v18) = v20;
      v13 |= (unint64_t)(v21 & 0x7F) << 14;
      if ((v21 & 0x80000000) == 0) {
        goto LABEL_37;
      }
      uint64_t v22 = *v3;
      unint64_t v23 = *(void *)(a2 + v22);
      if (v23 == -1 || v23 >= *(void *)(a2 + *v6)) {
        goto LABEL_35;
      }
      unint64_t v24 = v23 + 1;
      int v25 = *(char *)(*(void *)(a2 + *v10) + v23);
      *(void *)(a2 + v22) = v24;
      v13 |= (unint64_t)(v25 & 0x7F) << 21;
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_37;
      }
      uint64_t v26 = *v3;
      unint64_t v27 = *(void *)(a2 + v26);
      if (v27 == -1 || v27 >= *(void *)(a2 + *v6)) {
        goto LABEL_35;
      }
      unint64_t v28 = v27 + 1;
      int v29 = *(char *)(*(void *)(a2 + *v10) + v27);
      *(void *)(a2 + v26) = v28;
      v13 |= (unint64_t)(v29 & 0x7F) << 28;
      if ((v29 & 0x80000000) == 0) {
        goto LABEL_37;
      }
      uint64_t v30 = *v3;
      unint64_t v31 = *(void *)(a2 + v30);
      if (v31 == -1 || v31 >= *(void *)(a2 + *v6)) {
        goto LABEL_35;
      }
      unint64_t v32 = v31 + 1;
      int v33 = *(char *)(*(void *)(a2 + *v10) + v31);
      *(void *)(a2 + v30) = v32;
      if ((v33 & 0x80000000) == 0) {
        goto LABEL_37;
      }
      uint64_t v34 = *v3;
      unint64_t v35 = *(void *)(a2 + v34);
      if (v35 == -1 || v35 >= *(void *)(a2 + *v6)) {
        goto LABEL_35;
      }
      unint64_t v36 = v35 + 1;
      int v37 = *(char *)(*(void *)(a2 + *v10) + v35);
      *(void *)(a2 + v34) = v36;
      if ((v37 & 0x80000000) == 0) {
        goto LABEL_37;
      }
      uint64_t v38 = *v3;
      unint64_t v39 = *(void *)(a2 + v38);
      if (v39 == -1 || v39 >= *(void *)(a2 + *v6)) {
        goto LABEL_35;
      }
      unint64_t v40 = v39 + 1;
      int v41 = *(char *)(*(void *)(a2 + *v10) + v39);
      *(void *)(a2 + v38) = v40;
      if ((v41 & 0x80000000) == 0) {
        goto LABEL_37;
      }
      uint64_t v42 = *v3;
      unint64_t v43 = *(void *)(a2 + v42);
      if (v43 == -1 || v43 >= *(void *)(a2 + *v6)) {
        goto LABEL_35;
      }
      unint64_t v44 = v43 + 1;
      int v45 = *(char *)(*(void *)(a2 + *v10) + v43);
      *(void *)(a2 + v42) = v44;
      if ((v45 & 0x80000000) == 0) {
        goto LABEL_37;
      }
      uint64_t v46 = *v3;
      unint64_t v47 = *(void *)(a2 + v46);
      if (v47 == -1 || v47 >= *(void *)(a2 + *v6))
      {
LABEL_35:
        char v11 = (unsigned char *)(a2 + *v8);
        goto LABEL_36;
      }
      unint64_t v48 = v47 + 1;
      int v49 = *(char *)(*(void *)(a2 + *v10) + v47);
      *(void *)(a2 + v46) = v48;
      if (v49 < 0)
      {
        unint64_t v13 = 0;
        int v50 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_39;
      }
LABEL_37:
      int v50 = *(unsigned __int8 *)(a2 + *v8);
      if (*(unsigned char *)(a2 + *v8)) {
        unint64_t v13 = 0;
      }
LABEL_39:
      if (v50) {
        BOOL v51 = 1;
      }
      else {
        BOOL v51 = (v13 & 7) == 4;
      }
      if (v51) {
        return *(unsigned char *)(a2 + *v8) == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v52 = objc_alloc_init(NWPBAddressEndpoint);
          objc_storeStrong((id *)(a1 + 8), v52);
          if PBReaderPlaceMark() && (NWPBAddressEndpointReadFrom((uint64_t)v52, a2)) {
            goto LABEL_56;
          }
          goto LABEL_64;
        case 2u:
          v52 = objc_alloc_init(NWPBHostEndpoint);
          objc_storeStrong((id *)(a1 + 16), v52);
          if (!PBReaderPlaceMark() || !NWPBHostEndpointReadFrom((uint64_t)v52, a2)) {
            goto LABEL_64;
          }
          goto LABEL_56;
        case 3u:
          v52 = objc_alloc_init(NWPBServiceEndpoint);
          objc_storeStrong((id *)(a1 + 32), v52);
          if (!PBReaderPlaceMark() || !NWPBServiceEndpointReadFrom((uint64_t)v52, a2)) {
            goto LABEL_64;
          }
          goto LABEL_56;
        case 4u:
          v52 = objc_alloc_init(NWPBInterface);
          objc_storeStrong((id *)(a1 + 24), v52);
          if (!PBReaderPlaceMark() || (NWPBInterfaceReadFrom((uint64_t)v52, a2) & 1) == 0)
          {
LABEL_64:

            return 0;
          }
LABEL_56:
          PBReaderRecallMark();
LABEL_57:

LABEL_58:
          uint64_t v4 = *v3;
          unint64_t v5 = *(void *)(a2 + v4);
          unint64_t v7 = *(void *)(a2 + *v6);
          if (v5 >= v7) {
            return *(unsigned char *)(a2 + *v8) == 0;
          }
          break;
        case 5u:
          uint64_t v53 = PBReaderReadData();
          v52 = *(NWPBAddressEndpoint **)(a1 + 40);
          *(void *)(a1 + 40) = v53;
          goto LABEL_57;
        default:
          if (PBReaderSkipValueWithTag()) {
            goto LABEL_58;
          }
          return 0;
      }
    }
    unint64_t v13 = 0;
LABEL_36:
    *char v11 = 1;
    goto LABEL_37;
  }
  return *(unsigned char *)(a2 + *v8) == 0;
}

uint64_t __Block_byref_object_copy__5653(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5654(uint64_t a1)
{
}

nw_endpoint_t *nw_resolver_create_with_endpoint(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    unint64_t v5 = -[NWConcrete_nw_resolver initWithEndpoint:parameters:path:log_str:]([NWConcrete_nw_resolver alloc], v3, v4, 0, 0);
    goto LABEL_3;
  }
  unint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_resolver_create_with_endpoint";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_resolver_create_with_endpoint";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_resolver_create_with_endpoint";
          __int16 v19 = 2082;
          unint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_resolver_create_with_endpoint";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_resolver_create_with_endpoint";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  unint64_t v5 = 0;
LABEL_3:

  return v5;
}

void sub_18368B08C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_resolver_create_srv_weighted_variant(void *a1)
{
  id v1 = a1;
  v2 = v1;
  if (v1 && (uint64_t v3 = v1[3] - v1[2], (unint64_t)v3 > 0xF))
  {
    unint64_t v6 = v3 >> 3;
    uint64_t v4 = nw_array_create();
    unint64_t v7 = 0;
    unint64_t v29 = v6;
    do
    {
      unint64_t v8 = v7;
      unint64_t v31 = nw_array_get_object_at_index((uint64_t)v2, v7);
      int priority = nw_endpoint_get_priority(v31);
      unsigned int weight = nw_endpoint_get_weight(v31);
      unint64_t v11 = v7 + 1;
      if (v7 + 1 >= v6)
      {
        unint64_t v13 = v7++;
      }
      else
      {
        while (1)
        {
          unint64_t v7 = v11;
          os_log_type_t v12 = nw_array_get_object_at_index((uint64_t)v2, v11);

          unint64_t v31 = v12;
          if (nw_endpoint_get_priority(v12) != priority) {
            break;
          }
          weight += nw_endpoint_get_weight(v12);
          unint64_t v11 = v7 + 1;
          if (v6 == v7 + 1)
          {
            unint64_t v13 = v7;
            unint64_t v7 = v6;
            goto LABEL_13;
          }
        }
        unint64_t v13 = v7 - 1;
      }
LABEL_13:
      os_log_type_t v14 = v31;
      if (v8 - v7 == 1 || !weight)
      {
        while (v8 <= v13)
        {
          unint64_t v16 = nw_array_get_object_at_index((uint64_t)v2, v8);
          nw_array_append(v4, v16);

          ++v8;
        }
      }
      else
      {
        unint64_t v15 = v7 - v8;
        if (v7 != v8)
        {
          if (v8 <= v13)
          {
            uint64_t v30 = 0;
            do
            {
              unint64_t v17 = v8;
              if (weight)
              {
                uint32_t v18 = arc4random() % weight;
                unint64_t v19 = v8;
                while (1)
                {
                  unint64_t v20 = nw_array_get_object_at_index((uint64_t)v2, v19);
                  uint64_t v21 = v20;
                  if (!v4 || !v20) {
                    goto LABEL_35;
                  }
                  unint64_t v23 = *(void ***)(v4 + 16);
                  uint64_t v22 = *(void ***)(v4 + 24);
                  if (v23 != v22)
                  {
                    while (*v23 != v20)
                    {
                      if (++v23 == v22)
                      {
                        unint64_t v23 = *(void ***)(v4 + 24);
                        break;
                      }
                    }
                  }
                  if (v23 == v22)
                  {
LABEL_35:
                    uint32_t v24 = nw_endpoint_get_weight(v20);
                    int v25 = v24;
                    if (v18 < v24) {
                      goto LABEL_47;
                    }
                    v18 -= v24;
                  }

                  if (++v19 > v13) {
                    goto LABEL_23;
                  }
                }
              }
              while (1)
              {
                uint64_t v26 = nw_array_get_object_at_index((uint64_t)v2, v17);
                uint64_t v21 = v26;
                if (!v4 || !v26) {
                  break;
                }
                unint64_t v28 = *(void ***)(v4 + 16);
                unint64_t v27 = *(void ***)(v4 + 24);
                if (v28 != v27)
                {
                  while (*v28 != v26)
                  {
                    if (++v28 == v27)
                    {
                      unint64_t v28 = *(void ***)(v4 + 24);
                      break;
                    }
                  }
                }
                if (v28 == v27) {
                  break;
                }

                if (++v17 > v13)
                {
                  unsigned int weight = 0;
LABEL_23:
                  unint64_t v6 = v29;
                  goto LABEL_24;
                }
              }
              int v25 = nw_endpoint_get_weight(v26);
LABEL_47:
              unint64_t v6 = v29;
              nw_array_append(v4, v21);
              weight -= v25;

LABEL_24:
              ++v30;
              os_log_type_t v14 = v31;
            }
            while (v30 != v7 - v8);
          }
          else
          {
            do
            {
              arc4random();
              --v15;
            }
            while (v15);
          }
        }
      }
    }
    while (v7 < v6);
  }
  else
  {
    uint64_t v4 = v1;
  }

  return v4;
}

void sub_18368B38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void ___ZL40nw_resolver_start_custom_resolver_lockedP22NWConcrete_nw_resolver_block_invoke(uint64_t a1, void *a2, int a3)
{
  unint64_t v6 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void **)(v7 + 144);
  *(void *)(v7 + 144) = 0;

  if (v6)
  {
    if (a3)
    {
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = ___ZL40nw_resolver_start_custom_resolver_lockedP22NWConcrete_nw_resolver_block_invoke_2;
      v9[3] = &unk_1E524AE18;
      id v10 = *(id *)(a1 + 32);
      nw_array_apply(v6, (uint64_t)v9);
    }
    else
    {
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 144), a2);
    }
  }
  nw_resolver_update_status_locked(*(void **)(a1 + 32), 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
}

void sub_18368B4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_set_update_handler_block_invoke_77(uint64_t a1, void *a2)
{
  object = a2;
  if (nw_endpoint_get_type(object) == nw_endpoint_type_address)
  {
    int address_family = nw_endpoint_get_address_family(object);
    if (address_family == 30)
    {
      if (*(unsigned char *)(a1 + 64) != 30 && *(unsigned char *)(a1 + 64)) {
        goto LABEL_12;
      }
      uint64_t v4 = *(void *)(a1 + 56);
    }
    else
    {
      if (address_family != 2 || (*(unsigned __int8 *)(a1 + 64) | 2) != 2) {
        goto LABEL_12;
      }
      uint64_t v4 = *(void *)(a1 + 40);
    }
    *(unsigned char *)(*(void *)(v4 + 8) + 24) = 1;
    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      BOOL v5 = nw_array_create();
      uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;
    }
    nw_endpoint_set_parent_endpoint(object, *(void **)(*(void *)(a1 + 32) + 24), 0);
    nw_array_append(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), object);
  }
LABEL_12:
}

void sub_18368B5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_set_update_handler_block_invoke_80(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = nw_array_get_object_at_index(*(void *)(*(void *)(a1 + 40) + 16), a2);
  if (v6 == MEMORY[0x1E4F14410])
  {

LABEL_11:
    unint64_t v8 = *(unsigned char **)(a1 + 32);
    if (v8)
    {
      if ((v8[346] & 0x20) != 0)
      {
        uint64_t v7 = 0;
        goto LABEL_30;
      }
      if (v8[256])
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v9 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
          goto LABEL_25;
        }
        uint64_t v14 = *(void *)(a1 + 32);
        int v21 = 136446722;
        uint64_t v22 = "nw_resolver_set_update_handler_block_invoke";
        __int16 v23 = 2082;
        *(void *)uint32_t v24 = v14 + 256;
        *(_WORD *)&v24[8] = 2082;
        *(void *)&v24[10] = nw_endpoint_get_logging_description(v5);
        unint64_t v15 = "%{public}s [C%{public}s] found cached alternative %{public}s";
        unint64_t v16 = v9;
        uint32_t v17 = 32;
        goto LABEL_24;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v18 = *(_DWORD *)(*(void *)(a1 + 32) + 340);
        int v21 = 136446722;
        uint64_t v22 = "nw_resolver_set_update_handler_block_invoke";
        __int16 v23 = 1024;
        *(_DWORD *)uint32_t v24 = v18;
        *(_WORD *)&v24[4] = 2082;
        *(void *)&v24[6] = nw_endpoint_get_logging_description(v5);
        unint64_t v15 = "%{public}s [R%u] found cached alternative %{public}s";
        unint64_t v16 = v9;
        uint32_t v17 = 28;
        goto LABEL_24;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v21 = 136446466;
        uint64_t v22 = "nw_resolver_set_update_handler_block_invoke";
        __int16 v23 = 2082;
        *(void *)uint32_t v24 = nw_endpoint_get_logging_description(v5);
        unint64_t v15 = "%{public}s found cached alternative %{public}s";
        unint64_t v16 = v9;
        uint32_t v17 = 22;
LABEL_24:
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v21, v17);
      }
    }
LABEL_25:
    uint64_t v7 = 0;
    goto LABEL_29;
  }
  uint64_t v7 = (void *)v6;
  if (!v6) {
    goto LABEL_11;
  }
  unint64_t v8 = *(unsigned char **)(a1 + 32);
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v21 = 136446722;
      uint64_t v22 = "nw_resolver_set_update_handler_block_invoke";
      __int16 v23 = 2082;
      *(void *)uint32_t v24 = nw_endpoint_get_logging_description(v5);
      *(_WORD *)&v24[8] = 2114;
      *(void *)&v24[10] = v7;
      unint64_t v11 = "%{public}s found cached alternative %{public}s for %{public}@";
      os_log_type_t v12 = v9;
      uint32_t v13 = 32;
LABEL_28:
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v21, v13);
    }
LABEL_29:

    unint64_t v8 = *(unsigned char **)(a1 + 32);
    goto LABEL_30;
  }
  if ((v8[346] & 0x20) == 0)
  {
    if (v8[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v9 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_29;
      }
      uint64_t v10 = *(void *)(a1 + 32);
      int v21 = 136446978;
      uint64_t v22 = "nw_resolver_set_update_handler_block_invoke";
      __int16 v23 = 2082;
      *(void *)uint32_t v24 = v10 + 256;
      *(_WORD *)&v24[8] = 2082;
      *(void *)&v24[10] = nw_endpoint_get_logging_description(v5);
      *(_WORD *)&v24[18] = 2114;
      *(void *)&v24[20] = v7;
      unint64_t v11 = "%{public}s [C%{public}s] found cached alternative %{public}s for %{public}@";
      os_log_type_t v12 = v9;
      uint32_t v13 = 42;
      goto LABEL_28;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v19 = *(_DWORD *)(*(void *)(a1 + 32) + 340);
      int v21 = 136446978;
      uint64_t v22 = "nw_resolver_set_update_handler_block_invoke";
      __int16 v23 = 1024;
      *(_DWORD *)uint32_t v24 = v19;
      *(_WORD *)&v24[4] = 2082;
      *(void *)&v24[6] = nw_endpoint_get_logging_description(v5);
      *(_WORD *)&v24[14] = 2114;
      *(void *)&v24[16] = v7;
      unint64_t v11 = "%{public}s [R%u] found cached alternative %{public}s for %{public}@";
      os_log_type_t v12 = v9;
      uint32_t v13 = 38;
      goto LABEL_28;
    }
    goto LABEL_29;
  }
LABEL_30:
  nw_resolver_update_client_alternative(v8, v5, v7);

  return 1;
}

void sub_18368BAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_resolver_create_dns_service_locked(NWConcrete_nw_resolver *a1)
{
  v249[1] = *(id *)MEMORY[0x1E4F143B8];
  id v1 = a1;
  *((_WORD *)v1 + 44) = 0;
  if (nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3)) == (nw_endpoint_type_url|nw_endpoint_type_host))
  {
    if ((*((unsigned char *)v1 + 346) & 0x20) == 0)
    {
      if (*((unsigned char *)v1 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        v2 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          logging_description = nw_endpoint_get_logging_description(*((void **)v1 + 3));
          int v4 = *((_DWORD *)v1 + 20);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = (char *)v1 + 256;
          *(_WORD *)&buf[22] = 2082;
          *(void *)&unsigned char buf[24] = logging_description;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v4;
          _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] Starting application service resolution %{public}s, proto %u", buf, 0x26u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v2 = (id)gLogObj;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          int v147 = *((_DWORD *)v1 + 85);
          v148 = nw_endpoint_get_logging_description(*((void **)v1 + 3));
          int v149 = *((_DWORD *)v1 + 20);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v147;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v148;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v149;
          _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_INFO, "%{public}s [R%u] Starting application service resolution %{public}s, proto %u", buf, 0x22u);
        }
      }
    }
LABEL_194:
    uint64_t v150 = 1;
    goto LABEL_297;
  }
  DNSServiceFlags flags = 0;
  DNSServiceFlags flags = nw_resolver_derive_service_flags(v1, *((void **)v1 + 3), *((void **)v1 + 2));
  size_t out_signature_length = 0;
  attr = 0;
  if (nw_endpoint_get_signature(*((nw_endpoint_t *)v1 + 3), &out_signature_length) && out_signature_length)
  {
    attr = DNSServiceAttributeCreate();
    DNSServiceAttrSetValidationData();
  }
  DNSServiceErrorType v5 = -65569;
  v224 = (DNSServiceRef *)((char *)v1 + 72);
  v225 = (char *)v1 + 256;
  v219 = "invalid";
  v221 = "DNSServiceCreateDelegateConnection";
  char v6 = 1;
  while (1)
  {
    char v8 = v6;
    id v9 = (void *)*((void *)v1 + 2);
    uint64_t v10 = v1;
    id v11 = v9;
    pid_t v12 = getpid();
    if (!nw_parameters_has_delegated_proc_pid(v11, v12) && !nw_parameters_has_delegated_proc_uuid(v11))
    {
      int Connection = DNSServiceCreateConnection((DNSServiceRef *)v1 + 8);
      goto LABEL_76;
    }
    if (!nw_parameters_has_delegated_proc_pid(v11, v12))
    {
      int pid = 0;
      int Connection = 0;
      goto LABEL_43;
    }
    int pid = nw_parameters_get_pid(v11);
    if ((*((unsigned char *)v1 + 346) & 0x20) == 0)
    {
      if (*v225)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v14 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_30;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)v1 + 256;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = pid;
        unint64_t v15 = v14;
        unint64_t v16 = "%{public}s [C%{public}s] Delegating DNS service to PID %d";
        uint32_t v17 = 28;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = (id)gLogObj;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
LABEL_30:

          goto LABEL_31;
        }
        int v19 = *((_DWORD *)v1 + 85);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v19;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = pid;
        unint64_t v15 = v14;
        unint64_t v16 = "%{public}s [R%u] Delegating DNS service to PID %d";
        uint32_t v17 = 24;
      }
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, v16, buf, v17);
      goto LABEL_30;
    }
LABEL_31:
    int Connection = DNSServiceCreateDelegateConnection();
    if (!Connection)
    {

      goto LABEL_78;
    }
    if ((*((unsigned char *)v1 + 346) & 0x20) == 0)
    {
      if (*v225)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        unint64_t v20 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          goto LABEL_42;
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)v1 + 256;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = pid;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = Connection;
        int v21 = v20;
        uint64_t v22 = "%{public}s [C%{public}s] DNSServiceCreateDelegateConnection(..., epid=%u, NULL) failed: %d";
        uint32_t v23 = 34;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v20 = (id)gLogObj;
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
LABEL_42:

          goto LABEL_43;
        }
        int v24 = *((_DWORD *)v1 + 85);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v24;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = pid;
        *(_WORD *)&unsigned char buf[24] = 1024;
        *(_DWORD *)&buf[26] = Connection;
        int v21 = v20;
        uint64_t v22 = "%{public}s [R%u] DNSServiceCreateDelegateConnection(..., epid=%u, NULL) failed: %d";
        uint32_t v23 = 30;
      }
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, v22, buf, v23);
      goto LABEL_42;
    }
LABEL_43:
    if (nw_parameters_has_delegated_proc_uuid(v11))
    {
      if (!Connection || (*((unsigned char *)v1 + 346) & 0x20) != 0)
      {
LABEL_55:
        *(void *)handler = 0;
        *(void *)&handler[8] = 0;
        nw_parameters_get_e_proc_uuid(v11, handler);
        if ((*((unsigned char *)v1 + 346) & 0x20) != 0)
        {
LABEL_65:
          int Connection = DNSServiceCreateDelegateConnection();
          if (!Connection || (*((unsigned char *)v1 + 346) & 0x20) != 0) {
            goto LABEL_76;
          }
          if (*v225)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v37 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
              goto LABEL_75;
            }
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = (char *)v1 + 256;
            *(_WORD *)&buf[22] = 1042;
            *(_DWORD *)&unsigned char buf[24] = 16;
            *(_WORD *)&buf[28] = 2098;
            *(void *)&buf[30] = handler;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = Connection;
            uint64_t v38 = v37;
            unint64_t v39 = "%{public}s [C%{public}s] DNSServiceCreateDelegateConnection(..., 0, %{public,uuid_t}.16P) failed: %d";
            uint32_t v40 = 44;
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v37 = (id)gLogObj;
            if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
LABEL_75:

              goto LABEL_76;
            }
            int v41 = *((_DWORD *)v1 + 85);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v41;
            *(_WORD *)&buf[18] = 1042;
            *(_DWORD *)&buf[20] = 16;
            *(_WORD *)&unsigned char buf[24] = 2098;
            *(void *)&buf[26] = handler;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = Connection;
            uint64_t v38 = v37;
            unint64_t v39 = "%{public}s [R%u] DNSServiceCreateDelegateConnection(..., 0, %{public,uuid_t}.16P) failed: %d";
            uint32_t v40 = 40;
          }
          _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_ERROR, v39, buf, v40);
          goto LABEL_75;
        }
        if (*v225)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          unint64_t v32 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_64;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = (char *)v1 + 256;
          int v33 = v32;
          uint64_t v34 = "%{public}s [C%{public}s] Delegating DNS service to eUUID";
          uint32_t v35 = 22;
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v32 = (id)gLogObj;
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
LABEL_64:

            goto LABEL_65;
          }
          int v36 = *((_DWORD *)v1 + 85);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v36;
          int v33 = v32;
          uint64_t v34 = "%{public}s [R%u] Delegating DNS service to eUUID";
          uint32_t v35 = 18;
        }
        _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, v34, buf, v35);
        goto LABEL_64;
      }
      if (*v225)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v25 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          goto LABEL_54;
        }
        string_for_dns_service_error = nwlog_get_string_for_dns_service_error(Connection);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)v1 + 256;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = pid;
        *(_WORD *)&buf[28] = 2082;
        *(void *)&buf[30] = string_for_dns_service_error;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = Connection;
        unint64_t v27 = v25;
        unint64_t v28 = "%{public}s [C%{public}s] Delegating DNS service to PID %d returned failure %{public}s(%d), falling back to eUUID";
        uint32_t v29 = 44;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v25 = (id)gLogObj;
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
LABEL_54:

          goto LABEL_55;
        }
        int v30 = *((_DWORD *)v1 + 85);
        unint64_t v31 = nwlog_get_string_for_dns_service_error(Connection);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v30;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = pid;
        *(_WORD *)&unsigned char buf[24] = 2082;
        *(void *)&buf[26] = v31;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = Connection;
        unint64_t v27 = v25;
        unint64_t v28 = "%{public}s [R%u] Delegating DNS service to PID %d returned failure %{public}s(%d), falling back to eUUID";
        uint32_t v29 = 40;
      }
      _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_ERROR, v28, buf, v29);
      goto LABEL_54;
    }
LABEL_76:

    if (Connection == -65569) {
      goto LABEL_15;
    }
    if (Connection)
    {
      DNSServiceErrorType v5 = Connection;
      goto LABEL_278;
    }
LABEL_78:
    dispatch_group_t v42 = dispatch_group_create();
    unint64_t v43 = (void *)*((void *)v1 + 5);
    *((void *)v1 + 5) = v42;

    dispatch_group_enter(*((dispatch_group_t *)v1 + 5));
    uint64_t v44 = *((void *)v1 + 8);
    int v45 = *((void *)v1 + 5);
    BOOL v46 = nw_context_copy_workloop(*((void **)v1 + 4));
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZL37nw_resolver_create_dns_service_lockedP22NWConcrete_nw_resolver_block_invoke;
    block[3] = &unk_1E52491B0;
    uint64_t v230 = v44;
    unint64_t v47 = v10;
    v229 = v47;
    dispatch_group_notify(v45, (dispatch_queue_t)v46, block);

    DNSServiceRef *v224 = (DNSServiceRef)*((void *)v1 + 8);
    uint64_t scoped_interface_index = nw_resolver_get_scoped_interface_index(v47, &flags);
    if (nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3)) == nw_endpoint_type_host)
    {
      *((void *)v1 + 9) = *((void *)v1 + 8);
      uint64_t v49 = flags;
      uint64_t v50 = *((unsigned int *)v1 + 20);
      hostname = nw_endpoint_get_hostname(*((nw_endpoint_t *)v1 + 3));
      DNSServiceErrorType v52 = MEMORY[0x1853158D0](v224, v49, scoped_interface_index, v50, hostname, attr, nw_resolver_host_resolve_callback, v47, context);
      if (v52 != -65569)
      {
        DNSServiceErrorType v5 = v52;
        v219 = "host";
        v221 = "DNSServiceGetAddrInfo";
        goto LABEL_277;
      }
      nw_resolver_cancel_query_locked(v47, 0);
      v219 = "host";
      uint64_t v7 = "DNSServiceGetAddrInfo";
      goto LABEL_14;
    }
    if (nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3)) == nw_endpoint_type_bonjour_service)
    {
      uint64_t v53 = v47;
      if (nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3)) != nw_endpoint_type_bonjour_service
        || (nw_parameters_get_use_awdl(*((void **)v1 + 2)) & 1) == 0
        || (bonjour_service_domain = nw_endpoint_get_bonjour_service_domain(*((nw_endpoint_t *)v1 + 3)),
            (v55 = bonjour_service_domain) != 0)
        && strcasecmp(bonjour_service_domain, "local")
        && strcasecmp(v55, "local."))
      {

        goto LABEL_88;
      }
      id v114 = *((id *)v1 + 2);
      v115 = v114;
      if (!v114 || (v116 = v114, BOOL v117 = (v116[12] & 0x10000000000) == 0, v116, v117))
      {

        goto LABEL_88;
      }
      uint64_t v238 = 0;
      v239 = &v238;
      int v241 = 1;
      uint64_t v240 = 0x2020000000;
      id v118 = nw_parameters_copy_preferred_interface_subtypes(*((void **)v1 + 2));
      v119 = v118;
      if (v118)
      {
        *(void *)applier = MEMORY[0x1E4F143A8];
        *(void *)&applier[8] = 3221225472;
        *(void *)&applier[16] = ___ZL38nw_resolver_get_awdl_trigger_heuristicP22NWConcrete_nw_resolver_block_invoke;
        *(void *)&applier[24] = &unk_1E52406D0;
        *(void *)&applier[32] = &v238;
        xpc_array_apply(v118, applier);
      }
      int v120 = *((_DWORD *)v239 + 6);

      _Block_object_dispose(&v238, 8);
      if (!v120 || *((void *)v1 + 15) || (v121 = nw_interface_create_with_name("awdl0")) == 0)
      {
LABEL_88:

        goto LABEL_89;
      }
      v222 = v121;
      bonjour_service_nw_endpoint_type_t type = nw_endpoint_get_bonjour_service_type(*((nw_endpoint_t *)v1 + 3));
      v123 = nw_endpoint_get_bonjour_service_domain(*((nw_endpoint_t *)v1 + 3));
      bonjour_service = nw_browse_descriptor_create_bonjour_service(bonjour_service_type, v123);
      v124 = nw_parameters_copy(*((nw_parameters_t *)v1 + 2));
      p_super = &v121->super;
      v126 = v124;
      v220 = v124;
      nw_parameters_require_interface(v124, p_super);
      nw_browser_t v127 = nw_browser_create(bonjour_service, v126);
      v128 = (void *)*((void *)v1 + 15);
      *((void *)v1 + 15) = v127;

      if (*((void *)v1 + 15))
      {
        uint64_t v238 = 0;
        v239 = &v238;
        uint64_t v240 = 0x2020000000;
        LOBYTE(v241) = 0;
        uint64_t v234 = 0;
        v235 = &v234;
        uint64_t v236 = 0x2020000000;
        BOOL v237 = v120 == 2;
        objc_initWeak(&location, v53);
        v129 = *((void *)v1 + 15);
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke;
        *(void *)&unsigned char buf[24] = &unk_1E523B550;
        *(void *)&buf[32] = &v238;
        objc_copyWeak((id *)&buf[48], &location);
        *(void *)&buf[40] = &v234;
        nw_browser_set_state_changed_handler(v129, buf);
        v130 = *((void *)v1 + 15);
        *(void *)handler = MEMORY[0x1E4F143A8];
        *(void *)&handler[8] = 3221225472;
        *(void *)&handler[16] = ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke_254;
        v246 = &unk_1E523B578;
        v247 = &v238;
        objc_copyWeak(v249, &location);
        v248 = &v234;
        nw_browser_set_browse_results_changed_handler(v130, handler);
        if ((*((unsigned char *)v1 + 346) & 0x20) == 0)
        {
          if (*v225)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v131 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
            {
              uint64_t v132 = *((void *)v1 + 15);
              v133 = "?";
              if (v120 == 1) {
                v133 = "parallel";
              }
              *(_DWORD *)applier = 136446978;
              if (v120 == 2) {
                v133 = "blocking";
              }
              *(void *)&applier[4] = "nw_resolver_should_wait_for_awdl_trigger";
              *(_WORD *)&applier[12] = 2082;
              *(void *)&applier[14] = (char *)v1 + 256;
              *(_WORD *)&applier[22] = 2082;
              *(void *)&applier[24] = v133;
              *(_WORD *)&applier[32] = 2112;
              *(void *)&applier[34] = v132;
              v134 = v131;
              v135 = "%{public}s [C%{public}s] Starting %{public}s AWDL trigger browser %@";
              uint32_t v136 = 42;
              goto LABEL_182;
            }
          }
          else
          {
            v131 = __nwlog_obj();
            if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
            {
              int v141 = *((_DWORD *)v1 + 85);
              v142 = "?";
              if (v120 == 1) {
                v142 = "parallel";
              }
              uint64_t v143 = *((void *)v1 + 15);
              if (v120 == 2) {
                v142 = "blocking";
              }
              *(_DWORD *)applier = 136446978;
              *(void *)&applier[4] = "nw_resolver_should_wait_for_awdl_trigger";
              *(_WORD *)&applier[12] = 1024;
              *(_DWORD *)&applier[14] = v141;
              *(_WORD *)&applier[18] = 2082;
              *(void *)&applier[20] = v142;
              *(_WORD *)&applier[28] = 2112;
              *(void *)&applier[30] = v143;
              v134 = v131;
              v135 = "%{public}s [R%u] Starting %{public}s AWDL trigger browser %@";
              uint32_t v136 = 38;
LABEL_182:
              _os_log_impl(&dword_1830D4000, v134, OS_LOG_TYPE_INFO, v135, applier, v136);
            }
          }
        }
        v144 = *((void *)v1 + 15);
        BOOL v145 = nw_context_copy_workloop(*((void **)v1 + 4));
        nw_browser_set_queue(v144, (dispatch_queue_t)v145);

        nw_browser_start(*((nw_browser_t *)v1 + 15));
        LOBYTE(v144) = *((unsigned char *)v235 + 24) == 0;
        objc_destroyWeak(v249);
        objc_destroyWeak((id *)&buf[48]);
        objc_destroyWeak(&location);
        _Block_object_dispose(&v234, 8);
        _Block_object_dispose(&v238, 8);

        if ((v144 & 1) == 0)
        {
          if ((*((unsigned char *)v1 + 346) & 0x20) == 0)
          {
            if (*v225)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v212 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v212, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = (char *)v1 + 256;
                v213 = "%{public}s [C%{public}s] Blocking resolve on AWDL trigger browser";
                v214 = v212;
                uint32_t v215 = 22;
                goto LABEL_314;
              }
            }
            else
            {
              v212 = __nwlog_obj();
              if (os_log_type_enabled(v212, OS_LOG_TYPE_INFO))
              {
                int v216 = *((_DWORD *)v1 + 85);
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v216;
                v213 = "%{public}s [R%u] Blocking resolve on AWDL trigger browser";
                v214 = v212;
                uint32_t v215 = 18;
LABEL_314:
                _os_log_impl(&dword_1830D4000, v214, OS_LOG_TYPE_INFO, v213, buf, v215);
              }
            }
          }
LABEL_233:
          uint64_t v150 = 1;
          goto LABEL_208;
        }
LABEL_89:
        nw_endpoint_get_bonjour_service_name(*((nw_endpoint_t *)v1 + 3));
        nw_endpoint_get_bonjour_service_type(*((nw_endpoint_t *)v1 + 3));
        nw_endpoint_get_bonjour_service_domain(*((nw_endpoint_t *)v1 + 3));
        context = v53;
        DNSServiceErrorType v56 = DNSServiceResolveEx();
        if (v56 != -65569)
        {
          DNSServiceErrorType v5 = v56;
          v219 = "bonjour";
          v221 = "DNSServiceResolve";
          goto LABEL_277;
        }
        nw_resolver_cancel_query_locked(v53, 0);
        v219 = "bonjour";
        uint64_t v7 = "DNSServiceResolve";
        goto LABEL_14;
      }
      if ((*((unsigned char *)v1 + 346) & 0x20) == 0)
      {
        if (*v225)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          v137 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&applier[4] = "nw_resolver_should_wait_for_awdl_trigger";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = (char *)v1 + 256;
            v138 = v137;
            v139 = "%{public}s [C%{public}s] Failed to create AWDL trigger browser";
            uint32_t v140 = 22;
            goto LABEL_188;
          }
        }
        else
        {
          v137 = __nwlog_obj();
          if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
          {
            int v146 = *((_DWORD *)v1 + 85);
            *(_DWORD *)applier = 136446466;
            *(void *)&applier[4] = "nw_resolver_should_wait_for_awdl_trigger";
            *(_WORD *)&applier[12] = 1024;
            *(_DWORD *)&applier[14] = v146;
            v138 = v137;
            v139 = "%{public}s [R%u] Failed to create AWDL trigger browser";
            uint32_t v140 = 18;
LABEL_188:
            _os_log_impl(&dword_1830D4000, v138, OS_LOG_TYPE_ERROR, v139, applier, v140);
          }
        }
      }
      goto LABEL_89;
    }
    if (nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3)) != nw_endpoint_type_address)
    {
      if (nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3)) != (nw_endpoint_type_url|nw_endpoint_type_address))
      {
        if ((*((unsigned char *)v1 + 346) & 0x20) == 0)
        {
          if (*v225)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            id v162 = (id)gconnectionLogObj;
            nw_endpoint_type_t type = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = (char *)v1 + 256;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = type;
            v164 = (char *)_os_log_send_and_compose_impl();

            handler[0] = 16;
            applier[0] = 0;
            if (__nwlog_fault(v164, handler, applier))
            {
              if (handler[0] == 17)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v165 = (id)gconnectionLogObj;
                os_log_type_t v166 = handler[0];
                if (os_log_type_enabled(v165, (os_log_type_t)handler[0]))
                {
                  nw_endpoint_type_t v167 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v1 + 256;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&unsigned char buf[24] = v167;
                  _os_log_impl(&dword_1830D4000, v165, v166, "%{public}s [C%{public}s] unknown resolver mode of operation for type %d", buf, 0x1Cu);
                }
                goto LABEL_273;
              }
              if (applier[0])
              {
                backtrace_string = __nw_create_backtrace_string();
                if (backtrace_string)
                {
                  v176 = (char *)backtrace_string;
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  v177 = (id)gconnectionLogObj;
                  os_log_type_t v178 = handler[0];
                  if (os_log_type_enabled(v177, (os_log_type_t)handler[0]))
                  {
                    nw_endpoint_type_t v179 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = (char *)v1 + 256;
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&unsigned char buf[24] = v179;
                    *(_WORD *)&buf[28] = 2082;
                    *(void *)&buf[30] = v176;
                    _os_log_impl(&dword_1830D4000, v177, v178, "%{public}s [C%{public}s] unknown resolver mode of operation for type %d, dumping backtrace:%{public}s", buf, 0x26u);
                  }

                  free(v176);
                  goto LABEL_274;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v165 = (id)gconnectionLogObj;
                os_log_type_t v187 = handler[0];
                if (os_log_type_enabled(v165, (os_log_type_t)handler[0]))
                {
                  nw_endpoint_type_t v188 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v1 + 256;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&unsigned char buf[24] = v188;
                  _os_log_impl(&dword_1830D4000, v165, v187, "%{public}s [C%{public}s] unknown resolver mode of operation for type %d, no backtrace", buf, 0x1Cu);
                }
              }
              else
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v165 = (id)gconnectionLogObj;
                os_log_type_t v185 = handler[0];
                if (os_log_type_enabled(v165, (os_log_type_t)handler[0]))
                {
                  nw_endpoint_type_t v186 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v1 + 256;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&unsigned char buf[24] = v186;
                  _os_log_impl(&dword_1830D4000, v165, v185, "%{public}s [C%{public}s] unknown resolver mode of operation for type %d, backtrace limit exceeded", buf, 0x1Cu);
                }
              }
LABEL_273:
            }
          }
          else
          {
            v169 = __nwlog_obj();
            int v170 = *((_DWORD *)v1 + 85);
            nw_endpoint_type_t v171 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v170;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v171;
            v164 = (char *)_os_log_send_and_compose_impl();

            handler[0] = 16;
            applier[0] = 0;
            if (!__nwlog_fault(v164, handler, applier)) {
              goto LABEL_274;
            }
            if (handler[0] == 17)
            {
              v165 = __nwlog_obj();
              os_log_type_t v172 = handler[0];
              if (os_log_type_enabled(v165, (os_log_type_t)handler[0]))
              {
                int v173 = *((_DWORD *)v1 + 85);
                nw_endpoint_type_t v174 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v173;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v174;
                _os_log_impl(&dword_1830D4000, v165, v172, "%{public}s [R%u] unknown resolver mode of operation for type %d", buf, 0x18u);
              }
              goto LABEL_273;
            }
            if (!applier[0])
            {
              v165 = __nwlog_obj();
              os_log_type_t v189 = handler[0];
              if (os_log_type_enabled(v165, (os_log_type_t)handler[0]))
              {
                int v190 = *((_DWORD *)v1 + 85);
                nw_endpoint_type_t v191 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v190;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v191;
                _os_log_impl(&dword_1830D4000, v165, v189, "%{public}s [R%u] unknown resolver mode of operation for type %d, backtrace limit exceeded", buf, 0x18u);
              }
              goto LABEL_273;
            }
            v180 = (char *)__nw_create_backtrace_string();
            v165 = __nwlog_obj();
            os_log_type_t v181 = handler[0];
            BOOL v182 = os_log_type_enabled(v165, (os_log_type_t)handler[0]);
            if (!v180)
            {
              if (v182)
              {
                int v194 = *((_DWORD *)v1 + 85);
                nw_endpoint_type_t v195 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v194;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v195;
                _os_log_impl(&dword_1830D4000, v165, v181, "%{public}s [R%u] unknown resolver mode of operation for type %d, no backtrace", buf, 0x18u);
              }
              goto LABEL_273;
            }
            if (v182)
            {
              int v183 = *((_DWORD *)v1 + 85);
              nw_endpoint_type_t v184 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v183;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v184;
              *(_WORD *)&unsigned char buf[24] = 2082;
              *(void *)&buf[26] = v180;
              _os_log_impl(&dword_1830D4000, v165, v181, "%{public}s [R%u] unknown resolver mode of operation for type %d, dumping backtrace:%{public}s", buf, 0x22u);
            }

            free(v180);
          }
LABEL_274:
          if (v164) {
            free(v164);
          }
        }
        DNSServiceErrorType v5 = 0;
        goto LABEL_277;
      }
      DNSServiceFlags v109 = flags;
      srv_name = (const char *)nw_endpoint_get_srv_name(*((void **)v1 + 3));
      DNSServiceErrorType RecordWithAttribute = DNSServiceQueryRecordWithAttribute(v224, v109, scoped_interface_index, srv_name, 0x21u, 1u, attr, (DNSServiceQueryRecordReply)nw_resolver_srv_resolve_callback, v47);
      if (RecordWithAttribute != -65569)
      {
        DNSServiceErrorType v5 = RecordWithAttribute;
        v219 = "SRV";
        v221 = "DNSServiceQueryRecord";
        goto LABEL_277;
      }
      nw_resolver_cancel_query_locked(v47, 0);
      v112 = "SRV";
      goto LABEL_13;
    }
    if (!nw_parameters_get_resolve_ptr(*((void **)v1 + 2))) {
      break;
    }
    address = nw_endpoint_get_address(*((nw_endpoint_t *)v1 + 3));
    v58 = address;
    int sa_family = address->sa_family;
    if (sa_family == 2)
    {
      if (snprintf(buf, 0x100uLL, "%u.%u.%u.%u.in-addr.arpa.", HIBYTE(*(_DWORD *)&address->sa_data[2]), BYTE2(*(_DWORD *)&address->sa_data[2]), BYTE1(*(_DWORD *)&address->sa_data[2]), *(_DWORD *)&address->sa_data[2]) >= 0x100)goto LABEL_195; {
    }
      }
    else
    {
      if (sa_family != 30) {
        goto LABEL_195;
      }
      unsigned int v60 = snprintf(buf, 0x100uLL, "%x.%x.", address[1].sa_data[5] & 0xF, address[1].sa_data[5] >> 4);
      if (v60 >= 0x100) {
        goto LABEL_195;
      }
      unsigned int v61 = v60;
      size_t v62 = 256 - v60;
      unsigned int v63 = snprintf(&buf[v60], v62, "%x.%x.", v58[1].sa_data[4] & 0xF, v58[1].sa_data[4] >> 4);
      if ((v63 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v62 > v63;
      size_t v65 = v62 - v63;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v66 = v63 + v61;
      unsigned int v67 = snprintf(&buf[v66], v65, "%x.%x.", v58[1].sa_data[3] & 0xF, v58[1].sa_data[3] >> 4);
      if ((v67 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v65 > v67;
      size_t v68 = v65 - v67;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v69 = v67 + v66;
      unsigned int v70 = snprintf(&buf[v69], v68, "%x.%x.", v58[1].sa_data[2] & 0xF, v58[1].sa_data[2] >> 4);
      if ((v70 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v68 > v70;
      size_t v71 = v68 - v70;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v72 = v70 + v69;
      unsigned int v73 = snprintf(&buf[v72], v71, "%x.%x.", v58[1].sa_data[1] & 0xF, v58[1].sa_data[1] >> 4);
      if ((v73 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v71 > v73;
      size_t v74 = v71 - v73;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v75 = v73 + v72;
      unsigned int v76 = snprintf(&buf[v75], v74, "%x.%x.", v58[1].sa_data[0] & 0xF, v58[1].sa_data[0] >> 4);
      if ((v76 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v74 > v76;
      size_t v77 = v74 - v76;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v78 = v76 + v75;
      unsigned int v79 = snprintf(&buf[v78], v77, "%x.%x.", v58[1].sa_family & 0xF, v58[1].sa_family >> 4);
      if ((v79 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v77 > v79;
      size_t v80 = v77 - v79;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v81 = v79 + v78;
      unsigned int v82 = snprintf(&buf[v81], v80, "%x.%x.", v58[1].sa_len & 0xF, v58[1].sa_len >> 4);
      if ((v82 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v80 > v82;
      size_t v83 = v80 - v82;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v84 = v82 + v81;
      unsigned int v85 = snprintf(&buf[v84], v83, "%x.%x.", v58->sa_data[13] & 0xF, v58->sa_data[13] >> 4);
      if ((v85 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v83 > v85;
      size_t v86 = v83 - v85;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v87 = v85 + v84;
      unsigned int v88 = snprintf(&buf[v87], v86, "%x.%x.", v58->sa_data[12] & 0xF, v58->sa_data[12] >> 4);
      if ((v88 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v86 > v88;
      size_t v89 = v86 - v88;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v90 = v88 + v87;
      unsigned int v91 = snprintf(&buf[v90], v89, "%x.%x.", v58->sa_data[11] & 0xF, v58->sa_data[11] >> 4);
      if ((v91 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v89 > v91;
      size_t v92 = v89 - v91;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v93 = v91 + v90;
      unsigned int v94 = snprintf(&buf[v93], v92, "%x.%x.", v58->sa_data[10] & 0xF, v58->sa_data[10] >> 4);
      if ((v94 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v92 > v94;
      size_t v95 = v92 - v94;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v96 = v94 + v93;
      unsigned int v97 = snprintf(&buf[v96], v95, "%x.%x.", v58->sa_data[9] & 0xF, v58->sa_data[9] >> 4);
      if ((v97 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v95 > v97;
      size_t v98 = v95 - v97;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v99 = v97 + v96;
      unsigned int v100 = snprintf(&buf[v99], v98, "%x.%x.", v58->sa_data[8] & 0xF, v58->sa_data[8] >> 4);
      if ((v100 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      BOOL v64 = v98 > v100;
      size_t v101 = v98 - v100;
      if (!v64) {
        goto LABEL_195;
      }
      uint64_t v102 = v100 + v99;
      unsigned int v103 = snprintf(&buf[v102], v101, "%x.%x.", v58->sa_data[7] & 0xF, v58->sa_data[7] >> 4);
      if ((v103 & 0x80000000) != 0
        || (BOOL v64 = v101 > v103, v104 = v101 - v103, !v64)
        || (uint64_t v105 = v103 + v102,
            unsigned int v106 = snprintf(&buf[v105], v104, "%x.%x.", v58->sa_data[6] & 0xF, v58->sa_data[6] >> 4),
            (v106 & 0x80000000) != 0)
        || (BOOL v64 = v104 > v106, v107 = v104 - v106, !v64)
        || (unsigned int v108 = snprintf(&buf[v106 + v105], v107, "ip6.arpa."), (v108 & 0x80000000) != 0)
        || v107 <= v108)
      {
LABEL_195:
        if ((*((unsigned char *)v1 + 346) & 0x20) == 0)
        {
          if (*v225)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v151 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)handler = 136446466;
              *(void *)&handler[4] = "nw_resolver_create_dns_service_locked";
              *(_WORD *)&handler[12] = 2082;
              *(void *)&handler[14] = (char *)v1 + 256;
              v152 = "%{public}s [C%{public}s] failed to create PTR name";
              v153 = v151;
              uint32_t v154 = 22;
              goto LABEL_205;
            }
          }
          else
          {
            v151 = __nwlog_obj();
            if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
            {
              int v155 = *((_DWORD *)v1 + 85);
              *(_DWORD *)handler = 136446466;
              *(void *)&handler[4] = "nw_resolver_create_dns_service_locked";
              *(_WORD *)&handler[12] = 1024;
              *(_DWORD *)&handler[14] = v155;
              v152 = "%{public}s [R%u] failed to create PTR name";
              v153 = v151;
              uint32_t v154 = 18;
LABEL_205:
              _os_log_impl(&dword_1830D4000, v153, OS_LOG_TYPE_ERROR, v152, handler, v154);
            }
          }
        }
        uint64_t v150 = 0;
LABEL_208:
        v156 = v229;
LABEL_209:

        goto LABEL_297;
      }
    }
    DNSServiceErrorType v113 = DNSServiceQueryRecordWithAttribute(v224, flags, scoped_interface_index, buf, 0xCu, 1u, attr, (DNSServiceQueryRecordReply)nw_resolver_ptr_resolve_callback, v47);
    if (v113 != -65569)
    {
      v221 = "DNSServiceQueryRecord";
      DNSServiceErrorType v5 = v113;
      v168 = "PTR";
      goto LABEL_235;
    }
    nw_resolver_cancel_query_locked(v47, 0);
    v112 = "PTR";
LABEL_13:
    v219 = v112;
    uint64_t v7 = "DNSServiceQueryRecord";
LABEL_14:
    v221 = v7;

LABEL_15:
    char v6 = 0;
    if ((v8 & 1) == 0) {
      goto LABEL_278;
    }
  }
  if ((*((unsigned char *)v1 + 346) & 0x10) != 0
    || nw_endpoint_get_address_family(*((void **)v1 + 3)) != 2
    || (v157 = nw_endpoint_get_address(*((nw_endpoint_t *)v1 + 3)),
        !nw_nat64_can_v4_address_be_synthesized((unsigned int *)&v157->sa_data[2])))
  {
    nw_array_append(*((void *)v47 + 18), *((void **)v1 + 3));
    *((_DWORD *)v47 + 21) = 0;
    nw_resolver_update_status_locked(v47, 0);
    goto LABEL_233;
  }
  *((_DWORD *)v1 + 20) = 2;
  if ((*((unsigned char *)v1 + 346) & 0x20) == 0)
  {
    if (*v225)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      v158 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)v1 + 256;
        v159 = "%{public}s [C%{public}s] Querying NAT64 prefixes";
        v160 = v158;
        uint32_t v161 = 22;
        goto LABEL_268;
      }
    }
    else
    {
      v158 = __nwlog_obj();
      if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
      {
        int v192 = *((_DWORD *)v1 + 85);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v192;
        v159 = "%{public}s [R%u] Querying NAT64 prefixes";
        v160 = v158;
        uint32_t v161 = 18;
LABEL_268:
        _os_log_impl(&dword_1830D4000, v160, OS_LOG_TYPE_DEBUG, v159, buf, v161);
      }
    }
  }
  *(_DWORD *)buf = scoped_interface_index;
  dispatch_group_enter(*((dispatch_group_t *)v1 + 5));
  BOOL v193 = nw_context_copy_workloop(*((void **)v1 + 4));
  v226[0] = MEMORY[0x1E4F143A8];
  v226[1] = 3221225472;
  v226[2] = ___ZL37nw_resolver_create_dns_service_lockedP22NWConcrete_nw_resolver_block_invoke_247;
  v226[3] = &unk_1E523B528;
  v227 = v47;
  nw_nat64_copy_prefixes_async_override_dns((unsigned int *)buf, (void *)v193, v224, &flags, v226);

  DNSServiceErrorType v5 = 0;
  v221 = "nw_nat64_copy_prefixes_async_override_dns";
  v168 = "NAT64";
LABEL_235:
  v219 = v168;
LABEL_277:

LABEL_278:
  if (attr) {
    DNSServiceAttributeDeallocate(attr);
  }
  if (!v5)
  {
    v201 = (_DNSServiceRef_t *)*((void *)v1 + 8);
    BOOL v202 = nw_context_copy_workloop(*((void **)v1 + 4));
    DNSServiceErrorType v5 = DNSServiceSetDispatchQueue(v201, (dispatch_queue_t)v202);

    if (v5)
    {
      v221 = "DNSServiceSetDispatchQueue";
      goto LABEL_286;
    }
    if ((*((unsigned char *)v1 + 346) & 0x20) == 0)
    {
      if (*v225)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        v156 = (id)gconnectionLogObj;
        uint64_t v150 = 1;
        if (os_log_type_enabled(v156, OS_LOG_TYPE_INFO))
        {
          v207 = nw_endpoint_get_logging_description(*((void **)v1 + 3));
          int v208 = *((_DWORD *)v1 + 20);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = (char *)v1 + 256;
          *(_WORD *)&buf[22] = 2082;
          *(void *)&unsigned char buf[24] = v219;
          *(_WORD *)&buf[32] = 2082;
          *(void *)&buf[34] = v207;
          *(_WORD *)&buf[42] = 1024;
          *(_DWORD *)&buf[44] = flags;
          *(_WORD *)&buf[48] = 1024;
          int v243 = v208;
          _os_log_impl(&dword_1830D4000, v156, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] Starting %{public}s resolution %{public}s, flags %#x proto %u", buf, 0x36u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v156 = (id)gLogObj;
        uint64_t v150 = 1;
        if (os_log_type_enabled(v156, OS_LOG_TYPE_INFO))
        {
          int v209 = *((_DWORD *)v1 + 85);
          v210 = nw_endpoint_get_logging_description(*((void **)v1 + 3));
          int v211 = *((_DWORD *)v1 + 20);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v209;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v219;
          *(_WORD *)&buf[28] = 2082;
          *(void *)&buf[30] = v210;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = flags;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v211;
          uint64_t v150 = 1;
          _os_log_impl(&dword_1830D4000, v156, OS_LOG_TYPE_INFO, "%{public}s [R%u] Starting %{public}s resolution %{public}s, flags %#x proto %u", buf, 0x32u);
        }
      }
      goto LABEL_209;
    }
    goto LABEL_194;
  }
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v196 = (id)gLogObj;
    if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
    {
      v197 = nwlog_get_string_for_dns_service_error(v5);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v221;
      *(_WORD *)&buf[22] = 2082;
      *(void *)&unsigned char buf[24] = v197;
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v5;
      v198 = "%{public}s %{public}s failed: %{public}s(%d)";
      v199 = v196;
      uint32_t v200 = 38;
      goto LABEL_294;
    }
LABEL_295:

    goto LABEL_296;
  }
LABEL_286:
  if ((*((unsigned char *)v1 + 346) & 0x20) == 0)
  {
    if (*v225)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      v196 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v196, OS_LOG_TYPE_ERROR)) {
        goto LABEL_295;
      }
      v203 = nwlog_get_string_for_dns_service_error(v5);
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = (char *)v1 + 256;
      *(_WORD *)&buf[22] = 2082;
      *(void *)&unsigned char buf[24] = v221;
      *(_WORD *)&buf[32] = 2082;
      *(void *)&buf[34] = v203;
      *(_WORD *)&buf[42] = 1024;
      *(_DWORD *)&buf[44] = v5;
      v198 = "%{public}s [C%{public}s] %{public}s failed: %{public}s(%d)";
      v199 = v196;
      uint32_t v200 = 48;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v196 = (id)gLogObj;
      if (!os_log_type_enabled(v196, OS_LOG_TYPE_ERROR)) {
        goto LABEL_295;
      }
      int v204 = *((_DWORD *)v1 + 85);
      v205 = nwlog_get_string_for_dns_service_error(v5);
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v204;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v221;
      *(_WORD *)&buf[28] = 2082;
      *(void *)&buf[30] = v205;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v5;
      v198 = "%{public}s [R%u] %{public}s failed: %{public}s(%d)";
      v199 = v196;
      uint32_t v200 = 44;
    }
LABEL_294:
    _os_log_impl(&dword_1830D4000, v199, OS_LOG_TYPE_ERROR, v198, buf, v200);
    goto LABEL_295;
  }
LABEL_296:
  *((_DWORD *)v10 + 21) = v5;
  nw_resolver_cancel_query_locked(v10, 0);
  uint64_t v150 = 0;
LABEL_297:

  return v150;
}

void sub_18368E21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *location, id *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Unwind_Resume(a1);
}

BOOL __nw_resolver_set_update_handler_block_invoke_83(uint64_t a1)
{
  return nw_resolver_cancel(*(void **)(a1 + 32));
}

void ___ZL37nw_resolver_create_dns_service_lockedP22NWConcrete_nw_resolver_block_invoke(uint64_t a1)
{
}

uint64_t ___ZL38nw_resolver_get_awdl_trigger_heuristicP22NWConcrete_nw_resolver_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F8] && xpc_uint64_get_value(v4) == 1002)
  {
    uint64_t v5 = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_18368E430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) || a2 != 4 && a2 != 2) {
    goto LABEL_2;
  }
  WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained) {
    goto LABEL_2;
  }
  uint64_t v7 = WeakRetained;
  if ((WeakRetained[86]._os_unfair_lock_opaque & 0x200000) == 0)
  {
    if (LOBYTE(WeakRetained[64]._os_unfair_lock_opaque))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v8 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
        goto LABEL_15;
      }
      *(_DWORD *)buf = 136446466;
      int v18 = "nw_resolver_should_wait_for_awdl_trigger_block_invoke";
      __int16 v19 = 2082;
      unint64_t v20 = v7 + 64;
      id v9 = "%{public}s [C%{public}s] AWDL trigger browse did not find service";
      uint64_t v10 = v8;
      uint32_t v11 = 22;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v8 = (id)gLogObj;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
LABEL_15:

        goto LABEL_16;
      }
      uint32_t os_unfair_lock_opaque = v7[85]._os_unfair_lock_opaque;
      *(_DWORD *)buf = 136446466;
      int v18 = "nw_resolver_should_wait_for_awdl_trigger_block_invoke";
      __int16 v19 = 1024;
      LODWORD(v20) = os_unfair_lock_opaque;
      id v9 = "%{public}s [R%u] AWDL trigger browse did not find service";
      uint64_t v10 = v8;
      uint32_t v11 = 18;
    }
    _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v13 + 24))
  {
    *(unsigned char *)(v13 + 24) = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke_252;
    aBlock[3] = &unk_1E524BAA8;
    unint64_t v16 = v7;
    uint64_t v14 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v7 + 3);
    v14[2](v14);
    os_unfair_lock_unlock(v7 + 3);
  }
LABEL_2:
}

void sub_18368E6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke_254(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    id v6 = WeakRetained;
    if (v4 && WeakRetained)
    {
      uint64_t v7 = (id *)v4;
      char v8 = v7[1];

      if (v8)
      {
        bonjour_service_name = nw_endpoint_get_bonjour_service_name(v8);
        uint64_t v10 = nw_endpoint_get_bonjour_service_name(*((nw_endpoint_t *)v6 + 3));
        if (!strcasecmp(bonjour_service_name, v10))
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 3221225472;
          aBlock[2] = ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke_2;
          aBlock[3] = &unk_1E524BAA8;
          id v13 = v6;
          uint32_t v11 = (void (**)(void))_Block_copy(aBlock);
          os_unfair_lock_lock((os_unfair_lock_t)v6 + 3);
          v11[2](v11);
          os_unfair_lock_unlock((os_unfair_lock_t)v6 + 3);
        }
      }
    }
  }
}

void sub_18368E834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL37nw_resolver_create_dns_service_lockedP22NWConcrete_nw_resolver_block_invoke_247(uint64_t a1, int a2, unsigned int *a3)
{
  LODWORD(v4) = a2;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = a3;
      id v9 = "%{public}s Received %d NAT64 prefixes [%p]";
      uint64_t v10 = v7;
      uint32_t v11 = 28;
LABEL_12:
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, v9, buf, v11);
    }
LABEL_13:

    uint64_t v6 = *(void *)(a1 + 32);
    goto LABEL_14;
  }
  if ((*(unsigned char *)(v6 + 346) & 0x20) == 0)
  {
    if (*(unsigned char *)(v6 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v7 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_13;
      }
      uint64_t v8 = *(void *)(a1 + 32) + 256;
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = v4;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a3;
      id v9 = "%{public}s [C%{public}s] Received %d NAT64 prefixes [%p]";
      uint64_t v10 = v7;
      uint32_t v11 = 38;
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(_DWORD *)(*(void *)(a1 + 32) + 340);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v4;
      *(_WORD *)&unsigned char buf[24] = 2048;
      *(void *)&buf[26] = a3;
      id v9 = "%{public}s [R%u] Received %d NAT64 prefixes [%p]";
      uint64_t v10 = v7;
      uint32_t v11 = 34;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_14:
  if ((int)v4 >= 1 && a3)
  {
    memset(&address[4], 0, 24);
    *(_WORD *)address = 7708;
    *(_WORD *)&address[2] = __rev16(nw_endpoint_get_port(*(nw_endpoint_t *)(v6 + 24)));
    int v37 = *(_DWORD *)&nw_endpoint_get_address(*(nw_endpoint_t *)(*(void *)(a1 + 32) + 24))->sa_data[2];
    uint64_t v4 = v4;
    while (!nw_nat64_synthesize_v6(a3, (__int16 *)&v37, &address[8]))
    {
      __int16 v44 = 0;
      memset(buf, 0, sizeof(buf));
      nw_nat64_write_prefix_to_string(a3, (char *)buf, 0x32u);
      uint64_t v18 = *(void *)(a1 + 32);
      if (v18)
      {
        if ((*(unsigned char *)(v18 + 346) & 0x20) != 0) {
          goto LABEL_19;
        }
        if (*(unsigned char *)(v18 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint32_t v17 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            goto LABEL_18;
          }
          uint64_t v19 = *(void *)(a1 + 32);
          logging_description = nw_endpoint_get_logging_description(*(void **)(v19 + 24));
          *(_DWORD *)unint64_t v39 = 136446978;
          uint32_t v40 = "nw_resolver_create_dns_service_locked_block_invoke";
          __int16 v41 = 2082;
          *(void *)dispatch_group_t v42 = v19 + 256;
          *(_WORD *)&v42[8] = 2082;
          *(void *)&v42[10] = logging_description;
          *(_WORD *)&v42[18] = 2082;
          *(void *)&v42[20] = buf;
          id v13 = v17;
          uint64_t v14 = "%{public}s [C%{public}s] failed to synthesize IPv4 address %{public}s with prefix %{public}s";
          uint32_t v15 = 42;
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint32_t v17 = (id)gLogObj;
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            goto LABEL_18;
          }
          uint64_t v26 = *(void *)(a1 + 32);
          int v27 = *(_DWORD *)(v26 + 340);
          unint64_t v28 = nw_endpoint_get_logging_description(*(void **)(v26 + 24));
          *(_DWORD *)unint64_t v39 = 136446978;
          uint32_t v40 = "nw_resolver_create_dns_service_locked_block_invoke";
          __int16 v41 = 1024;
          *(_DWORD *)dispatch_group_t v42 = v27;
          *(_WORD *)&v42[4] = 2082;
          *(void *)&v42[6] = v28;
          *(_WORD *)&v42[14] = 2082;
          *(void *)&v42[16] = buf;
          id v13 = v17;
          uint64_t v14 = "%{public}s [R%u] failed to synthesize IPv4 address %{public}s with prefix %{public}s";
          uint32_t v15 = 38;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint32_t v17 = (id)gLogObj;
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          goto LABEL_18;
        }
        uint64_t v25 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 24));
        *(_DWORD *)unint64_t v39 = 136446722;
        uint32_t v40 = "nw_resolver_create_dns_service_locked_block_invoke";
        __int16 v41 = 2082;
        *(void *)dispatch_group_t v42 = v25;
        *(_WORD *)&v42[8] = 2082;
        *(void *)&v42[10] = buf;
        id v13 = v17;
        uint64_t v14 = "%{public}s failed to synthesize IPv4 address %{public}s with prefix %{public}s";
        uint32_t v15 = 32;
      }
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, v14, v39, v15);
LABEL_18:

LABEL_19:
      a3 += 4;
      if (!--v4)
      {
        uint64_t v6 = *(void *)(a1 + 32);
        goto LABEL_55;
      }
    }
    nw_endpoint_t v16 = nw_endpoint_create_address((const sockaddr *)address);
    uint32_t v17 = v16;
    if (v16)
    {
      nw_endpoint_set_parent_endpoint(v16, *(void **)(*(void *)(a1 + 32) + 24), 0);
      nw_array_append(*(void *)(*(void *)(a1 + 32) + 144), v17);
      goto LABEL_18;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
    uint64_t v22 = (void *)_os_log_send_and_compose_impl();

    v39[0] = 16;
    char v36 = 0;
    if (__nwlog_fault((const char *)v22, v39, &v36))
    {
      if (v39[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint32_t v23 = (id)gLogObj;
        os_log_type_t v24 = v39[0];
        if (os_log_type_enabled(v23, (os_log_type_t)v39[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s nw_endpoint_create_address failed", buf, 0xCu);
        }
      }
      else
      {
        if (v36)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v30 = (id)gLogObj;
          os_log_type_t v31 = v39[0];
          BOOL v32 = os_log_type_enabled(v30, (os_log_type_t)v39[0]);
          if (backtrace_string)
          {
            if (v32)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s nw_endpoint_create_address failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v22) {
              goto LABEL_18;
            }
LABEL_36:
            free(v22);
            goto LABEL_18;
          }
          if (v32)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
            _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s nw_endpoint_create_address failed, no backtrace", buf, 0xCu);
          }

          goto LABEL_35;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint32_t v23 = (id)gLogObj;
        os_log_type_t v33 = v39[0];
        if (os_log_type_enabled(v23, (os_log_type_t)v39[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
          _os_log_impl(&dword_1830D4000, v23, v33, "%{public}s nw_endpoint_create_address failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_35:
    if (v22) {
      goto LABEL_36;
    }
    goto LABEL_18;
  }
LABEL_55:
  nw_array_append(*(void *)(v6 + 144), *(void **)(v6 + 24));
  uint64_t v35 = *(void *)(a1 + 32);
  uint64_t v34 = (void **)(a1 + 32);
  *(_DWORD *)(v35 + 84) = 0;
  nw_resolver_update_status_locked(*v34, 0);
  dispatch_group_leave(*((dispatch_group_t *)*v34 + 5));
  os_unfair_lock_unlock((os_unfair_lock_t)*v34 + 3);
}

void sub_18368F0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_srv_resolve_callback(_DNSServiceRef_t *a1, int a2, unsigned int a3, int a4, const char *a5, int a6, int a7, unsigned int a8, unsigned __int16 *a9, unsigned int a10, void *a11)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint32_t v17 = a11;
  uint64_t v18 = v17;
  if (!v17)
  {
    uint64_t v53 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
    v54 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (__nwlog_fault(v54, type, &v80))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v55 = __nwlog_obj();
        os_log_type_t v56 = type[0];
        if (os_log_type_enabled(v55, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
          _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s called with null resolver", buf, 0xCu);
        }
      }
      else if (v80)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v55 = __nwlog_obj();
        os_log_type_t v58 = type[0];
        BOOL v59 = os_log_type_enabled(v55, type[0]);
        if (backtrace_string)
        {
          if (v59)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
            __int16 v82 = 2082;
            *(void *)size_t v83 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v55, v58, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_110;
        }
        if (v59)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
          _os_log_impl(&dword_1830D4000, v55, v58, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        v55 = __nwlog_obj();
        os_log_type_t v60 = type[0];
        if (os_log_type_enabled(v55, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
          _os_log_impl(&dword_1830D4000, v55, v60, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_110:
    if (v54) {
      free(v54);
    }
    goto LABEL_25;
  }
  if ((v17[346] & 0x20) == 0)
  {
    if (v17[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v19 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_11;
      }
      *(_DWORD *)buf = 136448514;
      *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
      __int16 v82 = 2082;
      *(void *)size_t v83 = v18 + 256;
      *(_WORD *)&v83[8] = 1024;
      *(_DWORD *)&v83[10] = a2;
      *(_WORD *)&v83[14] = 1024;
      *(_DWORD *)&v83[16] = a3;
      *(_WORD *)&v83[20] = 1024;
      *(_DWORD *)&v83[22] = a4;
      *(_WORD *)&v83[26] = 2082;
      *(void *)&v83[28] = a5;
      *(_WORD *)&v83[36] = 1024;
      *(_DWORD *)uint64_t v84 = a6;
      *(_WORD *)&v84[4] = 1024;
      *(_DWORD *)unsigned int v85 = a7;
      *(_WORD *)&v85[4] = 1024;
      *(_DWORD *)size_t v86 = a8;
      *(_WORD *)&v86[4] = 1024;
      unsigned int v87 = a10;
      unint64_t v20 = "%{public}s [C%{public}s] flags=0x%x ifindex=%u errorCode=%d name=%{public}s rrtype=%u rrclass=%u rdlen=%u, ttl=%u";
      id v21 = v19;
      uint32_t v22 = 74;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = (id)gLogObj;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
LABEL_11:

        goto LABEL_12;
      }
      int v23 = *((_DWORD *)v18 + 85);
      *(_DWORD *)buf = 136448514;
      *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
      __int16 v82 = 1024;
      *(_DWORD *)size_t v83 = v23;
      *(_WORD *)&v83[4] = 1024;
      *(_DWORD *)&v83[6] = a2;
      *(_WORD *)&v83[10] = 1024;
      *(_DWORD *)&v83[12] = a3;
      *(_WORD *)&v83[16] = 1024;
      *(_DWORD *)&v83[18] = a4;
      *(_WORD *)&v83[22] = 2082;
      *(void *)&v83[24] = a5;
      *(_WORD *)&v83[32] = 1024;
      *(_DWORD *)&v83[34] = a6;
      *(_WORD *)uint64_t v84 = 1024;
      *(_DWORD *)&v84[2] = a7;
      *(_WORD *)unsigned int v85 = 1024;
      *(_DWORD *)&v85[2] = a8;
      *(_WORD *)size_t v86 = 1024;
      *(_DWORD *)&v86[2] = a10;
      unint64_t v20 = "%{public}s [R%u] flags=0x%x ifindex=%u errorCode=%d name=%{public}s rrtype=%u rrclass=%u rdlen=%u, ttl=%u";
      id v21 = v19;
      uint32_t v22 = 70;
    }
    _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, v20, buf, v22);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_lock((os_unfair_lock_t)v18 + 3);
  if (!a1 || *((_DNSServiceRef_t **)v18 + 9) != a1)
  {
    if ((v18[346] & 0x20) == 0)
    {
      if (v18[256])
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v24 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v25 = *((void *)v18 + 9);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
          __int16 v82 = 2082;
          *(void *)size_t v83 = v18 + 256;
          *(_WORD *)&v83[8] = 2048;
          *(void *)&v83[10] = a1;
          *(_WORD *)&v83[18] = 2048;
          *(void *)&v83[20] = v18;
          *(_WORD *)&v83[28] = 2048;
          *(void *)&v83[30] = v25;
          _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s] Skipped, service %p, resolver %p -> %p", buf, 0x34u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (id)gLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          int v26 = *((_DWORD *)v18 + 85);
          uint64_t v27 = *((void *)v18 + 9);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
          __int16 v82 = 1024;
          *(_DWORD *)size_t v83 = v26;
          *(_WORD *)&v83[4] = 2048;
          *(void *)&v83[6] = a1;
          *(_WORD *)&v83[14] = 2048;
          *(void *)&v83[16] = v18;
          *(_WORD *)&v83[24] = 2048;
          *(void *)&v83[26] = v27;
          _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s [R%u] Skipped, service %p, resolver %p -> %p", buf, 0x30u);
        }
      }
    }
    goto LABEL_24;
  }
  *((_WORD *)v18 + 44) = *((_WORD *)v18 + 44) & 0xFFEF | (16 * (a2 & 1));
  if (a4)
  {
    if (a4 != -65569 || *((_DWORD *)v18 + 2) == 2)
    {
      *((_DWORD *)v18 + 21) = a4;
      if (a2)
      {
LABEL_24:
        os_unfair_lock_unlock((os_unfair_lock_t)v18 + 3);
LABEL_25:

        return;
      }
LABEL_30:
      nw_resolver_update_status_locked(v18, 0);
      goto LABEL_24;
    }
    if ((v18[346] & 0x20) != 0)
    {
LABEL_62:
      nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v18);
      goto LABEL_24;
    }
    if (v18[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v32 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_INFO)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
      __int16 v82 = 2082;
      *(void *)size_t v83 = v18 + 256;
      *(_WORD *)&v83[8] = 2048;
      *(void *)&v83[10] = v18;
      os_log_type_t v33 = "%{public}s [C%{public}s] restarting resolver %p, defunct connection";
      uint64_t v34 = v32;
      uint32_t v35 = 32;
    }
    else
    {
      BOOL v32 = __nwlog_obj();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
LABEL_61:

        goto LABEL_62;
      }
      int v42 = *((_DWORD *)v18 + 85);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
      __int16 v82 = 1024;
      *(_DWORD *)size_t v83 = v42;
      *(_WORD *)&v83[4] = 2048;
      *(void *)&v83[6] = v18;
      os_log_type_t v33 = "%{public}s [R%u] restarting resolver %p, defunct connection";
      uint64_t v34 = v32;
      uint32_t v35 = 28;
    }
    _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_INFO, v33, buf, v35);
    goto LABEL_61;
  }
  if (a6 != 33)
  {
    if ((v18[346] & 0x20) == 0)
    {
      if (v18[256])
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        char v36 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
          __int16 v82 = 2082;
          *(void *)size_t v83 = v18 + 256;
          *(_WORD *)&v83[8] = 1024;
          *(_DWORD *)&v83[10] = a6;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s] Ignore record of type: %u", buf, 0x1Cu);
        }
      }
      else
      {
        char v36 = __nwlog_obj();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          int v43 = *((_DWORD *)v18 + 85);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
          __int16 v82 = 1024;
          *(_DWORD *)size_t v83 = v43;
          *(_WORD *)&v83[4] = 1024;
          *(_DWORD *)&v83[6] = a6;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s [R%u] Ignore record of type: %u", buf, 0x18u);
        }
      }
    }
    goto LABEL_24;
  }
  if (a8 <= 5)
  {
    if ((v18[346] & 0x20) != 0)
    {
LABEL_76:
      *((_DWORD *)v18 + 21) = -65549;
      goto LABEL_24;
    }
    if (v18[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      unint64_t v28 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
      __int16 v82 = 2082;
      *(void *)size_t v83 = v18 + 256;
      *(_WORD *)&v83[8] = 1024;
      *(_DWORD *)&v83[10] = a8;
      uint32_t v29 = "%{public}s [C%{public}s] Invalid SRV length: %u";
      int v30 = v28;
      uint32_t v31 = 28;
    }
    else
    {
      unint64_t v28 = __nwlog_obj();
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
LABEL_75:

        goto LABEL_76;
      }
      int v48 = *((_DWORD *)v18 + 85);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
      __int16 v82 = 1024;
      *(_DWORD *)size_t v83 = v48;
      *(_WORD *)&v83[4] = 1024;
      *(_DWORD *)&v83[6] = a8;
      uint32_t v29 = "%{public}s [R%u] Invalid SRV length: %u";
      int v30 = v28;
      uint32_t v31 = 24;
    }
    _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_ERROR, v29, buf, v31);
    goto LABEL_75;
  }
  unsigned int v65 = *a9;
  unsigned int v66 = a9[1];
  unsigned int v37 = a9[2];
  unsigned __int16 v38 = a8 - 6;
  if ((_WORD)a8 == 6)
  {
    unsigned int v61 = __nwlog_obj();
    os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "strict_calloc";
    size_t v62 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v62)) {
      goto LABEL_116;
    }
    free(v62);
  }
  uint64_t v39 = v38;
  uint32_t v40 = (char *)malloc_type_calloc(1uLL, v38, 0xEAFB8F1AuLL);
  __int16 v41 = v40;
  if (v40)
  {
    *(void *)nw_endpoint_type_t type = a9 + 3;
    goto LABEL_55;
  }
  unsigned int v63 = __nwlog_obj();
  os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "strict_calloc";
  __int16 v82 = 2048;
  *(void *)size_t v83 = 1;
  *(_WORD *)&v83[8] = 2048;
  *(void *)&v83[10] = v39;
  BOOL v64 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v64))
  {
    free(v64);
    *(void *)nw_endpoint_type_t type = a9 + 3;
    uint32_t v40 = 0;
LABEL_55:
    if ((nw_resolver_parse_rdata(v40, v39, (const unsigned __int8 **)type) & 0x80000000) == 0)
    {
      if ((a2 & 2) != 0)
      {
        BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v41, __rev16(v37));
        uint64_t v50 = (void *)host_with_numeric_port;
        if (host_with_numeric_port)
        {
          nw_endpoint_set_parent_endpoint((void *)host_with_numeric_port, *((void **)v18 + 3), 0);
          nw_endpoint_set_weight(v50, __rev16(v66));
          nw_endpoint_set_priority(v50, __rev16(v65));
          *(void *)buf = 0;
          ValidationData = (const void *)DNSServiceGetValidationData();
          if (ValidationData && *(void *)buf) {
            nw_endpoint_set_signature(v50, ValidationData, *(size_t *)buf);
          }
          if (nw_resolver_set_interface_on_endpoint(v18, a3, v50))
          {
            v74[0] = MEMORY[0x1E4F143A8];
            v74[1] = 3221225472;
            v74[2] = ___ZL32nw_resolver_srv_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke;
            v74[3] = &__block_descriptor_50_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
            v74[4] = v41;
            __int16 v76 = v65;
            __int16 v77 = v66;
            __int16 v78 = v37;
            unsigned int v75 = a3;
            nw_resolver_insert_endpoint_locked(v18, v50, v74);
          }
        }
      }
      else
      {
        v69[0] = MEMORY[0x1E4F143A8];
        v69[1] = 3221225472;
        v69[2] = ___ZL32nw_resolver_srv_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke_2;
        v69[3] = &__block_descriptor_50_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
        v69[4] = v41;
        __int16 v71 = v65;
        __int16 v72 = v66;
        __int16 v73 = v37;
        unsigned int v70 = a3;
        nw_resolver_remove_endpoint_locked(v18, v69);
      }
      if (v41) {
        free(v41);
      }
      if (a2) {
        goto LABEL_24;
      }
      goto LABEL_30;
    }
    if ((v18[346] & 0x20) != 0)
    {
LABEL_92:
      *((_DWORD *)v18 + 21) = -65549;
      if (v41) {
        free(v41);
      }
      goto LABEL_24;
    }
    if (v18[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v44 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
        goto LABEL_91;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
      __int16 v82 = 2082;
      *(void *)size_t v83 = v18 + 256;
      uint64_t v45 = "%{public}s [C%{public}s] Invalid SRV host";
      BOOL v46 = v44;
      uint32_t v47 = 22;
    }
    else
    {
      __int16 v44 = __nwlog_obj();
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
LABEL_91:

        goto LABEL_92;
      }
      int v52 = *((_DWORD *)v18 + 85);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
      __int16 v82 = 1024;
      *(_DWORD *)size_t v83 = v52;
      uint64_t v45 = "%{public}s [R%u] Invalid SRV host";
      BOOL v46 = v44;
      uint32_t v47 = 18;
    }
    _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_ERROR, v45, buf, v47);
    goto LABEL_91;
  }
LABEL_116:
  __break(1u);
}

void sub_18368FF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_restart_dns_service_locked(NWConcrete_nw_resolver *a1)
{
  uint64_t v3 = a1;
  nw_resolver_cancel_query_locked(v3, 1);
  nw_resolver_cancel_delayed_reporting_timer(v3);
  nw_resolver_cancel_query_timer(v3);
  BOOL v1 = nw_array_create();
  v2 = (void *)*((void *)v3 + 18);
  *((void *)v3 + 18) = v1;

  *((_DWORD *)v3 + 62) = 0;
  nw_resolver_create_dns_service_locked(v3);
}

void sub_183690024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_resolver_parse_rdata(char *__str, uint64_t a2, const unsigned __int8 **a3)
{
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *a3;
  if (!*a3) {
    return 0xFFFFFFFFLL;
  }
  int v5 = (int)__str;
  int v6 = *v4;
  if (*v4)
  {
    uint64_t v7 = &__str[a2];
    uint64_t v8 = __str;
    while (1)
    {
      unsigned int v9 = snprintf(v8, v7 - v8, "%.*s.", v6, (const char *)v4 + 1);
      if ((v9 & 0x80000000) != 0 || v7 - v8 <= v9) {
        return 0xFFFFFFFFLL;
      }
      v8 += v9;
      uint64_t v4 = &(*a3)[**a3 + 1];
      *a3 = v4;
      int v6 = *v4;
      if (!*v4) {
        goto LABEL_12;
      }
    }
  }
  LODWORD(v8) = __str;
LABEL_12:
  *a3 = v4 + 1;
  return (v8 - v5);
}

uint64_t ___ZL32nw_resolver_srv_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke(uint64_t a1, void *a2)
{
  return nw_endpoint_host_endpoint_matches_hostname(a2, *(const char **)(a1 + 32), bswap32(*(unsigned __int16 *)(a1 + 48)) >> 16, *(_DWORD *)(a1 + 40), 1);
}

uint64_t ___ZL32nw_resolver_srv_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke_2(uint64_t a1, void *a2)
{
  return nw_endpoint_host_endpoint_matches_hostname(a2, *(const char **)(a1 + 32), bswap32(*(unsigned __int16 *)(a1 + 48)) >> 16, *(_DWORD *)(a1 + 40), 1);
}

void nw_resolver_ptr_resolve_callback(_DNSServiceRef_t *a1, int a2, unsigned int a3, int a4, const char *a5, int a6, unsigned __int16 a7, unsigned __int16 a8, const char *a9, unsigned int a10, void *a11)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint32_t v15 = a11;
  if (!v15)
  {
    uint32_t v29 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_ptr_resolve_callback";
    nw_endpoint_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v72 = 0;
    if (__nwlog_fault(v16, &type, &v72))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_ptr_resolve_callback";
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null resolver", buf, 0xCu);
        }
      }
      else if (v72)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v30 = __nwlog_obj();
        os_log_type_t v57 = type;
        BOOL v58 = os_log_type_enabled(v30, type);
        if (backtrace_string)
        {
          if (v58)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_resolver_ptr_resolve_callback";
            __int16 v75 = 2082;
            *(void *)__int16 v76 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v30, v57, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v16) {
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        if (v58)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_ptr_resolve_callback";
          _os_log_impl(&dword_1830D4000, v30, v57, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v30 = __nwlog_obj();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_ptr_resolve_callback";
          _os_log_impl(&dword_1830D4000, v30, v59, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v16) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  nw_endpoint_t v16 = (char *)malloc_type_calloc(1uLL, 0x100uLL, 0xEAFB8F1AuLL);
  if (v16)
  {
    uint32_t v17 = a9;
    if (a9) {
      goto LABEL_4;
    }
    goto LABEL_20;
  }
  BOOL v32 = __nwlog_obj();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "strict_calloc";
  __int16 v75 = 2048;
  *(void *)__int16 v76 = 1;
  *(_WORD *)&v76[8] = 2048;
  *(void *)&v76[10] = 256;
  os_log_type_t v33 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v33))
  {
    free(v33);
    uint32_t v17 = a9;
    if (a9)
    {
LABEL_4:
      unsigned int v61 = v15;
      LODWORD(v18) = v16;
      uint64_t v19 = a1;
      int v20 = a4;
      int v21 = a2;
      unsigned int v22 = a3;
      int v23 = *(unsigned __int8 *)v17;
      if (*v17)
      {
        uint64_t v18 = v16;
        os_log_type_t v24 = v16 + 256;
        while (1)
        {
          unsigned int v25 = snprintf(v18, v24 - v18, "%.*s.", v23, v17 + 1);
          if ((v25 & 0x80000000) != 0 || v24 - v18 <= v25) {
            break;
          }
          v18 += v25;
          int v26 = (unsigned __int8 *)&v17[*(unsigned __int8 *)v17];
          int v27 = v26[1];
          uint32_t v17 = (const char *)(v26 + 1);
          int v23 = v27;
          if (!v27) {
            goto LABEL_9;
          }
        }
        int v28 = -1;
      }
      else
      {
LABEL_9:
        int v28 = v18 - v16;
      }
      a3 = v22;
      a2 = v21;
      a4 = v20;
      a1 = v19;
      uint32_t v15 = v61;
      if ((v61[346] & 0x20) != 0)
      {
LABEL_30:
        os_unfair_lock_lock((os_unfair_lock_t)v15 + 3);
        if (!a1 || !v16 || v28 < 0 || *((_DNSServiceRef_t **)v15 + 9) != a1)
        {
          if ((v15[346] & 0x20) != 0) {
            goto LABEL_44;
          }
          if (v15[256])
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v39 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_43;
            }
            uint64_t v40 = *((void *)v15 + 9);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_resolver_ptr_resolve_callback";
            __int16 v75 = 2082;
            *(void *)__int16 v76 = v15 + 256;
            *(_WORD *)&v76[8] = 2048;
            *(void *)&v76[10] = a1;
            *(_WORD *)&v76[18] = 2048;
            *(void *)&v76[20] = v15;
            *(_WORD *)&v76[28] = 2048;
            *(void *)&v76[30] = v40;
            __int16 v41 = "%{public}s [C%{public}s] Skipped, service %p, resolver %p -> %p";
            int v42 = v39;
            uint32_t v43 = 52;
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v39 = (id)gLogObj;
            if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
            {
LABEL_43:

LABEL_44:
              os_unfair_lock_unlock((os_unfair_lock_t)v15 + 3);
              if (!v16) {
                goto LABEL_76;
              }
              goto LABEL_75;
            }
            int v44 = *((_DWORD *)v15 + 85);
            uint64_t v45 = *((void *)v15 + 9);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_resolver_ptr_resolve_callback";
            __int16 v75 = 1024;
            *(_DWORD *)__int16 v76 = v44;
            *(_WORD *)&v76[4] = 2048;
            *(void *)&v76[6] = a1;
            *(_WORD *)&v76[14] = 2048;
            *(void *)&v76[16] = v15;
            *(_WORD *)&v76[24] = 2048;
            *(void *)&v76[26] = v45;
            __int16 v41 = "%{public}s [R%u] Skipped, service %p, resolver %p -> %p";
            int v42 = v39;
            uint32_t v43 = 48;
          }
          _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEBUG, v41, buf, v43);
          goto LABEL_43;
        }
        if (a4)
        {
          if (a4 != -65554)
          {
            if (a4 != -65569 || *((_DWORD *)v15 + 2) == 2) {
              goto LABEL_74;
            }
            if ((v15[346] & 0x20) != 0) {
              goto LABEL_73;
            }
            if (v15[256])
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              BOOL v46 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v46, OS_LOG_TYPE_INFO)) {
                goto LABEL_72;
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_resolver_ptr_resolve_callback";
              __int16 v75 = 2082;
              *(void *)__int16 v76 = v15 + 256;
              *(_WORD *)&v76[8] = 2048;
              *(void *)&v76[10] = v15;
              uint32_t v47 = "%{public}s [C%{public}s] restarting resolver %p, defunct connection";
              int v48 = v46;
              uint32_t v49 = 32;
            }
            else
            {
              BOOL v46 = __nwlog_obj();
              if (!os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
              {
LABEL_72:

LABEL_73:
                nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v15);
                goto LABEL_74;
              }
              int v55 = *((_DWORD *)v15 + 85);
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_resolver_ptr_resolve_callback";
              __int16 v75 = 1024;
              *(_DWORD *)__int16 v76 = v55;
              *(_WORD *)&v76[4] = 2048;
              *(void *)&v76[6] = v15;
              uint32_t v47 = "%{public}s [R%u] restarting resolver %p, defunct connection";
              int v48 = v46;
              uint32_t v49 = 28;
            }
            _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_INFO, v47, buf, v49);
            goto LABEL_72;
          }
          if ((*((_WORD *)v15 + 44) & 1) == 0)
          {
            *((_WORD *)v15 + 44) = 1;
LABEL_62:
            nw_resolver_update_status_locked(v15, 0);
          }
        }
        else if (a6 == 12)
        {
          if ((a2 & 2) != 0)
          {
            *((_WORD *)v15 + 44) = 4;
            unsigned int port = nw_endpoint_get_port(*((nw_endpoint_t *)v15 + 3));
            BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v16, port);
            nw_endpoint_set_parent_endpoint((void *)host_with_numeric_port, *((void **)v15 + 3), 0);
            *(void *)buf = 0;
            ValidationData = (const void *)DNSServiceGetValidationData();
            if (ValidationData && *(void *)buf) {
              nw_endpoint_set_signature((void *)host_with_numeric_port, ValidationData, *(size_t *)buf);
            }
            if (!nw_resolver_set_interface_on_endpoint(v15, a3, (void *)host_with_numeric_port))
            {

              goto LABEL_74;
            }
            v67[0] = MEMORY[0x1E4F143A8];
            v67[1] = 3221225472;
            v67[2] = ___ZL32nw_resolver_ptr_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke;
            v67[3] = &unk_1E523B5C0;
            uint64_t v69 = v16;
            size_t v68 = v15;
            unsigned int v70 = a3;
            char v71 = (a2 & 2) >> 1;
            BOOL inserted = nw_resolver_insert_endpoint_locked(v68, (void *)host_with_numeric_port, v67);

            if (!inserted) {
              goto LABEL_74;
            }
          }
          else
          {
            *((_WORD *)v15 + 44) = 0;
            v62[0] = MEMORY[0x1E4F143A8];
            v62[1] = 3221225472;
            v62[2] = ___ZL32nw_resolver_ptr_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke_2;
            v62[3] = &unk_1E523B5C0;
            BOOL v64 = v16;
            unsigned int v63 = v15;
            unsigned int v65 = a3;
            char v66 = 0;
            BOOL v50 = nw_resolver_remove_endpoint_locked(v63, v62);

            if (!v50) {
              goto LABEL_74;
            }
          }
          goto LABEL_62;
        }
LABEL_74:
        os_unfair_lock_unlock((os_unfair_lock_t)v15 + 3);
LABEL_75:
        free(v16);
LABEL_76:

        return;
      }
LABEL_21:
      if (v15[256])
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v34 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_29;
        }
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_resolver_ptr_resolve_callback";
        __int16 v75 = 2082;
        *(void *)__int16 v76 = v15 + 256;
        *(_WORD *)&v76[8] = 1024;
        *(_DWORD *)&v76[10] = a2;
        *(_WORD *)&v76[14] = 1024;
        *(_DWORD *)&v76[16] = a3;
        *(_WORD *)&v76[20] = 1024;
        *(_DWORD *)&v76[22] = a4;
        *(_WORD *)&v76[26] = 2082;
        *(void *)&v76[28] = v16;
        *(_WORD *)&v76[36] = 1024;
        unsigned int v77 = a10;
        uint32_t v35 = "%{public}s [C%{public}s] flags=0x%x ifindex=%u errorCode=%d hostname=%{public}s ttl=%d";
        char v36 = v34;
        uint32_t v37 = 56;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v34 = (id)gLogObj;
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
LABEL_29:

          goto LABEL_30;
        }
        int v38 = *((_DWORD *)v15 + 85);
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_resolver_ptr_resolve_callback";
        __int16 v75 = 1024;
        *(_DWORD *)__int16 v76 = v38;
        *(_WORD *)&v76[4] = 1024;
        *(_DWORD *)&v76[6] = a2;
        *(_WORD *)&v76[10] = 1024;
        *(_DWORD *)&v76[12] = a3;
        *(_WORD *)&v76[16] = 1024;
        *(_DWORD *)&v76[18] = a4;
        *(_WORD *)&v76[22] = 2082;
        *(void *)&v76[24] = v16;
        *(_WORD *)&v76[32] = 1024;
        *(_DWORD *)&v76[34] = a10;
        uint32_t v35 = "%{public}s [R%u] flags=0x%x ifindex=%u errorCode=%d hostname=%{public}s ttl=%d";
        char v36 = v34;
        uint32_t v37 = 52;
      }
      _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, v35, buf, v37);
      goto LABEL_29;
    }
LABEL_20:
    int v28 = -1;
    if ((v15[346] & 0x20) != 0) {
      goto LABEL_30;
    }
    goto LABEL_21;
  }
  __break(1u);
}

void sub_183690BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_resolver_ptr_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(const char **)(a1 + 40);
  unsigned int port = nw_endpoint_get_port(*(nw_endpoint_t *)(*(void *)(a1 + 32) + 24));
  uint64_t v6 = nw_endpoint_host_endpoint_matches_hostname(v3, v4, __rev16(port), *(_DWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));

  return v6;
}

void sub_183690C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_resolver_ptr_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(const char **)(a1 + 40);
  unsigned int port = nw_endpoint_get_port(*(nw_endpoint_t *)(*(void *)(a1 + 32) + 24));
  uint64_t v6 = nw_endpoint_host_endpoint_matches_hostname(v3, v4, __rev16(port), *(_DWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));

  return v6;
}

void sub_183690CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_bonjour_resolve_callback(_DNSServiceRef_t *a1, int a2, unsigned int a3, int a4, const char *a5, const char *a6, unsigned int a7, unsigned int a8, const unsigned __int8 *a9, void *a10)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a10;
  uint64_t v19 = v18;
  if (v18)
  {
    unsigned int v20 = __rev16(a7);
    if ((v18[346] & 0x20) != 0) {
      goto LABEL_12;
    }
    if (v18[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v21 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_11;
      }
      *(_DWORD *)buf = 136448002;
      unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
      __int16 v86 = 2082;
      *(void *)unsigned int v87 = v19 + 256;
      *(_WORD *)&v87[8] = 1024;
      *(_DWORD *)&v87[10] = a2;
      *(_WORD *)&v87[14] = 1024;
      *(_DWORD *)&v87[16] = a3;
      *(_WORD *)&v87[20] = 1024;
      *(_DWORD *)&v87[22] = a4;
      *(_WORD *)&v87[26] = 2082;
      *(void *)&v87[28] = a5;
      *(_WORD *)&v87[36] = 2082;
      *(void *)&v87[38] = a6;
      *(_WORD *)&v87[46] = 1024;
      unsigned int v88 = v20;
      unsigned int v22 = "%{public}s [C%{public}s] flags=0x%x ifindex=%u errorCode=%d name=%{public}s target=%{public}s port=%u";
      int v23 = v21;
      uint32_t v24 = 66;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v21 = (id)gLogObj;
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
LABEL_11:

LABEL_12:
        os_unfair_lock_lock((os_unfair_lock_t)v19 + 3);
        if (!a1 || *((_DNSServiceRef_t **)v19 + 9) != a1)
        {
          if ((v19[346] & 0x20) != 0)
          {
LABEL_24:
            os_unfair_lock_unlock((os_unfair_lock_t)v19 + 3);
            goto LABEL_25;
          }
          if (v19[256])
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v26 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_23;
            }
            uint64_t v27 = *((void *)v19 + 9);
            *(_DWORD *)buf = 136447234;
            unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
            __int16 v86 = 2082;
            *(void *)unsigned int v87 = v19 + 256;
            *(_WORD *)&v87[8] = 2048;
            *(void *)&v87[10] = a1;
            *(_WORD *)&v87[18] = 2048;
            *(void *)&v87[20] = v19;
            *(_WORD *)&v87[28] = 2048;
            *(void *)&v87[30] = v27;
            int v28 = "%{public}s [C%{public}s] Skipped, service %p, resolver %p -> %p";
            uint32_t v29 = v26;
            uint32_t v30 = 52;
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v26 = (id)gLogObj;
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
LABEL_23:

              goto LABEL_24;
            }
            int v31 = *((_DWORD *)v19 + 85);
            uint64_t v32 = *((void *)v19 + 9);
            *(_DWORD *)buf = 136447234;
            unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
            __int16 v86 = 1024;
            *(_DWORD *)unsigned int v87 = v31;
            *(_WORD *)&v87[4] = 2048;
            *(void *)&v87[6] = a1;
            *(_WORD *)&v87[14] = 2048;
            *(void *)&v87[16] = v19;
            *(_WORD *)&v87[24] = 2048;
            *(void *)&v87[26] = v32;
            int v28 = "%{public}s [R%u] Skipped, service %p, resolver %p -> %p";
            uint32_t v29 = v26;
            uint32_t v30 = 48;
          }
          _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, v28, buf, v30);
          goto LABEL_23;
        }
        if (a4)
        {
          if (a4 != -65569 || *((_DWORD *)v19 + 2) == 2)
          {
            *((_DWORD *)v19 + 21) = a4;
            goto LABEL_74;
          }
          if ((v19[346] & 0x20) != 0)
          {
LABEL_50:
            nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v19);
            goto LABEL_24;
          }
          if (v19[256])
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v42 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO)) {
              goto LABEL_49;
            }
            *(_DWORD *)buf = 136446722;
            unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
            __int16 v86 = 2082;
            *(void *)unsigned int v87 = v19 + 256;
            *(_WORD *)&v87[8] = 2048;
            *(void *)&v87[10] = v19;
            uint32_t v43 = "%{public}s [C%{public}s] restarting resolver %p, defunct connection";
            int v44 = v42;
            uint32_t v45 = 32;
          }
          else
          {
            int v42 = __nwlog_obj();
            if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
            {
LABEL_49:

              goto LABEL_50;
            }
            int v46 = *((_DWORD *)v19 + 85);
            *(_DWORD *)buf = 136446722;
            unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
            __int16 v86 = 1024;
            *(_DWORD *)unsigned int v87 = v46;
            *(_WORD *)&v87[4] = 2048;
            *(void *)&v87[6] = v19;
            uint32_t v43 = "%{public}s [R%u] restarting resolver %p, defunct connection";
            int v44 = v42;
            uint32_t v45 = 28;
          }
          _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_INFO, v43, buf, v45);
          goto LABEL_49;
        }
        BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(a6, v20);
        uint64_t v34 = (void *)host_with_numeric_port;
        if (!host_with_numeric_port)
        {
LABEL_73:

LABEL_74:
          if ((a2 & 1) == 0) {
            nw_resolver_update_status_locked(v19, 0);
          }
          goto LABEL_24;
        }
        nw_endpoint_set_parent_endpoint((void *)host_with_numeric_port, *((void **)v19 + 3), 0);
        nw_txt_record_t v35 = nw_txt_record_create_with_bytes(a9, a8);
        char v36 = v34;
        uint32_t v37 = v35;
        objc_storeStrong(v36 + 23, v35);

        *(void *)os_log_type_t type = 0;
        DNSServiceGetValidationData();
        if (!nw_resolver_set_interface_on_endpoint(v19, a3, v36))
        {
LABEL_72:

          goto LABEL_73;
        }
        if (!nw_parameters_has_preferred_interface_subtypes(*((void **)v19 + 2))) {
          goto LABEL_61;
        }
        unsigned int v82 = 0;
        unsigned int v82 = nw_resolver_derive_service_flags(v19, *((void **)v19 + 3), *((void **)v19 + 2));
        if (nw_resolver_get_scoped_interface_index((NWConcrete_nw_resolver *)v19, &v82))
        {
          if ((v19[346] & 0x20) != 0) {
            goto LABEL_61;
          }
          if (v19[256])
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v38 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_60;
            }
            *(_DWORD *)buf = 136446466;
            unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
            __int16 v86 = 2082;
            *(void *)unsigned int v87 = v19 + 256;
            uint64_t v39 = "%{public}s [C%{public}s] Not preferring endpoints for scoped resolution";
            uint64_t v40 = v38;
            uint32_t v41 = 22;
          }
          else
          {
            int v38 = __nwlog_obj();
            if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
LABEL_60:

              goto LABEL_61;
            }
            int v54 = *((_DWORD *)v19 + 85);
            *(_DWORD *)buf = 136446466;
            unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
            __int16 v86 = 1024;
            *(_DWORD *)unsigned int v87 = v54;
            uint64_t v39 = "%{public}s [R%u] Not preferring endpoints for scoped resolution";
            uint64_t v40 = v38;
            uint32_t v41 = 18;
          }
          _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEBUG, v39, buf, v41);
          goto LABEL_60;
        }
        id v47 = nw_parameters_copy_preferred_interface_subtypes(*((void **)v19 + 2));
        int v48 = v47;
        if (v47 && xpc_array_get_count(v47))
        {
          unsigned int v79 = nw_interface_create_with_index(a3);
          subos_log_type_t type = nw_interface_get_subtype(v79);
          size_t v50 = 0;
          do
          {
            size_t count = xpc_array_get_count(v48);
            BOOL v52 = v50 < count;
            if (v50 >= count) {
              break;
            }
            int uint64 = xpc_array_get_uint64(v48, v50++);
          }
          while (subtype != uint64);
        }
        else
        {

          BOOL v52 = 0;
        }
        if (v52 || (v19[348] & 1) != 0)
        {
LABEL_61:
          if ((v19[346] & 0x20) != 0)
          {
LABEL_71:
            nw_resolver_insert_endpoint_locked(v19, v36, &__block_literal_global_271);
            goto LABEL_72;
          }
          if (v19[256])
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v55 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v55, OS_LOG_TYPE_INFO)) {
              goto LABEL_70;
            }
            *(_DWORD *)buf = 136446722;
            unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
            __int16 v86 = 2082;
            *(void *)unsigned int v87 = v19 + 256;
            *(_WORD *)&v87[8] = 2112;
            *(void *)&v87[10] = v36;
            os_log_type_t v56 = "%{public}s [C%{public}s] Inserting host endpoint %@ directly";
            os_log_type_t v57 = v55;
            uint32_t v58 = 32;
          }
          else
          {
            int v55 = __nwlog_obj();
            if (!os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
            {
LABEL_70:

              goto LABEL_71;
            }
            int v59 = *((_DWORD *)v19 + 85);
            *(_DWORD *)buf = 136446722;
            unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
            __int16 v86 = 1024;
            *(_DWORD *)unsigned int v87 = v59;
            *(_WORD *)&v87[4] = 2112;
            *(void *)&v87[6] = v36;
            os_log_type_t v56 = "%{public}s [R%u] Inserting host endpoint %@ directly";
            os_log_type_t v57 = v55;
            uint32_t v58 = 28;
          }
          _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_INFO, v56, buf, v58);
          goto LABEL_70;
        }
        if (!*((void *)v19 + 20))
        {
          os_log_type_t v60 = (void *)*((void *)v19 + 4);
          v80[0] = MEMORY[0x1E4F143A8];
          v80[1] = 3221225472;
          v80[2] = ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke;
          v80[3] = &unk_1E524BAA8;
          uint64_t v81 = v19;
          BOOL source = nw_queue_context_create_source(v60, 2, 3, 0, v80, 0);
          *((void *)v19 + 20) = source;
          dispatch_time_t v62 = dispatch_time(0x8000000000000000, 1000000000);
          nw_queue_set_timer_values(source, v62, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);
          nw_queue_activate_source(*((void *)v19 + 20));
        }
        if ((v19[346] & 0x20) != 0)
        {
LABEL_91:
          uint64_t v68 = *((void *)v19 + 19);
          if (!v68)
          {
            BOOL v69 = nw_array_create();
            unsigned int v70 = (void *)*((void *)v19 + 19);
            *((void *)v19 + 19) = v69;

            uint64_t v68 = *((void *)v19 + 19);
          }
          nw_array_append(v68, v36);
          goto LABEL_72;
        }
        if (v19[256])
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          unsigned int v63 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_90;
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
          __int16 v86 = 2082;
          *(void *)unsigned int v87 = v19 + 256;
          *(_WORD *)&v87[8] = 2112;
          *(void *)&v87[10] = v36;
          BOOL v64 = "%{public}s [C%{public}s] Appending non-preferred host endpoint (%@) to array";
          unsigned int v65 = v63;
          uint32_t v66 = 32;
        }
        else
        {
          unsigned int v63 = __nwlog_obj();
          if (!os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
LABEL_90:

            goto LABEL_91;
          }
          int v67 = *((_DWORD *)v19 + 85);
          *(_DWORD *)buf = 136446722;
          unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
          __int16 v86 = 1024;
          *(_DWORD *)unsigned int v87 = v67;
          *(_WORD *)&v87[4] = 2112;
          *(void *)&v87[6] = v36;
          BOOL v64 = "%{public}s [R%u] Appending non-preferred host endpoint (%@) to array";
          unsigned int v65 = v63;
          uint32_t v66 = 28;
        }
        _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_DEBUG, v64, buf, v66);
        goto LABEL_90;
      }
      int v25 = *((_DWORD *)v19 + 85);
      *(_DWORD *)buf = 136448002;
      unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
      __int16 v86 = 1024;
      *(_DWORD *)unsigned int v87 = v25;
      *(_WORD *)&v87[4] = 1024;
      *(_DWORD *)&v87[6] = a2;
      *(_WORD *)&v87[10] = 1024;
      *(_DWORD *)&v87[12] = a3;
      *(_WORD *)&v87[16] = 1024;
      *(_DWORD *)&v87[18] = a4;
      *(_WORD *)&v87[22] = 2082;
      *(void *)&v87[24] = a5;
      *(_WORD *)&v87[32] = 2082;
      *(void *)&v87[34] = a6;
      *(_WORD *)&v87[42] = 1024;
      *(_DWORD *)&v87[44] = v20;
      unsigned int v22 = "%{public}s [R%u] flags=0x%x ifindex=%u errorCode=%d name=%{public}s target=%{public}s port=%u";
      int v23 = v21;
      uint32_t v24 = 62;
    }
    _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, v22, buf, v24);
    goto LABEL_11;
  }
  char v71 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
  char v72 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v82) = 0;
  if (__nwlog_fault(v72, type, &v82))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v73 = __nwlog_obj();
      os_log_type_t v74 = type[0];
      if (os_log_type_enabled(v73, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
        _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if ((_BYTE)v82)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v73 = __nwlog_obj();
      os_log_type_t v76 = type[0];
      BOOL v77 = os_log_type_enabled(v73, type[0]);
      if (backtrace_string)
      {
        if (v77)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
          __int16 v86 = 2082;
          *(void *)unsigned int v87 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v73, v76, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_110;
      }
      if (v77)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
        _os_log_impl(&dword_1830D4000, v73, v76, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v73 = __nwlog_obj();
      os_log_type_t v78 = type[0];
      if (os_log_type_enabled(v73, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v85 = "nw_resolver_bonjour_resolve_callback";
        _os_log_impl(&dword_1830D4000, v73, v78, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_110:
  if (v72) {
    free(v72);
  }
LABEL_25:
}

void sub_18369198C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 346) & 0x20) != 0) {
      goto LABEL_14;
    }
    if (*(unsigned char *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_13;
      }
      uint64_t v4 = *(void *)(a1 + 32) + 256;
      *(_DWORD *)buf = 136446466;
      uint32_t v24 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      __int16 v25 = 2082;
      uint64_t v26 = v4;
      int v5 = "%{public}s [C%{public}s] Weighting timer timed out";
      uint64_t v6 = v3;
      uint32_t v7 = 22;
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(_DWORD *)(*(void *)(a1 + 32) + 340);
      *(_DWORD *)buf = 136446466;
      uint32_t v24 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      __int16 v25 = 1024;
      LODWORD(v26) = v8;
      int v5 = "%{public}s [R%u] Weighting timer timed out";
      uint64_t v6 = v3;
      uint32_t v7 = 18;
      goto LABEL_12;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      uint32_t v24 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      int v5 = "%{public}s Weighting timer timed out";
      uint64_t v6 = v3;
      uint32_t v7 = 12;
LABEL_12:
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, v5, buf, v7);
    }
  }
LABEL_13:

  uint64_t v2 = *(void *)(a1 + 32);
LABEL_14:
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 12));
  uint64_t v10 = a1 + 32;
  unsigned int v9 = *(void **)(a1 + 32);
  uint32_t v11 = (atomic_uchar *)v9[19];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke_264;
  v21[3] = &unk_1E524AE18;
  unsigned int v22 = v9;
  nw_array_apply(v11, (uint64_t)v21);
  int v12 = *(void **)(*(void *)(a1 + 32) + 152);
  *(void *)(*(void *)v10 + 152) = 0;

  *(unsigned char *)(*(void *)v10 + 348) |= 1u;
  id v13 = *(void **)(a1 + 32);
  if (v13[20])
  {
    nw_queue_cancel_source(*(void *)(*(void *)v10 + 160));
    *(void *)(*(void *)(a1 + 32) + 160) = 0;
    id v13 = *(void **)(a1 + 32);
  }
  nw_resolver_update_status_locked(v13, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
  uint64_t v14 = *(void *)(a1 + 32);
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      uint32_t v24 = "nw_resolver_bonjour_resolve_callback_block_invoke_2";
      uint32_t v17 = "%{public}s Marking preferred weighting as completed";
      uint64_t v18 = v15;
      uint32_t v19 = 12;
LABEL_27:
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, v17, buf, v19);
    }
LABEL_28:

    goto LABEL_29;
  }
  if ((*(unsigned char *)(v14 + 346) & 0x20) == 0)
  {
    if (*(unsigned char *)(v14 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint32_t v15 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_28;
      }
      uint64_t v16 = *(void *)(a1 + 32) + 256;
      *(_DWORD *)buf = 136446466;
      uint32_t v24 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      uint32_t v17 = "%{public}s [C%{public}s] Marking preferred weighting as completed";
      uint64_t v18 = v15;
      uint32_t v19 = 22;
      goto LABEL_27;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      int v20 = *(_DWORD *)(*(void *)(a1 + 32) + 340);
      *(_DWORD *)buf = 136446466;
      uint32_t v24 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      __int16 v25 = 1024;
      LODWORD(v26) = v20;
      uint32_t v17 = "%{public}s [R%u] Marking preferred weighting as completed";
      uint64_t v18 = v15;
      uint32_t v19 = 18;
      goto LABEL_27;
    }
    goto LABEL_28;
  }
LABEL_29:
}

void sub_183691EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke_269(uint64_t a1, void *a2, void *a3)
{
  return nw_endpoint_is_equal(a2, a3, 1);
}

uint64_t ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke_264(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = *(unsigned char **)(a1 + 32);
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v13 = 136446466;
      uint64_t v14 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      __int16 v15 = 2112;
      *(void *)uint64_t v16 = v4;
      int v8 = "%{public}s Inserting non-preferred host endpoint %@";
      unsigned int v9 = v6;
      uint32_t v10 = 22;
LABEL_12:
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v13, v10);
    }
LABEL_13:

    int v5 = *(unsigned char **)(a1 + 32);
    goto LABEL_14;
  }
  if ((v5[346] & 0x20) == 0)
  {
    if (v5[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v6 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
        goto LABEL_13;
      }
      uint64_t v7 = *(void *)(a1 + 32) + 256;
      int v13 = 136446722;
      uint64_t v14 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      __int16 v15 = 2082;
      *(void *)uint64_t v16 = v7;
      *(_WORD *)&v16[8] = 2112;
      *(void *)&v16[10] = v4;
      int v8 = "%{public}s [C%{public}s] Inserting non-preferred host endpoint %@";
      unsigned int v9 = v6;
      uint32_t v10 = 32;
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v11 = *(_DWORD *)(*(void *)(a1 + 32) + 340);
      int v13 = 136446722;
      uint64_t v14 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      __int16 v15 = 1024;
      *(_DWORD *)uint64_t v16 = v11;
      *(_WORD *)&v16[4] = 2112;
      *(void *)&v16[6] = v4;
      int v8 = "%{public}s [R%u] Inserting non-preferred host endpoint %@";
      unsigned int v9 = v6;
      uint32_t v10 = 28;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_14:
  nw_resolver_insert_endpoint_locked(v5, v4, &__block_literal_global_267);

  return 1;
}

uint64_t ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke_265(uint64_t a1, void *a2, void *a3)
{
  return nw_endpoint_is_equal(a2, a3, 1);
}

void ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke_2(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) != 2)
  {
    if ((*(unsigned char *)(v2 + 346) & 0x20) != 0)
    {
LABEL_12:
      nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v2);
      return;
    }
    if (*(unsigned char *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO)) {
        goto LABEL_11;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      int v10 = 136446722;
      int v11 = "nw_resolver_should_wait_for_awdl_trigger_block_invoke";
      __int16 v12 = 2082;
      *(void *)int v13 = v4 + 256;
      *(_WORD *)&v13[8] = 2048;
      *(void *)&v13[10] = v4;
      int v5 = "%{public}s [C%{public}s] restarting resolver %p, AWDL trigger browse found endpoint";
      uint64_t v6 = v3;
      uint32_t v7 = 32;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v3 = (id)gLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
LABEL_11:

        uint64_t v2 = *(void *)(a1 + 32);
        goto LABEL_12;
      }
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(_DWORD *)(v8 + 340);
      int v10 = 136446722;
      int v11 = "nw_resolver_should_wait_for_awdl_trigger_block_invoke";
      __int16 v12 = 1024;
      *(_DWORD *)int v13 = v9;
      *(_WORD *)&v13[4] = 2048;
      *(void *)&v13[6] = v8;
      int v5 = "%{public}s [R%u] restarting resolver %p, AWDL trigger browse found endpoint";
      uint64_t v6 = v3;
      uint32_t v7 = 28;
    }
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v10, v7);
    goto LABEL_11;
  }
}

void ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke_252(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) != 2)
  {
    if ((*(unsigned char *)(v2 + 346) & 0x20) != 0)
    {
LABEL_12:
      nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v2);
      return;
    }
    if (*(unsigned char *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO)) {
        goto LABEL_11;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      int v10 = 136446722;
      int v11 = "nw_resolver_should_wait_for_awdl_trigger_block_invoke";
      __int16 v12 = 2082;
      *(void *)int v13 = v4 + 256;
      *(_WORD *)&v13[8] = 2048;
      *(void *)&v13[10] = v4;
      int v5 = "%{public}s [C%{public}s] restarting resolver %p, AWDL trigger browse failed";
      uint64_t v6 = v3;
      uint32_t v7 = 32;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v3 = (id)gLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
LABEL_11:

        uint64_t v2 = *(void *)(a1 + 32);
        goto LABEL_12;
      }
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(_DWORD *)(v8 + 340);
      int v10 = 136446722;
      int v11 = "nw_resolver_should_wait_for_awdl_trigger_block_invoke";
      __int16 v12 = 1024;
      *(_DWORD *)int v13 = v9;
      *(_WORD *)&v13[4] = 2048;
      *(void *)&v13[6] = v8;
      int v5 = "%{public}s [R%u] restarting resolver %p, AWDL trigger browse failed";
      uint64_t v6 = v3;
      uint32_t v7 = 28;
    }
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v10, v7);
    goto LABEL_11;
  }
}

void nw_resolver_host_resolve_callback(_DNSServiceRef_t *a1, int a2, unsigned int a3, int a4, const char *a5, const sockaddr *a6, int a7, void *a8)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a8;
  __int16 v15 = v14;
  if (v14)
  {
    if (nw_parameters_get_sensitive_redacted(v14[2]))
    {
      char v71 = 0;
      size_t v70 = 0;
      if (!a6) {
        goto LABEL_16;
      }
      int sa_family = a6->sa_family;
      if (sa_family != 30)
      {
        if (sa_family == 2)
        {
          if (*(_DWORD *)&a6->sa_data[2])
          {
            uint64_t v17 = (const char *)&v70;
            __nwlog_salted_hash(&a6->sa_data[2], 4, (char *)&v70);
            uint64_t v18 = "IPv4#";
            if ((*((unsigned char *)v15 + 346) & 0x20) != 0) {
              goto LABEL_43;
            }
LABEL_27:
            if (*((unsigned char *)v15 + 256))
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              uint32_t v19 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO)) {
                goto LABEL_42;
              }
              *(_DWORD *)buf = 136448514;
              uint32_t v66 = "nw_resolver_host_resolve_callback";
              __int16 v67 = 2082;
              *(void *)uint64_t v68 = v15 + 32;
              *(_WORD *)&v68[8] = 1024;
              *(_DWORD *)&v68[10] = a2;
              *(_WORD *)&v68[14] = 1024;
              *(_DWORD *)&v68[16] = a3;
              *(_WORD *)&v68[20] = 2082;
              *(void *)&v68[22] = nwlog_get_string_for_dns_service_error(a4);
              *(_WORD *)&v68[30] = 1024;
              *(_DWORD *)&v68[32] = a4;
              *(_WORD *)&v68[36] = 2080;
              *(void *)&v68[38] = a5;
              *(_WORD *)&v68[46] = 2082;
              *(void *)&v68[48] = v18;
              *(_WORD *)&v68[56] = 2082;
              *(void *)&v68[58] = v17;
              *(_WORD *)&v68[66] = 1024;
              int v69 = a7;
              __int16 v25 = "%{public}s [C%{public}s] flags=0x%x ifindex=%u error=%{public}s(%d) hostname=%s addr=%{public}s%{public}s ttl=%d";
              uint64_t v26 = v19;
              uint32_t v27 = 86;
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint32_t v19 = (id)gLogObj;
              if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
              {
LABEL_42:

                goto LABEL_43;
              }
              int v56 = a7;
              int v28 = a2;
              int v29 = *((_DWORD *)v15 + 85);
              *(_DWORD *)buf = 136448514;
              uint32_t v66 = "nw_resolver_host_resolve_callback";
              __int16 v67 = 1024;
              *(_DWORD *)uint64_t v68 = v29;
              a2 = v28;
              *(_WORD *)&v68[4] = 1024;
              *(_DWORD *)&v68[6] = v28;
              *(_WORD *)&v68[10] = 1024;
              *(_DWORD *)&v68[12] = a3;
              *(_WORD *)&v68[16] = 2082;
              *(void *)&v68[18] = nwlog_get_string_for_dns_service_error(a4);
              *(_WORD *)&v68[26] = 1024;
              *(_DWORD *)&v68[28] = a4;
              *(_WORD *)&v68[32] = 2080;
              *(void *)&v68[34] = a5;
              *(_WORD *)&v68[42] = 2082;
              *(void *)&v68[44] = v18;
              *(_WORD *)&v68[52] = 2082;
              *(void *)&v68[54] = v17;
              *(_WORD *)&v68[62] = 1024;
              *(_DWORD *)&v68[64] = v56;
              __int16 v25 = "%{public}s [R%u] flags=0x%x ifindex=%u error=%{public}s(%d) hostname=%s addr=%{public}s%{public}s ttl=%d";
              uint64_t v26 = v19;
              uint32_t v27 = 82;
            }
            _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_INFO, v25, buf, v27);
            goto LABEL_42;
          }
          uint64_t v17 = "INADDR_ANY";
LABEL_17:
          uint64_t v18 = "";
          if ((*((unsigned char *)v15 + 346) & 0x20) != 0) {
            goto LABEL_43;
          }
          goto LABEL_27;
        }
LABEL_16:
        uint64_t v17 = "<NULL>";
        goto LABEL_17;
      }
      if (!*(_DWORD *)&a6->sa_data[6]
        && !*(_DWORD *)&a6->sa_data[10]
        && !*(_DWORD *)&a6[1].sa_len
        && !*(_DWORD *)&a6[1].sa_data[2])
      {
        uint64_t v17 = "IN6ADDR_ANY";
        goto LABEL_17;
      }
      uint64_t v17 = (const char *)&v70;
      __nwlog_salted_hash(&a6->sa_data[6], 16, (char *)&v70);
      uint64_t v18 = "IPv6#";
      if ((*((unsigned char *)v15 + 346) & 0x20) == 0) {
        goto LABEL_27;
      }
    }
    else if ((*((unsigned char *)v15 + 346) & 0x20) == 0)
    {
      if (*((unsigned char *)v15 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint32_t v19 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          string_for_dns_service_error = nwlog_get_string_for_dns_service_error(a4);
          if (a6) {
            int sa_len = a6->sa_len;
          }
          else {
            int sa_len = 0;
          }
          *(_DWORD *)buf = 136448514;
          uint32_t v66 = "nw_resolver_host_resolve_callback";
          __int16 v67 = 2082;
          *(void *)uint64_t v68 = v15 + 32;
          *(_WORD *)&v68[8] = 1024;
          *(_DWORD *)&v68[10] = a2;
          *(_WORD *)&v68[14] = 1024;
          *(_DWORD *)&v68[16] = a3;
          *(_WORD *)&v68[20] = 2082;
          *(void *)&v68[22] = string_for_dns_service_error;
          *(_WORD *)&v68[30] = 1024;
          *(_DWORD *)&v68[32] = a4;
          *(_WORD *)&v68[36] = 2082;
          *(void *)&v68[38] = a5;
          *(_WORD *)&v68[46] = 1040;
          *(_DWORD *)&v68[48] = sa_len;
          *(_WORD *)&v68[52] = 2098;
          *(void *)&v68[54] = a6;
          *(_WORD *)&v68[62] = 1024;
          *(_DWORD *)&v68[64] = a7;
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] flags=0x%x ifindex=%u error=%{public}s(%d) hostname=%{public}s addr=%{public,network:sockaddr}.*P ttl=%d", buf, 0x52u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint32_t v19 = (id)gLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          int v22 = *((_DWORD *)v15 + 85);
          int v23 = nwlog_get_string_for_dns_service_error(a4);
          if (a6) {
            int v24 = a6->sa_len;
          }
          else {
            int v24 = 0;
          }
          *(_DWORD *)buf = 136448514;
          uint32_t v66 = "nw_resolver_host_resolve_callback";
          __int16 v67 = 1024;
          *(_DWORD *)uint64_t v68 = v22;
          *(_WORD *)&v68[4] = 1024;
          *(_DWORD *)&v68[6] = a2;
          *(_WORD *)&v68[10] = 1024;
          *(_DWORD *)&v68[12] = a3;
          *(_WORD *)&v68[16] = 2082;
          *(void *)&v68[18] = v23;
          *(_WORD *)&v68[26] = 1024;
          *(_DWORD *)&v68[28] = a4;
          *(_WORD *)&v68[32] = 2082;
          *(void *)&v68[34] = a5;
          *(_WORD *)&v68[42] = 1040;
          *(_DWORD *)&v68[44] = v24;
          *(_WORD *)&v68[48] = 2098;
          *(void *)&v68[50] = a6;
          *(_WORD *)&v68[58] = 1024;
          *(_DWORD *)&v68[60] = a7;
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_INFO, "%{public}s [R%u] flags=0x%x ifindex=%u error=%{public}s(%d) hostname=%{public}s addr=%{public,network:sockaddr}.*P ttl=%d", buf, 0x4Eu);
        }
      }
      goto LABEL_42;
    }
LABEL_43:
    os_unfair_lock_lock((os_unfair_lock_t)v15 + 3);
    if (!a1 || v15[9] != a1)
    {
      if ((*((unsigned char *)v15 + 346) & 0x20) != 0)
      {
LABEL_55:
        os_unfair_lock_unlock((os_unfair_lock_t)v15 + 3);
        goto LABEL_56;
      }
      if (*((unsigned char *)v15 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint32_t v30 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
          goto LABEL_54;
        }
        int v31 = v15[9];
        *(_DWORD *)buf = 136447234;
        uint32_t v66 = "nw_resolver_host_resolve_callback";
        __int16 v67 = 2082;
        *(void *)uint64_t v68 = v15 + 32;
        *(_WORD *)&v68[8] = 2048;
        *(void *)&v68[10] = a1;
        *(_WORD *)&v68[18] = 2048;
        *(void *)&v68[20] = v15;
        *(_WORD *)&v68[28] = 2048;
        *(void *)&v68[30] = v31;
        uint64_t v32 = "%{public}s [C%{public}s] skipped, service %p, resolver %p -> %p";
        os_log_type_t v33 = v30;
        uint32_t v34 = 52;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint32_t v30 = (id)gLogObj;
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
LABEL_54:

          goto LABEL_55;
        }
        int v35 = *((_DWORD *)v15 + 85);
        char v36 = v15[9];
        *(_DWORD *)buf = 136447234;
        uint32_t v66 = "nw_resolver_host_resolve_callback";
        __int16 v67 = 1024;
        *(_DWORD *)uint64_t v68 = v35;
        *(_WORD *)&v68[4] = 2048;
        *(void *)&v68[6] = a1;
        *(_WORD *)&v68[14] = 2048;
        *(void *)&v68[16] = v15;
        *(_WORD *)&v68[24] = 2048;
        *(void *)&v68[26] = v36;
        uint64_t v32 = "%{public}s [R%u] skipped, service %p, resolver %p -> %p";
        os_log_type_t v33 = v30;
        uint32_t v34 = 48;
      }
      _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_INFO, v32, buf, v34);
      goto LABEL_54;
    }
    nw_resolver_update_flags_locked((NWConcrete_nw_resolver *)v15, 0, a2, a4, a6, 0, 0);
    if (a4)
    {
      if (a4 == -65569 && *((_DWORD *)v15 + 2) != 2)
      {
        if ((*((unsigned char *)v15 + 346) & 0x20) != 0)
        {
LABEL_79:
          nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v15);
          goto LABEL_55;
        }
        if (*((unsigned char *)v15 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint32_t v37 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v37, OS_LOG_TYPE_INFO)) {
            goto LABEL_78;
          }
          *(_DWORD *)buf = 136446722;
          uint32_t v66 = "nw_resolver_host_resolve_callback";
          __int16 v67 = 2082;
          *(void *)uint64_t v68 = v15 + 32;
          *(_WORD *)&v68[8] = 2048;
          *(void *)&v68[10] = v15;
          int v38 = "%{public}s [C%{public}s] restarting resolver %p, defunct connection";
          uint64_t v39 = v37;
          uint32_t v40 = 32;
        }
        else
        {
          uint32_t v37 = __nwlog_obj();
          if (!os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
LABEL_78:

            goto LABEL_79;
          }
          int v44 = *((_DWORD *)v15 + 85);
          *(_DWORD *)buf = 136446722;
          uint32_t v66 = "nw_resolver_host_resolve_callback";
          __int16 v67 = 1024;
          *(_DWORD *)uint64_t v68 = v44;
          *(_WORD *)&v68[4] = 2048;
          *(void *)&v68[6] = v15;
          int v38 = "%{public}s [R%u] restarting resolver %p, defunct connection";
          uint64_t v39 = v37;
          uint32_t v40 = 28;
        }
        _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_INFO, v38, buf, v40);
        goto LABEL_78;
      }
    }
    else if (a6)
    {
      size_t v41 = a6->sa_len;
      if (v41 <= 0x80)
      {
        int v42 = a6->sa_family;
        if (v42 == 30 || v42 == 2)
        {
          if ((v41 & 0x80u) == 0) {
            size_t v43 = 128 - v41;
          }
          else {
            size_t v43 = 0;
          }
          bzero(&buf[v41], v43);
          memcpy(buf, a6, v41);
          *(_WORD *)&buf[2] = __rev16(nw_endpoint_get_port((nw_endpoint_t)v15[3]));
          if ((a2 & 2) != 0)
          {
            nw_endpoint_t address = nw_endpoint_create_address((const sockaddr *)buf);
            nw_endpoint_set_parent_endpoint(address, v15[3], 0);
            size_t v70 = 0;
            ValidationData = (const void *)DNSServiceGetValidationData();
            if (ValidationData && v70) {
              nw_endpoint_set_signature(address, ValidationData, v70);
            }
            if (!a3
              || (id v47 = nw_endpoint_get_address(address), !nw_resolver_should_scope_address(v47))
              || nw_resolver_set_interface_on_endpoint(v15, a3, address))
            {
              v61[0] = MEMORY[0x1E4F143A8];
              v61[1] = 3221225472;
              v61[2] = ___ZL33nw_resolver_host_resolve_callbackP16_DNSServiceRef_tjjiPKcPK8sockaddrjPv_block_invoke;
              v61[3] = &__block_descriptor_45_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
              v61[4] = buf;
              unsigned int v62 = a3;
              char v63 = (a2 & 2) >> 1;
              nw_resolver_insert_endpoint_locked(v15, address, v61);
            }
          }
          else
          {
            v58[0] = MEMORY[0x1E4F143A8];
            v58[1] = 3221225472;
            v58[2] = ___ZL33nw_resolver_host_resolve_callbackP16_DNSServiceRef_tjjiPKcPK8sockaddrjPv_block_invoke_2;
            v58[3] = &__block_descriptor_45_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
            v58[4] = buf;
            unsigned int v59 = a3;
            char v60 = 0;
            nw_resolver_remove_endpoint_locked(v15, v58);
          }
        }
      }
    }
    if ((a2 & 1) == 0) {
      nw_resolver_update_status_locked(v15, 0);
    }
    goto LABEL_55;
  }
  int v48 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint32_t v66 = "nw_resolver_host_resolve_callback";
  uint32_t v49 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v70) = 16;
  char v64 = 0;
  if (__nwlog_fault(v49, &v70, &v64))
  {
    if (v70 == 17)
    {
      size_t v50 = __nwlog_obj();
      os_log_type_t v51 = v70;
      if (os_log_type_enabled(v50, (os_log_type_t)v70))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v66 = "nw_resolver_host_resolve_callback";
        _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v64)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v50 = __nwlog_obj();
      os_log_type_t v53 = v70;
      BOOL v54 = os_log_type_enabled(v50, (os_log_type_t)v70);
      if (backtrace_string)
      {
        if (v54)
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v66 = "nw_resolver_host_resolve_callback";
          __int16 v67 = 2082;
          *(void *)uint64_t v68 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v50, v53, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_107;
      }
      if (v54)
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v66 = "nw_resolver_host_resolve_callback";
        _os_log_impl(&dword_1830D4000, v50, v53, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      size_t v50 = __nwlog_obj();
      os_log_type_t v55 = v70;
      if (os_log_type_enabled(v50, (os_log_type_t)v70))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v66 = "nw_resolver_host_resolve_callback";
        _os_log_impl(&dword_1830D4000, v50, v55, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_107:
  if (v49) {
    free(v49);
  }
LABEL_56:
}

void sub_1836930F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_resolver_host_resolve_callbackP16_DNSServiceRef_tjjiPKcPK8sockaddrjPv_block_invoke(uint64_t a1, void *a2)
{
  return nw_endpoint_address_endpoint_matches_address(a2, *(unsigned __int8 **)(a1 + 32), *(_DWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 44));
}

uint64_t ___ZL33nw_resolver_host_resolve_callbackP16_DNSServiceRef_tjjiPKcPK8sockaddrjPv_block_invoke_2(uint64_t a1, void *a2)
{
  return nw_endpoint_address_endpoint_matches_address(a2, *(unsigned __int8 **)(a1 + 32), *(_DWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 44));
}

BOOL ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  if (nw_endpoint_get_type(v4) == nw_endpoint_type_address && nw_endpoint_get_address_family(v4) == 2)
  {
    int v5 = *(void **)(*(void *)(a1 + 32) + 200);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_2;
    v10[3] = &unk_1E523B330;
    uint64_t v6 = v4;
    uint64_t v7 = *(void *)(a1 + 40);
    int v11 = v6;
    uint64_t v12 = v7;
    nw_path_enumerate_resolver_configs(v5, v10);
  }
  BOOL v8 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 0;

  return v8;
}

void sub_18369323C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_200(id *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained && v3 && v3[3] - v3[2] == 8)
  {
    uint64_t v5 = nw_array_get_object_at_index((uint64_t)v3, 0);
    uint64_t v6 = (atomic_uchar *)v5;
    if (!v5) {
      goto LABEL_20;
    }
    uint64_t v7 = *(void *)(v5 + 24) - *(void *)(v5 + 16);
    if (!v7) {
      goto LABEL_20;
    }
    uint64_t v8 = v7 >> 3;
    int v9 = (os_unfair_lock_s *)a1[4];
    if (v9)
    {
      if ((v9[86]._os_unfair_lock_opaque & 0x200000) != 0)
      {
LABEL_19:
        os_unfair_lock_lock(v9 + 3);
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 3221225472;
        v16[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_201;
        v16[3] = &unk_1E5247FB8;
        id v17 = a1[4];
        id v18 = a1[5];
        nw_array_apply(v6, (uint64_t)v16);
        nw_resolver_check_svcb_complete((NWConcrete_nw_resolver *)a1[4]);
        nw_resolver_update_status_locked(a1[4], 0);
        os_unfair_lock_unlock((os_unfair_lock_t)a1[4] + 3);

LABEL_20:
        goto LABEL_21;
      }
      if (LOBYTE(v9[64]._os_unfair_lock_opaque))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v10 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
          goto LABEL_18;
        }
        uint64_t v11 = (uint64_t)a1[4] + 256;
        *(_DWORD *)buf = 136446722;
        int v20 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        __int16 v21 = 2082;
        *(void *)int v22 = v11;
        *(_WORD *)&v22[8] = 2048;
        *(void *)&v22[10] = v8;
        uint64_t v12 = "%{public}s [C%{public}s] Got %zu expired DNS results from storage cache";
        int v13 = v10;
        uint32_t v14 = 32;
        goto LABEL_17;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v15 = *((_DWORD *)a1[4] + 85);
        *(_DWORD *)buf = 136446722;
        int v20 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        __int16 v21 = 1024;
        *(_DWORD *)int v22 = v15;
        *(_WORD *)&v22[4] = 2048;
        *(void *)&v22[6] = v8;
        uint64_t v12 = "%{public}s [R%u] Got %zu expired DNS results from storage cache";
        int v13 = v10;
        uint32_t v14 = 28;
        goto LABEL_17;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446466;
        int v20 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        __int16 v21 = 2048;
        *(void *)int v22 = v8;
        uint64_t v12 = "%{public}s Got %zu expired DNS results from storage cache";
        int v13 = v10;
        uint32_t v14 = 22;
LABEL_17:
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, v12, buf, v14);
      }
    }
LABEL_18:

    int v9 = (os_unfair_lock_s *)a1[4];
    goto LABEL_19;
  }
LABEL_21:
}

void sub_1836935A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_210(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long uu1 = 0uLL;
  nw_resolver_config_get_identifier(v3, &uu1);
  int v4 = uuid_compare((const unsigned __int8 *)&uu1, (const unsigned __int8 *)(*(void *)(a1 + 32) + 232));
  if (!v4)
  {
    provider_name = (const char *)nw_resolver_config_get_provider_name(v3);
    uint64_t v7 = provider_name;
    if (provider_name)
    {
      uint64_t v8 = *(const char **)(a1 + 40);
      if (v8)
      {
        if (strcmp(provider_name, v8))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v9 = (id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v10 = *(void *)(a1 + 40);
            int v11 = 136446722;
            uint64_t v12 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            __int16 v13 = 2080;
            uint32_t v14 = v7;
            __int16 v15 = 2080;
            uint64_t v16 = v10;
            _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s Provider changed from %s to %s, disabling failover", (uint8_t *)&v11, 0x20u);
          }

          *(unsigned char *)(*(void *)(a1 + 32) + 347) &= ~0x40u;
        }
      }
    }
  }

  return v4 != 0;
}

void sub_18369373C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL25nw_resolver_apply_serviceP22NWConcrete_nw_resolvertbt_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = a3;
  unsigned int priority = nw_endpoint_get_priority(v4);
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)
    && (!priority || *(unsigned __int16 *)(a1 + 56) < priority))
  {
    combined_array = nw_array_create_combined_array(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), *(void **)(a1 + 32));
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = combined_array;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  if (nw_endpoint_get_priority(v4)
    || nw_endpoint_get_type(v4) != nw_endpoint_type_address
    || !*(unsigned char *)(a1 + 58))
  {
    nw_array_append(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v4);
  }

  return 1;
}

void sub_183693824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_update_client_alternative(void *a1, void *a2, void *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    id v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v39 = "nw_resolver_update_client_alternative";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v18, &type, &v36)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint32_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v39 = "nw_resolver_update_client_alternative";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint32_t v19 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v39 = "nw_resolver_update_client_alternative";
          __int16 v40 = 2082;
          size_t v41 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_50:
        if (!v18) {
          goto LABEL_16;
        }
LABEL_51:
        free(v18);
        goto LABEL_16;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v39 = "nw_resolver_update_client_alternative";
        _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint32_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v39 = "nw_resolver_update_client_alternative";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_49:

    goto LABEL_50;
  }
  if (v6)
  {
    uint64_t v8 = _Block_copy(*((const void **)v5 + 21));
    if (*((void *)v5 + 23))
    {
      if (*((void *)v5 + 24))
      {
LABEL_5:
        nw_array_append(*((void *)v5 + 23), v6);
        if (v7) {
          int v9 = v7;
        }
        else {
          int v9 = (void *)MEMORY[0x1E4F14410];
        }
        nw_array_append(*((void *)v5 + 24), v9);
        if (v8)
        {
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 3221225472;
          aBlock[2] = ___ZL37nw_resolver_update_client_alternativeP22NWConcrete_nw_resolverPU25objcproto14OS_nw_endpoint8NSObjectPU36objcproto25OS_nw_protocol_definitionS1__block_invoke;
          aBlock[3] = &unk_1E5249BF8;
          id v10 = v5;
          id v32 = v10;
          id v35 = v8;
          id v33 = v6;
          id v34 = v7;
          int v11 = _Block_copy(aBlock);
          uint64_t v12 = *((void *)v10 + 14);
          if (v12) {
            dispatch_async(v12, v11);
          }
          else {
            nw_queue_context_async(*((void **)v10 + 4), v11);
          }
        }
        goto LABEL_16;
      }
    }
    else
    {
      BOOL v13 = nw_array_create();
      uint32_t v14 = (void *)*((void *)v5 + 23);
      *((void *)v5 + 23) = v13;

      if (*((void *)v5 + 24)) {
        goto LABEL_5;
      }
    }
    BOOL v15 = nw_array_create();
    uint64_t v16 = (void *)*((void *)v5 + 24);
    *((void *)v5 + 24) = v15;

    goto LABEL_5;
  }
  __int16 v21 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v39 = "nw_resolver_update_client_alternative";
  uint64_t v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (!__nwlog_fault(v18, &type, &v36)) {
    goto LABEL_50;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint32_t v19 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_resolver_update_client_alternative";
      _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null endpoint", buf, 0xCu);
    }
    goto LABEL_49;
  }
  if (!v36)
  {
    uint32_t v19 = __nwlog_obj();
    os_log_type_t v30 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_resolver_update_client_alternative";
      _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_49;
  }
  uint64_t v26 = (char *)__nw_create_backtrace_string();
  uint32_t v19 = __nwlog_obj();
  os_log_type_t v27 = type;
  BOOL v28 = os_log_type_enabled(v19, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v39 = "nw_resolver_update_client_alternative";
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_49;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v39 = "nw_resolver_update_client_alternative";
    __int16 v40 = 2082;
    size_t v41 = v26;
    _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v26);
  if (v18) {
    goto LABEL_51;
  }
LABEL_16:
}

void sub_183693E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void ___ZL37nw_resolver_update_client_alternativeP22NWConcrete_nw_resolverPU25objcproto14OS_nw_endpoint8NSObjectPU36objcproto25OS_nw_protocol_definitionS1__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  id v3 = v2 + 3;
  int v4 = v2;
  os_unfair_lock_lock(v3);
  uint64_t v5 = *(void *)&v4[24]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v3);

  if (v5)
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v6();
  }
}

uint64_t ___ZL34nw_resolver_copy_protocol_for_alpnP22NWConcrete_nw_resolverPKc_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F0]
    && (string_ptr = xpc_string_get_string_ptr(v4), !strcmp(string_ptr, *(const char **)(a1 + 40))))
  {
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (id)nw_protocol_copy_quic_stream_definition::quic_definition);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

void sub_183693F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_resolver_copy_protocol_for_alpnP22NWConcrete_nw_resolverPKc_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F0]
    && (string_ptr = xpc_string_get_string_ptr(v4), !strcmp(string_ptr, *(const char **)(a1 + 40))))
  {
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (id)g_tcp_definition);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

void sub_183694048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_201(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_endpoint_t address = nw_endpoint_get_address(v4);
  if (address)
  {
    nw_resolver_update_flags_locked(*(NWConcrete_nw_resolver **)(a1 + 32), *(NWConcrete_nw_resolver_service **)(a1 + 40), -2147483646, 0, address, 0, 0);
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t priority = nw_endpoint_get_priority(v4);
    nw_resolver_insert_address(v6, 0, address, priority, 0);
  }

  return 1;
}

void sub_1836940EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (nw_resolver_config_get_protocol(v3) || nw_resolver_config_get_class(v3))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  else
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_3;
    v7[3] = &unk_1E523B308;
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v8 = v5;
    uint64_t v9 = v6;
    nw_resolver_config_enumerate_name_servers(v3, v7);
  }
  return 1;
}

void sub_1836941C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_3(uint64_t a1, char *hostname)
{
  nw_endpoint_t host = nw_endpoint_create_host(hostname, "0");
  if (nw_endpoint_is_equal(host, *(void **)(a1 + 32), 0)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  BOOL v4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 0;

  return v4;
}

void sub_183694258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_resolver_should_flush_cache_entry(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  uint64_t v9 = a5;
  id v10 = v9;
  BOOL v11 = v8 == v9;
  if (v8 != v9 && v8 && v9)
  {
    xpc_object_t v12 = v8[28];
    xpc_object_t v13 = v9[28];
    if (v12 && v13)
    {
      if (*((_DWORD *)v8 + 87))
      {
        unint64_t v14 = 0;
        while (!uuid_is_null((const unsigned __int8 *)v8[37] + 20 * v14 + 4))
        {
          memset(out, 0, 37);
          uuid_unparse((const unsigned __int8 *)v8[37] + 20 * v14 + 4, out);
          BOOL v15 = xpc_dictionary_get_value(v8[28], out);
          uint64_t v16 = v15;
          if (v15)
          {
            size_t length = 0;
            xpc_dictionary_get_data(v15, "data", &length);
            if (is_config_agent_type_dns())
            {
              if (*((_DWORD *)v10 + 87))
              {
                unint64_t v17 = 0;
                uint64_t v18 = 4;
                while (!uuid_is_null((const unsigned __int8 *)v10[37] + v18))
                {
                  if (!uuid_compare((const unsigned __int8 *)v8[37] + 20 * v14 + 4, (const unsigned __int8 *)v10[37] + v18))
                  {
                    BOOL v19 = *((_DWORD *)v8[37] + 5 * v14) == *((_DWORD *)v10[37] + 5 * v17);

                    if (v19) {
                      goto LABEL_18;
                    }
                    goto LABEL_24;
                  }
                  ++v17;
                  v18 += 20;
                  if (v17 >= *((unsigned int *)v10 + 87)) {
                    break;
                  }
                }
              }

LABEL_24:
              return 1;
            }
          }

LABEL_18:
          ++v14;
          BOOL v11 = 1;
          if (v14 >= *((unsigned int *)v8 + 87)) {
            goto LABEL_26;
          }
        }
      }
      BOOL v11 = 1;
    }
    else
    {
      BOOL v11 = v12 == v13;
    }
  }
LABEL_26:

  if ((v11 & a3) != 1) {
    return !v11;
  }
  if (!*(unsigned char *)(a2 + 24)) {
    return 1;
  }
  os_log_type_t v20 = *(void **)a2;
  *(void *)a2 = 0;

  __int16 v21 = *(void **)(a2 + 8);
  *(void *)(a2 + 8) = 0;

  os_log_type_t v22 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = 0;

  return 0;
}

void sub_1836944D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL32nw_resolver_update_status_lockedP22NWConcrete_nw_resolverU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 346) & 0x20) != 0) {
      return;
    }
    if (*(unsigned char *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO)) {
        goto LABEL_13;
      }
      uint64_t v4 = *(void *)(a1 + 40);
      uint64_t v5 = *(void *)(a1 + 32) + 256;
      int v12 = 136446722;
      xpc_object_t v13 = "nw_resolver_update_status_locked_block_invoke";
      __int16 v14 = 2082;
      *(void *)BOOL v15 = v5;
      *(_WORD *)&v15[8] = 2048;
      *(void *)&v15[10] = v4;
      uint64_t v6 = "%{public}s [C%{public}s] Stored %zu DNS results to storage cache";
      id v7 = v3;
      uint32_t v8 = 32;
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = *(_DWORD *)(*(void *)(a1 + 32) + 340);
      int v12 = 136446722;
      xpc_object_t v13 = "nw_resolver_update_status_locked_block_invoke";
      __int16 v14 = 1024;
      *(_DWORD *)BOOL v15 = v11;
      *(_WORD *)&v15[4] = 2048;
      *(void *)&v15[6] = v10;
      uint64_t v6 = "%{public}s [R%u] Stored %zu DNS results to storage cache";
      id v7 = v3;
      uint32_t v8 = 28;
      goto LABEL_12;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      int v12 = 136446466;
      xpc_object_t v13 = "nw_resolver_update_status_locked_block_invoke";
      __int16 v14 = 2048;
      *(void *)BOOL v15 = v9;
      uint64_t v6 = "%{public}s Stored %zu DNS results to storage cache";
      id v7 = v3;
      uint32_t v8 = 22;
LABEL_12:
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v12, v8);
    }
  }
LABEL_13:
}

BOOL ___ZL41nw_resolver_create_happy_eyeballs_variantP22NWConcrete_nw_resolverPU22objcproto11OS_nw_array8NSObject_block_invoke_184(void *a1, unint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  nw_endpoint_type_t type = nw_endpoint_get_type(v5);
  if (type == nw_endpoint_type_address)
  {
    unint64_t v7 = a1[7];
    if (v7 > a2) {
      goto LABEL_7;
    }
    if (v7 == a2)
    {
      uint64_t v9 = a1[4];
      uint32_t v8 = a1 + 4;
      nw_array_append(v9, *(void **)(*(void *)(v8[2] + 8) + 40));
LABEL_8:
      nw_array_append(*v8, v5);
      goto LABEL_9;
    }
    if (*(NSObject **)(*(void *)(a1[6] + 8) + 40) != v5)
    {
LABEL_7:
      uint32_t v8 = a1 + 4;
      goto LABEL_8;
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
  }
LABEL_9:

  return type == nw_endpoint_type_address;
}

void sub_1836947E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_resolver_create_prefer_connected_variantP22NWConcrete_nw_resolverPU24objcproto13OS_nw_context8NSObjectPU22objcproto11OS_nw_arrayS1__block_invoke_185(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) != v4) {
    nw_array_append(*(void *)(a1 + 32), v4);
  }

  return 1;
}

void ___ZL29nw_resolver_start_query_timerP22NWConcrete_nw_resolver_block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      logging_description = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 24));
      int v13 = 136446466;
      __int16 v14 = "nw_resolver_start_query_timer_block_invoke";
      __int16 v15 = 2082;
      *(void *)uint64_t v16 = logging_description;
      uint64_t v6 = "%{public}s Query fired: did not receive all answers in time for %{public}s";
      unint64_t v7 = v3;
      uint32_t v8 = 22;
LABEL_12:
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v13, v8);
    }
LABEL_13:

    uint64_t v2 = *(void *)(a1 + 32);
    goto LABEL_14;
  }
  if ((*(unsigned char *)(v2 + 346) & 0x20) == 0)
  {
    if (*(unsigned char *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = nw_endpoint_get_logging_description(*(void **)(v4 + 24));
      int v13 = 136446722;
      __int16 v14 = "nw_resolver_start_query_timer_block_invoke";
      __int16 v15 = 2082;
      *(void *)uint64_t v16 = v4 + 256;
      *(_WORD *)&v16[8] = 2082;
      *(void *)&v16[10] = v5;
      uint64_t v6 = "%{public}s [C%{public}s] Query fired: did not receive all answers in time for %{public}s";
      unint64_t v7 = v3;
      uint32_t v8 = 32;
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = *(_DWORD *)(v10 + 340);
      int v12 = nw_endpoint_get_logging_description(*(void **)(v10 + 24));
      int v13 = 136446722;
      __int16 v14 = "nw_resolver_start_query_timer_block_invoke";
      __int16 v15 = 1024;
      *(_DWORD *)uint64_t v16 = v11;
      *(_WORD *)&void v16[4] = 2082;
      *(void *)&v16[6] = v12;
      uint64_t v6 = "%{public}s [R%u] Query fired: did not receive all answers in time for %{public}s";
      unint64_t v7 = v3;
      uint32_t v8 = 28;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_14:
  *(_DWORD *)(v2 + 84) = -65568;
  nw_resolver_update_status_locked(*(void *)(a1 + 32), 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
}

void sub_183694AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_resolver_start_custom_resolver_lockedP22NWConcrete_nw_resolver_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_endpoint_set_parent_endpoint(v4, *(void **)(*(void *)(a1 + 32) + 24), 0);
  nw_resolver_insert_endpoint_locked(*(void **)(a1 + 32), v4, &__block_literal_global_173);

  return 1;
}

uint64_t ___ZL40nw_resolver_start_custom_resolver_lockedP22NWConcrete_nw_resolver_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  return nw_endpoint_is_equal(a2, a3, 0);
}

uint64_t nw_resolver_get_status(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  BOOL v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 3);
    uint64_t os_unfair_lock_opaque = v2[2]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v2 + 3);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_resolver_get_status";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_resolver_get_status";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_resolver_get_status";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_resolver_get_status";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_resolver_get_status";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t os_unfair_lock_opaque = 0;
LABEL_3:

  return os_unfair_lock_opaque;
}

BOOL __nw_resolver_get_resolution_provider_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long uu1 = 0uLL;
  nw_resolver_config_get_identifier(v3, &uu1);
  int v4 = uuid_compare((const unsigned __int8 *)&uu1, (const unsigned __int8 *)(*(void *)(a1 + 32) + 232));
  if (v4) {
    goto LABEL_6;
  }
  provider_description = (const char *)nw_resolver_config_get_provider_description(v3);
  if (!provider_description)
  {
    provider_description = (const char *)nw_resolver_config_get_provider_name(v3);
    if (!provider_description) {
      goto LABEL_6;
    }
  }
  uint64_t v6 = strdup(provider_description);
  if (v6)
  {
LABEL_5:
    **(void **)(a1 + 40) = v6;
LABEL_6:

    return v4 != 0;
  }
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  int v11 = 136446210;
  os_log_type_t v12 = "strict_strdup";
  uint64_t v9 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_183694F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_inject_dns_service_error(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    uint64_t v5 = (void *)v3[4];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_inject_dns_service_error_block_invoke;
    v14[3] = &unk_1E524A070;
    __int16 v15 = v3;
    int v16 = a2;
    nw_queue_context_async_if_needed(v5, v14);

    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v20 = "nw_resolver_inject_dns_service_error";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_resolver_inject_dns_service_error";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v20 = "nw_resolver_inject_dns_service_error";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_resolver_inject_dns_service_error";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_resolver_inject_dns_service_error";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183695270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_inject_dns_service_error_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 64))
  {
    id v3 = *(_DNSServiceRef_t **)(v1 + 72);
    nw_endpoint_type_t type = nw_endpoint_get_type(*(nw_endpoint_t *)(v1 + 24));
    uint64_t v5 = *(void *)(a1 + 32);
    if (type == nw_endpoint_type_host)
    {
      if (v5)
      {
        if ((*(unsigned char *)(v5 + 346) & 0x20) != 0)
        {
LABEL_41:
          nw_resolver_host_resolve_callback(v3, 0, 0, *(_DWORD *)(a1 + 40), 0, 0, 0, (void *)v5);
          return;
        }
        if (*(unsigned char *)(v5 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v6 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
            goto LABEL_40;
          }
          uint64_t v7 = *(void *)(a1 + 32);
          string_for_dns_service_error = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          int v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          __int16 v49 = 2082;
          *(void *)size_t v50 = v7 + 256;
          *(_WORD *)&v50[8] = 2082;
          *(void *)&v50[10] = string_for_dns_service_error;
          os_log_type_t v9 = "%{public}s [C%{public}s] Injecting error %{public}s";
          os_log_type_t v10 = v6;
          uint32_t v11 = 32;
          goto LABEL_39;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = (id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v36 = *(_DWORD *)(*(void *)(a1 + 32) + 340);
          uint32_t v37 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          int v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          __int16 v49 = 1024;
          *(_DWORD *)size_t v50 = v36;
          *(_WORD *)&v50[4] = 2082;
          *(void *)&v50[6] = v37;
          os_log_type_t v9 = "%{public}s [R%u] Injecting error %{public}s";
          os_log_type_t v10 = v6;
          uint32_t v11 = 28;
          goto LABEL_39;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = (id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          BOOL v28 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446466;
          int v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          __int16 v49 = 2082;
          *(void *)size_t v50 = v28;
          os_log_type_t v9 = "%{public}s Injecting error %{public}s";
          os_log_type_t v10 = v6;
          uint32_t v11 = 22;
LABEL_39:
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
        }
      }
LABEL_40:

      uint64_t v5 = *(void *)(a1 + 32);
      goto LABEL_41;
    }
    nw_endpoint_type_t v12 = nw_endpoint_get_type(*(nw_endpoint_t *)(v5 + 24));
    uint64_t v13 = *(void *)(a1 + 32);
    if (v12 == nw_endpoint_type_bonjour_service)
    {
      if (v13)
      {
        if ((*(unsigned char *)(v13 + 346) & 0x20) != 0)
        {
LABEL_48:
          nw_resolver_bonjour_resolve_callback(v3, 0, 0, *(_DWORD *)(a1 + 40), "", "", 0, 0, 0, (void *)v13);
          return;
        }
        if (*(unsigned char *)(v13 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          __int16 v14 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
            goto LABEL_47;
          }
          uint64_t v15 = *(void *)(a1 + 32);
          int v16 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          int v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          __int16 v49 = 2082;
          *(void *)size_t v50 = v15 + 256;
          *(_WORD *)&v50[8] = 2082;
          *(void *)&v50[10] = v16;
          char v17 = "%{public}s [C%{public}s] Injecting error %{public}s";
          uint64_t v18 = v14;
          uint32_t v19 = 32;
          goto LABEL_46;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          int v39 = *(_DWORD *)(*(void *)(a1 + 32) + 340);
          __int16 v40 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          int v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          __int16 v49 = 1024;
          *(_DWORD *)size_t v50 = v39;
          *(_WORD *)&v50[4] = 2082;
          *(void *)&v50[6] = v40;
          char v17 = "%{public}s [R%u] Injecting error %{public}s";
          uint64_t v18 = v14;
          uint32_t v19 = 28;
          goto LABEL_46;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          int v38 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446466;
          int v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          __int16 v49 = 2082;
          *(void *)size_t v50 = v38;
          char v17 = "%{public}s Injecting error %{public}s";
          uint64_t v18 = v14;
          uint32_t v19 = 22;
LABEL_46:
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_INFO, v17, buf, v19);
        }
      }
LABEL_47:

      uint64_t v13 = *(void *)(a1 + 32);
      goto LABEL_48;
    }
    if (nw_endpoint_get_type(*(nw_endpoint_t *)(v13 + 24)) == nw_endpoint_type_address
      && nw_parameters_get_resolve_ptr(*(void **)(*(void *)(a1 + 32) + 16)))
    {
      __int16 v21 = *(unsigned char **)(a1 + 32);
      if (v21)
      {
        if ((v21[346] & 0x20) != 0)
        {
LABEL_62:
          nw_resolver_ptr_resolve_callback(v3, 0, 0, *(_DWORD *)(a1 + 40), v20, 0, 0, 0, 0, 0, v21);
          return;
        }
        if (v21[256])
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v22 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO)) {
            goto LABEL_61;
          }
          uint64_t v23 = *(void *)(a1 + 32);
          os_log_type_t v24 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          int v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          __int16 v49 = 2082;
          *(void *)size_t v50 = v23 + 256;
          *(_WORD *)&v50[8] = 2082;
          *(void *)&v50[10] = v24;
          BOOL v25 = "%{public}s [C%{public}s] Injecting error %{public}s";
          uint64_t v26 = v22;
          uint32_t v27 = 32;
          goto LABEL_60;
        }
        os_log_type_t v22 = __nwlog_obj();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          int v45 = *(_DWORD *)(*(void *)(a1 + 32) + 340);
          int v46 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          int v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          __int16 v49 = 1024;
          *(_DWORD *)size_t v50 = v45;
          *(_WORD *)&v50[4] = 2082;
          *(void *)&v50[6] = v46;
          BOOL v25 = "%{public}s [R%u] Injecting error %{public}s";
          uint64_t v26 = v22;
          uint32_t v27 = 28;
          goto LABEL_60;
        }
      }
      else
      {
        os_log_type_t v22 = __nwlog_obj();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          uint64_t v42 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446466;
          int v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          __int16 v49 = 2082;
          *(void *)size_t v50 = v42;
          BOOL v25 = "%{public}s Injecting error %{public}s";
          uint64_t v26 = v22;
          uint32_t v27 = 22;
LABEL_60:
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_INFO, v25, buf, v27);
        }
      }
LABEL_61:

      __int16 v21 = *(unsigned char **)(a1 + 32);
      goto LABEL_62;
    }
    if (nw_endpoint_get_type(*(nw_endpoint_t *)(*(void *)(a1 + 32) + 24)) != (nw_endpoint_type_url|nw_endpoint_type_address)) {
      return;
    }
    os_log_type_t v29 = *(unsigned char **)(a1 + 32);
    if (v29)
    {
      if ((v29[346] & 0x20) != 0)
      {
LABEL_57:
        nw_resolver_srv_resolve_callback(v3, 0, 0, *(_DWORD *)(a1 + 40), 0, 0, 0, 0, 0, 0, v29);
        return;
      }
      if (v29[256])
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v30 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
          goto LABEL_56;
        }
        uint64_t v31 = *(void *)(a1 + 32);
        id v32 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
        *(_DWORD *)buf = 136446722;
        int v48 = "nw_resolver_inject_dns_service_error_block_invoke";
        __int16 v49 = 2082;
        *(void *)size_t v50 = v31 + 256;
        *(_WORD *)&v50[8] = 2082;
        *(void *)&v50[10] = v32;
        id v33 = "%{public}s [C%{public}s] Injecting error %{public}s";
        id v34 = v30;
        uint32_t v35 = 32;
        goto LABEL_55;
      }
      os_log_type_t v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        int v43 = *(_DWORD *)(*(void *)(a1 + 32) + 340);
        int v44 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
        *(_DWORD *)buf = 136446722;
        int v48 = "nw_resolver_inject_dns_service_error_block_invoke";
        __int16 v49 = 1024;
        *(_DWORD *)size_t v50 = v43;
        *(_WORD *)&v50[4] = 2082;
        *(void *)&v50[6] = v44;
        id v33 = "%{public}s [R%u] Injecting error %{public}s";
        id v34 = v30;
        uint32_t v35 = 28;
        goto LABEL_55;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v30 = (id)gLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        size_t v41 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
        *(_DWORD *)buf = 136446466;
        int v48 = "nw_resolver_inject_dns_service_error_block_invoke";
        __int16 v49 = 2082;
        *(void *)size_t v50 = v41;
        id v33 = "%{public}s Injecting error %{public}s";
        id v34 = v30;
        uint32_t v35 = 22;
LABEL_55:
        _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_INFO, v33, buf, v35);
      }
    }
LABEL_56:

    os_log_type_t v29 = *(unsigned char **)(a1 + 32);
    goto LABEL_57;
  }
}

char *netcore_stats_tcp_report_copy_description(uint64_t a1)
{
  uint64_t v23 = 0;
  if (a1)
  {
    uint64_t v2 = netcore_stats_tcp_statistics_report_copy_description((const netcore_stats_tcp_statistics_report *)a1);
    BOOL v25 = 0;
    LODWORD(v3) = *(_DWORD *)(a1 + 1660);
    if (v3)
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      do
      {
        os_log_type_t v24 = 0;
        int v7 = *(_DWORD *)(a1 + v4 + 220);
        if (v7)
        {
          if (v6) {
            os_log_type_t v8 = v6;
          }
          else {
            os_log_type_t v8 = "";
          }
          unsigned int v9 = *(_DWORD *)(a1 + v4 + 216) - 1;
          os_log_type_t v10 = "Unknown";
          if (v9 <= 9) {
            os_log_type_t v10 = off_1E523B658[v9];
          }
          asprintf(&v24, "%s\n\t--- Event '%s' at %u ms since start -- bytes in/out: %llu/%llu", v8, v10, v7, *(void *)(a1 + 8 * v4 + 376), *(void *)(a1 + 8 * v4 + 384));
        }
        if (v6) {
          free(v6);
        }
        uint64_t v6 = v24;
        ++v5;
        unint64_t v3 = *(unsigned int *)(a1 + 1660);
        v4 += 8;
      }
      while (v5 < v3);
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint32_t v11 = "<NULL>";
    if (v6) {
      uint32_t v11 = v6;
    }
    asprintf(&v25, "\n\tFell back:                 %d\n\tPolicy deny reason:        %d\n\tFallback timer:            %u ms\n\tNetwork event count/max:   %u/%d\n\tNetwork events:            %s\n", *(unsigned __int8 *)(a1 + 1672), *(_DWORD *)(a1 + 1656), *(_DWORD *)(a1 + 1668), v3, 20, v11);
    if (v6) {
      free(v6);
    }
    nw_endpoint_type_t v12 = v25;
    LODWORD(v13) = *(_DWORD *)(a1 + 3412);
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 0;
      int v16 = (const netcore_stats_tcp_statistics_report *)(a1 + 1680);
      do
      {
        char v17 = netcore_stats_tcp_statistics_report_copy_description(v16);
        uint64_t v18 = v17;
        BOOL v25 = 0;
        if (v15) {
          uint32_t v19 = v15;
        }
        else {
          uint32_t v19 = "";
        }
        asprintf(&v25, "%s\n\t--- Connection attempt #%u ---\n%s", v19, v14, v17);
        if (v18) {
          free(v18);
        }
        if (v15) {
          free(v15);
        }
        uint64_t v15 = v25;
        ++v14;
        unint64_t v13 = *(unsigned int *)(a1 + 3412);
        ++v16;
      }
      while (v14 < v13);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned int v20 = *(_DWORD *)(a1 + 3408) - 1;
    if (v20 > 4) {
      __int16 v21 = "Unknown";
    }
    else {
      __int16 v21 = off_1E523B6A8[v20];
    }
    asprintf(&v23, "\n\tDelegated:                                  %d\n\tReport reason:                              %s\n\tTCP statistics report:                      %s\n\tTCP cellular fallback statistics report:    %s\n\tConnection attempt count:                   %u\n\tConnection attempts:                        %s\n", *(unsigned __int8 *)(a1 + 3416), v21, v2, v12, v13, v15);
    if (v2) {
      free(v2);
    }
    if (v12) {
      free(v12);
    }
    if (v15) {
      free(v15);
    }
  }
  else
  {
    asprintf(&v23, "<NULL>");
  }
  return v23;
}

char *netcore_stats_tcp_statistics_report_copy_description(const netcore_stats_tcp_statistics_report *a1)
{
  v3[0] = 0;
  if (a1)
  {
    unsigned int v1 = *((unsigned __int16 *)a1 + 104);
    asprintf(v3, "\n\tTime to DNS start:                       %u ms\n\tTime to DNS resolved:                    %u ms\n\tDNS resolved time:                       %u ms\n\tDNS answers cached:                      %d\n\tInterface type:                          %d\n\tTime to TCP start:                       %u ms\n\tTime to TCP establishment:               %u ms\n\tConnection establishment:                %u ms\n\tFlow duration:                           %u ms\n\tConnected interface type:                %d\n\tConnected:                               %d\n\tTraffic class:                           %u\n\tCellular fallback:                       %d\n\tCellular RRC connected:                  %d\n\tKernel reported stalls:                  %d\n\tKernel reported connection stalls:       %d\n\tKernel reported read stalls:             %d\n"
      "\tKernel reported write stalls:            %d\n"
      "\tBytes/Packets in:                        %llu bytes/%llu packets\n"
      "\tBytes/Packets out:                       %llu bytes/%llu packets\n"
      "\tBytes/Packets duplicate:                 %llu bytes/%llu packets\n"
      "\tBytes/Packets ooo:                       %llu bytes/%llu packets\n"
      "\tBytes/Packets retransmitted:             %llu bytes/%llu packets\n"
      "\tCurrent RTT:                             %u ms\n"
      "\tSmoothed RTT:                            %u ms\n"
      "\tBest RTT:                                %u ms\n"
      "\tVariance of RTT:                         %u\n"
      "\tTCP SYN retransmissions:                 %u\n"
      "\tTCP Fast Open:                           %d\n"
      "\tBetter route count:                      %u\n"
      "\tConnection reuse count:                  %u\n"
      "\tApp data stall count:                    %u\n"
      "\tApp data stall timer:                    %u ms\n",
      a1->time_to_dns_start_msecs,
      a1->time_to_dns_resolved_msecs,
      a1->dns_resolved_time_msecs,
      v1 & 1,
      a1->interface_type,
      a1->time_to_connection_start_msecs,
      a1->time_to_connection_establishment_msecs,
      a1->connection_establishment_time_msecs,
      a1->flow_duration_msecs,
      a1->connected_interface_type,
      (v1 >> 1) & 1,
      a1->traffic_class,
      (v1 >> 2) & 1,
      (v1 >> 3) & 1,
      (v1 >> 5) & 1,
      (v1 >> 6) & 1,
      (v1 >> 7) & 1,
      (v1 >> 8) & 1,
      a1->bytes_in,
      a1->packets_in,
      a1->bytes_out);
  }
  else
  {
    asprintf(v3, "<NULL>");
  }
  return v3[0];
}

uint64_t network_config_set_opportunistic_blocked(const char *a1, BOOL a2, void *a3, void *a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  nw_allow_use_of_dispatch_internal();
  if (!a1)
  {
    uint32_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v28, &type, &v53)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null ifname", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (!v53)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_1830D4000, v29, v49, "%{public}s called with null ifname, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_93;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v29 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v41 = os_log_type_enabled(v29, type);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_1830D4000, v29, v40, "%{public}s called with null ifname, no backtrace", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v29, v40, "%{public}s called with null ifname, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_67:

    free(backtrace_string);
    goto LABEL_94;
  }
  if (!v7)
  {
    uint64_t v31 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v28, &type, &v53)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (!v53)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v50 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_1830D4000, v29, v50, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_93;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v29 = __nwlog_obj();
    os_log_type_t v42 = type;
    BOOL v43 = os_log_type_enabled(v29, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (v43)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_67;
  }
  if (v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v10 = "Unb";
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
      *(_WORD *)&unsigned char buf[12] = 2082;
      if (a2) {
        os_log_type_t v10 = "B";
      }
      *(void *)&buf[14] = v10;
      *(_WORD *)&buf[22] = 2082;
      int v56 = a1;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}slocking opportunistic traffic on \"%{public}s\"", buf, 0x20u);
    }

    uint32_t v11 = v7;
    id v12 = v8;
    xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
    unint64_t v14 = v13;
    if (v13)
    {
      xpc_dictionary_set_uint64(v13, (const char *)networkd_privileged_key_type, 2uLL);
      xpc_dictionary_set_BOOL(v14, (const char *)networkd_privileged_key_opportunistic_disable, a2);
      xpc_object_t v15 = xpc_string_create(a1);
      if (v15)
      {
        xpc_dictionary_set_value(v14, (const char *)networkd_privileged_key_opportunistic_ifname, v15);
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __networkd_privileged_set_opportunistic_async_block_invoke_42;
        int v56 = (const char *)&unk_1E523A658;
        id v58 = v12;
        BOOL v59 = a2;
        id v16 = v15;
        id v57 = v16;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_opportunistic_async", v14, v11, buf);

LABEL_31:
        uint64_t v25 = 1;
        goto LABEL_32;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v17 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v53 = 0;
      if (__nwlog_fault(v18, &type, &v53))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint32_t v19 = (id)gLogObj;
          os_log_type_t v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s xpc_string_create failed", buf, 0xCu);
          }
        }
        else if (v53)
        {
          __int16 v21 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint32_t v19 = (id)gLogObj;
          os_log_type_t v22 = type;
          BOOL v23 = os_log_type_enabled(v19, type);
          if (v21)
          {
            if (v23)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v21;
              _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s xpc_string_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v21);
            if (!v18) {
              goto LABEL_30;
            }
            goto LABEL_29;
          }
          if (v23)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
            _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s xpc_string_create failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint32_t v19 = (id)gLogObj;
          os_log_type_t v24 = type;
          if (os_log_type_enabled(v19, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
            _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s xpc_string_create failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v18)
      {
LABEL_30:
        id v16 = 0;
        goto LABEL_31;
      }
LABEL_29:
      free(v18);
      goto LABEL_30;
    }
    uint32_t v35 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
    int v36 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (__nwlog_fault(v36, &type, &v53))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint32_t v37 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v53)
      {
        int v46 = (char *)__nw_create_backtrace_string();
        uint32_t v37 = __nwlog_obj();
        os_log_type_t v47 = type;
        BOOL v48 = os_log_type_enabled(v37, type);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v46;
            _os_log_impl(&dword_1830D4000, v37, v47, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v46);
          goto LABEL_100;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
          _os_log_impl(&dword_1830D4000, v37, v47, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint32_t v37 = __nwlog_obj();
        os_log_type_t v52 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "networkd_privileged_set_opportunistic_async";
          _os_log_impl(&dword_1830D4000, v37, v52, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_100:
    if (v36) {
      free(v36);
    }
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __networkd_privileged_set_opportunistic_async_block_invoke;
    int v56 = (const char *)&unk_1E524AFA8;
    id v57 = v12;
    dispatch_async(v11, buf);
    id v16 = v57;
    goto LABEL_31;
  }
  id v33 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
  BOOL v28 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v53 = 0;
  if (__nwlog_fault(v28, &type, &v53))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null completion", buf, 0xCu);
      }
LABEL_93:

      goto LABEL_94;
    }
    if (!v53)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_1830D4000, v29, v51, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_93;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v29 = __nwlog_obj();
    os_log_type_t v44 = type;
    BOOL v45 = os_log_type_enabled(v29, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_1830D4000, v29, v44, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (v45)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "network_config_set_opportunistic_blocked";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v29, v44, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_67;
  }
LABEL_94:
  if (v28) {
    free(v28);
  }
  uint64_t v25 = 0;
LABEL_32:

  return v25;
}

void sub_183696C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void network_config_set_persistent_interface(const char *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v3 = "NULL";
    if (a1) {
      unint64_t v3 = a1;
    }
    if ((const char *)kNetworkConfigPersistentInterfaceNoGuidance == a1) {
      uint64_t v4 = "NoGuidance";
    }
    else {
      uint64_t v4 = v3;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v10 = "network_config_set_persistent_interface";
    __int16 v11 = 2082;
    id v12 = v4;
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s Setting persistent interface to \"%{public}s\"", buf, 0x16u);
  }

  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v6 = __network_config_set_persistent_interface_block_invoke;
  id v7 = &__block_descriptor_40_e5_v8__0l;
  id v8 = a1;
  {
    nw_persistent_agent_synchronize(void({block_pointer})(void))::persistent_agent_lock = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_persistent_agent_synchronize(void({block_pointer})(void))::persistent_agent_lock);
  v6((uint64_t)v5);
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_persistent_agent_synchronize(void({block_pointer})(void))::persistent_agent_lock);
}

void __network_config_set_persistent_interface_block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)_ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent;
  if (_ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent)
  {
    _ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent = 0;
  }
  unint64_t v3 = *(char **)(a1 + 32);
  if (v3) {
    BOOL v4 = v3 == (char *)kNetworkConfigPersistentInterfaceNoGuidance;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && *v3)
  {
    unint64_t v5 = nw_interface_create_with_name(v3);
    if (v5)
    {
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
      }
      id v6 = (id)nw_context_copy_implicit_context::implicit_context;
      BOOL v7 = nw_context_copy_workloop(v6);
      id v8 = nw_agent_create("Persistent", "Persistent", "Persistent interface guidance", (void *)v7);
      unsigned int v9 = (void *)_ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent;
      _ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent = (uint64_t)v8;

      nw_agent_change_state((void *)_ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent, 1, 0, 0);
      LODWORD(v7) = nw_agent_add_to_interface((void *)_ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent, v5);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (id)gLogObj;
      __int16 v11 = v10;
      if (v7)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          BOOL v23 = "network_config_set_persistent_interface_block_invoke";
          __int16 v24 = 2114;
          uint64_t v25 = v5;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s Added persistent agent to interface %{public}@", buf, 0x16u);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v23 = "network_config_set_persistent_interface_block_invoke";
        __int16 v24 = 2114;
        uint64_t v25 = v5;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s Failed to add persistent agent to %{public}@", buf, 0x16u);
      }

LABEL_18:
      return;
    }
    id v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "network_config_set_persistent_interface_block_invoke";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v13, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unint64_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "network_config_set_persistent_interface_block_invoke";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null interface", buf, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v14 = __nwlog_obj();
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v23 = "network_config_set_persistent_interface_block_invoke";
            __int16 v24 = 2082;
            uint64_t v25 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "network_config_set_persistent_interface_block_invoke";
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unint64_t v14 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "network_config_set_persistent_interface_block_invoke";
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_36:
    if (v13) {
      free(v13);
    }
    goto LABEL_18;
  }
}

void sub_1836972DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL network_config_set_BOOL_setting(const char *a1, BOOL value)
{
  xpc_object_t v3 = xpc_BOOL_create(value);
  BOOL v4 = networkd_privileged_set_settings(a1, v3, 0);

  return v4;
}

void sub_183697348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL network_config_set_int64_setting(const char *a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  BOOL v4 = networkd_privileged_set_settings(a1, v3, 0);

  return v4;
}

void sub_1836973A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL network_config_set_int_sysctl_setting(const char *a1, int a2)
{
  xpc_object_t v3 = xpc_int64_create(a2);
  BOOL v4 = networkd_privileged_set_settings(a1, v3, "sysctl");

  return v4;
}

void sub_1836973FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL network_config_set_BOOL_sysctl_setting(const char *a1, BOOL value)
{
  xpc_object_t v3 = xpc_BOOL_create(value);
  BOOL v4 = networkd_privileged_set_settings(a1, v3, "sysctl");

  return v4;
}

void sub_183697458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL network_config_get_BOOL_setting_with_default(const char *a1, BOOL value)
{
  xpc_object_t v3 = networkd_settings_copy_value_of_type(a1, 0);
  BOOL v4 = v3;
  if (v3 && object_getClass(v3) == (Class)MEMORY[0x1E4F14570]) {
    value = xpc_BOOL_get_value(v4);
  }

  return value;
}

void sub_1836974C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL network_config_get_BOOL_setting(const char *a1)
{
  unsigned int v1 = networkd_settings_copy_value_of_type(a1, 0);
  uint64_t v2 = v1;
  BOOL v3 = v1 && object_getClass(v1) == (Class)MEMORY[0x1E4F14570] && xpc_BOOL_get_value(v2);

  return v3;
}

void sub_183697534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int64_t network_config_get_int64_setting_with_default(const char *a1, int64_t value)
{
  BOOL v3 = networkd_settings_copy_value_of_type(a1, 0);
  BOOL v4 = v3;
  if (v3 && object_getClass(v3) == (Class)MEMORY[0x1E4F145C0]) {
    value = xpc_int64_get_value(v4);
  }

  return value;
}

void sub_1836975A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void network_config_get_string_setting(const char *a1, unsigned char *a2, size_t a3)
{
  unint64_t v5 = networkd_settings_copy_value_of_type(a1, 0);
  bzero(a2, a3);
  if (!v5 || object_getClass(v5) != (Class)MEMORY[0x1E4F145F0])
  {
LABEL_3:

    return;
  }
  string_ptr = xpc_string_get_string_ptr(v5);
  BOOL v7 = string_ptr;
  if (a2)
  {
    if (string_ptr) {
      goto LABEL_6;
    }
  }
  else
  {
    __int16 v11 = __nwlog_obj();
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    id v12 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v12)) {
      goto LABEL_19;
    }
    free(v12);
    if (v7)
    {
LABEL_6:
      if (a3 >= 2) {
        goto LABEL_7;
      }
      goto LABEL_15;
    }
  }
  uint64_t v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  unint64_t v14 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v14))
  {
    free(v14);
    if (a3 >= 2)
    {
LABEL_7:
      uint64_t v8 = 1;
      size_t v9 = a3;
      while (1)
      {
        int v10 = *(unsigned __int8 *)v7;
        *a2 = v10;
        if (!v10) {
          goto LABEL_3;
        }
        ++a2;
        ++v7;
        if (--v9 <= 1) {
          goto LABEL_16;
        }
      }
    }
LABEL_15:
    uint64_t v8 = a3;
LABEL_16:
    if (a3)
    {
      if (v8) {
        *a2 = 0;
      }
    }
    goto LABEL_3;
  }
LABEL_19:
  __break(1u);
}

void sub_1836977D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int64_t network_config_get_int64_setting(const char *a1)
{
  unsigned int v1 = networkd_settings_copy_value_of_type(a1, 0);
  uint64_t v2 = v1;
  if (v1 && object_getClass(v1) == (Class)MEMORY[0x1E4F145C0]) {
    int64_t value = xpc_int64_get_value(v2);
  }
  else {
    int64_t value = 0;
  }

  return value;
}

void sub_18369784C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t network_config_open_kernel_network_advisory_socket()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136446210;
    int v10 = "network_config_open_kernel_network_advisory_socket";
    _os_log_impl(&dword_1830D4000, v0, OS_LOG_TYPE_DEFAULT, "%{public}s Requesting kernel network advisory socket from helper", (uint8_t *)&v9, 0xCu);
  }

  uint64_t kernel_socket_internal = networkd_privileged_get_kernel_socket_internal(0xDuLL);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (id)gLogObj;
  BOOL v3 = v2;
  if ((kernel_socket_internal & 0x80000000) != 0)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136446210;
      int v10 = "network_config_open_kernel_network_advisory_socket";
      BOOL v4 = "%{public}s Failed to open kernel network advisory socket";
      unint64_t v5 = v3;
      os_log_type_t v6 = OS_LOG_TYPE_ERROR;
      uint32_t v7 = 12;
      goto LABEL_8;
    }
  }
  else if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136446466;
    int v10 = "network_config_open_kernel_network_advisory_socket";
    __int16 v11 = 1024;
    int v12 = kernel_socket_internal;
    BOOL v4 = "%{public}s Received kernel network advisory socket fd=%d";
    unint64_t v5 = v3;
    os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
    uint32_t v7 = 18;
LABEL_8:
    _os_log_impl(&dword_1830D4000, v5, v6, v4, (uint8_t *)&v9, v7);
  }

  return kernel_socket_internal;
}

void network_config_check_interface_settings()
{
  nw_allow_use_of_dispatch_internal();
  network_config_check_mobile_asset();

  network_config_run_probes();
}

void network_config_check_mobile_asset()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    unint64_t v14 = "network_config_check_mobile_asset";
    _os_log_impl(&dword_1830D4000, v0, OS_LOG_TYPE_DEFAULT, "%{public}s Checking mobile asset", buf, 0xCu);
  }

  xpc_object_t v1 = xpc_dictionary_create(0, 0, 0);
  uint64_t v2 = v1;
  if (v1)
  {
    xpc_dictionary_set_uint64(v1, (const char *)networkd_privileged_key_type, 0xBuLL);
    if (networkd_privileged_copy_queue(void)::onceToken != -1) {
      dispatch_once(&networkd_privileged_copy_queue(void)::onceToken, &__block_literal_global_56);
    }
    networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_check_mobile_asset", v2, (void *)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue, &__block_literal_global_760);
    goto LABEL_7;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  unint64_t v14 = "networkd_privileged_check_mobile_asset";
  BOOL v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v5 = (id)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v14 = "networkd_privileged_check_mobile_asset";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v5 = (id)gLogObj;
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v14 = "networkd_privileged_check_mobile_asset";
          __int16 v15 = 2082;
          id v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v14 = "networkd_privileged_check_mobile_asset";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v5 = (id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v14 = "networkd_privileged_check_mobile_asset";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v4) {
    free(v4);
  }
LABEL_7:
}

void sub_183697E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void network_config_run_probes()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    unint64_t v14 = "network_config_run_probes";
    _os_log_impl(&dword_1830D4000, v0, OS_LOG_TYPE_DEFAULT, "%{public}s Running network probes", buf, 0xCu);
  }

  xpc_object_t v1 = xpc_dictionary_create(0, 0, 0);
  uint64_t v2 = v1;
  if (v1)
  {
    xpc_dictionary_set_uint64(v1, (const char *)networkd_privileged_key_type, 0x15uLL);
    if (networkd_privileged_copy_queue(void)::onceToken != -1) {
      dispatch_once(&networkd_privileged_copy_queue(void)::onceToken, &__block_literal_global_56);
    }
    networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_run_probes", v2, (void *)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue, &__block_literal_global_40_773);
    goto LABEL_7;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  unint64_t v14 = "networkd_privileged_run_probes";
  BOOL v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v5 = (id)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v14 = "networkd_privileged_run_probes";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v5 = (id)gLogObj;
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v14 = "networkd_privileged_run_probes";
          __int16 v15 = 2082;
          id v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v14 = "networkd_privileged_run_probes";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v5 = (id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v14 = "networkd_privileged_run_probes";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v4) {
    free(v4);
  }
LABEL_7:
}

void sub_183698214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void network_config_set_default_multipath_service_type(int64_t value)
{
  int v1 = value;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (value < 4)
  {
    id v3 = (const char *)nw_setting_multipath_service_type;
    id v4 = xpc_int64_create(value);
    networkd_privileged_set_settings(v3, v4, 0);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v6 = "network_config_set_default_multipath_service_type";
      __int16 v7 = 1024;
      int v8 = v1;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_ERROR, "%{public}s Invalid Multipath Service Type: %d", buf, 0x12u);
    }
  }
}

void sub_183698374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

int64_t network_config_get_default_multipath_service_type()
{
  v0 = networkd_settings_copy_value_of_type((const char *)nw_setting_multipath_service_type, 0);
  int v1 = v0;
  if (v0 && object_getClass(v0) == (Class)MEMORY[0x1E4F145C0]) {
    int64_t value = xpc_int64_get_value(v1);
  }
  else {
    int64_t value = 0;
  }

  return value;
}

void sub_1836983F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void network_config_set_multipath_allow_aggregation(BOOL a1)
{
  id v1 = xpc_BOOL_create(a1);
  networkd_privileged_set_settings("net.inet.mptcp.allow_aggregate", v1, "sysctl");
}

void sub_18369845C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL network_config_get_multipath_allow_aggregation()
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v16 = 0;
  size_t v15 = 4;
  if (sysctlbyname("net.inet.mptcp.allow_aggregate", &v16, &v15, 0, 0)) {
    BOOL v0 = 0;
  }
  else {
    BOOL v0 = v15 == 4;
  }
  if (v0) {
    return v16 != 0;
  }
  int v1 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v2 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  BOOL v18 = "network_config_get_multipath_allow_aggregation";
  __int16 v19 = 2082;
  char v20 = "net.inet.mptcp.allow_aggregate";
  __int16 v21 = 1024;
  int v22 = v1;
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v3, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v4 = (id)gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v18 = "network_config_get_multipath_allow_aggregation";
      __int16 v19 = 2082;
      char v20 = "net.inet.mptcp.allow_aggregate";
      __int16 v21 = 1024;
      int v22 = v1;
      os_log_type_t v6 = "%{public}s Error reading sysctl %{public}s %{darwin.errno}d";
LABEL_20:
      char v11 = v4;
      os_log_type_t v12 = v5;
      goto LABEL_21;
    }
    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v4 = (id)gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v18 = "network_config_get_multipath_allow_aggregation";
      __int16 v19 = 2082;
      char v20 = "net.inet.mptcp.allow_aggregate";
      __int16 v21 = 1024;
      int v22 = v1;
      os_log_type_t v6 = "%{public}s Error reading sysctl %{public}s %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    os_log_type_t v9 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (!v10)
      {
LABEL_22:

        if (!v3) {
          return 0;
        }
        goto LABEL_16;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v18 = "network_config_get_multipath_allow_aggregation";
      __int16 v19 = 2082;
      char v20 = "net.inet.mptcp.allow_aggregate";
      __int16 v21 = 1024;
      int v22 = v1;
      os_log_type_t v6 = "%{public}s Error reading sysctl %{public}s %{darwin.errno}d, no backtrace";
      char v11 = v4;
      os_log_type_t v12 = v9;
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, v12, v6, buf, 0x1Cu);
      goto LABEL_22;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446978;
      BOOL v18 = "network_config_get_multipath_allow_aggregation";
      __int16 v19 = 2082;
      char v20 = "net.inet.mptcp.allow_aggregate";
      __int16 v21 = 1024;
      int v22 = v1;
      __int16 v23 = 2082;
      __int16 v24 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v4, v9, "%{public}s Error reading sysctl %{public}s %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
    }

    free(backtrace_string);
  }
  if (v3) {
LABEL_16:
  }
    free(v3);
  return 0;
}

BOOL network_config_register_quic_log_debug_updates(void *a1)
{
  id v1 = a1;
  nw_allow_use_of_dispatch_internal();
  BOOL v2 = nw_settings_register_quic_log_debug_updates(v1);

  return v2;
}

void network_config_set_interface_constrained(const char *a1, BOOL a2)
{
  nw_allow_use_of_dispatch_internal();

  networkd_privileged_set_constrained(a1, a2);
}

void network_config_set_interface_ultra_constrained(const char *a1, BOOL a2)
{
  nw_allow_use_of_dispatch_internal();

  networkd_privileged_set_ultra_constrained(a1, a2);
}

void network_config_set_interface_expensive(const char *a1, BOOL a2)
{
  nw_allow_use_of_dispatch_internal();

  networkd_privileged_set_expensive(a1, a2);
}

void network_config_set_interface_estimated_throughput(const char *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_allow_use_of_dispatch_internal();
    char v6 = 49 - __clz(a2);
    if (a2 >= 0x10000) {
      char v7 = v6;
    }
    else {
      char v7 = 1;
    }
    if (a2) {
      unsigned __int8 v8 = v7;
    }
    else {
      unsigned __int8 v8 = 0;
    }
    char v9 = 49 - __clz(a3);
    if (a3 >= 0x10000) {
      char v10 = v9;
    }
    else {
      char v10 = 1;
    }
    if (a3) {
      unsigned __int8 v11 = v10;
    }
    else {
      unsigned __int8 v11 = 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = 0x8000 << v11;
      *(_DWORD *)buf = 136448002;
      uint64_t v26 = "network_config_set_interface_estimated_throughput";
      __int16 v27 = 2082;
      if (v11 > 0x30u) {
        uint64_t v13 = -1;
      }
      BOOL v28 = (void *)a1;
      __int16 v29 = 2048;
      uint64_t v14 = 0x8000 << v8;
      if (!v11) {
        uint64_t v13 = 0;
      }
      unint64_t v30 = a2;
      __int16 v31 = 1024;
      if (v8 > 0x30u) {
        uint64_t v14 = -1;
      }
      int v32 = v8;
      if (!v8) {
        uint64_t v14 = 0;
      }
      __int16 v33 = 2048;
      uint64_t v34 = v14;
      __int16 v35 = 2048;
      unint64_t v36 = a3;
      __int16 v37 = 1024;
      int v38 = v11;
      __int16 v39 = 2048;
      uint64_t v40 = v13;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s up: %lluBps -> %u (%lluBps), down: %lluBps -> %u (%lluBps)", buf, 0x4Au);
    }

    networkd_privileged_set_throughput_estimates(a1, v8, v11);
    return;
  }
  size_t v15 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v26 = "network_config_set_interface_estimated_throughput";
  int v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v16, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "network_config_set_interface_estimated_throughput";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null name", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "network_config_set_interface_estimated_throughput";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_42;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "network_config_set_interface_estimated_throughput";
        _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null name, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "network_config_set_interface_estimated_throughput";
        _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null name, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_42:
  if (v16) {
    free(v16);
  }
}

void network_config_set_interface_radio_type(const char *a1, unsigned __int8 a2, unsigned int a3)
{
  nw_allow_use_of_dispatch_internal();

  networkd_privileged_set_radio_type(a1, a2, a3);
}

void network_config_set_l4s_enabled(BOOL a1)
{
  BOOL v2 = (const char *)nw_setting_enable_l4s;
  id v5 = xpc_BOOL_create(a1);
  networkd_privileged_set_settings(v2, v5, 0);

  id v3 = (const char *)nw_setting_enable_accurate_ecn;
  id v6 = xpc_BOOL_create(a1);
  networkd_privileged_set_settings(v3, v6, 0);

  id v4 = (const char *)nw_setting_enable_tcp_l4s;
  id v7 = xpc_BOOL_create(a1);
  networkd_privileged_set_settings(v4, v7, 0);
}

void sub_183698DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t network_config_get_l4s_enabled()
{
  if (network_config_get_quic_l4s_enabled()) {
    return 1;
  }
  uint64_t result = network_config_get_tcp_accurate_ecn_enabled();
  if (result)
  {
    return network_config_get_tcp_l4s_enabled();
  }
  return result;
}

void *nw_endpoint_copy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = (void *)[v1 copyEndpoint];
    nw_endpoint_copy_properties(v2, v3);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_endpoint_copy";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_endpoint_copy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_endpoint_copy";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_endpoint_copy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_endpoint_copy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void sub_1836993B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6444(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6445(uint64_t a1)
{
}

void sub_183699470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1836997D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183699B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183699EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18369A278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18369A39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18369A498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_is_registered(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[231] >> 2) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_endpoint_is_registered";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_endpoint_is_registered";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_endpoint_is_registered";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_endpoint_is_registered";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_endpoint_is_registered";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_endpoint_create_from_dictionary_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F14580])
  {
    id v6 = (void *)MEMORY[0x1E4F1C9B8];
    bytes_ptr = xpc_data_get_bytes_ptr(v4);
    id v5 = [v6 dataWithBytes:bytes_ptr length:xpc_data_get_length(v4)];
    if (v5)
    {
      nw_endpoint_append_public_key(*(void **)(a1 + 32), v5);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136446210;
        BOOL v11 = "nw_endpoint_create_from_dictionary_block_invoke";
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s failed to create NSData for public key", (uint8_t *)&v10, 0xCu);
      }

      id v5 = 0;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136446210;
      BOOL v11 = "nw_endpoint_create_from_dictionary_block_invoke";
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s Invalid key type", (uint8_t *)&v10, 0xCu);
    }
  }

  return 1;
}

void sub_18369A930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_append_public_key(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    id v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_endpoint_append_public_key";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v24 = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v7, &v24, &v23)) {
      goto LABEL_38;
    }
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v24;
      if (os_log_type_enabled(v8, v24))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_endpoint_append_public_key";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = v24;
      BOOL v14 = os_log_type_enabled(v8, v24);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_endpoint_append_public_key";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_endpoint_append_public_key";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = v24;
      if (os_log_type_enabled(v8, v24))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_endpoint_append_public_key";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __nw_endpoint_append_public_key_block_invoke;
    v20[3] = &unk_1E524B9A0;
    BOOL v21 = v3;
    id v22 = v5;
    os_unfair_lock_lock(v3 + 44);
    __nw_endpoint_append_public_key_block_invoke((uint64_t)v20);
    os_unfair_lock_unlock(v3 + 44);

    goto LABEL_4;
  }
  int v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v26 = "nw_endpoint_append_public_key";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v24 = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v7, &v24, &v23)) {
    goto LABEL_38;
  }
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v11 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_endpoint_append_public_key";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null publicKey", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v19 = v24;
    if (os_log_type_enabled(v8, v24))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_endpoint_append_public_key";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null publicKey, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  size_t v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v16 = v24;
  BOOL v17 = os_log_type_enabled(v8, v24);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_endpoint_append_public_key";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null publicKey, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v26 = "nw_endpoint_append_public_key";
    __int16 v27 = 2082;
    BOOL v28 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null publicKey, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

void __nw_endpoint_append_public_key_block_invoke(uint64_t a1)
{
  v40[1] = *MEMORY[0x1E4F143B8];
  BOOL v2 = *(void **)(*(void *)(a1 + 32) + 48);
  if (!v2)
  {
    v40[0] = *(void *)(a1 + 40);
    uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v40 count:1];
    uint64_t v8 = *(void *)(a1 + 32);
    os_log_type_t v9 = *(void **)(v8 + 48);
    *(void *)(v8 + 48) = v7;

    return;
  }
  if ((unint64_t)[v2 count] >= 0x10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v33 = "nw_endpoint_append_public_key_block_invoke";
    id v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v4, &type, &v30)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s Adding key would exceed maximum count", buf, 0xCu);
      }
LABEL_46:

      goto LABEL_47;
    }
    if (!v30)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl(&dword_1830D4000, v5, v26, "%{public}s Adding key would exceed maximum count, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl(&dword_1830D4000, v5, v17, "%{public}s Adding key would exceed maximum count, no backtrace", buf, 0xCu);
      }
      goto LABEL_46;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v33 = "nw_endpoint_append_public_key_block_invoke";
      __int16 v34 = 2082;
      __int16 v35 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v5, v17, "%{public}s Adding key would exceed maximum count, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_30:

    free(backtrace_string);
    if (!v4) {
      return;
    }
LABEL_48:
    free(v4);
    return;
  }
  uint64_t accumulated_size = nw_endpoint_get_accumulated_size(*(void **)(*(void *)(a1 + 32) + 48));
  uint64_t v11 = [*(id *)(a1 + 40) length];
  unint64_t v12 = accumulated_size + v11;
  if (__CFADD__(accumulated_size, v11))
  {
    if (gLogDatapath)
    {
      BOOL v28 = __nwlog_obj();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = [*(id *)(a1 + 40) length];
        *(_DWORD *)buf = 136446978;
        __int16 v33 = "nw_endpoint_append_public_key_block_invoke";
        __int16 v34 = 2082;
        __int16 v35 = "totalSize";
        __int16 v36 = 2048;
        uint64_t v37 = v29;
        __int16 v38 = 2048;
        unint64_t v39 = v12;
        _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
      }
    }
    unint64_t v12 = -1;
    goto LABEL_14;
  }
  if (v12 >= 0x1389)
  {
LABEL_14:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v13 = (id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v33 = "nw_endpoint_append_public_key_block_invoke";
      __int16 v34 = 2048;
      __int16 v35 = (const char *)v12;
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s Accumulated key-size %zu", buf, 0x16u);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v33 = "nw_endpoint_append_public_key_block_invoke";
    id v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v4, &type, &v30))
    {
LABEL_47:
      if (!v4) {
        return;
      }
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl(&dword_1830D4000, v5, v15, "%{public}s Accumulated key-size too large", buf, 0xCu);
      }
      goto LABEL_46;
    }
    if (!v30)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl(&dword_1830D4000, v5, v27, "%{public}s Accumulated key-size too large, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl(&dword_1830D4000, v5, v19, "%{public}s Accumulated key-size too large, no backtrace", buf, 0xCu);
      }
      goto LABEL_46;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v33 = "nw_endpoint_append_public_key_block_invoke";
      __int16 v34 = 2082;
      __int16 v35 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v5, v19, "%{public}s Accumulated key-size too large, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_30;
  }
  uint64_t v22 = *(void *)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 40);
  uint64_t v23 = a1 + 32;
  uint64_t v24 = [*(id *)(v22 + 48) arrayByAddingObject:v21];
  uint64_t v25 = *(void **)(*(void *)v23 + 48);
  *(void *)(*(void *)v23 + 48) = v24;
}

void sub_18369B5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_txt_record(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 23, a2);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_set_txt_record";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_set_txt_record";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_set_txt_record";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_set_txt_record";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_set_txt_record";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

BOOL nw_endpoint_is_custom_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    BOOL v3 = [v1 type] > 0x3E7;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_is_custom_type";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_is_custom_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_is_custom_type";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_is_custom_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_is_custom_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void sub_18369BB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_cname_array(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 15, a2);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_set_cname_array";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_set_cname_array";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_set_cname_array";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_set_cname_array";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_set_cname_array";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

id nw_endpoint_copy_cname_array(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = v1[15];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_copy_cname_array";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_copy_cname_array";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_copy_cname_array";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_copy_cname_array";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_copy_cname_array";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_endpoint_clone_parent_endpoint_properties(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_endpoint_clone_parent_endpoint_properties";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_endpoint_clone_parent_endpoint_properties";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v24 = "nw_endpoint_clone_parent_endpoint_properties";
          __int16 v25 = 2082;
          os_log_type_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_endpoint_clone_parent_endpoint_properties";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_endpoint_clone_parent_endpoint_properties";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    objc_storeStrong(v3 + 14, v4[14]);
    int v6 = *((unsigned char *)v3 + 231) & 0xFD | (2 * ((*((unsigned __int8 *)v5 + 231) >> 1) & 1));
    *((unsigned char *)v3 + 231) = v6;
    *((_WORD *)v3 + 114) = *((_WORD *)v5 + 114);
    *((unsigned char *)v3 + 231) = *((unsigned char *)v5 + 231) & 0x20 | v6 & 0xDF;
    objc_storeStrong(v3 + 24, v5[24]);
    goto LABEL_4;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v24 = "nw_endpoint_clone_parent_endpoint_properties";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_endpoint_clone_parent_endpoint_properties";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null original_endpoint", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_endpoint_clone_parent_endpoint_properties";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null original_endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_endpoint_clone_parent_endpoint_properties";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null original_endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v24 = "nw_endpoint_clone_parent_endpoint_properties";
    __int16 v25 = 2082;
    os_log_type_t v26 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null original_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

void nw_endpoint_set_agent_identifier(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_OWORD *)(v3 + 28) = *a2;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_set_agent_identifier";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_set_agent_identifier";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_set_agent_identifier";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_set_agent_identifier";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_set_agent_identifier";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

id *nw_endpoint_copy_without_proxy_parent(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    BOOL v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_endpoint_copy_without_proxy_parent";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v19, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_endpoint_copy_without_proxy_parent";
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v29 = "nw_endpoint_copy_without_proxy_parent";
            __int16 v30 = 2082;
            __int16 v31 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_endpoint_copy_without_proxy_parent";
          _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_endpoint_copy_without_proxy_parent";
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_28:
    if (v19) {
      free(v19);
    }
    os_log_type_t v16 = 0;
    goto LABEL_11;
  }
  id v3 = v1;
  id v4 = (void *)[v3 copyEndpoint];
  nw_endpoint_copy_properties(v3, v4);

  id v5 = (void *)v4[14];
  v4[14] = 0;

  int v6 = v4;
  uint64_t v7 = (char *)v3;
  os_log_type_t v8 = v7;
  os_log_type_t v9 = (id *)(v7 + 112);
  if (*((void *)v7 + 14))
  {
    os_log_type_t v10 = (id *)(v7 + 112);
    BOOL v11 = v6;
    while ((v8[231] & 2) == 0)
    {
      uint64_t v12 = [*v9 copyEndpoint];
      id v13 = v11[14];
      v11[14] = (id)v12;

      os_log_type_t v14 = *v10;
      BOOL v15 = (id *)v11[14];

      os_log_type_t v10 = (id *)(v14 + 14);
      os_log_type_t v8 = v14;
      BOOL v11 = v15;
      if (!v14[14]) {
        goto LABEL_10;
      }
    }
    BOOL v15 = v11;
  }
  else
  {
    BOOL v15 = v6;
  }
  os_log_type_t v14 = v8;
LABEL_10:
  os_log_type_t v16 = v6;

LABEL_11:
  return v16;
}

void sub_18369CB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_interface(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 2, a2);
    id v5 = v3;
    int v6 = (os_unfair_lock_s *)v5 + 45;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    uint64_t v19 = &unk_1E524BAA8;
    os_log_type_t v20 = v5;
    uint64_t v7 = v5;
    os_unfair_lock_lock(v6);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v6);

    goto LABEL_3;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_set_interface";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_interface";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_interface";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_interface";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_interface";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

void nw_endpoint_clear_description(void *a1)
{
  id v1 = a1;
  BOOL v2 = v1 + 45;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __nw_endpoint_clear_description_block_invoke;
  v4[3] = &unk_1E524BAA8;
  id v5 = v1;
  id v3 = v1;
  os_unfair_lock_lock(v2);
  __nw_endpoint_clear_description_block_invoke((uint64_t)v4);
  os_unfair_lock_unlock(v2);
}

void __nw_endpoint_clear_description_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 231) &= ~8u;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 64);
  if (v3)
  {
    free(v3);
    *(void *)(v2 + 64) = 0;
  }
  id v4 = *(void **)(v2 + 56);
  *(void *)(v2 + 56) = 0;

  *(unsigned char *)(*(void *)(a1 + 32) + 231) &= ~0x10u;
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(v5 + 80);
  if (v6)
  {
    free(v6);
    *(void *)(v5 + 80) = 0;
  }
  uint64_t v7 = *(void **)(v5 + 72);
  *(void *)(v5 + 72) = 0;
}

void nw_endpoint_set_remote_interface_type(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 6) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_endpoint_set_remote_interface_type";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_set_remote_interface_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_endpoint_set_remote_interface_type";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_set_remote_interface_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_set_remote_interface_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_endpoint_get_remote_interface_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[6];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_endpoint_get_remote_interface_type";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_get_remote_interface_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_endpoint_get_remote_interface_type";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_get_remote_interface_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_get_remote_interface_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_endpoint_set_weight(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    [v3 setWeight:a2];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_endpoint_set_weight";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_set_weight";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_endpoint_set_weight";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_set_weight";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_set_weight";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_18369D7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_custom_metadata_for_key(void *a1, const char *a2, const uint8_t *a3, size_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  os_log_type_t v8 = v7;
  if (!v7)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
          __int16 v35 = 2082;
          __int16 v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_60:
        if (!v13) {
          goto LABEL_10;
        }
LABEL_61:
        free(v13);
        goto LABEL_10;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_59:

    goto LABEL_60;
  }
  if (!a2)
  {
    char v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (!v31)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v14, v29, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    os_log_type_t v23 = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
      __int16 v35 = 2082;
      __int16 v36 = v23;
      _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_40;
  }
  if (a3 && !a4)
  {
    uint64_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s called with null metadata_len", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (!v31)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s called with null metadata_len, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    os_log_type_t v23 = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null metadata_len, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v34 = "nw_endpoint_set_custom_metadata_for_key";
      __int16 v35 = 2082;
      __int16 v36 = v23;
      _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null metadata_len, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_40:

    free(v23);
    if (!v13) {
      goto LABEL_10;
    }
    goto LABEL_61;
  }
  os_log_type_t v9 = *((void *)v7 + 23);
  if (!v9)
  {
    dictionary_with_initial_size_t length = nw_txt_record_create_dictionary_with_initial_length(0x100uLL);
    BOOL v11 = (void *)v8[23];
    v8[23] = dictionary_with_initial_length;

    os_log_type_t v9 = v8[23];
    if (a3) {
      goto LABEL_7;
    }
LABEL_9:
    nw_txt_record_remove_key(v9, a2);
    goto LABEL_10;
  }
  if (!a3) {
    goto LABEL_9;
  }
LABEL_7:
  nw_txt_record_set_key(v9, a2, a3, a4);
LABEL_10:
}

void sub_18369DF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_access_custom_metadata_for_key(void *a1, const char *a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a3;
  id v7 = (uint64_t (**)(void, void, void))v6;
  if (!v5)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v35 = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v12, &v35, &v34)) {
      goto LABEL_61;
    }
    if (v35 == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = v35;
      if (os_log_type_enabled(v13, v35))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (!v34)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v28 = v35;
      if (os_log_type_enabled(v13, v35))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v13 = __nwlog_obj();
    os_log_type_t v20 = v35;
    BOOL v21 = os_log_type_enabled(v13, v35);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
      __int16 v38 = 2082;
      unint64_t v39 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_33;
  }
  if (!a2)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v35 = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v12, &v35, &v34)) {
      goto LABEL_61;
    }
    if (v35 == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v16 = v35;
      if (os_log_type_enabled(v13, v35))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (!v34)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v29 = v35;
      if (os_log_type_enabled(v13, v35))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v13, v29, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v13 = __nwlog_obj();
    os_log_type_t v22 = v35;
    BOOL v23 = os_log_type_enabled(v13, v35);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
      __int16 v38 = 2082;
      unint64_t v39 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_33:

    free(backtrace_string);
    if (!v12) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (!v6)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v35 = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v12, &v35, &v34)) {
      goto LABEL_61;
    }
    if (v35 == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = v35;
      if (os_log_type_enabled(v13, v35))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null access_block", buf, 0xCu);
      }
    }
    else if (v34)
    {
      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v25 = v35;
      BOOL v26 = os_log_type_enabled(v13, v35);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
          __int16 v38 = 2082;
          unint64_t v39 = v24;
          _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null access_block, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
LABEL_61:
        if (!v12)
        {
LABEL_63:
          uint64_t v9 = 0;
          goto LABEL_8;
        }
LABEL_62:
        free(v12);
        goto LABEL_63;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v30 = v35;
      if (os_log_type_enabled(v13, v35))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v13, v30, "%{public}s called with null access_block, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_60:

    goto LABEL_61;
  }
  os_log_type_t v8 = v5[23];
  if (v8)
  {
    access_value[0] = MEMORY[0x1E4F143A8];
    access_value[1] = 3221225472;
    access_value[2] = __nw_endpoint_access_custom_metadata_for_key_block_invoke;
    access_value[3] = &unk_1E523B700;
    __int16 v33 = a2;
    id v32 = v6;
    uint64_t v9 = nw_txt_record_access_key(v8, a2, access_value);
  }
  else
  {
    if (gLogDatapath)
    {
      BOOL v27 = __nwlog_obj();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s endpoint has no custom metadata, returning NULL", buf, 0xCu);
      }
    }
    uint64_t v9 = v7[2](v7, 0, 0);
  }
LABEL_8:

  return v9;
}

void sub_18369E6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_access_custom_metadata_for_key_block_invoke(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a3 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      int v17 = 136446722;
      os_log_type_t v18 = "nw_endpoint_access_custom_metadata_for_key_block_invoke";
      __int16 v19 = 2080;
      uint64_t v20 = v15;
      __int16 v21 = 1024;
      LODWORD(v22) = a3;
      os_log_type_t v10 = "%{public}s did not find %s in custom metadata: %u";
      BOOL v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_INFO;
      uint32_t v13 = 28;
      goto LABEL_7;
    }
LABEL_8:

    return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a4, a5, a4);
  }
  if (gLogDatapath)
  {
    os_log_type_t v8 = __nwlog_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      int v17 = 136446722;
      os_log_type_t v18 = "nw_endpoint_access_custom_metadata_for_key_block_invoke";
      __int16 v19 = 2048;
      uint64_t v20 = a5;
      __int16 v21 = 2080;
      uint64_t v22 = v9;
      os_log_type_t v10 = "%{public}s found value of %zu bytes for key %s in custom metadata";
      BOOL v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_DEBUG;
      uint32_t v13 = 32;
LABEL_7:
      _os_log_impl(&dword_1830D4000, v11, v12, v10, (uint8_t *)&v17, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a4, a5, a4);
}

void nw_endpoint_set_signature(void *a1, const void *a2, size_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  if (!v5)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "nw_endpoint_set_signature";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "nw_endpoint_set_signature";
          __int16 v31 = 2082;
          id v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_1830D4000, v10, v24, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!a2)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "nw_endpoint_set_signature";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null signature", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s called with null signature, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    __int16 v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null signature, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v30 = "nw_endpoint_set_signature";
      __int16 v31 = 2082;
      id v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null signature, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a3)
  {
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "nw_endpoint_set_signature";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null signature_length", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_1830D4000, v10, v26, "%{public}s called with null signature_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    __int16 v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null signature_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v30 = "nw_endpoint_set_signature";
      __int16 v31 = 2082;
      id v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null signature_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  xpc_object_t v6 = xpc_data_create(a2, a3);
  id v7 = (void *)v5[24];
  v5[24] = v6;

LABEL_5:
}

void sub_18369EF60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_ech_config(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    [v3 setEchConfig:v4];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_set_ech_config";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_set_ech_config";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_set_ech_config";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_set_ech_config";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_set_ech_config";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_18369F218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_copy_ech_config(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = [v1 echConfig];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_copy_ech_config";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_copy_ech_config";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_copy_ech_config";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_copy_ech_config";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_copy_ech_config";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void sub_18369F4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_do_not_redact(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *((unsigned char *)v1 + 231) |= 0x20u;
    goto LABEL_3;
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v14 = "nw_endpoint_set_do_not_redact";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_endpoint_set_do_not_redact";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v14 = "nw_endpoint_set_do_not_redact";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_endpoint_set_do_not_redact";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_endpoint_set_do_not_redact";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
LABEL_3:
}

void nw_endpoint_set_known_tracker_name(void *a1, const char *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_endpoint_set_known_tracker_name";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v19 = "nw_endpoint_set_known_tracker_name";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v19 = "nw_endpoint_set_known_tracker_name";
            __int16 v20 = 2082;
            BOOL v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v19 = "nw_endpoint_set_known_tracker_name";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v19 = "nw_endpoint_set_known_tracker_name";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_25:
    if (v7) {
      free(v7);
    }
    goto LABEL_6;
  }
  if (!a2 || v3[11]) {
    goto LABEL_6;
  }
  uint64_t v5 = strdup(a2);
  if (v5)
  {
LABEL_5:
    v4[11] = v5;
LABEL_6:

    return;
  }
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "strict_strdup";
  char v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t nw_endpoint_get_known_tracker_name(uint64_t result)
{
  if (result) {
    return *(void *)(result + 88);
  }
  return result;
}

void nw_endpoint_set_tracker_owner(void *a1, const char *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_endpoint_set_tracker_owner";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v19 = "nw_endpoint_set_tracker_owner";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v19 = "nw_endpoint_set_tracker_owner";
            __int16 v20 = 2082;
            BOOL v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v19 = "nw_endpoint_set_tracker_owner";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v19 = "nw_endpoint_set_tracker_owner";
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_25:
    if (v7) {
      free(v7);
    }
    goto LABEL_6;
  }
  if (!a2 || v3[12]) {
    goto LABEL_6;
  }
  uint64_t v5 = strdup(a2);
  if (v5)
  {
LABEL_5:
    v4[12] = v5;
LABEL_6:

    return;
  }
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "strict_strdup";
  char v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t nw_endpoint_get_tracker_owner(uint64_t result)
{
  if (result) {
    return *(void *)(result + 96);
  }
  return result;
}

BOOL nw_endpoint_hostname_matches_tracker(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = (const char **)v1;
  if (!v1)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v31 = "nw_endpoint_hostname_matches_tracker";
    char v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v16, &type, &v28)) {
      goto LABEL_51;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v31 = "nw_endpoint_hostname_matches_tracker";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_50;
    }
    if (!v28)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v31 = "nw_endpoint_hostname_matches_tracker";
        _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v17 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v31 = "nw_endpoint_hostname_matches_tracker";
        _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_50;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v31 = "nw_endpoint_hostname_matches_tracker";
      __int16 v32 = 2082;
      uint64_t v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (!v1[11])
  {
    uint64_t v19 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v31 = "nw_endpoint_hostname_matches_tracker";
    char v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v16, &type, &v28)) {
      goto LABEL_51;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v31 = "nw_endpoint_hostname_matches_tracker";
        _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null endpoint->known_tracker_name", buf, 0xCu);
      }
LABEL_50:

LABEL_51:
      if (v16) {
        free(v16);
      }
      goto LABEL_16;
    }
    if (!v28)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v31 = "nw_endpoint_hostname_matches_tracker";
        _os_log_impl(&dword_1830D4000, v17, v27, "%{public}s called with null endpoint->known_tracker_name, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v17 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v31 = "nw_endpoint_hostname_matches_tracker";
        _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null endpoint->known_tracker_name, no backtrace", buf, 0xCu);
      }
      goto LABEL_50;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v31 = "nw_endpoint_hostname_matches_tracker";
      __int16 v32 = 2082;
      uint64_t v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null endpoint->known_tracker_name, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(backtrace_string);
    goto LABEL_51;
  }
  uint64_t v3 = v1;
  do
  {
    id v4 = v3;
    int v5 = [v4 type];

    if (v5 == 2)
    {
      os_log_type_t v6 = v4;
      id v7 = (const char *)[v6 hostname];
    }
    else
    {
      id v7 = 0;
    }
    uint64_t v3 = v4[14];
  }
  while (!v7 && v3);

  if (!v7) {
    goto LABEL_16;
  }
  size_t v8 = strlen(v2[11]);
  size_t v9 = strlen(v7);
  if (v9)
  {
    size_t v10 = v9 - 1;
    if (v7[v9 - 1] != 46) {
      size_t v10 = v9;
    }
    BOOL v11 = v10 >= v8;
    uint64_t v12 = v10 - v8;
    if (!v11) {
      goto LABEL_16;
    }
LABEL_17:
    BOOL v13 = strncmp(&v7[v12], v2[11], v8) == 0;
    goto LABEL_18;
  }
  uint64_t v12 = -(uint64_t)v8;
  if (!v8) {
    goto LABEL_17;
  }
LABEL_16:
  BOOL v13 = 0;
LABEL_18:

  return v13;
}

void sub_1836A0380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_is_approved_app_domain(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 64;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 231) = *((unsigned char *)v3 + 231) & 0xBF | v5;
    goto LABEL_6;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_endpoint_set_is_approved_app_domain";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_endpoint_set_is_approved_app_domain";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_endpoint_set_is_approved_app_domain";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_endpoint_set_is_approved_app_domain";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      size_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_endpoint_set_is_approved_app_domain";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void nw_endpoint_set_can_block_request(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 0x80;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 231) = v5 & 0x80 | *((unsigned char *)v3 + 231) & 0x7F;
    goto LABEL_6;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_endpoint_set_can_block_request";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_endpoint_set_can_block_request";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_endpoint_set_can_block_request";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_endpoint_set_can_block_request";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      size_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_endpoint_set_can_block_request";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

BOOL nw_endpoint_get_can_block_request(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = v1[231] < 0;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_endpoint_get_can_block_request";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_get_can_block_request";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_endpoint_get_can_block_request";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_get_can_block_request";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_endpoint_get_can_block_request";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void nw_endpoint_add_edge(void *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  char v5 = v4;
  if (!v3)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_endpoint_add_edge";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v8, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_endpoint_add_edge";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null endpoint", buf, 0xCu);
        }
        goto LABEL_21;
      }
      if (!v29)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_endpoint_add_edge";
          _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_endpoint_add_edge";
          _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_21;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v32 = "nw_endpoint_add_edge";
        __int16 v33 = 2082;
        uint64_t v34 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    goto LABEL_22;
  }
  if (!v4)
  {
    __int16 v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_endpoint_add_edge";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v8, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_endpoint_add_edge";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null edge", buf, 0xCu);
        }
        goto LABEL_21;
      }
      if (!v29)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_endpoint_add_edge";
          _os_log_impl(&dword_1830D4000, v9, v25, "%{public}s called with null edge, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_21;
      }
      BOOL v11 = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v9, type);
      if (!v11)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_endpoint_add_edge";
          _os_log_impl(&dword_1830D4000, v9, v22, "%{public}s called with null edge, no backtrace", buf, 0xCu);
        }
        goto LABEL_21;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v32 = "nw_endpoint_add_edge";
        __int16 v33 = 2082;
        uint64_t v34 = v11;
        _os_log_impl(&dword_1830D4000, v9, v22, "%{public}s called with null edge, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_14;
    }
LABEL_22:
    if (!v8) {
      goto LABEL_24;
    }
LABEL_23:
    free(v8);
    goto LABEL_24;
  }
  nw_endpoint_edge_get_endpoint(v4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  if (v6 == v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_endpoint_add_edge";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v8, &type, &v29)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_endpoint_add_edge";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s endpoints cannot add edges to themselves", buf, 0xCu);
      }
LABEL_21:

      goto LABEL_22;
    }
    if (!v29)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_endpoint_add_edge";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s endpoints cannot add edges to themselves, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_21;
    }
    BOOL v11 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    os_log_type_t v12 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (!v11)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_endpoint_add_edge";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s endpoints cannot add edges to themselves, no backtrace", buf, 0xCu);
      }
      goto LABEL_21;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v32 = "nw_endpoint_add_edge";
      __int16 v33 = 2082;
      uint64_t v34 = v11;
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s endpoints cannot add edges to themselves, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_14:

    free(v11);
    if (!v8) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = __nw_endpoint_add_edge_block_invoke;
  v26[3] = &unk_1E524B9A0;
  id v27 = v3;
  id v28 = v5;
  nw_endpoint_locked(v27, v26);

LABEL_24:
}

void sub_1836A1338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_endpoint_add_edge_block_invoke(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[27]
    || (BOOL v3 = nw_array_create(),
        uint64_t v4 = *(void *)(a1 + 32),
        char v5 = *(void **)(v4 + 216),
        *(void *)(v4 + 216) = v3,
        v5,
        uint64_t v2 = *(void **)(a1 + 32),
        v2[27]))
  {
    id v6 = *(void **)(a1 + 40);
    id v7 = v2;
    id v8 = v6;
    if (v8)
    {
      os_log_type_t v9 = v8;
      *(void *)uint64_t v41 = 0;
      os_log_type_t v42 = v41;
      uint64_t v43 = 0x2020000000;
      char v44 = 0;
      os_log_type_t v10 = (atomic_uchar *)v2[27];
      if (v10)
      {
        *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
        uint64_t v36 = 3221225472;
        uint64_t v37 = ___ZL27nw_endpoint_has_edge_lockedP22NWConcrete_nw_endpointPU30objcproto19OS_nw_endpoint_edge8NSObject_block_invoke;
        __int16 v38 = &unk_1E524A2E8;
        id v39 = v8;
        uint64_t v40 = v41;
        nw_array_apply(v10, (uint64_t)type);
      }
      if (gLogDatapath)
      {
        id v27 = __nwlog_obj();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          logging_description = nw_endpoint_get_logging_description(v7);
          uint64_t v29 = v2[27];
          if (*((unsigned char *)v42 + 24)) {
            os_log_type_t v30 = "already has";
          }
          else {
            os_log_type_t v30 = "does not already have";
          }
          *(_DWORD *)buf = 136447234;
          os_log_type_t v47 = "nw_endpoint_has_edge_locked";
          __int16 v48 = 2080;
          os_log_type_t v49 = (void *)logging_description;
          __int16 v50 = 2112;
          uint64_t v51 = v29;
          __int16 v52 = 2080;
          char v53 = v30;
          __int16 v54 = 2112;
          os_log_type_t v55 = v9;
          _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s endpoint %s edges %@ %s edge %@", buf, 0x34u);
        }
      }
      BOOL v11 = *((unsigned char *)v42 + 24) == 0;
      _Block_object_dispose(v41, 8);

      if (!v11)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          BOOL v13 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
          uint64_t v14 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 136446722;
          os_log_type_t v47 = "nw_endpoint_add_edge_block_invoke";
          __int16 v48 = 2080;
          os_log_type_t v49 = (void *)v13;
          __int16 v50 = 2112;
          uint64_t v51 = v14;
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s endpoint %s not adding already present edge %@", buf, 0x20u);
        }

        return;
      }
LABEL_55:
      nw_array_append(*(void *)(*(void *)(a1 + 32) + 216), *(void **)(a1 + 40));
      return;
    }
    BOOL v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "nw_endpoint_has_edge_locked";
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

    v41[0] = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (__nwlog_fault(v24, v41, &v45))
    {
      if (v41[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v26 = v41[0];
        if (os_log_type_enabled(v25, v41[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_endpoint_has_edge_locked";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null edge", buf, 0xCu);
        }
      }
      else if (v45)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v32 = v41[0];
        BOOL v33 = os_log_type_enabled(v25, v41[0]);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v47 = "nw_endpoint_has_edge_locked";
            __int16 v48 = 2082;
            os_log_type_t v49 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v25, v32, "%{public}s called with null edge, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_52;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_endpoint_has_edge_locked";
          _os_log_impl(&dword_1830D4000, v25, v32, "%{public}s called with null edge, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v34 = v41[0];
        if (os_log_type_enabled(v25, v41[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_endpoint_has_edge_locked";
          _os_log_impl(&dword_1830D4000, v25, v34, "%{public}s called with null edge, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_52:
    if (v24) {
      free(v24);
    }

    goto LABEL_55;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v15 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v47 = "nw_endpoint_add_edge_block_invoke";
  os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v41[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v16, type, v41)) {
    goto LABEL_16;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v17 = (id)gLogObj;
    os_log_type_t v18 = type[0];
    if (os_log_type_enabled(v17, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v47 = "nw_endpoint_add_edge_block_invoke";
      _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s nw_array_create failed", buf, 0xCu);
    }
LABEL_15:

LABEL_16:
    if (!v16) {
      return;
    }
    goto LABEL_17;
  }
  if (v41[0] == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v17 = (id)gLogObj;
    os_log_type_t v22 = type[0];
    if (os_log_type_enabled(v17, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v47 = "nw_endpoint_add_edge_block_invoke";
      _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s nw_array_create failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_15;
  }
  uint64_t v19 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v17 = (id)gLogObj;
  os_log_type_t v20 = type[0];
  BOOL v21 = os_log_type_enabled(v17, type[0]);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v47 = "nw_endpoint_add_edge_block_invoke";
      _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s nw_array_create failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_15;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v47 = "nw_endpoint_add_edge_block_invoke";
    __int16 v48 = 2082;
    os_log_type_t v49 = v19;
    _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s nw_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v16) {
LABEL_17:
  }
    free(v16);
}

void sub_1836A1AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_endpoint_has_edge_lockedP22NWConcrete_nw_endpointPU30objcproto19OS_nw_endpoint_edge8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = (id *)*(id *)(a1 + 32);
  id v6 = a3;
  id v7 = (id *)v6;
  if (v5) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {

    if (v5 == v7) {
      goto LABEL_25;
    }
    return 1;
  }
  BOOL v13 = v5[1] == (id)v6[1] && v5[2] == (id)v6[2] && v5[3] == (id)v6[3] && v5[4] == (id)v6[4] && v5[5] == (id)v6[5];
  if (!v13
    || (id WeakRetained = objc_loadWeakRetained(v5 + 6),
        id v15 = objc_loadWeakRetained(v7 + 6),
        v15,
        WeakRetained,
        WeakRetained != v15))
  {

    return 1;
  }
  char v16 = *((unsigned char *)v7 + 64) ^ *((unsigned char *)v5 + 64);

  if (v16) {
    return 1;
  }
LABEL_25:
  uint64_t result = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

uint64_t __nw_endpoint_enumerate_edges_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  char v5 = a3;
  id v6 = v5;
  if (v5)
  {
    id v7 = v5 + 1;
    goto LABEL_3;
  }
  BOOL v23 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v39 = "nw_endpoint_edge_get_identifier";
  os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (__nwlog_fault(v24, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        id v39 = "nw_endpoint_edge_get_identifier";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null edge", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v32 = type;
      BOOL v33 = os_log_type_enabled(v25, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          id v39 = "nw_endpoint_edge_get_identifier";
          __int16 v40 = 2082;
          uint64_t v41 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v25, v32, "%{public}s called with null edge, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        id v39 = "nw_endpoint_edge_get_identifier";
        _os_log_impl(&dword_1830D4000, v25, v32, "%{public}s called with null edge, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        id v39 = "nw_endpoint_edge_get_identifier";
        _os_log_impl(&dword_1830D4000, v25, v34, "%{public}s called with null edge, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_53:
  if (v24) {
    free(v24);
  }
  id v7 = 0;
LABEL_3:

  if (gLogDatapath)
  {
    id v27 = __nwlog_obj();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      logging_description = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446722;
      id v39 = "nw_endpoint_enumerate_edges_block_invoke_2";
      __int16 v40 = 2080;
      uint64_t v41 = (void *)logging_description;
      __int16 v42 = 2112;
      uint64_t v43 = v6;
      _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %s considering edge %@", buf, 0x20u);
    }
  }
  BOOL v8 = *(uint64_t **)(a1 + 48);
  if (!v8)
  {
    if (!gLogDatapath) {
      goto LABEL_24;
    }
    uint64_t v19 = __nwlog_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v20 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446722;
      id v39 = "nw_endpoint_enumerate_edges_block_invoke";
      __int16 v40 = 2080;
      uint64_t v41 = (void *)v20;
      __int16 v42 = 2112;
      uint64_t v43 = v6;
      BOOL v21 = "%{public}s %s no identifier specified for edge %@, calling enumerator";
LABEL_48:
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, v21, buf, 0x20u);
    }
LABEL_49:

    goto LABEL_24;
  }
  if (!v7) {
    goto LABEL_19;
  }
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = v8[2];
  uint64_t v12 = v8[3];
  uint64_t v13 = v8[4];
  BOOL v14 = v9 == *v7 && v10 == v7[1];
  BOOL v15 = v14 && v11 == v7[2];
  BOOL v16 = v15 && v12 == v7[3];
  if (!v16 || v13 != v7[4])
  {
LABEL_19:
    uint64_t v18 = 1;
    goto LABEL_25;
  }
  if (gLogDatapath)
  {
    uint64_t v19 = __nwlog_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446722;
      id v39 = "nw_endpoint_enumerate_edges_block_invoke";
      __int16 v40 = 2080;
      uint64_t v41 = (void *)v35;
      __int16 v42 = 2112;
      uint64_t v43 = v6;
      BOOL v21 = "%{public}s %s identifier matches for edge %@, calling enumerator";
      goto LABEL_48;
    }
    goto LABEL_49;
  }
LABEL_24:
  uint64_t v18 = (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2);
LABEL_25:
  if (gLogDatapath)
  {
    uint64_t v29 = __nwlog_obj();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v30 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446978;
      id v39 = "nw_endpoint_enumerate_edges_block_invoke";
      __int16 v40 = 2080;
      uint64_t v41 = (void *)v30;
      __int16 v42 = 2112;
      uint64_t v43 = v6;
      __int16 v44 = 1024;
      int v45 = v18;
      _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %s continuing after edge %@: %u", buf, 0x26u);
    }
  }
  return v18;
}

void sub_1836A2110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_add_edges_for_instance(void *a1, atomic_uchar *a2, int a3)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (!v5)
  {
    __int16 v50 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_add_edges_for_instance";
    uint64_t v51 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v106 = 0;
    if (!__nwlog_fault(v51, type, &v106)) {
      goto LABEL_104;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v52 = __nwlog_obj();
      os_log_type_t v53 = type[0];
      if (os_log_type_enabled(v52, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_add_edges_for_instance";
        _os_log_impl(&dword_1830D4000, v52, v53, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v106)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v52 = __nwlog_obj();
      os_log_type_t v63 = type[0];
      BOOL v64 = os_log_type_enabled(v52, type[0]);
      if (backtrace_string)
      {
        if (v64)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_add_edges_for_instance";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v52, v63, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_104:
        if (!v51) {
          goto LABEL_55;
        }
LABEL_105:
        free(v51);
        goto LABEL_55;
      }
      if (v64)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_add_edges_for_instance";
        _os_log_impl(&dword_1830D4000, v52, v63, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v52 = __nwlog_obj();
      os_log_type_t v71 = type[0];
      if (os_log_type_enabled(v52, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_add_edges_for_instance";
        _os_log_impl(&dword_1830D4000, v52, v71, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_103:

    goto LABEL_104;
  }
  id v7 = (long long *)*((void *)a2 + 2);
  if (v7)
  {
    id v8 = nw_endpoint_copy_registrar_for_identifier(v5, v7, 0);
    if (!v8)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        logging_description = nw_endpoint_get_logging_description(v6);
        BOOL v21 = (atomic_uchar *)*((void *)a2 + 2);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_endpoint_add_edges_for_instance";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = logging_description;
        *(_WORD *)&buf[22] = 2080;
        unsigned int v108 = v21;
        *(_WORD *)DNSServiceFlags v109 = 2048;
        *(void *)&v109[2] = v21;
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s %s failed to find registrar, cannot add edges for %s identifier %p", buf, 0x2Au);
      }

      goto LABEL_54;
    }
    if (gLogDatapath)
    {
      uint64_t v56 = __nwlog_obj();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        id v57 = (atomic_uchar *)*((void *)a2 + 2);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_endpoint_add_edges_for_instance";
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v8;
        *(_WORD *)&buf[22] = 2080;
        unsigned int v108 = v57;
        *(_WORD *)DNSServiceFlags v109 = 2048;
        *(void *)&v109[2] = v57;
        _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEBUG, "%{public}s got registrar %@, adding edges for %s identifier %p", buf, 0x2Au);
      }
    }
    id v9 = v8;
    id v10 = v6;
    if (*((void *)a2 + 2))
    {
      uint64_t v11 = *((void *)a2 + 3);
      if (!v11) {
        goto LABEL_18;
      }
      uint64_t v12 = *(void (**)(atomic_uchar *))(v11 + 136);
      if (!v12) {
        goto LABEL_18;
      }
      uint64_t v13 = v12(a2);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *((void *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2048;
        unsigned int v108 = a2;
        *(_WORD *)DNSServiceFlags v109 = 2080;
        *(void *)&v109[2] = v15;
        *(_WORD *)&v109[10] = 2112;
        *(void *)&v109[12] = v13;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s has endpoint %@, adding edges", buf, 0x34u);
      }

      if (!v13)
      {
LABEL_18:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = (id)gLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v22 = *((void *)a2 + 2);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          unsigned int v108 = a2;
          *(_WORD *)DNSServiceFlags v109 = 2080;
          *(void *)&v109[2] = v22;
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s does not have endpoint, cannot add edges", buf, 0x2Au);
        }
        goto LABEL_52;
      }
      BOOL v16 = v13;
      BOOL v17 = (HIBYTE(v16[28].isa) & 4) == 0;

      if (v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v16;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s endpoint %@ is not registered, cannot add edges", buf, 0x16u);
        }

        goto LABEL_52;
      }
      uint64_t v23 = *((void *)a2 + 3);
      if (!v23) {
        goto LABEL_37;
      }
      os_log_type_t v24 = *(void (**)(atomic_uchar *))(v23 + 112);
      if (!v24) {
        goto LABEL_37;
      }
      uint64_t v25 = v24(a2);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v26 = (id)gLogObj;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v27 = *((void *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2048;
        unsigned int v108 = a2;
        *(_WORD *)DNSServiceFlags v109 = 2080;
        *(void *)&v109[2] = v27;
        *(_WORD *)&v109[10] = 2112;
        *(void *)&v109[12] = v25;
        _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s has parameters %@, adding edges", buf, 0x34u);
      }
      uint64_t v99 = v25;

      if (!v25)
      {
LABEL_37:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v44 = (id)gLogObj;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v45 = *((void *)a2 + 2);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          unsigned int v108 = a2;
          *(_WORD *)DNSServiceFlags v109 = 2080;
          *(void *)&v109[2] = v45;
          _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s does not have parameters, cannot add edges", buf, 0x2Au);
        }
        goto LABEL_51;
      }
      id v98 = v9;
      unsigned int v97 = v16;
      if (a3)
      {
        if (a3 == 1)
        {
          id v28 = v98;
          *(void *)os_log_type_t type = 0;
          uint64_t v101 = (uint64_t)type;
          uint64_t v102 = 0x3032000000;
          unsigned int v103 = __Block_byref_object_copy__3858;
          size_t v104 = __Block_byref_object_dispose__3859;
          id v105 = 0;
          uint64_t v29 = *((void *)a2 + 4);
          if (v29 && (uint64_t v30 = *(void *)(v29 + 24)) != 0 && (v31 = *(uint64_t (**)(void))(v30 + 224)) != 0)
          {
            os_log_type_t v32 = (atomic_uchar *)v31();
            if (gLogDatapath)
            {
              os_log_type_t v74 = __nwlog_obj();
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_copy_tls_metadata_for_protocol";
                *(_WORD *)&unsigned char buf[12] = 2112;
                *(void *)&buf[14] = v28;
                *(_WORD *)&buf[22] = 2112;
                unsigned int v108 = v32;
                *(_WORD *)DNSServiceFlags v109 = 2048;
                *(void *)&v109[2] = a2;
                _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %@ got back metadata array %@ for protocol %p", buf, 0x2Au);
              }
            }
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3221225472;
            *(void *)&buf[16] = ___ZL61nw_protocol_instance_registrar_copy_tls_metadata_for_protocolP41NWConcrete_nw_protocol_instance_registrarP11nw_protocol_block_invoke;
            unsigned int v108 = (atomic_uchar *)&unk_1E5249D20;
            *(void *)DNSServiceFlags v109 = v28;
            *(void *)&v109[8] = type;
            *(void *)&v109[16] = a2;
            nw_array_apply(v32, (uint64_t)buf);

            BOOL v33 = *(NSObject **)v109;
          }
          else
          {
            if (!gLogDatapath)
            {
              os_log_type_t v34 = 0;
LABEL_33:
              id v95 = v34;
              _Block_object_dispose(type, 8);

              if (!v95)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v49 = (id)gLogObj;
                if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_copy_adjacent_endpoints_for_instance";
                  *(_WORD *)&unsigned char buf[12] = 2112;
                  *(void *)&buf[14] = v28;
                  _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %@ there are no adjacent endpoints because TLS is not in the stack", buf, 0x16u);
                }

                object = 0;
                uint64_t v43 = 0;
LABEL_45:

                if (v43 && *(void *)(v43 + 24) != *(void *)(v43 + 16))
                {
                  if (*((void *)a2 + 2))
                  {
                    if (gLogDatapath)
                    {
                      unsigned int v79 = __nwlog_obj();
                      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v80 = *((void *)a2 + 2);
                        *(_DWORD *)buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
                        *(_WORD *)&unsigned char buf[12] = 2112;
                        *(void *)&buf[14] = v98;
                        *(_WORD *)&buf[22] = 2048;
                        unsigned int v108 = a2;
                        *(_WORD *)DNSServiceFlags v109 = 2080;
                        *(void *)&v109[2] = v80;
                        *(_WORD *)&v109[10] = 2112;
                        *(void *)&v109[12] = v43;
                        _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p (%s) has adjacent endpoints %@", buf, 0x34u);
                      }
                    }
                    *(void *)buf = MEMORY[0x1E4F143A8];
                    *(void *)&buf[8] = 3221225472;
                    *(void *)&buf[16] = __nw_protocol_instance_registrar_add_edges_for_instance_block_invoke;
                    unsigned int v108 = (atomic_uchar *)&unk_1E52424A8;
                    *(void *)DNSServiceFlags v109 = v98;
                    v110 = a2;
                    *(void *)&v109[8] = v10;
                    *(void *)&v109[16] = v99;
                    nw_array_apply((atomic_uchar *)v43, (uint64_t)buf);

                    goto LABEL_50;
                  }
                  __int16 v75 = __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
                  os_log_type_t v76 = (char *)_os_log_send_and_compose_impl();

                  type[0] = OS_LOG_TYPE_ERROR;
                  char v106 = 0;
                  if (__nwlog_fault(v76, type, &v106))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      BOOL v77 = __nwlog_obj();
                      os_log_type_t v78 = type[0];
                      if (os_log_type_enabled(v77, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
                        _os_log_impl(&dword_1830D4000, v77, v78, "%{public}s called with null protocol->identifier", buf, 0xCu);
                      }
                    }
                    else if (v106)
                    {
                      unsigned int v85 = (char *)__nw_create_backtrace_string();
                      BOOL v77 = __nwlog_obj();
                      os_log_type_t v86 = type[0];
                      BOOL v87 = os_log_type_enabled(v77, type[0]);
                      if (v85)
                      {
                        if (v87)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v85;
                          _os_log_impl(&dword_1830D4000, v77, v86, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v85);
                        goto LABEL_149;
                      }
                      if (v87)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
                        _os_log_impl(&dword_1830D4000, v77, v86, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
                      }
                    }
                    else
                    {
                      BOOL v77 = __nwlog_obj();
                      os_log_type_t v91 = type[0];
                      if (os_log_type_enabled(v77, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
                        _os_log_impl(&dword_1830D4000, v77, v91, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
                      }
                    }
                  }
LABEL_149:
                  if (v76) {
                    free(v76);
                  }
                }
LABEL_50:

                __int16 v44 = v99;
LABEL_51:

LABEL_52:
LABEL_53:

LABEL_54:
                goto LABEL_55;
              }
              uint64_t v35 = v97;
              unsigned int v36 = [v35 port];

              id v37 = v28;
              object = v95;
              unsigned int v94 = v37;
              if (nw_protocol_metadata_is_tls(object))
              {
                BOOL v38 = nw_array_create();
                id v39 = object;
                *(void *)buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = ___ZL62nw_protocol_instance_registrar_copy_san_list_from_tls_metadataP41NWConcrete_nw_protocol_instance_registrarP11nw_protocolPU34objcproto23OS_nw_protocol_metadata8NSObjectt_block_invoke;
                unsigned int v108 = (atomic_uchar *)&unk_1E523B068;
                *(void *)DNSServiceFlags v109 = v37;
                v110 = a2;
                __int16 v40 = v39;
                *(void *)&v109[8] = v40;
                __int16 v111 = __rev16(v36);
                uint64_t v41 = (atomic_uchar *)(id)v38;
                *(void *)&v109[16] = v41;
                sec_protocol_metadata_access_peer_certificate_chain(v40, buf);
                BOOL v42 = nw_array_create();
                *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
                uint64_t v101 = 3221225472;
                uint64_t v102 = (uint64_t)___ZL62nw_protocol_instance_registrar_copy_san_list_from_tls_metadataP41NWConcrete_nw_protocol_instance_registrarP11nw_protocolPU34objcproto23OS_nw_protocol_metadata8NSObjectt_block_invoke_73;
                unsigned int v103 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E524AE18;
                uint64_t v43 = (uint64_t)(id)v42;
                size_t v104 = (void (*)(uint64_t))v43;
                nw_array_apply(v41, (uint64_t)type);

LABEL_36:
                goto LABEL_45;
              }
              uint64_t v81 = __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata";
              unsigned int v82 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              char v106 = 0;
              if (__nwlog_fault(v82, type, &v106))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  size_t v83 = __nwlog_obj();
                  os_log_type_t v84 = type[0];
                  if (os_log_type_enabled(v83, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata";
                    _os_log_impl(&dword_1830D4000, v83, v84, "%{public}s provided metadata is not tls", buf, 0xCu);
                  }
                }
                else if (v106)
                {
                  unsigned int v88 = (char *)__nw_create_backtrace_string();
                  size_t v83 = __nwlog_obj();
                  os_log_type_t v89 = type[0];
                  BOOL v90 = os_log_type_enabled(v83, type[0]);
                  if (v88)
                  {
                    if (v90)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v88;
                      _os_log_impl(&dword_1830D4000, v83, v89, "%{public}s provided metadata is not tls, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(v88);
                    goto LABEL_154;
                  }
                  if (v90)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata";
                    _os_log_impl(&dword_1830D4000, v83, v89, "%{public}s provided metadata is not tls, no backtrace", buf, 0xCu);
                  }
                }
                else
                {
                  size_t v83 = __nwlog_obj();
                  os_log_type_t v92 = type[0];
                  if (os_log_type_enabled(v83, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata";
                    _os_log_impl(&dword_1830D4000, v83, v92, "%{public}s provided metadata is not tls, backtrace limit exceeded", buf, 0xCu);
                  }
                }
              }
LABEL_154:
              if (v82) {
                free(v82);
              }
              uint64_t v43 = 0;
              goto LABEL_36;
            }
            BOOL v33 = __nwlog_obj();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v93 = *((void *)a2 + 4);
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_copy_tls_metadata_for_protocol";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v93;
              _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s output handler %p does not have valid copy_info callback, cannot get TLS metadata", buf, 0x16u);
            }
          }

          os_log_type_t v34 = *(void **)(v101 + 40);
          goto LABEL_33;
        }
      }
      else
      {
        registered_endpoint = (id *)nw_protocol_instance_registrar_copy_next_registered_endpoint(v97, 0);
        if (registered_endpoint)
        {
          uint64_t v43 = nw_array_create();
          id v47 = registered_endpoint[1];
          __int16 v48 = nw_endpoint_copy_without_proxy_parent(registered_endpoint);

          object = nw_context_copy_registered_endpoint_internal(v47, v48, 0);
          nw_array_append(v43, object);

          goto LABEL_45;
        }
      }

      uint64_t v43 = 0;
      goto LABEL_50;
    }
    id v58 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
    BOOL v59 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v106 = 0;
    if (__nwlog_fault(v59, type, &v106))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v60 = __nwlog_obj();
        os_log_type_t v61 = type[0];
        if (os_log_type_enabled(v60, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          _os_log_impl(&dword_1830D4000, v60, v61, "%{public}s called with null protocol->identifier", buf, 0xCu);
        }
      }
      else if (v106)
      {
        uint64_t v68 = (char *)__nw_create_backtrace_string();
        uint64_t v60 = __nwlog_obj();
        os_log_type_t v69 = type[0];
        BOOL v70 = os_log_type_enabled(v60, type[0]);
        if (v68)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v68;
            _os_log_impl(&dword_1830D4000, v60, v69, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v68);
          goto LABEL_112;
        }
        if (v70)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          _os_log_impl(&dword_1830D4000, v60, v69, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v60 = __nwlog_obj();
        os_log_type_t v73 = type[0];
        if (os_log_type_enabled(v60, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          _os_log_impl(&dword_1830D4000, v60, v73, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_112:
    if (v59) {
      free(v59);
    }
    goto LABEL_53;
  }
  __int16 v54 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_add_edges_for_instance";
  uint64_t v51 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v106 = 0;
  if (!__nwlog_fault(v51, type, &v106)) {
    goto LABEL_104;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __int16 v52 = __nwlog_obj();
    os_log_type_t v55 = type[0];
    if (os_log_type_enabled(v52, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_add_edges_for_instance";
      _os_log_impl(&dword_1830D4000, v52, v55, "%{public}s called with null protocol->identifier", buf, 0xCu);
    }
    goto LABEL_103;
  }
  if (!v106)
  {
    __int16 v52 = __nwlog_obj();
    os_log_type_t v72 = type[0];
    if (os_log_type_enabled(v52, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_add_edges_for_instance";
      _os_log_impl(&dword_1830D4000, v52, v72, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_103;
  }
  unsigned int v65 = (char *)__nw_create_backtrace_string();
  __int16 v52 = __nwlog_obj();
  os_log_type_t v66 = type[0];
  BOOL v67 = os_log_type_enabled(v52, type[0]);
  if (!v65)
  {
    if (v67)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_add_edges_for_instance";
      _os_log_impl(&dword_1830D4000, v52, v66, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
    }
    goto LABEL_103;
  }
  if (v67)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_endpoint_add_edges_for_instance";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v65;
    _os_log_impl(&dword_1830D4000, v52, v66, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v65);
  if (v51) {
    goto LABEL_105;
  }
LABEL_55:
}

void sub_1836A375C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,void *a35)
{
  _Unwind_Resume(a1);
}

void sub_1836A3BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_ws_request_enumerate_subprotocols(nw_ws_request_t request, nw_ws_subprotocol_enumerator_t enumerator)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  nw_ws_request_t v3 = request;
  nw_ws_subprotocol_enumerator_t v4 = enumerator;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
      Class isa = v3[1].isa;
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_ws_request_enumerate_subprotocols_block_invoke;
      applier[3] = &unk_1E5244348;
      id v23 = v4;
      BOOL v7 = xpc_array_apply(isa, applier);

      goto LABEL_4;
    }
    uint64_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_ws_request_enumerate_subprotocols";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v10, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null enumerator", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v24)
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v27 = "nw_ws_request_enumerate_subprotocols";
        __int16 v28 = 2082;
        uint64_t v29 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_ws_request_enumerate_subprotocols";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v10, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null request", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v24)
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null request, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v27 = "nw_ws_request_enumerate_subprotocols";
        __int16 v28 = 2082;
        uint64_t v29 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

void sub_1836A4100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_ws_request_enumerate_subprotocols_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  xpc_string_get_string_ptr(v4);
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return v5;
}

void sub_1836A4170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_ws_request_enumerate_additional_headers(nw_ws_request_t request, nw_ws_additional_header_enumerator_t enumerator)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  nw_ws_request_t v3 = request;
  nw_ws_additional_header_enumerator_t v4 = enumerator;
  uint64_t v5 = (uint64_t (**)(void, void, void))v4;
  if (!v3)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_ws_request_enumerate_additional_headers";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null request", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "nw_ws_request_enumerate_additional_headers";
          __int16 v30 = 2082;
          __int16 v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v13)
        {
LABEL_6:
          BOOL v8 = 0;
          goto LABEL_7;
        }
LABEL_42:
        free(v13);
        goto LABEL_6;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null request, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (!v4)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_ws_request_enumerate_additional_headers";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null enumerator", buf, 0xCu);
      }
    }
    else if (v26)
    {
      os_log_type_t v21 = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "nw_ws_request_enumerate_additional_headers";
          __int16 v30 = 2082;
          __int16 v31 = v21;
          _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        if (!v13) {
          goto LABEL_6;
        }
        goto LABEL_42;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_40;
  }
  size_t v6 = 0;
  while (1)
  {
    size_t count = xpc_array_get_count(v3[2].isa);
    BOOL v8 = v6 >= count;
    if (v6 >= count) {
      break;
    }
    string = xpc_array_get_string(v3[2].isa, v6);
    id v10 = xpc_array_get_string(v3[3].isa, v6++);
    if ((((uint64_t (**)(void, const char *, const char *))v5)[2](v5, string, v10) & 1) == 0) {
      goto LABEL_6;
    }
  }
LABEL_7:

  return v8;
}

void sub_1836A468C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1836A4940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint32_t nw_establishment_report_get_previous_attempt_count(nw_establishment_report_t report)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v1 = report;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    uint32_t isa = (uint32_t)v1[10].isa;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_establishment_report_get_previous_attempt_count";
  size_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_previous_attempt_count";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_establishment_report_get_previous_attempt_count";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_previous_attempt_count";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_previous_attempt_count";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint32_t isa = 0;
LABEL_3:

  return isa;
}

BOOL nw_establishment_report_get_proxy_configured(nw_establishment_report_t report)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v1 = report;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    BOOL v3 = BYTE4(v1[10].isa) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_establishment_report_get_proxy_configured";
  size_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_proxy_configured";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_establishment_report_get_proxy_configured";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_proxy_configured";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_proxy_configured";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void nw_establishment_report_enumerate_proxy_endpoints(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    BOOL v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v26 = "nw_establishment_report_enumerate_proxy_endpoints";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_establishment_report_enumerate_proxy_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          char v26 = "nw_establishment_report_enumerate_proxy_endpoints";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_establishment_report_enumerate_proxy_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_establishment_report_enumerate_proxy_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    size_t v6 = (atomic_uchar *)v3[5];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_establishment_report_enumerate_proxy_endpoints_block_invoke;
    v21[3] = &unk_1E524AE90;
    id v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v26 = "nw_establishment_report_enumerate_proxy_endpoints";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      char v26 = "nw_establishment_report_enumerate_proxy_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      char v26 = "nw_establishment_report_enumerate_proxy_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  id v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      char v26 = "nw_establishment_report_enumerate_proxy_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    char v26 = "nw_establishment_report_enumerate_proxy_endpoints";
    __int16 v27 = 2082;
    __int16 v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t __nw_establishment_report_enumerate_proxy_endpoints_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1836A5884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_sent_transport_byte_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  BOOL v3 = report;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
      __int16 v35 = 2082;
      unsigned int v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    os_log_type_t v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    uint64_t isa = (uint64_t)v4[15].isa;
    uint64_t isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2) {
      goto LABEL_14;
    }
    if (isa_high == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = isa_high - 1;
      Class v13 = v4[52].isa;
      unint64_t v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((void *)v13 + 8);
        v11 += *((void *)v13 + 53);
        Class v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_14;
      }
      uint64_t v9 = v12 | 1;
    }
    uint64_t v15 = isa_high - v9;
    os_log_type_t v16 = (void *)((char *)v4[52].isa + 360 * v9 - 296);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    id v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18) {
        free(v18);
      }
LABEL_59:
      uint64_t isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
      __int16 v35 = 2082;
      unsigned int v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  uint64_t v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    uint64_t v6 = 0;
  }
  else if (path_index)
  {
    uint64_t v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    uint64_t v6 = (uint64_t)&v5[7];
  }

  uint64_t isa = *(void *)(v6 + 64);
LABEL_14:

  return isa;
}

void sub_1836A5ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_received_transport_byte_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  BOOL v3 = report;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_byte_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_byte_count";
      __int16 v35 = 2082;
      unsigned int v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    os_log_type_t v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_byte_count";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    uint64_t isa = (uint64_t)v4[12].isa;
    uint64_t isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2) {
      goto LABEL_14;
    }
    if (isa_high == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = isa_high - 1;
      Class v13 = v4[52].isa;
      unint64_t v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((void *)v13 + 5);
        v11 += *((void *)v13 + 50);
        Class v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_14;
      }
      uint64_t v9 = v12 | 1;
    }
    uint64_t v15 = isa_high - v9;
    os_log_type_t v16 = (void *)((char *)v4[52].isa + 360 * v9 - 320);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    id v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_byte_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18) {
        free(v18);
      }
LABEL_59:
      uint64_t isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_byte_count";
      __int16 v35 = 2082;
      unsigned int v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  uint64_t v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    uint64_t v6 = 0;
  }
  else if (path_index)
  {
    uint64_t v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    uint64_t v6 = (uint64_t)&v5[7];
  }

  uint64_t isa = *(void *)(v6 + 40);
LABEL_14:

  return isa;
}

void sub_1836A64CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_received_transport_duplicate_byte_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  BOOL v3 = report;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
      __int16 v35 = 2082;
      unsigned int v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    os_log_type_t v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    uint64_t isa = (uint64_t)v4[13].isa;
    uint64_t isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2) {
      goto LABEL_14;
    }
    if (isa_high == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = isa_high - 1;
      Class v13 = v4[52].isa;
      unint64_t v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((void *)v13 + 6);
        v11 += *((void *)v13 + 51);
        Class v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_14;
      }
      uint64_t v9 = v12 | 1;
    }
    uint64_t v15 = isa_high - v9;
    os_log_type_t v16 = (void *)((char *)v4[52].isa + 360 * v9 - 312);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    id v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18) {
        free(v18);
      }
LABEL_59:
      uint64_t isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
      __int16 v35 = 2082;
      unsigned int v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  uint64_t v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    uint64_t v6 = 0;
  }
  else if (path_index)
  {
    uint64_t v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    uint64_t v6 = (uint64_t)&v5[7];
  }

  uint64_t isa = *(void *)(v6 + 48);
LABEL_14:

  return isa;
}

void sub_1836A6AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_received_transport_out_of_order_byte_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  BOOL v3 = report;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
      __int16 v35 = 2082;
      unsigned int v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    os_log_type_t v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    uint64_t isa = (uint64_t)v4[14].isa;
    uint64_t isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2) {
      goto LABEL_14;
    }
    if (isa_high == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = isa_high - 1;
      Class v13 = v4[52].isa;
      unint64_t v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((void *)v13 + 7);
        v11 += *((void *)v13 + 52);
        Class v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_14;
      }
      uint64_t v9 = v12 | 1;
    }
    uint64_t v15 = isa_high - v9;
    os_log_type_t v16 = (void *)((char *)v4[52].isa + 360 * v9 - 304);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    id v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18) {
        free(v18);
      }
LABEL_59:
      uint64_t isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
      __int16 v35 = 2082;
      unsigned int v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  uint64_t v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    uint64_t v6 = 0;
  }
  else if (path_index)
  {
    uint64_t v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    uint64_t v6 = (uint64_t)&v5[7];
  }

  uint64_t isa = *(void *)(v6 + 56);
LABEL_14:

  return isa;
}

void sub_1836A70C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  BOOL v3 = report;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
          __int16 v35 = 2082;
          *(void *)unsigned int v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
        _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_48;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    unint64_t v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_51;
  }
  if (path_index == -1) {
    uint32_t v5 = 0;
  }
  else {
    uint32_t v5 = path_index;
  }
  if (v5 >= HIDWORD(v4[5].isa))
  {
    uint64_t v15 = __nwlog_obj();
    int isa_high = HIDWORD(v4[5].isa);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
    __int16 v35 = 1024;
    *(_DWORD *)unsigned int v36 = v5;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = isa_high;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v18 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }
    else if (v31)
    {
      uint32_t v22 = v5;
      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          int v26 = HIDWORD(v4[5].isa);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
          __int16 v35 = 1024;
          *(_DWORD *)unsigned int v36 = v22;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          __int16 v37 = 2082;
          BOOL v38 = v23;
          _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v23);
        goto LABEL_49;
      }
      if (v25)
      {
        int v30 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v22;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), no backtrace", buf, 0x18u);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v29 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded", buf, 0x18u);
      }
    }
LABEL_48:

LABEL_49:
    if (v11) {
      free(v11);
    }
LABEL_51:
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = v4;
  if (HIDWORD(v4[5].isa) <= v5)
  {
    uint64_t v7 = 0;
  }
  else if (v5)
  {
    uint64_t v7 = (uint64_t)v6[52].isa + 360 * v5 - 360;
  }
  else
  {
    uint64_t v7 = (uint64_t)&v6[7];
  }

  uint64_t v8 = *(void *)(v7 + 112);
LABEL_13:

  return v8;
}

void sub_1836A76A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_transport_minimum_rtt_milliseconds(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  BOOL v3 = report;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
          __int16 v35 = 2082;
          *(void *)unsigned int v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
        _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_48;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    unint64_t v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_51;
  }
  if (path_index == -1) {
    uint32_t v5 = 0;
  }
  else {
    uint32_t v5 = path_index;
  }
  if (v5 >= HIDWORD(v4[5].isa))
  {
    uint64_t v15 = __nwlog_obj();
    int isa_high = HIDWORD(v4[5].isa);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
    __int16 v35 = 1024;
    *(_DWORD *)unsigned int v36 = v5;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = isa_high;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v18 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }
    else if (v31)
    {
      uint32_t v22 = v5;
      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          int v26 = HIDWORD(v4[5].isa);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
          __int16 v35 = 1024;
          *(_DWORD *)unsigned int v36 = v22;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          __int16 v37 = 2082;
          BOOL v38 = v23;
          _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v23);
        goto LABEL_49;
      }
      if (v25)
      {
        int v30 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v22;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), no backtrace", buf, 0x18u);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v29 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded", buf, 0x18u);
      }
    }
LABEL_48:

LABEL_49:
    if (v11) {
      free(v11);
    }
LABEL_51:
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = v4;
  if (HIDWORD(v4[5].isa) <= v5)
  {
    uint64_t v7 = 0;
  }
  else if (v5)
  {
    uint64_t v7 = (uint64_t)v6[52].isa + 360 * v5 - 360;
  }
  else
  {
    uint64_t v7 = (uint64_t)&v6[7];
  }

  uint64_t v8 = *(void *)(v7 + 120);
LABEL_13:

  return v8;
}

void sub_1836A7C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_transport_rtt_variance(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  BOOL v3 = report;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_transport_rtt_variance";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_rtt_variance";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v34 = "nw_data_transfer_report_get_transport_rtt_variance";
          __int16 v35 = 2082;
          *(void *)unsigned int v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_rtt_variance";
        _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_rtt_variance";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_48;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    unint64_t v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_transport_rtt_variance";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_51;
  }
  if (path_index == -1) {
    uint32_t v5 = 0;
  }
  else {
    uint32_t v5 = path_index;
  }
  if (v5 >= HIDWORD(v4[5].isa))
  {
    uint64_t v15 = __nwlog_obj();
    int isa_high = HIDWORD(v4[5].isa);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v34 = "nw_data_transfer_report_get_transport_rtt_variance";
    __int16 v35 = 1024;
    *(_DWORD *)unsigned int v36 = v5;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = isa_high;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v18 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_rtt_variance";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }
    else if (v31)
    {
      uint32_t v22 = v5;
      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          int v26 = HIDWORD(v4[5].isa);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v34 = "nw_data_transfer_report_get_transport_rtt_variance";
          __int16 v35 = 1024;
          *(_DWORD *)unsigned int v36 = v22;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          __int16 v37 = 2082;
          BOOL v38 = v23;
          _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v23);
        goto LABEL_49;
      }
      if (v25)
      {
        int v30 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_rtt_variance";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v22;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), no backtrace", buf, 0x18u);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v29 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_rtt_variance";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded", buf, 0x18u);
      }
    }
LABEL_48:

LABEL_49:
    if (v11) {
      free(v11);
    }
LABEL_51:
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = v4;
  if (HIDWORD(v4[5].isa) <= v5)
  {
    uint64_t v7 = 0;
  }
  else if (v5)
  {
    uint64_t v7 = (uint64_t)v6[52].isa + 360 * v5 - 360;
  }
  else
  {
    uint64_t v7 = (uint64_t)&v6[7];
  }

  uint64_t v8 = *(void *)(v7 + 136);
LABEL_13:

  return v8;
}

void sub_1836A8264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_transport_congestion_window(void *a1, unsigned int a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_transport_congestion_window";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_congestion_window";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v34 = "nw_data_transfer_report_get_transport_congestion_window";
          __int16 v35 = 2082;
          *(void *)unsigned int v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_congestion_window";
        _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_congestion_window";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_48;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    unint64_t v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_transport_congestion_window";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_51;
  }
  if (a2 == -1) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = a2;
  }
  if (v5 >= HIDWORD(v4[5].isa))
  {
    uint64_t v15 = __nwlog_obj();
    int isa_high = HIDWORD(v4[5].isa);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v34 = "nw_data_transfer_report_get_transport_congestion_window";
    __int16 v35 = 1024;
    *(_DWORD *)unsigned int v36 = v5;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = isa_high;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v18 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_congestion_window";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }
    else if (v31)
    {
      unsigned int v22 = v5;
      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          int v26 = HIDWORD(v4[5].isa);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v34 = "nw_data_transfer_report_get_transport_congestion_window";
          __int16 v35 = 1024;
          *(_DWORD *)unsigned int v36 = v22;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          __int16 v37 = 2082;
          BOOL v38 = v23;
          _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v23);
        goto LABEL_49;
      }
      if (v25)
      {
        int v30 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_congestion_window";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v22;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), no backtrace", buf, 0x18u);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v29 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_congestion_window";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded", buf, 0x18u);
      }
    }
LABEL_48:

LABEL_49:
    if (v11) {
      free(v11);
    }
LABEL_51:
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = v4;
  if (HIDWORD(v4[5].isa) <= v5)
  {
    uint64_t v7 = 0;
  }
  else if (v5)
  {
    uint64_t v7 = (uint64_t)v6[52].isa + 360 * v5 - 360;
  }
  else
  {
    uint64_t v7 = (uint64_t)&v6[7];
  }

  uint64_t v8 = *(void *)(v7 + 144);
LABEL_13:

  return v8;
}

void sub_1836A8844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_transport_slow_start_threshold(void *a1, unsigned int a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
          __int16 v35 = 2082;
          *(void *)unsigned int v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
        _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_48;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    unint64_t v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_51;
  }
  if (a2 == -1) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = a2;
  }
  if (v5 >= HIDWORD(v4[5].isa))
  {
    uint64_t v15 = __nwlog_obj();
    int isa_high = HIDWORD(v4[5].isa);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
    __int16 v35 = 1024;
    *(_DWORD *)unsigned int v36 = v5;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = isa_high;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v18 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }
    else if (v31)
    {
      unsigned int v22 = v5;
      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          int v26 = HIDWORD(v4[5].isa);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
          __int16 v35 = 1024;
          *(_DWORD *)unsigned int v36 = v22;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          __int16 v37 = 2082;
          BOOL v38 = v23;
          _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v23);
        goto LABEL_49;
      }
      if (v25)
      {
        int v30 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v22;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), no backtrace", buf, 0x18u);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v29 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
        __int16 v35 = 1024;
        *(_DWORD *)unsigned int v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded", buf, 0x18u);
      }
    }
LABEL_48:

LABEL_49:
    if (v11) {
      free(v11);
    }
LABEL_51:
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = v4;
  if (HIDWORD(v4[5].isa) <= v5)
  {
    uint64_t v7 = 0;
  }
  else if (v5)
  {
    uint64_t v7 = (uint64_t)v6[52].isa + 360 * v5 - 360;
  }
  else
  {
    uint64_t v7 = (uint64_t)&v6[7];
  }

  uint64_t v8 = *(void *)(v7 + 152);
LABEL_13:

  return v8;
}

void sub_1836A8E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_sent_ip_packet_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  BOOL v3 = report;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
    int v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
      __int16 v35 = 2082;
      unsigned int v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    BOOL v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    uint64_t isa = (uint64_t)v4[11].isa;
    uint64_t isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2) {
      goto LABEL_14;
    }
    if (isa_high == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = isa_high - 1;
      Class v13 = v4[52].isa;
      unint64_t v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((void *)v13 + 4);
        v11 += *((void *)v13 + 49);
        Class v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_14;
      }
      uint64_t v9 = v12 | 1;
    }
    uint64_t v15 = isa_high - v9;
    os_log_type_t v16 = (void *)((char *)v4[52].isa + 360 * v9 - 328);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    unsigned int v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
    int v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18) {
        free(v18);
      }
LABEL_59:
      uint64_t isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
      __int16 v35 = 2082;
      unsigned int v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  unsigned int v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    uint64_t v6 = 0;
  }
  else if (path_index)
  {
    uint64_t v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    uint64_t v6 = (uint64_t)&v5[7];
  }

  uint64_t isa = *(void *)(v6 + 32);
LABEL_14:

  return isa;
}

void sub_1836A9420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_received_ip_packet_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  BOOL v3 = report;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_received_ip_packet_count";
    int v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_ip_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_ip_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_ip_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_received_ip_packet_count";
      __int16 v35 = 2082;
      unsigned int v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    BOOL v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_received_ip_packet_count";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    uint64_t isa = (uint64_t)v4[7].isa;
    uint64_t isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2) {
      goto LABEL_14;
    }
    if (isa_high == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = isa_high - 1;
      Class v13 = v4[52].isa;
      unint64_t v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *v13;
        v11 += v13[45];
        v13 += 90;
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_14;
      }
      uint64_t v9 = v12 | 1;
    }
    uint64_t v15 = isa_high - v9;
    os_log_type_t v16 = (void *)((char *)v4[52].isa + 360 * v9 - 360);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    unsigned int v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_received_ip_packet_count";
    int v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_ip_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18) {
        free(v18);
      }
LABEL_59:
      uint64_t isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_ip_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_received_ip_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_received_ip_packet_count";
      __int16 v35 = 2082;
      unsigned int v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  unsigned int v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    uint64_t v6 = 0;
  }
  else if (path_index)
  {
    uint64_t v6 = (uint64_t *)(v5[52] + 360 * (path_index - 1));
  }
  else
  {
    uint64_t v6 = v5 + 7;
  }

  uint64_t isa = *v6;
LABEL_14:

  return isa;
}

void sub_1836A9A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_report_resolution_source_t nw_resolution_report_get_source(nw_resolution_report_t resolution_report)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_resolution_report_t v1 = resolution_report;
  nw_resolution_report_t v2 = v1;
  if (v1)
  {
    nw_report_resolution_source_t isa_high = HIDWORD(v1[7].isa);
    goto LABEL_3;
  }
  unsigned int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_resolution_report_get_source";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_source";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_resolution_report_get_source";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_source";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_source";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  nw_report_resolution_source_t isa_high = nw_report_resolution_source_query;
LABEL_3:

  return isa_high;
}

uint32_t nw_resolution_report_get_endpoint_count(nw_resolution_report_t resolution_report)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_resolution_report_t v1 = resolution_report;
  nw_resolution_report_t v2 = v1;
  if (v1)
  {
    uint32_t isa = (uint32_t)v1[7].isa;
    goto LABEL_3;
  }
  unsigned int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_resolution_report_get_endpoint_count";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_endpoint_count";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_resolution_report_get_endpoint_count";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_endpoint_count";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_endpoint_count";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint32_t isa = 0;
LABEL_3:

  return isa;
}

nw_endpoint_t nw_resolution_report_copy_successful_endpoint(nw_resolution_report_t resolution_report)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_resolution_report_t v1 = resolution_report;
  nw_resolution_report_t v2 = v1;
  if (v1)
  {
    BOOL v3 = v1[4].isa;
    goto LABEL_3;
  }
  unsigned int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_resolution_report_copy_successful_endpoint";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_copy_successful_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_resolution_report_copy_successful_endpoint";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_copy_successful_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_copy_successful_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

nw_endpoint_t nw_resolution_report_copy_preferred_endpoint(nw_resolution_report_t resolution_report)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_resolution_report_t v1 = resolution_report;
  nw_resolution_report_t v2 = v1;
  if (v1)
  {
    BOOL v3 = v1[5].isa;
    goto LABEL_3;
  }
  unsigned int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_resolution_report_copy_preferred_endpoint";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_copy_preferred_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_resolution_report_copy_preferred_endpoint";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_copy_preferred_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_copy_preferred_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void nw_resolution_report_enumerate_endpoints(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = a2;
  unsigned int v5 = v4;
  if (!v3)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v26 = "nw_resolution_report_enumerate_endpoints";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_resolution_report_enumerate_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v26 = "nw_resolution_report_enumerate_endpoints";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_resolution_report_enumerate_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_resolution_report_enumerate_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    uint64_t v6 = (atomic_uchar *)v3[6];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_resolution_report_enumerate_endpoints_block_invoke;
    v21[3] = &unk_1E524AE90;
    id v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v26 = "nw_resolution_report_enumerate_endpoints";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "nw_resolution_report_enumerate_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "nw_resolution_report_enumerate_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "nw_resolution_report_enumerate_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v26 = "nw_resolution_report_enumerate_endpoints";
    __int16 v27 = 2082;
    BOOL v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t __nw_resolution_report_enumerate_endpoints_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

nw_report_resolution_protocol_t nw_resolution_report_get_protocol(nw_resolution_report_t resolution_report)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_resolution_report_t v1 = resolution_report;
  nw_resolution_report_t v2 = v1;
  if (v1)
  {
    nw_report_resolution_protocol_t isa = (nw_report_resolution_protocol_t)v1[8].isa;
    goto LABEL_3;
  }
  unsigned int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_resolution_report_get_protocol";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_protocol";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_resolution_report_get_protocol";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_protocol";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_protocol";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  nw_report_resolution_protocol_t isa = nw_report_resolution_protocol_unknown;
LABEL_3:

  return isa;
}

uint64_t nw_resolution_report_received_svcb(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_resolution_report_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 70) & 1;
    goto LABEL_3;
  }
  unsigned int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_resolution_report_received_svcb";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_received_svcb";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_resolution_report_received_svcb";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_received_svcb";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_received_svcb";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_resolution_report_get_dns_failure_reason(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_resolution_report_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = 1;
    switch(*((_WORD *)v1 + 34))
    {
      case 4:
      case 0xF:
        goto LABEL_24;
      case 0x10:
        uint64_t v3 = 2;
        break;
      case 0x11:
        uint64_t v3 = 3;
        break;
      default:
        goto LABEL_23;
    }
    goto LABEL_24;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_resolution_report_get_dns_failure_reason";
  unsigned int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_dns_failure_reason";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_resolution_report_get_dns_failure_reason";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_dns_failure_reason";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_dns_failure_reason";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v5) {
    free(v5);
  }
LABEL_23:
  uint64_t v3 = 0;
LABEL_24:

  return v3;
}

uint64_t nw_resolution_report_get_extended_dns_error_code(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_resolution_report_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[34];
    goto LABEL_3;
  }
  unsigned int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_resolution_report_get_extended_dns_error_code";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_extended_dns_error_code";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_resolution_report_get_extended_dns_error_code";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_extended_dns_error_code";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_extended_dns_error_code";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_resolution_report_get_extended_dns_error_extra_text(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_resolution_report_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 3);
    goto LABEL_3;
  }
  unsigned int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_resolution_report_get_extended_dns_error_extra_text";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_extended_dns_error_extra_text";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_resolution_report_get_extended_dns_error_extra_text";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_extended_dns_error_extra_text";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_extended_dns_error_extra_text";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_resolution_report_get_provider_name(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_resolution_report_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 2);
    goto LABEL_3;
  }
  unsigned int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_resolution_report_get_provider_name";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_provider_name";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_resolution_report_get_provider_name";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_provider_name";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_provider_name";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

const char *nw_connection_get_privacy_stance_string(int a1)
{
  if ((a1 - 1) > 4) {
    return "Unknown";
  }
  else {
    return off_1E523B910[a1 - 1];
  }
}

uint64_t __Block_byref_object_copy__7806(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7807(uint64_t a1)
{
}

void __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke(uint64_t a1, void *a2)
{
}

void __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  nw_endpoint_t v4 = nw_endpoint_handler_copy_endpoint(v3);
  nw_endpoint_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = v4;
    id v7 = v6[15];

    uint64_t v8 = *(void *)(a1 + 32);
    os_log_type_t v9 = *(void **)(v8 + 48);
    *(void *)(v8 + 48) = v7;

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 48);
      int v12 = 136446467;
      char v13 = "nw_connection_fillout_establishment_report_on_nw_queue_block_invoke_2";
      __int16 v14 = 2117;
      uint64_t v15 = v11;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s Proxied next hops: %{sensitive}@\n", (uint8_t *)&v12, 0x16u);
    }
  }
}

void sub_1836ABB54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke_157(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 56) = *(_DWORD *)(*(void *)(a1 + 40) + 504);
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 416), *(id *)(a1 + 32));
}

void __nw_connection_copy_establishment_report_off_queue_block_invoke(uint64_t a1)
{
}

void nw_connection_access_establishment_report(nw_connection_t connection, dispatch_queue_t queue, nw_establishment_report_access_block_t access_block)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  nw_endpoint_t v5 = connection;
  uint64_t v6 = queue;
  nw_establishment_report_access_block_t v7 = access_block;
  uint64_t v8 = v7;
  if (!v5)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v35 = "nw_connection_access_establishment_report";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v10, &type, &v32)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v35 = "nw_connection_access_establishment_report";
          __int16 v36 = 2082;
          uint64_t v37 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v10) {
          goto LABEL_5;
        }
LABEL_56:
        free(v10);
        goto LABEL_5;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_1830D4000, v11, v25, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v6)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v35 = "nw_connection_access_establishment_report";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v10, &type, &v32)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v32)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_1830D4000, v11, v26, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v35 = "nw_connection_access_establishment_report";
      __int16 v36 = 2082;
      uint64_t v37 = v20;
      _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v7)
  {
    uint64_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v35 = "nw_connection_access_establishment_report";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v10, &type, &v32)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null access_block", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v32)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s called with null access_block, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v35 = "nw_connection_access_establishment_report";
      __int16 v36 = 2082;
      uint64_t v37 = v20;
      _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null access_block, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v20);
    if (!v10) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = __nw_connection_access_establishment_report_block_invoke;
  v28[3] = &unk_1E5248030;
  uint64_t v29 = v5;
  os_log_type_t v30 = v6;
  id v31 = v8;
  nw_connection_async_if_needed(v29, v28);

LABEL_5:
}

void sub_1836AC2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_connection_access_establishment_report_block_invoke(uint64_t a1)
{
  nw_resolution_report_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[52];
  if (!v3)
  {
    nw_connection_fillout_establishment_report_on_nw_queue(v2, 0);
    id v3 = *(void **)(*(void *)(a1 + 32) + 416);
  }
  id v4 = v3;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __nw_connection_access_establishment_report_block_invoke_2;
  v8[3] = &unk_1E524B950;
  nw_endpoint_t v5 = *(NSObject **)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v9 = v4;
  id v10 = v6;
  id v7 = v4;
  dispatch_async(v5, v8);
}

uint64_t __nw_connection_access_establishment_report_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

nw_endpoint_t nw_establishment_report_copy_proxy_endpoint(nw_establishment_report_t report)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v1 = report;
  nw_establishment_report_t v2 = v1;
  if (!v1)
  {
    nw_endpoint_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_establishment_report_copy_proxy_endpoint";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_establishment_report_copy_proxy_endpoint";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_establishment_report_copy_proxy_endpoint";
            __int16 v18 = 2082;
            BOOL v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_establishment_report_copy_proxy_endpoint";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_establishment_report_copy_proxy_endpoint";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_21:
    if (v6) {
      free(v6);
    }
    goto LABEL_23;
  }
  uint64_t isa = (uint64_t)v1[5].isa;
  if (!isa || *(void *)(isa + 24) == *(void *)(isa + 16))
  {
LABEL_23:
    id v4 = 0;
    goto LABEL_24;
  }
  id v4 = nw_array_get_object_at_index(isa, 0);
LABEL_24:

  return v4;
}

void nw_establishment_report_enumerate_resolutions(nw_establishment_report_t report, nw_report_resolution_enumerator_t enumerate_block)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v3 = report;
  nw_report_resolution_enumerator_t v4 = enumerate_block;
  nw_endpoint_t v5 = v4;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_establishment_report_enumerate_resolutions";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_establishment_report_enumerate_resolutions";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v26 = "nw_establishment_report_enumerate_resolutions";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_establishment_report_enumerate_resolutions";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_establishment_report_enumerate_resolutions";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    uint64_t isa = (atomic_uchar *)v3[9].isa;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_establishment_report_enumerate_resolutions_block_invoke;
    v21[3] = &unk_1E524AE90;
    id v22 = v4;
    nw_array_apply(isa, (uint64_t)v21);

    goto LABEL_4;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_establishment_report_enumerate_resolutions";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_establishment_report_enumerate_resolutions";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_establishment_report_enumerate_resolutions";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  id v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_establishment_report_enumerate_resolutions";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_establishment_report_enumerate_resolutions";
    __int16 v27 = 2082;
    BOOL v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t __nw_establishment_report_enumerate_resolutions_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void nw_establishment_report_enumerate_protocol_l4s_state(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v3 = a1;
  id v4 = a2;
  nw_endpoint_t v5 = v4;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    id v6 = (atomic_uchar *)v3[8];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_establishment_report_enumerate_protocol_l4s_state_block_invoke;
    v21[3] = &unk_1E524AE90;
    id v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  id v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
    __int16 v27 = 2082;
    BOOL v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t __nw_establishment_report_enumerate_protocol_l4s_state_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void nw_establishment_report_enumerate_proxied_next_hop_endpoints(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v3 = a1;
  id v4 = a2;
  nw_endpoint_t v5 = v4;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    id v6 = (atomic_uchar *)v3[6];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_establishment_report_enumerate_proxied_next_hop_endpoints_block_invoke;
    v21[3] = &unk_1E524AE90;
    id v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  id v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
    __int16 v27 = 2082;
    BOOL v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t __nw_establishment_report_enumerate_proxied_next_hop_endpoints_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

Class nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count(void *a1, unsigned int a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
      __int16 v35 = 2082;
      __int16 v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    os_log_type_t v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (a2 == -1)
  {
    Class isa = v4[17].isa;
    uint64_t isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2) {
      goto LABEL_14;
    }
    if (isa_high == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = isa_high - 1;
      Class v13 = v4[52].isa;
      unint64_t v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        Class isa = (Class)((char *)isa + *((void *)v13 + 10));
        v11 += *((void *)v13 + 55);
        Class v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      Class isa = (Class)((char *)isa + v11);
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_14;
      }
      uint64_t v9 = v12 | 1;
    }
    uint64_t v15 = isa_high - v9;
    os_log_type_t v16 = (void *)((char *)v4[52].isa + 360 * v9 - 280);
    do
    {
      Class isa = (Class)((char *)isa + *v16);
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= a2)
  {
    id v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18) {
        free(v18);
      }
LABEL_59:
      Class isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
      __int16 v35 = 2082;
      __int16 v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  nw_endpoint_t v5 = v4;
  if (HIDWORD(v4[5].isa) <= a2)
  {
    uint64_t v6 = 0;
  }
  else if (a2)
  {
    uint64_t v6 = (uint64_t)v5[52].isa + 360 * a2 - 360;
  }
  else
  {
    uint64_t v6 = (uint64_t)&v5[7];
  }

  Class isa = *(Class *)(v6 + 80);
LABEL_14:

  return isa;
}

void sub_1836ADC38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count(void *a1, unsigned int a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
      __int16 v35 = 2082;
      __int16 v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    os_log_type_t v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (a2 == -1)
  {
    Class isa = v4[18].isa;
    uint64_t isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2) {
      goto LABEL_14;
    }
    if (isa_high == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = isa_high - 1;
      Class v13 = v4[52].isa;
      unint64_t v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        Class isa = (Class)((char *)isa + *((void *)v13 + 11));
        v11 += *((void *)v13 + 56);
        Class v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      Class isa = (Class)((char *)isa + v11);
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_14;
      }
      uint64_t v9 = v12 | 1;
    }
    uint64_t v15 = isa_high - v9;
    os_log_type_t v16 = (void *)((char *)v4[52].isa + 360 * v9 - 272);
    do
    {
      Class isa = (Class)((char *)isa + *v16);
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= a2)
  {
    id v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18) {
        free(v18);
      }
LABEL_59:
      Class isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
      __int16 v35 = 2082;
      __int16 v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  nw_endpoint_t v5 = v4;
  if (HIDWORD(v4[5].isa) <= a2)
  {
    uint64_t v6 = 0;
  }
  else if (a2)
  {
    uint64_t v6 = (uint64_t)v5[52].isa + 360 * a2 - 360;
  }
  else
  {
    uint64_t v6 = (uint64_t)&v5[7];
  }

  Class isa = *(Class *)(v6 + 88);
LABEL_14:

  return isa;
}

void sub_1836AE234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count(void *a1, unsigned int a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
      __int16 v35 = 2082;
      __int16 v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    os_log_type_t v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (a2 == -1)
  {
    Class isa = v4[19].isa;
    uint64_t isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2) {
      goto LABEL_14;
    }
    if (isa_high == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = isa_high - 1;
      Class v13 = v4[52].isa;
      unint64_t v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        Class isa = (Class)((char *)isa + *((void *)v13 + 12));
        v11 += *((void *)v13 + 57);
        Class v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      Class isa = (Class)((char *)isa + v11);
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_14;
      }
      uint64_t v9 = v12 | 1;
    }
    uint64_t v15 = isa_high - v9;
    os_log_type_t v16 = (void *)((char *)v4[52].isa + 360 * v9 - 264);
    do
    {
      Class isa = (Class)((char *)isa + *v16);
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= a2)
  {
    id v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18) {
        free(v18);
      }
LABEL_59:
      Class isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
      __int16 v35 = 2082;
      __int16 v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  nw_endpoint_t v5 = v4;
  if (HIDWORD(v4[5].isa) <= a2)
  {
    uint64_t v6 = 0;
  }
  else if (a2)
  {
    uint64_t v6 = (uint64_t)v5[52].isa + 360 * a2 - 360;
  }
  else
  {
    uint64_t v6 = (uint64_t)&v5[7];
  }

  Class isa = *(Class *)(v6 + 96);
LABEL_14:

  return isa;
}

void sub_1836AE830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count(void *a1, unsigned int a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
      __int16 v35 = 2082;
      __int16 v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    os_log_type_t v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (a2 == -1)
  {
    Class isa = v4[20].isa;
    uint64_t isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2) {
      goto LABEL_14;
    }
    if (isa_high == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = isa_high - 1;
      Class v13 = v4[52].isa;
      unint64_t v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        Class isa = (Class)((char *)isa + *((void *)v13 + 13));
        v11 += *((void *)v13 + 58);
        Class v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      Class isa = (Class)((char *)isa + v11);
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_14;
      }
      uint64_t v9 = v12 | 1;
    }
    uint64_t v15 = isa_high - v9;
    os_log_type_t v16 = (void *)((char *)v4[52].isa + 360 * v9 - 256);
    do
    {
      Class isa = (Class)((char *)isa + *v16);
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= a2)
  {
    id v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18) {
        free(v18);
      }
LABEL_59:
      Class isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
      __int16 v35 = 2082;
      __int16 v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  nw_endpoint_t v5 = v4;
  if (HIDWORD(v4[5].isa) <= a2)
  {
    uint64_t v6 = 0;
  }
  else if (a2)
  {
    uint64_t v6 = (uint64_t)v5[52].isa + 360 * a2 - 360;
  }
  else
  {
    uint64_t v6 = (uint64_t)&v5[7];
  }

  Class isa = *(Class *)(v6 + 104);
LABEL_14:

  return isa;
}

void sub_1836AEE2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_establishment_report_copy_dictionary_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)[a3 copyDictionary];
  xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v4);

  return 1;
}

void sub_1836AEE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_establishment_report_copy_dictionary_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)[a3 copyDictionary];
  xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v4);

  return 1;
}

void sub_1836AEED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_establishment_report_create_from_dictionary_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F14590])
  {
    nw_endpoint_t v5 = nw_endpoint_create_from_dictionary(v4);
    nw_array_append(*(void *)(*(void *)(a1 + 32) + 40), v5);
  }
  return 1;
}

void sub_1836AEF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_establishment_report_create_from_dictionary_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F14590])
  {
    nw_endpoint_t v5 = nw_endpoint_create_from_dictionary(v4);
    nw_array_append(*(void *)(*(void *)(a1 + 32) + 48), v5);
  }
  return 1;
}

void sub_1836AEFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_interface_use_observer_create(const char *a1, void *a2, void *a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  nw_endpoint_t v5 = a2;
  uint64_t v6 = a3;
  id v7 = v6;
  if (!a1)
  {
    uint64_t v39 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v82 = "nw_interface_use_observer_create";
    __int16 v40 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v80.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v40, &v80, &type))
    {
      if (LOBYTE(v80.receiver) == 17)
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t receiver = (os_log_type_t)v80.receiver;
        if (os_log_type_enabled(v41, (os_log_type_t)v80.receiver))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v82 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_1830D4000, v41, receiver, "%{public}s called with null notification_name", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v58 = (os_log_type_t)v80.receiver;
        BOOL v59 = os_log_type_enabled(v41, (os_log_type_t)v80.receiver);
        if (backtrace_string)
        {
          if (v59)
          {
            *(_DWORD *)buf = 136446466;
            unsigned int v82 = "nw_interface_use_observer_create";
            __int16 v83 = 2082;
            os_log_type_t v84 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v41, v58, "%{public}s called with null notification_name, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_101;
        }
        if (v59)
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v82 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_1830D4000, v41, v58, "%{public}s called with null notification_name, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v69 = (os_log_type_t)v80.receiver;
        if (os_log_type_enabled(v41, (os_log_type_t)v80.receiver))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v82 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_1830D4000, v41, v69, "%{public}s called with null notification_name, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_101:
    if (v40) {
      free(v40);
    }

    goto LABEL_115;
  }
  if (!v5)
  {
    uint64_t v43 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v82 = "nw_interface_use_observer_create";
    __int16 v44 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v80.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v44, &v80, &type))
    {
      if (LOBYTE(v80.receiver) == 17)
      {
        uint64_t v45 = __nwlog_obj();
        os_log_type_t v46 = (os_log_type_t)v80.receiver;
        if (os_log_type_enabled(v45, (os_log_type_t)v80.receiver))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v82 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s called with null queue", buf, 0xCu);
        }
      }
      else if (type)
      {
        uint64_t v60 = (char *)__nw_create_backtrace_string();
        uint64_t v45 = __nwlog_obj();
        os_log_type_t v61 = (os_log_type_t)v80.receiver;
        BOOL v62 = os_log_type_enabled(v45, (os_log_type_t)v80.receiver);
        if (v60)
        {
          if (v62)
          {
            *(_DWORD *)buf = 136446466;
            unsigned int v82 = "nw_interface_use_observer_create";
            __int16 v83 = 2082;
            os_log_type_t v84 = v60;
            _os_log_impl(&dword_1830D4000, v45, v61, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v60);
          goto LABEL_107;
        }
        if (v62)
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v82 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_1830D4000, v45, v61, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v45 = __nwlog_obj();
        os_log_type_t v70 = (os_log_type_t)v80.receiver;
        if (os_log_type_enabled(v45, (os_log_type_t)v80.receiver))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v82 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_1830D4000, v45, v70, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_107:
    if (v44) {
      free(v44);
    }
    os_log_type_t v30 = 0;
    goto LABEL_41;
  }
  if (!v6)
  {
    id v47 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v82 = "nw_interface_use_observer_create";
    __int16 v48 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v80.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v48, &v80, &type))
    {
      if (LOBYTE(v80.receiver) == 17)
      {
        os_log_type_t v49 = __nwlog_obj();
        os_log_type_t v50 = (os_log_type_t)v80.receiver;
        if (os_log_type_enabled(v49, (os_log_type_t)v80.receiver))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v82 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s called with null block", buf, 0xCu);
        }
      }
      else if (type)
      {
        os_log_type_t v63 = (char *)__nw_create_backtrace_string();
        os_log_type_t v49 = __nwlog_obj();
        os_log_type_t v64 = (os_log_type_t)v80.receiver;
        BOOL v65 = os_log_type_enabled(v49, (os_log_type_t)v80.receiver);
        if (v63)
        {
          if (v65)
          {
            *(_DWORD *)buf = 136446466;
            unsigned int v82 = "nw_interface_use_observer_create";
            __int16 v83 = 2082;
            os_log_type_t v84 = v63;
            _os_log_impl(&dword_1830D4000, v49, v64, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v63);
          goto LABEL_113;
        }
        if (v65)
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v82 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_1830D4000, v49, v64, "%{public}s called with null block, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v49 = __nwlog_obj();
        os_log_type_t v71 = (os_log_type_t)v80.receiver;
        if (os_log_type_enabled(v49, (os_log_type_t)v80.receiver))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v82 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_1830D4000, v49, v71, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_113:
    if (v48) {
      free(v48);
    }
LABEL_115:
    os_log_type_t v30 = 0;
    id v7 = v5;
    goto LABEL_41;
  }
  os_log_type_t v8 = [NWConcrete_nw_interface_use_observer alloc];
  if (!v8)
  {
LABEL_121:
    id v9 = 0;
    goto LABEL_8;
  }
  v80.os_log_type_t receiver = v8;
  v80.super_class = (Class)NWConcrete_nw_interface_use_observer;
  id v9 = objc_msgSendSuper2(&v80, sel_init);
  if (!v9)
  {
    uint64_t v51 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v82 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
    __int16 v52 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v78 = 0;
    if (__nwlog_fault(v52, &type, &v78))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v53 = __nwlog_obj();
        os_log_type_t v54 = type;
        if (os_log_type_enabled(v53, type))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v82 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
          _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v78)
      {
        os_log_type_t v66 = (char *)__nw_create_backtrace_string();
        os_log_type_t v53 = __nwlog_obj();
        os_log_type_t v67 = type;
        BOOL v68 = os_log_type_enabled(v53, type);
        if (v66)
        {
          if (v68)
          {
            *(_DWORD *)buf = 136446466;
            unsigned int v82 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
            __int16 v83 = 2082;
            os_log_type_t v84 = v66;
            _os_log_impl(&dword_1830D4000, v53, v67, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v66);
          goto LABEL_119;
        }
        if (v68)
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v82 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
          _os_log_impl(&dword_1830D4000, v53, v67, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v53 = __nwlog_obj();
        os_log_type_t v72 = type;
        if (os_log_type_enabled(v53, type))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v82 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
          _os_log_impl(&dword_1830D4000, v53, v72, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_119:
    if (v52) {
      free(v52);
    }
    goto LABEL_121;
  }
  os_log_type_t v10 = strdup(a1);
  if (!v10)
  {
    os_log_type_t v55 = __nwlog_obj();
    os_log_type_enabled(v55, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    unsigned int v82 = "strict_strdup";
    uint64_t v56 = (void *)_os_log_send_and_compose_impl();

    id result = (id)__nwlog_abort((uint64_t)v56);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v56);
  }
  *((void *)v9 + 1) = v10;
LABEL_8:
  uint64_t v11 = (void *)*((void *)v9 + 2);
  if ((*((unsigned char *)v9 + 24) & 1) != 0 && v11)
  {
    *((void *)v9 + 2) = 0;

    uint64_t v11 = (void *)*((void *)v9 + 2);
  }
  *((void *)v9 + 2) = 0;

  uint64_t v12 = (void *)*((void *)v9 + 2);
  *((void *)v9 + 2) = v5;

  *((unsigned char *)v9 + 24) |= 1u;
  Class v13 = _Block_copy(v7);

  unint64_t v14 = _Block_copy(v13);
  uint64_t v15 = (void *)*((void *)v9 + 4);
  if ((*((unsigned char *)v9 + 40) & 1) != 0 && v15)
  {
    *((void *)v9 + 4) = 0;

    uint64_t v15 = (void *)*((void *)v9 + 4);
  }
  *((void *)v9 + 4) = 0;

  os_log_type_t v16 = _Block_copy(v14);
  os_log_type_t v17 = (void *)*((void *)v9 + 4);
  *((void *)v9 + 4) = v16;

  *((unsigned char *)v9 + 40) |= 1u;
  LODWORD(v80.receiver) = -1;
  BOOL v18 = (const char *)*((void *)v9 + 1);
  os_log_type_t v19 = *((id *)v9 + 2);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = __nw_interface_use_observer_create_block_invoke;
  handler[3] = &unk_1E523B940;
  id v7 = v9;
  id v77 = v7;
  uint32_t v20 = notify_register_dispatch(v18, (int *)&v80, v19, handler);

  if (!v20)
  {
    int v27 = (int)v80.receiver;
    if (LODWORD(v80.receiver) == -1)
    {
      os_log_type_t v30 = 0;
    }
    else
    {
      v7[12] = v80.receiver;
      unsigned __int16 v28 = nw_interface_use_observer_get_in_use(v27);
      if (v28 >= 0x100u)
      {
        os_log_type_t v29 = *((void *)v9 + 2);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __nw_interface_use_observer_create_block_invoke_7;
        block[3] = &unk_1E523B968;
        os_log_type_t v74 = v7;
        unsigned __int16 v75 = v28;
        dispatch_async(v29, block);
      }
      os_log_type_t v30 = v7;
    }
    goto LABEL_40;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v21 = (id)gLogObj;
  id v22 = (char *)*((void *)v9 + 1);
  *(_DWORD *)buf = 136446722;
  unsigned int v82 = "nw_interface_use_observer_create";
  __int16 v83 = 2082;
  os_log_type_t v84 = v22;
  __int16 v85 = 1024;
  uint32_t v86 = v20;
  os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v78 = 0;
  if (__nwlog_fault(v23, &type, &v78))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v24 = (id)gLogObj;
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        BOOL v26 = (char *)*((void *)v9 + 1);
        *(_DWORD *)buf = 136446722;
        unsigned int v82 = "nw_interface_use_observer_create";
        __int16 v83 = 2082;
        os_log_type_t v84 = v26;
        __int16 v85 = 1024;
        uint32_t v86 = v20;
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s notify_register_dispatch(%{public}s) [status %u] failed", buf, 0x1Cu);
      }
    }
    else if (v78)
    {
      char v31 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v24 = (id)gLogObj;
      os_log_type_t v32 = type;
      BOOL v33 = os_log_type_enabled(v24, type);
      if (v31)
      {
        if (v33)
        {
          os_log_type_t v34 = (char *)*((void *)v9 + 1);
          *(_DWORD *)buf = 136446978;
          unsigned int v82 = "nw_interface_use_observer_create";
          __int16 v83 = 2082;
          os_log_type_t v84 = v34;
          __int16 v85 = 1024;
          uint32_t v86 = v20;
          __int16 v87 = 2082;
          unsigned int v88 = v31;
          _os_log_impl(&dword_1830D4000, v24, v32, "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, dumping backtrace:%{public}s", buf, 0x26u);
        }

        free(v31);
        if (!v23) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      if (v33)
      {
        uint64_t v37 = (char *)*((void *)v9 + 1);
        *(_DWORD *)buf = 136446722;
        unsigned int v82 = "nw_interface_use_observer_create";
        __int16 v83 = 2082;
        os_log_type_t v84 = v37;
        __int16 v85 = 1024;
        uint32_t v86 = v20;
        _os_log_impl(&dword_1830D4000, v24, v32, "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, no backtrace", buf, 0x1Cu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v24 = (id)gLogObj;
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v24, type))
      {
        __int16 v36 = (char *)*((void *)v9 + 1);
        *(_DWORD *)buf = 136446722;
        unsigned int v82 = "nw_interface_use_observer_create";
        __int16 v83 = 2082;
        os_log_type_t v84 = v36;
        __int16 v85 = 1024;
        uint32_t v86 = v20;
        _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, backtrace limit exceeded", buf, 0x1Cu);
      }
    }
  }
  if (v23) {
LABEL_38:
  }
    free(v23);
LABEL_39:
  os_log_type_t v30 = 0;
  LODWORD(v80.receiver) = -1;
LABEL_40:

LABEL_41:

  return v30;
}

void sub_1836AFFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void __nw_interface_use_observer_create_block_invoke(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v3 = *(id *)(a1 + 32);
  if (v3)
  {
    unsigned __int16 v4 = nw_interface_use_observer_get_in_use(a2);
    if (v4 >= 0x100u) {
      (*(void (**)(void, BOOL))(v3[4] + 16))(v3[4], v4 != 0);
    }
    goto LABEL_4;
  }
  nw_endpoint_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_use_observer_update";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_use_observer_update";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null observer", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_use_observer_update";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null observer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_use_observer_update";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null observer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_use_observer_update";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null observer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_4:
}

void sub_1836B0300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_interface_use_observer_get_in_use(int a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t state64 = 0;
  uint32_t state = notify_get_state(a1, &state64);
  if (state)
  {
    uint32_t v2 = state;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    uint32_t v20 = "nw_interface_use_observer_get_in_use";
    __int16 v21 = 1024;
    uint32_t v22 = v2;
    unsigned __int16 v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v4, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446466;
        uint32_t v20 = "nw_interface_use_observer_get_in_use";
        __int16 v21 = 1024;
        uint32_t v22 = v2;
        id v7 = "%{public}s notify_get_state [%u] failed";
LABEL_18:
        unint64_t v14 = v5;
        os_log_type_t v15 = v6;
        goto LABEL_19;
      }
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446466;
        uint32_t v20 = "nw_interface_use_observer_get_in_use";
        __int16 v21 = 1024;
        uint32_t v22 = v2;
        id v7 = "%{public}s notify_get_state [%u] failed, backtrace limit exceeded";
        goto LABEL_18;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_endpoint_t v5 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v12)
        {
LABEL_20:

          if (!v4) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446466;
        uint32_t v20 = "nw_interface_use_observer_get_in_use";
        __int16 v21 = 1024;
        uint32_t v22 = v2;
        id v7 = "%{public}s notify_get_state [%u] failed, no backtrace";
        unint64_t v14 = v5;
        os_log_type_t v15 = v11;
LABEL_19:
        _os_log_impl(&dword_1830D4000, v14, v15, v7, buf, 0x12u);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446722;
        uint32_t v20 = "nw_interface_use_observer_get_in_use";
        __int16 v21 = 1024;
        uint32_t v22 = v2;
        __int16 v23 = 2082;
        BOOL v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v11, "%{public}s notify_get_state [%u] failed, dumping backtrace:%{public}s", buf, 0x1Cu);
      }

      free(backtrace_string);
    }
    if (!v4)
    {
LABEL_14:
      BOOL v8 = 0;
      int v9 = 0;
      return v8 | (v9 << 8);
    }
LABEL_13:
    free(v4);
    goto LABEL_14;
  }
  BOOL v8 = state64 != 0;
  int v9 = 1;
  return v8 | (v9 << 8);
}

void __nw_interface_use_observer_create_block_invoke_7(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 41))
  {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 40);
    uint32_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) + 32) + 16);
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 32);
    v2(v3, v1);
  }
  else
  {
    std::__throw_bad_optional_access[abi:nn180100]();
    std::__throw_bad_optional_access[abi:nn180100]();
  }
}

void std::__throw_bad_optional_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  nw_interface_use_observer_cancel(v0);
}

void nw_interface_use_observer_cancel(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint32_t v2 = v1;
  if (v1)
  {
    int v3 = v1[12];
    if (v3 == -1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned __int16 v4 = (id)gLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_interface_use_observer_cancel";
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s Notify token not valid, this observer may have been cancelled", buf, 0xCu);
      }
    }
    else
    {
      notify_cancel(v3);
      v2[12] = -1;
    }
    goto LABEL_7;
  }
  nw_endpoint_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_interface_use_observer_cancel";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_interface_use_observer_cancel";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null observer", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_interface_use_observer_cancel";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null observer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_interface_use_observer_cancel";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null observer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_interface_use_observer_cancel";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null observer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v6) {
    free(v6);
  }
LABEL_7:
}

void sub_1836B09C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_interface_use_observer_post_notification(const char *a1, unsigned int a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    BOOL v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned __int16 v28 = "nw_interface_use_observer_post_notification";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v19, &type, &v25)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint32_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int16 v28 = "nw_interface_use_observer_post_notification";
        uint32_t v22 = "%{public}s called with null notification_name";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0xCu);
      }
    }
    else
    {
      if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint32_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v24 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            unsigned __int16 v28 = "nw_interface_use_observer_post_notification";
            __int16 v29 = 2082;
            os_log_type_t v30 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null notification_name, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }
        if (!v24) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446210;
        unsigned __int16 v28 = "nw_interface_use_observer_post_notification";
        uint32_t v22 = "%{public}s called with null notification_name, no backtrace";
        goto LABEL_36;
      }
      uint32_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int16 v28 = "nw_interface_use_observer_post_notification";
        uint32_t v22 = "%{public}s called with null notification_name, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:

LABEL_38:
    if (v19) {
      free(v19);
    }
    return;
  }
  uint32_t v4 = notify_register_check(a1, &nw_interface_use_observer_post_notification::token);
  if (v4)
  {
    uint32_t v5 = v4;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      unsigned __int16 v28 = "nw_interface_use_observer_post_notification";
      __int16 v29 = 2082;
      os_log_type_t v30 = (void *)a1;
      __int16 v31 = 1024;
      LODWORD(v32) = v5;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s notify_register_check(%{public}s) failed: %d", buf, 0x1Cu);
    }

    nw_interface_use_observer_post_notification::token = -1;
    goto LABEL_6;
  }
  if (nw_interface_use_observer_post_notification::token == -1)
  {
LABEL_6:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
LABEL_9:

      return;
    }
    *(_DWORD *)buf = 136446466;
    unsigned __int16 v28 = "nw_interface_use_observer_post_notification";
    __int16 v29 = 2082;
    os_log_type_t v30 = (void *)a1;
    os_log_type_t v8 = "%{public}s Nobody observing %{public}s";
    int v9 = v7;
    os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
    uint32_t v11 = 22;
LABEL_8:
    _os_log_impl(&dword_1830D4000, v9, v10, v8, buf, v11);
    goto LABEL_9;
  }
  uint64_t v12 = a2;
  uint32_t v13 = notify_set_state(nw_interface_use_observer_post_notification::token, a2);
  if (v13)
  {
    uint32_t v14 = v13;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      unsigned __int16 v28 = "nw_interface_use_observer_post_notification";
      __int16 v29 = 2082;
      os_log_type_t v30 = (void *)a1;
      __int16 v31 = 2048;
      uint64_t v32 = v12;
      __int16 v33 = 1024;
      uint32_t v34 = v14;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s notify_set_state for %{public}s %#llx failed: %d", buf, 0x26u);
    }
  }
  else
  {
    uint32_t v16 = notify_post(a1);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v17 = (id)gLogObj;
    id v7 = v17;
    if (!v16)
    {
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_9;
      }
      *(_DWORD *)buf = 136446722;
      unsigned __int16 v28 = "nw_interface_use_observer_post_notification";
      __int16 v29 = 2082;
      os_log_type_t v30 = (void *)a1;
      __int16 v31 = 1024;
      LODWORD(v32) = a2;
      os_log_type_t v8 = "%{public}s successfully posted notification %{public}s for interface in use: %{BOOL}d";
      int v9 = v7;
      os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
      uint32_t v11 = 28;
      goto LABEL_8;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      unsigned __int16 v28 = "nw_interface_use_observer_post_notification";
      __int16 v29 = 2082;
      os_log_type_t v30 = (void *)a1;
      __int16 v31 = 1024;
      LODWORD(v32) = v16;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s notify_post for %{public}s failed: %d", buf, 0x1Cu);
    }
  }
  notify_cancel(nw_interface_use_observer_post_notification::token);
  nw_interface_use_observer_post_notification::token = -1;
}

uint64_t nw_connection_group_get_description(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint32_t v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    if (nw_parameters_get_sensitive_redacted(*((void **)v1 + 7)))
    {
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_connection_group_get_description_block_invoke;
      aBlock[3] = &unk_1E524BAA8;
      int v3 = v2;
      uint32_t v20 = v3;
      uint32_t v4 = (void (**)(void))_Block_copy(aBlock);
      os_unfair_lock_lock(v2 + 43);
      v4[2](v4);
      os_unfair_lock_unlock(v2 + 43);

      uint64_t v5 = *(void *)&v3[38]._os_unfair_lock_opaque;
    }
    else
    {
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = __nw_connection_group_get_description_block_invoke_2;
      v17[3] = &unk_1E524BAA8;
      os_log_type_t v6 = v2;
      BOOL v18 = v6;
      id v7 = (void (**)(void))_Block_copy(v17);
      os_unfair_lock_lock(v2 + 43);
      v7[2](v7);
      os_unfair_lock_unlock(v2 + 43);

      uint64_t v5 = *(void *)&v6[40]._os_unfair_lock_opaque;
    }
    goto LABEL_5;
  }
  int v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v24 = "nw_connection_group_get_description";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v22 = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v10, &v22, &v21))
  {
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      uint32_t v11 = __nwlog_obj();
      os_log_type_t v12 = v22;
      if (os_log_type_enabled(v11, v22))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_connection_group_get_description";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint32_t v11 = __nwlog_obj();
      os_log_type_t v14 = v22;
      BOOL v15 = os_log_type_enabled(v11, v22);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v24 = "nw_connection_group_get_description";
          __int16 v25 = 2082;
          BOOL v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_connection_group_get_description";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint32_t v11 = __nwlog_obj();
      os_log_type_t v16 = v22;
      if (os_log_type_enabled(v11, v22))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_connection_group_get_description";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v10) {
    free(v10);
  }
  uint64_t v5 = 0;
LABEL_5:

  return v5;
}

void sub_1836B1E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __nw_connection_group_get_description_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 152))
  {
    int v3 = nw_parameters_copy_description_internal(*(NWConcrete_nw_parameters **)(v1 + 56), 0);
    asprintf((char **)(*(void *)(a1 + 32) + 152), "[G%u %s]", *(_DWORD *)(*(void *)(a1 + 32) + 168), v3);
    if (v3)
    {
      free(v3);
    }
  }
}

void __nw_connection_group_get_description_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 160))
  {
    int v3 = nw_parameters_copy_description_internal(*(NWConcrete_nw_parameters **)(v1 + 56), 0);
    asprintf((char **)(*(void *)(a1 + 32) + 160), "[G%u %s]", *(_DWORD *)(*(void *)(a1 + 32) + 168), v3);
    if (v3)
    {
      free(v3);
    }
  }
}

const char *nw_connection_group_state_to_string(unsigned int a1)
{
  if (a1 > 4) {
    return "<unknown>";
  }
  else {
    return off_1E523D0E0[a1];
  }
}

void sub_1836B3CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_group_get_next_log_id(void)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unsigned int add = atomic_fetch_add(nw_connection_group_get_next_log_id(void)::s_last_top_level_id, 1u);
  uint64_t result = add + 1;
  if (add == -2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136446466;
      uint32_t v4 = "nw_connection_group_get_next_log_id";
      __int16 v5 = 1024;
      int v6 = -1;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_ERROR, "%{public}s reached %u group logging ids, wrapping", (uint8_t *)&v3, 0x12u);
    }

    return nw_connection_group_get_next_log_id();
  }
  return result;
}

void sub_1836B3F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_group_add_connection_locked(NWConcrete_nw_connection_group *a1, NWConcrete_nw_connection *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  uint32_t v4 = a2;
  __int16 v5 = v4;
  if (!v3)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (!__nwlog_fault(v17, &type, &v66)) {
      goto LABEL_117;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v66)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v40, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_117:
        if (!v17) {
          goto LABEL_131;
        }
LABEL_118:
        free(v17);
        goto LABEL_131;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_1830D4000, v18, v40, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v56 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_1830D4000, v18, v56, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_116:

    goto LABEL_117;
  }
  if (!*((void *)v3 + 13))
  {
    uint32_t v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (!__nwlog_fault(v17, &type, &v66)) {
      goto LABEL_117;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null group->connections", buf, 0xCu);
      }
      goto LABEL_116;
    }
    if (!v66)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_1830D4000, v18, v57, "%{public}s called with null group->connections, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_116;
    }
    BOOL v42 = (char *)__nw_create_backtrace_string();
    BOOL v18 = __nwlog_obj();
    os_log_type_t v43 = type;
    BOOL v44 = os_log_type_enabled(v18, type);
    if (!v42)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_1830D4000, v18, v43, "%{public}s called with null group->connections, no backtrace", buf, 0xCu);
      }
      goto LABEL_116;
    }
    if (v44)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v42;
      _os_log_impl(&dword_1830D4000, v18, v43, "%{public}s called with null group->connections, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_72;
  }
  if (!v4)
  {
    os_log_type_t v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (!__nwlog_fault(v17, &type, &v66)) {
      goto LABEL_117;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null new_connection", buf, 0xCu);
      }
      goto LABEL_116;
    }
    if (!v66)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v58 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_1830D4000, v18, v58, "%{public}s called with null new_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_116;
    }
    BOOL v42 = (char *)__nw_create_backtrace_string();
    BOOL v18 = __nwlog_obj();
    os_log_type_t v45 = type;
    BOOL v46 = os_log_type_enabled(v18, type);
    if (!v42)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_1830D4000, v18, v45, "%{public}s called with null new_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_116;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v42;
      _os_log_impl(&dword_1830D4000, v18, v45, "%{public}s called with null new_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_72:

    free(v42);
    if (!v17) {
      goto LABEL_131;
    }
    goto LABEL_118;
  }
  int v6 = v3;
  id v7 = *((id *)v6 + 7);
  if (v7)
  {
    os_log_type_t v8 = v7;
    id v9 = *(id *)(v8[13] + 136);

    if (!v9)
    {
      unsigned __int16 v28 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
      __int16 v29 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v66 = 0;
      if (!__nwlog_fault(v29, &type, &v66)) {
        goto LABEL_138;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v66)
      {
        os_log_type_t v50 = (char *)__nw_create_backtrace_string();
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v51 = type;
        BOOL v52 = os_log_type_enabled(v30, type);
        if (v50)
        {
          if (v52)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v50;
            _os_log_impl(&dword_1830D4000, v30, v51, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v50);
          if (!v29) {
            goto LABEL_140;
          }
          goto LABEL_139;
        }
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_1830D4000, v30, v51, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_1830D4000, v30, v60, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_137;
    }
    os_log_type_t v10 = nw_context_copy_workloop(v9);
    if (v10) {
      goto LABEL_10;
    }
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
    }
    id v11 = (id)nw_context_copy_implicit_context::implicit_context;
    os_log_type_t v10 = nw_context_copy_workloop(v11);

    if (v10)
    {
LABEL_10:

      if (v10)
      {
        nw_connection_group_prune_connections_locked(v6);
        if (!nw_parameters_get_logging_disabled(*((void *)v6 + 7)) && gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          uint32_t v34 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            int v35 = *((_DWORD *)v6 + 42);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v35;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v5;
            _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Adding connection (%@) to group", buf, 0x1Cu);
          }
        }
        os_log_type_t v12 = v5;
        uint32_t v13 = v12 + 34;
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __nw_connection_set_group_uuid_block_invoke;
        *(void *)&unsigned char buf[24] = &unk_1E52491B0;
        os_log_type_t v14 = v12;
        os_log_type_t v69 = v14;
        os_log_type_t v70 = (char *)v6 + 120;
        os_unfair_lock_lock(v13);
        (*(void (**)(unsigned char *))&buf[16])(buf);
        os_unfair_lock_unlock(v13);

        nw_array_insert_object_at_index(*((void *)v3 + 13), v14, 0);
        if (!nw_parameters_get_logging_disabled(*((void *)v6 + 7)) && gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          __int16 v36 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v37 = *((void *)v3 + 13);
            if (v37) {
              uint64_t v37 = (uint64_t)(*(void *)(v37 + 24) - *(void *)(v37 + 16)) >> 3;
            }
            int v38 = *((_DWORD *)v6 + 42);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v38;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v37;
            _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] group has %zu connections", buf, 0x1Cu);
          }
        }
        handler[0] = MEMORY[0x1E4F143A8];
        handler[1] = 3221225472;
        handler[2] = ___ZL41nw_connection_group_add_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
        handler[3] = &unk_1E524BB98;
        os_log_type_t v64 = v6;
        BOOL v15 = v14;
        BOOL v65 = v15;
        nw_connection_set_state_changed_handler(v15, handler);
        nw_connection_set_queue(v15, v10);

LABEL_130:
        goto LABEL_131;
      }
      goto LABEL_125;
    }
    uint64_t v32 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
    __int16 v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (__nwlog_fault(v29, &type, &v66))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null workloop", buf, 0xCu);
        }
LABEL_137:

        goto LABEL_138;
      }
      if (!v66)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v61 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_1830D4000, v30, v61, "%{public}s called with null workloop, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_137;
      }
      os_log_type_t v53 = (char *)__nw_create_backtrace_string();
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v54 = type;
      BOOL v55 = os_log_type_enabled(v30, type);
      if (!v53)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_1830D4000, v30, v54, "%{public}s called with null workloop, no backtrace", buf, 0xCu);
        }
        goto LABEL_137;
      }
      if (v55)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v53;
        _os_log_impl(&dword_1830D4000, v30, v54, "%{public}s called with null workloop, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v53);
    }
LABEL_138:
    if (!v29)
    {
LABEL_140:
      os_log_type_t v10 = 0;
      goto LABEL_10;
    }
LABEL_139:
    free(v29);
    goto LABEL_140;
  }
  BOOL v24 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
  __int16 v25 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v66 = 0;
  if (__nwlog_fault(v25, &type, &v66))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v66)
    {
      id v47 = (char *)__nw_create_backtrace_string();
      BOOL v26 = __nwlog_obj();
      os_log_type_t v48 = type;
      BOOL v49 = os_log_type_enabled(v26, type);
      if (v47)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v47;
          _os_log_impl(&dword_1830D4000, v26, v48, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v47);
        goto LABEL_122;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
        _os_log_impl(&dword_1830D4000, v26, v48, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v26 = __nwlog_obj();
      os_log_type_t v59 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
        _os_log_impl(&dword_1830D4000, v26, v59, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_122:
  if (v25) {
    free(v25);
  }

LABEL_125:
  if (!nw_parameters_get_logging_disabled(*((void *)v6 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    os_log_type_t v10 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v62 = *((_DWORD *)v6 + 42);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_add_connection_locked";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v62;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot copy workloop, cannot add connection", buf, 0x12u);
    }
    goto LABEL_130;
  }
LABEL_131:
}

void sub_1836B5000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_group_prune_connections_locked(NWConcrete_nw_connection_group *a1)
{
  *(void *)((char *)&v59[2] + 2) = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint32_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 13);
    if (v3) {
      unint64_t v4 = (uint64_t)(*(void *)(v3 + 24) - *(void *)(v3 + 16)) >> 3;
    }
    else {
      unint64_t v4 = 0;
    }
    if (v4 < *((unsigned int *)v1 + 45)) {
      goto LABEL_6;
    }
    while (1)
    {
      __int16 v5 = nw_array_remove_object_at_index(*((void *)v2 + 13), (char *)--v4);
      if (!nw_parameters_get_logging_disabled(*((void *)v2 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        int v6 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v7 = *((_DWORD *)v2 + 42);
          *(_DWORD *)buf = 136446722;
          os_log_type_t v57 = "nw_connection_group_prune_connections_locked";
          __int16 v58 = 1024;
          LODWORD(v59[0]) = v7;
          WORD2(v59[0]) = 2112;
          *(void *)((char *)v59 + 6) = v5;
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [G%u] pruning connection %@", buf, 0x1Cu);
        }
      }
      nw_connection_reset_client(v5);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = ___ZL44nw_connection_group_prune_connections_lockedP30NWConcrete_nw_connection_group_block_invoke;
      handler[3] = &unk_1E524BB98;
      os_log_type_t v8 = v2;
      BOOL v52 = v8;
      id v9 = v5;
      os_log_type_t v53 = v9;
      nw_connection_set_state_changed_handler(v9, handler);
      os_log_type_t v10 = v8;
      id v11 = *((id *)v2 + 7);
      os_log_type_t v12 = v11;
      if (!v11)
      {
        __int16 v17 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        os_log_type_t v57 = "nw_connection_group_copy_workloop";
        BOOL v18 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v54 = 0;
        if (__nwlog_fault(v18, &type, &v54))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v19 = __nwlog_obj();
            os_log_type_t v20 = type;
            if (os_log_type_enabled(v19, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v57 = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null parameters", buf, 0xCu);
            }
            goto LABEL_67;
          }
          if (v54)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            os_log_type_t v19 = __nwlog_obj();
            os_log_type_t v31 = type;
            BOOL v32 = os_log_type_enabled(v19, type);
            if (backtrace_string)
            {
              if (v32)
              {
                *(_DWORD *)buf = 136446466;
                os_log_type_t v57 = "nw_connection_group_copy_workloop";
                __int16 v58 = 2082;
                v59[0] = backtrace_string;
                _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              goto LABEL_68;
            }
            if (v32)
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v57 = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            os_log_type_t v19 = __nwlog_obj();
            os_log_type_t v38 = type;
            if (os_log_type_enabled(v19, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v57 = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_1830D4000, v19, v38, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
            }
          }
LABEL_67:
        }
LABEL_68:
        if (v18) {
          free(v18);
        }
        BOOL v15 = 0;
        goto LABEL_20;
      }
      uint32_t v13 = v11;
      id v14 = *(id *)(v13[13] + 136);

      if (!v14) {
        break;
      }
      BOOL v15 = nw_context_copy_workloop(v14);
      if (v15) {
        goto LABEL_19;
      }
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
      }
      id v16 = (id)nw_context_copy_implicit_context::implicit_context;
      BOOL v15 = nw_context_copy_workloop(v16);

      if (v15) {
        goto LABEL_19;
      }
      os_log_type_t v27 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v57 = "nw_connection_group_copy_workloop";
      unsigned __int16 v28 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t v23 = (char *)v28;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v54 = 0;
      if (__nwlog_fault(v28, &type, &v54))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v24 = v28;
          __int16 v25 = __nwlog_obj();
          os_log_type_t v29 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v57 = "nw_connection_group_copy_workloop";
            _os_log_impl(&dword_1830D4000, v25, v29, "%{public}s called with null workloop", buf, 0xCu);
          }
LABEL_61:

          os_log_type_t v23 = (char *)v24;
          goto LABEL_62;
        }
        if (!v54)
        {
          BOOL v24 = v28;
          __int16 v25 = __nwlog_obj();
          os_log_type_t v40 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v57 = "nw_connection_group_copy_workloop";
            _os_log_impl(&dword_1830D4000, v25, v40, "%{public}s called with null workloop, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_61;
        }
        __int16 v36 = (char *)__nw_create_backtrace_string();
        uint32_t v34 = __nwlog_obj();
        os_log_type_t v50 = type;
        BOOL v37 = os_log_type_enabled(v34, type);
        if (!v36)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v57 = "nw_connection_group_copy_workloop";
            _os_log_impl(&dword_1830D4000, v34, v50, "%{public}s called with null workloop, no backtrace", buf, 0xCu);
          }
LABEL_73:

          goto LABEL_62;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v57 = "nw_connection_group_copy_workloop";
          __int16 v58 = 2082;
          v59[0] = v36;
          _os_log_impl(&dword_1830D4000, v34, v50, "%{public}s called with null workloop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
      }
LABEL_62:
      if (v23) {
        goto LABEL_63;
      }
LABEL_64:
      BOOL v15 = 0;
LABEL_19:

LABEL_20:
      nw_connection_set_queue(v9, (dispatch_queue_t)v15);
      nw_connection_start(v9);
      nw_connection_cancel(v9);

      if (v4 < *((unsigned int *)v2 + 45)) {
        goto LABEL_6;
      }
    }
    os_log_type_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v57 = "nw_connection_group_copy_workloop";
    os_log_type_t v22 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t v23 = (char *)v22;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v22, &type, &v54)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v24 = v22;
      __int16 v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v57 = "nw_connection_group_copy_workloop";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null context", buf, 0xCu);
      }
      goto LABEL_61;
    }
    if (!v54)
    {
      BOOL v24 = v22;
      __int16 v25 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v57 = "nw_connection_group_copy_workloop";
        _os_log_impl(&dword_1830D4000, v25, v39, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_61;
    }
    os_log_type_t v33 = (char *)__nw_create_backtrace_string();
    uint32_t v34 = __nwlog_obj();
    os_log_type_t v49 = type;
    BOOL v35 = os_log_type_enabled(v34, type);
    if (v33)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v57 = "nw_connection_group_copy_workloop";
        __int16 v58 = 2082;
        v59[0] = v33;
        _os_log_impl(&dword_1830D4000, v34, v49, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v33);
      if (!v23) {
        goto LABEL_64;
      }
LABEL_63:
      free(v23);
      goto LABEL_64;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v57 = "nw_connection_group_copy_workloop";
      _os_log_impl(&dword_1830D4000, v34, v49, "%{public}s called with null context, no backtrace", buf, 0xCu);
    }
    goto LABEL_73;
  }
  BOOL v41 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v57 = "nw_connection_group_prune_connections_locked";
  BOOL v42 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v54 = 0;
  if (__nwlog_fault(v42, &type, &v54))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v43 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v43, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v57 = "nw_connection_group_prune_connections_locked";
        _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v54)
    {
      os_log_type_t v45 = (char *)__nw_create_backtrace_string();
      os_log_type_t v43 = __nwlog_obj();
      os_log_type_t v46 = type;
      BOOL v47 = os_log_type_enabled(v43, type);
      if (v45)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v57 = "nw_connection_group_prune_connections_locked";
          __int16 v58 = 2082;
          v59[0] = v45;
          _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v45);
        goto LABEL_93;
      }
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v57 = "nw_connection_group_prune_connections_locked";
        _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v43 = __nwlog_obj();
      os_log_type_t v48 = type;
      if (os_log_type_enabled(v43, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v57 = "nw_connection_group_prune_connections_locked";
        _os_log_impl(&dword_1830D4000, v43, v48, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_93:
  if (v42) {
    free(v42);
  }
LABEL_6:
}

void sub_1836B5BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void ___ZL41nw_connection_group_add_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  int v6 = *(void **)(a1 + 32);
  int v7 = *(void **)(a1 + 40);
  id v8 = v6;
  id v9 = v7;
  os_log_type_t v91 = v5;
  if (!v8)
  {
    os_log_type_t v63 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
    os_log_type_t v64 = (char *)_os_log_send_and_compose_impl();

    v135[0] = 16;
    v131[0] = 0;
    if (!__nwlog_fault(v64, v135, v131)) {
      goto LABEL_170;
    }
    if (v135[0] == 17)
    {
      BOOL v65 = __nwlog_obj();
      os_log_type_t v66 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_1830D4000, v65, v66, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v131[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v65 = __nwlog_obj();
      os_log_type_t v74 = v135[0];
      BOOL v75 = os_log_type_enabled(v65, (os_log_type_t)v135[0]);
      if (backtrace_string)
      {
        if (v75)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v65, v74, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_170:
        if (!v64) {
          goto LABEL_21;
        }
LABEL_171:
        free(v64);
        goto LABEL_21;
      }
      if (v75)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_1830D4000, v65, v74, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v65 = __nwlog_obj();
      os_log_type_t v81 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_1830D4000, v65, v81, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_169:

    goto LABEL_170;
  }
  if (!v9)
  {
    os_log_type_t v67 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
    os_log_type_t v64 = (char *)_os_log_send_and_compose_impl();

    v135[0] = 16;
    v131[0] = 0;
    if (!__nwlog_fault(v64, v135, v131)) {
      goto LABEL_170;
    }
    if (v135[0] == 17)
    {
      BOOL v65 = __nwlog_obj();
      os_log_type_t v68 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_1830D4000, v65, v68, "%{public}s called with null connection", buf, 0xCu);
      }
      goto LABEL_169;
    }
    if (!v131[0])
    {
      BOOL v65 = __nwlog_obj();
      os_log_type_t v82 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_1830D4000, v65, v82, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_169;
    }
    os_log_type_t v76 = (char *)__nw_create_backtrace_string();
    BOOL v65 = __nwlog_obj();
    os_log_type_t v77 = v135[0];
    BOOL v78 = os_log_type_enabled(v65, (os_log_type_t)v135[0]);
    if (!v76)
    {
      if (v78)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_1830D4000, v65, v77, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_169;
    }
    if (v78)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v76;
      _os_log_impl(&dword_1830D4000, v65, v77, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_150;
  }
  if (!a2)
  {
    os_log_type_t v69 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
    os_log_type_t v64 = (char *)_os_log_send_and_compose_impl();

    v135[0] = 16;
    v131[0] = 0;
    if (!__nwlog_fault(v64, v135, v131)) {
      goto LABEL_170;
    }
    if (v135[0] == 17)
    {
      BOOL v65 = __nwlog_obj();
      os_log_type_t v70 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_1830D4000, v65, v70, "%{public}s called with null connection_state", buf, 0xCu);
      }
      goto LABEL_169;
    }
    if (!v131[0])
    {
      BOOL v65 = __nwlog_obj();
      os_log_type_t v83 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_1830D4000, v65, v83, "%{public}s called with null connection_state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_169;
    }
    os_log_type_t v76 = (char *)__nw_create_backtrace_string();
    BOOL v65 = __nwlog_obj();
    os_log_type_t v79 = v135[0];
    BOOL v80 = os_log_type_enabled(v65, (os_log_type_t)v135[0]);
    if (!v76)
    {
      if (v80)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_1830D4000, v65, v79, "%{public}s called with null connection_state, no backtrace", buf, 0xCu);
      }
      goto LABEL_169;
    }
    if (v80)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v76;
      _os_log_impl(&dword_1830D4000, v65, v79, "%{public}s called with null connection_state, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_150:

    free(v76);
    if (!v64) {
      goto LABEL_21;
    }
    goto LABEL_171;
  }
  if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    os_log_type_t v10 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if (a2 > 5) {
        id v11 = "unknown";
      }
      else {
        id v11 = off_1E523DF08[a2];
      }
      int v12 = *((_DWORD *)v8 + 42);
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_connection_state_changed";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v9;
      *(_WORD *)&buf[28] = 2080;
      *(void *)&buf[30] = v11;
      *(_WORD *)&buf[38] = 2112;
      v139 = v91;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] connection %@ entered state %s (error %@)", buf, 0x30u);
    }
  }
  uint64_t v119 = 0;
  int v120 = &v119;
  uint64_t v121 = 0x2020000000;
  char v122 = 0;
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
  *(void *)&unsigned char buf[24] = &unk_1E5242570;
  uint32_t v13 = v8;
  *(void *)&unsigned char buf[32] = v13;
  id v14 = v9;
  v139 = v14;
  uint32_t v140 = &v119;
  BOOL v15 = (void (**)(void))_Block_copy(buf);
  os_unfair_lock_lock((os_unfair_lock_t)v8 + 43);
  v15[2](v15);
  os_unfair_lock_unlock((os_unfair_lock_t)v8 + 43);

  if (*((unsigned char *)v120 + 24))
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      id v16 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        int v17 = v13[42];
        *(_DWORD *)v135 = 136446722;
        *(void *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
        *(_WORD *)&v135[12] = 1024;
        *(_DWORD *)&v135[14] = v17;
        *(_WORD *)&v135[18] = 2112;
        *(void *)&v135[20] = v14;
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s [G%u] connection %@ is no longer part of the group", v135, 0x1Cu);
      }
LABEL_19:
    }
    goto LABEL_20;
  }
  switch(a2)
  {
    case 1u:
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        id v16 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          int v18 = v13[42];
          *(_DWORD *)v135 = 136446722;
          *(void *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = v18;
          *(_WORD *)&v135[18] = 2112;
          *(void *)&v135[20] = v14;
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] connection %@ in waiting state", v135, 0x1Cu);
        }
        goto LABEL_19;
      }
      goto LABEL_20;
    case 2u:
      if ((int)v13[10] <= 2)
      {
        if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          os_log_type_t v38 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
          {
            int v39 = v13[42];
            *(_DWORD *)v135 = 136446722;
            *(void *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
            *(_WORD *)&v135[12] = 1024;
            *(_DWORD *)&v135[14] = v39;
            *(_WORD *)&v135[18] = 2112;
            *(void *)&v135[20] = v14;
            _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] connection %@ in preparing state", v135, 0x1Cu);
          }
        }
        os_log_type_t v40 = (void *)*((void *)v13 + 8);
        if (v40)
        {
          BOOL v41 = v40;
          int v42 = v41[2];

          if (v42 == 2 && (*((unsigned char *)v13 + 190) & 4) != 0)
          {
            *(void *)v135 = MEMORY[0x1E4F143A8];
            *(void *)&v135[8] = 3221225472;
            *(void *)&v135[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_136;
            *(void *)&v135[24] = &unk_1E524B9A0;
            *(void *)&v135[32] = v13;
            uint32_t v136 = v14;
            os_log_type_t v43 = _Block_copy(v135);
            *(void *)v131 = v43;
            nw_synchronize<void({block_pointer} {__strong})(void)>((os_unfair_lock_s *)v8 + 43, (uint64_t)v131);
          }
        }
      }
      goto LABEL_20;
    case 3u:
      if ((int)v13[10] > 2) {
        goto LABEL_20;
      }
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        os_log_type_t v19 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          int v20 = v13[42];
          *(_DWORD *)v135 = 136446722;
          *(void *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = v20;
          *(_WORD *)&v135[18] = 2112;
          *(void *)&v135[20] = v14;
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] connection %@ in ready state", v135, 0x1Cu);
        }
      }
      os_log_type_t v21 = (void *)*((void *)v13 + 8);
      if (v21)
      {
        os_log_type_t v22 = v21;
        int v23 = v22[2];

        if (v23 == 2)
        {
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 3221225472;
          aBlock[2] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_137;
          aBlock[3] = &unk_1E524B9A0;
          v116 = v13;
          BOOL v117 = v14;
          BOOL v24 = _Block_copy(aBlock);
          id v118 = v24;
          nw_synchronize<void({block_pointer} {__strong})(void)>((os_unfair_lock_s *)v8 + 43, (uint64_t)&v118);
        }
      }
      uint64_t v109 = 0;
      v110 = &v109;
      uint64_t v111 = 0x3032000000;
      uint64_t v112 = __Block_byref_object_copy__138;
      DNSServiceErrorType v113 = __Block_byref_object_dispose__139;
      id v114 = 0;
      uint64_t v103 = 0;
      size_t v104 = &v103;
      uint64_t v105 = 0x3032000000;
      char v106 = __Block_byref_object_copy__138;
      size_t v107 = __Block_byref_object_dispose__139;
      id v108 = 0;
      *(void *)v135 = MEMORY[0x1E4F143A8];
      *(void *)&v135[8] = 3221225472;
      *(void *)&v135[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_140;
      *(void *)&v135[24] = &unk_1E5244950;
      uint32_t v136 = &v109;
      __int16 v25 = v13;
      *(void *)&v135[32] = v25;
      v137 = &v103;
      os_log_type_t v26 = (void (**)(void))_Block_copy(v135);
      os_unfair_lock_lock((os_unfair_lock_t)v8 + 43);
      v26[2](v26);
      os_unfair_lock_unlock((os_unfair_lock_t)v8 + 43);

      if (!v110[5])
      {
        if (v104[5]) {
          goto LABEL_135;
        }
        uint64_t v99 = 0;
        unsigned int v100 = &v99;
        int v102 = 0;
        uint64_t v101 = 0x2020000000;
        uint64_t v95 = 0;
        uint64_t v96 = &v95;
        uint64_t v97 = 0x2020000000;
        char v98 = 0;
        *(void *)v131 = MEMORY[0x1E4F143A8];
        *(void *)&v131[8] = 3221225472;
        *(void *)&v131[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_141;
        *(void *)&v131[24] = &unk_1E5244950;
        v133 = &v99;
        os_log_type_t v46 = v25;
        id v132 = v46;
        v134 = &v95;
        BOOL v47 = _Block_copy(v131);
        unsigned int v94 = v47;
        nw_synchronize<void({block_pointer} {__strong})(void)>((os_unfair_lock_s *)v8 + 43, (uint64_t)&v94);

        if (!*((unsigned char *)v96 + 24) || (*((_DWORD *)v100 + 6) - 1) > 1)
        {
          if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
            }
            char v54 = (id)gconnection_groupLogObj;
            if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
              int v55 = v46[42];
              int v123 = 136446722;
              v124 = "nw_connection_group_handle_connection_state_changed";
              __int16 v125 = 1024;
              int v126 = v55;
              __int16 v127 = 2112;
              v128 = v14;
              _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_INFO, "%{public}s [G%u] connection %@ ready, not reading because there is no receive handler", (uint8_t *)&v123, 0x1Cu);
            }
          }
          goto LABEL_134;
        }
        if (nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
        {
LABEL_134:

          _Block_object_dispose(&v95, 8);
          _Block_object_dispose(&v99, 8);
          goto LABEL_135;
        }
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        id v48 = (id)gconnection_groupLogObj;
        int v49 = v46[42];
        int v123 = 136446722;
        v124 = "nw_connection_group_handle_connection_state_changed";
        __int16 v125 = 1024;
        int v126 = v49;
        __int16 v127 = 2112;
        v128 = v14;
        os_log_type_t v50 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v92 = 0;
        if (__nwlog_fault(v50, &type, &v92))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
            }
            os_log_type_t v51 = (id)gconnection_groupLogObj;
            os_log_type_t v52 = type;
            if (os_log_type_enabled(v51, type))
            {
              int v53 = v46[42];
              int v123 = 136446722;
              v124 = "nw_connection_group_handle_connection_state_changed";
              __int16 v125 = 1024;
              int v126 = v53;
              __int16 v127 = 2112;
              v128 = v14;
              _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s [G%u] group started and connection %@ ready, not reading because there is no receive handler", (uint8_t *)&v123, 0x1Cu);
            }
          }
          else if (v92)
          {
            os_log_type_t v56 = __nw_create_backtrace_string();
            if (v56)
            {
              os_log_type_t v57 = (char *)v56;
              if (__nwlog_connection_group_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
              }
              __int16 v58 = (id)gconnection_groupLogObj;
              os_log_type_t v59 = type;
              if (os_log_type_enabled(v58, type))
              {
                int v60 = v46[42];
                int v123 = 136446978;
                v124 = "nw_connection_group_handle_connection_state_changed";
                __int16 v125 = 1024;
                int v126 = v60;
                __int16 v127 = 2112;
                v128 = v14;
                __int16 v129 = 2082;
                v130 = v57;
                _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s [G%u] group started and connection %@ ready, not reading because there is no receive handler, dumping backtrace:%{public}s", (uint8_t *)&v123, 0x26u);
              }

              free(v57);
              goto LABEL_132;
            }
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
            }
            os_log_type_t v51 = (id)gconnection_groupLogObj;
            os_log_type_t v71 = type;
            if (os_log_type_enabled(v51, type))
            {
              int v72 = v46[42];
              int v123 = 136446722;
              v124 = "nw_connection_group_handle_connection_state_changed";
              __int16 v125 = 1024;
              int v126 = v72;
              __int16 v127 = 2112;
              v128 = v14;
              _os_log_impl(&dword_1830D4000, v51, v71, "%{public}s [G%u] group started and connection %@ ready, not reading because there is no receive handler, no backtrace", (uint8_t *)&v123, 0x1Cu);
            }
          }
          else
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
            }
            os_log_type_t v51 = (id)gconnection_groupLogObj;
            os_log_type_t v61 = type;
            if (os_log_type_enabled(v51, type))
            {
              int v62 = v46[42];
              int v123 = 136446722;
              v124 = "nw_connection_group_handle_connection_state_changed";
              __int16 v125 = 1024;
              int v126 = v62;
              __int16 v127 = 2112;
              v128 = v14;
              _os_log_impl(&dword_1830D4000, v51, v61, "%{public}s [G%u] group started and connection %@ ready, not reading because there is no receive handler, backtrace limit exceeded", (uint8_t *)&v123, 0x1Cu);
            }
          }
        }
LABEL_132:
        if (v50) {
          free(v50);
        }
        goto LABEL_134;
      }
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        os_log_type_t v27 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          int v28 = v25[42];
          *(_DWORD *)v131 = 136446722;
          *(void *)&v131[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v131[12] = 1024;
          *(_DWORD *)&v131[14] = v28;
          *(_WORD *)&v131[18] = 2112;
          *(void *)&v131[20] = v14;
          _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] connection %@ ready, reading", v131, 0x1Cu);
        }
      }
      os_log_type_t v29 = v25;
      os_log_type_t v30 = v14;
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        os_log_type_t v84 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
        {
          int v85 = v29[42];
          *(_DWORD *)v131 = 136446722;
          *(void *)&v131[4] = "nw_connection_group_read_on_connection";
          *(_WORD *)&v131[12] = 1024;
          *(_DWORD *)&v131[14] = v85;
          *(_WORD *)&v131[18] = 2112;
          *(void *)&v131[20] = v30;
          _os_log_impl(&dword_1830D4000, v84, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] reading on connection %@", v131, 0x1Cu);
        }
      }
      unsigned int v31 = v29[44];
      if (!v31)
      {
        unsigned int v31 = 1;
        if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
        {
          if (gLogDatapath)
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
            }
            unsigned int v88 = (id)gconnection_groupLogObj;
            if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
            {
              int v89 = v29[42];
              *(_DWORD *)v131 = 136446466;
              *(void *)&v131[4] = "nw_connection_group_read_on_connection";
              *(_WORD *)&v131[12] = 1024;
              *(_DWORD *)&v131[14] = v89;
              _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] overriding max size for reads to 1 since message size is 0", v131, 0x12u);
            }

            unsigned int v31 = 1;
          }
        }
      }
      unsigned int v32 = v29[44];
      if (v32 >= 0xFFFFFFFE) {
        unsigned int v32 = -2;
      }
      unsigned int v90 = v32;
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        uint32_t v86 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
        {
          int v87 = v29[42];
          *(_DWORD *)v131 = 136446978;
          *(void *)&v131[4] = "nw_connection_group_read_on_connection";
          *(_WORD *)&v131[12] = 1024;
          *(_DWORD *)&v131[14] = v87;
          *(_WORD *)&v131[18] = 1024;
          *(_DWORD *)&v131[20] = v90;
          *(_WORD *)&v131[24] = 1024;
          *(_DWORD *)&v131[26] = v31;
          _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] reading with min: %u, max: %u", v131, 0x1Eu);
        }
      }
      *(void *)v131 = MEMORY[0x1E4F143A8];
      *(void *)&v131[8] = 3221225472;
      *(void *)&v131[16] = ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
      *(void *)&v131[24] = &unk_1E5248D98;
      os_log_type_t v33 = v29;
      id v132 = v33;
      uint32_t v34 = v30;
      v133 = v34;
      nw_connection_receive_internal(v34, 0, v90, v31, v131);

LABEL_135:
      _Block_object_dispose(&v103, 8);

      _Block_object_dispose(&v109, 8);
LABEL_20:

      _Block_object_dispose(&v119, 8);
LABEL_21:

      return;
    case 4u:
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        os_log_type_t v44 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          int v45 = v13[42];
          *(_DWORD *)v135 = 136446978;
          *(void *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = v45;
          *(_WORD *)&v135[18] = 2112;
          *(void *)&v135[20] = v14;
          *(_WORD *)&v135[28] = 2112;
          *(void *)&v135[30] = v91;
          _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_ERROR, "%{public}s [G%u] connection %@ failed with error %@", v135, 0x26u);
        }
      }
      nw_connection_cancel(v14);
      goto LABEL_20;
    case 5u:
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        BOOL v35 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          int v36 = v13[42];
          *(_DWORD *)v135 = 136446722;
          *(void *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = v36;
          *(_WORD *)&v135[18] = 2112;
          *(void *)&v135[20] = v14;
          _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Connection %@ cancelled", v135, 0x1Cu);
        }
      }
      *(void *)v135 = MEMORY[0x1E4F143A8];
      *(void *)&v135[8] = 3221225472;
      *(void *)&v135[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_142;
      *(void *)&v135[24] = &unk_1E524B9A0;
      *(void *)&v135[32] = v13;
      uint32_t v136 = v14;
      BOOL v37 = (void (**)(void))_Block_copy(v135);
      os_unfair_lock_lock((os_unfair_lock_t)v8 + 43);
      v37[2](v37);
      os_unfair_lock_unlock((os_unfair_lock_t)v8 + 43);

      goto LABEL_20;
    default:
      goto LABEL_20;
  }
}

void sub_1836B74BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);

  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void *___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke(void *result)
{
  uint64_t v1 = result[5];
  uint64_t v2 = *(void *)(result[4] + 104);
  if (v2) {
    BOOL v3 = v1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    goto LABEL_10;
  }
  id v5 = *(void **)(v2 + 16);
  unint64_t v4 = *(void **)(v2 + 24);
  if (v5 != v4)
  {
    while (*v5 != v1)
    {
      if (++v5 == v4)
      {
        id v5 = v4;
        break;
      }
    }
  }
  if (v5 == v4) {
LABEL_10:
  }
    *(unsigned char *)(*(void *)(result[6] + 8) + 24) = 1;
  return result;
}

void ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_136(uint64_t a1)
{
}

void nw_synchronize<void({block_pointer} {__strong})(void)>(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_lock(a1);
  (*(void (**)(void))(*(void *)a2 + 16))();

  os_unfair_lock_unlock(a1);
}

void ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_137(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 190) & 0x10) != 0)
  {
    if ((*(unsigned char *)(v2 + 190) & 0x40) == 0)
    {
      if (!nw_parameters_get_logging_disabled(*(void *)(v2 + 56)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        BOOL v3 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
          int v5 = 136446466;
          int v6 = "nw_connection_group_handle_connection_state_changed_block_invoke";
          __int16 v7 = 1024;
          int v8 = v4;
          _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] listener ready and first connection ready", (uint8_t *)&v5, 0x12u);
        }
      }
      nw_connection_group_set_state_locked(*(void **)(a1 + 32), 2, 0);
    }
  }
  else
  {
    nw_connection_group_create_listener_from_connection_locked((NWConcrete_nw_connection_group *)v2, *(NWConcrete_nw_connection **)(a1 + 40));
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 190) |= 0x40u;
}

void *__Block_byref_object_copy__138(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__139(uint64_t a1)
{
}

void ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_140(void *a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1[4] + 136));
  uint64_t v3 = *(void *)(a1[5] + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  int v5 = _Block_copy(*(const void **)(a1[4] + 144));
  uint64_t v6 = *(void *)(a1[6] + 8);
  __int16 v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  uint64_t v188 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a2;
  nw_content_context_t v10 = a3;
  id v11 = a5;
  data = v9;
  if (nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)) || !gLogDatapath)
  {
    if (v11) {
      goto LABEL_4;
    }
LABEL_67:
    if (v10)
    {
      int v48 = 1;
      if (!v9) {
        goto LABEL_81;
      }
    }
    else
    {
      nw_content_context_t v10 = nw_content_context_create("connection_group incoming message");
      int v48 = 1;
      if (!v9) {
        goto LABEL_81;
      }
    }
    if (a4) {
      goto LABEL_81;
    }
    size_t size = dispatch_data_get_size(v9);
    uint64_t v50 = *(void *)(a1 + 32);
    if (size < *(unsigned int *)(v50 + 176)) {
      goto LABEL_81;
    }
    char v51 = *(unsigned char *)(v50 + 190);
    BOOL logging_disabled = nw_parameters_get_logging_disabled(*(void *)(v50 + 56));
    if ((v51 & 2) == 0)
    {
      if (!logging_disabled)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        int v53 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          int v54 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
          size_t v55 = dispatch_data_get_size(data);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection_block_invoke";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v54;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v55;
          _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] oversized message is %zu bytes and not yet complete, delivering partial message", buf, 0x1Cu);
        }
      }
      int v48 = 0;
LABEL_81:
      BOOL v58 = v10 == (nw_content_context_t)&__block_literal_global_6_42258
         || v10 == (nw_content_context_t)&__block_literal_global_42249
         || v10 == (nw_content_context_t)&__block_literal_global_8_42267
         || v10 == (nw_content_context_t)&__block_literal_global_10_42276;
      char v59 = v58;
      if (v58 && !nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        unsigned int v90 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
        {
          int v91 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection_block_invoke";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v91;
          _os_log_impl(&dword_1830D4000, v90, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] context is static", buf, 0x12u);
        }
      }
      *(void *)os_log_type_t type = 0;
      nw_endpoint_type_t v171 = type;
      uint64_t v172 = 0x3032000000;
      int v173 = __Block_byref_object_copy__138;
      nw_endpoint_type_t v174 = __Block_byref_object_dispose__139;
      id v175 = 0;
      uint64_t v164 = 0;
      v165 = &v164;
      uint64_t v166 = 0x3032000000;
      nw_endpoint_type_t v167 = __Block_byref_object_copy__8624;
      v168 = __Block_byref_object_dispose__8625;
      id v169 = 0;
      int v60 = *(os_unfair_lock_s **)(a1 + 32);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_146;
      aBlock[3] = &unk_1E5244950;
      id v162 = type;
      uint32_t v161 = v60;
      v163 = &v164;
      os_log_type_t v61 = (void (**)(void))_Block_copy(aBlock);
      os_unfair_lock_lock(v60 + 43);
      v61[2](v61);
      os_unfair_lock_unlock(v60 + 43);

      if (!*((void *)v171 + 5) || !v165[5])
      {
        if (nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
        {
          int v48 = 0;
          if (v10) {
            goto LABEL_108;
          }
          goto LABEL_150;
        }
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        os_log_type_t v73 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v74 = *(void *)(a1 + 40);
          int v75 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection_block_invoke";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v75;
          *(_WORD *)&buf[18] = 2112;
          *(void *)&buf[20] = v74;
          _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] no receive handler or client queue, stopping reads on connection %@", buf, 0x1Cu);
        }
        int v48 = 0;
LABEL_107:

        if (v10)
        {
LABEL_108:
          os_log_type_t v76 = v10;
          if (v10 == (nw_content_context_t)&__block_literal_global_42249
            || v10 == (nw_content_context_t)&__block_literal_global_10_42276)
          {

            goto LABEL_157;
          }
          int v77 = 1;
          if (v10 != (nw_content_context_t)&__block_literal_global_6_42258
            && v10 != (nw_content_context_t)&__block_literal_global_8_42267)
          {
            int v77 = BYTE6(v76[14].isa) & 1;
          }

          if ((v77 & a4 & 1) == 0)
          {
LABEL_157:
            if (v48)
            {
              nw_connection_group_touch_connection(*(NWConcrete_nw_connection_group **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40));
              uint64_t v96 = *(void **)(a1 + 40);
              id v97 = *(id *)(a1 + 32);
              id v98 = v96;
              uint64_t v99 = v98;
              if (v97)
              {
                if (v98)
                {
                  if (!nw_parameters_get_logging_disabled(*((void *)v97 + 7)) && gLogDatapath)
                  {
                    if (__nwlog_connection_group_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
                    }
                    id v118 = (id)gconnection_groupLogObj;
                    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
                    {
                      int v119 = *((_DWORD *)v97 + 42);
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v119;
                      *(_WORD *)&buf[18] = 2112;
                      *(void *)&buf[20] = v99;
                      _os_log_impl(&dword_1830D4000, v118, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] reading on connection %@", buf, 0x1Cu);
                    }
                  }
                  unsigned int v100 = *((_DWORD *)v97 + 44);
                  if (!v100)
                  {
                    unsigned int v100 = 1;
                    if (!nw_parameters_get_logging_disabled(*((void *)v97 + 7)))
                    {
                      if (gLogDatapath)
                      {
                        if (__nwlog_connection_group_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
                        }
                        uint32_t v136 = (id)gconnection_groupLogObj;
                        if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
                        {
                          int v137 = *((_DWORD *)v97 + 42);
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
                          *(_WORD *)&unsigned char buf[12] = 1024;
                          *(_DWORD *)&buf[14] = v137;
                          _os_log_impl(&dword_1830D4000, v136, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] overriding max size for reads to 1 since message size is 0", buf, 0x12u);
                        }

                        unsigned int v100 = 1;
                      }
                    }
                  }
                  if (*((_DWORD *)v97 + 44) >= 0xFFFFFFFE) {
                    unsigned int v101 = -2;
                  }
                  else {
                    unsigned int v101 = *((_DWORD *)v97 + 44);
                  }
                  if (!nw_parameters_get_logging_disabled(*((void *)v97 + 7)) && gLogDatapath)
                  {
                    if (__nwlog_connection_group_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
                    }
                    int v120 = (id)gconnection_groupLogObj;
                    if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
                    {
                      int v121 = *((_DWORD *)v97 + 42);
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v121;
                      *(_WORD *)&buf[18] = 1024;
                      *(_DWORD *)&buf[20] = v101;
                      *(_WORD *)&unsigned char buf[24] = 1024;
                      *(_DWORD *)&buf[26] = v100;
                      _os_log_impl(&dword_1830D4000, v120, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] reading with min: %u, max: %u", buf, 0x1Eu);
                    }
                  }
                  *(void *)buf = MEMORY[0x1E4F143A8];
                  *(void *)&buf[8] = 3221225472;
                  *(void *)&buf[16] = ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
                  *(void *)&unsigned char buf[24] = &unk_1E5248D98;
                  *(void *)&unsigned char buf[32] = v97;
                  id v179 = v99;
                  nw_connection_receive_internal(v179, 0, v101, v100, buf);

                  goto LABEL_171;
                }
                v116 = __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
                DNSServiceErrorType v113 = (char *)_os_log_send_and_compose_impl();

                os_log_type_t v177 = OS_LOG_TYPE_ERROR;
                char v176 = 0;
                if (__nwlog_fault(v113, &v177, &v176))
                {
                  if (v177 == OS_LOG_TYPE_FAULT)
                  {
                    id v114 = __nwlog_obj();
                    os_log_type_t v117 = v177;
                    if (os_log_type_enabled(v114, v177))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
                      _os_log_impl(&dword_1830D4000, v114, v117, "%{public}s called with null connection", buf, 0xCu);
                    }
                  }
                  else if (v176)
                  {
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    id v114 = __nwlog_obj();
                    os_log_type_t v134 = v177;
                    BOOL v135 = os_log_type_enabled(v114, v177);
                    if (backtrace_string)
                    {
                      if (v135)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = backtrace_string;
                        _os_log_impl(&dword_1830D4000, v114, v134, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(backtrace_string);
                      if (!v113) {
                        goto LABEL_171;
                      }
                      goto LABEL_299;
                    }
                    if (v135)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
                      _os_log_impl(&dword_1830D4000, v114, v134, "%{public}s called with null connection, no backtrace", buf, 0xCu);
                    }
                  }
                  else
                  {
                    id v114 = __nwlog_obj();
                    os_log_type_t v147 = v177;
                    if (os_log_type_enabled(v114, v177))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
                      _os_log_impl(&dword_1830D4000, v114, v147, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
                    }
                  }
                  goto LABEL_297;
                }
LABEL_298:
                if (!v113)
                {
LABEL_171:

LABEL_174:
                  _Block_object_dispose(&v164, 8);

                  _Block_object_dispose(type, 8);
                  goto LABEL_175;
                }
LABEL_299:
                free(v113);
                goto LABEL_171;
              }
              uint64_t v112 = __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
              DNSServiceErrorType v113 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v177 = OS_LOG_TYPE_ERROR;
              char v176 = 0;
              if (!__nwlog_fault(v113, &v177, &v176)) {
                goto LABEL_298;
              }
              if (v177 == OS_LOG_TYPE_FAULT)
              {
                id v114 = __nwlog_obj();
                os_log_type_t v115 = v177;
                if (os_log_type_enabled(v114, v177))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
                  _os_log_impl(&dword_1830D4000, v114, v115, "%{public}s called with null group", buf, 0xCu);
                }
              }
              else if (v176)
              {
                v130 = (char *)__nw_create_backtrace_string();
                id v114 = __nwlog_obj();
                os_log_type_t v131 = v177;
                BOOL v132 = os_log_type_enabled(v114, v177);
                if (v130)
                {
                  if (v132)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v130;
                    _os_log_impl(&dword_1830D4000, v114, v131, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v130);
                  goto LABEL_298;
                }
                if (v132)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
                  _os_log_impl(&dword_1830D4000, v114, v131, "%{public}s called with null group, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                id v114 = __nwlog_obj();
                os_log_type_t v146 = v177;
                if (os_log_type_enabled(v114, v177))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection";
                  _os_log_impl(&dword_1830D4000, v114, v146, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
                }
              }
LABEL_297:

              goto LABEL_298;
            }
LABEL_172:
            if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)) && gLogDatapath)
            {
              if (__nwlog_connection_group_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
              }
              int v102 = (id)gconnection_groupLogObj;
              if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v103 = *(void *)(a1 + 40);
                int v104 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection_block_invoke";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v104;
                *(_WORD *)&buf[18] = 2112;
                *(void *)&buf[20] = v103;
                _os_log_impl(&dword_1830D4000, v102, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] stopping reads on %@", buf, 0x1Cu);
              }
            }
            goto LABEL_174;
          }
LABEL_151:
          if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
            }
            char v92 = (id)gconnection_groupLogObj;
            if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
            {
              int v93 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
              identifier = nw_content_context_get_identifier(v10);
              uint64_t v95 = *(void **)(a1 + 40);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection_block_invoke";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v93;
              *(_WORD *)&buf[18] = 2048;
              *(void *)&buf[20] = v10;
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = identifier;
              *(_WORD *)&buf[38] = 2112;
              id v179 = v95;
              _os_log_impl(&dword_1830D4000, v92, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] final, complete content context (%p: %s), stopping reading on %@", buf, 0x30u);
            }
          }
          goto LABEL_172;
        }
LABEL_150:
        if (!a4) {
          goto LABEL_157;
        }
        goto LABEL_151;
      }
      int v62 = *(void **)(a1 + 40);
      nw_content_context_t v63 = v10;
      id v64 = v62;
      BOOL v65 = v64;
      if (v63)
      {
        if (v64)
        {
          if ((v59 & 1) == 0)
          {
            os_unfair_lock_lock((os_unfair_lock_t)&v63[14]);
            BYTE6(v63[14].isa) |= 0x10u;
            BOOL v66 = nw_array_create();
            Class isa = v63[13].isa;
            v63[13].Class isa = (Class)v66;

            nw_array_append((uint64_t)v63[13].isa, v65);
            os_unfair_lock_unlock((os_unfair_lock_t)&v63[14]);
          }
LABEL_100:

          os_log_type_t v68 = (void *)v165[5];
          dispatch_qos_class_t v69 = *(_DWORD *)(*(void *)(a1 + 32) + 16);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_2;
          block[3] = &unk_1E523BAD0;
          int v155 = v63;
          v156 = data;
          id v70 = *(id *)(a1 + 32);
          char v159 = a4;
          id v157 = v70;
          v158 = type;
          os_log_type_t v71 = v68;
          dispatch_block_t v72 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v69, 0, block);
          dispatch_async(v71, v72);

          os_log_type_t v73 = v155;
          goto LABEL_107;
        }
        id v108 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
        v152 = (void *)_os_log_send_and_compose_impl();

        os_log_type_t v177 = OS_LOG_TYPE_ERROR;
        char v176 = 0;
        if (!__nwlog_fault((const char *)v152, &v177, &v176))
        {
LABEL_290:
          if (v152) {
            free(v152);
          }
          goto LABEL_100;
        }
        if (v177 == OS_LOG_TYPE_FAULT)
        {
          char v106 = __nwlog_obj();
          os_log_type_t v109 = v177;
          if (os_log_type_enabled(v106, v177))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_1830D4000, v106, v109, "%{public}s called with null connection", buf, 0xCu);
          }
LABEL_289:

          goto LABEL_290;
        }
        if (!v176)
        {
          char v106 = __nwlog_obj();
          os_log_type_t v139 = v177;
          if (os_log_type_enabled(v106, v177))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_1830D4000, v106, v139, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_289;
        }
        char v122 = (char *)__nw_create_backtrace_string();
        char v106 = __nwlog_obj();
        os_log_type_t v151 = v177;
        BOOL v124 = os_log_type_enabled(v106, v177);
        if (!v122)
        {
          if (v124)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_1830D4000, v106, v151, "%{public}s called with null connection, no backtrace", buf, 0xCu);
          }
          goto LABEL_289;
        }
        if (v124)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v122;
          _os_log_impl(&dword_1830D4000, v106, v151, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v105 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
        v152 = (void *)_os_log_send_and_compose_impl();

        os_log_type_t v177 = OS_LOG_TYPE_ERROR;
        char v176 = 0;
        if (!__nwlog_fault((const char *)v152, &v177, &v176)) {
          goto LABEL_290;
        }
        if (v177 == OS_LOG_TYPE_FAULT)
        {
          char v106 = __nwlog_obj();
          os_log_type_t v107 = v177;
          if (os_log_type_enabled(v106, v177))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_1830D4000, v106, v107, "%{public}s called with null context", buf, 0xCu);
          }
          goto LABEL_289;
        }
        if (!v176)
        {
          char v106 = __nwlog_obj();
          os_log_type_t v138 = v177;
          if (os_log_type_enabled(v106, v177))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_1830D4000, v106, v138, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_289;
        }
        char v122 = (char *)__nw_create_backtrace_string();
        char v106 = __nwlog_obj();
        os_log_type_t v150 = v177;
        BOOL v123 = os_log_type_enabled(v106, v177);
        if (!v122)
        {
          if (v123)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_1830D4000, v106, v150, "%{public}s called with null context, no backtrace", buf, 0xCu);
          }
          goto LABEL_289;
        }
        if (v123)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v122;
          _os_log_impl(&dword_1830D4000, v106, v150, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v122);
      goto LABEL_290;
    }
    if (!logging_disabled)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      BOOL v78 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        int v79 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        size_t v80 = dispatch_data_get_size(data);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v79;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v80;
        _os_log_impl(&dword_1830D4000, v78, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] oversized message is %zu bytes and not yet complete, rejecting as error", buf, 0x1Cu);
      }
    }
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      os_log_type_t v81 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
      {
        uint64_t v82 = *(void *)(a1 + 40);
        int v83 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v83;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v82;
        _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_INFO, "%{public}s [G%u] failing connection %@ due to oversized message", buf, 0x1Cu);
      }
    }
    os_log_type_t v84 = *(void **)(a1 + 40);
    id v23 = *(id *)(a1 + 32);
    int v85 = v84;
    __int16 v25 = v85;
    if (v23)
    {
      if (v85)
      {
        if (!nw_parameters_get_logging_disabled(*((void *)v23 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          uint32_t v86 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
          {
            int v87 = *((_DWORD *)v23 + 42);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v87;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v25;
            _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_INFO, "%{public}s [G%u] cancelling connection %@", buf, 0x1Cu);
          }
        }
        nw_connection_cancel(v25);
        if (!nw_parameters_get_logging_disabled(*((void *)v23 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          unsigned int v88 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
          {
            int v89 = *((_DWORD *)v23 + 42);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v89;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v25;
            _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] cancelled %@", buf, 0x1Cu);
          }
        }
        goto LABEL_32;
      }
      v128 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
      BOOL v35 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v164) = 0;
      if (__nwlog_fault(v35, type, &v164))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          int v126 = __nwlog_obj();
          os_log_type_t v129 = type[0];
          if (os_log_type_enabled(v126, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_1830D4000, v126, v129, "%{public}s called with null connection", buf, 0xCu);
          }
        }
        else if ((_BYTE)v164)
        {
          uint64_t v143 = (char *)__nw_create_backtrace_string();
          int v126 = __nwlog_obj();
          os_log_type_t v144 = type[0];
          BOOL v145 = os_log_type_enabled(v126, type[0]);
          if (v143)
          {
            if (v145)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v143;
              _os_log_impl(&dword_1830D4000, v126, v144, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v143);
            if (!v35) {
              goto LABEL_32;
            }
            goto LABEL_234;
          }
          if (v145)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_1830D4000, v126, v144, "%{public}s called with null connection, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          int v126 = __nwlog_obj();
          os_log_type_t v149 = type[0];
          if (os_log_type_enabled(v126, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_1830D4000, v126, v149, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_311;
      }
LABEL_312:
      if (!v35) {
        goto LABEL_32;
      }
      goto LABEL_234;
    }
    __int16 v125 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
    BOOL v35 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v164) = 0;
    if (!__nwlog_fault(v35, type, &v164)) {
      goto LABEL_312;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v126 = __nwlog_obj();
      os_log_type_t v127 = type[0];
      if (os_log_type_enabled(v126, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_1830D4000, v126, v127, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if ((_BYTE)v164)
    {
      uint32_t v140 = (char *)__nw_create_backtrace_string();
      int v126 = __nwlog_obj();
      os_log_type_t v141 = type[0];
      BOOL v142 = os_log_type_enabled(v126, type[0]);
      if (v140)
      {
        if (v142)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v140;
          _os_log_impl(&dword_1830D4000, v126, v141, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v140);
        goto LABEL_312;
      }
      if (v142)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_1830D4000, v126, v141, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v126 = __nwlog_obj();
      os_log_type_t v148 = type[0];
      if (os_log_type_enabled(v126, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_1830D4000, v126, v148, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_311:

    goto LABEL_312;
  }
  if (__nwlog_connection_group_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
  }
  os_log_type_t v30 = (id)gconnection_groupLogObj;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v31 = *(void *)(a1 + 40);
    int v32 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
    if (data) {
      os_log_type_t v33 = (void *)dispatch_data_get_size(data);
    }
    else {
      os_log_type_t v33 = 0;
    }
    if (v10) {
      uint64_t v46 = nw_content_context_get_identifier(v10);
    }
    else {
      uint64_t v46 = "";
    }
    *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection_block_invoke";
    *(_WORD *)&unsigned char buf[12] = 1024;
    BOOL v47 = "not ";
    *(_DWORD *)buf = 136448258;
    if (a4) {
      BOOL v47 = "";
    }
    *(_DWORD *)&buf[14] = v32;
    *(_WORD *)&buf[18] = 2112;
    *(void *)&buf[20] = v31;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = data;
    *(_WORD *)&buf[38] = 2048;
    id v179 = v33;
    __int16 v180 = 2048;
    nw_content_context_t v181 = v10;
    __int16 v182 = 2080;
    int v183 = v46;
    __int16 v184 = 2080;
    os_log_type_t v185 = v47;
    __int16 v186 = 2112;
    id v187 = v11;
    _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] connection %@ received message (data %p, length %zu bytes, context %p %s, %scomplete, error %@)", buf, 0x58u);
  }

  uint64_t v9 = data;
  if (!v11) {
    goto LABEL_67;
  }
LABEL_4:
  int v12 = v11;
  int v13 = v12[2];

  if (v13 != 1 || (v14 = v12, int v15 = v14[3], v14, v15 != 89))
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      os_log_type_t v19 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = *(void *)(a1 + 40);
        int v21 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v21;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v20;
        *(_WORD *)&buf[28] = 2112;
        *(void *)&buf[30] = v12;
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_INFO, "%{public}s [G%u] encountered error on connection %@: %@", buf, 0x26u);
      }
    }
    os_log_type_t v22 = *(void **)(a1 + 40);
    id v23 = *(id *)(a1 + 32);
    BOOL v24 = v22;
    __int16 v25 = v24;
    if (v23)
    {
      if (v24)
      {
        if (!nw_parameters_get_logging_disabled(*((void *)v23 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          os_log_type_t v26 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            int v27 = *((_DWORD *)v23 + 42);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v27;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v25;
            _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_INFO, "%{public}s [G%u] cancelling connection %@", buf, 0x1Cu);
          }
        }
        nw_connection_cancel(v25);
        if (!nw_parameters_get_logging_disabled(*((void *)v23 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          int v28 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            int v29 = *((_DWORD *)v23 + 42);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v29;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v25;
            _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] cancelled %@", buf, 0x1Cu);
          }
        }
        goto LABEL_32;
      }
      os_log_type_t v38 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
      BOOL v35 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v164) = 0;
      if (__nwlog_fault(v35, type, &v164))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          int v36 = __nwlog_obj();
          os_log_type_t v39 = type[0];
          if (os_log_type_enabled(v36, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_1830D4000, v36, v39, "%{public}s called with null connection", buf, 0xCu);
          }
        }
        else if ((_BYTE)v164)
        {
          os_log_type_t v43 = (char *)__nw_create_backtrace_string();
          int v36 = __nwlog_obj();
          os_log_type_t v44 = type[0];
          BOOL v45 = os_log_type_enabled(v36, type[0]);
          if (v43)
          {
            if (v45)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v43;
              _os_log_impl(&dword_1830D4000, v36, v44, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v43);
            if (!v35) {
              goto LABEL_32;
            }
            goto LABEL_234;
          }
          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_1830D4000, v36, v44, "%{public}s called with null connection, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          int v36 = __nwlog_obj();
          os_log_type_t v111 = type[0];
          if (os_log_type_enabled(v36, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_1830D4000, v36, v111, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_232;
      }
LABEL_233:
      if (!v35)
      {
LABEL_32:

        goto LABEL_175;
      }
LABEL_234:
      free(v35);
      goto LABEL_32;
    }
    uint32_t v34 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
    BOOL v35 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v164) = 0;
    if (!__nwlog_fault(v35, type, &v164)) {
      goto LABEL_233;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v36 = __nwlog_obj();
      os_log_type_t v37 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if ((_BYTE)v164)
    {
      os_log_type_t v40 = (char *)__nw_create_backtrace_string();
      int v36 = __nwlog_obj();
      os_log_type_t v41 = type[0];
      BOOL v42 = os_log_type_enabled(v36, type[0]);
      if (v40)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v40;
          _os_log_impl(&dword_1830D4000, v36, v41, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v40);
        goto LABEL_233;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_1830D4000, v36, v41, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v36 = __nwlog_obj();
      os_log_type_t v110 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_1830D4000, v36, v110, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_232:

    goto LABEL_233;
  }
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    id v16 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(void *)(a1 + 40);
      int v18 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v18;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v17;
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] reads cancelled for connection %@", buf, 0x1Cu);
    }
  }
LABEL_175:
}

void sub_1836B9BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void *___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_141(void *result)
{
  *(_DWORD *)(*(void *)(result[5] + 8) + 24) = *(_DWORD *)(result[4] + 40);
  *(unsigned char *)(*(void *)(result[6] + 8) + 24) = *(unsigned char *)(result[4] + 190) & 1;
  return result;
}

void ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_142(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(id *)(a1 + 32);
  id v4 = v2;
  int v5 = v4;
  if (!v3)
  {
    id v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v39 = "nw_connection_group_remove_connection_locked";
    int v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v12, &type, &v36)) {
      goto LABEL_70;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v39 = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v13 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v39 = "nw_connection_group_remove_connection_locked";
          __int16 v40 = 2082;
          *(void *)os_log_type_t v41 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_70:
        if (!v12) {
          goto LABEL_6;
        }
LABEL_71:
        free(v12);
        goto LABEL_6;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v39 = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v13 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v39 = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_1830D4000, v13, v32, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_69:

    goto LABEL_70;
  }
  if (v4)
  {
    uint64_t v6 = v3[13];
    if (v6)
    {
      nw_array_remove_object(v6, (uint64_t)v5);
      if (!nw_parameters_get_logging_disabled(v3[7]))
      {
        if (gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          int v21 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            int v22 = *((_DWORD *)v3 + 42);
            *(_DWORD *)buf = 136446722;
            os_log_type_t v39 = "nw_connection_group_remove_connection_locked";
            __int16 v40 = 1024;
            *(_DWORD *)os_log_type_t v41 = v22;
            *(_WORD *)&v41[4] = 2112;
            *(void *)&v41[6] = v5;
            _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] removed connection %@", buf, 0x1Cu);
          }
        }
      }
    }
    goto LABEL_6;
  }
  int v15 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v39 = "nw_connection_group_remove_connection_locked";
  int v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (!__nwlog_fault(v12, &type, &v36)) {
    goto LABEL_70;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v13 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v39 = "nw_connection_group_remove_connection_locked";
      _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null connection", buf, 0xCu);
    }
    goto LABEL_69;
  }
  if (!v36)
  {
    int v13 = __nwlog_obj();
    os_log_type_t v33 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v39 = "nw_connection_group_remove_connection_locked";
      _os_log_impl(&dword_1830D4000, v13, v33, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_69;
  }
  os_log_type_t v26 = (char *)__nw_create_backtrace_string();
  int v13 = __nwlog_obj();
  os_log_type_t v27 = type;
  BOOL v28 = os_log_type_enabled(v13, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v39 = "nw_connection_group_remove_connection_locked";
      _os_log_impl(&dword_1830D4000, v13, v27, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_69;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v39 = "nw_connection_group_remove_connection_locked";
    __int16 v40 = 2082;
    *(void *)os_log_type_t v41 = v26;
    _os_log_impl(&dword_1830D4000, v13, v27, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v26);
  if (v12) {
    goto LABEL_71;
  }
LABEL_6:

  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    uint64_t v17 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(v18 + 104);
      if (v19) {
        uint64_t v20 = (uint64_t)(*(void *)(v19 + 24) - *(void *)(v19 + 16)) >> 3;
      }
      else {
        uint64_t v20 = 0;
      }
      int v31 = *(_DWORD *)(v18 + 168);
      *(_DWORD *)buf = 136446978;
      os_log_type_t v39 = "nw_connection_group_handle_connection_state_changed_block_invoke";
      __int16 v40 = 1024;
      *(_DWORD *)os_log_type_t v41 = v31;
      *(_WORD *)&v41[4] = 2048;
      *(void *)&v41[6] = v20;
      __int16 v42 = 2112;
      uint64_t v43 = v19;
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] now has %zu active connections: %@", buf, 0x26u);
    }
  }
  if (nw_array_is_empty(*(void *)(*(void *)(a1 + 32) + 104)))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (*(char *)(v7 + 190) < 0)
    {
      if (!nw_parameters_get_logging_disabled(*(void *)(v7 + 56)) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        int v29 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          int v30 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
          *(_DWORD *)buf = 136446466;
          os_log_type_t v39 = "nw_connection_group_handle_connection_state_changed_block_invoke";
          __int16 v40 = 1024;
          *(_DWORD *)os_log_type_t v41 = v30;
          _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] now has no active connections, cancelling group", buf, 0x12u);
        }
      }
      nw_connection_group_final_cleanup_locked(*(NWConcrete_nw_connection_group **)(a1 + 32));
    }
    else
    {
      int v8 = *(void **)(v7 + 64);
      if (v8)
      {
        uint64_t v9 = v8;
        BOOL v10 = v9[2] == 2;

        if (v10)
        {
          if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)) && gLogDatapath)
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
            }
            uint32_t v34 = (id)gconnection_groupLogObj;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              int v35 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
              *(_DWORD *)buf = 136446466;
              os_log_type_t v39 = "nw_connection_group_handle_connection_state_changed_block_invoke";
              __int16 v40 = 1024;
              *(_DWORD *)os_log_type_t v41 = v35;
              _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] now has no active connections, going into failed state", buf, 0x12u);
            }
          }
          nw_connection_group_set_state_locked(*(void **)(a1 + 32), 3, 0);
        }
      }
    }
  }
}

void nw_connection_group_final_cleanup_locked(NWConcrete_nw_connection_group *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v1 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v3 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v4 = *((_DWORD *)v2 + 42);
        *(_DWORD *)buf = 136446466;
        int v21 = "nw_connection_group_final_cleanup_locked";
        __int16 v22 = 1024;
        LODWORD(v23) = v4;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s [G%u] final group cleanup", buf, 0x12u);
      }
    }
    nw_connection_group_set_state_locked(v2, 4, 0);
    int v5 = (void *)*((void *)v2 + 4);
    *((void *)v2 + 4) = 0;

    uint64_t v6 = (void *)*((void *)v2 + 17);
    *((void *)v2 + 17) = 0;

    uint64_t v7 = (void *)*((void *)v2 + 18);
    *((void *)v2 + 18) = 0;

    int v8 = (void *)*((void *)v2 + 1);
    *((void *)v2 + 1) = 0;

    uint64_t v9 = (void *)*((void *)v2 + 3);
    *((void *)v2 + 3) = 0;

    goto LABEL_9;
  }
  BOOL v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v21 = "nw_connection_group_final_cleanup_locked";
  id v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        int v21 = "nw_connection_group_final_cleanup_locked";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          int v21 = "nw_connection_group_final_cleanup_locked";
          __int16 v22 = 2082;
          id v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        int v21 = "nw_connection_group_final_cleanup_locked";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        int v21 = "nw_connection_group_final_cleanup_locked";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_26:
  if (v11) {
    free(v11);
  }
LABEL_9:
}

void sub_1836BA85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_group_set_state_locked(void *a1, signed int a2, void *a3)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  int v5 = a1;
  uint64_t v6 = a3;
  uint64_t v7 = v6;
  if (!v5)
  {
    nw_content_context_t v63 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v77 = "nw_connection_group_set_state_locked";
    int v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (__nwlog_fault(v30, &type, &v74))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v31 = __nwlog_obj();
        os_log_type_t v64 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          int v77 = "nw_connection_group_set_state_locked";
          _os_log_impl(&dword_1830D4000, v31, v64, "%{public}s called with null group", buf, 0xCu);
        }
LABEL_91:

        goto LABEL_92;
      }
      if (!v74)
      {
        int v31 = __nwlog_obj();
        os_log_type_t v68 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          int v77 = "nw_connection_group_set_state_locked";
          _os_log_impl(&dword_1830D4000, v31, v68, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_91;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v31 = __nwlog_obj();
      os_log_type_t v66 = type;
      BOOL v67 = os_log_type_enabled(v31, type);
      if (!backtrace_string)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446210;
          int v77 = "nw_connection_group_set_state_locked";
          _os_log_impl(&dword_1830D4000, v31, v66, "%{public}s called with null group, no backtrace", buf, 0xCu);
        }
        goto LABEL_91;
      }
      if (v67)
      {
        *(_DWORD *)buf = 136446466;
        int v77 = "nw_connection_group_set_state_locked";
        __int16 v78 = 2082;
        *(void *)int v79 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v31, v66, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_92:
    if (!v30) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  unsigned int v8 = v5[10];
  if (v8 == a2 && *((char **)v5 + 6) == v6)
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v5 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v9 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v25 = v5[42];
        uint64_t v26 = v5[10];
        if (v26 > 4) {
          os_log_type_t v27 = "<unknown>";
        }
        else {
          os_log_type_t v27 = off_1E523D0E0[v26];
        }
        int v53 = (char *)*((void *)v5 + 6);
        int v54 = off_1E523D0E0[a2];
        *(_DWORD *)buf = 136447490;
        int v77 = "nw_connection_group_set_state_locked";
        __int16 v78 = 1024;
        *(_DWORD *)int v79 = v25;
        *(_WORD *)&v79[4] = 2082;
        *(void *)&v79[6] = v27;
        __int16 v80 = 2114;
        os_log_type_t v81 = v53;
        __int16 v82 = 2082;
        int v83 = v54;
        __int16 v84 = 2114;
        int v85 = v7;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Ignoring state transition from (%{public}s, error: %{public}@) -> (%{public}s, error: %{public}@)", buf, 0x3Au);
      }
      goto LABEL_68;
    }
    goto LABEL_94;
  }
  if (v8 == 4)
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v5 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v9 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v10 = v5[42];
        uint64_t v11 = v5[10];
        if (v11 > 4) {
          int v12 = "<unknown>";
        }
        else {
          int v12 = off_1E523D0E0[v11];
        }
        BOOL v28 = off_1E523D0E0[a2];
        *(_DWORD *)buf = 136447234;
        int v77 = "nw_connection_group_set_state_locked";
        __int16 v78 = 1024;
        *(_DWORD *)int v79 = v10;
        *(_WORD *)&v79[4] = 2082;
        *(void *)&v79[6] = v12;
        __int16 v80 = 2082;
        os_log_type_t v81 = v28;
        __int16 v82 = 2114;
        int v83 = v7;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Ignoring state transition from %{public}s -> %{public}s (error %{public}@) while cancelled", buf, 0x30u);
      }
LABEL_68:

      goto LABEL_94;
    }
    goto LABEL_94;
  }
  if (v6 && !nw_parameters_get_logging_disabled(*((void *)v5 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    os_log_type_t v13 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = v5[42];
      *(_DWORD *)buf = 136446722;
      int v77 = "nw_connection_group_set_state_locked";
      __int16 v78 = 1024;
      *(_DWORD *)int v79 = v14;
      *(_WORD *)&v79[4] = 2112;
      *(void *)&v79[6] = v7;
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] failed (error %@)", buf, 0x1Cu);
    }
  }
  signed int v15 = v5[10];
  BOOL logging_disabled = nw_parameters_get_logging_disabled(*((void *)v5 + 7));
  if (v15 > a2)
  {
    if (logging_disabled) {
      goto LABEL_94;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    id v17 = (id)gconnection_groupLogObj;
    unsigned int v18 = v5[42];
    uint64_t v19 = v5[10];
    if (v19 > 4) {
      uint64_t v20 = "<unknown>";
    }
    else {
      uint64_t v20 = off_1E523D0E0[v19];
    }
    int v29 = off_1E523D0E0[a2];
    *(_DWORD *)buf = 136447234;
    int v77 = "nw_connection_group_set_state_locked";
    __int16 v78 = 1024;
    *(_DWORD *)int v79 = v18;
    *(_WORD *)&v79[4] = 2082;
    *(void *)&v79[6] = v20;
    __int16 v80 = 2082;
    os_log_type_t v81 = v29;
    __int16 v82 = 2114;
    int v83 = v7;
    int v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (!__nwlog_fault(v30, &type, &v74)) {
      goto LABEL_92;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      int v31 = (id)gconnection_groupLogObj;
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        unsigned int v33 = v5[42];
        uint64_t v34 = v5[10];
        if (v34 > 4) {
          int v35 = "<unknown>";
        }
        else {
          int v35 = off_1E523D0E0[v34];
        }
        *(_DWORD *)buf = 136447234;
        int v77 = "nw_connection_group_set_state_locked";
        __int16 v78 = 1024;
        *(_DWORD *)int v79 = v33;
        *(_WORD *)&v79[4] = 2082;
        *(void *)&v79[6] = v35;
        __int16 v80 = 2082;
        os_log_type_t v81 = v29;
        __int16 v82 = 2114;
        int v83 = v7;
        _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s [G%u] invalid state transition %{public}s -> %{public}s (error %{public}@)", buf, 0x30u);
      }
    }
    else if (v74)
    {
      char v36 = __nw_create_backtrace_string();
      if (v36)
      {
        os_log_type_t v37 = (char *)v36;
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        os_log_type_t v38 = (id)gconnection_groupLogObj;
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          unsigned int v40 = v5[42];
          uint64_t v41 = v5[10];
          if (v41 > 4) {
            __int16 v42 = "<unknown>";
          }
          else {
            __int16 v42 = off_1E523D0E0[v41];
          }
          *(_DWORD *)buf = 136447490;
          int v77 = "nw_connection_group_set_state_locked";
          __int16 v78 = 1024;
          *(_DWORD *)int v79 = v40;
          *(_WORD *)&v79[4] = 2082;
          *(void *)&v79[6] = v42;
          __int16 v80 = 2082;
          os_log_type_t v81 = v29;
          __int16 v82 = 2114;
          int v83 = v7;
          __int16 v84 = 2082;
          int v85 = v37;
          _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s [G%u] invalid state transition %{public}s -> %{public}s (error %{public}@), dumping backtrace:%{public}s", buf, 0x3Au);
        }

        free(v37);
        if (!v30) {
          goto LABEL_94;
        }
LABEL_93:
        free(v30);
        goto LABEL_94;
      }
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      int v31 = (id)gconnection_groupLogObj;
      os_log_type_t v59 = type;
      if (os_log_type_enabled(v31, type))
      {
        unsigned int v60 = v5[42];
        uint64_t v61 = v5[10];
        if (v61 > 4) {
          int v62 = "<unknown>";
        }
        else {
          int v62 = off_1E523D0E0[v61];
        }
        *(_DWORD *)buf = 136447234;
        int v77 = "nw_connection_group_set_state_locked";
        __int16 v78 = 1024;
        *(_DWORD *)int v79 = v60;
        *(_WORD *)&v79[4] = 2082;
        *(void *)&v79[6] = v62;
        __int16 v80 = 2082;
        os_log_type_t v81 = v29;
        __int16 v82 = 2114;
        int v83 = v7;
        _os_log_impl(&dword_1830D4000, v31, v59, "%{public}s [G%u] invalid state transition %{public}s -> %{public}s (error %{public}@), no backtrace", buf, 0x30u);
      }
    }
    else
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      int v31 = (id)gconnection_groupLogObj;
      os_log_type_t v55 = type;
      if (os_log_type_enabled(v31, type))
      {
        unsigned int v56 = v5[42];
        uint64_t v57 = v5[10];
        if (v57 > 4) {
          BOOL v58 = "<unknown>";
        }
        else {
          BOOL v58 = off_1E523D0E0[v57];
        }
        *(_DWORD *)buf = 136447234;
        int v77 = "nw_connection_group_set_state_locked";
        __int16 v78 = 1024;
        *(_DWORD *)int v79 = v56;
        *(_WORD *)&v79[4] = 2082;
        *(void *)&v79[6] = v58;
        __int16 v80 = 2082;
        os_log_type_t v81 = v29;
        __int16 v82 = 2114;
        int v83 = v7;
        _os_log_impl(&dword_1830D4000, v31, v55, "%{public}s [G%u] invalid state transition %{public}s -> %{public}s (error %{public}@), backtrace limit exceeded", buf, 0x30u);
      }
    }
    goto LABEL_91;
  }
  if (!logging_disabled)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    int v21 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v22 = v5[42];
      uint64_t v23 = v5[10];
      if (v23 > 4) {
        uint64_t v24 = "<unknown>";
      }
      else {
        uint64_t v24 = off_1E523D0E0[v23];
      }
      uint64_t v43 = off_1E523D0E0[a2];
      *(_DWORD *)buf = 136447234;
      int v77 = "nw_connection_group_set_state_locked";
      __int16 v78 = 1024;
      *(_DWORD *)int v79 = v22;
      *(_WORD *)&v79[4] = 2082;
      *(void *)&v79[6] = v24;
      __int16 v80 = 2082;
      os_log_type_t v81 = v43;
      __int16 v82 = 2114;
      int v83 = v7;
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] state changed: %{public}s -> %{public}s (error %{public}@)", buf, 0x30u);
    }
  }
  v5[10] = a2;
  objc_storeStrong((id *)v5 + 6, a3);
  uint64_t v44 = (const void *)*((void *)v5 + 4);
  if (v44 && *((void *)v5 + 1))
  {
    BOOL v45 = _Block_copy(v44);
    uint64_t v46 = (void *)*((void *)v5 + 1);
    dispatch_qos_class_t v47 = v5[4];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZL36nw_connection_group_set_state_lockedP30NWConcrete_nw_connection_group27nw_connection_group_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
    block[3] = &unk_1E52449A0;
    id v70 = v5;
    signed int v73 = a2;
    os_log_type_t v71 = v7;
    id v72 = v45;
    int v48 = v46;
    id v49 = v45;
    dispatch_block_t v50 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v47, 0, block);
    dispatch_async(v48, v50);
  }
  else if (!nw_parameters_get_logging_disabled(*((void *)v5 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    uint64_t v9 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v51 = v5[42];
      os_log_type_t v52 = off_1E523D0E0[a2];
      *(_DWORD *)buf = 136446978;
      int v77 = "nw_connection_group_set_state_locked";
      __int16 v78 = 1024;
      *(_DWORD *)int v79 = v51;
      *(_WORD *)&v79[4] = 2080;
      *(void *)&v79[6] = v52;
      __int16 v80 = 2112;
      os_log_type_t v81 = v7;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] not delivering state %s, error %@ since no handler/queue is set", buf, 0x26u);
    }
    goto LABEL_68;
  }
LABEL_94:
}

uint64_t ___ZL36nw_connection_group_set_state_lockedP30NWConcrete_nw_connection_group27nw_connection_group_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    uint64_t v3 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      uint64_t v5 = *(unsigned int *)(a1 + 56);
      if (v5 > 4) {
        uint64_t v6 = "<unknown>";
      }
      else {
        uint64_t v6 = off_1E523D0E0[v5];
      }
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = 136446978;
      uint64_t v9 = "nw_connection_group_set_state_locked_block_invoke";
      __int16 v10 = 1024;
      int v11 = v4;
      __int16 v12 = 2080;
      os_log_type_t v13 = v6;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] delivering state %s, error %@", (uint8_t *)&v8, 0x26u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t __Block_byref_object_copy__8624(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8625(uint64_t a1)
{
}

void ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_146(void *a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1[4] + 136));
  uint64_t v3 = *(void *)(a1[5] + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void **)(a1[4] + 8);
  uint64_t v6 = (id *)(*(void *)(a1[6] + 8) + 40);

  objc_storeStrong(v6, v5);
}

void ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_2(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  BOOL v5 = v2 == &__block_literal_global_6_42258
    || v2 == &__block_literal_global_42249
    || v2 == &__block_literal_global_8_42267
    || v2 == &__block_literal_global_10_42276;
  if (!v5 || *(void *)(a1 + 40))
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 48) + 56)) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      __int16 v12 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v13 = *(_DWORD *)(*(void *)(a1 + 48) + 168);
        __int16 v14 = *(NSObject **)(a1 + 32);
        identifier = nw_content_context_get_identifier(v14);
        uint64_t v16 = *(const char **)(a1 + 40);
        if (v16) {
          size_t size = dispatch_data_get_size(*(dispatch_data_t *)(a1 + 40));
        }
        else {
          size_t size = 0;
        }
        int v18 = *(unsigned __int8 *)(a1 + 64);
        int v21 = "nw_connection_group_read_on_connection_block_invoke_2";
        int v20 = 136447746;
        __int16 v22 = 1024;
        if (v18) {
          uint64_t v19 = "true";
        }
        else {
          uint64_t v19 = "false";
        }
        int v23 = v13;
        __int16 v24 = 2048;
        unsigned int v25 = v14;
        __int16 v26 = 2080;
        os_log_type_t v27 = identifier;
        __int16 v28 = 2048;
        int v29 = v16;
        __int16 v30 = 2048;
        size_t v31 = size;
        __int16 v32 = 2080;
        unsigned int v33 = v19;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] calling receive handler with context (%p: %s), content (%p: %zu bytes), complete %s", (uint8_t *)&v20, 0x44u);
      }
    }
    (*(void (**)(void, void))(*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) + 16))(*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(a1 + 40));
  }
  else if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 48) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    uint64_t v6 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = *(_DWORD *)(*(void *)(a1 + 48) + 168);
      int v8 = *(NSObject **)(a1 + 32);
      uint64_t v9 = nw_content_context_get_identifier(v8);
      int v10 = *(unsigned __int8 *)(a1 + 64);
      int v21 = "nw_connection_group_read_on_connection_block_invoke";
      __int16 v22 = 1024;
      int v20 = 136447234;
      if (v10) {
        int v11 = "true";
      }
      else {
        int v11 = "false";
      }
      int v23 = v7;
      __int16 v24 = 2048;
      unsigned int v25 = v8;
      __int16 v26 = 2080;
      os_log_type_t v27 = v9;
      __int16 v28 = 2080;
      int v29 = v11;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [G%u] not calling receive handler with context (%p: %s), complete %s", (uint8_t *)&v20, 0x30u);
    }
  }
}

void nw_connection_group_touch_connection(NWConcrete_nw_connection_group *a1, NWConcrete_nw_connection *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  int v4 = a2;
  BOOL v5 = v4;
  if (!v3)
  {
    int v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_connection_group_touch_connection";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v8, &v25, &v24)) {
      goto LABEL_38;
    }
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_connection_group_touch_connection";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = v25;
      BOOL v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_connection_group_touch_connection";
          __int16 v28 = 2082;
          int v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_connection_group_touch_connection";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_connection_group_touch_connection";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL36nw_connection_group_touch_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
    aBlock[3] = &unk_1E524B9A0;
    __int16 v22 = v3;
    int v23 = v5;
    uint64_t v6 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 43);
    v6[2](v6);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 43);

    goto LABEL_4;
  }
  int v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_connection_group_touch_connection";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v25 = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v8, &v25, &v24)) {
    goto LABEL_38;
  }
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_connection_group_touch_connection";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v24)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_connection_group_touch_connection";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  uint64_t v16 = (char *)__nw_create_backtrace_string();
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v17 = v25;
  BOOL v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_connection_group_touch_connection";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_connection_group_touch_connection";
    __int16 v28 = 2082;
    int v29 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_1836BBED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_connection_group_touch_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (nw_array_remove_object(*(void *)(*(void *)(a1 + 32) + 104), *(void *)(a1 + 40)))
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v2 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = *(void *)(a1 + 40);
        int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        int v5 = 136446722;
        uint64_t v6 = "nw_connection_group_touch_connection_block_invoke";
        __int16 v7 = 1024;
        int v8 = v4;
        __int16 v9 = 2112;
        uint64_t v10 = v3;
        _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] touching connection %@", (uint8_t *)&v5, 0x1Cu);
      }
    }
    nw_array_insert_object_at_index(*(void *)(*(void *)(a1 + 32) + 104), *(void **)(a1 + 40), 0);
  }
}

void nw_connection_group_create_listener_from_connection_locked(NWConcrete_nw_connection_group *a1, NWConcrete_nw_connection *a2)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  int v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    BOOL v67 = __nwlog_obj();
    *(_DWORD *)handler = 136446210;
    *(void *)&void handler[4] = "nw_connection_group_create_listener_from_connection_locked";
    os_log_type_t v68 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type[0] = 0;
    if (!__nwlog_fault(v68, buf, type)) {
      goto LABEL_143;
    }
    if (buf[0] == 17)
    {
      dispatch_qos_class_t v69 = __nwlog_obj();
      os_log_type_t v70 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)handler = 136446210;
        *(void *)&void handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_1830D4000, v69, v70, "%{public}s called with null group", handler, 0xCu);
      }
    }
    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      dispatch_qos_class_t v69 = __nwlog_obj();
      os_log_type_t v74 = buf[0];
      BOOL v75 = os_log_type_enabled(v69, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v75)
        {
          *(_DWORD *)handler = 136446466;
          *(void *)&void handler[4] = "nw_connection_group_create_listener_from_connection_locked";
          *(_WORD *)&handler[12] = 2082;
          *(void *)&handler[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v69, v74, "%{public}s called with null group, dumping backtrace:%{public}s", handler, 0x16u);
        }

        free(backtrace_string);
LABEL_143:
        if (!v68) {
          goto LABEL_60;
        }
        goto LABEL_144;
      }
      if (v75)
      {
        *(_DWORD *)handler = 136446210;
        *(void *)&void handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_1830D4000, v69, v74, "%{public}s called with null group, no backtrace", handler, 0xCu);
      }
    }
    else
    {
      dispatch_qos_class_t v69 = __nwlog_obj();
      os_log_type_t v93 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)handler = 136446210;
        *(void *)&void handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_1830D4000, v69, v93, "%{public}s called with null group, backtrace limit exceeded", handler, 0xCu);
      }
    }
LABEL_142:

    goto LABEL_143;
  }
  if (!v4)
  {
    os_log_type_t v71 = __nwlog_obj();
    *(_DWORD *)handler = 136446210;
    *(void *)&void handler[4] = "nw_connection_group_create_listener_from_connection_locked";
    os_log_type_t v68 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type[0] = 0;
    if (!__nwlog_fault(v68, buf, type)) {
      goto LABEL_143;
    }
    if (buf[0] == 17)
    {
      dispatch_qos_class_t v69 = __nwlog_obj();
      os_log_type_t v72 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)handler = 136446210;
        *(void *)&void handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_1830D4000, v69, v72, "%{public}s called with null connection", handler, 0xCu);
      }
    }
    else if (type[0])
    {
      os_log_type_t v76 = (char *)__nw_create_backtrace_string();
      dispatch_qos_class_t v69 = __nwlog_obj();
      os_log_type_t v77 = buf[0];
      BOOL v78 = os_log_type_enabled(v69, (os_log_type_t)buf[0]);
      if (v76)
      {
        if (v78)
        {
          *(_DWORD *)handler = 136446466;
          *(void *)&void handler[4] = "nw_connection_group_create_listener_from_connection_locked";
          *(_WORD *)&handler[12] = 2082;
          *(void *)&handler[14] = v76;
          _os_log_impl(&dword_1830D4000, v69, v77, "%{public}s called with null connection, dumping backtrace:%{public}s", handler, 0x16u);
        }

        free(v76);
        if (!v68) {
          goto LABEL_60;
        }
LABEL_144:
        free(v68);
        goto LABEL_60;
      }
      if (v78)
      {
        *(_DWORD *)handler = 136446210;
        *(void *)&void handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_1830D4000, v69, v77, "%{public}s called with null connection, no backtrace", handler, 0xCu);
      }
    }
    else
    {
      dispatch_qos_class_t v69 = __nwlog_obj();
      os_log_type_t v94 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)handler = 136446210;
        *(void *)&void handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_1830D4000, v69, v94, "%{public}s called with null connection, backtrace limit exceeded", handler, 0xCu);
      }
    }
    goto LABEL_142;
  }
  if (*((int *)v3 + 10) <= 2 && !*((void *)v3 + 11))
  {
    nw_listener_t v6 = nw_listener_create_with_connection(&v4->super, *((nw_parameters_t *)v3 + 7));
    __int16 v7 = (void *)*((void *)v3 + 11);
    *((void *)v3 + 11) = v6;

    if (*((void *)v3 + 11))
    {
      nw_connection_group_set_state_locked(v3, 1, 0);
      int v8 = v3;
      __int16 v9 = *((void *)v3 + 11);
      BOOL v135 = v8;
      if (v9)
      {
        uint64_t v10 = v8;
        id v11 = *((id *)v3 + 7);
        os_log_type_t v12 = v11;
        if (v11)
        {
          int v13 = v11;
          id v14 = *(id *)(v13[13] + 136);

          if (!v14)
          {
            int v87 = __nwlog_obj();
            *(_DWORD *)handler = 136446210;
            *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
            unsigned int v88 = (char *)_os_log_send_and_compose_impl();

            buf[0] = 16;
            type[0] = 0;
            if (!__nwlog_fault(v88, buf, type)) {
              goto LABEL_210;
            }
            if (buf[0] == 17)
            {
              int v89 = __nwlog_obj();
              os_log_type_t v90 = buf[0];
              if (os_log_type_enabled(v89, (os_log_type_t)buf[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_1830D4000, v89, v90, "%{public}s called with null context", handler, 0xCu);
              }
            }
            else if (type[0])
            {
              unsigned int v101 = (char *)__nw_create_backtrace_string();
              int v89 = __nwlog_obj();
              os_log_type_t v132 = buf[0];
              BOOL v102 = os_log_type_enabled(v89, (os_log_type_t)buf[0]);
              if (v101)
              {
                if (v102)
                {
                  *(_DWORD *)handler = 136446466;
                  *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&handler[12] = 2082;
                  *(void *)&handler[14] = v101;
                  _os_log_impl(&dword_1830D4000, v89, v132, "%{public}s called with null context, dumping backtrace:%{public}s", handler, 0x16u);
                }

                free(v101);
                if (!v88) {
                  goto LABEL_212;
                }
                goto LABEL_211;
              }
              if (v102)
              {
                *(_DWORD *)handler = 136446210;
                *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_1830D4000, v89, v132, "%{public}s called with null context, no backtrace", handler, 0xCu);
              }
            }
            else
            {
              int v89 = __nwlog_obj();
              os_log_type_t v116 = buf[0];
              if (os_log_type_enabled(v89, (os_log_type_t)buf[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_1830D4000, v89, v116, "%{public}s called with null context, backtrace limit exceeded", handler, 0xCu);
              }
            }
            goto LABEL_209;
          }
          BOOL v15 = nw_context_copy_workloop(v14);
          if (v15) {
            goto LABEL_13;
          }
          if (nw_context_copy_implicit_context::onceToken != -1) {
            dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
          }
          id v16 = (id)nw_context_copy_implicit_context::implicit_context;
          BOOL v15 = nw_context_copy_workloop(v16);

          if (v15) {
            goto LABEL_13;
          }
          int v91 = __nwlog_obj();
          *(_DWORD *)handler = 136446210;
          *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
          unsigned int v88 = (char *)_os_log_send_and_compose_impl();

          buf[0] = 16;
          type[0] = 0;
          if (__nwlog_fault(v88, buf, type))
          {
            if (buf[0] == 17)
            {
              int v89 = __nwlog_obj();
              os_log_type_t v92 = buf[0];
              if (os_log_type_enabled(v89, (os_log_type_t)buf[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_1830D4000, v89, v92, "%{public}s called with null workloop", handler, 0xCu);
              }
LABEL_209:

              goto LABEL_210;
            }
            if (!type[0])
            {
              int v89 = __nwlog_obj();
              os_log_type_t v117 = buf[0];
              if (os_log_type_enabled(v89, (os_log_type_t)buf[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_1830D4000, v89, v117, "%{public}s called with null workloop, backtrace limit exceeded", handler, 0xCu);
              }
              goto LABEL_209;
            }
            uint64_t v103 = (char *)__nw_create_backtrace_string();
            int v89 = __nwlog_obj();
            os_log_type_t v133 = buf[0];
            BOOL v104 = os_log_type_enabled(v89, (os_log_type_t)buf[0]);
            if (!v103)
            {
              if (v104)
              {
                *(_DWORD *)handler = 136446210;
                *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_1830D4000, v89, v133, "%{public}s called with null workloop, no backtrace", handler, 0xCu);
              }
              goto LABEL_209;
            }
            if (v104)
            {
              *(_DWORD *)handler = 136446466;
              *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
              *(_WORD *)&handler[12] = 2082;
              *(void *)&handler[14] = v103;
              _os_log_impl(&dword_1830D4000, v89, v133, "%{public}s called with null workloop, dumping backtrace:%{public}s", handler, 0x16u);
            }

            free(v103);
          }
LABEL_210:
          if (!v88)
          {
LABEL_212:
            BOOL v15 = 0;
LABEL_13:

            goto LABEL_14;
          }
LABEL_211:
          free(v88);
          goto LABEL_212;
        }
        int v83 = __nwlog_obj();
        *(_DWORD *)handler = 136446210;
        *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
        __int16 v84 = (char *)_os_log_send_and_compose_impl();

        buf[0] = 16;
        type[0] = 0;
        if (__nwlog_fault(v84, buf, type))
        {
          if (buf[0] == 17)
          {
            int v85 = __nwlog_obj();
            os_log_type_t v86 = buf[0];
            if (os_log_type_enabled(v85, (os_log_type_t)buf[0]))
            {
              *(_DWORD *)handler = 136446210;
              *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s called with null parameters", handler, 0xCu);
            }
          }
          else if (type[0])
          {
            id v98 = (char *)__nw_create_backtrace_string();
            int v85 = __nwlog_obj();
            os_log_type_t v99 = buf[0];
            BOOL v100 = os_log_type_enabled(v85, (os_log_type_t)buf[0]);
            if (v98)
            {
              if (v100)
              {
                *(_DWORD *)handler = 136446466;
                *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
                *(_WORD *)&handler[12] = 2082;
                *(void *)&handler[14] = v98;
                _os_log_impl(&dword_1830D4000, v85, v99, "%{public}s called with null parameters, dumping backtrace:%{public}s", handler, 0x16u);
              }

              free(v98);
              goto LABEL_201;
            }
            if (v100)
            {
              *(_DWORD *)handler = 136446210;
              *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_1830D4000, v85, v99, "%{public}s called with null parameters, no backtrace", handler, 0xCu);
            }
          }
          else
          {
            int v85 = __nwlog_obj();
            os_log_type_t v115 = buf[0];
            if (os_log_type_enabled(v85, (os_log_type_t)buf[0]))
            {
              *(_DWORD *)handler = 136446210;
              *(void *)&void handler[4] = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_1830D4000, v85, v115, "%{public}s called with null parameters, backtrace limit exceeded", handler, 0xCu);
            }
          }
        }
LABEL_201:
        if (v84) {
          free(v84);
        }
        BOOL v15 = 0;
LABEL_14:

        nw_listener_set_queue(v9, (dispatch_queue_t)v15);
        os_log_type_t v17 = *((void *)v3 + 11);
        *(void *)handler = MEMORY[0x1E4F143A8];
        *(void *)&handler[8] = 3221225472;
        *(void *)&handler[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke;
        *(void *)&unsigned char handler[24] = &unk_1E524BA60;
        BOOL v18 = v10;
        os_log_type_t v149 = v18;
        nw_listener_set_state_changed_handler(v17, handler);
        os_log_type_t v19 = v18[8];
        if (!v19) {
          goto LABEL_39;
        }
        os_log_type_t v20 = v19;
        int v21 = v20[2];

        if (v21 == 1)
        {
          __int16 v22 = (void *)*((void *)v3 + 11);
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2;
          os_log_type_t v146 = (char *)&unk_1E523BBE0;
          int v23 = v18;
          os_log_type_t v147 = v23;
          nw_listener_set_new_packet_handler(v22, buf);
          if (!v23[12])
          {
LABEL_23:

LABEL_58:
            *((unsigned char *)v18 + 190) |= 8u;
            nw_listener_start(*((nw_listener_t *)v3 + 11));

LABEL_59:
            goto LABEL_60;
          }
          listener = v23[12];
          os_log_type_t v134 = v23;
          id v24 = *((id *)v3 + 7);
          os_log_type_t v131 = v24;
          if (v24)
          {
            os_log_type_t v25 = v24;
            id v26 = *(id *)(v25[13] + 136);

            if (v26)
            {
              BOOL v27 = nw_context_copy_workloop(v26);
              if (v27
                || (v28 = nw_context_copy_implicit_context(), BOOL v27 = nw_context_copy_workloop(v28),
                                                              v28,
                                                              v27))
              {
LABEL_21:

LABEL_22:
                nw_listener_set_queue(listener, (dispatch_queue_t)v27);

                int v29 = v23[12];
                *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
                *(void *)&os_log_type_t type[8] = 3221225472;
                *(void *)&type[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_3;
                uint64_t v143 = &unk_1E523BC08;
                uint64_t v30 = v134;
                os_log_type_t v144 = v30;
                nw_listener_set_new_connection_handler(v29, type);
                size_t v31 = v23[12];
                *(void *)uint32_t v136 = MEMORY[0x1E4F143A8];
                uint64_t v137 = 3221225472;
                os_log_type_t v138 = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_4;
                os_log_type_t v139 = &unk_1E524BA60;
                uint32_t v140 = v30;
                nw_listener_set_state_changed_handler(v31, v136);
                nw_listener_start(v23[12]);

                goto LABEL_23;
              }
              uint64_t v112 = __nwlog_obj();
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_connection_group_copy_workloop";
              os_log_type_t v129 = (char *)_os_log_send_and_compose_impl();

              v136[0] = OS_LOG_TYPE_ERROR;
              char v141 = 0;
              if (__nwlog_fault(v129, v136, &v141))
              {
                if (v136[0] == OS_LOG_TYPE_FAULT)
                {
                  os_log_type_t v110 = __nwlog_obj();
                  os_log_type_t v113 = v136[0];
                  if (os_log_type_enabled(v110, v136[0]))
                  {
                    *(_DWORD *)os_log_type_t type = 136446210;
                    *(void *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_1830D4000, v110, v113, "%{public}s called with null workloop", type, 0xCu);
                  }
LABEL_248:

                  goto LABEL_249;
                }
                if (!v141)
                {
                  os_log_type_t v110 = __nwlog_obj();
                  os_log_type_t v125 = v136[0];
                  if (os_log_type_enabled(v110, v136[0]))
                  {
                    *(_DWORD *)os_log_type_t type = 136446210;
                    *(void *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_1830D4000, v110, v125, "%{public}s called with null workloop, backtrace limit exceeded", type, 0xCu);
                  }
                  goto LABEL_248;
                }
                int v120 = (char *)__nw_create_backtrace_string();
                os_log_type_t v110 = __nwlog_obj();
                os_log_type_t v127 = v136[0];
                BOOL v122 = os_log_type_enabled(v110, v136[0]);
                if (!v120)
                {
                  if (v122)
                  {
                    *(_DWORD *)os_log_type_t type = 136446210;
                    *(void *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_1830D4000, v110, v127, "%{public}s called with null workloop, no backtrace", type, 0xCu);
                  }
                  goto LABEL_248;
                }
                if (v122)
                {
                  *(_DWORD *)os_log_type_t type = 136446466;
                  *(void *)&type[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&type[12] = 2082;
                  *(void *)&type[14] = v120;
                  _os_log_impl(&dword_1830D4000, v110, v127, "%{public}s called with null workloop, dumping backtrace:%{public}s", type, 0x16u);
                }
                goto LABEL_227;
              }
            }
            else
            {
              os_log_type_t v109 = __nwlog_obj();
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_connection_group_copy_workloop";
              os_log_type_t v129 = (char *)_os_log_send_and_compose_impl();

              v136[0] = OS_LOG_TYPE_ERROR;
              char v141 = 0;
              if (__nwlog_fault(v129, v136, &v141))
              {
                if (v136[0] == OS_LOG_TYPE_FAULT)
                {
                  os_log_type_t v110 = __nwlog_obj();
                  os_log_type_t v111 = v136[0];
                  if (os_log_type_enabled(v110, v136[0]))
                  {
                    *(_DWORD *)os_log_type_t type = 136446210;
                    *(void *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_1830D4000, v110, v111, "%{public}s called with null context", type, 0xCu);
                  }
                  goto LABEL_248;
                }
                if (!v141)
                {
                  os_log_type_t v110 = __nwlog_obj();
                  os_log_type_t v124 = v136[0];
                  if (os_log_type_enabled(v110, v136[0]))
                  {
                    *(_DWORD *)os_log_type_t type = 136446210;
                    *(void *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_1830D4000, v110, v124, "%{public}s called with null context, backtrace limit exceeded", type, 0xCu);
                  }
                  goto LABEL_248;
                }
                int v120 = (char *)__nw_create_backtrace_string();
                os_log_type_t v110 = __nwlog_obj();
                os_log_type_t v126 = v136[0];
                BOOL v121 = os_log_type_enabled(v110, v136[0]);
                if (!v120)
                {
                  if (v121)
                  {
                    *(_DWORD *)os_log_type_t type = 136446210;
                    *(void *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_1830D4000, v110, v126, "%{public}s called with null context, no backtrace", type, 0xCu);
                  }
                  goto LABEL_248;
                }
                if (v121)
                {
                  *(_DWORD *)os_log_type_t type = 136446466;
                  *(void *)&type[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&type[12] = 2082;
                  *(void *)&type[14] = v120;
                  _os_log_impl(&dword_1830D4000, v110, v126, "%{public}s called with null context, dumping backtrace:%{public}s", type, 0x16u);
                }
LABEL_227:

                free(v120);
              }
            }
LABEL_249:
            if (v129) {
              free(v129);
            }
            BOOL v27 = 0;
            goto LABEL_21;
          }
          uint64_t v105 = __nwlog_obj();
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&type[4] = "nw_connection_group_copy_workloop";
          char v106 = (char *)_os_log_send_and_compose_impl();

          v136[0] = OS_LOG_TYPE_ERROR;
          char v141 = 0;
          if (__nwlog_fault(v106, v136, &v141))
          {
            if (v136[0] == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v107 = __nwlog_obj();
              os_log_type_t v108 = v136[0];
              if (os_log_type_enabled(v107, v136[0]))
              {
                *(_DWORD *)os_log_type_t type = 136446210;
                *(void *)&type[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_1830D4000, v107, v108, "%{public}s called with null parameters", type, 0xCu);
              }
            }
            else if (v141)
            {
              id v118 = (char *)__nw_create_backtrace_string();
              os_log_type_t v107 = __nwlog_obj();
              os_log_type_t v128 = v136[0];
              BOOL v119 = os_log_type_enabled(v107, v136[0]);
              if (v118)
              {
                if (v119)
                {
                  *(_DWORD *)os_log_type_t type = 136446466;
                  *(void *)&type[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&type[12] = 2082;
                  *(void *)&type[14] = v118;
                  _os_log_impl(&dword_1830D4000, v107, v128, "%{public}s called with null parameters, dumping backtrace:%{public}s", type, 0x16u);
                }

                free(v118);
                goto LABEL_240;
              }
              if (v119)
              {
                *(_DWORD *)os_log_type_t type = 136446210;
                *(void *)&type[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_1830D4000, v107, v128, "%{public}s called with null parameters, no backtrace", type, 0xCu);
              }
            }
            else
            {
              os_log_type_t v107 = __nwlog_obj();
              os_log_type_t v123 = v136[0];
              if (os_log_type_enabled(v107, v136[0]))
              {
                *(_DWORD *)os_log_type_t type = 136446210;
                *(void *)&type[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_1830D4000, v107, v123, "%{public}s called with null parameters, backtrace limit exceeded", type, 0xCu);
              }
            }
          }
LABEL_240:
          if (v106) {
            free(v106);
          }
          BOOL v27 = 0;
          goto LABEL_22;
        }
        char v36 = v18[8];
        if (!v36) {
          goto LABEL_39;
        }
        os_log_type_t v37 = v36;
        int v38 = v37[2];

        if (v38 == 2)
        {
LABEL_35:
          unsigned int v40 = *((void *)v3 + 11);
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2_174;
          os_log_type_t v146 = (char *)&unk_1E523BC08;
          os_log_type_t v147 = v18;
          nw_listener_set_new_connection_handler(v40, buf);

          goto LABEL_58;
        }
        os_log_type_t v39 = v18[8];
        if (!v39) {
          goto LABEL_39;
        }
        if (nw_group_descriptor_get_type(v39) == 4) {
          goto LABEL_35;
        }
        if (!v18[8])
        {
LABEL_39:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v44 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
          BOOL v45 = (char *)_os_log_send_and_compose_impl();

          type[0] = 16;
          v136[0] = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v45, type, v136)) {
            goto LABEL_56;
          }
          if (type[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v46 = (id)gLogObj;
            os_log_type_t v47 = type[0];
            if (os_log_type_enabled(v46, (os_log_type_t)type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s Group descriptor is not set", buf, 0xCu);
            }
          }
          else if (v136[0])
          {
            int v48 = __nw_create_backtrace_string();
            if (v48)
            {
              id v49 = (char *)v48;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              dispatch_block_t v50 = (id)gLogObj;
              os_log_type_t v51 = type[0];
              if (os_log_type_enabled(v50, (os_log_type_t)type[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v49;
                _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s Group descriptor is not set, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v49);
              if (!v45) {
                goto LABEL_58;
              }
              goto LABEL_57;
            }
            uint64_t v46 = __nwlog_obj();
            os_log_type_t v53 = type[0];
            if (os_log_type_enabled(v46, (os_log_type_t)type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              _os_log_impl(&dword_1830D4000, v46, v53, "%{public}s Group descriptor is not set, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v46 = (id)gLogObj;
            os_log_type_t v52 = type[0];
            if (os_log_type_enabled(v46, (os_log_type_t)type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              _os_log_impl(&dword_1830D4000, v46, v52, "%{public}s Group descriptor is not set, backtrace limit exceeded", buf, 0xCu);
            }
          }
          goto LABEL_55;
        }
        uint64_t v41 = __nwlog_obj();
        unsigned int v42 = nw_group_descriptor_get_type(v18[8]);
        if (v42 > 4) {
          uint64_t v43 = "unknown";
        }
        else {
          uint64_t v43 = off_1E523BC90[v42];
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v43;
        BOOL v45 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        v136[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v45, type, v136))
        {
          if (type[0] == 17)
          {
            uint64_t v46 = __nwlog_obj();
            os_log_type_t v54 = type[0];
            if (os_log_type_enabled(v46, (os_log_type_t)type[0]))
            {
              unsigned int v55 = nw_group_descriptor_get_type(v18[8]);
              if (v55 > 4) {
                unsigned int v56 = "unknown";
              }
              else {
                unsigned int v56 = off_1E523BC90[v55];
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v56;
              _os_log_impl(&dword_1830D4000, v46, v54, "%{public}s Unsupported group descriptor type: %s", buf, 0x16u);
            }
LABEL_55:

            goto LABEL_56;
          }
          if (v136[0] == OS_LOG_TYPE_DEFAULT)
          {
            uint64_t v46 = __nwlog_obj();
            os_log_type_t v62 = type[0];
            if (os_log_type_enabled(v46, (os_log_type_t)type[0]))
            {
              unsigned int v63 = nw_group_descriptor_get_type(v18[8]);
              if (v63 > 4) {
                os_log_type_t v64 = "unknown";
              }
              else {
                os_log_type_t v64 = off_1E523BC90[v63];
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v64;
              _os_log_impl(&dword_1830D4000, v46, v62, "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded", buf, 0x16u);
            }
            goto LABEL_55;
          }
          uint64_t v57 = (char *)__nw_create_backtrace_string();
          uint64_t v46 = __nwlog_obj();
          os_log_type_t v58 = type[0];
          BOOL v59 = os_log_type_enabled(v46, (os_log_type_t)type[0]);
          if (!v57)
          {
            if (v59)
            {
              unsigned int v65 = nw_group_descriptor_get_type(v18[8]);
              if (v65 > 4) {
                os_log_type_t v66 = "unknown";
              }
              else {
                os_log_type_t v66 = off_1E523BC90[v65];
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v66;
              _os_log_impl(&dword_1830D4000, v46, v58, "%{public}s Unsupported group descriptor type: %s, no backtrace", buf, 0x16u);
            }
            goto LABEL_55;
          }
          if (v59)
          {
            unsigned int v60 = nw_group_descriptor_get_type(v18[8]);
            if (v60 > 4) {
              uint64_t v61 = "unknown";
            }
            else {
              uint64_t v61 = off_1E523BC90[v60];
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v61;
            *(_WORD *)&buf[22] = 2082;
            os_log_type_t v146 = v57;
            _os_log_impl(&dword_1830D4000, v46, v58, "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v57);
        }
LABEL_56:
        if (!v45) {
          goto LABEL_58;
        }
LABEL_57:
        free(v45);
        goto LABEL_58;
      }
      int v79 = __nwlog_obj();
      *(_DWORD *)handler = 136446210;
      *(void *)&void handler[4] = "nw_connection_group_set_up_and_start_listener_locked";
      __int16 v80 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      type[0] = 0;
      if (__nwlog_fault(v80, buf, type))
      {
        if (buf[0] == 17)
        {
          os_log_type_t v81 = __nwlog_obj();
          os_log_type_t v82 = buf[0];
          if (os_log_type_enabled(v81, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)handler = 136446210;
            *(void *)&void handler[4] = "nw_connection_group_set_up_and_start_listener_locked";
            _os_log_impl(&dword_1830D4000, v81, v82, "%{public}s called with null group->listener", handler, 0xCu);
          }
        }
        else if (type[0])
        {
          uint64_t v95 = (char *)__nw_create_backtrace_string();
          os_log_type_t v81 = __nwlog_obj();
          os_log_type_t v96 = buf[0];
          BOOL v97 = os_log_type_enabled(v81, (os_log_type_t)buf[0]);
          if (v95)
          {
            if (v97)
            {
              *(_DWORD *)handler = 136446466;
              *(void *)&void handler[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&handler[12] = 2082;
              *(void *)&handler[14] = v95;
              _os_log_impl(&dword_1830D4000, v81, v96, "%{public}s called with null group->listener, dumping backtrace:%{public}s", handler, 0x16u);
            }

            free(v95);
            goto LABEL_196;
          }
          if (v97)
          {
            *(_DWORD *)handler = 136446210;
            *(void *)&void handler[4] = "nw_connection_group_set_up_and_start_listener_locked";
            _os_log_impl(&dword_1830D4000, v81, v96, "%{public}s called with null group->listener, no backtrace", handler, 0xCu);
          }
        }
        else
        {
          os_log_type_t v81 = __nwlog_obj();
          os_log_type_t v114 = buf[0];
          if (os_log_type_enabled(v81, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)handler = 136446210;
            *(void *)&void handler[4] = "nw_connection_group_set_up_and_start_listener_locked";
            _os_log_impl(&dword_1830D4000, v81, v114, "%{public}s called with null group->listener, backtrace limit exceeded", handler, 0xCu);
          }
        }
      }
LABEL_196:
      if (v80) {
        free(v80);
      }
      goto LABEL_59;
    }
    if (!nw_parameters_get_logging_disabled(*((void *)v3 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      __int16 v32 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        int v33 = *((_DWORD *)v3 + 42);
        uint64_t v34 = *((void *)v3 + 7);
        *(_DWORD *)handler = 136446722;
        *(void *)&void handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        *(_WORD *)&handler[12] = 1024;
        *(_DWORD *)&handler[14] = v33;
        *(_WORD *)&handler[18] = 2112;
        *(void *)&handler[20] = v34;
        _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to create listener with parameters %@", handler, 0x1Cu);
      }
    }
    int v35 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
    nw_connection_group_set_state_locked(v3, 3, v35);
  }
LABEL_60:
}

void sub_1836BDDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  _Unwind_Resume(a1);
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  nw_listener_t v6 = (os_unfair_lock_s *)*(id *)(a1 + 32);
  id v7 = v5;
  if (v6)
  {
    uint64_t v61 = 0;
    os_log_type_t v62 = &v61;
    int v64 = 0;
    uint64_t v63 = 0x2020000000;
    *(void *)aBlock = MEMORY[0x1E4F143A8];
    *(void *)&aBlock[8] = 3221225472;
    *(void *)&aBlock[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
    os_log_type_t v68 = &unk_1E524B978;
    os_log_type_t v70 = &v61;
    int v8 = v6;
    dispatch_qos_class_t v69 = v8;
    __int16 v9 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v6 + 43);
    v9[2](v9);
    os_unfair_lock_unlock(v6 + 43);

    int v10 = *((_DWORD *)v62 + 6);
    if (a2 == 4 && v10 == 4)
    {
      if (!nw_parameters_get_logging_disabled(*(void *)&v8[14]._os_unfair_lock_opaque) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        int v48 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          uint32_t os_unfair_lock_opaque = v8[42]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = os_unfair_lock_opaque;
          _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] listener cancelled", buf, 0x12u);
        }
      }
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_175;
      *(void *)&unsigned char buf[24] = &unk_1E524BAA8;
      *(void *)&unsigned char buf[32] = v8;
      id v11 = (void (**)(void))_Block_copy(buf);
      os_unfair_lock_lock(v6 + 43);
      v11[2](v11);
      os_unfair_lock_unlock(v6 + 43);

      os_log_type_t v12 = *(NSObject **)&buf[32];
      goto LABEL_7;
    }
    if (v10 == 4)
    {
      if (nw_parameters_get_logging_disabled(*(void *)&v8[14]._os_unfair_lock_opaque)) {
        goto LABEL_8;
      }
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      os_log_type_t v12 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        if (a2 > 4) {
          int v13 = "<unknown>";
        }
        else {
          int v13 = off_1E523D0E0[a2];
        }
        uint32_t v20 = v8[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v20;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v13;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] already cancelled, ignoring listener state %s", buf, 0x1Cu);
      }
LABEL_7:

LABEL_8:
      _Block_object_dispose(&v61, 8);
      goto LABEL_9;
    }
    id v14 = *(id *)&v8[22]._os_unfair_lock_opaque;
    if (!v14)
    {
      if (!nw_parameters_get_logging_disabled(*(void *)&v8[14]._os_unfair_lock_opaque))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        BOOL v18 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          if (a2 > 4) {
            os_log_type_t v19 = "<unknown>";
          }
          else {
            os_log_type_t v19 = off_1E523D0E0[a2];
          }
          uint32_t v26 = v8[42]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v26;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v19;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] no listener present, ignoring listener state %s", buf, 0x1Cu);
        }
      }
      os_log_type_t v12 = 0;
      goto LABEL_7;
    }
    os_log_type_t v12 = v14;
    if (a2)
    {
      BOOL logging_disabled = nw_parameters_get_logging_disabled(*(void *)&v8[14]._os_unfair_lock_opaque);
      if (v7)
      {
        if (logging_disabled) {
          goto LABEL_50;
        }
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        id v16 = (id)gconnection_groupLogObj;
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_49;
        }
        if (a2 > 4) {
          os_log_type_t v17 = "<unknown>";
        }
        else {
          os_log_type_t v17 = off_1E523D0E0[a2];
        }
        uint32_t v22 = v8[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v22;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v12;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v17;
        *(_WORD *)&buf[38] = 2112;
        id v66 = v7;
        int v23 = "%{public}s [G%u] listener %@ changed to state %s (error %@)";
        id v24 = v16;
        uint32_t v25 = 48;
      }
      else
      {
        if (logging_disabled) {
          goto LABEL_50;
        }
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        id v16 = (id)gconnection_groupLogObj;
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
LABEL_49:

LABEL_50:
          switch(a2)
          {
            case 1u:
              *(void *)buf = MEMORY[0x1E4F143A8];
              *(void *)&buf[8] = 3221225472;
              *(void *)&buf[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_176;
              *(void *)&unsigned char buf[24] = &unk_1E524B9A0;
              *(void *)&unsigned char buf[32] = v8;
              id v66 = v7;
              id v28 = (void (**)(void))_Block_copy(buf);
              os_unfair_lock_lock(v6 + 43);
              v28[2](v28);
              os_unfair_lock_unlock(v6 + 43);

              break;
            case 2u:
              if (!nw_parameters_get_logging_disabled(*(void *)&v8[14]._os_unfair_lock_opaque))
              {
                if (__nwlog_connection_group_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
                }
                int v29 = (id)gconnection_groupLogObj;
                if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
                {
                  uint32_t v30 = v8[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v30;
                  _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] listener ready", buf, 0x12u);
                }
              }
              *(void *)buf = MEMORY[0x1E4F143A8];
              *(void *)&buf[8] = 3221225472;
              *(void *)&buf[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_177;
              *(void *)&unsigned char buf[24] = &unk_1E524B9A0;
              *(void *)&unsigned char buf[32] = v8;
              id v66 = v7;
              size_t v31 = (void (**)(void))_Block_copy(buf);
              os_unfair_lock_lock(v6 + 43);
              v31[2](v31);
              os_unfair_lock_unlock(v6 + 43);

              break;
            case 3u:
              if (!nw_parameters_get_logging_disabled(*(void *)&v8[14]._os_unfair_lock_opaque))
              {
                if (__nwlog_connection_group_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
                }
                __int16 v32 = (id)gconnection_groupLogObj;
                if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                {
                  uint32_t v33 = v8[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v33;
                  _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_ERROR, "%{public}s [G%u] listener failed with error ", buf, 0x12u);
                }
              }
              if (v7)
              {
                *(void *)buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_178;
                *(void *)&unsigned char buf[24] = &unk_1E524B9A0;
                *(void *)&unsigned char buf[32] = v8;
                id v66 = v7;
                uint64_t v34 = _Block_copy(buf);
                *(void *)os_log_type_t type = v34;
                nw_synchronize<void({block_pointer} {__strong})(void)>(v6 + 43, (uint64_t)type);
              }
              else
              {
                posix_error = nw_error_create_posix_error(50);
                *(void *)buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_2;
                *(void *)&unsigned char buf[24] = &unk_1E524B9A0;
                *(void *)&unsigned char buf[32] = v8;
                id v66 = posix_error;
                os_log_type_t v39 = posix_error;
                unsigned int v40 = _Block_copy(buf);
                *(void *)os_log_type_t type = v40;
                nw_synchronize<void({block_pointer} {__strong})(void)>(v6 + 43, (uint64_t)type);
              }
              break;
            case 4u:
              if (!nw_parameters_get_logging_disabled(*(void *)&v8[14]._os_unfair_lock_opaque))
              {
                if (__nwlog_connection_group_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
                }
                int v35 = (id)gconnection_groupLogObj;
                if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
                {
                  uint32_t v36 = v8[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v36;
                  _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Listener cancelled", buf, 0x12u);
                }
              }
              *(void *)buf = MEMORY[0x1E4F143A8];
              *(void *)&buf[8] = 3221225472;
              *(void *)&buf[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_179;
              *(void *)&unsigned char buf[24] = &unk_1E524BAA8;
              *(void *)&unsigned char buf[32] = v8;
              os_log_type_t v37 = (void (**)(void))_Block_copy(buf);
              os_unfair_lock_lock(v6 + 43);
              v37[2](v37);
              os_unfair_lock_unlock(v6 + 43);

              break;
            default:
              goto LABEL_7;
          }
          goto LABEL_7;
        }
        if (a2 > 4) {
          int v21 = "<unknown>";
        }
        else {
          int v21 = off_1E523D0E0[a2];
        }
        uint32_t v27 = v8[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v27;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v12;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v21;
        int v23 = "%{public}s [G%u] listener %@ changed to state %s";
        id v24 = v16;
        uint32_t v25 = 38;
      }
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, v23, buf, v25);
      goto LABEL_49;
    }
    os_log_type_t v51 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
    os_log_type_t v52 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (__nwlog_fault(v52, type, &v60))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v53 = __nwlog_obj();
        os_log_type_t v54 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
          _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s called with null listener_state", buf, 0xCu);
        }
      }
      else if (v60)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v53 = __nwlog_obj();
        os_log_type_t v56 = type[0];
        BOOL v57 = os_log_type_enabled(v53, type[0]);
        if (backtrace_string)
        {
          if (v57)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v53, v56, "%{public}s called with null listener_state, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_114;
        }
        if (v57)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
          _os_log_impl(&dword_1830D4000, v53, v56, "%{public}s called with null listener_state, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v53 = __nwlog_obj();
        os_log_type_t v58 = type[0];
        if (os_log_type_enabled(v53, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_handle_listener_state_change";
          _os_log_impl(&dword_1830D4000, v53, v58, "%{public}s called with null listener_state, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_114:
    if (v52) {
      free(v52);
    }
    goto LABEL_7;
  }
  uint64_t v41 = __nwlog_obj();
  *(_DWORD *)aBlock = 136446210;
  *(void *)&void aBlock[4] = "nw_connection_group_handle_listener_state_change";
  unsigned int v42 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  LOBYTE(v61) = 0;
  if (__nwlog_fault(v42, buf, &v61))
  {
    if (buf[0] == 17)
    {
      uint64_t v43 = __nwlog_obj();
      os_log_type_t v44 = buf[0];
      if (os_log_type_enabled(v43, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_handle_listener_state_change";
        _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s called with null group", aBlock, 0xCu);
      }
    }
    else if ((_BYTE)v61)
    {
      BOOL v45 = (char *)__nw_create_backtrace_string();
      uint64_t v43 = __nwlog_obj();
      os_log_type_t v46 = buf[0];
      BOOL v47 = os_log_type_enabled(v43, (os_log_type_t)buf[0]);
      if (v45)
      {
        if (v47)
        {
          *(_DWORD *)aBlock = 136446466;
          *(void *)&void aBlock[4] = "nw_connection_group_handle_listener_state_change";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = v45;
          _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s called with null group, dumping backtrace:%{public}s", aBlock, 0x16u);
        }

        free(v45);
        goto LABEL_101;
      }
      if (v47)
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_handle_listener_state_change";
        _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s called with null group, no backtrace", aBlock, 0xCu);
      }
    }
    else
    {
      uint64_t v43 = __nwlog_obj();
      os_log_type_t v50 = buf[0];
      if (os_log_type_enabled(v43, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_handle_listener_state_change";
        _os_log_impl(&dword_1830D4000, v43, v50, "%{public}s called with null group, backtrace limit exceeded", aBlock, 0xCu);
      }
    }
  }
LABEL_101:
  if (v42) {
    free(v42);
  }
LABEL_9:
}

void sub_1836BED98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,id a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = *(id *)(a1 + 32);
  id v17 = v11;
  id v85 = v12;
  __int16 v84 = v13;
  id v83 = v14;
  BOOL v18 = v15;
  os_log_type_t v19 = v18;
  os_log_type_t v82 = v17;
  if (!v16)
  {
    int v38 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v39, aBlock, &v96)) {
      goto LABEL_137;
    }
    if (LOBYTE(aBlock[0]) == 17)
    {
      unsigned int v40 = __nwlog_obj();
      os_log_type_t v41 = aBlock[0];
      if (os_log_type_enabled(v40, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (!(_BYTE)v96)
    {
      unsigned int v40 = __nwlog_obj();
      os_log_type_t v73 = aBlock[0];
      if (os_log_type_enabled(v40, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v40, v73, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v53 = __nwlog_obj();
    os_log_type_t v54 = aBlock[0];
    BOOL v55 = os_log_type_enabled(v53, aBlock[0]);
    if (backtrace_string)
    {
      if (v55)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
LABEL_137:
      if (!v39) {
        goto LABEL_29;
      }
LABEL_138:
      free(v39);
      goto LABEL_29;
    }
    if (v55)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
      _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s called with null group, no backtrace", buf, 0xCu);
    }
    goto LABEL_136;
  }
  if (!v17)
  {
    unsigned int v42 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v39, aBlock, &v96)) {
      goto LABEL_137;
    }
    if (LOBYTE(aBlock[0]) == 17)
    {
      unsigned int v40 = __nwlog_obj();
      os_log_type_t v43 = aBlock[0];
      if (os_log_type_enabled(v40, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v40, v43, "%{public}s called with null source", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (!(_BYTE)v96)
    {
      unsigned int v40 = __nwlog_obj();
      os_log_type_t v74 = aBlock[0];
      if (os_log_type_enabled(v40, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v40, v74, "%{public}s called with null source, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    os_log_type_t v56 = (char *)__nw_create_backtrace_string();
    os_log_type_t v53 = __nwlog_obj();
    os_log_type_t v57 = aBlock[0];
    BOOL v58 = os_log_type_enabled(v53, aBlock[0]);
    if (!v56)
    {
      if (v58)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v53, v57, "%{public}s called with null source, no backtrace", buf, 0xCu);
      }
      goto LABEL_136;
    }
    if (v58)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v56;
      _os_log_impl(&dword_1830D4000, v53, v57, "%{public}s called with null source, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_89;
  }
  if (!v85)
  {
    os_log_type_t v44 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v39, aBlock, &v96)) {
      goto LABEL_137;
    }
    if (LOBYTE(aBlock[0]) == 17)
    {
      unsigned int v40 = __nwlog_obj();
      os_log_type_t v45 = aBlock[0];
      if (os_log_type_enabled(v40, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v40, v45, "%{public}s called with null destination", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (!(_BYTE)v96)
    {
      unsigned int v40 = __nwlog_obj();
      os_log_type_t v75 = aBlock[0];
      if (os_log_type_enabled(v40, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v40, v75, "%{public}s called with null destination, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    os_log_type_t v56 = (char *)__nw_create_backtrace_string();
    os_log_type_t v53 = __nwlog_obj();
    os_log_type_t v59 = aBlock[0];
    BOOL v60 = os_log_type_enabled(v53, aBlock[0]);
    if (!v56)
    {
      if (v60)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v53, v59, "%{public}s called with null destination, no backtrace", buf, 0xCu);
      }
      goto LABEL_136;
    }
    if (v60)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v56;
      _os_log_impl(&dword_1830D4000, v53, v59, "%{public}s called with null destination, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_89;
  }
  if (!v84)
  {
    os_log_type_t v46 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v39, aBlock, &v96)) {
      goto LABEL_137;
    }
    if (LOBYTE(aBlock[0]) == 17)
    {
      unsigned int v40 = __nwlog_obj();
      os_log_type_t v47 = aBlock[0];
      if (os_log_type_enabled(v40, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v40, v47, "%{public}s called with null interface", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (!(_BYTE)v96)
    {
      unsigned int v40 = __nwlog_obj();
      os_log_type_t v76 = aBlock[0];
      if (os_log_type_enabled(v40, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v40, v76, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    os_log_type_t v56 = (char *)__nw_create_backtrace_string();
    os_log_type_t v53 = __nwlog_obj();
    os_log_type_t v61 = aBlock[0];
    BOOL v62 = os_log_type_enabled(v53, aBlock[0]);
    if (!v56)
    {
      if (v62)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v53, v61, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
      goto LABEL_136;
    }
    if (v62)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v56;
      _os_log_impl(&dword_1830D4000, v53, v61, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_89:

    free(v56);
    if (!v39) {
      goto LABEL_29;
    }
    goto LABEL_138;
  }
  if (!v83)
  {
    int v48 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v39, aBlock, &v96)) {
      goto LABEL_137;
    }
    if (LOBYTE(aBlock[0]) == 17)
    {
      unsigned int v40 = __nwlog_obj();
      os_log_type_t v49 = aBlock[0];
      if (os_log_type_enabled(v40, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v40, v49, "%{public}s called with null socket", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (!(_BYTE)v96)
    {
      unsigned int v40 = __nwlog_obj();
      os_log_type_t v77 = aBlock[0];
      if (os_log_type_enabled(v40, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v40, v77, "%{public}s called with null socket, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    os_log_type_t v56 = (char *)__nw_create_backtrace_string();
    os_log_type_t v53 = __nwlog_obj();
    os_log_type_t v63 = aBlock[0];
    BOOL v64 = os_log_type_enabled(v53, aBlock[0]);
    if (v56)
    {
      if (v64)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v56;
        _os_log_impl(&dword_1830D4000, v53, v63, "%{public}s called with null socket, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_89;
    }
    if (v64)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
      _os_log_impl(&dword_1830D4000, v53, v63, "%{public}s called with null socket, no backtrace", buf, 0xCu);
    }
LABEL_136:

    goto LABEL_137;
  }
  if (!v18)
  {
    os_log_type_t v50 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v39, aBlock, &v96)) {
      goto LABEL_137;
    }
    if (LOBYTE(aBlock[0]) == 17)
    {
      unsigned int v40 = __nwlog_obj();
      os_log_type_t v51 = aBlock[0];
      if (os_log_type_enabled(v40, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v40, v51, "%{public}s called with null packet", buf, 0xCu);
      }
LABEL_118:

      goto LABEL_137;
    }
    if (!(_BYTE)v96)
    {
      unsigned int v40 = __nwlog_obj();
      os_log_type_t v78 = aBlock[0];
      if (os_log_type_enabled(v40, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_1830D4000, v40, v78, "%{public}s called with null packet, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    os_log_type_t v56 = (char *)__nw_create_backtrace_string();
    os_log_type_t v53 = __nwlog_obj();
    os_log_type_t v65 = aBlock[0];
    BOOL v66 = os_log_type_enabled(v53, aBlock[0]);
    if (v56)
    {
      if (v66)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v56;
        _os_log_impl(&dword_1830D4000, v53, v65, "%{public}s called with null packet, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_89;
    }
    if (v66)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
      _os_log_impl(&dword_1830D4000, v53, v65, "%{public}s called with null packet, no backtrace", buf, 0xCu);
    }
    goto LABEL_136;
  }
  if (!nw_parameters_get_logging_disabled(*((void *)v16 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    uint32_t v20 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      int v21 = *((_DWORD *)v16 + 42);
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v21;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v17;
      *(_WORD *)&buf[28] = 2112;
      *(void *)&buf[30] = v85;
      *(_WORD *)&buf[38] = 2112;
      nw_content_context_t v105 = v84;
      *(_WORD *)char v106 = 2048;
      *(void *)&v106[2] = dispatch_data_get_size(v19);
      *(_WORD *)&v106[10] = 2112;
      *(void *)&v106[12] = v83;
      _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] new incoming packet <%@->%@@%@, %zu bytes> on socket %@", buf, 0x44u);
    }
  }
  uint64_t v96 = 0;
  BOOL v97 = &v96;
  uint64_t v98 = 0x3032000000;
  os_log_type_t v99 = __Block_byref_object_copy__138;
  BOOL v100 = __Block_byref_object_dispose__139;
  id v101 = 0;
  uint64_t v90 = 0;
  int v91 = &v90;
  uint64_t v92 = 0x3032000000;
  os_log_type_t v93 = __Block_byref_object_copy__8624;
  os_log_type_t v94 = __Block_byref_object_dispose__8625;
  id v95 = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL42nw_connection_group_handle_incoming_packetP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectS3_PU26objcproto15OS_nw_interfaceS1_PU27objcproto16OS_nw_fd_wrapperS1_PU27objcproto16OS_dispatch_dataS1__block_invoke;
  aBlock[3] = &unk_1E5244950;
  unsigned int v88 = &v96;
  uint32_t v22 = v16;
  id v87 = v22;
  int v89 = &v90;
  int v23 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v16 + 43);
  v23[2](v23);
  os_unfair_lock_unlock((os_unfair_lock_t)v16 + 43);

  if (v97[5] && v91[5])
  {
    nw_content_context_t v24 = nw_content_context_create("multicast packet");
    id v25 = v85;
    id v26 = v82;
    uint32_t v27 = v84;
    id v28 = v83;
    if (v24)
    {
      if (v24 != (nw_content_context_t)&__block_literal_global_10_42276
        && v24 != (nw_content_context_t)&__block_literal_global_8_42267
        && v24 != (nw_content_context_t)&__block_literal_global_6_42258
        && v24 != (nw_content_context_t)&__block_literal_global_42249)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&v24[14]);
        BYTE6(v24[14].isa) |= 0x20u;
        BOOL v29 = nw_array_create();
        Class isa = v24[13].isa;
        v24[13].Class isa = (Class)v29;

        nw_array_append((uint64_t)v24[13].isa, v25);
        nw_array_append((uint64_t)v24[13].isa, v26);
        nw_array_append((uint64_t)v24[13].isa, v27);
        nw_array_append((uint64_t)v24[13].isa, v28);
        os_unfair_lock_unlock((os_unfair_lock_t)&v24[14]);
      }
LABEL_21:

      size_t v31 = (void *)v91[5];
      dispatch_qos_class_t v32 = v22[4];
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZL42nw_connection_group_handle_incoming_packetP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectS3_PU26objcproto15OS_nw_interfaceS1_PU27objcproto16OS_nw_fd_wrapperS1_PU27objcproto16OS_dispatch_dataS1__block_invoke_2;
      *(void *)&unsigned char buf[24] = &unk_1E5241D28;
      *(void *)&unsigned char buf[32] = v22;
      nw_content_context_t v105 = v24;
      *(void *)char v106 = v19;
      *(void *)&v106[8] = &v96;
      uint32_t v33 = v24;
      uint64_t v34 = v31;
      dispatch_block_t v35 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v32, 0, buf);
      dispatch_async(v34, v35);

LABEL_27:
      goto LABEL_28;
    }
    BOOL v67 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_content_context_set_multicast_info";
    os_log_type_t v81 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t v103 = OS_LOG_TYPE_ERROR;
    char v102 = 0;
    os_log_type_t v68 = (char *)v81;
    if (!__nwlog_fault(v81, &v103, &v102))
    {
LABEL_146:
      if (v68) {
        free(v68);
      }
      goto LABEL_21;
    }
    if (v103 == OS_LOG_TYPE_FAULT)
    {
      dispatch_qos_class_t v69 = __nwlog_obj();
      os_log_type_t v70 = v103;
      if (os_log_type_enabled(v69, v103))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_set_multicast_info";
        _os_log_impl(&dword_1830D4000, v69, v70, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v102)
    {
      uint64_t v71 = (char *)__nw_create_backtrace_string();
      dispatch_qos_class_t v69 = __nwlog_obj();
      os_log_type_t type = v103;
      BOOL v72 = os_log_type_enabled(v69, v103);
      if (v71)
      {
        if (v72)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_content_context_set_multicast_info";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v71;
          _os_log_impl(&dword_1830D4000, v69, type, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v71);
        goto LABEL_145;
      }
      if (v72)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_set_multicast_info";
        _os_log_impl(&dword_1830D4000, v69, type, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      dispatch_qos_class_t v69 = __nwlog_obj();
      os_log_type_t v79 = v103;
      if (os_log_type_enabled(v69, v103))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_set_multicast_info";
        _os_log_impl(&dword_1830D4000, v69, v79, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_145:
    os_log_type_t v68 = (char *)v81;
    goto LABEL_146;
  }
  if (!nw_parameters_get_logging_disabled(*((void *)v16 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    uint32_t v33 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      int v36 = v22[42];
      size_t size = dispatch_data_get_size(v19);
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v36;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v82;
      *(_WORD *)&buf[28] = 2112;
      *(void *)&buf[30] = v85;
      *(_WORD *)&buf[38] = 2112;
      nw_content_context_t v105 = v84;
      *(_WORD *)char v106 = 2048;
      *(void *)&v106[2] = size;
      _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_ERROR, "%{public}s [G%u] no receive handler or client queue, ignoring incoming packet <%@->%@@%@, %zu bytes>", buf, 0x3Au);
    }
    goto LABEL_27;
  }
LABEL_28:

  _Block_object_dispose(&v90, 8);
  _Block_object_dispose(&v96, 8);

LABEL_29:
}

void sub_1836C0328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);

  _Unwind_Resume(a1);
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_3(uint64_t a1, NWConcrete_nw_connection *a2)
{
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_4(uint64_t a1, int a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2 == 3)
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      id v13 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v15 = *(_DWORD *)(v14 + 168);
        uint64_t v16 = *(void *)(v14 + 96);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v15;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v16;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s [G%u] unicast listener %@ failed", buf, 0x1Cu);
      }
    }
    id v17 = *(os_unfair_lock_s **)(a1 + 32);
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_173;
    v19[3] = &unk_1E524B9A0;
    uint32_t v20 = v17;
    id v21 = v5;
    BOOL v18 = (void (**)(void))_Block_copy(v19);
    v17 += 43;
    os_unfair_lock_lock(v17);
    v18[2](v18);
    os_unfair_lock_unlock(v17);
  }
  else if (a2 == 2)
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      nw_listener_t v6 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        int v8 = *(_DWORD *)(v7 + 168);
        uint64_t v9 = *(void *)(v7 + 96);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked_block_invoke_4";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v8;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v9;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [G%u] unicast listener %@ ready", buf, 0x1Cu);
      }
    }
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__8624;
    id v28 = __Block_byref_object_dispose__8625;
    id v29 = 0;
    int v10 = *(os_unfair_lock_s **)(a1 + 32);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_169;
    aBlock[3] = &unk_1E524B978;
    id v26 = buf;
    id v25 = v10;
    id v11 = (void (**)(void))_Block_copy(aBlock);
    v10 += 43;
    os_unfair_lock_lock(v10);
    v11[2](v11);
    os_unfair_lock_unlock(v10);

    id v12 = *(atomic_uchar **)(*(void *)&buf[8] + 40);
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2_170;
    v22[3] = &unk_1E524AE18;
    id v23 = *(id *)(a1 + 32);
    nw_array_apply(v12, (uint64_t)v22);

    _Block_object_dispose(buf, 8);
  }
}

void sub_1836C07B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2_174(uint64_t a1, NWConcrete_nw_connection *a2)
{
}

void nw_connection_group_handle_incoming_connection(NWConcrete_nw_connection_group *a1, NWConcrete_nw_connection *a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  int v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    uint64_t v34 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
    dispatch_block_t v35 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v59 = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (!__nwlog_fault(v35, &v59, &v58)) {
      goto LABEL_78;
    }
    if (v59 == OS_LOG_TYPE_FAULT)
    {
      int v36 = __nwlog_obj();
      os_log_type_t v37 = v59;
      if (os_log_type_enabled(v36, v59))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
        _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v58)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v36 = __nwlog_obj();
      os_log_type_t v41 = v59;
      BOOL v42 = os_log_type_enabled(v36, v59);
      if (backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
          __int16 v62 = 2082;
          *(void *)os_log_type_t v63 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v36, v41, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_78:
        if (!v35) {
          goto LABEL_44;
        }
        goto LABEL_79;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
        _os_log_impl(&dword_1830D4000, v36, v41, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v36 = __nwlog_obj();
      os_log_type_t v46 = v59;
      if (os_log_type_enabled(v36, v59))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
        _os_log_impl(&dword_1830D4000, v36, v46, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_77:

    goto LABEL_78;
  }
  if (!v4)
  {
    int v38 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
    dispatch_block_t v35 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v59 = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (!__nwlog_fault(v35, &v59, &v58)) {
      goto LABEL_78;
    }
    if (v59 == OS_LOG_TYPE_FAULT)
    {
      int v36 = __nwlog_obj();
      os_log_type_t v39 = v59;
      if (os_log_type_enabled(v36, v59))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
        _os_log_impl(&dword_1830D4000, v36, v39, "%{public}s called with null new_connection", buf, 0xCu);
      }
    }
    else if (v58)
    {
      os_log_type_t v43 = (char *)__nw_create_backtrace_string();
      int v36 = __nwlog_obj();
      os_log_type_t v44 = v59;
      BOOL v45 = os_log_type_enabled(v36, v59);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
          __int16 v62 = 2082;
          *(void *)os_log_type_t v63 = v43;
          _os_log_impl(&dword_1830D4000, v36, v44, "%{public}s called with null new_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        if (!v35) {
          goto LABEL_44;
        }
LABEL_79:
        free(v35);
        goto LABEL_44;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
        _os_log_impl(&dword_1830D4000, v36, v44, "%{public}s called with null new_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v36 = __nwlog_obj();
      os_log_type_t v47 = v59;
      if (os_log_type_enabled(v36, v59))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
        _os_log_impl(&dword_1830D4000, v36, v47, "%{public}s called with null new_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_77;
  }
  if (!nw_parameters_get_logging_disabled(*((void *)v3 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    nw_listener_t v6 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *((_DWORD *)v3 + 42);
      *(_DWORD *)buf = 136446722;
      os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
      __int16 v62 = 1024;
      *(_DWORD *)os_log_type_t v63 = v7;
      *(_WORD *)&v63[4] = 2112;
      *(void *)&v63[6] = v5;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] new incoming connection %@", buf, 0x1Cu);
    }
  }
  if (*((void *)v3 + 18))
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL46nw_connection_group_handle_incoming_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
    aBlock[3] = &unk_1E524B9A0;
    int v8 = v5;
    os_log_type_t v56 = v8;
    uint64_t v9 = v3;
    os_log_type_t v57 = v9;
    int v10 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 43);
    v10[2](v10);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 43);

    if (*((void *)v9 + 1))
    {
      id v11 = _Block_copy(*((const void **)v3 + 18));
      id v12 = (void *)*((void *)v9 + 1);
      dispatch_qos_class_t v13 = *((_DWORD *)v9 + 4);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___ZL46nw_connection_group_handle_incoming_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_2;
      block[3] = &unk_1E5248030;
      os_log_type_t v52 = v9;
      os_log_type_t v53 = v8;
      id v54 = v11;
      uint64_t v14 = v12;
      id v15 = v11;
      dispatch_block_t v16 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v13, 0, block);
      dispatch_async(v14, v16);

LABEL_43:
      goto LABEL_44;
    }
    if (nw_parameters_get_logging_disabled(*((void *)v3 + 7))) {
      goto LABEL_43;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    id v19 = (id)gconnection_groupLogObj;
    int v20 = *((_DWORD *)v9 + 42);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
    __int16 v62 = 1024;
    *(_DWORD *)os_log_type_t v63 = v20;
    *(_WORD *)&v63[4] = 2112;
    *(void *)&v63[6] = v8;
    id v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v59 = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (__nwlog_fault(v21, &v59, &v58))
    {
      if (v59 == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        uint32_t v22 = (id)gconnection_groupLogObj;
        os_log_type_t v23 = v59;
        if (os_log_type_enabled(v22, v59))
        {
          int v24 = *((_DWORD *)v9 + 42);
          *(_DWORD *)buf = 136446722;
          os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
          __int16 v62 = 1024;
          *(_DWORD *)os_log_type_t v63 = v24;
          *(_WORD *)&v63[4] = 2112;
          *(void *)&v63[6] = v8;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s [G%u] not delivering connection %@ since no queue is set", buf, 0x1Cu);
        }
      }
      else if (v58)
      {
        id v25 = __nw_create_backtrace_string();
        if (v25)
        {
          id v26 = (char *)v25;
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          uint32_t v27 = (id)gconnection_groupLogObj;
          os_log_type_t v28 = v59;
          if (os_log_type_enabled(v27, v59))
          {
            int v29 = *((_DWORD *)v9 + 42);
            *(_DWORD *)buf = 136446978;
            os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
            __int16 v62 = 1024;
            *(_DWORD *)os_log_type_t v63 = v29;
            *(_WORD *)&v63[4] = 2112;
            *(void *)&v63[6] = v8;
            __int16 v64 = 2082;
            os_log_type_t v65 = v26;
            _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s [G%u] not delivering connection %@ since no queue is set, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(v26);
          if (!v21) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        uint32_t v22 = (id)gconnection_groupLogObj;
        os_log_type_t v32 = v59;
        if (os_log_type_enabled(v22, v59))
        {
          int v33 = *((_DWORD *)v9 + 42);
          *(_DWORD *)buf = 136446722;
          os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
          __int16 v62 = 1024;
          *(_DWORD *)os_log_type_t v63 = v33;
          *(_WORD *)&v63[4] = 2112;
          *(void *)&v63[6] = v8;
          _os_log_impl(&dword_1830D4000, v22, v32, "%{public}s [G%u] not delivering connection %@ since no queue is set, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        uint32_t v22 = (id)gconnection_groupLogObj;
        os_log_type_t v30 = v59;
        if (os_log_type_enabled(v22, v59))
        {
          int v31 = *((_DWORD *)v9 + 42);
          *(_DWORD *)buf = 136446722;
          os_log_type_t v61 = "nw_connection_group_handle_incoming_connection";
          __int16 v62 = 1024;
          *(_DWORD *)os_log_type_t v63 = v31;
          *(_WORD *)&v63[4] = 2112;
          *(void *)&v63[6] = v8;
          _os_log_impl(&dword_1830D4000, v22, v30, "%{public}s [G%u] not delivering connection %@ since no queue is set, backtrace limit exceeded", buf, 0x1Cu);
        }
      }
    }
    if (!v21) {
      goto LABEL_43;
    }
LABEL_42:
    free(v21);
    goto LABEL_43;
  }
  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 3221225472;
  v48[2] = ___ZL46nw_connection_group_handle_incoming_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_181;
  v48[3] = &unk_1E524B9A0;
  os_log_type_t v49 = v3;
  id v17 = v5;
  os_log_type_t v50 = v17;
  BOOL v18 = (void (**)(void))_Block_copy(v48);
  os_unfair_lock_lock((os_unfair_lock_t)v3 + 43);
  v18[2](v18);
  os_unfair_lock_unlock((os_unfair_lock_t)v3 + 43);

  nw_connection_start(v17);
LABEL_44:
}

void sub_1836C1308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL46nw_connection_group_handle_incoming_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke(uint64_t a1)
{
}

uint64_t ___ZL46nw_connection_group_handle_incoming_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_2(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!nw_parameters_get_logging_disabled(*(void *)(a1[4] + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    uint64_t v3 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = a1[5];
      int v5 = *(_DWORD *)(a1[4] + 168);
      int v6 = 136446722;
      int v7 = "nw_connection_group_handle_incoming_connection_block_invoke_2";
      __int16 v8 = 1024;
      int v9 = v5;
      __int16 v10 = 2112;
      uint64_t v11 = v4;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] delivering connection %@", (uint8_t *)&v6, 0x1Cu);
    }
  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

uint64_t ___ZL46nw_connection_group_handle_incoming_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_181(uint64_t a1)
{
  return nw_connection_group_add_connection_locked(*(NWConcrete_nw_connection_group **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40));
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_169(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), *(id *)(*(void *)(a1 + 32) + 112));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 112);
  *(void *)(v2 + 112) = 0;

  *(unsigned char *)(*(void *)(a1 + 32) + 190) |= 0x20u;
}

uint64_t ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2_170(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = nw_parameters_copy_context(*(void **)(*(void *)(a1 + 32) + 56));
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_3_171;
  v8[3] = &unk_1E524B9A0;
  id v9 = *(id *)(a1 + 32);
  id v6 = v4;
  id v10 = v6;
  nw_queue_context_async(v5, v8);

  return 1;
}

void sub_1836C15B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_173(uint64_t a1)
{
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_3_171(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    uint64_t v2 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      int v5 = 136446722;
      id v6 = "nw_connection_group_set_up_and_start_listener_locked_block_invoke_3";
      __int16 v7 = 1024;
      int v8 = v4;
      __int16 v9 = 2112;
      uint64_t v10 = v3;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] sending queued request %@ ", (uint8_t *)&v5, 0x1Cu);
    }
  }
  nw_connection_group_send_message(*(nw_connection_group_t *)(*(void *)(a1 + 40) + 8), *(dispatch_data_t *)(*(void *)(a1 + 40) + 32), *(nw_endpoint_t *)(*(void *)(a1 + 40) + 24), *(nw_content_context_t *)(*(void *)(a1 + 40) + 40), *(nw_connection_group_send_completion_t *)(*(void *)(a1 + 40) + 16));
}

void ___ZL42nw_connection_group_handle_incoming_packetP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectS3_PU26objcproto15OS_nw_interfaceS1_PU27objcproto16OS_nw_fd_wrapperS1_PU27objcproto16OS_dispatch_dataS1__block_invoke(void *a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1[4] + 136));
  uint64_t v3 = *(void *)(a1[5] + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  int v5 = *(void **)(a1[4] + 8);
  id v6 = (id *)(*(void *)(a1[6] + 8) + 40);

  objc_storeStrong(v6, v5);
}

uint64_t ___ZL42nw_connection_group_handle_incoming_packetP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectS3_PU26objcproto15OS_nw_interfaceS1_PU27objcproto16OS_nw_fd_wrapperS1_PU27objcproto16OS_dispatch_dataS1__block_invoke_2(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    uint64_t v3 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(NSObject **)(a1 + 40);
      int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      identifier = nw_content_context_get_identifier(v4);
      uint64_t v7 = *(void *)(a1 + 48);
      if (v7) {
        size_t size = dispatch_data_get_size(*(dispatch_data_t *)(a1 + 48));
      }
      else {
        size_t size = 0;
      }
      int v9 = 136447746;
      uint64_t v10 = "nw_connection_group_handle_incoming_packet_block_invoke_2";
      __int16 v11 = 1024;
      int v12 = v5;
      __int16 v13 = 2048;
      uint64_t v14 = v4;
      __int16 v15 = 2080;
      dispatch_block_t v16 = identifier;
      __int16 v17 = 2048;
      uint64_t v18 = v7;
      __int16 v19 = 2048;
      size_t v20 = size;
      __int16 v21 = 2080;
      uint32_t v22 = "true";
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] calling receive handler with context (%p: %s), content (%p: %zu bytes), complete %s", (uint8_t *)&v9, 0x44u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) + 16))();
}

uint64_t ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 40);
  return result;
}

void ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_175(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 88);
  *(void *)(v1 + 88) = 0;
}

void ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_176(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(int *)(v2 + 40) <= 0)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    nw_connection_group_set_state_locked((void *)v2, 1, v3);
  }
  else if (!nw_parameters_get_logging_disabled(*(void *)(v2 + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    int v4 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      int v6 = 136446466;
      uint64_t v7 = "nw_connection_group_handle_listener_state_change_block_invoke";
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] listener going to waiting but group already past waiting", (uint8_t *)&v6, 0x12u);
    }
  }
}

void ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_177(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 64);
  if (!v3 || (int v4 = v3, v5 = v4[2], v4, v2 = *(void *)(a1 + 32), v5 != 2))
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(v2 + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v7 = (id)gconnection_groupLogObj;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      int v10 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      int v14 = 136446466;
      __int16 v15 = "nw_connection_group_handle_listener_state_change_block_invoke";
      __int16 v16 = 1024;
      int v17 = v10;
      int v9 = "%{public}s [G%u] group listener ready";
      goto LABEL_14;
    }
LABEL_16:
    __int16 v11 = *(void **)(a1 + 32);
    int v12 = *(void **)(a1 + 40);
    __int16 v13 = (uint64_t *)(a1 + 32);
    nw_connection_group_set_state_locked(v11, 2, v12);
    uint64_t v2 = *v13;
    char v6 = *(unsigned char *)(*v13 + 190);
    goto LABEL_17;
  }
  char v6 = *(unsigned char *)(v2 + 190);
  if ((v6 & 0x40) != 0)
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(v2 + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v7 = (id)gconnection_groupLogObj;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      int v8 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      int v14 = 136446466;
      __int16 v15 = "nw_connection_group_handle_listener_state_change_block_invoke";
      __int16 v16 = 1024;
      int v17 = v8;
      int v9 = "%{public}s [G%u] multiplex group listener ready and first connection ready";
LABEL_14:
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, 0x12u);
LABEL_15:

      goto LABEL_16;
    }
    goto LABEL_16;
  }
LABEL_17:
  *(unsigned char *)(v2 + 190) = v6 | 0x10;
}

void ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_178(uint64_t a1)
{
}

void ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_2(uint64_t a1)
{
}

void ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_179(uint64_t a1)
{
}

void nw_connection_group_cancel_connections_locked(NWConcrete_nw_connection_group *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v1 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v3 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v4 = *((_DWORD *)v2 + 42);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_connections_locked";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v4;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s [G%u] cancelling connections", buf, 0x12u);
      }
    }
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v25 = 0;
    int v5 = (atomic_uchar *)*((void *)v2 + 13);
    if (!v5) {
      goto LABEL_10;
    }
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = ___ZL45nw_connection_group_cancel_connections_lockedP30NWConcrete_nw_connection_group_block_invoke;
    v16[3] = &unk_1E524A2E8;
    int v17 = v2;
    uint64_t v18 = buf;
    nw_array_apply(v5, (uint64_t)v16);

    if (!*(unsigned char *)(*(void *)&buf[8] + 24))
    {
LABEL_10:
      if (!nw_parameters_get_logging_disabled(*((void *)v2 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        char v6 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v7 = *((_DWORD *)v2 + 42);
          *(_DWORD *)size_t v20 = 136446466;
          __int16 v21 = "nw_connection_group_cancel_connections_locked";
          __int16 v22 = 1024;
          int v23 = v7;
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [G%u] no connections, cancelling group", v20, 0x12u);
        }
      }
      nw_connection_group_final_cleanup_locked(v2);
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_18;
  }
  int v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_connections_locked";
  int v9 = (char *)_os_log_send_and_compose_impl();

  v20[0] = 16;
  char v19 = 0;
  if (__nwlog_fault(v9, v20, &v19))
  {
    if (v20[0] == 17)
    {
      int v10 = __nwlog_obj();
      os_log_type_t v11 = v20[0];
      if (os_log_type_enabled(v10, (os_log_type_t)v20[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_connections_locked";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v10 = __nwlog_obj();
      os_log_type_t v13 = v20[0];
      BOOL v14 = os_log_type_enabled(v10, (os_log_type_t)v20[0]);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_connections_locked";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_connections_locked";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v10 = __nwlog_obj();
      os_log_type_t v15 = v20[0];
      if (os_log_type_enabled(v10, (os_log_type_t)v20[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_connections_locked";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_35:
  if (v9) {
    free(v9);
  }
LABEL_18:
}

void sub_1836C20F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL45nw_connection_group_cancel_connections_lockedP30NWConcrete_nw_connection_group_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = a3;
  if (!nw_connection_is_cancelled(v4))
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      char v6 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        int v8 = 136446722;
        int v9 = "nw_connection_group_cancel_connections_locked_block_invoke";
        __int16 v10 = 1024;
        int v11 = v7;
        __int16 v12 = 2112;
        os_log_type_t v13 = v4;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] cancelling connection %@", (uint8_t *)&v8, 0x1Cu);
      }
    }
    nw_connection_cancel(v4);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }

  return 1;
}

void sub_1836C2274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL44nw_connection_group_prune_connections_lockedP30NWConcrete_nw_connection_group_block_invoke(uint64_t a1, unsigned int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    int v4 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      if (a2 > 5) {
        int v5 = "unknown";
      }
      else {
        int v5 = off_1E523DF08[a2];
      }
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      int v8 = 136446978;
      int v9 = "nw_connection_group_prune_connections_locked_block_invoke";
      __int16 v10 = 1024;
      int v11 = v7;
      __int16 v12 = 2112;
      uint64_t v13 = v6;
      __int16 v14 = 2080;
      os_log_type_t v15 = v5;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [G%u] pruned connection %@ going into state %s", (uint8_t *)&v8, 0x26u);
    }
  }
}

nw_connection_group_t nw_connection_group_create(nw_group_descriptor_t group_descriptor, nw_parameters_t parameters)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = group_descriptor;
  int v4 = parameters;
  int v5 = v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v6 = -[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]((char *)[NWConcrete_nw_connection_group alloc], v3, 0, v4);
      goto LABEL_4;
    }
    __int16 v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v24 = "nw_connection_group_create";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          int v24 = "nw_connection_group_create";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        __int16 v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          int v24 = "nw_connection_group_create";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          int v24 = "nw_connection_group_create";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        int v24 = "nw_connection_group_create";
        __int16 v25 = 2082;
        uint64_t v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    int v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v24 = "nw_connection_group_create";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          int v24 = "nw_connection_group_create";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null group_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        __int16 v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          int v24 = "nw_connection_group_create";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null group_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          int v24 = "nw_connection_group_create";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null group_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        int v24 = "nw_connection_group_create";
        __int16 v25 = 2082;
        uint64_t v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null group_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_4:

  return (nw_connection_group_t)v6;
}

void sub_1836C289C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_connection_group_create_with_parameters(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], 4, 0, 0);
    uint64_t v3 = -[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]((char *)[NWConcrete_nw_connection_group alloc], v2, 0, v1);

    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_connection_group_create_with_parameters";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_connection_group_create_with_parameters";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_connection_group_create_with_parameters";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_connection_group_create_with_parameters";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_connection_group_create_with_parameters";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void sub_1836C2B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_connection_group_create_with_connection(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v6 = -[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]((char *)[NWConcrete_nw_connection_group alloc], v3, v4, 0);
      goto LABEL_4;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v24 = "nw_connection_group_create_with_connection";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          int v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null connection", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          int v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          int v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        int v24 = "nw_connection_group_create_with_connection";
        __int16 v25 = 2082;
        uint64_t v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v24 = "nw_connection_group_create_with_connection";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          int v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null group_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          int v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null group_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          int v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null group_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        int v24 = "nw_connection_group_create_with_connection";
        __int16 v25 = 2082;
        uint64_t v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null group_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_4:

  return v6;
}

void sub_1836C3070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_group_set_queue(nw_connection_group_t group, dispatch_queue_t queue)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v3 = group;
  id v4 = queue;
  int v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)dispatch_block_t v35 = 136446210;
    *(void *)&v35[4] = "nw_connection_group_set_queue";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    char v28 = 0;
    if (!__nwlog_fault(v11, buf, &v28)) {
      goto LABEL_45;
    }
    if (buf[0] == 17)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = buf[0];
      if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)dispatch_block_t v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_set_queue";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null group", v35, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = buf[0];
      BOOL v18 = os_log_type_enabled(v12, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)dispatch_block_t v35 = 136446466;
          *(void *)&v35[4] = "nw_connection_group_set_queue";
          *(_WORD *)&v35[12] = 2082;
          *(void *)&v35[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null group, dumping backtrace:%{public}s", v35, 0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v11) {
          goto LABEL_11;
        }
LABEL_46:
        free(v11);
        goto LABEL_11;
      }
      if (v18)
      {
        *(_DWORD *)dispatch_block_t v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_set_queue";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null group, no backtrace", v35, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = buf[0];
      if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)dispatch_block_t v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_set_queue";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null group, backtrace limit exceeded", v35, 0xCu);
      }
    }
LABEL_44:

    goto LABEL_45;
  }
  if (v4)
  {
    *(void *)dispatch_block_t v35 = 0;
    *(void *)&v35[8] = v35;
    *(void *)&v35[16] = 0x2020000000;
    char v36 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_set_queue_block_invoke;
    aBlock[3] = &unk_1E5242570;
    nw_connection_group_t v6 = v3;
    nw_connection_group_t v25 = v6;
    uint64_t v26 = v5;
    uint64_t v27 = v35;
    int v7 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
    v7[2](v7);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

    if (*(unsigned char *)(*(void *)&v35[8] + 24) && !nw_parameters_get_logging_disabled((uint64_t)v6[7].isa))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      os_log_type_t v8 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int isa = (int)v6[21].isa;
        *(_DWORD *)buf = 136446722;
        os_log_type_t v30 = "nw_connection_group_set_queue";
        __int16 v31 = 1024;
        int v32 = isa;
        __int16 v33 = 2080;
        uint64_t v34 = "set queue";
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to %s because group has already been started", buf, 0x1Cu);
      }
    }
    _Block_object_dispose(v35, 8);
    goto LABEL_11;
  }
  __int16 v14 = __nwlog_obj();
  *(_DWORD *)dispatch_block_t v35 = 136446210;
  *(void *)&v35[4] = "nw_connection_group_set_queue";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  char v28 = 0;
  if (!__nwlog_fault(v11, buf, &v28)) {
    goto LABEL_45;
  }
  if (buf[0] == 17)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = buf[0];
    if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)dispatch_block_t v35 = 136446210;
      *(void *)&v35[4] = "nw_connection_group_set_queue";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null queue", v35, 0xCu);
    }
    goto LABEL_44;
  }
  if (!v28)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = buf[0];
    if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)dispatch_block_t v35 = 136446210;
      *(void *)&v35[4] = "nw_connection_group_set_queue";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null queue, backtrace limit exceeded", v35, 0xCu);
    }
    goto LABEL_44;
  }
  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = buf[0];
  BOOL v21 = os_log_type_enabled(v12, (os_log_type_t)buf[0]);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)dispatch_block_t v35 = 136446210;
      *(void *)&v35[4] = "nw_connection_group_set_queue";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null queue, no backtrace", v35, 0xCu);
    }
    goto LABEL_44;
  }
  if (v21)
  {
    *(_DWORD *)dispatch_block_t v35 = 136446466;
    *(void *)&v35[4] = "nw_connection_group_set_queue";
    *(_WORD *)&v35[12] = 2082;
    *(void *)&v35[14] = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null queue, dumping backtrace:%{public}s", v35, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_46;
  }
LABEL_11:
}

void sub_1836C36B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Block_object_dispose((const void *)(v21 - 96), 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_set_queue_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 190)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  else {
    objc_storeStrong((id *)(v1 + 8), *(id *)(a1 + 40));
  }
}

void nw_connection_group_set_membership_changed_handler(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)dispatch_block_t v35 = 136446210;
    *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    char v28 = 0;
    if (!__nwlog_fault(v11, buf, &v28)) {
      goto LABEL_45;
    }
    if (buf[0] == 17)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = buf[0];
      if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)dispatch_block_t v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null group", v35, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = buf[0];
      BOOL v18 = os_log_type_enabled(v12, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)dispatch_block_t v35 = 136446466;
          *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
          *(_WORD *)&v35[12] = 2082;
          *(void *)&v35[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null group, dumping backtrace:%{public}s", v35, 0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v11) {
          goto LABEL_11;
        }
LABEL_46:
        free(v11);
        goto LABEL_11;
      }
      if (v18)
      {
        *(_DWORD *)dispatch_block_t v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null group, no backtrace", v35, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = buf[0];
      if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)dispatch_block_t v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null group, backtrace limit exceeded", v35, 0xCu);
      }
    }
LABEL_44:

    goto LABEL_45;
  }
  if (v4)
  {
    *(void *)dispatch_block_t v35 = 0;
    *(void *)&v35[8] = v35;
    *(void *)&v35[16] = 0x2020000000;
    char v36 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_set_membership_changed_handler_block_invoke;
    aBlock[3] = &unk_1E523B9B8;
    nw_connection_group_t v6 = v3;
    nw_connection_group_t v25 = v6;
    id v26 = v5;
    uint64_t v27 = v35;
    int v7 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 43);
    v7[2](v7);
    os_unfair_lock_unlock(v3 + 43);

    if (*(unsigned char *)(*(void *)&v35[8] + 24)
      && !nw_parameters_get_logging_disabled(*(void *)&v6[14]._os_unfair_lock_opaque))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      os_log_type_t v8 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint32_t os_unfair_lock_opaque = v6[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        os_log_type_t v30 = "nw_connection_group_set_membership_changed_handler";
        __int16 v31 = 1024;
        uint32_t v32 = os_unfair_lock_opaque;
        __int16 v33 = 2080;
        uint64_t v34 = "set membership changed handler";
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to %s because group has already been started", buf, 0x1Cu);
      }
    }
    _Block_object_dispose(v35, 8);
    goto LABEL_11;
  }
  __int16 v14 = __nwlog_obj();
  *(_DWORD *)dispatch_block_t v35 = 136446210;
  *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  char v28 = 0;
  if (!__nwlog_fault(v11, buf, &v28)) {
    goto LABEL_45;
  }
  if (buf[0] == 17)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = buf[0];
    if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)dispatch_block_t v35 = 136446210;
      *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null membership_change_handler", v35, 0xCu);
    }
    goto LABEL_44;
  }
  if (!v28)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = buf[0];
    if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)dispatch_block_t v35 = 136446210;
      *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null membership_change_handler, backtrace limit exceeded", v35, 0xCu);
    }
    goto LABEL_44;
  }
  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = buf[0];
  BOOL v21 = os_log_type_enabled(v12, (os_log_type_t)buf[0]);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)dispatch_block_t v35 = 136446210;
      *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null membership_change_handler, no backtrace", v35, 0xCu);
    }
    goto LABEL_44;
  }
  if (v21)
  {
    *(_DWORD *)dispatch_block_t v35 = 136446466;
    *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
    *(_WORD *)&v35[12] = 2082;
    *(void *)&v35[14] = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null membership_change_handler, dumping backtrace:%{public}s", v35, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_46;
  }
LABEL_11:
}

void sub_1836C3D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Block_object_dispose((const void *)(v21 - 96), 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_set_membership_changed_handler_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 190))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 80);
    *(void *)(v3 + 80) = v2;
  }
}

void nw_connection_group_set_state_changed_handler(nw_connection_group_t group, nw_connection_group_state_changed_handler_t state_changed_handler)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v3 = group;
  nw_connection_group_state_changed_handler_t v4 = state_changed_handler;
  if (v3)
  {
    *(void *)char v28 = 0;
    *(void *)&v28[8] = v28;
    *(void *)&v28[16] = 0x2020000000;
    char v29 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_set_state_changed_handler_block_invoke;
    aBlock[3] = &unk_1E523B9B8;
    nw_connection_group_t v5 = v3;
    nw_connection_group_t v18 = v5;
    id v19 = v4;
    os_log_type_t v20 = v28;
    nw_connection_group_t v6 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
    v6[2](v6);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

    if (*(unsigned char *)(*(void *)&v28[8] + 24) && !nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      int v7 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int isa = (int)v5[21].isa;
        *(_DWORD *)buf = 136446722;
        os_log_type_t v23 = "nw_connection_group_set_state_changed_handler";
        __int16 v24 = 1024;
        int v25 = isa;
        __int16 v26 = 2080;
        uint64_t v27 = "set state changed handler";
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to %s because group has already been started", buf, 0x1Cu);
      }
    }
    _Block_object_dispose(v28, 8);
    goto LABEL_10;
  }
  int v9 = __nwlog_obj();
  *(_DWORD *)char v28 = 136446210;
  *(void *)&void v28[4] = "nw_connection_group_set_state_changed_handler";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  char v21 = 0;
  if (__nwlog_fault(v10, buf, &v21))
  {
    if (buf[0] == 17)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = buf[0];
      if (os_log_type_enabled(v11, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)char v28 = 136446210;
        *(void *)&void v28[4] = "nw_connection_group_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null group", v28, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v14 = buf[0];
      BOOL v15 = os_log_type_enabled(v11, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)char v28 = 136446466;
          *(void *)&void v28[4] = "nw_connection_group_set_state_changed_handler";
          *(_WORD *)&v28[12] = 2082;
          *(void *)&v28[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null group, dumping backtrace:%{public}s", v28, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)char v28 = 136446210;
        *(void *)&void v28[4] = "nw_connection_group_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null group, no backtrace", v28, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = buf[0];
      if (os_log_type_enabled(v11, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)char v28 = 136446210;
        *(void *)&void v28[4] = "nw_connection_group_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null group, backtrace limit exceeded", v28, 0xCu);
      }
    }
  }
LABEL_27:
  if (v10) {
    free(v10);
  }
LABEL_10:
}

void sub_1836C4214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Block_object_dispose((const void *)(v21 - 96), 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_set_state_changed_handler_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 190))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v3 = *(void *)(a1 + 32);
    nw_connection_group_state_changed_handler_t v4 = *(void **)(v3 + 32);
    *(void *)(v3 + 32) = v2;
  }
}

uint64_t nw_connection_group_get_connection_limit(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v20 = 0;
    *(void *)&buf[16] = 0x2020000000;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_get_connection_limit_block_invoke;
    aBlock[3] = &unk_1E524B978;
    os_log_type_t v16 = buf;
    BOOL v15 = v1;
    uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 43);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 43);

    uint64_t v4 = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  nw_connection_group_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_group_get_connection_limit";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_get_connection_limit";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_get_connection_limit";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_get_connection_limit";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_get_connection_limit";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_1836C4608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_group_get_connection_limit_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 180);
  return result;
}

void nw_connection_group_set_connection_limit(void *a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2)
    {
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_connection_group_set_connection_limit_block_invoke;
      aBlock[3] = &unk_1E524A070;
      int v17 = a2;
      os_log_type_t v16 = v3;
      nw_connection_group_t v5 = (void (**)(void))_Block_copy(aBlock);
      os_unfair_lock_lock(v4 + 43);
      v5[2](v5);
      os_unfair_lock_unlock(v4 + 43);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_connection_group_t v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_connection_group_set_connection_limit";
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s Cannot set connection limit lower than 1", buf, 0xCu);
      }
    }
    goto LABEL_7;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v21 = "nw_connection_group_set_connection_limit";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v8, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_connection_group_set_connection_limit";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v21 = "nw_connection_group_set_connection_limit";
          __int16 v22 = 2082;
          os_log_type_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_connection_group_set_connection_limit";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_connection_group_set_connection_limit";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v8) {
    free(v8);
  }
LABEL_7:
}

void sub_1836C49EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_connection_group_set_connection_limit_block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_DWORD *)(a1 + 40) != *(_DWORD *)(v1 + 180))
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(v1 + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v3 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        int v5 = *(_DWORD *)(a1 + 40);
        int v9 = 136446722;
        os_log_type_t v10 = "nw_connection_group_set_connection_limit_block_invoke";
        __int16 v11 = 1024;
        int v12 = v4;
        __int16 v13 = 1024;
        int v14 = v5;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s [G%u] setting connection limit to %d", (uint8_t *)&v9, 0x18u);
      }
    }
    unsigned int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 32);
    unsigned int v8 = *(_DWORD *)(v7 + 180);
    *(_DWORD *)(v7 + 180) = v6;
    if (v6 < v8) {
      nw_connection_group_prune_connections_locked(*(NWConcrete_nw_connection_group **)(a1 + 32));
    }
  }
}

uint64_t nw_connection_group_get_new_connection_limit(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v20 = 0;
    *(void *)&buf[16] = 0x2020000000;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_get_new_connection_limit_block_invoke;
    aBlock[3] = &unk_1E524B978;
    os_log_type_t v16 = buf;
    uint64_t v15 = v1;
    uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 43);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 43);

    uint64_t v4 = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  unsigned int v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_group_get_new_connection_limit";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_get_new_connection_limit";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_get_new_connection_limit";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_get_new_connection_limit";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_get_new_connection_limit";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_1836C4E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_group_get_new_connection_limit_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 184);
  return result;
}

void nw_connection_group_set_new_connection_limit(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_set_new_connection_limit_block_invoke;
    aBlock[3] = &unk_1E524A070;
    int v16 = a2;
    uint64_t v15 = v3;
    int v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v4 + 43);
    v5[2](v5);
    os_unfair_lock_unlock(v4 + 43);

    goto LABEL_3;
  }
  unsigned int v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v20 = "nw_connection_group_set_new_connection_limit";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        int v20 = "nw_connection_group_set_new_connection_limit";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          int v20 = "nw_connection_group_set_new_connection_limit";
          __int16 v21 = 2082;
          __int16 v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        int v20 = "nw_connection_group_set_new_connection_limit";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        int v20 = "nw_connection_group_set_new_connection_limit";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_1836C51F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_connection_group_set_new_connection_limit_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 40);
  if (!v1) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (v1 == *(_DWORD *)(v2 + 184)) {
    return;
  }
  *(_DWORD *)(v2 + 184) = v1;
  uint64_t v3 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v3 + 190) & 1) == 0) {
    return;
  }
  uint64_t v4 = *(NSObject **)(v3 + 88);
  if (v4)
  {
    uint32_t v5 = *(_DWORD *)(a1 + 40);
    nw_listener_set_new_connection_limit(v4, v5);
    return;
  }
  unsigned int v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_connection_group_set_new_connection_limit_block_invoke";
  uint64_t v7 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  os_log_type_t v13 = (char *)v7;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_connection_group_set_new_connection_limit_block_invoke";
        os_log_type_t v10 = "%{public}s called with null group->listener";
LABEL_22:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unsigned int v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            char v17 = "nw_connection_group_set_new_connection_limit_block_invoke";
            __int16 v18 = 2082;
            id v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null group->listener, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v12) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_connection_group_set_new_connection_limit_block_invoke";
        os_log_type_t v10 = "%{public}s called with null group->listener, no backtrace";
        goto LABEL_22;
      }
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_connection_group_set_new_connection_limit_block_invoke";
        os_log_type_t v10 = "%{public}s called with null group->listener, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:
  }
LABEL_24:
  if (v13) {
    free(v13);
  }
}

void nw_connection_group_set_new_connection_handler(nw_connection_group_t group, nw_connection_group_new_connection_handler_t new_connection_handler)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v3 = group;
  nw_connection_group_new_connection_handler_t v4 = new_connection_handler;
  if (v3)
  {
    *(void *)uint32_t v32 = 0;
    *(void *)&v32[8] = v32;
    *(void *)&v32[16] = 0x2020000000;
    char v33 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_set_new_connection_handler_block_invoke;
    aBlock[3] = &unk_1E523B9B8;
    nw_connection_group_t v5 = v3;
    nw_connection_group_t v22 = v5;
    id v6 = v4;
    id v23 = v6;
    uint64_t v24 = v32;
    uint64_t v7 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
    v7[2](v7);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

    LODWORD(v7) = *(unsigned __int8 *)(*(void *)&v32[8] + 24);
    BOOL logging_disabled = nw_parameters_get_logging_disabled((uint64_t)v5[7].isa);
    if (v7)
    {
      if (!logging_disabled)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        os_log_type_t v9 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          int isa = (int)v5[21].isa;
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_connection_group_set_new_connection_handler";
          __int16 v28 = 1024;
          int v29 = isa;
          _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to set new connection handler because group has already been started", buf, 0x12u);
        }
LABEL_13:
      }
    }
    else if (!logging_disabled)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      os_log_type_t v9 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v11 = (int)v5[21].isa;
        BOOL v12 = _Block_copy(v6);
        *(_DWORD *)buf = 136446722;
        uint64_t v27 = "nw_connection_group_set_new_connection_handler";
        __int16 v28 = 1024;
        int v29 = v11;
        __int16 v30 = 2048;
        __int16 v31 = v12;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] set new connection handler: %p", buf, 0x1Cu);
      }
      goto LABEL_13;
    }

    _Block_object_dispose(v32, 8);
    goto LABEL_15;
  }
  os_log_type_t v13 = __nwlog_obj();
  *(_DWORD *)uint32_t v32 = 136446210;
  *(void *)&v32[4] = "nw_connection_group_set_new_connection_handler";
  char v14 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  char v25 = 0;
  if (__nwlog_fault(v14, buf, &v25))
  {
    if (buf[0] == 17)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = buf[0];
      if (os_log_type_enabled(v15, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint32_t v32 = 136446210;
        *(void *)&v32[4] = "nw_connection_group_set_new_connection_handler";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null group", v32, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v18 = buf[0];
      BOOL v19 = os_log_type_enabled(v15, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)uint32_t v32 = 136446466;
          *(void *)&v32[4] = "nw_connection_group_set_new_connection_handler";
          *(_WORD *)&v32[12] = 2082;
          *(void *)&v32[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null group, dumping backtrace:%{public}s", v32, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }
      if (v19)
      {
        *(_DWORD *)uint32_t v32 = 136446210;
        *(void *)&v32[4] = "nw_connection_group_set_new_connection_handler";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null group, no backtrace", v32, 0xCu);
      }
    }
    else
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v20 = buf[0];
      if (os_log_type_enabled(v15, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint32_t v32 = 136446210;
        *(void *)&v32[4] = "nw_connection_group_set_new_connection_handler";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null group, backtrace limit exceeded", v32, 0xCu);
      }
    }
  }
LABEL_32:
  if (v14) {
    free(v14);
  }
LABEL_15:
}

void sub_1836C597C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Block_object_dispose((const void *)(v21 - 96), 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_set_new_connection_handler_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 190))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v3 = *(void *)(a1 + 32);
    nw_connection_group_new_connection_handler_t v4 = *(void **)(v3 + 144);
    *(void *)(v3 + 144) = v2;
  }
}

void nw_connection_group_set_receive_handler(nw_connection_group_t group, uint32_t maximum_message_size, BOOL reject_oversized_messages, nw_connection_group_receive_handler_t receive_handler)
{
  BOOL v5 = reject_oversized_messages;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v7 = group;
  nw_connection_group_receive_handler_t v8 = receive_handler;
  if (v7)
  {
    *(void *)os_log_type_t type = 0;
    char v33 = type;
    uint64_t v34 = 0x2020000000;
    char v35 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_set_receive_handler_block_invoke;
    aBlock[3] = &unk_1E523B9E0;
    nw_connection_group_t v9 = v7;
    nw_connection_group_t v27 = v9;
    uint32_t v30 = maximum_message_size;
    BOOL v31 = v5;
    id v10 = v8;
    id v28 = v10;
    int v29 = type;
    int v11 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v7[21].isa + 1);
    v11[2](v11);
    os_unfair_lock_unlock((os_unfair_lock_t)&v7[21].isa + 1);

    LODWORD(v11) = *((unsigned __int8 *)v33 + 24);
    BOOL logging_disabled = nw_parameters_get_logging_disabled((uint64_t)v9[7].isa);
    if (v11)
    {
      if (!logging_disabled)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        os_log_type_t v13 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          int isa = (int)v9[21].isa;
          *(_DWORD *)buf = 136446466;
          int v38 = "nw_connection_group_set_receive_handler";
          __int16 v39 = 1024;
          *(_DWORD *)unsigned int v40 = isa;
          _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to set receive handler because group has already been started", buf, 0x12u);
        }
LABEL_16:
      }
    }
    else if (!logging_disabled)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      os_log_type_t v13 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        int v15 = (int)v9[21].isa;
        if (v5) {
          os_log_type_t v16 = "true";
        }
        else {
          os_log_type_t v16 = "false";
        }
        char v17 = _Block_copy(v10);
        *(_DWORD *)buf = 136447234;
        int v38 = "nw_connection_group_set_receive_handler";
        __int16 v39 = 1024;
        *(_DWORD *)unsigned int v40 = v15;
        *(_WORD *)&v40[4] = 1024;
        *(_DWORD *)&v40[6] = maximum_message_size;
        __int16 v41 = 2080;
        BOOL v42 = v16;
        __int16 v43 = 2048;
        os_log_type_t v44 = v17;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] set maximum message size: %u, reject oversized messages: %s, handler: %p", buf, 0x2Cu);
      }
      goto LABEL_16;
    }

    _Block_object_dispose(type, 8);
    goto LABEL_18;
  }
  os_log_type_t v18 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v38 = "nw_connection_group_set_receive_handler";
  BOOL v19 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (__nwlog_fault(v19, type, &v36))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v21 = type[0];
      if (os_log_type_enabled(v20, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        int v38 = "nw_connection_group_set_receive_handler";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      BOOL v24 = os_log_type_enabled(v20, type[0]);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          int v38 = "nw_connection_group_set_receive_handler";
          __int16 v39 = 2082;
          *(void *)unsigned int v40 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        int v38 = "nw_connection_group_set_receive_handler";
        _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (os_log_type_enabled(v20, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        int v38 = "nw_connection_group_set_receive_handler";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_35:
  if (v19) {
    free(v19);
  }
LABEL_18:
}

void sub_1836C5F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_set_receive_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 190))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
    *(_DWORD *)(v2 + 176) = *(_DWORD *)(a1 + 56);
    *(unsigned char *)(*(void *)(a1 + 32) + 190) = *(unsigned char *)(*(void *)(a1 + 32) + 190) & 0xFD | (2 * *(unsigned char *)(a1 + 60));
    uint64_t v3 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v4 = *(void *)(a1 + 32);
    BOOL v5 = *(void **)(v4 + 136);
    *(void *)(v4 + 136) = v3;
  }
}

void nw_connection_group_reply(nw_connection_group_t group, nw_content_context_t inbound_message, nw_content_context_t outbound_message, dispatch_data_t content)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v7 = group;
  nw_connection_group_receive_handler_t v8 = inbound_message;
  nw_connection_group_t v9 = outbound_message;
  uint64_t v71 = v9;
  BOOL v72 = content;
  if (!v7)
  {
    BOOL v42 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
    __int16 v43 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v88[0]) = 0;
    if (!__nwlog_fault(v43, type, v88)) {
      goto LABEL_133;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v44 = __nwlog_obj();
      os_log_type_t v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (LOBYTE(v88[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v44 = __nwlog_obj();
      os_log_type_t v53 = type[0];
      BOOL v54 = os_log_type_enabled(v44, type[0]);
      if (backtrace_string)
      {
        if (v54)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v44, v53, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_133:
        if (!v43) {
          goto LABEL_67;
        }
LABEL_134:
        free(v43);
        goto LABEL_67;
      }
      if (v54)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_1830D4000, v44, v53, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v44 = __nwlog_obj();
      os_log_type_t v62 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_1830D4000, v44, v62, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_132:

    goto LABEL_133;
  }
  if (!v8)
  {
    os_log_type_t v46 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
    __int16 v43 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v88[0]) = 0;
    if (!__nwlog_fault(v43, type, v88)) {
      goto LABEL_133;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v44 = __nwlog_obj();
      os_log_type_t v47 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_1830D4000, v44, v47, "%{public}s called with null inbound_message", buf, 0xCu);
      }
      goto LABEL_132;
    }
    if (!LOBYTE(v88[0]))
    {
      os_log_type_t v44 = __nwlog_obj();
      os_log_type_t v63 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_1830D4000, v44, v63, "%{public}s called with null inbound_message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_132;
    }
    BOOL v55 = (char *)__nw_create_backtrace_string();
    os_log_type_t v44 = __nwlog_obj();
    os_log_type_t v56 = type[0];
    BOOL v57 = os_log_type_enabled(v44, type[0]);
    if (!v55)
    {
      if (v57)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_1830D4000, v44, v56, "%{public}s called with null inbound_message, no backtrace", buf, 0xCu);
      }
      goto LABEL_132;
    }
    if (v57)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v55;
      _os_log_impl(&dword_1830D4000, v44, v56, "%{public}s called with null inbound_message, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_103;
  }
  if (!v9)
  {
    int v48 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
    __int16 v43 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v88[0]) = 0;
    if (!__nwlog_fault(v43, type, v88)) {
      goto LABEL_133;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v44 = __nwlog_obj();
      os_log_type_t v49 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_1830D4000, v44, v49, "%{public}s called with null outbound_message", buf, 0xCu);
      }
      goto LABEL_132;
    }
    if (!LOBYTE(v88[0]))
    {
      os_log_type_t v44 = __nwlog_obj();
      os_log_type_t v64 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_1830D4000, v44, v64, "%{public}s called with null outbound_message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_132;
    }
    BOOL v55 = (char *)__nw_create_backtrace_string();
    os_log_type_t v44 = __nwlog_obj();
    os_log_type_t v58 = type[0];
    BOOL v59 = os_log_type_enabled(v44, type[0]);
    if (!v55)
    {
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_1830D4000, v44, v58, "%{public}s called with null outbound_message, no backtrace", buf, 0xCu);
      }
      goto LABEL_132;
    }
    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v55;
      _os_log_impl(&dword_1830D4000, v44, v58, "%{public}s called with null outbound_message, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_103:

    free(v55);
    if (!v43) {
      goto LABEL_67;
    }
    goto LABEL_134;
  }
  if ((SBYTE6(v7[23].isa) & 0x80000000) == 0 && SLODWORD(v7[5].isa) < 3)
  {
    *(void *)os_log_type_t type = 0;
    id v83 = type;
    uint64_t v84 = 0x3032000000;
    id v85 = __Block_byref_object_copy__8624;
    os_log_type_t v86 = __Block_byref_object_dispose__8625;
    nw_connection_group_t v10 = v7;
    int v11 = v8;
    BOOL v12 = (void *)nw_content_context_copy_connection(v11);
    if (!v12 && !nw_parameters_get_logging_disabled((uint64_t)v10[7].isa) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      BOOL v60 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
      {
        int isa = (int)v10[21].isa;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_find_connection_for_message";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = isa;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v11;
        _os_log_impl(&dword_1830D4000, v60, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Did not find connection for message (%@), returning nil", buf, 0x1Cu);
      }
    }
    id v87 = v12;
    os_log_type_t v13 = v11;
    char v14 = v13;
    int v15 = 0;
    if (v13 != (os_unfair_lock_s *)&__block_literal_global_10_42276
      && v13 != (os_unfair_lock_s *)&__block_literal_global_8_42267
      && v13 != (os_unfair_lock_s *)&__block_literal_global_6_42258
      && v13 != (os_unfair_lock_s *)&__block_literal_global_42249)
    {
      os_unfair_lock_lock(v13 + 28);
      if ((v14[29]._os_unfair_lock_opaque & 0x200000) != 0
        && (uint64_t v16 = *(void *)&v14[26]._os_unfair_lock_opaque) != 0
        && *(void *)(v16 + 24) - *(void *)(v16 + 16) >= 0x19uLL)
      {
        int v15 = nw_array_get_object_at_index(v16, 3uLL);
      }
      else
      {
        int v15 = 0;
      }
      os_unfair_lock_unlock(v14 + 28);
    }

    if (*((void *)v83 + 5))
    {
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_connection_group_reply_block_invoke;
      aBlock[3] = &unk_1E5242570;
      char v17 = v10;
      os_log_type_t v79 = v17;
      os_log_type_t v81 = type;
      os_log_type_t v18 = v9;
      __int16 v80 = v18;
      BOOL v19 = (void (**)(void))_Block_copy(aBlock);
      os_unfair_lock_lock((os_unfair_lock_t)&v10[21].isa + 1);
      v19[2](v19);
      os_unfair_lock_unlock((os_unfair_lock_t)&v10[21].isa + 1);

      os_log_type_t v20 = (NWConcrete_nw_connection *)*((void *)v83 + 5);
      if (v20)
      {
        nw_connection_group_touch_connection(v17, v20);
        os_log_type_t v21 = *((void *)v83 + 5);
        completion[0] = MEMORY[0x1E4F143A8];
        completion[1] = 3221225472;
        completion[2] = __nw_connection_group_reply_block_invoke_22;
        completion[3] = &unk_1E523BA08;
        os_log_type_t v74 = v17;
        os_log_type_t v75 = v14;
        os_log_type_t v76 = v18;
        os_log_type_t v77 = v72;
        nw_connection_send(v21, v77, v76, 1, completion);
      }
      goto LABEL_66;
    }
    BOOL logging_disabled = nw_parameters_get_logging_disabled((uint64_t)v10[7].isa);
    if (!v72 || !v15)
    {
      if (!logging_disabled)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        os_log_type_t v25 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          int v26 = (int)v10[21].isa;
          nw_connection_group_t v27 = v9;
          if (v27 == &__block_literal_global_42249)
          {
            id v28 = "Default Message";
          }
          else if (v27 == &__block_literal_global_6_42258)
          {
            id v28 = "Final Message";
          }
          else if (v27 == &__block_literal_global_8_42267)
          {
            id v28 = "Default Stream";
          }
          else if (v27 == &__block_literal_global_10_42276)
          {
            id v28 = "New Inbound Message";
          }
          else
          {
            id v28 = (const char *)&v27[3];
          }

          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v26;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v14;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v28;
          _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_ERROR, "%{public}s [G%u] context %p does not have connection and is not multicast with content, dropping reply context %s", buf, 0x26u);
        }
      }
      goto LABEL_66;
    }
    if (gLogDatapath) {
      char v23 = logging_disabled;
    }
    else {
      char v23 = 1;
    }
    if ((v23 & 1) == 0)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      os_log_type_t v65 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        int v66 = (int)v10[21].isa;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v66;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v14;
        _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Replying to multicast message (%@), sending direct response", buf, 0x1Cu);
      }
    }
    if (v10[12].isa)
    {
      BOOL v24 = nw_connection_group_copy_remote_endpoint_for_message(v10, (nw_content_context_t)v14);
      nw_connection_group_send_message(v10, v72, v24, v9, &__block_literal_global_8890);

LABEL_66:
      _Block_object_dispose(type, 8);

      goto LABEL_67;
    }
    int v29 = v10;
    id v30 = v15;
    BOOL v31 = v14;
    dispatch_qos_class_t v69 = v71;
    data = v72;
    uint64_t v89 = 0;
    uint64_t v90 = &v89;
    int v92 = -1;
    uint64_t v91 = 0x2020000000;
    v88[0] = MEMORY[0x1E4F143A8];
    v88[1] = 3221225472;
    v88[2] = ___ZL42nw_connection_group_send_message_on_socketP30NWConcrete_nw_connection_groupPU27objcproto16OS_nw_fd_wrapper8NSObjectPU32objcproto21OS_nw_content_contextS1_S5_PU27objcproto16OS_dispatch_dataS1__block_invoke;
    v88[3] = &unk_1E524A270;
    v88[4] = &v89;
    os_log_type_t v68 = v30;
    nw_fd_wrapper_get_fd(v30, v88);
    if ((v90[3] & 0x80000000) != 0)
    {
      if (!nw_parameters_get_logging_disabled((uint64_t)v10[7].isa))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        uint64_t v34 = (id)gconnection_groupLogObj;
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          goto LABEL_64;
        }
        int v38 = (int)v29[21].isa;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_on_socket";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v38;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v30;
        __int16 v39 = "%{public}s [G%u] Failed to get socket for %@";
LABEL_57:
        _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_ERROR, v39, buf, 0x1Cu);
        goto LABEL_64;
      }
    }
    else
    {
      BOOL v67 = v31;
      size_t size = dispatch_data_get_size(data);
      if (size)
      {
        size_t v33 = size;
        uint64_t v34 = nw_content_context_copy_remote_endpoint(v67);
        Class v35 = v10[7].isa;
        if (v34)
        {
          id v36 = nw_parameters_copy_context(v35);
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL42nw_connection_group_send_message_on_socketP30NWConcrete_nw_connection_groupPU27objcproto16OS_nw_fd_wrapper8NSObjectPU32objcproto21OS_nw_content_contextS1_S5_PU27objcproto16OS_dispatch_dataS1__block_invoke_149;
          *(void *)&unsigned char buf[24] = &unk_1E523BAF8;
          size_t v99 = v33;
          *(void *)&unsigned char buf[32] = data;
          os_log_type_t v94 = v29;
          id v95 = v34;
          uint64_t v98 = &v89;
          uint64_t v96 = v67;
          BOOL v97 = v69;
          BOOL v31 = v67;
          nw_queue_context_async(v36, buf);

          uint64_t v37 = *(NSObject **)&buf[32];
        }
        else
        {
          if (nw_parameters_get_logging_disabled((uint64_t)v35))
          {
            uint64_t v34 = 0;
            BOOL v31 = v67;
            goto LABEL_64;
          }
          BOOL v31 = v67;
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          uint64_t v37 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            int v41 = (int)v29[21].isa;
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_on_socket";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v41;
            _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot send without remote endpoint", buf, 0x12u);
          }
        }

LABEL_64:
        goto LABEL_65;
      }
      if (!nw_parameters_get_logging_disabled((uint64_t)v10[7].isa))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        uint64_t v34 = (id)gconnection_groupLogObj;
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          goto LABEL_64;
        }
        int v40 = (int)v29[21].isa;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_on_socket";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v40;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = 0;
        __int16 v39 = "%{public}s [G%u] Cannot send %zu-length data for multicast connection group";
        goto LABEL_57;
      }
    }
LABEL_65:
    _Block_object_dispose(&v89, 8);

    goto LABEL_66;
  }
  if (!nw_parameters_get_logging_disabled((uint64_t)v7[7].isa))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    os_log_type_t v50 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      int v51 = (int)v7[21].isa;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v51;
      _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot reply on a failed or cancelled group", buf, 0x12u);
    }
  }
LABEL_67:
}

void sub_1836C70C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39)
{
  _Block_object_dispose((const void *)(v44 - 240), 8);
  _Block_object_dispose(&a34, 8);

  _Unwind_Resume(a1);
}

void __nw_connection_group_reply_block_invoke(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  uint64_t v3 = *(id *)(a1 + 32);
  id v4 = v2;
  BOOL v5 = v4;
  if (!v3)
  {
    char v17 = __nwlog_obj();
    *(_DWORD *)Class v35 = 136446210;
    *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)Class v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null group", v35, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v19 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)Class v35 = 136446466;
          *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
          *(_WORD *)&v35[12] = 2082;
          *(void *)&v35[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null group, dumping backtrace:%{public}s", v35, 0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v18)
        {
LABEL_55:

          goto LABEL_11;
        }
LABEL_54:
        free(v18);
        goto LABEL_55;
      }
      if (v25)
      {
        *(_DWORD *)Class v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null group, no backtrace", v35, 0xCu);
      }
    }
    else
    {
      BOOL v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)Class v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null group, backtrace limit exceeded", v35, 0xCu);
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  if (!v4)
  {
    os_log_type_t v21 = __nwlog_obj();
    *(_DWORD *)Class v35 = 136446210;
    *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v19 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)Class v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null connection", v35, 0xCu);
      }
    }
    else if (v31)
    {
      int v26 = (char *)__nw_create_backtrace_string();
      BOOL v19 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v19, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)Class v35 = 136446466;
          *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
          *(_WORD *)&v35[12] = 2082;
          *(void *)&v35[14] = v26;
          _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null connection, dumping backtrace:%{public}s", v35, 0x16u);
        }

        free(v26);
        if (!v18) {
          goto LABEL_55;
        }
        goto LABEL_54;
      }
      if (v28)
      {
        *(_DWORD *)Class v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null connection, no backtrace", v35, 0xCu);
      }
    }
    else
    {
      BOOL v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)Class v35 = 136446210;
        *(void *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null connection, backtrace limit exceeded", v35, 0xCu);
      }
    }
    goto LABEL_52;
  }
  *(void *)Class v35 = 0;
  *(void *)&v35[8] = v35;
  *(void *)&v35[16] = 0x2020000000;
  char v36 = 0;
  id v6 = (atomic_uchar *)v3[13];
  if (!v6)
  {
    _Block_object_dispose(v35, 8);

    goto LABEL_11;
  }
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = ___ZL41nw_connection_group_has_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
  *(void *)&unsigned char buf[24] = &unk_1E524A2E8;
  id v7 = v4;
  *(void *)&unsigned char buf[32] = v7;
  uint64_t v34 = v35;
  nw_array_apply(v6, (uint64_t)buf);

  BOOL v8 = *(unsigned char *)(*(void *)&v35[8] + 24) == 0;
  _Block_object_dispose(v35, 8);

  if (v8)
  {
LABEL_11:
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      BOOL v12 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        identifier = nw_content_context_get_identifier(*(nw_content_context_t *)(a1 + 40));
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v13;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v14;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = identifier;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s [G%u] did not find connection %p, dropping reply context %s", buf, 0x26u);
      }
    }
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
    nw_connection_group_t v9 = *(NSObject **)(v16 + 40);
    *(void *)(v16 + 40) = 0;
    goto LABEL_18;
  }
  if (nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56))) {
    return;
  }
  if (__nwlog_connection_group_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
  }
  nw_connection_group_t v9 = (id)gconnection_groupLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
    uint64_t id = nw_connection_get_id(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_connection_group_reply_block_invoke";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = id;
    _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] has connection [C%llu], sending reply", buf, 0x1Cu);
  }
LABEL_18:
}

void __nw_connection_group_reply_block_invoke_22(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  BOOL logging_disabled = nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56));
  if (v3)
  {
    if (!logging_disabled)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      BOOL v5 = (id)gconnection_groupLogObj;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_15;
      }
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      identifier = nw_content_context_get_identifier(*(nw_content_context_t *)(a1 + 48));
      int v16 = 136447234;
      char v17 = "nw_connection_group_reply_block_invoke";
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 2048;
      uint64_t v21 = v6;
      __int16 v22 = 2080;
      char v23 = identifier;
      __int16 v24 = 2112;
      BOOL v25 = v3;
      nw_connection_group_t v9 = "%{public}s [G%u] context %p reply %s failed with error: %@";
      int v10 = v5;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
LABEL_14:
      _os_log_impl(&dword_1830D4000, v10, v11, v9, (uint8_t *)&v16, 0x30u);
LABEL_15:
    }
  }
  else if (!logging_disabled)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    BOOL v5 = (id)gconnection_groupLogObj;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_15;
    }
    uint64_t v12 = *(void *)(a1 + 40);
    int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
    uint64_t v14 = nw_content_context_get_identifier(*(nw_content_context_t *)(a1 + 48));
    size_t size = *(NSObject **)(a1 + 56);
    if (size) {
      size_t size = dispatch_data_get_size(size);
    }
    int v16 = 136447234;
    char v17 = "nw_connection_group_reply_block_invoke";
    __int16 v18 = 1024;
    int v19 = v13;
    __int16 v20 = 2048;
    uint64_t v21 = v12;
    __int16 v22 = 2080;
    char v23 = v14;
    __int16 v24 = 2048;
    BOOL v25 = size;
    nw_connection_group_t v9 = "%{public}s [G%u] sent reply to context %p: (context: %s, content: %zu bytes)";
    int v10 = v5;
    os_log_type_t v11 = OS_LOG_TYPE_DEBUG;
    goto LABEL_14;
  }
}

nw_endpoint_t nw_connection_group_copy_remote_endpoint_for_message(nw_connection_group_t group, nw_content_context_t context)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v3 = group;
  id v4 = context;
  BOOL v5 = v4;
  if (!v3)
  {
    __int16 v43 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
    __int16 v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v23 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v44, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (!v53)
    {
      char v23 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v51, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v23 = __nwlog_obj();
    os_log_type_t v47 = type;
    BOOL v48 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v47, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (v48)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
      __int16 v57 = 2082;
      os_log_type_t v58 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v23, v47, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_26;
  }
  if (!v4)
  {
    os_log_type_t v45 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
    __int16 v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v23 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v46, "%{public}s called with null context", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (!v53)
    {
      char v23 = __nwlog_obj();
      os_log_type_t v52 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v52, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v23 = __nwlog_obj();
    os_log_type_t v49 = type;
    BOOL v50 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v49, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
      __int16 v57 = 2082;
      os_log_type_t v58 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v23, v49, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_26:

    free(backtrace_string);
    if (!v22) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  Class isa = v3[8].isa;
  if (!isa)
  {
LABEL_17:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
    __int16 v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v23 = (id)gLogObj;
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s Group descriptor is not set", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (!v53)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v23 = (id)gLogObj;
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s Group descriptor is not set, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v23 = (id)gLogObj;
    os_log_type_t v26 = type;
    BOOL v27 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s Group descriptor is not set, no backtrace", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
      __int16 v57 = 2082;
      os_log_type_t v58 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s Group descriptor is not set, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_26;
  }
  int v7 = isa;
  int v8 = *((_DWORD *)v7 + 2);

  if (v8 != 1)
  {
    Class v11 = v3[8].isa;
    if (v11)
    {
      uint64_t v12 = v11;
      int v13 = *((_DWORD *)v12 + 2);

      if (v13 == 2) {
        goto LABEL_12;
      }
      Class v14 = v3[8].isa;
      if (v14)
      {
        int v15 = v14;
        int v16 = *((_DWORD *)v15 + 2);

        if (v16 == 4)
        {
LABEL_12:
          id v10 = nw_connection_group_copy_connection_for_message(v3, v5);
          if (!v10) {
            goto LABEL_7;
          }
          goto LABEL_13;
        }
        if (v3[8].isa)
        {
          __int16 v18 = __nwlog_obj();
          unsigned int v19 = nw_group_descriptor_get_type(v3[8].isa);
          if (v19 > 4) {
            __int16 v20 = "unknown";
          }
          else {
            __int16 v20 = off_1E523BC90[v19];
          }
          *(_DWORD *)buf = 136446466;
          os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
          __int16 v57 = 2080;
          os_log_type_t v58 = (void *)v20;
          __int16 v22 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v53 = 0;
          if (__nwlog_fault(v22, &type, &v53))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              char v23 = __nwlog_obj();
              os_log_type_t v30 = type;
              if (os_log_type_enabled(v23, type))
              {
                unsigned int v31 = nw_group_descriptor_get_type(v3[8].isa);
                if (v31 > 4) {
                  uint32_t v32 = "unknown";
                }
                else {
                  uint32_t v32 = off_1E523BC90[v31];
                }
                *(_DWORD *)buf = 136446466;
                os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
                __int16 v57 = 2080;
                os_log_type_t v58 = (void *)v32;
                _os_log_impl(&dword_1830D4000, v23, v30, "%{public}s Unsupported group descriptor type: %s", buf, 0x16u);
              }
LABEL_33:

              goto LABEL_34;
            }
            if (!v53)
            {
              char v23 = __nwlog_obj();
              os_log_type_t v38 = type;
              if (os_log_type_enabled(v23, type))
              {
                unsigned int v39 = nw_group_descriptor_get_type(v3[8].isa);
                if (v39 > 4) {
                  int v40 = "unknown";
                }
                else {
                  int v40 = off_1E523BC90[v39];
                }
                *(_DWORD *)buf = 136446466;
                os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
                __int16 v57 = 2080;
                os_log_type_t v58 = (void *)v40;
                _os_log_impl(&dword_1830D4000, v23, v38, "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded", buf, 0x16u);
              }
              goto LABEL_33;
            }
            size_t v33 = (char *)__nw_create_backtrace_string();
            char v23 = __nwlog_obj();
            os_log_type_t v34 = type;
            BOOL v35 = os_log_type_enabled(v23, type);
            if (!v33)
            {
              if (v35)
              {
                unsigned int v41 = nw_group_descriptor_get_type(v3[8].isa);
                if (v41 > 4) {
                  BOOL v42 = "unknown";
                }
                else {
                  BOOL v42 = off_1E523BC90[v41];
                }
                *(_DWORD *)buf = 136446466;
                os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
                __int16 v57 = 2080;
                os_log_type_t v58 = (void *)v42;
                _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s Unsupported group descriptor type: %s, no backtrace", buf, 0x16u);
              }
              goto LABEL_33;
            }
            if (v35)
            {
              unsigned int v36 = nw_group_descriptor_get_type(v3[8].isa);
              if (v36 > 4) {
                uint64_t v37 = "unknown";
              }
              else {
                uint64_t v37 = off_1E523BC90[v36];
              }
              *(_DWORD *)buf = 136446722;
              os_log_type_t v56 = "nw_connection_group_copy_remote_endpoint_for_message";
              __int16 v57 = 2080;
              os_log_type_t v58 = (void *)v37;
              __int16 v59 = 2082;
              BOOL v60 = v33;
              _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(v33);
          }
LABEL_34:
          if (!v22)
          {
LABEL_36:
            nw_connection_group_t v9 = 0;
            goto LABEL_37;
          }
LABEL_35:
          free(v22);
          goto LABEL_36;
        }
      }
    }
    goto LABEL_17;
  }
  nw_connection_group_t v9 = nw_content_context_copy_remote_endpoint(v5);
  if (!v9)
  {
    id v10 = nw_connection_group_copy_connection_for_message(v3, v5);
    if (!v10)
    {
LABEL_7:
      nw_connection_group_t v9 = 0;

      goto LABEL_37;
    }
LABEL_13:
    char v17 = (id *)v10;
    nw_connection_group_t v9 = v17[1];
  }
LABEL_37:

  return v9;
}

void sub_1836C85F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_group_send_message(nw_connection_group_t group, dispatch_data_t content, nw_endpoint_t endpoint, nw_content_context_t context, nw_connection_group_send_completion_t completion)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v9 = group;
  id v10 = content;
  Class v11 = endpoint;
  uint64_t v12 = context;
  nw_connection_group_send_completion_t v13 = completion;
  Class v14 = v13;
  unsigned int v36 = v10;
  uint64_t v37 = v11;
  if (!v9)
  {
    id v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_send_message";
    __int16 v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v46 = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v22, &v46, &v45)) {
      goto LABEL_40;
    }
    if (v46 == OS_LOG_TYPE_FAULT)
    {
      char v23 = __nwlog_obj();
      os_log_type_t v24 = v46;
      if (os_log_type_enabled(v23, v46))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_send_message";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (!v45)
    {
      char v23 = __nwlog_obj();
      os_log_type_t v34 = v46;
      if (os_log_type_enabled(v23, v46))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_send_message";
        _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v28 = __nwlog_obj();
    os_log_type_t v29 = v46;
    BOOL v30 = os_log_type_enabled(v28, v46);
    if (backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_send_message";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
LABEL_40:
      if (!v22) {
        goto LABEL_6;
      }
LABEL_41:
      free(v22);
      goto LABEL_6;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_send_message";
      _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null group, no backtrace", buf, 0xCu);
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v13)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v48 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_send_message_block_invoke;
    aBlock[3] = &unk_1E5241D50;
    int v15 = v9;
    unsigned int v39 = v15;
    int v16 = v10;
    int v40 = v16;
    char v17 = v11;
    unsigned int v41 = v17;
    __int16 v18 = v12;
    BOOL v42 = v18;
    id v19 = v14;
    id v43 = v19;
    os_log_type_t v44 = buf;
    __int16 v20 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v9[21].isa + 1);
    v20[2](v20);
    os_unfair_lock_unlock((os_unfair_lock_t)&v9[21].isa + 1);

    if (!*(unsigned char *)(*(void *)&buf[8] + 24)) {
      nw_connection_group_send_message_internal(v15, v16, v17, v18, v19);
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  BOOL v25 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_group_send_message";
  __int16 v22 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v46 = OS_LOG_TYPE_ERROR;
  char v45 = 0;
  if (!__nwlog_fault(v22, &v46, &v45)) {
    goto LABEL_40;
  }
  if (v46 == OS_LOG_TYPE_FAULT)
  {
    char v23 = __nwlog_obj();
    os_log_type_t v26 = v46;
    if (os_log_type_enabled(v23, v46))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_send_message";
      _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s called with null completion", buf, 0xCu);
    }
LABEL_33:

    goto LABEL_40;
  }
  if (!v45)
  {
    char v23 = __nwlog_obj();
    os_log_type_t v35 = v46;
    if (os_log_type_enabled(v23, v46))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_send_message";
      _os_log_impl(&dword_1830D4000, v23, v35, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_33;
  }
  unsigned int v31 = (char *)__nw_create_backtrace_string();
  os_log_type_t v28 = __nwlog_obj();
  os_log_type_t v32 = v46;
  BOOL v33 = os_log_type_enabled(v28, v46);
  if (!v31)
  {
    if (v33)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_send_message";
      _os_log_impl(&dword_1830D4000, v28, v32, "%{public}s called with null completion, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v33)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_connection_group_send_message";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v31;
    _os_log_impl(&dword_1830D4000, v28, v32, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v31);
  if (v22) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_1836C8C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_connection_group_send_message_on_socketP30NWConcrete_nw_connection_groupPU27objcproto16OS_nw_fd_wrapper8NSObjectPU32objcproto21OS_nw_content_contextS1_S5_PU27objcproto16OS_dispatch_dataS1__block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  return 1;
}

void ___ZL42nw_connection_group_send_message_on_socketP30NWConcrete_nw_connection_groupPU27objcproto16OS_nw_fd_wrapper8NSObjectPU32objcproto21OS_nw_content_contextS1_S5_PU27objcproto16OS_dispatch_dataS1__block_invoke_149(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  size_t v2 = *(void *)(a1 + 80);
  if (!v2)
  {
    BOOL v50 = __nwlog_obj();
    os_log_type_enabled(v50, OS_LOG_TYPE_ERROR);
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "strict_calloc";
    os_log_type_t v51 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v51)) {
      goto LABEL_83;
    }
    free(v51);
  }
  nw_connection_group_t v3 = malloc_type_calloc(1uLL, v2, 0xEAFB8F1AuLL);
  if (!v3)
  {
    os_log_type_t v52 = __nwlog_obj();
    os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
    *(_DWORD *)applier = 136446722;
    *(void *)&void applier[4] = "strict_calloc";
    *(_WORD *)&applier[12] = 2048;
    *(void *)&applier[14] = 1;
    *(_WORD *)&applier[22] = 2048;
    *(void *)&applier[24] = v2;
    char v53 = (void *)_os_log_send_and_compose_impl();

    if (!__nwlog_abort((uint64_t)v53))
    {
      free(v53);
      BOOL v5 = (uint64_t *)(a1 + 32);
      uint64_t v7 = nw_dispatch_data_copyout(*(NSObject **)(a1 + 32), 0, *(void *)(a1 + 80));
      goto LABEL_7;
    }
LABEL_83:
    __break(1u);
    return;
  }
  BOOL v5 = (uint64_t *)(a1 + 32);
  id v4 = *(NSObject **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 80);
  *(void *)os_log_type_t type = 0;
  uint64_t v61 = type;
  uint64_t v62 = 0x2000000000;
  uint64_t v63 = 0;
  v59[0] = 0;
  v59[1] = v59;
  v59[2] = 0x2000000000;
  v59[3] = v3;
  if (v4)
  {
    *(void *)applier = MEMORY[0x1E4F143A8];
    *(void *)&applier[8] = 0x40000000;
    *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(void *)&applier[24] = &unk_1E5242B60;
    *(void *)&applier[40] = v59;
    *(void *)&applier[48] = v6;
    *(void *)&applier[32] = type;
    dispatch_data_apply(v4, applier);
    uint64_t v7 = *((void *)v61 + 3);
  }
  else
  {
    uint64_t v7 = 0;
  }
  _Block_object_dispose(v59, 8);
  _Block_object_dispose(type, 8);
LABEL_7:
  if (v7 != *(void *)(a1 + 80))
  {
    if (nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 56))) {
      goto LABEL_42;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    Class v14 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      int v16 = *(_DWORD *)(*(void *)(a1 + 40) + 168);
      uint64_t v17 = *(void *)(a1 + 80);
      *(_DWORD *)applier = 136446978;
      *(void *)&void applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
      *(_WORD *)&applier[12] = 1024;
      *(_DWORD *)&applier[14] = v16;
      *(_WORD *)&applier[18] = 2048;
      *(void *)&applier[20] = v17;
      *(_WORD *)&applier[28] = 2112;
      *(void *)&applier[30] = v15;
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Failed to copy %zu bytes of content from %@", applier, 0x26u);
    }
    goto LABEL_22;
  }
  nw_endpoint_t address = nw_endpoint_get_address(*(nw_endpoint_t *)(a1 + 48));
  BOOL logging_disabled = nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 56));
  if (!address)
  {
    if (logging_disabled) {
      goto LABEL_42;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    Class v14 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a1 + 48);
      int v19 = *(_DWORD *)(*(void *)(a1 + 40) + 168);
      *(_DWORD *)applier = 136446722;
      *(void *)&void applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
      *(_WORD *)&applier[12] = 1024;
      *(_DWORD *)&applier[14] = v19;
      *(_WORD *)&applier[18] = 2112;
      *(void *)&applier[20] = v18;
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Failed to access address from %@", applier, 0x1Cu);
    }
LABEL_22:

    goto LABEL_42;
  }
  if (gLogDatapath) {
    char v10 = logging_disabled;
  }
  else {
    char v10 = 1;
  }
  if ((v10 & 1) == 0)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    BOOL v54 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v55 = *(void *)(a1 + 48);
      int v56 = *(_DWORD *)(*(void *)(a1 + 40) + 168);
      uint64_t v57 = *(void *)(a1 + 80);
      int v58 = *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      *(_DWORD *)applier = 136447490;
      *(void *)&void applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
      *(_WORD *)&applier[12] = 1024;
      *(_DWORD *)&applier[14] = v56;
      *(_WORD *)&applier[18] = 1024;
      *(_DWORD *)&applier[20] = v58;
      *(_WORD *)&applier[24] = 2048;
      *(void *)&applier[26] = v3;
      *(_WORD *)&applier[34] = 2048;
      *(void *)&applier[36] = v57;
      *(_WORD *)&applier[44] = 2112;
      *(void *)&applier[46] = v55;
      _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] calling sendto(%d, %p, %zu, 0, %@)", applier, 0x36u);
    }
  }
  ssize_t v11 = sendto(*(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24), v3, *(void *)(a1 + 80), 0, address, address->sa_len);
  ssize_t v12 = v11;
  if (v11 < 0)
  {
    int v20 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = (id)gLogObj;
    uint64_t v22 = *v5;
    *(_DWORD *)applier = 136446722;
    *(void *)&void applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
    *(_WORD *)&applier[12] = 2112;
    *(void *)&applier[14] = v22;
    *(_WORD *)&applier[22] = 1024;
    *(_DWORD *)&applier[24] = v20;
    char v23 = (void *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v59[0]) = 0;
    if (__nwlog_fault((const char *)v23, type, v59))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (id)gLogObj;
        os_log_type_t v25 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          uint64_t v26 = *v5;
          *(_DWORD *)applier = 136446722;
          *(void *)&void applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
          *(_WORD *)&applier[12] = 2112;
          *(void *)&applier[14] = v26;
          *(_WORD *)&applier[22] = 1024;
          *(_DWORD *)&applier[24] = v20;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s sendto failed for %@ %{darwin.errno}d", applier, 0x1Cu);
        }
      }
      else if (LOBYTE(v59[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (id)gLogObj;
        os_log_type_t v44 = type[0];
        BOOL v45 = os_log_type_enabled(v24, type[0]);
        if (backtrace_string)
        {
          if (v45)
          {
            uint64_t v46 = *v5;
            *(_DWORD *)applier = 136446978;
            *(void *)&void applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
            *(_WORD *)&applier[12] = 2112;
            *(void *)&applier[14] = v46;
            *(_WORD *)&applier[22] = 1024;
            *(_DWORD *)&applier[24] = v20;
            *(_WORD *)&applier[28] = 2082;
            *(void *)&applier[30] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v24, v44, "%{public}s sendto failed for %@ %{darwin.errno}d, dumping backtrace:%{public}s", applier, 0x26u);
          }

          free(backtrace_string);
          if (!v23)
          {
LABEL_42:
            int v13 = 0;
            if (!v3) {
              goto LABEL_44;
            }
            goto LABEL_43;
          }
LABEL_35:
          free(v23);
          goto LABEL_42;
        }
        if (v45)
        {
          uint64_t v49 = *v5;
          *(_DWORD *)applier = 136446722;
          *(void *)&void applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
          *(_WORD *)&applier[12] = 2112;
          *(void *)&applier[14] = v49;
          *(_WORD *)&applier[22] = 1024;
          *(_DWORD *)&applier[24] = v20;
          _os_log_impl(&dword_1830D4000, v24, v44, "%{public}s sendto failed for %@ %{darwin.errno}d, no backtrace", applier, 0x1Cu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (id)gLogObj;
        os_log_type_t v47 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          uint64_t v48 = *v5;
          *(_DWORD *)applier = 136446722;
          *(void *)&void applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
          *(_WORD *)&applier[12] = 2112;
          *(void *)&applier[14] = v48;
          *(_WORD *)&applier[22] = 1024;
          *(_DWORD *)&applier[24] = v20;
          _os_log_impl(&dword_1830D4000, v24, v47, "%{public}s sendto failed for %@ %{darwin.errno}d, backtrace limit exceeded", applier, 0x1Cu);
        }
      }
    }
    if (!v23) {
      goto LABEL_42;
    }
    goto LABEL_35;
  }
  if (v11 != *(void *)(a1 + 80))
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      BOOL v27 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        int v28 = *(_DWORD *)(*(void *)(a1 + 40) + 168);
        uint64_t v29 = *(void *)(a1 + 80);
        *(_DWORD *)applier = 136446978;
        *(void *)&void applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
        *(_WORD *)&applier[12] = 1024;
        *(_DWORD *)&applier[14] = v28;
        *(_WORD *)&applier[18] = 2048;
        *(void *)&applier[20] = v12;
        *(_WORD *)&applier[28] = 2048;
        *(void *)&applier[30] = v29;
        _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Failed to send entire packet, sent %zu bytes of %zu", applier, 0x26u);
      }
    }
    goto LABEL_42;
  }
  int v13 = 1;
  if (v3) {
LABEL_43:
  }
    free(v3);
LABEL_44:
  BOOL v30 = nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 56));
  if (v13)
  {
    if (v30) {
      return;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    unsigned int v31 = (id)gconnection_groupLogObj;
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_60;
    }
    int v32 = *(_DWORD *)(*(void *)(a1 + 40) + 168);
    uint64_t v33 = *(void *)(a1 + 56);
    identifier = nw_content_context_get_identifier(*(nw_content_context_t *)(a1 + 64));
    size_t size = *(NSObject **)(a1 + 32);
    if (size) {
      size_t size = dispatch_data_get_size(size);
    }
    *(_DWORD *)applier = 136447234;
    *(void *)&void applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
    *(_WORD *)&applier[12] = 1024;
    *(_DWORD *)&applier[14] = v32;
    *(_WORD *)&applier[18] = 2048;
    *(void *)&applier[20] = v33;
    *(_WORD *)&applier[28] = 2080;
    *(void *)&applier[30] = identifier;
    *(_WORD *)&applier[38] = 2048;
    *(void *)&applier[40] = size;
    unsigned int v36 = "%{public}s [G%u] sent reply to context %p: (context: %s, content: %zu bytes)";
    uint64_t v37 = v31;
    os_log_type_t v38 = OS_LOG_TYPE_DEBUG;
    goto LABEL_59;
  }
  if (v30) {
    return;
  }
  if (__nwlog_connection_group_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
  }
  unsigned int v31 = (id)gconnection_groupLogObj;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    int v39 = *(_DWORD *)(*(void *)(a1 + 40) + 168);
    uint64_t v40 = *(void *)(a1 + 56);
    unsigned int v41 = nw_content_context_get_identifier(*(nw_content_context_t *)(a1 + 64));
    BOOL v42 = *(NSObject **)(a1 + 32);
    if (v42) {
      BOOL v42 = dispatch_data_get_size(v42);
    }
    *(_DWORD *)applier = 136447234;
    *(void *)&void applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
    *(_WORD *)&applier[12] = 1024;
    *(_DWORD *)&applier[14] = v39;
    *(_WORD *)&applier[18] = 2048;
    *(void *)&applier[20] = v40;
    *(_WORD *)&applier[28] = 2080;
    *(void *)&applier[30] = v41;
    *(_WORD *)&applier[38] = 2048;
    *(void *)&applier[40] = v42;
    unsigned int v36 = "%{public}s [G%u] context %p failed to send reply (context: %s, content: %zu bytes)";
    uint64_t v37 = v31;
    os_log_type_t v38 = OS_LOG_TYPE_ERROR;
LABEL_59:
    _os_log_impl(&dword_1830D4000, v37, v38, v36, applier, 0x30u);
  }
LABEL_60:
}

void __nw_connection_group_send_message_block_invoke(uint64_t a1)
{
  *(void *)&v41[13] = *MEMORY[0x1E4F143B8];
  if (nw_connection_group_get_type(*(void **)(a1 + 32)) != 1) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 96) || (*(unsigned char *)(v2 + 190) & 0x20) != 0) {
    return;
  }
  id v4 = *(void **)(a1 + 40);
  nw_connection_group_t v3 = *(void **)(a1 + 48);
  uint64_t v6 = *(void **)(a1 + 56);
  BOOL v5 = *(void **)(a1 + 64);
  id v35 = (id)v2;
  id v7 = v4;
  id v8 = v3;
  id v9 = v6;
  id v10 = v5;
  ssize_t v11 = v10;
  if (!v9)
  {
    int v19 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v39 = "nw_connection_group_create_request";
    int v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v20, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v21 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          int v39 = "nw_connection_group_create_request";
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null context", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (!v36)
      {
        id v21 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          int v39 = "nw_connection_group_create_request";
          _os_log_impl(&dword_1830D4000, v21, v33, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v28, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          int v39 = "nw_connection_group_create_request";
          __int16 v40 = 2082;
          *(void *)unsigned int v41 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_37;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        int v39 = "nw_connection_group_create_request";
        _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
LABEL_49:
    }
LABEL_50:
    if (v20) {
      free(v20);
    }
    ssize_t v12 = 0;
    goto LABEL_7;
  }
  if (!v10)
  {
    char v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v39 = "nw_connection_group_create_request";
    int v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v20, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v21 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          int v39 = "nw_connection_group_create_request";
          _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s called with null completion", buf, 0xCu);
        }
LABEL_43:

        goto LABEL_50;
      }
      if (!v36)
      {
        id v21 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          int v39 = "nw_connection_group_create_request";
          _os_log_impl(&dword_1830D4000, v21, v34, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v28 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v28, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          int v39 = "nw_connection_group_create_request";
          __int16 v40 = 2082;
          *(void *)unsigned int v41 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_37:

        free(backtrace_string);
        goto LABEL_50;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        int v39 = "nw_connection_group_create_request";
        _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  ssize_t v12 = objc_alloc_init(NWConcrete_nw_connection_group_send_request);
  objc_storeStrong((id *)&v12->group, (id)v2);
  objc_storeStrong((id *)&v12->data, v4);
  objc_storeStrong((id *)&v12->endpoint, v3);
  objc_storeStrong((id *)&v12->context, v6);
  int v13 = _Block_copy(v11);
  id completion = v12->completion;
  v12->id completion = v13;

LABEL_7:
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    os_log_type_t v25 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      int v26 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      *(_DWORD *)buf = 136446722;
      int v39 = "nw_connection_group_send_message_block_invoke";
      __int16 v40 = 1024;
      *(_DWORD *)unsigned int v41 = v26;
      v41[2] = 2112;
      *(void *)&v41[3] = v12;
      _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] enqueuing send request %@", buf, 0x1Cu);
    }
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 112);
  if (!v15)
  {
    BOOL v16 = nw_array_create();
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void **)(v17 + 112);
    *(void *)(v17 + 112) = v16;

    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 112);
  }
  nw_array_append(v15, v12);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
}

void sub_1836C9DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void nw_connection_group_send_message_internal(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  content = a2;
  id v10 = a3;
  context = a4;
  id v11 = a5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke;
  aBlock[3] = &unk_1E523BB20;
  ssize_t v12 = (char *)v9;
  id v126 = v12;
  id v116 = v11;
  id v127 = v116;
  os_log_type_t v114 = (void (**)(void *, uint64_t))_Block_copy(aBlock);
  if (!context)
  {
    if (nw_parameters_get_logging_disabled(*((void *)v12 + 7)))
    {
LABEL_159:
      uint64_t v71 = 22;
LABEL_160:
      v114[2](v114, v71);
      goto LABEL_75;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    id v63 = (id)gconnection_groupLogObj;
    int v64 = *((_DWORD *)v12 + 42);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v64;
    uint64_t v65 = (char *)_os_log_send_and_compose_impl();

    v151[0] = 16;
    v149[0] = 0;
    if (__nwlog_fault(v65, v151, v149))
    {
      if (v151[0] == 17)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        int v66 = (id)gconnection_groupLogObj;
        os_log_type_t v67 = v151[0];
        if (os_log_type_enabled(v66, (os_log_type_t)v151[0]))
        {
          int v68 = *((_DWORD *)v12 + 42);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v68;
          _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s [G%u] context must not be NULL", buf, 0x12u);
        }
      }
      else if (v149[0])
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          os_log_type_t v79 = (char *)backtrace_string;
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          __int16 v80 = (id)gconnection_groupLogObj;
          os_log_type_t v81 = v151[0];
          if (os_log_type_enabled(v80, (os_log_type_t)v151[0]))
          {
            int v82 = *((_DWORD *)v12 + 42);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v82;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = v79;
            _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s [G%u] context must not be NULL, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v79);
          goto LABEL_157;
        }
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        int v66 = (id)gconnection_groupLogObj;
        os_log_type_t v101 = v151[0];
        if (os_log_type_enabled(v66, (os_log_type_t)v151[0]))
        {
          int v102 = *((_DWORD *)v12 + 42);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v102;
          _os_log_impl(&dword_1830D4000, v66, v101, "%{public}s [G%u] context must not be NULL, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        int v66 = (id)gconnection_groupLogObj;
        os_log_type_t v91 = v151[0];
        if (os_log_type_enabled(v66, (os_log_type_t)v151[0]))
        {
          int v92 = *((_DWORD *)v12 + 42);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v92;
          _os_log_impl(&dword_1830D4000, v66, v91, "%{public}s [G%u] context must not be NULL, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
LABEL_157:
    if (v65) {
      free(v65);
    }
    goto LABEL_159;
  }
  if (v12[190] < 0 || *((int *)v12 + 10) >= 3)
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v12 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      dispatch_qos_class_t v69 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        int v70 = *((_DWORD *)v12 + 42);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v70;
        _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot send a message on a failed or cancelled group", buf, 0x12u);
      }
    }
    uint64_t v71 = 89;
    goto LABEL_160;
  }
  if (v10) {
    goto LABEL_5;
  }
  id v29 = nw_group_descriptor_copy_members(*((void **)v12 + 8));
  id v22 = v29;
  if (!v29 || *((void *)v29 + 3) == *((void *)v29 + 2))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v40 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
    unsigned int v41 = (char *)_os_log_send_and_compose_impl();

    v151[0] = 16;
    v149[0] = 0;
    if (!__nwlog_fault(v41, v151, v149)) {
      goto LABEL_71;
    }
    if (v151[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v42 = (id)gLogObj;
      os_log_type_t v43 = v151[0];
      if (os_log_type_enabled(v42, (os_log_type_t)v151[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
        _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s Cannot find endpoints for sending", buf, 0xCu);
      }
    }
    else if (v149[0])
    {
      os_log_type_t v44 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v42 = (id)gLogObj;
      os_log_type_t v45 = v151[0];
      BOOL v46 = os_log_type_enabled(v42, (os_log_type_t)v151[0]);
      if (v44)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v44;
          _os_log_impl(&dword_1830D4000, v42, v45, "%{public}s Cannot find endpoints for sending, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v44);
        if (!v41) {
          goto LABEL_73;
        }
        goto LABEL_72;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
        _os_log_impl(&dword_1830D4000, v42, v45, "%{public}s Cannot find endpoints for sending, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v42 = (id)gLogObj;
      os_log_type_t v56 = v151[0];
      if (os_log_type_enabled(v42, (os_log_type_t)v151[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
        _os_log_impl(&dword_1830D4000, v42, v56, "%{public}s Cannot find endpoints for sending, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_70;
  }
  uint64_t v30 = nw_array_get_object_at_index((uint64_t)v29, 0);
  if (v30)
  {
    id v10 = (id)v30;

LABEL_5:
    id v10 = v10;
    os_log_type_t v113 = (void *)[v10 copyEndpoint];
    nw_endpoint_copy_properties(v10, v113);

    id v13 = *((id *)v12 + 7);
    BOOL v14 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v13, 0, 0);

    uint64_t v15 = v12;
    BOOL v16 = (void *)*((void *)v15 + 8);
    BOOL host_with_numeric_port = (BOOL)v15;
    if (v16)
    {
      uint64_t v18 = v16;
      int v19 = v18[2];

      if (v19 != 1) {
        goto LABEL_9;
      }
      unsigned int port = nw_connection_group_get_port(v15);
      BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port("0.0.0.0", port);
      nw_parameters_set_reuse_local_address((nw_parameters_t)v14, 1);
      nw_parameters_set_local_endpoint((nw_parameters_t)v14, (nw_endpoint_t)host_with_numeric_port);
      nw_parameters_set_allow_socket_access((void *)v14, 1);
    }

LABEL_9:
    id v21 = v15;
    id v22 = v113;
    id v23 = (id)v14;
    os_log_type_t v24 = v23;
    if (!v22)
    {
      BOOL v72 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      os_log_type_t v73 = (char *)_os_log_send_and_compose_impl();

      v151[0] = 16;
      v149[0] = 0;
      if (!__nwlog_fault(v73, v151, v149)) {
        goto LABEL_167;
      }
      if (v151[0] == 17)
      {
        os_log_type_t v74 = __nwlog_obj();
        os_log_type_t v75 = v151[0];
        if (os_log_type_enabled(v74, (os_log_type_t)v151[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          _os_log_impl(&dword_1830D4000, v74, v75, "%{public}s called with null remote_endpoint", buf, 0xCu);
        }
      }
      else if (v149[0])
      {
        id v85 = (char *)__nw_create_backtrace_string();
        os_log_type_t v74 = __nwlog_obj();
        os_log_type_t v86 = v151[0];
        BOOL v87 = os_log_type_enabled(v74, (os_log_type_t)v151[0]);
        if (v85)
        {
          if (v87)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v85;
            _os_log_impl(&dword_1830D4000, v74, v86, "%{public}s called with null remote_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v85);
          if (!v73) {
            goto LABEL_169;
          }
          goto LABEL_168;
        }
        if (v87)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          _os_log_impl(&dword_1830D4000, v74, v86, "%{public}s called with null remote_endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v74 = __nwlog_obj();
        os_log_type_t v99 = v151[0];
        if (os_log_type_enabled(v74, (os_log_type_t)v151[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          _os_log_impl(&dword_1830D4000, v74, v99, "%{public}s called with null remote_endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_166;
    }
    if (v23)
    {
      uint64_t v132 = 0;
      os_log_type_t v133 = &v132;
      uint64_t v134 = 0x3032000000;
      BOOL v135 = __Block_byref_object_copy__8624;
      uint32_t v136 = __Block_byref_object_dispose__8625;
      id v137 = 0;
      uint64_t v128 = 0;
      os_log_type_t v129 = &v128;
      uint64_t v130 = 0x2020000000;
      char v131 = 0;
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke;
      *(void *)&unsigned char buf[24] = &unk_1E523BB48;
      uint64_t v112 = v21;
      *(void *)&unsigned char buf[32] = v112;
      os_log_type_t v147 = &v128;
      os_log_type_t v25 = v24;
      BOOL v145 = v25;
      id v26 = v22;
      id v146 = v26;
      os_log_type_t v148 = &v132;
      BOOL v27 = (void (**)(void))_Block_copy(buf);
      os_unfair_lock_lock(v21 + 43);
      v27[2](v27);
      os_unfair_lock_unlock(v21 + 43);

      if (*((unsigned char *)v129 + 24))
      {
        int v28 = 0;
LABEL_61:

        _Block_object_dispose(&v128, 8);
        _Block_object_dispose(&v132, 8);

LABEL_62:
        if (v28)
        {
          if (!nw_parameters_get_logging_disabled(*((void *)v12 + 7)) && gLogDatapath)
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
            }
            id v83 = (id)gconnection_groupLogObj;
            if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
            {
              uint32_t os_unfair_lock_opaque = v21[42]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = os_unfair_lock_opaque;
              *(_WORD *)&buf[18] = 2112;
              *(void *)&buf[20] = v22;
              *(_WORD *)&buf[28] = 2112;
              *(void *)&buf[30] = v24;
              *(_WORD *)&buf[38] = 2112;
              BOOL v145 = v28;
              _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Got connection for endpoint (%@) and parameters (%@): %@", buf, 0x30u);
            }
          }
          nw_connection_group_touch_connection((NWConcrete_nw_connection_group *)v21, v28);
          completion[0] = MEMORY[0x1E4F143A8];
          completion[1] = 3221225472;
          completion[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_154;
          completion[3] = &unk_1E523C930;
          BOOL v119 = v21;
          int v120 = v28;
          BOOL v121 = (void (**)(void))v116;
          nw_connection_send(&v120->super, content, context, 1, completion);
          BOOL v60 = (id *)&v119;
          uint64_t v61 = (id *)&v120;
          uint64_t v62 = v121;
        }
        else
        {
          v122[0] = MEMORY[0x1E4F143A8];
          v122[1] = 3221225472;
          v122[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_152;
          v122[3] = &unk_1E524B950;
          os_log_type_t v123 = v21;
          id v124 = v116;
          uint64_t v62 = (void (**)(void))_Block_copy(v122);
          os_unfair_lock_lock(v21 + 43);
          v62[2](v62);
          BOOL v60 = (id *)&v123;
          uint64_t v61 = &v124;
          os_unfair_lock_unlock(v21 + 43);
        }

        goto LABEL_74;
      }
      if (v133[5])
      {
        os_log_type_t v31 = (void *)*((void *)v15 + 8);
        if (!v31 || (BOOL v32 = v31, v33 = v32[2], v32, v33 != 2))
        {
LABEL_60:
          int v28 = (NWConcrete_nw_connection *)(id)v133[5];
          goto LABEL_61;
        }
      }
      if (!nw_parameters_get_logging_disabled(*((void *)v12 + 7)) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        os_log_type_t v93 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
        {
          uint32_t v94 = v112[42]._os_unfair_lock_opaque;
          *(_DWORD *)os_log_type_t v151 = 136446978;
          *(void *)&v151[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          *(_WORD *)&v151[12] = 1024;
          *(_DWORD *)&v151[14] = v94;
          *(_WORD *)&v151[18] = 2112;
          *(void *)&v151[20] = v26;
          *(_WORD *)&v151[28] = 2112;
          *(void *)&v151[30] = v25;
          _os_log_impl(&dword_1830D4000, v93, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Did not find connection for (remote: %@, parameters: %@), creating new connection", v151, 0x26u);
        }
      }
      os_log_type_t v34 = (void *)v133[5];
      os_log_type_t v110 = v112;
      id v108 = v34;
      endpoint = v26;
      id v35 = v25;
      *(void *)os_log_type_t v151 = 0;
      *(void *)&v151[8] = v151;
      *(void *)&v151[16] = 0x3032000000;
      *(void *)&v151[24] = __Block_byref_object_copy__8624;
      *(void *)&v151[32] = __Block_byref_object_dispose__8625;
      v152 = 0;
      uint64_t v107 = v35;
      parameters = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v107, 0, 0);

      nw_parameters_set_reuse_local_address(parameters, 1);
      if (!nw_parameters_get_logging_disabled(*((void *)v12 + 7)) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        id v95 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
        {
          uint32_t v96 = v110[42]._os_unfair_lock_opaque;
          *(_DWORD *)os_log_type_t v149 = 136446978;
          *(void *)&v149[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
          *(_WORD *)&v149[12] = 1024;
          *(_DWORD *)&v149[14] = v96;
          *(_WORD *)&v149[18] = 2112;
          *(void *)&v149[20] = endpoint;
          *(_WORD *)&v149[28] = 2112;
          *(void *)&v149[30] = parameters;
          _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Creating connection for endpoint (%@) and parameters (%@)", v149, 0x26u);
        }
      }
      char v36 = (void *)*((void *)v15 + 8);
      if (v36 && (uint64_t v37 = v36, v38 = v37[2], v37, v38 == 2)) {
        nw_connection_t v39 = (nw_connection_t)nw_connection_create_with_connection(v108, parameters);
      }
      else {
        nw_connection_t v39 = nw_connection_create(endpoint, parameters);
      }
      os_log_type_t v47 = *(void **)(*(void *)&v151[8] + 40);
      *(void *)(*(void *)&v151[8] + 40) = v39;

      if (*(void *)(*(void *)&v151[8] + 40))
      {
        *(void *)os_log_type_t v149 = MEMORY[0x1E4F143A8];
        *(void *)&v149[8] = 3221225472;
        *(void *)&v149[16] = ___ZL65nw_connection_group_create_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS3_PU33objcproto22OS_nw_protocol_optionsS3_b_block_invoke;
        *(void *)&v149[24] = &unk_1E524B978;
        *(void *)&v149[32] = v110;
        uint64_t v150 = v151;
        uint64_t v48 = (void (**)(void))_Block_copy(v149);
        os_unfair_lock_lock(v21 + 43);
        v48[2](v48);
        os_unfair_lock_unlock(v21 + 43);

        uint64_t v49 = *(NSObject **)&v149[32];
      }
      else
      {
        if (nw_parameters_get_logging_disabled(*((void *)v12 + 7))) {
          goto LABEL_47;
        }
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        uint64_t v49 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          uint32_t v50 = v110[42]._os_unfair_lock_opaque;
          uint64_t v51 = *((void *)v12 + 7);
          *(_DWORD *)os_log_type_t v149 = 136446722;
          *(void *)&v149[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
          *(_WORD *)&v149[12] = 1024;
          *(_DWORD *)&v149[14] = v50;
          *(_WORD *)&v149[18] = 2112;
          *(void *)&v149[20] = v51;
          _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to create connection with parameters %@", v149, 0x1Cu);
        }
      }

LABEL_47:
      id v52 = *(id *)(*(void *)&v151[8] + 40);

      _Block_object_dispose(v151, 8);
      char v53 = (void *)v133[5];
      v133[5] = (uint64_t)v52;

      if (v133[5])
      {
        *(void *)os_log_type_t v149 = 0;
        *(void *)&v149[8] = v149;
        *(void *)&v149[16] = 0x2020000000;
        v149[24] = 0;
        *(void *)os_log_type_t v151 = MEMORY[0x1E4F143A8];
        *(void *)&v151[8] = 3221225472;
        *(void *)&v151[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_158;
        *(void *)&v151[24] = &unk_1E524B978;
        v152 = v149;
        BOOL v54 = v110;
        *(void *)&v151[32] = v54;
        uint64_t v55 = (void (**)(void))_Block_copy(v151);
        os_unfair_lock_lock(v21 + 43);
        v55[2](v55);
        os_unfair_lock_unlock(v21 + 43);

        if (*(unsigned char *)(*(void *)&v149[8] + 24))
        {
          nw_connection_start((nw_connection_t)v133[5]);
        }
        else if (!nw_parameters_get_logging_disabled(*((void *)v12 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          uint64_t v57 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
          {
            uint32_t v58 = v54[42]._os_unfair_lock_opaque;
            uint64_t v59 = v133[5];
            *(_DWORD *)os_log_type_t v138 = 136446722;
            os_log_type_t v139 = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
            __int16 v140 = 1024;
            uint32_t v141 = v58;
            __int16 v142 = 2112;
            uint64_t v143 = v59;
            _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Deferring start of connection %@ until group start", v138, 0x1Cu);
          }
        }
        _Block_object_dispose(v149, 8);
      }
      goto LABEL_60;
    }
    os_log_type_t v76 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
    os_log_type_t v73 = (char *)_os_log_send_and_compose_impl();

    v151[0] = 16;
    v149[0] = 0;
    if (__nwlog_fault(v73, v151, v149))
    {
      if (v151[0] == 17)
      {
        os_log_type_t v74 = __nwlog_obj();
        os_log_type_t v77 = v151[0];
        if (os_log_type_enabled(v74, (os_log_type_t)v151[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          _os_log_impl(&dword_1830D4000, v74, v77, "%{public}s called with null parameters", buf, 0xCu);
        }
LABEL_166:

        goto LABEL_167;
      }
      if (!v149[0])
      {
        os_log_type_t v74 = __nwlog_obj();
        os_log_type_t v100 = v151[0];
        if (os_log_type_enabled(v74, (os_log_type_t)v151[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          _os_log_impl(&dword_1830D4000, v74, v100, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_166;
      }
      unsigned int v88 = (char *)__nw_create_backtrace_string();
      os_log_type_t v74 = __nwlog_obj();
      os_log_type_t v89 = v151[0];
      BOOL v90 = os_log_type_enabled(v74, (os_log_type_t)v151[0]);
      if (!v88)
      {
        if (v90)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          _os_log_impl(&dword_1830D4000, v74, v89, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_166;
      }
      if (v90)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v88;
        _os_log_impl(&dword_1830D4000, v74, v89, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v88);
    }
LABEL_167:
    if (!v73)
    {
LABEL_169:
      int v28 = 0;
      goto LABEL_62;
    }
LABEL_168:
    free(v73);
    goto LABEL_169;
  }
  BOOL v97 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
  unsigned int v41 = (char *)_os_log_send_and_compose_impl();

  v151[0] = 16;
  v149[0] = 0;
  if (__nwlog_fault(v41, v151, v149))
  {
    if (v151[0] == 17)
    {
      BOOL v42 = __nwlog_obj();
      os_log_type_t v98 = v151[0];
      if (os_log_type_enabled(v42, (os_log_type_t)v151[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
        _os_log_impl(&dword_1830D4000, v42, v98, "%{public}s called with null endpoint", buf, 0xCu);
      }
LABEL_70:

      goto LABEL_71;
    }
    if (!v149[0])
    {
      BOOL v42 = __nwlog_obj();
      os_log_type_t v106 = v151[0];
      if (os_log_type_enabled(v42, (os_log_type_t)v151[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
        _os_log_impl(&dword_1830D4000, v42, v106, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_70;
    }
    os_log_type_t v103 = (char *)__nw_create_backtrace_string();
    BOOL v42 = __nwlog_obj();
    os_log_type_t v104 = v151[0];
    BOOL v105 = os_log_type_enabled(v42, (os_log_type_t)v151[0]);
    if (!v103)
    {
      if (v105)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
        _os_log_impl(&dword_1830D4000, v42, v104, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_70;
    }
    if (v105)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_send_message_internal";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v103;
      _os_log_impl(&dword_1830D4000, v42, v104, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v103);
  }
LABEL_71:
  if (v41) {
LABEL_72:
  }
    free(v41);
LABEL_73:
  id v10 = 0;
LABEL_74:

LABEL_75:
}

void sub_1836CB6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,void *a44)
{
  _Unwind_Resume(a1);
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke(uint64_t a1, int a2)
{
  id v4 = *(os_unfair_lock_s **)(a1 + 32);
  BOOL v5 = v4 + 43;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_2;
  aBlock[3] = &unk_1E524BB48;
  id v8 = v4;
  id v9 = *(id *)(a1 + 40);
  int v10 = a2;
  uint64_t v6 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock(v5);
  v6[2](v6);
  os_unfair_lock_unlock(v5);
}

void sub_1836CB970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_group_get_port(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    __int16 v20 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_get_port_block_invoke;
    aBlock[3] = &unk_1E524B978;
    uint64_t v15 = v1;
    BOOL v16 = buf;
    nw_connection_group_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 43);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 43);

    uint64_t v4 = *(unsigned __int16 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_group_get_port";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_get_port";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_get_port";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_get_port";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_get_port";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_1836CBCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(v2 + 190) < 0)
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(v2 + 56)) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v6 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136446466;
        BOOL v14 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        __int16 v15 = 1024;
        int v16 = v7;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] has cancelled", buf, 0x12u);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
  else
  {
    nw_connection_group_t v3 = *(atomic_uchar **)(v2 + 104);
    if (v3)
    {
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      v8[2] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_157;
      v8[3] = &unk_1E523E170;
      id v9 = (id)v2;
      id v10 = *(id *)(a1 + 40);
      id v4 = *(id *)(a1 + 48);
      uint64_t v5 = *(void *)(a1 + 64);
      id v11 = v4;
      uint64_t v12 = v5;
      nw_array_apply(v3, (uint64_t)v8);
    }
  }
}

uint64_t ___ZL65nw_connection_group_create_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS3_PU33objcproto22OS_nw_protocol_optionsS3_b_block_invoke(uint64_t a1)
{
  return nw_connection_group_add_connection_locked(*(NWConcrete_nw_connection_group **)(a1 + 32), *(NWConcrete_nw_connection **)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

uint64_t ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_158(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 190) & 1;
  return result;
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_152(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 8);
  if (v2)
  {
    dispatch_qos_class_t v3 = *(_DWORD *)(v1 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_2_153;
    block[3] = &unk_1E524AFA8;
    id v7 = *(id *)(a1 + 40);
    id v4 = v2;
    dispatch_block_t v5 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v3, 0, block);
    dispatch_async(v4, v5);
  }
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_154(uint64_t a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x3032000000;
  BOOL v32 = __Block_byref_object_copy__8624;
  int v33 = __Block_byref_object_dispose__8625;
  id v34 = 0;
  id v4 = *(os_unfair_lock_s **)(a1 + 32);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_2_155;
  aBlock[3] = &unk_1E524B978;
  int v28 = &v29;
  BOOL v27 = v4;
  dispatch_block_t v5 = (void (**)(void))_Block_copy(aBlock);
  v4 += 43;
  os_unfair_lock_lock(v4);
  v5[2](v5);
  os_unfair_lock_unlock(v4);

  if (v30[5])
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      BOOL v14 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        int v16 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136446978;
        char v36 = "nw_connection_group_send_message_internal_block_invoke";
        __int16 v37 = 1024;
        *(_DWORD *)int v38 = v16;
        *(_WORD *)&v38[4] = 2112;
        *(void *)&v38[6] = v15;
        __int16 v39 = 2112;
        id v40 = v3;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Connection Group send to complete for connection (%@) with error: %@", buf, 0x26u);
      }
    }
    uint64_t v6 = (void *)v30[5];
    dispatch_qos_class_t v7 = *(_DWORD *)(*(void *)(a1 + 32) + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_156;
    block[3] = &unk_1E524B950;
    id v23 = *(id *)(a1 + 48);
    id v22 = v3;
    id v8 = v6;
    dispatch_block_t v9 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v7, 0, block);
    dispatch_async(v8, v9);

    goto LABEL_5;
  }
  id v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v36 = "nw_connection_group_send_message_internal_block_invoke";
  id v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v11, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        char v36 = "nw_connection_group_send_message_internal_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null client_queue", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          char v36 = "nw_connection_group_send_message_internal_block_invoke";
          __int16 v37 = 2082;
          *(void *)int v38 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s called with null client_queue, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        char v36 = "nw_connection_group_send_message_internal_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s called with null client_queue, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        char v36 = "nw_connection_group_send_message_internal_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null client_queue, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_27:
  if (v11) {
    free(v11);
  }
LABEL_5:

  _Block_object_dispose(&v29, 8);
}

void sub_1836CC4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_2_155(uint64_t a1)
{
}

uint64_t ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_156(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_2_153(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
  (*(void (**)(uint64_t))(v1 + 16))(v1);
}

void sub_1836CC588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_157(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  dispatch_block_t v5 = a3;
  nw_endpoint_t v6 = nw_connection_copy_endpoint(v5);
  nw_parameters_t v7 = nw_connection_copy_parameters(v5);
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    uint64_t v21 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      int v22 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      *(_DWORD *)buf = 136446722;
      id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
      __int16 v36 = 1024;
      *(_DWORD *)__int16 v37 = v22;
      *(_WORD *)&void v37[4] = 2112;
      *(void *)&v37[6] = v5;
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Inspecting connection %@", buf, 0x1Cu);
    }
  }
  if (!v7)
  {
    uint64_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v18, &type, &v32)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null connection_parameters", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (!v32)
    {
      BOOL v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null connection_parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v19 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v27 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, v26, "%{public}s called with null connection_parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
      __int16 v36 = 2082;
      *(void *)__int16 v37 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v26, "%{public}s called with null connection_parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_45;
  }
  BOOL v8 = nw_parameters_are_compatible(*(void **)(a1 + 40), -1, v7, 0, 0);
  if (!v6)
  {
    id v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v18, &type, &v32)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v19 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null connection_remote_endpoint", buf, 0xCu);
      }
LABEL_57:

LABEL_58:
      if (v18) {
        free(v18);
      }
      goto LABEL_60;
    }
    if (!v32)
    {
      BOOL v19 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s called with null connection_remote_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v19 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v29 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, v28, "%{public}s called with null connection_remote_endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
      __int16 v36 = 2082;
      *(void *)__int16 v37 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v28, "%{public}s called with null connection_remote_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_45:

    free(backtrace_string);
    goto LABEL_58;
  }
  BOOL v9 = v8;
  int is_equal = nw_endpoint_is_equal(*(void **)(a1 + 48), v6, 31);
  if ((v9 & is_equal) == 1)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
    uint64_t v11 = 0;
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v12 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136446722;
        id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        __int16 v36 = 1024;
        *(_DWORD *)__int16 v37 = v13;
        *(_WORD *)&void v37[4] = 2112;
        *(void *)&v37[6] = v5;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Connection %@ is compatible", buf, 0x1Cu);
      }

LABEL_60:
      uint64_t v11 = 0;
    }
  }
  else
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      BOOL v14 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        int v15 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136447234;
        id v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        __int16 v36 = 1024;
        *(_DWORD *)__int16 v37 = v15;
        *(_WORD *)&void v37[4] = 2112;
        *(void *)&v37[6] = v5;
        __int16 v38 = 1024;
        BOOL v39 = v9;
        __int16 v40 = 1024;
        int v41 = is_equal;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Connection %@ is not compatible (parameters: %u, remote_endpoints: %u)", buf, 0x28u);
      }
    }
    uint64_t v11 = 1;
  }

  return v11;
}

void sub_1836CCCE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_connection_group_get_port_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 96);
  if (v3)
  {
    if ((*(unsigned char *)(v2 + 190) & 0x20) != 0)
    {
      *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = nw_listener_get_port(v3);
      if (nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56))) {
        return;
      }
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      id v4 = (id)gconnection_groupLogObj;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_20;
      }
      int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      int v6 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      int v12 = 136446722;
      int v13 = "nw_connection_group_get_port_block_invoke";
      __int16 v14 = 1024;
      int v15 = v5;
      __int16 v16 = 1024;
      int v17 = v6;
      nw_parameters_t v7 = "%{public}s [G%u] using unicast_listener port=%d";
      goto LABEL_19;
    }
    goto LABEL_9;
  }
  if ((*(unsigned char *)(v2 + 190) & 0x10) == 0)
  {
LABEL_9:
    *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(_WORD *)(v2 + 188);
    if (nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56))) {
      return;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    id v4 = (id)gconnection_groupLogObj;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_20;
    }
    int v8 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
    int v9 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v12 = 136446722;
    int v13 = "nw_connection_group_get_port_block_invoke";
    __int16 v14 = 1024;
    int v15 = v8;
    __int16 v16 = 1024;
    int v17 = v9;
    nw_parameters_t v7 = "%{public}s [G%u] using initial port=%d";
    goto LABEL_19;
  }
  *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = nw_listener_get_port(*(nw_listener_t *)(v2 + 88));
  if (nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56))) {
    return;
  }
  if (__nwlog_connection_group_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
  }
  id v4 = (id)gconnection_groupLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
    int v11 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v12 = 136446722;
    int v13 = "nw_connection_group_get_port_block_invoke";
    __int16 v14 = 1024;
    int v15 = v10;
    __int16 v16 = 1024;
    int v17 = v11;
    nw_parameters_t v7 = "%{public}s [G%u] using listener port=%d";
LABEL_19:
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, v7, (uint8_t *)&v12, 0x18u);
  }
LABEL_20:
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 8);
  if (v2)
  {
    dispatch_qos_class_t v4 = *(_DWORD *)(v1 + 16);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_3;
    v7[3] = &unk_1E524B020;
    id v8 = *(id *)(a1 + 40);
    int v9 = *(_DWORD *)(a1 + 48);
    int v5 = v2;
    dispatch_block_t v6 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v4, 0, v7);
    dispatch_async(v5, v6);
  }
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  posix_error = nw_error_create_posix_error(*(_DWORD *)(a1 + 40));
  (*(void (**)(uint64_t))(v1 + 16))(v1);
}

void sub_1836CD0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_group_get_type(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    dispatch_block_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_connection_group_get_type";
    nw_parameters_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_connection_group_get_type";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null group", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v18 = "nw_connection_group_get_type";
            __int16 v19 = 2082;
            os_log_type_t v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_connection_group_get_type";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null group, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v8 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_connection_group_get_type";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v7) {
      free(v7);
    }
    goto LABEL_22;
  }
  id v3 = (void *)*((void *)v1 + 8);
  if (!v3)
  {
LABEL_22:
    uint64_t v5 = 0;
    goto LABEL_23;
  }
  dispatch_qos_class_t v4 = v3;
  uint64_t v5 = v4[2];

LABEL_23:
  return v5;
}

id nw_connection_group_copy_connection_for_message(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = (void *)nw_content_context_copy_connection(v4);
  if (v5)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    unsigned char buf[24] = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL47nw_connection_group_copy_connection_for_messageP30NWConcrete_nw_connection_groupPU32objcproto21OS_nw_content_context8NSObject_block_invoke;
    aBlock[3] = &unk_1E5242570;
    uint64_t v18 = buf;
    dispatch_block_t v6 = (uint64_t *)v3;
    __int16 v16 = v6;
    id v7 = v5;
    id v17 = v7;
    id v8 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 43);
    v8[2](v8);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 43);

    if (*(unsigned char *)(*(void *)&buf[8] + 24))
    {
      id v9 = v7;
    }
    else
    {
      if (!nw_parameters_get_logging_disabled(v6[7]))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        BOOL v12 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          int v13 = *((_DWORD *)v6 + 42);
          *(_DWORD *)__int16 v19 = 136446722;
          os_log_type_t v20 = "nw_connection_group_copy_connection_for_message";
          __int16 v21 = 1024;
          int v22 = v13;
          __int16 v23 = 2112;
          id v24 = v4;
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Context %@ is not a valid inbound message received from this group", v19, 0x1Cu);
        }
      }
      id v9 = 0;
    }

    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v3 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      int v10 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v11 = *((_DWORD *)v3 + 42);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_copy_connection_for_message";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v4;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Context %@ is not a valid inbound message", buf, 0x1Cu);
      }
    }
    id v9 = 0;
  }

  return v9;
}

void sub_1836CD67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL47nw_connection_group_copy_connection_for_messageP30NWConcrete_nw_connection_groupPU32objcproto21OS_nw_content_context8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      *(void *)os_log_type_t type = 0;
      __int16 v21 = type;
      uint64_t v22 = 0x2020000000;
      char v23 = 0;
      dispatch_block_t v6 = (atomic_uchar *)v3[13];
      if (v6)
      {
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = ___ZL41nw_connection_group_has_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
        uint64_t v26 = &unk_1E524A2E8;
        id v27 = v4;
        os_log_type_t v28 = type;
        nw_array_apply(v6, (uint64_t)buf);

        LOBYTE(v6) = *((unsigned char *)v21 + 24) != 0;
      }
      _Block_object_dispose(type, 8);
      goto LABEL_6;
    }
    int v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_has_connection_locked";
    id v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v8, type, &v24))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v12 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_has_connection_locked";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v24)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v19 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_has_connection_locked";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v16 = type[0];
      BOOL v17 = os_log_type_enabled(v9, type[0]);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_has_connection_locked";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_has_connection_locked";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_has_connection_locked";
    id v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v8, type, &v24))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v10 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_has_connection_locked";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null group", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v24)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v18 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_has_connection_locked";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type[0];
      BOOL v15 = os_log_type_enabled(v9, type[0]);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_has_connection_locked";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null group, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_has_connection_locked";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8) {
    free(v8);
  }
  LOBYTE(v6) = 0;
LABEL_6:

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)v6;
}

BOOL ___ZL41nw_connection_group_has_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 == a3) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return v3 != a3;
}

nw_protocol_metadata_t nw_connection_group_copy_protocol_metadata(nw_connection_group_t group, nw_protocol_definition_t definition)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v3 = group;
  id v4 = definition;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      uint64_t v29 = __Block_byref_object_copy__8624;
      os_log_type_t v30 = __Block_byref_object_dispose__8625;
      id v31 = 0;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_connection_group_copy_protocol_metadata_block_invoke;
      aBlock[3] = &unk_1E5242570;
      char v23 = v3;
      os_log_type_t v25 = buf;
      char v24 = v5;
      dispatch_block_t v6 = (void (**)(void))_Block_copy(aBlock);
      os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
      v6[2](v6);
      os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

      id v7 = *(id *)(*(void *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_4;
    }
    int v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v10, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null definition", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v26)
      {
        int v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v10, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null group", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v26)
      {
        int v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null group, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_4:

  return (nw_protocol_metadata_t)v7;
}

void sub_1836CE1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_copy_protocol_metadata_block_invoke(uint64_t a1)
{
  id v1 = *(atomic_uchar **)(*(void *)(a1 + 32) + 104);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __nw_connection_group_copy_protocol_metadata_block_invoke_2;
  v4[3] = &unk_1E524A2E8;
  long long v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  long long v5 = v3;
  nw_array_apply(v1, (uint64_t)v4);
}

BOOL __nw_connection_group_copy_protocol_metadata_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = nw_connection_copy_protocol_metadata_internal(v4, *(void **)(a1 + 32), 1);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  BOOL v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) == 0;
  return v8;
}

void sub_1836CE344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_connection_t nw_connection_group_extract_connection(nw_connection_group_t group, nw_endpoint_t endpoint, nw_protocol_options_t protocol_options)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v5 = group;
  uint64_t v6 = endpoint;
  id v7 = protocol_options;
  BOOL v8 = v7;
  uint64_t v112 = v6;
  if (!v5)
  {
    os_log_type_t v47 = __nwlog_obj();
    *(_DWORD *)aBlock = 136446210;
    *(void *)&void aBlock[4] = "nw_connection_group_extract_connection";
    uint64_t v48 = (char *)_os_log_send_and_compose_impl();

    iterate_block[0] = 16;
    LOBYTE(v124) = 0;
    if (__nwlog_fault(v48, iterate_block, &v124))
    {
      if (iterate_block[0] == 17)
      {
        uint64_t v49 = __nwlog_obj();
        os_log_type_t v50 = iterate_block[0];
        if (os_log_type_enabled(v49, (os_log_type_t)iterate_block[0]))
        {
          *(_DWORD *)aBlock = 136446210;
          *(void *)&void aBlock[4] = "nw_connection_group_extract_connection";
          _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s called with null group", aBlock, 0xCu);
        }
      }
      else if ((_BYTE)v124)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v49 = __nwlog_obj();
        os_log_type_t v60 = iterate_block[0];
        BOOL v61 = os_log_type_enabled(v49, (os_log_type_t)iterate_block[0]);
        if (backtrace_string)
        {
          if (v61)
          {
            *(_DWORD *)aBlock = 136446466;
            *(void *)&void aBlock[4] = "nw_connection_group_extract_connection";
            *(_WORD *)&aBlock[12] = 2082;
            *(void *)&aBlock[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v49, v60, "%{public}s called with null group, dumping backtrace:%{public}s", aBlock, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_110;
        }
        if (v61)
        {
          *(_DWORD *)aBlock = 136446210;
          *(void *)&void aBlock[4] = "nw_connection_group_extract_connection";
          _os_log_impl(&dword_1830D4000, v49, v60, "%{public}s called with null group, no backtrace", aBlock, 0xCu);
        }
      }
      else
      {
        uint64_t v49 = __nwlog_obj();
        os_log_type_t v72 = iterate_block[0];
        if (os_log_type_enabled(v49, (os_log_type_t)iterate_block[0]))
        {
          *(_DWORD *)aBlock = 136446210;
          *(void *)&void aBlock[4] = "nw_connection_group_extract_connection";
          _os_log_impl(&dword_1830D4000, v49, v72, "%{public}s called with null group, backtrace limit exceeded", aBlock, 0xCu);
        }
      }
    }
LABEL_110:
    if (v48) {
      free(v48);
    }
    goto LABEL_112;
  }
  if (SBYTE6(v5[23].isa) < 0 || SLODWORD(v5[5].isa) >= 3)
  {
    if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v51 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        int isa = (int)v5[21].isa;
        *(_DWORD *)aBlock = 136446466;
        *(void *)&void aBlock[4] = "nw_connection_group_extract_connection";
        *(_WORD *)&aBlock[12] = 1024;
        *(_DWORD *)&aBlock[14] = isa;
        _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot extract a connection from a failed or cancelled group", aBlock, 0x12u);
      }
    }
LABEL_112:
    os_log_type_t v78 = 0;
    goto LABEL_167;
  }
  os_log_type_t v111 = v7;
  if (v6)
  {
    id v9 = v6;
    os_log_type_t v10 = (void *)[v9 copyEndpoint];
    nw_endpoint_copy_properties(v9, v10);
  }
  else
  {
    os_log_type_t v10 = (void *)nw_group_descriptor_copy_member(v5[8].isa);
  }
  int v11 = v5[7].isa;
  BOOL v12 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v11, 0, 0);

  int v13 = v5;
  id v14 = v10;
  id v15 = (id)v12;
  os_log_type_t v113 = v8;
  if (!v14)
  {
    char v53 = __nwlog_obj();
    *(_DWORD *)aBlock = 136446210;
    *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
    BOOL v54 = (char *)_os_log_send_and_compose_impl();

    iterate_block[0] = 16;
    LOBYTE(v124) = 0;
    if (!__nwlog_fault(v54, iterate_block, &v124)) {
      goto LABEL_119;
    }
    if (iterate_block[0] == 17)
    {
      uint64_t v55 = __nwlog_obj();
      os_log_type_t v56 = iterate_block[0];
      if (os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s called with null remote_endpoint", aBlock, 0xCu);
      }
    }
    else if ((_BYTE)v124)
    {
      uint64_t v62 = (char *)__nw_create_backtrace_string();
      uint64_t v55 = __nwlog_obj();
      os_log_type_t v63 = iterate_block[0];
      BOOL v64 = os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]);
      if (v62)
      {
        if (v64)
        {
          *(_DWORD *)aBlock = 136446466;
          *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = v62;
          _os_log_impl(&dword_1830D4000, v55, v63, "%{public}s called with null remote_endpoint, dumping backtrace:%{public}s", aBlock, 0x16u);
        }

        free(v62);
        if (!v54) {
          goto LABEL_121;
        }
        goto LABEL_120;
      }
      if (v64)
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v55, v63, "%{public}s called with null remote_endpoint, no backtrace", aBlock, 0xCu);
      }
    }
    else
    {
      uint64_t v55 = __nwlog_obj();
      os_log_type_t v73 = iterate_block[0];
      if (os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v55, v73, "%{public}s called with null remote_endpoint, backtrace limit exceeded", aBlock, 0xCu);
      }
    }
    goto LABEL_118;
  }
  if (v15)
  {
    uint64_t v118 = 0;
    BOOL v119 = &v118;
    uint64_t v120 = 0x3032000000;
    BOOL v121 = __Block_byref_object_copy__8624;
    BOOL v122 = __Block_byref_object_dispose__8625;
    id v123 = 0;
    uint64_t v114 = 0;
    os_log_type_t v115 = &v114;
    uint64_t v116 = 0x2020000000;
    char v117 = 0;
    *(void *)aBlock = MEMORY[0x1E4F143A8];
    *(void *)&aBlock[8] = 3221225472;
    *(void *)&aBlock[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke;
    *(void *)&unsigned char aBlock[24] = &unk_1E523BB48;
    os_log_type_t v16 = v13;
    *(void *)&aBlock[32] = v16;
    uint64_t v134 = &v114;
    os_log_type_t v109 = v15;
    uint64_t v132 = v109;
    id v110 = v14;
    id v133 = v110;
    BOOL v135 = &v118;
    BOOL v17 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v13 + 43);
    v17[2](v17);
    os_unfair_lock_unlock(v13 + 43);

    if (*((unsigned char *)v115 + 24))
    {
      os_log_type_t v18 = 0;
LABEL_146:

      _Block_object_dispose(&v114, 8);
      _Block_object_dispose(&v118, 8);

      goto LABEL_147;
    }
    if (v119[5])
    {
      BOOL v19 = *(void **)&v16[16]._os_unfair_lock_opaque;
      if (!v19 || (os_log_type_t v20 = v19, v21 = v20[2], v20, v21 != 2))
      {
LABEL_145:
        os_log_type_t v18 = (id)v119[5];
        goto LABEL_146;
      }
    }
    if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      int v68 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
      {
        uint32_t os_unfair_lock_opaque = v16[42]._os_unfair_lock_opaque;
        *(_DWORD *)iterate_block = 136446978;
        *(void *)&iterate_void block[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        *(_WORD *)&iterate_block[12] = 1024;
        *(_DWORD *)&iterate_block[14] = os_unfair_lock_opaque;
        *(_WORD *)&iterate_block[18] = 2112;
        *(void *)&iterate_block[20] = v110;
        *(_WORD *)&iterate_block[28] = 2112;
        *(void *)&iterate_block[30] = v109;
        _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Did not find connection for (remote: %@, parameters: %@), creating new connection", iterate_block, 0x26u);
      }
    }
    uint64_t v22 = (void *)v119[5];
    id v108 = v16;
    id v104 = v22;
    endpointa = v110;
    char v23 = v109;
    os_log_type_t v106 = v113;
    uint64_t v124 = 0;
    os_log_type_t v125 = &v124;
    uint64_t v126 = 0x3032000000;
    id v127 = __Block_byref_object_copy__8624;
    uint64_t v128 = __Block_byref_object_dispose__8625;
    id v129 = 0;
    os_log_type_t v103 = v23;
    parameters = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v103, 0, 0);

    nw_parameters_set_reuse_local_address(parameters, 1);
    if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      int v70 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
      {
        uint32_t v71 = v108[42]._os_unfair_lock_opaque;
        *(_DWORD *)iterate_block = 136446978;
        *(void *)&iterate_void block[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
        *(_WORD *)&iterate_block[12] = 1024;
        *(_DWORD *)&iterate_block[14] = v71;
        *(_WORD *)&iterate_block[18] = 2112;
        *(void *)&iterate_block[20] = endpointa;
        *(_WORD *)&iterate_block[28] = 2112;
        *(void *)&iterate_block[30] = parameters;
        _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Creating connection for endpoint (%@) and parameters (%@)", iterate_block, 0x26u);
      }
    }
    if (!v106)
    {
LABEL_33:
      __int16 v37 = *(void **)&v108[16]._os_unfair_lock_opaque;
      if (v37 && (__int16 v38 = v37, v39 = v38[2], v38, v39 == 2)) {
        nw_connection_t v40 = (nw_connection_t)nw_connection_create_with_connection(v104, parameters);
      }
      else {
        nw_connection_t v40 = nw_connection_create(endpointa, parameters);
      }
      int v41 = (void *)v125[5];
      v125[5] = (uint64_t)v40;

      if (v125[5])
      {
        *(void *)iterate_block = MEMORY[0x1E4F143A8];
        *(void *)&iterate_block[8] = 3221225472;
        *(void *)&iterate_block[16] = ___ZL65nw_connection_group_create_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS3_PU33objcproto22OS_nw_protocol_optionsS3_b_block_invoke_2;
        *(void *)&iterate_block[24] = &unk_1E524B978;
        uint32_t v141 = &v124;
        *(void *)&iterate_block[32] = v108;
        uint64_t v42 = (void (**)(void))_Block_copy(iterate_block);
        os_unfair_lock_lock(v13 + 43);
        v42[2](v42);
        os_unfair_lock_unlock(v13 + 43);

        os_log_type_t v43 = *(NSObject **)&iterate_block[32];
      }
      else
      {
        if (nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
        {
LABEL_45:
          id v46 = (id)v125[5];
          goto LABEL_137;
        }
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        os_log_type_t v43 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          uint32_t v44 = v108[42]._os_unfair_lock_opaque;
          Class v45 = v5[7].isa;
          *(_DWORD *)iterate_block = 136446722;
          *(void *)&iterate_void block[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
          *(_WORD *)&iterate_block[12] = 1024;
          *(_DWORD *)&iterate_block[14] = v44;
          *(_WORD *)&iterate_block[18] = 2112;
          *(void *)&iterate_block[20] = v45;
          _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to create connection with parameters %@", iterate_block, 0x1Cu);
        }
      }

      goto LABEL_45;
    }
    int v102 = v108;
    char v24 = parameters;
    os_log_type_t v25 = v106;
    if (v24)
    {
      char v26 = v24;
      id v27 = v26[19];
      os_log_type_t v100 = v26;

      os_log_type_t v28 = v25;
      id v29 = v28[1];

      *(void *)os_log_type_t v144 = 0;
      *(void *)&v144[8] = v144;
      *(void *)&v144[16] = 0x2020000000;
      v144[24] = 0;
      *(void *)iterate_block = MEMORY[0x1E4F143A8];
      *(void *)&iterate_block[8] = 3221225472;
      *(void *)&iterate_block[16] = ___ZL37nw_connection_group_modify_parametersP30NWConcrete_nw_connection_groupPU27objcproto16OS_nw_parameters8NSObjectPU33objcproto22OS_nw_protocol_optionsS1__block_invoke;
      *(void *)&iterate_block[24] = &unk_1E523BB70;
      uint64_t v143 = v144;
      id v30 = v29;
      *(void *)&iterate_block[32] = v30;
      id v31 = v27;
      uint32_t v141 = v31;
      uint64_t v32 = v28;
      __int16 v142 = v32;
      nw_protocol_stack_iterate_application_protocols(v31, iterate_block);
      if (*(unsigned char *)(*(void *)&v144[8] + 24))
      {
        BOOL v33 = 1;
      }
      else
      {
        id v34 = nw_protocol_stack_copy_transport_protocol(v31);
        nw_protocol_definition_t v99 = nw_protocol_options_copy_definition(v34);
        os_log_type_t type = v34;
        if (nw_protocol_definition_is_equal_unsafe((uint64_t)v99, (uint64_t)v30))
        {
          nw_protocol_stack_set_transport_protocol(v31, v32);
          *(unsigned char *)(*(void *)&v144[8] + 24) = 1;
        }
        else if (!*(unsigned char *)(*(void *)&v144[8] + 24) && !nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          id v35 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            uint32_t v36 = v102[42]._os_unfair_lock_opaque;
            *(_DWORD *)buf = 136446466;
            id v137 = "nw_connection_group_modify_parameters";
            __int16 v138 = 1024;
            uint32_t v139 = v36;
            _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_INFO, "%{public}s [G%u] Failed to find matching protocol definition", buf, 0x12u);
          }
        }
        BOOL v33 = *(unsigned char *)(*(void *)&v144[8] + 24) != 0;
      }
      _Block_object_dispose(v144, 8);

      if (v33) {
        goto LABEL_33;
      }
LABEL_136:
      id v46 = 0;
LABEL_137:

      _Block_object_dispose(&v124, 8);
      int v82 = (void *)v119[5];
      v119[5] = (uint64_t)v46;

      if (v119[5])
      {
        uint64_t v124 = 0;
        os_log_type_t v125 = &v124;
        uint64_t v126 = 0x2020000000;
        LOBYTE(v127) = 0;
        *(void *)iterate_block = MEMORY[0x1E4F143A8];
        *(void *)&iterate_block[8] = 3221225472;
        *(void *)&iterate_block[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_158;
        *(void *)&iterate_block[24] = &unk_1E524B978;
        uint32_t v141 = &v124;
        id v83 = v108;
        *(void *)&iterate_block[32] = v83;
        uint64_t v84 = (void (**)(void))_Block_copy(iterate_block);
        os_unfair_lock_lock(v13 + 43);
        v84[2](v84);
        os_unfair_lock_unlock(v13 + 43);

        if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
          }
          id v85 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
          {
            uint32_t v86 = v83[42]._os_unfair_lock_opaque;
            uint64_t v87 = v119[5];
            *(_DWORD *)os_log_type_t v144 = 136446722;
            *(void *)&v144[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
            *(_WORD *)&v144[12] = 1024;
            *(_DWORD *)&v144[14] = v86;
            *(_WORD *)&v144[18] = 2112;
            *(void *)&v144[20] = v87;
            _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Deferring start of connection %@ until group start", v144, 0x1Cu);
          }
        }
        _Block_object_dispose(&v124, 8);
      }
      goto LABEL_145;
    }
    os_log_type_t v75 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v144 = 136446210;
    *(void *)&v144[4] = "nw_connection_group_modify_parameters";
    os_log_type_t v101 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    char v130 = 0;
    if (__nwlog_fault(v101, buf, &v130))
    {
      if (buf[0] == 17)
      {
        os_log_type_t v76 = __nwlog_obj();
        os_log_type_t v77 = buf[0];
        if (os_log_type_enabled(v76, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v144 = 136446210;
          *(void *)&v144[4] = "nw_connection_group_modify_parameters";
          _os_log_impl(&dword_1830D4000, v76, v77, "%{public}s called with null parameters", v144, 0xCu);
        }
      }
      else if (v130)
      {
        os_log_type_t v79 = (char *)__nw_create_backtrace_string();
        os_log_type_t v76 = __nwlog_obj();
        os_log_type_t typea = buf[0];
        BOOL v80 = os_log_type_enabled(v76, (os_log_type_t)buf[0]);
        if (v79)
        {
          if (v80)
          {
            *(_DWORD *)os_log_type_t v144 = 136446466;
            *(void *)&v144[4] = "nw_connection_group_modify_parameters";
            *(_WORD *)&v144[12] = 2082;
            *(void *)&v144[14] = v79;
            _os_log_impl(&dword_1830D4000, v76, typea, "%{public}s called with null parameters, dumping backtrace:%{public}s", v144, 0x16u);
          }

          free(v79);
          goto LABEL_133;
        }
        if (v80)
        {
          *(_DWORD *)os_log_type_t v144 = 136446210;
          *(void *)&v144[4] = "nw_connection_group_modify_parameters";
          _os_log_impl(&dword_1830D4000, v76, typea, "%{public}s called with null parameters, no backtrace", v144, 0xCu);
        }
      }
      else
      {
        os_log_type_t v76 = __nwlog_obj();
        os_log_type_t v81 = buf[0];
        if (os_log_type_enabled(v76, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v144 = 136446210;
          *(void *)&v144[4] = "nw_connection_group_modify_parameters";
          _os_log_impl(&dword_1830D4000, v76, v81, "%{public}s called with null parameters, backtrace limit exceeded", v144, 0xCu);
        }
      }
    }
LABEL_133:
    if (v101) {
      free(v101);
    }

    goto LABEL_136;
  }
  uint64_t v57 = __nwlog_obj();
  *(_DWORD *)aBlock = 136446210;
  *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
  BOOL v54 = (char *)_os_log_send_and_compose_impl();

  iterate_block[0] = 16;
  LOBYTE(v124) = 0;
  if (__nwlog_fault(v54, iterate_block, &v124))
  {
    if (iterate_block[0] == 17)
    {
      uint64_t v55 = __nwlog_obj();
      os_log_type_t v58 = iterate_block[0];
      if (os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v55, v58, "%{public}s called with null parameters", aBlock, 0xCu);
      }
LABEL_118:

      goto LABEL_119;
    }
    if (!(_BYTE)v124)
    {
      uint64_t v55 = __nwlog_obj();
      os_log_type_t v74 = iterate_block[0];
      if (os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v55, v74, "%{public}s called with null parameters, backtrace limit exceeded", aBlock, 0xCu);
      }
      goto LABEL_118;
    }
    uint64_t v65 = (char *)__nw_create_backtrace_string();
    uint64_t v55 = __nwlog_obj();
    os_log_type_t v66 = iterate_block[0];
    BOOL v67 = os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]);
    if (!v65)
    {
      if (v67)
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v55, v66, "%{public}s called with null parameters, no backtrace", aBlock, 0xCu);
      }
      goto LABEL_118;
    }
    if (v67)
    {
      *(_DWORD *)aBlock = 136446466;
      *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = v65;
      _os_log_impl(&dword_1830D4000, v55, v66, "%{public}s called with null parameters, dumping backtrace:%{public}s", aBlock, 0x16u);
    }

    free(v65);
  }
LABEL_119:
  if (v54) {
LABEL_120:
  }
    free(v54);
LABEL_121:
  os_log_type_t v18 = 0;
LABEL_147:

  if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    id v95 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
    {
      uint32_t v96 = v13[42]._os_unfair_lock_opaque;
      *(_DWORD *)aBlock = 136447234;
      *(void *)&void aBlock[4] = "nw_connection_group_extract_connection";
      *(_WORD *)&aBlock[12] = 1024;
      *(_DWORD *)&aBlock[14] = v96;
      *(_WORD *)&aBlock[18] = 2112;
      *(void *)&aBlock[20] = v14;
      *(_WORD *)&aBlock[28] = 2112;
      *(void *)&aBlock[30] = v15;
      *(_WORD *)&aBlock[38] = 2112;
      uint64_t v132 = v18;
      _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Got connection for endpoint (%@) and parameters (%@): %@", aBlock, 0x30u);
    }
  }
  if (v18)
  {
    unsigned int v88 = v18;
    *(void *)iterate_block = 0;
    *(void *)&iterate_block[8] = iterate_block;
    *(void *)&iterate_block[16] = 0x2020000000;
    iterate_block[24] = 0;
    os_log_type_t v89 = v88 + 34;
    *(void *)aBlock = MEMORY[0x1E4F143A8];
    *(void *)&aBlock[8] = 3221225472;
    *(void *)&aBlock[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
    *(void *)&unsigned char aBlock[24] = &unk_1E524B978;
    uint64_t v132 = iterate_block;
    os_log_type_t v78 = v88;
    *(void *)&aBlock[32] = v78;
    os_unfair_lock_lock(v89);
    (*(void (**)(unsigned char *))&aBlock[16])(aBlock);
    os_unfair_lock_unlock(v89);
    LODWORD(v89) = *(unsigned __int8 *)(*(void *)&iterate_block[8] + 24);

    _Block_object_dispose(iterate_block, 8);
    if (!v89)
    {
      nw_connection_reset_client(v78);
      goto LABEL_160;
    }
    if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      BOOL v90 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      {
        uint32_t v91 = v13[42]._os_unfair_lock_opaque;
        *(_DWORD *)aBlock = 136446722;
        *(void *)&void aBlock[4] = "nw_connection_group_extract_connection";
        *(_WORD *)&aBlock[12] = 1024;
        *(_DWORD *)&aBlock[14] = v91;
        *(_WORD *)&aBlock[18] = 2112;
        *(void *)&aBlock[20] = v78;
        _os_log_impl(&dword_1830D4000, v90, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Connection %@ already cancelled or failed", aBlock, 0x1Cu);
      }
    }
  }
  os_log_type_t v78 = 0;
LABEL_160:
  if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    int v92 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
    {
      uint32_t v93 = v13[42]._os_unfair_lock_opaque;
      *(_DWORD *)aBlock = 136446722;
      *(void *)&void aBlock[4] = "nw_connection_group_extract_connection";
      *(_WORD *)&aBlock[12] = 1024;
      *(_DWORD *)&aBlock[14] = v93;
      *(_WORD *)&aBlock[18] = 2112;
      *(void *)&aBlock[20] = v78;
      _os_log_impl(&dword_1830D4000, v92, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] returning connection %@", aBlock, 0x1Cu);
    }
  }
  BOOL v8 = v111;
LABEL_167:

  return v78;
}

void sub_1836CFA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,id a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,id a53,id a54,id a55)
{
  _Block_object_dispose((const void *)(v63 - 176), 8);
  _Block_object_dispose(&a42, 8);

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_connection_group_modify_parametersP30NWConcrete_nw_connection_groupPU27objcproto16OS_nw_parameters8NSObjectPU33objcproto22OS_nw_protocol_optionsS1__block_invoke(uint64_t a1, nw_protocol_options_t options)
{
  nw_protocol_definition_t v3 = nw_protocol_options_copy_definition(options);
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    nw_protocol_definition_t v5 = v3;
    if (nw_protocol_definition_is_equal_unsafe((uint64_t)v3, *(void *)(a1 + 32)))
    {
      nw_protocol_stack_replace_protocol(*(void **)(a1 + 40), v5, *(void **)(a1 + 48));
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    }
  }

  return MEMORY[0x1F4181870]();
}

void sub_1836CFCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL65nw_connection_group_create_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS3_PU33objcproto22OS_nw_protocol_optionsS3_b_block_invoke_2(uint64_t a1)
{
}

nw_connection_t nw_connection_group_extract_connection_for_message(nw_connection_group_t group, nw_content_context_t context)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v3 = group;
  id v4 = context;
  nw_protocol_definition_t v5 = v4;
  if (!v3)
  {
    uint64_t v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
    char v23 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v47) = 0;
    if (!__nwlog_fault(v23, type, &v47)) {
      goto LABEL_70;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (os_log_type_enabled(v24, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if ((_BYTE)v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v24 = __nwlog_obj();
      os_log_type_t v31 = type[0];
      BOOL v32 = os_log_type_enabled(v24, type[0]);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_70:
        if (!v23)
        {
LABEL_72:
          os_log_type_t v20 = 0;
          goto LABEL_30;
        }
LABEL_71:
        free(v23);
        goto LABEL_72;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v24 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v24, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_1830D4000, v24, v36, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_69:

    goto LABEL_70;
  }
  if (!v4)
  {
    char v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
    char v23 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v47) = 0;
    if (!__nwlog_fault(v23, type, &v47)) {
      goto LABEL_70;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v24 = __nwlog_obj();
      os_log_type_t v27 = type[0];
      if (os_log_type_enabled(v24, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if ((_BYTE)v47)
    {
      BOOL v33 = (char *)__nw_create_backtrace_string();
      char v24 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      BOOL v35 = os_log_type_enabled(v24, type[0]);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v33;
          _os_log_impl(&dword_1830D4000, v24, v34, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        if (!v23) {
          goto LABEL_72;
        }
        goto LABEL_71;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_1830D4000, v24, v34, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v24 = __nwlog_obj();
      os_log_type_t v37 = type[0];
      if (os_log_type_enabled(v24, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_1830D4000, v24, v37, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_69;
  }
  if (SBYTE6(v3[23].isa) < 0 || SLODWORD(v3[5].isa) >= 3)
  {
    if (!nw_parameters_get_logging_disabled((uint64_t)v3[7].isa))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      os_log_type_t v28 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        int isa = (int)v3[21].isa;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = isa;
        _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot extract a connection from a failed or cancelled group", buf, 0x12u);
      }
    }
    goto LABEL_72;
  }
  *(void *)os_log_type_t type = 0;
  uint64_t v42 = type;
  uint64_t v43 = 0x3032000000;
  uint32_t v44 = __Block_byref_object_copy__8624;
  Class v45 = __Block_byref_object_dispose__8625;
  id v46 = (id)nw_content_context_copy_connection(v4);
  if (*((void *)v42 + 5))
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_extract_connection_for_message_block_invoke;
    aBlock[3] = &unk_1E524B978;
    int v39 = v3;
    nw_connection_t v40 = type;
    uint64_t v6 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
    v6[2](v6);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

    id v7 = v39;
LABEL_12:

    goto LABEL_13;
  }
  if (!nw_parameters_get_logging_disabled((uint64_t)v3[7].isa))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    id v7 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = (int)v3[21].isa;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v8;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v5;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s [G%u] context %@ does not have connection, returning nil", buf, 0x1Cu);
    }
    goto LABEL_12;
  }
LABEL_13:
  id v9 = (void *)*((void *)v42 + 5);
  if (v9)
  {
    os_log_type_t v10 = v9;
    uint64_t v47 = 0;
    uint64_t v48 = &v47;
    uint64_t v49 = 0x2020000000;
    char v50 = 0;
    int v11 = v10 + 34;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E524B978;
    char v53 = &v47;
    BOOL v12 = v10;
    id v52 = v12;
    os_unfair_lock_lock(v11);
    (*(void (**)(unsigned char *))&buf[16])(buf);
    os_unfair_lock_unlock(v11);
    LODWORD(v11) = *((unsigned __int8 *)v48 + 24);

    _Block_object_dispose(&v47, 8);
    if (v11)
    {
      if (!nw_parameters_get_logging_disabled((uint64_t)v3[7].isa))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        int v13 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          int v14 = (int)v3[21].isa;
          uint64_t v15 = *((void *)v42 + 5);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v14;
          *(_WORD *)&buf[18] = 2112;
          *(void *)&buf[20] = v15;
          _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Connection %@ already cancelled or failed", buf, 0x1Cu);
        }
      }
      os_log_type_t v16 = (void *)*((void *)v42 + 5);
      *((void *)v42 + 5) = 0;
    }
    else
    {
      nw_connection_reset_client(*((void **)v42 + 5));
    }
  }
  if (!nw_parameters_get_logging_disabled((uint64_t)v3[7].isa))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    BOOL v17 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      int v18 = (int)v3[21].isa;
      uint64_t v19 = *((void *)v42 + 5);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v18;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v19;
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] returning connection %@", buf, 0x1Cu);
    }
  }
  os_log_type_t v20 = *((id *)v42 + 5);
  _Block_object_dispose(type, 8);

LABEL_30:
  return v20;
}

void sub_1836D0624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

void __nw_connection_group_extract_connection_for_message_block_invoke(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  nw_connection_group_t v3 = *(id *)(a1 + 32);
  id v4 = v2;
  nw_protocol_definition_t v5 = v4;
  if (!v3)
  {
    BOOL v17 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v56 = 136446210;
    *(void *)&v56[4] = "nw_connection_group_has_connection_locked";
    int v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (!__nwlog_fault(v18, &type, &v51)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)os_log_type_t v56 = 136446210;
        *(void *)&v56[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null group", v56, 0xCu);
      }
    }
    else if (v51)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)os_log_type_t v56 = 136446466;
          *(void *)&v56[4] = "nw_connection_group_has_connection_locked";
          *(_WORD *)&v56[12] = 2082;
          *(void *)&v56[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null group, dumping backtrace:%{public}s", v56, 0x16u);
        }

        free(backtrace_string);
LABEL_78:
        if (!v18)
        {
LABEL_80:

          goto LABEL_81;
        }
LABEL_79:
        free(v18);
        goto LABEL_80;
      }
      if (v31)
      {
        *(_DWORD *)os_log_type_t v56 = 136446210;
        *(void *)&v56[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null group, no backtrace", v56, 0xCu);
      }
    }
    else
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)os_log_type_t v56 = 136446210;
        *(void *)&v56[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_1830D4000, v19, v43, "%{public}s called with null group, backtrace limit exceeded", v56, 0xCu);
      }
    }
LABEL_77:

    goto LABEL_78;
  }
  if (!v4)
  {
    int v21 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v56 = 136446210;
    *(void *)&v56[4] = "nw_connection_group_has_connection_locked";
    int v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (!__nwlog_fault(v18, &type, &v51)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)os_log_type_t v56 = 136446210;
        *(void *)&v56[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null connection", v56, 0xCu);
      }
    }
    else if (v51)
    {
      BOOL v32 = (char *)__nw_create_backtrace_string();
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v19, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)os_log_type_t v56 = 136446466;
          *(void *)&v56[4] = "nw_connection_group_has_connection_locked";
          *(_WORD *)&v56[12] = 2082;
          *(void *)&v56[14] = v32;
          _os_log_impl(&dword_1830D4000, v19, v33, "%{public}s called with null connection, dumping backtrace:%{public}s", v56, 0x16u);
        }

        free(v32);
        if (!v18) {
          goto LABEL_80;
        }
        goto LABEL_79;
      }
      if (v34)
      {
        *(_DWORD *)os_log_type_t v56 = 136446210;
        *(void *)&v56[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_1830D4000, v19, v33, "%{public}s called with null connection, no backtrace", v56, 0xCu);
      }
    }
    else
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)os_log_type_t v56 = 136446210;
        *(void *)&v56[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_1830D4000, v19, v44, "%{public}s called with null connection, backtrace limit exceeded", v56, 0xCu);
      }
    }
    goto LABEL_77;
  }
  *(void *)os_log_type_t v56 = 0;
  *(void *)&v56[8] = v56;
  *(void *)&v56[16] = 0x2020000000;
  char v57 = 0;
  uint64_t v6 = (atomic_uchar *)v3[13];
  if (v6)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL41nw_connection_group_has_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E524A2E8;
    id v54 = v4;
    uint64_t v55 = v56;
    nw_array_apply(v6, (uint64_t)buf);

    int v7 = *(unsigned __int8 *)(*(void *)&v56[8] + 24);
  }
  else
  {
    int v7 = 0;
  }
  BOOL v8 = v7 == 0;
  _Block_object_dispose(v56, 8);

  if (!v8)
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      id v9 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v10 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v10;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v11;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] has connection %p, removing from group and returning", buf, 0x1Cu);
      }
    }
    BOOL v12 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    int v13 = *(id *)(a1 + 32);
    id v14 = v12;
    uint64_t v15 = v14;
    if (v13)
    {
      if (v14)
      {
        uint64_t v16 = v13[13];
        if (v16)
        {
          nw_array_remove_object(v16, (uint64_t)v15);
          if (!nw_parameters_get_logging_disabled(v13[7]))
          {
            if (gLogDatapath)
            {
              if (__nwlog_connection_group_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
              }
              BOOL v35 = (id)gconnection_groupLogObj;
              if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
              {
                int v36 = *((_DWORD *)v13 + 42);
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v36;
                *(_WORD *)&buf[18] = 2112;
                *(void *)&buf[20] = v15;
                _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] removed connection %@", buf, 0x1Cu);
              }
            }
          }
        }
        goto LABEL_18;
      }
      os_log_type_t v27 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
      char v24 = (char *)_os_log_send_and_compose_impl();

      v56[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v24, v56, &type))
      {
        if (v56[0] == 17)
        {
          os_log_type_t v25 = __nwlog_obj();
          os_log_type_t v28 = v56[0];
          if (os_log_type_enabled(v25, (os_log_type_t)v56[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
            _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null connection", buf, 0xCu);
          }
        }
        else if (type)
        {
          nw_connection_t v40 = (char *)__nw_create_backtrace_string();
          os_log_type_t v25 = __nwlog_obj();
          os_log_type_t v41 = v56[0];
          BOOL v42 = os_log_type_enabled(v25, (os_log_type_t)v56[0]);
          if (v40)
          {
            if (v42)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v40;
              _os_log_impl(&dword_1830D4000, v25, v41, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v40);
            if (!v24) {
              goto LABEL_18;
            }
            goto LABEL_102;
          }
          if (v42)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
            _os_log_impl(&dword_1830D4000, v25, v41, "%{public}s called with null connection, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v25 = __nwlog_obj();
          os_log_type_t v50 = v56[0];
          if (os_log_type_enabled(v25, (os_log_type_t)v56[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
            _os_log_impl(&dword_1830D4000, v25, v50, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_100;
      }
LABEL_101:
      if (!v24)
      {
LABEL_18:

        goto LABEL_88;
      }
LABEL_102:
      free(v24);
      goto LABEL_18;
    }
    char v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
    char v24 = (char *)_os_log_send_and_compose_impl();

    v56[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v24, v56, &type)) {
      goto LABEL_101;
    }
    if (v56[0] == 17)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = v56[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v56[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (type)
    {
      os_log_type_t v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v38 = v56[0];
      BOOL v39 = os_log_type_enabled(v25, (os_log_type_t)v56[0]);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v37;
          _os_log_impl(&dword_1830D4000, v25, v38, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v37);
        goto LABEL_101;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_1830D4000, v25, v38, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v49 = v56[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v56[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_1830D4000, v25, v49, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_100:

    goto LABEL_101;
  }
LABEL_81:
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    Class v45 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
    {
      int v46 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      uint64_t v47 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_connection_group_extract_connection_for_message_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v46;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v47;
      _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] did not find connection %@, returning error", buf, 0x1Cu);
    }
  }
  uint64_t v48 = *(void *)(*(void *)(a1 + 40) + 8);
  int v13 = *(void **)(v48 + 40);
  *(void *)(v48 + 40) = 0;
LABEL_88:
}

BOOL nw_connection_group_reinsert_extracted_connection(nw_connection_group_t group, nw_connection_t connection)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v3 = group;
  id v4 = connection;
  nw_protocol_definition_t v5 = v4;
  if (!v3)
  {
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v12, &type, &v29)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_52;
    }
    if (!v29)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v13 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
      goto LABEL_52;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_40;
  }
  if (!v4)
  {
    uint64_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v12, &type, &v29)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null connection", buf, 0xCu);
      }
LABEL_52:

LABEL_53:
      if (v12) {
        free(v12);
      }
      goto LABEL_13;
    }
    if (!v29)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v13 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
        _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_52;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_40:

    free(backtrace_string);
    goto LABEL_53;
  }
  if (SBYTE6(v3[23].isa) < 0 || SLODWORD(v3[5].isa) >= 3)
  {
    if (nw_parameters_get_logging_disabled((uint64_t)v3[7].isa)) {
      goto LABEL_13;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    BOOL v8 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int isa = (int)v3[21].isa;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = isa;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot reinsert a connection into a failed or cancelled group", buf, 0x12u);
    }
    goto LABEL_12;
  }
  if (!v3[17].isa)
  {
    if (nw_parameters_get_logging_disabled((uint64_t)v3[7].isa))
    {
LABEL_13:
      BOOL v7 = 0;
      goto LABEL_14;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    BOOL v8 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = (int)v3[21].isa;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] connection group does not have a receive handler, rejecting reinsertion", buf, 0x12u);
    }
LABEL_12:

    goto LABEL_13;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  char v32 = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __nw_connection_group_reinsert_extracted_connection_block_invoke;
  aBlock[3] = &unk_1E5242570;
  os_log_type_t v26 = v4;
  os_log_type_t v27 = v3;
  os_log_type_t v28 = buf;
  uint64_t v6 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
  v6[2](v6);
  os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

  BOOL v7 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
  _Block_object_dispose(buf, 8);
LABEL_14:

  return v7;
}

void sub_1836D1944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_reinsert_extracted_connection_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  nw_connection_get_group_uuid(*(void **)(a1 + 32), (unsigned __int8 *)&v18);
  id v2 = *(uint64_t **)(a1 + 40);
  if (v2[15] != v18 || v2[16] != v19) {
    goto LABEL_12;
  }
  uint64_t v3 = v2[13];
  id v4 = *(void **)(a1 + 32);
  if (!v3 || v4 == 0) {
    goto LABEL_20;
  }
  BOOL v7 = *(void ***)(v3 + 16);
  uint64_t v6 = *(void ***)(v3 + 24);
  if (v7 != v6)
  {
    while (*v7 != v4)
    {
      if (++v7 == v6)
      {
        BOOL v7 = v6;
        break;
      }
    }
  }
  if (v7 == v6)
  {
LABEL_20:
    nw_connection_reset_client(v4);
    nw_connection_group_add_connection_locked(*(NWConcrete_nw_connection_group **)(a1 + 40), *(NWConcrete_nw_connection **)(a1 + 32));
    nw_connection_start(*(nw_connection_t *)(a1 + 32));
    char v11 = 1;
  }
  else
  {
LABEL_12:
    if (!nw_parameters_get_logging_disabled(v2[7]))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      BOOL v8 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v10 = *(_DWORD *)(*(void *)(a1 + 40) + 168);
        int v12 = 136446722;
        int v13 = "nw_connection_group_reinsert_extracted_connection_block_invoke";
        __int16 v14 = 1024;
        int v15 = v10;
        __int16 v16 = 2112;
        uint64_t v17 = v9;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s [G%u] connection %@ was not extracted from this group or was already reinserted, reinsertion failed", (uint8_t *)&v12, 0x1Cu);
      }
    }
    char v11 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v11;
}

BOOL nw_connection_group_add_member(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  nw_protocol_definition_t v5 = v4;
  if (!v3)
  {
    __int16 v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
    int v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v34 = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v15, &v34, &v33)) {
      goto LABEL_50;
    }
    if (v34 == OS_LOG_TYPE_FAULT)
    {
      __int16 v16 = __nwlog_obj();
      os_log_type_t v17 = v34;
      if (os_log_type_enabled(v16, v34))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v16 = __nwlog_obj();
      os_log_type_t v21 = v34;
      BOOL v22 = os_log_type_enabled(v16, v34);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_50:
        if (!v15)
        {
LABEL_13:
          BOOL v12 = 0;
          goto LABEL_16;
        }
LABEL_51:
        free(v15);
        goto LABEL_13;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v16 = __nwlog_obj();
      os_log_type_t v26 = v34;
      if (os_log_type_enabled(v16, v34))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_49:

    goto LABEL_50;
  }
  if (!v4)
  {
    uint64_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
    int v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v34 = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v15, &v34, &v33)) {
      goto LABEL_50;
    }
    if (v34 == OS_LOG_TYPE_FAULT)
    {
      __int16 v16 = __nwlog_obj();
      os_log_type_t v19 = v34;
      if (os_log_type_enabled(v16, v34))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v33)
    {
      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      __int16 v16 = __nwlog_obj();
      os_log_type_t v24 = v34;
      BOOL v25 = os_log_type_enabled(v16, v34);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v23;
          _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        if (!v15) {
          goto LABEL_13;
        }
        goto LABEL_51;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v16 = __nwlog_obj();
      os_log_type_t v27 = v34;
      if (os_log_type_enabled(v16, v34))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
        _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_49;
  }
  if (!nw_group_descriptor_add_endpoint(*((nw_group_descriptor_t *)v3 + 8), v4))
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v3 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      int v10 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v11 = *((_DWORD *)v3 + 42);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_add_member";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Could not add endpoint to group", buf, 0x12u);
      }
    }
    goto LABEL_13;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  char v36 = 1;
  uint64_t v6 = (os_unfair_lock_s *)*((void *)v3 + 9);
  if (v6)
  {
    BOOL v7 = v6 + 24;
    BOOL v8 = v6;
    os_unfair_lock_lock(v7);
    id v9 = v8[6];
    os_unfair_lock_unlock(v7);

    if (v9)
    {
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 3221225472;
      v28[2] = __nw_connection_group_add_member_block_invoke;
      v28[3] = &unk_1E523BA30;
      id v29 = v3;
      os_log_type_t v30 = v5;
      char v32 = buf;
      id v9 = v9;
      id v31 = v9;
      nw_path_enumerate_group_options(v9, v28);
    }
  }
  else
  {
    id v9 = 0;
  }
  BOOL v12 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;

  _Block_object_dispose(buf, 8);
LABEL_16:

  return v12;
}

void sub_1836D2194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Block_object_dispose((const void *)(v23 - 96), 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_add_member_block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    id v4 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      int v8 = 136447234;
      id v9 = "nw_connection_group_add_member_block_invoke";
      __int16 v10 = 1024;
      int v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v5;
      __int16 v14 = 1042;
      int v15 = 16;
      __int16 v16 = 2098;
      os_log_type_t v17 = a2;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [G%u] Adding member '%@' to Group Agent UUID=(%{public,uuid_t}.16P)", (uint8_t *)&v8, 0x2Cu);
    }
  }
  BOOL v7 = nw_array_create();
  nw_array_append(v7, *(void **)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = nw_path_group_member_action(*(void **)(a1 + 48), a2, 133, (void *)v7);
}

void sub_1836D2344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_group_remove_member(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __int16 v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v31 = "nw_connection_group_remove_member";
    int v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v29 = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v11, &v29, &v28)) {
      goto LABEL_42;
    }
    if (v29 == OS_LOG_TYPE_FAULT)
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v13 = v29;
      if (os_log_type_enabled(v12, v29))
      {
        *(_DWORD *)buf = 136446210;
        id v31 = "nw_connection_group_remove_member";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v12 = __nwlog_obj();
      os_log_type_t v17 = v29;
      BOOL v18 = os_log_type_enabled(v12, v29);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          id v31 = "nw_connection_group_remove_member";
          __int16 v32 = 2082;
          char v33 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        id v31 = "nw_connection_group_remove_member";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v22 = v29;
      if (os_log_type_enabled(v12, v29))
      {
        *(_DWORD *)buf = 136446210;
        id v31 = "nw_connection_group_remove_member";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (v4)
  {
    nw_group_descriptor_remove_endpoint(v3[8], v4);
    int v6 = (os_unfair_lock_s *)v3[9];
    if (v6)
    {
      BOOL v7 = v6 + 24;
      int v8 = v6;
      os_unfair_lock_lock(v7);
      id v9 = v8[6];
      os_unfair_lock_unlock(v7);

      if (v9)
      {
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3221225472;
        v24[2] = __nw_connection_group_remove_member_block_invoke;
        v24[3] = &unk_1E523F960;
        BOOL v25 = v3;
        id v26 = v5;
        id v9 = v9;
        id v27 = v9;
        nw_path_enumerate_group_options(v9, v24);
      }
    }
    else
    {
      id v9 = 0;
    }

    goto LABEL_8;
  }
  __int16 v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v31 = "nw_connection_group_remove_member";
  int v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v29 = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (!__nwlog_fault(v11, &v29, &v28)) {
    goto LABEL_42;
  }
  if (v29 == OS_LOG_TYPE_FAULT)
  {
    __int16 v12 = __nwlog_obj();
    os_log_type_t v15 = v29;
    if (os_log_type_enabled(v12, v29))
    {
      *(_DWORD *)buf = 136446210;
      id v31 = "nw_connection_group_remove_member";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null endpoint", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v28)
  {
    __int16 v12 = __nwlog_obj();
    os_log_type_t v23 = v29;
    if (os_log_type_enabled(v12, v29))
    {
      *(_DWORD *)buf = 136446210;
      id v31 = "nw_connection_group_remove_member";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __int16 v12 = __nwlog_obj();
  os_log_type_t v20 = v29;
  BOOL v21 = os_log_type_enabled(v12, v29);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      id v31 = "nw_connection_group_remove_member";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    id v31 = "nw_connection_group_remove_member";
    __int16 v32 = 2082;
    char v33 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

void sub_1836D28E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_connection_group_remove_member_block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    id v4 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      int v8 = 136447234;
      id v9 = "nw_connection_group_remove_member_block_invoke";
      __int16 v10 = 1024;
      int v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v5;
      __int16 v14 = 1042;
      int v15 = 16;
      __int16 v16 = 2098;
      os_log_type_t v17 = a2;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [G%u] Removing member '%@' from Group Agent UUID=(%{public,uuid_t}.16P)", (uint8_t *)&v8, 0x2Cu);
    }
  }
  BOOL v7 = nw_array_create();
  nw_array_append(v7, *(void **)(a1 + 40));
  nw_path_group_member_action(*(void **)(a1 + 48), a2, 134, (void *)v7);
}

void sub_1836D2A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_group_start(nw_connection_group_t group)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = group;
  id v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_start_block_invoke;
    aBlock[3] = &unk_1E524BAA8;
    uint64_t v13 = v1;
    id v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 43);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 43);

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_connection_group_start";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_connection_group_start";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_connection_group_start";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_connection_group_start";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_connection_group_start";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_1836D2D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_connection_group_start_block_invoke_29(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_connection_group_start_block_invoke";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v5;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s Path evaluator update handler called, initial_set_members_complete=%{BOOL}d", buf, 0x12u);
  }

  uint64_t v26 = 0;
  id v27 = &v26;
  uint64_t v28 = 0x2020000000;
  char v29 = 0;
  int v6 = *(os_unfair_lock_s **)(a1 + 32);
  int v7 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __nw_connection_group_start_block_invoke_30;
  aBlock[3] = &unk_1E523BA80;
  os_log_type_t v24 = &v26;
  int v8 = v6;
  uint64_t v9 = *(void *)(a1 + 40);
  os_log_type_t v22 = v8;
  uint64_t v25 = v9;
  id v10 = v3;
  id v23 = v10;
  os_log_type_t v11 = (void (**)(void))_Block_copy(aBlock);
  v6 += 43;
  os_unfair_lock_lock(v6);
  v11[2](v11);
  os_unfair_lock_unlock(v6);

  if (v7 && !*((unsigned char *)v27 + 24))
  {
    __int16 v12 = (void **)*(id *)(a1 + 32);
    id v13 = v10;
    uint64_t v14 = (uint64_t)nw_group_descriptor_copy_members(v12[8]);
    id v15 = nw_path_copy_group_members(v13);
    BOOL v16 = (BOOL)v15;
    if (v14)
    {
      if (v15) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = nw_array_create();
      if (v16) {
        goto LABEL_7;
      }
    }
    BOOL v16 = nw_array_create();
LABEL_7:
    nw_group_descriptor_set_members(v12[8], (void *)v16);
    os_log_type_t v17 = v12[8];
    if (v17)
    {
      __int16 v18 = v17;
      int v19 = v18[2];

      if (v19 == 3 && *((int *)v12 + 10) <= 2)
      {
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = ___ZL37nw_connection_group_reconcile_membersP30NWConcrete_nw_connection_groupPU21objcproto10OS_nw_path8NSObject_block_invoke;
        char v33 = &unk_1E524AE18;
        uint64_t v34 = v12;
        nw_array_apply((atomic_uchar *)v16, (uint64_t)buf);
      }
    }
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = ___ZL37nw_connection_group_reconcile_membersP30NWConcrete_nw_connection_groupPU21objcproto10OS_nw_path8NSObject_block_invoke_2;
    v30[3] = &unk_1E523BBB8;
    uint64_t v20 = v12;
    id v31 = v20;
    nw_array_review_change(v14, v16, (uint64_t)&__block_literal_global_163, (uint64_t)v30);
  }
  _Block_object_dispose(&v26, 8);
}

void sub_1836D3118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_start_block_invoke_32(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136446722;
    int v7 = "nw_connection_group_start_block_invoke";
    __int16 v8 = 1042;
    int v9 = 16;
    __int16 v10 = 2098;
    os_log_type_t v11 = a2;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s Group Agent UUID=(%{public,uuid_t}.16P)", (uint8_t *)&v6, 0x1Cu);
  }

  id v5 = nw_group_descriptor_copy_members(*(void **)(*(void *)(a1 + 32) + 64));
  nw_path_group_member_action(*(void **)(a1 + 40), a2, 133, v5);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  nw_connection_group_set_state_locked(*(void **)(a1 + 32), 2, 0);
}

void sub_1836D32A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL53nw_connection_group_start_existing_connections_lockedP30NWConcrete_nw_connection_group_block_invoke(int a1, int a2, nw_connection_t connection)
{
  return 1;
}

void __nw_connection_group_start_block_invoke_30(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(unsigned char *)(*(void *)(a1 + 32) + 190) >> 7;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
    && !*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = __nw_connection_group_start_block_invoke_2;
    v5[3] = &unk_1E523BA58;
    id v2 = *(void **)(a1 + 40);
    id v6 = *(id *)(a1 + 32);
    id v3 = *(id *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 56);
    id v7 = v3;
    uint64_t v8 = v4;
    nw_path_enumerate_group_options(v2, v5);
  }
}

void sub_1836D33B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_connection_group_reconcile_membersP30NWConcrete_nw_connection_groupPU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  id v68 = a3;
  uint64_t v4 = nw_endpoint_copy(v68);
  id v5 = *(id *)(*(void *)(a1 + 32) + 56);
  BOOL v6 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v5, 0, 0);

  id v7 = (os_unfair_lock_s *)*(id *)(a1 + 32);
  id v8 = v4;
  id v9 = (id)v6;
  __int16 v10 = v9;
  if (!v7)
  {
    nw_connection_t v40 = __nwlog_obj();
    *(_DWORD *)aBlock = 136446210;
    *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
    os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

    v92[0] = 16;
    buf[0] = 0;
    if (!__nwlog_fault(v41, v92, buf)) {
      goto LABEL_103;
    }
    if (v92[0] == 17)
    {
      BOOL v42 = __nwlog_obj();
      os_log_type_t v43 = v92[0];
      if (os_log_type_enabled(v42, (os_log_type_t)v92[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null group", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    if (!buf[0])
    {
      BOOL v42 = __nwlog_obj();
      os_log_type_t v60 = v92[0];
      if (os_log_type_enabled(v42, (os_log_type_t)v92[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v42, v60, "%{public}s called with null group, backtrace limit exceeded", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v42 = __nwlog_obj();
    os_log_type_t v49 = v92[0];
    BOOL v50 = os_log_type_enabled(v42, (os_log_type_t)v92[0]);
    if (!backtrace_string)
    {
      if (v50)
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v42, v49, "%{public}s called with null group, no backtrace", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    if (v50)
    {
      *(_DWORD *)aBlock = 136446466;
      *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v42, v49, "%{public}s called with null group, dumping backtrace:%{public}s", aBlock, 0x16u);
    }
    goto LABEL_68;
  }
  if (!v8)
  {
    os_log_type_t v44 = __nwlog_obj();
    *(_DWORD *)aBlock = 136446210;
    *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
    os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

    v92[0] = 16;
    buf[0] = 0;
    if (!__nwlog_fault(v41, v92, buf)) {
      goto LABEL_103;
    }
    if (v92[0] == 17)
    {
      BOOL v42 = __nwlog_obj();
      os_log_type_t v45 = v92[0];
      if (os_log_type_enabled(v42, (os_log_type_t)v92[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v42, v45, "%{public}s called with null remote_endpoint", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    if (!buf[0])
    {
      BOOL v42 = __nwlog_obj();
      os_log_type_t v61 = v92[0];
      if (os_log_type_enabled(v42, (os_log_type_t)v92[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v42, v61, "%{public}s called with null remote_endpoint, backtrace limit exceeded", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v42 = __nwlog_obj();
    os_log_type_t v51 = v92[0];
    BOOL v52 = os_log_type_enabled(v42, (os_log_type_t)v92[0]);
    if (!backtrace_string)
    {
      if (v52)
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v42, v51, "%{public}s called with null remote_endpoint, no backtrace", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    if (v52)
    {
      *(_DWORD *)aBlock = 136446466;
      *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v42, v51, "%{public}s called with null remote_endpoint, dumping backtrace:%{public}s", aBlock, 0x16u);
    }
LABEL_68:

    free(backtrace_string);
    if (!v41) {
      goto LABEL_105;
    }
    goto LABEL_104;
  }
  if (v9)
  {
    uint64_t v73 = 0;
    os_log_type_t v74 = &v73;
    uint64_t v75 = 0x3032000000;
    os_log_type_t v76 = __Block_byref_object_copy__8624;
    os_log_type_t v77 = __Block_byref_object_dispose__8625;
    id v78 = 0;
    uint64_t v69 = 0;
    int v70 = &v69;
    uint64_t v71 = 0x2020000000;
    char v72 = 0;
    *(void *)aBlock = MEMORY[0x1E4F143A8];
    *(void *)&aBlock[8] = 3221225472;
    *(void *)&aBlock[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke;
    *(void *)&unsigned char aBlock[24] = &unk_1E523BB48;
    os_log_type_t v11 = v7;
    *(void *)&aBlock[32] = v11;
    unsigned int v88 = &v69;
    id v67 = v10;
    id v86 = v67;
    id v12 = v8;
    id v87 = v12;
    os_log_type_t v89 = &v73;
    id v13 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v7 + 43);
    v13[2](v13);
    os_unfair_lock_unlock(v7 + 43);

    if (*((unsigned char *)v70 + 24))
    {
      id v14 = 0;
LABEL_36:

      _Block_object_dispose(&v69, 8);
      _Block_object_dispose(&v73, 8);

      goto LABEL_37;
    }
    if (v74[5])
    {
      id v15 = *(void **)&v11[16]._os_unfair_lock_opaque;
      if (!v15 || (v16 = v15, int v17 = v16[2], v16, v17 != 2))
      {
LABEL_35:
        id v14 = (id)v74[5];
        goto LABEL_36;
      }
    }
    if (!nw_parameters_get_logging_disabled(*(void *)&v11[14]._os_unfair_lock_opaque) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      os_log_type_t v56 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        uint32_t os_unfair_lock_opaque = v11[42]._os_unfair_lock_opaque;
        *(_DWORD *)int v92 = 136446978;
        *(void *)&v92[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        *(_WORD *)&v92[12] = 1024;
        *(_DWORD *)&v92[14] = os_unfair_lock_opaque;
        *(_WORD *)&v92[18] = 2112;
        *(void *)&v92[20] = v12;
        *(_WORD *)&v92[28] = 2112;
        *(void *)&v92[30] = v67;
        _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Did not find connection for (remote: %@, parameters: %@), creating new connection", v92, 0x26u);
      }
    }
    __int16 v18 = (void *)v74[5];
    os_log_type_t v66 = v11;
    id v64 = v18;
    endpoint = v12;
    id v19 = v67;
    *(void *)int v92 = 0;
    *(void *)&v92[8] = v92;
    *(void *)&v92[16] = 0x3032000000;
    *(void *)&v92[24] = __Block_byref_object_copy__8624;
    *(void *)&v92[32] = __Block_byref_object_dispose__8625;
    uint32_t v93 = 0;
    id v63 = v19;
    BOOL v20 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v63, 0, 0);

    nw_parameters_set_reuse_local_address((nw_parameters_t)v20, 1);
    if (!nw_parameters_get_logging_disabled(*(void *)&v11[14]._os_unfair_lock_opaque) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v58 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        uint32_t v59 = v66[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v59;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = endpoint;
        *(_WORD *)&unsigned char buf[28] = 2112;
        *(void *)&buf[30] = v20;
        _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Creating connection for endpoint (%@) and parameters (%@)", buf, 0x26u);
      }
    }
    BOOL v21 = *(void **)&v66[16]._os_unfair_lock_opaque;
    if (v21 && (os_log_type_t v22 = v21, v23 = v22[2], v22, v23 == 2)) {
      nw_connection_t v24 = (nw_connection_t)nw_connection_create_with_connection(v64, (void *)v20);
    }
    else {
      nw_connection_t v24 = nw_connection_create(endpoint, (nw_parameters_t)v20);
    }
    uint64_t v25 = *(void **)(*(void *)&v92[8] + 40);
    *(void *)(*(void *)&v92[8] + 40) = v24;

    if (*(void *)(*(void *)&v92[8] + 40))
    {
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZL65nw_connection_group_create_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS3_PU33objcproto22OS_nw_protocol_optionsS3_b_block_invoke;
      *(void *)&unsigned char buf[24] = &unk_1E524B978;
      *(void *)&unsigned char buf[32] = v66;
      uint32_t v91 = v92;
      uint64_t v26 = (void (**)(void))_Block_copy(buf);
      os_unfair_lock_lock(v7 + 43);
      v26[2](v26);
      os_unfair_lock_unlock(v7 + 43);

      id v27 = *(NSObject **)&buf[32];
    }
    else
    {
      if (nw_parameters_get_logging_disabled(*(void *)&v11[14]._os_unfair_lock_opaque)) {
        goto LABEL_25;
      }
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      id v27 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        uint32_t v28 = v66[42]._os_unfair_lock_opaque;
        uint64_t v29 = *(void *)&v11[14]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v28;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v29;
        _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to create connection with parameters %@", buf, 0x1Cu);
      }
    }

LABEL_25:
    id v30 = *(id *)(*(void *)&v92[8] + 40);

    _Block_object_dispose(v92, 8);
    id v31 = (void *)v74[5];
    void v74[5] = (uint64_t)v30;

    if (v74[5])
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      unsigned char buf[24] = 0;
      *(void *)int v92 = MEMORY[0x1E4F143A8];
      *(void *)&v92[8] = 3221225472;
      *(void *)&v92[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_158;
      *(void *)&v92[24] = &unk_1E524B978;
      uint32_t v93 = buf;
      __int16 v32 = v66;
      *(void *)&v92[32] = v32;
      char v33 = (void (**)(void))_Block_copy(v92);
      os_unfair_lock_lock(v7 + 43);
      v33[2](v33);
      os_unfair_lock_unlock(v7 + 43);

      if (*(unsigned char *)(*(void *)&buf[8] + 24))
      {
        nw_connection_start((nw_connection_t)v74[5]);
      }
      else if (!nw_parameters_get_logging_disabled(*(void *)&v11[14]._os_unfair_lock_opaque))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
        }
        uint64_t v34 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
          uint32_t v35 = v32[42]._os_unfair_lock_opaque;
          uint64_t v36 = v74[5];
          *(_DWORD *)os_log_type_t v79 = 136446722;
          BOOL v80 = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          __int16 v81 = 1024;
          uint32_t v82 = v35;
          __int16 v83 = 2112;
          uint64_t v84 = v36;
          _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Deferring start of connection %@ until group start", v79, 0x1Cu);
        }
      }
      _Block_object_dispose(buf, 8);
    }
    goto LABEL_35;
  }
  int v46 = __nwlog_obj();
  *(_DWORD *)aBlock = 136446210;
  *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
  os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

  v92[0] = 16;
  buf[0] = 0;
  if (__nwlog_fault(v41, v92, buf))
  {
    if (v92[0] == 17)
    {
      BOOL v42 = __nwlog_obj();
      os_log_type_t v47 = v92[0];
      if (os_log_type_enabled(v42, (os_log_type_t)v92[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v42, v47, "%{public}s called with null parameters", aBlock, 0xCu);
      }
LABEL_102:

      goto LABEL_103;
    }
    if (!buf[0])
    {
      BOOL v42 = __nwlog_obj();
      os_log_type_t v62 = v92[0];
      if (os_log_type_enabled(v42, (os_log_type_t)v92[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v42, v62, "%{public}s called with null parameters, backtrace limit exceeded", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    char v53 = (char *)__nw_create_backtrace_string();
    BOOL v42 = __nwlog_obj();
    os_log_type_t v54 = v92[0];
    BOOL v55 = os_log_type_enabled(v42, (os_log_type_t)v92[0]);
    if (!v53)
    {
      if (v55)
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_1830D4000, v42, v54, "%{public}s called with null parameters, no backtrace", aBlock, 0xCu);
      }
      goto LABEL_102;
    }
    if (v55)
    {
      *(_DWORD *)aBlock = 136446466;
      *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = v53;
      _os_log_impl(&dword_1830D4000, v42, v54, "%{public}s called with null parameters, dumping backtrace:%{public}s", aBlock, 0x16u);
    }

    free(v53);
  }
LABEL_103:
  if (v41) {
LABEL_104:
  }
    free(v41);
LABEL_105:
  id v14 = 0;
LABEL_37:

  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    uint64_t v37 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      int v38 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      *(_DWORD *)aBlock = 136446978;
      *(void *)&void aBlock[4] = "nw_connection_group_reconcile_members_block_invoke";
      *(_WORD *)&aBlock[12] = 1024;
      *(_DWORD *)&aBlock[14] = v38;
      *(_WORD *)&aBlock[18] = 2112;
      *(void *)&aBlock[20] = v14;
      *(_WORD *)&aBlock[28] = 2112;
      *(void *)&aBlock[30] = v8;
      _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_INFO, "%{public}s [G%u] created connection %@ to endpoint %@", aBlock, 0x26u);
    }
  }
  return 1;
}

void sub_1836D42CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39,id a40,id a41)
{
  _Block_object_dispose((const void *)(v43 - 240), 8);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_connection_group_reconcile_membersP30NWConcrete_nw_connection_groupPU21objcproto10OS_nw_path8NSObject_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 80) + 16))();
}

uint64_t ___ZL37nw_connection_group_reconcile_membersP30NWConcrete_nw_connection_groupPU21objcproto10OS_nw_path8NSObject_block_invoke_160(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isEqual:");
}

void __nw_connection_group_start_block_invoke_2(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136446722;
    id v7 = "nw_connection_group_start_block_invoke_2";
    __int16 v8 = 1042;
    int v9 = 16;
    __int16 v10 = 2098;
    os_log_type_t v11 = a2;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s Group Agent UUID=(%{public,uuid_t}.16P)", (uint8_t *)&v6, 0x1Cu);
  }

  id v5 = nw_group_descriptor_copy_members(*(void **)(*(void *)(a1 + 32) + 64));
  nw_path_group_member_action(*(void **)(a1 + 40), a2, 133, v5);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  nw_connection_group_set_state_locked(*(void **)(a1 + 32), 2, 0);
}

void sub_1836D4550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_group_cancel(nw_connection_group_t group)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = group;
  id v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_cancel_block_invoke;
    aBlock[3] = &unk_1E524BAA8;
    id v13 = v1;
    id v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 43);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 43);

    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v17 = "nw_connection_group_cancel";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_connection_group_cancel";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          int v17 = "nw_connection_group_cancel";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_connection_group_cancel";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_connection_group_cancel";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_1836D487C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_connection_group_cancel_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(char *)(v2 + 190);
  BOOL logging_disabled = nw_parameters_get_logging_disabled(*(void *)(v2 + 56));
  if (v3 < 0)
  {
    if (logging_disabled) {
      return;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    BOOL v16 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v17 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      int v18 = 136446466;
      id v19 = "nw_connection_group_cancel_block_invoke";
      __int16 v20 = 1024;
      int v21 = v17;
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s [G%u] The group has already been cancelled, ignoring nw_connection_group_cancel().", (uint8_t *)&v18, 0x12u);
    }
    goto LABEL_33;
  }
  if (!logging_disabled)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
    }
    id v5 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
      int v18 = 136446466;
      id v19 = "nw_connection_group_cancel_block_invoke";
      __int16 v20 = 1024;
      int v21 = v6;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] cancel", (uint8_t *)&v18, 0x12u);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  __int16 v8 = *(void **)(v7 + 72);
  if (v8)
  {
    nw_path_evaluator_cancel(v8);
    uint64_t v7 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v7 + 190) |= 0x80u;
  uint64_t v9 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v9 + 190) & 8) != 0 && *(void *)(v9 + 88))
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(v9 + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      BOOL v10 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v11 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        int v18 = 136446466;
        id v19 = "nw_connection_group_cancel_block_invoke";
        __int16 v20 = 1024;
        int v21 = v11;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s [G%u] cancelling group listener", (uint8_t *)&v18, 0x12u);
      }
    }
    nw_listener_cancel(*(nw_listener_t *)(*(void *)(a1 + 32) + 88));
  }
  else
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(v9 + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_32);
      }
      uint64_t v12 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 168);
        int v18 = 136446466;
        id v19 = "nw_connection_group_cancel_block_invoke";
        __int16 v20 = 1024;
        int v21 = v13;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, "%{public}s [G%u] cancelling group connections", (uint8_t *)&v18, 0x12u);
      }
    }
    nw_connection_group_cancel_connections_locked(*(NWConcrete_nw_connection_group **)(a1 + 32));
  }
  char v14 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  if (v14)
  {
    nw_listener_cancel(v14);
    uint64_t v15 = *(void *)(a1 + 32);
    BOOL v16 = *(NSObject **)(v15 + 96);
    *(void *)(v15 + 96) = 0;
LABEL_33:
  }
}

nw_parameters_t nw_connection_group_copy_parameters(nw_connection_group_t group)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v1 = group;
  nw_connection_group_t v2 = v1;
  if (v1)
  {
    int v3 = v1[7].isa;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_connection_group_copy_parameters";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_connection_group_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_connection_group_copy_parameters";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_connection_group_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_connection_group_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  int v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_connection_group_get_id(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v1 = a1;
  nw_connection_group_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[42];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_connection_group_get_id";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_connection_group_get_id";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_connection_group_get_id";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_connection_group_get_id";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_connection_group_get_id";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

nw_protocol_metadata_t nw_connection_group_copy_protocol_metadata_for_message(nw_connection_group_t group, nw_content_context_t context, nw_protocol_definition_t definition)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v5 = group;
  int v6 = context;
  uint64_t v7 = definition;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    int v46 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (!__nwlog_fault(v25, &type, &v61)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_1830D4000, v26, v47, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (!v61)
    {
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v58 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_1830D4000, v26, v58, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v26 = __nwlog_obj();
    os_log_type_t v52 = type;
    BOOL v53 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (v53)
      {
        *(_DWORD *)buf = 136446210;
        id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_1830D4000, v26, v52, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (v53)
    {
      *(_DWORD *)buf = 136446466;
      id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
      __int16 v65 = 2082;
      os_log_type_t v66 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v26, v52, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!v6)
  {
    uint64_t v48 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (!__nwlog_fault(v25, &type, &v61)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_1830D4000, v26, v49, "%{public}s called with null context", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (!v61)
    {
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v59 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_1830D4000, v26, v59, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v26 = __nwlog_obj();
    os_log_type_t v54 = type;
    BOOL v55 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_1830D4000, v26, v54, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (v55)
    {
      *(_DWORD *)buf = 136446466;
      id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
      __int16 v65 = 2082;
      os_log_type_t v66 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v26, v54, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!v7)
  {
    BOOL v50 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (!__nwlog_fault(v25, &type, &v61)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_1830D4000, v26, v51, "%{public}s called with null definition", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (!v61)
    {
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v60 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_1830D4000, v26, v60, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v26 = __nwlog_obj();
    os_log_type_t v56 = type;
    BOOL v57 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (v57)
      {
        *(_DWORD *)buf = 136446210;
        id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_1830D4000, v26, v56, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (v57)
    {
      *(_DWORD *)buf = 136446466;
      id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
      __int16 v65 = 2082;
      os_log_type_t v66 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v26, v56, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    if (!v25) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  Class isa = v5[8].isa;
  if (!isa) {
    goto LABEL_16;
  }
  os_log_type_t v10 = isa;
  int v11 = *((_DWORD *)v10 + 2);

  if (v11 == 1) {
    goto LABEL_35;
  }
  Class v12 = v5[8].isa;
  if (!v12) {
    goto LABEL_16;
  }
  char v13 = v12;
  int v14 = *((_DWORD *)v13 + 2);

  if (v14 == 2) {
    goto LABEL_10;
  }
  Class v15 = v5[8].isa;
  if (!v15)
  {
LABEL_16:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v24 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (!__nwlog_fault(v25, &type, &v61)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v26 = (id)gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s Group descriptor is not set", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (!v61)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v26 = (id)gLogObj;
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_1830D4000, v26, v31, "%{public}s Group descriptor is not set, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v26 = (id)gLogObj;
    os_log_type_t v29 = type;
    BOOL v30 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
        _os_log_impl(&dword_1830D4000, v26, v29, "%{public}s Group descriptor is not set, no backtrace", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
      __int16 v65 = 2082;
      os_log_type_t v66 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v26, v29, "%{public}s Group descriptor is not set, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  BOOL v16 = v15;
  int v17 = *((_DWORD *)v16 + 2);

  if (v17 != 4)
  {
    if (v5[8].isa)
    {
      int v21 = __nwlog_obj();
      unsigned int v22 = nw_group_descriptor_get_type(v5[8].isa);
      if (v22 > 4) {
        int v23 = "unknown";
      }
      else {
        int v23 = off_1E523BC90[v22];
      }
      *(_DWORD *)buf = 136446466;
      id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
      __int16 v65 = 2080;
      os_log_type_t v66 = (void *)v23;
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v61 = 0;
      if (__nwlog_fault(v25, &type, &v61))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v26 = __nwlog_obj();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v26, type))
          {
            unsigned int v34 = nw_group_descriptor_get_type(v5[8].isa);
            if (v34 > 4) {
              uint32_t v35 = "unknown";
            }
            else {
              uint32_t v35 = off_1E523BC90[v34];
            }
            *(_DWORD *)buf = 136446466;
            id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
            __int16 v65 = 2080;
            os_log_type_t v66 = (void *)v35;
            _os_log_impl(&dword_1830D4000, v26, v33, "%{public}s Unsupported group descriptor type: %s", buf, 0x16u);
          }
LABEL_32:

          goto LABEL_33;
        }
        if (!v61)
        {
          uint64_t v26 = __nwlog_obj();
          os_log_type_t v41 = type;
          if (os_log_type_enabled(v26, type))
          {
            unsigned int v42 = nw_group_descriptor_get_type(v5[8].isa);
            if (v42 > 4) {
              uint64_t v43 = "unknown";
            }
            else {
              uint64_t v43 = off_1E523BC90[v42];
            }
            *(_DWORD *)buf = 136446466;
            id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
            __int16 v65 = 2080;
            os_log_type_t v66 = (void *)v43;
            _os_log_impl(&dword_1830D4000, v26, v41, "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_32;
        }
        uint64_t v36 = (char *)__nw_create_backtrace_string();
        uint64_t v26 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v26, type);
        if (!v36)
        {
          if (v38)
          {
            unsigned int v44 = nw_group_descriptor_get_type(v5[8].isa);
            if (v44 > 4) {
              os_log_type_t v45 = "unknown";
            }
            else {
              os_log_type_t v45 = off_1E523BC90[v44];
            }
            *(_DWORD *)buf = 136446466;
            id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
            __int16 v65 = 2080;
            os_log_type_t v66 = (void *)v45;
            _os_log_impl(&dword_1830D4000, v26, v37, "%{public}s Unsupported group descriptor type: %s, no backtrace", buf, 0x16u);
          }
          goto LABEL_32;
        }
        if (v38)
        {
          unsigned int v39 = nw_group_descriptor_get_type(v5[8].isa);
          if (v39 > 4) {
            nw_connection_t v40 = "unknown";
          }
          else {
            nw_connection_t v40 = off_1E523BC90[v39];
          }
          *(_DWORD *)buf = 136446722;
          id v64 = "nw_connection_group_copy_protocol_metadata_for_message";
          __int16 v65 = 2080;
          os_log_type_t v66 = (void *)v40;
          __int16 v67 = 2082;
          id v68 = v36;
          _os_log_impl(&dword_1830D4000, v26, v37, "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v36);
      }
LABEL_33:
      if (v25) {
LABEL_34:
      }
        free(v25);
LABEL_35:
      nw_protocol_metadata_t v20 = 0;
      goto LABEL_36;
    }
    goto LABEL_16;
  }
LABEL_10:
  int v18 = nw_connection_group_copy_connection_for_message(v5, v6);
  uint64_t v19 = v18;
  if (v18)
  {
    nw_protocol_metadata_t v20 = nw_connection_copy_protocol_metadata(v18, v8);
  }
  else
  {
    nw_protocol_metadata_t v20 = 0;
  }
LABEL_36:

  return v20;
}

void sub_1836D5DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t nw_connection_group_copy_local_endpoint_for_message(nw_connection_group_t group, nw_content_context_t context)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v3 = group;
  uint64_t v4 = context;
  nw_connection_group_t v5 = v4;
  if (!v3)
  {
    uint64_t v43 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
    unsigned int v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v23 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v44, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_34;
    }
    if (!v53)
    {
      int v23 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v51, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v23 = __nwlog_obj();
    os_log_type_t v47 = type;
    BOOL v48 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v47, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
      goto LABEL_34;
    }
    if (v48)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
      __int16 v57 = 2082;
      os_log_type_t v58 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v23, v47, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_27;
  }
  if (!v4)
  {
    os_log_type_t v45 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
    unsigned int v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v23 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v46, "%{public}s called with null context", buf, 0xCu);
      }
      goto LABEL_34;
    }
    if (!v53)
    {
      int v23 = __nwlog_obj();
      os_log_type_t v52 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v52, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v23 = __nwlog_obj();
    os_log_type_t v49 = type;
    BOOL v50 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v49, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
      goto LABEL_34;
    }
    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
      __int16 v57 = 2082;
      os_log_type_t v58 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v23, v49, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_27:

    free(backtrace_string);
    if (!v22) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  Class isa = v3[8].isa;
  if (!isa)
  {
LABEL_18:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
    unsigned int v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v23 = (id)gLogObj;
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s Group descriptor is not set", buf, 0xCu);
      }
      goto LABEL_34;
    }
    if (!v53)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v23 = (id)gLogObj;
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s Group descriptor is not set, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v23 = (id)gLogObj;
    os_log_type_t v26 = type;
    BOOL v27 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
        _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s Group descriptor is not set, no backtrace", buf, 0xCu);
      }
      goto LABEL_34;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
      __int16 v57 = 2082;
      os_log_type_t v58 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s Group descriptor is not set, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_27;
  }
  uint64_t v7 = isa;
  int v8 = *((_DWORD *)v7 + 2);

  if (v8 != 1)
  {
    Class v12 = v3[8].isa;
    if (v12)
    {
      char v13 = v12;
      int v14 = *((_DWORD *)v13 + 2);

      if (v14 == 2) {
        goto LABEL_12;
      }
      Class v15 = v3[8].isa;
      if (v15)
      {
        BOOL v16 = v15;
        int v17 = *((_DWORD *)v16 + 2);

        if (v17 == 4)
        {
LABEL_12:
          id v10 = nw_connection_group_copy_connection_for_message(v3, v5);
          int v11 = v10;
          if (v10)
          {
LABEL_13:
            uint64_t v9 = nw_connection_copy_connected_local_endpoint(v10);

            goto LABEL_38;
          }
LABEL_14:
          uint64_t v9 = 0;

          goto LABEL_38;
        }
        if (v3[8].isa)
        {
          int v18 = __nwlog_obj();
          unsigned int v19 = nw_group_descriptor_get_type(v3[8].isa);
          if (v19 > 4) {
            nw_protocol_metadata_t v20 = "unknown";
          }
          else {
            nw_protocol_metadata_t v20 = off_1E523BC90[v19];
          }
          *(_DWORD *)buf = 136446466;
          os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
          __int16 v57 = 2080;
          os_log_type_t v58 = (void *)v20;
          unsigned int v22 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v53 = 0;
          if (__nwlog_fault(v22, &type, &v53))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              int v23 = __nwlog_obj();
              os_log_type_t v30 = type;
              if (os_log_type_enabled(v23, type))
              {
                unsigned int v31 = nw_group_descriptor_get_type(v3[8].isa);
                if (v31 > 4) {
                  __int16 v32 = "unknown";
                }
                else {
                  __int16 v32 = off_1E523BC90[v31];
                }
                *(_DWORD *)buf = 136446466;
                os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
                __int16 v57 = 2080;
                os_log_type_t v58 = (void *)v32;
                _os_log_impl(&dword_1830D4000, v23, v30, "%{public}s Unsupported group descriptor type: %s", buf, 0x16u);
              }
LABEL_34:

              goto LABEL_35;
            }
            if (!v53)
            {
              int v23 = __nwlog_obj();
              os_log_type_t v38 = type;
              if (os_log_type_enabled(v23, type))
              {
                unsigned int v39 = nw_group_descriptor_get_type(v3[8].isa);
                if (v39 > 4) {
                  nw_connection_t v40 = "unknown";
                }
                else {
                  nw_connection_t v40 = off_1E523BC90[v39];
                }
                *(_DWORD *)buf = 136446466;
                os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
                __int16 v57 = 2080;
                os_log_type_t v58 = (void *)v40;
                _os_log_impl(&dword_1830D4000, v23, v38, "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded", buf, 0x16u);
              }
              goto LABEL_34;
            }
            os_log_type_t v33 = (char *)__nw_create_backtrace_string();
            int v23 = __nwlog_obj();
            os_log_type_t v34 = type;
            BOOL v35 = os_log_type_enabled(v23, type);
            if (!v33)
            {
              if (v35)
              {
                unsigned int v41 = nw_group_descriptor_get_type(v3[8].isa);
                if (v41 > 4) {
                  unsigned int v42 = "unknown";
                }
                else {
                  unsigned int v42 = off_1E523BC90[v41];
                }
                *(_DWORD *)buf = 136446466;
                os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
                __int16 v57 = 2080;
                os_log_type_t v58 = (void *)v42;
                _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s Unsupported group descriptor type: %s, no backtrace", buf, 0x16u);
              }
              goto LABEL_34;
            }
            if (v35)
            {
              unsigned int v36 = nw_group_descriptor_get_type(v3[8].isa);
              if (v36 > 4) {
                os_log_type_t v37 = "unknown";
              }
              else {
                os_log_type_t v37 = off_1E523BC90[v36];
              }
              *(_DWORD *)buf = 136446722;
              os_log_type_t v56 = "nw_connection_group_copy_local_endpoint_for_message";
              __int16 v57 = 2080;
              os_log_type_t v58 = (void *)v37;
              __int16 v59 = 2082;
              os_log_type_t v60 = v33;
              _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(v33);
          }
LABEL_35:
          if (!v22)
          {
LABEL_37:
            uint64_t v9 = 0;
            goto LABEL_38;
          }
LABEL_36:
          free(v22);
          goto LABEL_37;
        }
      }
    }
    goto LABEL_18;
  }
  uint64_t v9 = nw_content_context_copy_local_endpoint(v5);
  if (!v9)
  {
    id v10 = nw_connection_group_copy_connection_for_message(v3, v5);
    int v11 = v10;
    if (v10) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }
LABEL_38:

  return v9;
}

void sub_1836D68D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_path_t nw_connection_group_copy_path_for_message(nw_connection_group_t group, nw_content_context_t context)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  nw_connection_group_t v3 = group;
  uint64_t v4 = context;
  nw_connection_group_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v56 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
    BOOL v35 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v75 = 0;
    if (!__nwlog_fault(v35, type, &v75)) {
      goto LABEL_42;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unsigned int v36 = __nwlog_obj();
      os_log_type_t v57 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_1830D4000, v36, v57, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (!v75)
    {
      unsigned int v36 = __nwlog_obj();
      os_log_type_t v64 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_1830D4000, v36, v64, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v36 = __nwlog_obj();
    os_log_type_t v60 = type[0];
    BOOL v61 = os_log_type_enabled(v36, type[0]);
    if (!backtrace_string)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_1830D4000, v36, v60, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
      __int16 v78 = 2082;
      os_log_type_t v79 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v36, v60, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_34;
  }
  if (!v4)
  {
    os_log_type_t v58 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
    BOOL v35 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v75 = 0;
    if (!__nwlog_fault(v35, type, &v75)) {
      goto LABEL_42;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unsigned int v36 = __nwlog_obj();
      os_log_type_t v59 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_1830D4000, v36, v59, "%{public}s called with null context", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (!v75)
    {
      unsigned int v36 = __nwlog_obj();
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_1830D4000, v36, v65, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v36 = __nwlog_obj();
    os_log_type_t v62 = type[0];
    BOOL v63 = os_log_type_enabled(v36, type[0]);
    if (!backtrace_string)
    {
      if (v63)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_1830D4000, v36, v62, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v63)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
      __int16 v78 = 2082;
      os_log_type_t v79 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v36, v62, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_34:

    free(backtrace_string);
    if (!v35) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  Class isa = v3[8].isa;
  if (!isa) {
    goto LABEL_25;
  }
  uint64_t v7 = isa;
  int v8 = *((_DWORD *)v7 + 2);

  if (v8 == 1)
  {
    uint64_t v9 = nw_connection_group_copy_connection_for_message(v3, v5);
    id v10 = v9;
    if (v9)
    {
      int v11 = nw_connection_copy_current_path(v9);
LABEL_48:

      goto LABEL_49;
    }
    *(void *)os_log_type_t type = 0;
    int v70 = type;
    uint64_t v71 = 0x3032000000;
    char v72 = __Block_byref_object_copy__8624;
    uint64_t v73 = __Block_byref_object_dispose__8625;
    id v74 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_copy_path_for_message_block_invoke;
    aBlock[3] = &unk_1E524B978;
    id v68 = type;
    __int16 v67 = v3;
    nw_protocol_metadata_t v20 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
    v20[2](v20);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

    id v21 = (void *)nw_content_context_copy_local_endpoint(v5);
    unsigned int v22 = (void *)nw_content_context_copy_remote_endpoint(v5);
    uint64_t v23 = nw_content_context_copy_interface(v5);
    os_log_type_t v24 = (void *)v23;
    uint64_t v25 = *((void *)v70 + 5);
    if (v25 && v21 && v22 && v23)
    {
      os_log_type_t v26 = nw_content_context_copy_interface(v5);
      nw_parameters_require_interface(v25, v26);

      evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(v22, *((void **)v70 + 5));
      if (evaluator_for_endpoint)
      {
        os_log_type_t v28 = (os_unfair_lock_s *)((char *)evaluator_for_endpoint + 96);
        os_log_type_t v29 = evaluator_for_endpoint;
        os_unfair_lock_lock(v28);
        int v11 = v29[6].isa;
        os_unfair_lock_unlock(v28);

LABEL_47:
        _Block_object_dispose(type, 8);

        goto LABEL_48;
      }
      os_log_type_t v29 = 0;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v29 = (id)gLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v30 = (void *)*((void *)v70 + 5);
        *(_DWORD *)buf = 136447234;
        os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
        __int16 v78 = 2112;
        os_log_type_t v79 = v30;
        __int16 v80 = 2112;
        __int16 v81 = (char *)v21;
        __int16 v82 = 2112;
        __int16 v83 = v22;
        __int16 v84 = 2112;
        id v85 = v24;
        _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_ERROR, "%{public}s Failed to set up parameters %@ for local %@, remote %@, interface %@", buf, 0x34u);
      }
    }
    int v11 = 0;
    goto LABEL_47;
  }
  Class v12 = v3[8].isa;
  if (!v12) {
    goto LABEL_25;
  }
  char v13 = v12;
  int v14 = *((_DWORD *)v13 + 2);

  if (v14 == 2) {
    goto LABEL_11;
  }
  Class v15 = v3[8].isa;
  if (!v15)
  {
LABEL_25:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v34 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
    BOOL v35 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v75 = 0;
    if (!__nwlog_fault(v35, type, &v75)) {
      goto LABEL_42;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v36 = (id)gLogObj;
      os_log_type_t v37 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s Group descriptor is not set", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (!v75)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v36 = (id)gLogObj;
      os_log_type_t v41 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_1830D4000, v36, v41, "%{public}s Group descriptor is not set, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v36 = (id)gLogObj;
    os_log_type_t v39 = type[0];
    BOOL v40 = os_log_type_enabled(v36, type[0]);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
        _os_log_impl(&dword_1830D4000, v36, v39, "%{public}s Group descriptor is not set, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
      __int16 v78 = 2082;
      os_log_type_t v79 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v36, v39, "%{public}s Group descriptor is not set, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_34;
  }
  BOOL v16 = v15;
  int v17 = *((_DWORD *)v16 + 2);

  if (v17 != 4)
  {
    if (v3[8].isa)
    {
      unsigned int v31 = __nwlog_obj();
      unsigned int v32 = nw_group_descriptor_get_type(v3[8].isa);
      if (v32 > 4) {
        os_log_type_t v33 = "unknown";
      }
      else {
        os_log_type_t v33 = off_1E523BC90[v32];
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
      __int16 v78 = 2080;
      os_log_type_t v79 = (void *)v33;
      BOOL v35 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v75 = 0;
      if (__nwlog_fault(v35, type, &v75))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          unsigned int v36 = __nwlog_obj();
          os_log_type_t v43 = type[0];
          if (os_log_type_enabled(v36, type[0]))
          {
            unsigned int v44 = nw_group_descriptor_get_type(v3[8].isa);
            if (v44 > 4) {
              os_log_type_t v45 = "unknown";
            }
            else {
              os_log_type_t v45 = off_1E523BC90[v44];
            }
            *(_DWORD *)buf = 136446466;
            os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
            __int16 v78 = 2080;
            os_log_type_t v79 = (void *)v45;
            _os_log_impl(&dword_1830D4000, v36, v43, "%{public}s Unsupported group descriptor type: %s", buf, 0x16u);
          }
LABEL_41:

          goto LABEL_42;
        }
        if (!v75)
        {
          unsigned int v36 = __nwlog_obj();
          os_log_type_t v51 = type[0];
          if (os_log_type_enabled(v36, type[0]))
          {
            unsigned int v52 = nw_group_descriptor_get_type(v3[8].isa);
            if (v52 > 4) {
              char v53 = "unknown";
            }
            else {
              char v53 = off_1E523BC90[v52];
            }
            *(_DWORD *)buf = 136446466;
            os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
            __int16 v78 = 2080;
            os_log_type_t v79 = (void *)v53;
            _os_log_impl(&dword_1830D4000, v36, v51, "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_41;
        }
        os_log_type_t v46 = (char *)__nw_create_backtrace_string();
        unsigned int v36 = __nwlog_obj();
        os_log_type_t v47 = type[0];
        BOOL v48 = os_log_type_enabled(v36, type[0]);
        if (!v46)
        {
          if (v48)
          {
            unsigned int v54 = nw_group_descriptor_get_type(v3[8].isa);
            if (v54 > 4) {
              BOOL v55 = "unknown";
            }
            else {
              BOOL v55 = off_1E523BC90[v54];
            }
            *(_DWORD *)buf = 136446466;
            os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
            __int16 v78 = 2080;
            os_log_type_t v79 = (void *)v55;
            _os_log_impl(&dword_1830D4000, v36, v47, "%{public}s Unsupported group descriptor type: %s, no backtrace", buf, 0x16u);
          }
          goto LABEL_41;
        }
        if (v48)
        {
          unsigned int v49 = nw_group_descriptor_get_type(v3[8].isa);
          if (v49 > 4) {
            BOOL v50 = "unknown";
          }
          else {
            BOOL v50 = off_1E523BC90[v49];
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v77 = "nw_connection_group_copy_path_for_message";
          __int16 v78 = 2080;
          os_log_type_t v79 = (void *)v50;
          __int16 v80 = 2082;
          __int16 v81 = v46;
          _os_log_impl(&dword_1830D4000, v36, v47, "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v46);
      }
LABEL_42:
      if (!v35)
      {
LABEL_44:
        int v11 = 0;
        goto LABEL_49;
      }
LABEL_43:
      free(v35);
      goto LABEL_44;
    }
    goto LABEL_25;
  }
LABEL_11:
  int v18 = nw_connection_group_copy_connection_for_message(v3, v5);
  unsigned int v19 = v18;
  if (v18)
  {
    int v11 = nw_connection_copy_current_path(v18);
  }
  else
  {
    int v11 = 0;
  }
LABEL_49:

  return v11;
}

void sub_1836D7600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  _Block_object_dispose(&a20, 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_copy_path_for_message_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 56);
  BOOL v3 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v2, 0, 0);

  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  nw_connection_group_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1836D76F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_get_next_instance_id()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unsigned int add = atomic_fetch_add(&nw_protocol_get_next_instance_id::s_last_instance_id, 1u);
  uint64_t result = add + 1;
  if (add == -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v2 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136446466;
      uint64_t v4 = "nw_protocol_get_next_instance_id";
      __int16 v5 = 1024;
      int v6 = 0;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_ERROR, "%{public}s reached %u instance ids, wrapping", (uint8_t *)&v3, 0x12u);
    }
    return nw_protocol_get_next_instance_id();
  }
  return result;
}

uint64_t nw_protocol_add_input_handler_quiet(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v3 = *(uint64_t (***)(uint64_t, uint64_t))(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = 0;
  if (a2)
  {
    int v6 = *v3;
    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(a1 + 88);
        if (v8) {
          *(void *)(a1 + 88) = v8 + 1;
        }
      }
      if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v9 = *(void *)(a2 + 88);
        if (v9) {
          *(void *)(a2 + 88) = v9 + 1;
        }
        uint64_t v5 = v6(a1, a2);
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v11 = *(void *)(a2 + 88);
          if (v11)
          {
            uint64_t v12 = v11 - 1;
            *(void *)(a2 + 88) = v12;
            if (!v12)
            {
              char v13 = *(void (***)(void))(a2 + 64);
              if (v13)
              {
                *(void *)(a2 + 64) = 0;
                v13[2](v13);
                _Block_release(v13);
              }
              if (*(unsigned char *)(a2 + 72))
              {
                int v14 = *(const void **)(a2 + 64);
                if (v14) {
                  _Block_release(v14);
                }
              }
              free((void *)a2);
            }
          }
        }
      }
      else
      {
        uint64_t v5 = v6(a1, a2);
      }
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v15 = *(void *)(a1 + 88);
        if (v15)
        {
          uint64_t v16 = v15 - 1;
          *(void *)(a1 + 88) = v16;
          if (!v16)
          {
            int v17 = *(void (***)(void))(a1 + 64);
            if (v17)
            {
              *(void *)(a1 + 64) = 0;
              v17[2](v17);
              _Block_release(v17);
            }
            if (*(unsigned char *)(a1 + 72))
            {
              int v18 = *(const void **)(a1 + 64);
              if (v18) {
                _Block_release(v18);
              }
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t nw_protocol_add_input_handler_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = *(void **)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *v2 != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_replace_input_handler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v6 = *(void **)(a1 + 40);
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(a1 + 88);
      if (v7) {
        *(void *)(a1 + 88) = v7 + 1;
      }
    }
    if (a2)
    {
      uint64_t v8 = *(void **)(a2 + 40);
      if (v8 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v9 = *(void *)(a2 + 88);
        if (v9) {
          *(void *)(a2 + 88) = v9 + 1;
        }
      }
      if (a3)
      {
        id v10 = *(void **)(a3 + 40);
        if (v10 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v11 = *(void *)(a3 + 88);
          if (v11) {
            *(void *)(a3 + 88) = v11 + 1;
          }
        }
        uint64_t v12 = *(void *)(a1 + 24);
        if (v12)
        {
          char v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
          if (v13)
          {
            uint64_t v14 = v13(a1, a2, a3);
            if (v10 != &nw_protocol_ref_counted_handle)
            {
LABEL_17:
              if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v20 = *(void *)(a2 + 88);
                if (v20)
                {
                  uint64_t v21 = v20 - 1;
                  *(void *)(a2 + 88) = v21;
                  if (!v21)
                  {
                    unsigned int v22 = *(void (***)(void))(a2 + 64);
                    if (v22)
                    {
                      *(void *)(a2 + 64) = 0;
                      v22[2](v22);
                      _Block_release(v22);
                    }
                    if (*(unsigned char *)(a2 + 72))
                    {
                      uint64_t v23 = *(const void **)(a2 + 64);
                      if (v23) {
                        _Block_release(v23);
                      }
                    }
                    free((void *)a2);
                  }
                }
              }
LABEL_19:
              if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v16 = *(void *)(a1 + 88);
                if (v16)
                {
                  uint64_t v17 = v16 - 1;
                  *(void *)(a1 + 88) = v17;
                  if (!v17)
                  {
                    int v18 = *(void (***)(void))(a1 + 64);
                    if (v18)
                    {
                      *(void *)(a1 + 64) = 0;
                      v18[2](v18);
                      _Block_release(v18);
                    }
                    if (*(unsigned char *)(a1 + 72))
                    {
                      unsigned int v19 = *(const void **)(a1 + 64);
                      if (v19) {
                        _Block_release(v19);
                      }
                    }
                    free((void *)a1);
                  }
                }
              }
              return v14;
            }
LABEL_16:
            if (*(_UNKNOWN **)(a3 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v24 = *(void *)(a3 + 88);
              if (v24)
              {
                uint64_t v25 = v24 - 1;
                *(void *)(a3 + 88) = v25;
                if (!v25)
                {
                  os_log_type_t v26 = *(void (***)(void))(a3 + 64);
                  if (v26)
                  {
                    *(void *)(a3 + 64) = 0;
                    v26[2](v26);
                    _Block_release(v26);
                  }
                  if (*(unsigned char *)(a3 + 72))
                  {
                    BOOL v27 = *(const void **)(a3 + 64);
                    if (v27) {
                      _Block_release(v27);
                    }
                  }
                  free((void *)a3);
                }
              }
            }
            goto LABEL_17;
          }
        }
        __nwlog_obj();
        os_log_type_t v28 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        BOOL v63 = "__nw_protocol_replace_input_handler";
        if (!v28) {
          os_log_type_t v28 = "invalid";
        }
        __int16 v64 = 2082;
        os_log_type_t v65 = (void *)v28;
        __int16 v66 = 2048;
        uint64_t v67 = a1;
        os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v60 = 0;
        if (__nwlog_fault(v29, &type, &v60))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v30 = __nwlog_obj();
            os_log_type_t v31 = type;
            if (!os_log_type_enabled(v30, type)) {
              goto LABEL_94;
            }
            unsigned int v32 = *(const char **)(a1 + 16);
            if (!v32) {
              unsigned int v32 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            BOOL v63 = "__nw_protocol_replace_input_handler";
            __int16 v64 = 2082;
            os_log_type_t v65 = (void *)v32;
            __int16 v66 = 2048;
            uint64_t v67 = a1;
            os_log_type_t v33 = "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback";
LABEL_92:
            os_log_type_t v57 = v30;
LABEL_93:
            _os_log_impl(&dword_1830D4000, v57, v31, v33, buf, 0x20u);
            goto LABEL_94;
          }
          if (!v60)
          {
            os_log_type_t v30 = __nwlog_obj();
            os_log_type_t v31 = type;
            if (!os_log_type_enabled(v30, type)) {
              goto LABEL_94;
            }
            os_log_type_t v56 = *(const char **)(a1 + 16);
            if (!v56) {
              os_log_type_t v56 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            BOOL v63 = "__nw_protocol_replace_input_handler";
            __int16 v64 = 2082;
            os_log_type_t v65 = (void *)v56;
            __int16 v66 = 2048;
            uint64_t v67 = a1;
            os_log_type_t v33 = "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, backtrace limit exceeded";
            goto LABEL_92;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v47 = __nwlog_obj();
          os_log_type_t v31 = type;
          log = v47;
          BOOL v48 = os_log_type_enabled(v47, type);
          if (backtrace_string)
          {
            if (v48)
            {
              unsigned int v49 = *(const char **)(a1 + 16);
              if (!v49) {
                unsigned int v49 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              BOOL v63 = "__nw_protocol_replace_input_handler";
              __int16 v64 = 2082;
              os_log_type_t v65 = (void *)v49;
              __int16 v66 = 2048;
              uint64_t v67 = a1;
              __int16 v68 = 2082;
              uint64_t v69 = backtrace_string;
              _os_log_impl(&dword_1830D4000, log, v31, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }
            free(backtrace_string);
          }
          else if (v48)
          {
            os_log_type_t v58 = *(const char **)(a1 + 16);
            if (!v58) {
              os_log_type_t v58 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            BOOL v63 = "__nw_protocol_replace_input_handler";
            __int16 v64 = 2082;
            os_log_type_t v65 = (void *)v58;
            __int16 v66 = 2048;
            uint64_t v67 = a1;
            os_log_type_t v33 = "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, no backtrace";
            os_log_type_t v57 = log;
            goto LABEL_93;
          }
        }
LABEL_94:
        if (v29) {
          free(v29);
        }
        uint64_t v14 = 0;
        if (v10 != &nw_protocol_ref_counted_handle) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      BOOL v63 = "__nw_protocol_replace_input_handler";
      unsigned int v42 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v60 = 0;
      if (__nwlog_fault(v42, &type, &v60))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v43 = __nwlog_obj();
          os_log_type_t v44 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v63 = "__nw_protocol_replace_input_handler";
            os_log_type_t v45 = "%{public}s called with null new_input_protocol";
LABEL_122:
            _os_log_impl(&dword_1830D4000, v43, v44, v45, buf, 0xCu);
          }
        }
        else if (v60)
        {
          unsigned int v54 = (char *)__nw_create_backtrace_string();
          os_log_type_t v43 = __nwlog_obj();
          os_log_type_t v44 = type;
          BOOL v55 = os_log_type_enabled(v43, type);
          if (v54)
          {
            if (v55)
            {
              *(_DWORD *)buf = 136446466;
              BOOL v63 = "__nw_protocol_replace_input_handler";
              __int16 v64 = 2082;
              os_log_type_t v65 = v54;
              _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v54);
            goto LABEL_123;
          }
          if (v55)
          {
            *(_DWORD *)buf = 136446210;
            BOOL v63 = "__nw_protocol_replace_input_handler";
            os_log_type_t v45 = "%{public}s called with null new_input_protocol, no backtrace";
            goto LABEL_122;
          }
        }
        else
        {
          os_log_type_t v43 = __nwlog_obj();
          os_log_type_t v44 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v63 = "__nw_protocol_replace_input_handler";
            os_log_type_t v45 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
            goto LABEL_122;
          }
        }
      }
LABEL_123:
      if (v42) {
        free(v42);
      }
      uint64_t v14 = 0;
      goto LABEL_17;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v63 = "__nw_protocol_replace_input_handler";
    os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (__nwlog_fault(v38, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v39 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v63 = "__nw_protocol_replace_input_handler";
          os_log_type_t v41 = "%{public}s called with null old_input_protocol";
LABEL_116:
          _os_log_impl(&dword_1830D4000, v39, v40, v41, buf, 0xCu);
        }
      }
      else if (v60)
      {
        unsigned int v52 = (char *)__nw_create_backtrace_string();
        os_log_type_t v39 = __nwlog_obj();
        os_log_type_t v40 = type;
        BOOL v53 = os_log_type_enabled(v39, type);
        if (v52)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v63 = "__nw_protocol_replace_input_handler";
            __int16 v64 = 2082;
            os_log_type_t v65 = v52;
            _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v52);
          goto LABEL_117;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v63 = "__nw_protocol_replace_input_handler";
          os_log_type_t v41 = "%{public}s called with null old_input_protocol, no backtrace";
          goto LABEL_116;
        }
      }
      else
      {
        os_log_type_t v39 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v63 = "__nw_protocol_replace_input_handler";
          os_log_type_t v41 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
          goto LABEL_116;
        }
      }
    }
LABEL_117:
    if (v38) {
      free(v38);
    }
    uint64_t v14 = 0;
    goto LABEL_19;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v63 = "__nw_protocol_replace_input_handler";
  id v34 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v60 = 0;
  if (__nwlog_fault(v34, &type, &v60))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v35 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v63 = "__nw_protocol_replace_input_handler";
        os_log_type_t v37 = "%{public}s called with null protocol";
LABEL_110:
        _os_log_impl(&dword_1830D4000, v35, v36, v37, buf, 0xCu);
      }
    }
    else if (v60)
    {
      BOOL v50 = (char *)__nw_create_backtrace_string();
      BOOL v35 = __nwlog_obj();
      os_log_type_t v36 = type;
      BOOL v51 = os_log_type_enabled(v35, type);
      if (v50)
      {
        if (v51)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v63 = "__nw_protocol_replace_input_handler";
          __int16 v64 = 2082;
          os_log_type_t v65 = v50;
          _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v50);
        goto LABEL_111;
      }
      if (v51)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v63 = "__nw_protocol_replace_input_handler";
        os_log_type_t v37 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_110;
      }
    }
    else
    {
      BOOL v35 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v63 = "__nw_protocol_replace_input_handler";
        os_log_type_t v37 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_110;
      }
    }
  }
LABEL_111:
  if (v34) {
    free(v34);
  }
  return 0;
}

uint64_t nw_protocol_replace_input_handler_quiet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = 0;
  if (a3)
  {
    if (a2)
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      if (v8)
      {
        uint64_t v9 = *(void **)(a1 + 40);
        if (v9 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v10 = *(void *)(a1 + 88);
          if (v10) {
            *(void *)(a1 + 88) = v10 + 1;
          }
        }
        uint64_t v11 = *(void **)(a2 + 40);
        if (v11 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v12 = *(void *)(a2 + 88);
          if (v12) {
            *(void *)(a2 + 88) = v12 + 1;
          }
        }
        if (*(_UNKNOWN **)(a3 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v13 = *(void *)(a3 + 88);
          if (v13) {
            *(void *)(a3 + 88) = v13 + 1;
          }
          uint64_t v6 = v8(a1, a2, a3);
          if (*(_UNKNOWN **)(a3 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v15 = *(void *)(a3 + 88);
            if (v15)
            {
              uint64_t v16 = v15 - 1;
              *(void *)(a3 + 88) = v16;
              if (!v16)
              {
                uint64_t v17 = *(void (***)(void))(a3 + 64);
                if (v17)
                {
                  *(void *)(a3 + 64) = 0;
                  v17[2](v17);
                  _Block_release(v17);
                }
                if (*(unsigned char *)(a3 + 72))
                {
                  int v18 = *(const void **)(a3 + 64);
                  if (v18) {
                    _Block_release(v18);
                  }
                }
                free((void *)a3);
              }
            }
          }
        }
        else
        {
          uint64_t v6 = v8(a1, a2, a3);
        }
        if (v11 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v19 = *(void *)(a2 + 88);
          if (v19)
          {
            uint64_t v20 = v19 - 1;
            *(void *)(a2 + 88) = v20;
            if (!v20)
            {
              uint64_t v21 = *(void (***)(void))(a2 + 64);
              if (v21)
              {
                *(void *)(a2 + 64) = 0;
                v21[2](v21);
                _Block_release(v21);
              }
              if (*(unsigned char *)(a2 + 72))
              {
                unsigned int v22 = *(const void **)(a2 + 64);
                if (v22) {
                  _Block_release(v22);
                }
              }
              free((void *)a2);
            }
          }
        }
        if (v9 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v23 = *(void *)(a1 + 88);
          if (v23)
          {
            uint64_t v24 = v23 - 1;
            *(void *)(a1 + 88) = v24;
            if (!v24)
            {
              uint64_t v25 = *(void (***)(void))(a1 + 64);
              if (v25)
              {
                *(void *)(a1 + 64) = 0;
                v25[2](v25);
                _Block_release(v25);
              }
              if (*(unsigned char *)(a1 + 72))
              {
                os_log_type_t v26 = *(const void **)(a1 + 64);
                if (v26) {
                  _Block_release(v26);
                }
              }
              free((void *)a1);
            }
          }
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_replace_input_handler_is_valid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3) {
      LODWORD(v3) = *(void *)(v3 + 16) != 0;
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (!a2) {
    LODWORD(v3) = 0;
  }
  if (a3) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_remove_input_handler_quiet(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = 0;
  if (a2)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(a1 + 88);
        if (v8) {
          *(void *)(a1 + 88) = v8 + 1;
        }
      }
      if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v9 = *(void *)(a2 + 88);
        if (v9) {
          *(void *)(a2 + 88) = v9 + 1;
        }
        uint64_t v5 = v6(a1, a2);
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v11 = *(void *)(a2 + 88);
          if (v11)
          {
            uint64_t v12 = v11 - 1;
            *(void *)(a2 + 88) = v12;
            if (!v12)
            {
              uint64_t v13 = *(void (***)(void))(a2 + 64);
              if (v13)
              {
                *(void *)(a2 + 64) = 0;
                v13[2](v13);
                _Block_release(v13);
              }
              if (*(unsigned char *)(a2 + 72))
              {
                uint64_t v14 = *(const void **)(a2 + 64);
                if (v14) {
                  _Block_release(v14);
                }
              }
              free((void *)a2);
            }
          }
        }
      }
      else
      {
        uint64_t v5 = v6(a1, a2);
      }
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v15 = *(void *)(a1 + 88);
        if (v15)
        {
          uint64_t v16 = v15 - 1;
          *(void *)(a1 + 88) = v16;
          if (!v16)
          {
            uint64_t v17 = *(void (***)(void))(a1 + 64);
            if (v17)
            {
              *(void *)(a1 + 64) = 0;
              v17[2](v17);
              _Block_release(v17);
            }
            if (*(unsigned char *)(a1 + 72))
            {
              int v18 = *(const void **)(a1 + 64);
              if (v18) {
                _Block_release(v18);
              }
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t nw_protocol_add_listen_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v4 = *(void *)(a1 + 88);
      if (v4) {
        *(void *)(a1 + 88) = v4 + 1;
      }
    }
    if (a2)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      if (v5)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 232);
        if (v6)
        {
          uint64_t v7 = v6(a1);
          if (v3 != &nw_protocol_ref_counted_handle) {
            return v7;
          }
          goto LABEL_9;
        }
      }
      __nwlog_obj();
      uint64_t v13 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      os_log_type_t v40 = "__nw_protocol_add_listen_handler";
      if (!v13) {
        uint64_t v13 = "invalid";
      }
      __int16 v41 = 2082;
      unsigned int v42 = (void *)v13;
      __int16 v43 = 2048;
      uint64_t v44 = a1;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v37 = 0;
      if (__nwlog_fault(v14, &type, &v37))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          if (!os_log_type_enabled(v15, type)) {
            goto LABEL_76;
          }
          uint64_t v17 = *(const char **)(a1 + 16);
          if (!v17) {
            uint64_t v17 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "__nw_protocol_add_listen_handler";
          __int16 v41 = 2082;
          unsigned int v42 = (void *)v17;
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          int v18 = "%{public}s protocol %{public}s (%p) has invalid add_listen_handler callback";
LABEL_61:
          id v34 = v15;
          os_log_type_t v35 = v16;
          uint32_t v36 = 32;
LABEL_75:
          _os_log_impl(&dword_1830D4000, v34, v35, v18, buf, v36);
          goto LABEL_76;
        }
        if (!v37)
        {
          uint64_t v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          if (!os_log_type_enabled(v15, type)) {
            goto LABEL_76;
          }
          unsigned int v32 = *(const char **)(a1 + 16);
          if (!v32) {
            unsigned int v32 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "__nw_protocol_add_listen_handler";
          __int16 v41 = 2082;
          unsigned int v42 = (void *)v32;
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          int v18 = "%{public}s protocol %{public}s (%p) has invalid add_listen_handler callback, backtrace limit exceeded";
          goto LABEL_61;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v26 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (!v26) {
            goto LABEL_76;
          }
          os_log_type_t v33 = *(const char **)(a1 + 16);
          if (!v33) {
            os_log_type_t v33 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "__nw_protocol_add_listen_handler";
          __int16 v41 = 2082;
          unsigned int v42 = (void *)v33;
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          int v18 = "%{public}s protocol %{public}s (%p) has invalid add_listen_handler callback, no backtrace";
          goto LABEL_61;
        }
        if (v26)
        {
          BOOL v27 = *(const char **)(a1 + 16);
          if (!v27) {
            BOOL v27 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          os_log_type_t v40 = "__nw_protocol_add_listen_handler";
          __int16 v41 = 2082;
          unsigned int v42 = (void *)v27;
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          __int16 v45 = 2082;
          os_log_type_t v46 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s protocol %{public}s (%p) has invalid add_listen_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_76:
      if (!v14) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "__nw_protocol_add_listen_handler";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v14, &type, &v37)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "__nw_protocol_add_listen_handler";
      int v18 = "%{public}s called with null listen_protocol";
    }
    else if (v37)
    {
      os_log_type_t v30 = (char *)__nw_create_backtrace_string();
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "__nw_protocol_add_listen_handler";
          __int16 v41 = 2082;
          unsigned int v42 = v30;
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null listen_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v30);
        if (!v14)
        {
LABEL_78:
          uint64_t v7 = 0;
          if (v3 != &nw_protocol_ref_counted_handle) {
            return v7;
          }
LABEL_9:
          if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v9 = *(void *)(a1 + 88);
            if (v9)
            {
              uint64_t v10 = v9 - 1;
              *(void *)(a1 + 88) = v10;
              if (!v10)
              {
                uint64_t v11 = *(void (***)(void))(a1 + 64);
                if (v11)
                {
                  *(void *)(a1 + 64) = 0;
                  v11[2](v11);
                  _Block_release(v11);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  uint64_t v12 = *(const void **)(a1 + 64);
                  if (v12) {
                    _Block_release(v12);
                  }
                }
                free((void *)a1);
              }
            }
          }
          return v7;
        }
LABEL_77:
        free(v14);
        goto LABEL_78;
      }
      if (!v31) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "__nw_protocol_add_listen_handler";
      int v18 = "%{public}s called with null listen_protocol, no backtrace";
    }
    else
    {
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "__nw_protocol_add_listen_handler";
      int v18 = "%{public}s called with null listen_protocol, backtrace limit exceeded";
    }
    id v34 = v23;
    os_log_type_t v35 = v24;
    uint32_t v36 = 12;
    goto LABEL_75;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v40 = "__nw_protocol_add_listen_handler";
  uint64_t v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (__nwlog_fault(v19, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "__nw_protocol_add_listen_handler";
        unsigned int v22 = "%{public}s called with null protocol";
LABEL_68:
        _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0xCu);
      }
    }
    else if (v37)
    {
      os_log_type_t v28 = (char *)__nw_create_backtrace_string();
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v29 = os_log_type_enabled(v20, type);
      if (v28)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "__nw_protocol_add_listen_handler";
          __int16 v41 = 2082;
          unsigned int v42 = v28;
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v28);
        goto LABEL_69;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "__nw_protocol_add_listen_handler";
        unsigned int v22 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "__nw_protocol_add_listen_handler";
        unsigned int v22 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_68;
      }
    }
  }
LABEL_69:
  if (v19) {
    free(v19);
  }
  return 0;
}

uint64_t nw_protocol_add_listen_handler_quiet(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  if (!a2) {
    return v4;
  }
  uint64_t v5 = *(uint64_t (**)(void))(v3 + 232);
  if (!v5) {
    return v4;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v7 = *(void *)(a1 + 88);
    if (v7) {
      *(void *)(a1 + 88) = v7 + 1;
    }
    uint64_t v4 = ((uint64_t (*)(uint64_t))v5)(a1);
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        uint64_t v9 = v8 - 1;
        *(void *)(a1 + 88) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }
          free((void *)a1);
        }
      }
    }
    return v4;
  }

  return v5();
}

uint64_t nw_protocol_add_listen_handler_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 232) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_remove_listen_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v4 = *(void *)(a1 + 88);
      if (v4) {
        *(void *)(a1 + 88) = v4 + 1;
      }
    }
    if (a2)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      if (v5)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 240);
        if (v6)
        {
          uint64_t v7 = v6(a1);
          if (v3 != &nw_protocol_ref_counted_handle) {
            return v7;
          }
          goto LABEL_9;
        }
      }
      __nwlog_obj();
      uint64_t v13 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
      if (!v13) {
        uint64_t v13 = "invalid";
      }
      __int16 v41 = 2082;
      unsigned int v42 = (void *)v13;
      __int16 v43 = 2048;
      uint64_t v44 = a1;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v37 = 0;
      if (__nwlog_fault(v14, &type, &v37))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          if (!os_log_type_enabled(v15, type)) {
            goto LABEL_76;
          }
          uint64_t v17 = *(const char **)(a1 + 16);
          if (!v17) {
            uint64_t v17 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
          __int16 v41 = 2082;
          unsigned int v42 = (void *)v17;
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          int v18 = "%{public}s protocol %{public}s (%p) has invalid remove_listen_handler callback";
LABEL_61:
          id v34 = v15;
          os_log_type_t v35 = v16;
          uint32_t v36 = 32;
LABEL_75:
          _os_log_impl(&dword_1830D4000, v34, v35, v18, buf, v36);
          goto LABEL_76;
        }
        if (!v37)
        {
          uint64_t v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          if (!os_log_type_enabled(v15, type)) {
            goto LABEL_76;
          }
          unsigned int v32 = *(const char **)(a1 + 16);
          if (!v32) {
            unsigned int v32 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
          __int16 v41 = 2082;
          unsigned int v42 = (void *)v32;
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          int v18 = "%{public}s protocol %{public}s (%p) has invalid remove_listen_handler callback, backtrace limit exceeded";
          goto LABEL_61;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v26 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (!v26) {
            goto LABEL_76;
          }
          os_log_type_t v33 = *(const char **)(a1 + 16);
          if (!v33) {
            os_log_type_t v33 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
          __int16 v41 = 2082;
          unsigned int v42 = (void *)v33;
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          int v18 = "%{public}s protocol %{public}s (%p) has invalid remove_listen_handler callback, no backtrace";
          goto LABEL_61;
        }
        if (v26)
        {
          BOOL v27 = *(const char **)(a1 + 16);
          if (!v27) {
            BOOL v27 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
          __int16 v41 = 2082;
          unsigned int v42 = (void *)v27;
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          __int16 v45 = 2082;
          os_log_type_t v46 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s protocol %{public}s (%p) has invalid remove_listen_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_76:
      if (!v14) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v14, &type, &v37)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
      int v18 = "%{public}s called with null listen_protocol";
    }
    else if (v37)
    {
      os_log_type_t v30 = (char *)__nw_create_backtrace_string();
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
          __int16 v41 = 2082;
          unsigned int v42 = v30;
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null listen_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v30);
        if (!v14)
        {
LABEL_78:
          uint64_t v7 = 0;
          if (v3 != &nw_protocol_ref_counted_handle) {
            return v7;
          }
LABEL_9:
          if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v9 = *(void *)(a1 + 88);
            if (v9)
            {
              uint64_t v10 = v9 - 1;
              *(void *)(a1 + 88) = v10;
              if (!v10)
              {
                uint64_t v11 = *(void (***)(void))(a1 + 64);
                if (v11)
                {
                  *(void *)(a1 + 64) = 0;
                  v11[2](v11);
                  _Block_release(v11);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  uint64_t v12 = *(const void **)(a1 + 64);
                  if (v12) {
                    _Block_release(v12);
                  }
                }
                free((void *)a1);
              }
            }
          }
          return v7;
        }
LABEL_77:
        free(v14);
        goto LABEL_78;
      }
      if (!v31) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
      int v18 = "%{public}s called with null listen_protocol, no backtrace";
    }
    else
    {
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
      int v18 = "%{public}s called with null listen_protocol, backtrace limit exceeded";
    }
    id v34 = v23;
    os_log_type_t v35 = v24;
    uint32_t v36 = 12;
    goto LABEL_75;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
  uint64_t v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (__nwlog_fault(v19, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
        unsigned int v22 = "%{public}s called with null protocol";
LABEL_68:
        _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0xCu);
      }
    }
    else if (v37)
    {
      os_log_type_t v28 = (char *)__nw_create_backtrace_string();
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v29 = os_log_type_enabled(v20, type);
      if (v28)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
          __int16 v41 = 2082;
          unsigned int v42 = v28;
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v28);
        goto LABEL_69;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
        unsigned int v22 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "__nw_protocol_remove_listen_handler";
        unsigned int v22 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_68;
      }
    }
  }
LABEL_69:
  if (v19) {
    free(v19);
  }
  return 0;
}

uint64_t nw_protocol_remove_listen_handler_quiet(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  if (!a2) {
    return v4;
  }
  uint64_t v5 = *(uint64_t (**)(void))(v3 + 240);
  if (!v5) {
    return v4;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v7 = *(void *)(a1 + 88);
    if (v7) {
      *(void *)(a1 + 88) = v7 + 1;
    }
    uint64_t v4 = ((uint64_t (*)(uint64_t))v5)(a1);
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        uint64_t v9 = v8 - 1;
        *(void *)(a1 + 88) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }
          free((void *)a1);
        }
      }
    }
    return v4;
  }

  return v5();
}

uint64_t nw_protocol_remove_listen_handler_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 240) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_get_input_frames_quiet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = 0;
  if (a6)
  {
    if (a2)
    {
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 80);
      if (v10)
      {
        uint64_t v11 = *(void **)(a1 + 40);
        if (v11 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v12 = *(void *)(a1 + 88);
          if (v12) {
            *(void *)(a1 + 88) = v12 + 1;
          }
        }
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v13 = *(void *)(a2 + 88);
          if (v13) {
            *(void *)(a2 + 88) = v13 + 1;
          }
          uint64_t v8 = v10(a1, a2);
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v15 = *(void *)(a2 + 88);
            if (v15)
            {
              uint64_t v16 = v15 - 1;
              *(void *)(a2 + 88) = v16;
              if (!v16)
              {
                uint64_t v17 = *(void (***)(void))(a2 + 64);
                if (v17)
                {
                  *(void *)(a2 + 64) = 0;
                  v17[2](v17);
                  _Block_release(v17);
                }
                if (*(unsigned char *)(a2 + 72))
                {
                  int v18 = *(const void **)(a2 + 64);
                  if (v18) {
                    _Block_release(v18);
                  }
                }
                free((void *)a2);
              }
            }
          }
        }
        else
        {
          uint64_t v8 = v10(a1, a2);
        }
        if (v11 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v19 = *(void *)(a1 + 88);
          if (v19)
          {
            uint64_t v20 = v19 - 1;
            *(void *)(a1 + 88) = v20;
            if (!v20)
            {
              os_log_type_t v21 = *(void (***)(void))(a1 + 64);
              if (v21)
              {
                *(void *)(a1 + 64) = 0;
                v21[2](v21);
                _Block_release(v21);
              }
              if (*(unsigned char *)(a1 + 72))
              {
                unsigned int v22 = *(const void **)(a1 + 64);
                if (v22) {
                  _Block_release(v22);
                }
              }
              free((void *)a1);
            }
          }
        }
      }
    }
  }
  return v8;
}

uint64_t nw_protocol_get_input_frames_is_valid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3) {
      LODWORD(v3) = *(void *)(v3 + 80) != 0;
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (!a2) {
    LODWORD(v3) = 0;
  }
  if (a3) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_get_output_frames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v8 = *(void **)(a1 + 40);
    if (v8 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v9 = *(void *)(a1 + 88);
      if (v9) {
        *(void *)(a1 + 88) = v9 + 1;
      }
    }
    if (a2)
    {
      uint64_t v10 = *(void **)(a2 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v11 = *(void *)(a2 + 88);
        if (v11) {
          *(void *)(a2 + 88) = v11 + 1;
        }
      }
      if (a6)
      {
        uint64_t v12 = *(void *)(a1 + 24);
        if (v12)
        {
          uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 88);
          if (v13)
          {
            uint64_t v14 = v13(a1, a2);
            if (v10 == &nw_protocol_ref_counted_handle)
            {
LABEL_13:
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v20 = *(void *)(a2 + 88);
                if (v20)
                {
                  uint64_t v21 = v20 - 1;
                  *(void *)(a2 + 88) = v21;
                  if (!v21)
                  {
                    unsigned int v22 = *(void (***)(void))(a2 + 64);
                    if (v22)
                    {
                      *(void *)(a2 + 64) = 0;
                      v22[2](v22);
                      _Block_release(v22);
                    }
                    if (*(unsigned char *)(a2 + 72))
                    {
                      uint64_t v23 = *(const void **)(a2 + 64);
                      if (v23) {
                        _Block_release(v23);
                      }
                    }
                    free((void *)a2);
                  }
                }
              }
            }
LABEL_14:
            if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v16 = *(void *)(a1 + 88);
              if (v16)
              {
                uint64_t v17 = v16 - 1;
                *(void *)(a1 + 88) = v17;
                if (!v17)
                {
                  int v18 = *(void (***)(void))(a1 + 64);
                  if (v18)
                  {
                    *(void *)(a1 + 64) = 0;
                    v18[2](v18);
                    _Block_release(v18);
                  }
                  if (*(unsigned char *)(a1 + 72))
                  {
                    uint64_t v19 = *(const void **)(a1 + 64);
                    if (v19) {
                      _Block_release(v19);
                    }
                  }
                  free((void *)a1);
                }
              }
            }
            return v14;
          }
        }
        __nwlog_obj();
        os_log_type_t v24 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v57 = "__nw_protocol_get_output_frames";
        if (!v24) {
          os_log_type_t v24 = "invalid";
        }
        __int16 v58 = 2082;
        os_log_type_t v59 = (void *)v24;
        __int16 v60 = 2048;
        uint64_t v61 = a1;
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v54 = 0;
        if (__nwlog_fault(v25, &type, &v54))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            BOOL v26 = __nwlog_obj();
            os_log_type_t v27 = type;
            if (!os_log_type_enabled(v26, type)) {
              goto LABEL_107;
            }
            os_log_type_t v28 = *(const char **)(a1 + 16);
            if (!v28) {
              os_log_type_t v28 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v57 = "__nw_protocol_get_output_frames";
            __int16 v58 = 2082;
            os_log_type_t v59 = (void *)v28;
            __int16 v60 = 2048;
            uint64_t v61 = a1;
            BOOL v29 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_84:
            BOOL v51 = v26;
            os_log_type_t v52 = v27;
            uint32_t v53 = 32;
LABEL_106:
            _os_log_impl(&dword_1830D4000, v51, v52, v29, buf, v53);
            goto LABEL_107;
          }
          if (!v54)
          {
            BOOL v26 = __nwlog_obj();
            os_log_type_t v27 = type;
            if (!os_log_type_enabled(v26, type)) {
              goto LABEL_107;
            }
            unsigned int v49 = *(const char **)(a1 + 16);
            if (!v49) {
              unsigned int v49 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v57 = "__nw_protocol_get_output_frames";
            __int16 v58 = 2082;
            os_log_type_t v59 = (void *)v49;
            __int16 v60 = 2048;
            uint64_t v61 = a1;
            BOOL v29 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
            goto LABEL_84;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          BOOL v26 = __nwlog_obj();
          os_log_type_t v27 = type;
          BOOL v41 = os_log_type_enabled(v26, type);
          if (!backtrace_string)
          {
            if (!v41) {
              goto LABEL_107;
            }
            BOOL v50 = *(const char **)(a1 + 16);
            if (!v50) {
              BOOL v50 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v57 = "__nw_protocol_get_output_frames";
            __int16 v58 = 2082;
            os_log_type_t v59 = (void *)v50;
            __int16 v60 = 2048;
            uint64_t v61 = a1;
            BOOL v29 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
            goto LABEL_84;
          }
          if (v41)
          {
            unsigned int v42 = *(const char **)(a1 + 16);
            if (!v42) {
              unsigned int v42 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            os_log_type_t v57 = "__nw_protocol_get_output_frames";
            __int16 v58 = 2082;
            os_log_type_t v59 = (void *)v42;
            __int16 v60 = 2048;
            uint64_t v61 = a1;
            __int16 v62 = 2082;
            BOOL v63 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
        }
LABEL_107:
        if (!v25) {
          goto LABEL_109;
        }
        goto LABEL_108;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v57 = "__nw_protocol_get_output_frames";
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v54 = 0;
      if (!__nwlog_fault(v25, &type, &v54)) {
        goto LABEL_107;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v38 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (!os_log_type_enabled(v38, type)) {
          goto LABEL_107;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v57 = "__nw_protocol_get_output_frames";
        BOOL v29 = "%{public}s called with null return_array";
      }
      else if (v54)
      {
        uint64_t v47 = (char *)__nw_create_backtrace_string();
        os_log_type_t v38 = __nwlog_obj();
        os_log_type_t v39 = type;
        BOOL v48 = os_log_type_enabled(v38, type);
        if (v47)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v57 = "__nw_protocol_get_output_frames";
            __int16 v58 = 2082;
            os_log_type_t v59 = v47;
            _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null return_array, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v47);
          if (!v25)
          {
LABEL_109:
            uint64_t v14 = 0;
            if (v10 == &nw_protocol_ref_counted_handle) {
              goto LABEL_13;
            }
            goto LABEL_14;
          }
LABEL_108:
          free(v25);
          goto LABEL_109;
        }
        if (!v48) {
          goto LABEL_107;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v57 = "__nw_protocol_get_output_frames";
        BOOL v29 = "%{public}s called with null return_array, no backtrace";
      }
      else
      {
        os_log_type_t v38 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (!os_log_type_enabled(v38, type)) {
          goto LABEL_107;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v57 = "__nw_protocol_get_output_frames";
        BOOL v29 = "%{public}s called with null return_array, backtrace limit exceeded";
      }
      BOOL v51 = v38;
      os_log_type_t v52 = v39;
      uint32_t v53 = 12;
      goto LABEL_106;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v57 = "__nw_protocol_get_output_frames";
    id v34 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v34, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v35 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v57 = "__nw_protocol_get_output_frames";
          char v37 = "%{public}s called with null input_protocol";
LABEL_99:
          _os_log_impl(&dword_1830D4000, v35, v36, v37, buf, 0xCu);
        }
      }
      else if (v54)
      {
        __int16 v45 = (char *)__nw_create_backtrace_string();
        os_log_type_t v35 = __nwlog_obj();
        os_log_type_t v36 = type;
        BOOL v46 = os_log_type_enabled(v35, type);
        if (v45)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v57 = "__nw_protocol_get_output_frames";
            __int16 v58 = 2082;
            os_log_type_t v59 = v45;
            _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v45);
          goto LABEL_100;
        }
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v57 = "__nw_protocol_get_output_frames";
          char v37 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_99;
        }
      }
      else
      {
        os_log_type_t v35 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v57 = "__nw_protocol_get_output_frames";
          char v37 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_99;
        }
      }
    }
LABEL_100:
    if (v34) {
      free(v34);
    }
    uint64_t v14 = 0;
    goto LABEL_14;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v57 = "__nw_protocol_get_output_frames";
  os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v54 = 0;
  if (__nwlog_fault(v30, &type, &v54))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v31 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v57 = "__nw_protocol_get_output_frames";
        os_log_type_t v33 = "%{public}s called with null protocol";
LABEL_93:
        _os_log_impl(&dword_1830D4000, v31, v32, v33, buf, 0xCu);
      }
    }
    else if (v54)
    {
      __int16 v43 = (char *)__nw_create_backtrace_string();
      BOOL v31 = __nwlog_obj();
      os_log_type_t v32 = type;
      BOOL v44 = os_log_type_enabled(v31, type);
      if (v43)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v57 = "__nw_protocol_get_output_frames";
          __int16 v58 = 2082;
          os_log_type_t v59 = v43;
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v43);
        goto LABEL_94;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v57 = "__nw_protocol_get_output_frames";
        os_log_type_t v33 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }
    }
    else
    {
      BOOL v31 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v57 = "__nw_protocol_get_output_frames";
        os_log_type_t v33 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
    }
  }
LABEL_94:
  if (v30) {
    free(v30);
  }
  return 0;
}

uint64_t nw_protocol_get_output_frames_quiet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = 0;
  if (a6)
  {
    if (a2)
    {
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 88);
      if (v10)
      {
        uint64_t v11 = *(void **)(a1 + 40);
        if (v11 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v12 = *(void *)(a1 + 88);
          if (v12) {
            *(void *)(a1 + 88) = v12 + 1;
          }
        }
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v13 = *(void *)(a2 + 88);
          if (v13) {
            *(void *)(a2 + 88) = v13 + 1;
          }
          uint64_t v8 = v10(a1, a2);
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v15 = *(void *)(a2 + 88);
            if (v15)
            {
              uint64_t v16 = v15 - 1;
              *(void *)(a2 + 88) = v16;
              if (!v16)
              {
                uint64_t v17 = *(void (***)(void))(a2 + 64);
                if (v17)
                {
                  *(void *)(a2 + 64) = 0;
                  v17[2](v17);
                  _Block_release(v17);
                }
                if (*(unsigned char *)(a2 + 72))
                {
                  int v18 = *(const void **)(a2 + 64);
                  if (v18) {
                    _Block_release(v18);
                  }
                }
                free((void *)a2);
              }
            }
          }
        }
        else
        {
          uint64_t v8 = v10(a1, a2);
        }
        if (v11 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v19 = *(void *)(a1 + 88);
          if (v19)
          {
            uint64_t v20 = v19 - 1;
            *(void *)(a1 + 88) = v20;
            if (!v20)
            {
              uint64_t v21 = *(void (***)(void))(a1 + 64);
              if (v21)
              {
                *(void *)(a1 + 64) = 0;
                v21[2](v21);
                _Block_release(v21);
              }
              if (*(unsigned char *)(a1 + 72))
              {
                unsigned int v22 = *(const void **)(a1 + 64);
                if (v22) {
                  _Block_release(v22);
                }
              }
              free((void *)a1);
            }
          }
        }
      }
    }
  }
  return v8;
}

uint64_t nw_protocol_get_output_frames_is_valid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3) {
      LODWORD(v3) = *(void *)(v3 + 88) != 0;
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (!a2) {
    LODWORD(v3) = 0;
  }
  if (a3) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_finalize_output_frames_quiet(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  if (!a2) {
    return v4;
  }
  uint64_t v5 = *(uint64_t (**)(void))(v3 + 96);
  if (!v5) {
    return v4;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v7 = *(void *)(a1 + 88);
    if (v7) {
      *(void *)(a1 + 88) = v7 + 1;
    }
    uint64_t v4 = ((uint64_t (*)(uint64_t))v5)(a1);
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        uint64_t v9 = v8 - 1;
        *(void *)(a1 + 88) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }
          free((void *)a1);
        }
      }
    }
    return v4;
  }

  return v5();
}

uint64_t nw_protocol_finalize_output_frames_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 96) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_get_parameters_quiet(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 112);
  if (!v3) {
    return 0;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5) {
      *(void *)(a1 + 88) = v5 + 1;
    }
    uint64_t v6 = ((uint64_t (*)(uint64_t))v3)(a1);
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(a1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(a1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(a1 + 64);
          if (v9)
          {
            *(void *)(a1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v10 = *(const void **)(a1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)a1);
        }
      }
    }
    return v6;
  }

  return v3();
}

BOOL nw_protocol_get_parameters_is_valid(BOOL result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    return v1 && *(void *)(v1 + 112) != 0;
  }
  return result;
}

uint64_t nw_protocol_get_path_quiet(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 120);
  if (!v3) {
    return 0;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5) {
      *(void *)(a1 + 88) = v5 + 1;
    }
    uint64_t v6 = ((uint64_t (*)(uint64_t))v3)(a1);
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(a1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(a1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(a1 + 64);
          if (v9)
          {
            *(void *)(a1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v10 = *(const void **)(a1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)a1);
        }
      }
    }
    return v6;
  }

  return v3();
}

BOOL nw_protocol_get_path_is_valid(BOOL result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    return v1 && *(void *)(v1 + 120) != 0;
  }
  return result;
}

uint64_t nw_protocol_get_remote_endpoint_quiet(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 136);
  if (!v3) {
    return 0;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5) {
      *(void *)(a1 + 88) = v5 + 1;
    }
    uint64_t v6 = ((uint64_t (*)(uint64_t))v3)(a1);
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(a1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(a1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(a1 + 64);
          if (v9)
          {
            *(void *)(a1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v10 = *(const void **)(a1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)a1);
        }
      }
    }
    return v6;
  }

  return v3();
}

BOOL nw_protocol_get_remote_endpoint_is_valid(BOOL result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    return v1 && *(void *)(v1 + 136) != 0;
  }
  return result;
}

uint64_t nw_protocol_get_local_endpoint_quiet(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 128);
  if (!v3) {
    return 0;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5) {
      *(void *)(a1 + 88) = v5 + 1;
    }
    uint64_t v6 = ((uint64_t (*)(uint64_t))v3)(a1);
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(a1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(a1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(a1 + 64);
          if (v9)
          {
            *(void *)(a1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v10 = *(const void **)(a1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)a1);
        }
      }
    }
    return v6;
  }

  return v3();
}

BOOL nw_protocol_get_local_endpoint_is_valid(BOOL result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    return v1 && *(void *)(v1 + 128) != 0;
  }
  return result;
}

uint64_t nw_protocol_get_output_local_endpoint(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "__nw_protocol_get_output_local_endpoint";
    int v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "__nw_protocol_get_output_local_endpoint";
          uint64_t v21 = "%{public}s called with null protocol";
LABEL_59:
          _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        BOOL v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v32 = "__nw_protocol_get_output_local_endpoint";
            __int16 v33 = 2082;
            id v34 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_60;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "__nw_protocol_get_output_local_endpoint";
          uint64_t v21 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "__nw_protocol_get_output_local_endpoint";
          uint64_t v21 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v18) {
      free(v18);
    }
    return 0;
  }
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3) {
      *(void *)(a1 + 88) = v3 + 1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 200);
    if (v5)
    {
      uint64_t v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_8;
    }
  }
  __nwlog_obj();
  uint64_t v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v32 = "__nw_protocol_get_output_local_endpoint";
  if (!v12) {
    uint64_t v12 = "invalid";
  }
  __int16 v33 = 2082;
  id v34 = (void *)v12;
  __int16 v35 = 2048;
  uint64_t v36 = a1;
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (!__nwlog_fault(v13, &type, &v29)) {
    goto LABEL_51;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    uint64_t v16 = *(const char **)(a1 + 16);
    if (!v16) {
      uint64_t v16 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    os_log_type_t v32 = "__nw_protocol_get_output_local_endpoint";
    __int16 v33 = 2082;
    id v34 = (void *)v16;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    uint64_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback";
LABEL_50:
    _os_log_impl(&dword_1830D4000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }
  if (!v29)
  {
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    os_log_type_t v27 = *(const char **)(a1 + 16);
    if (!v27) {
      os_log_type_t v27 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    os_log_type_t v32 = "__nw_protocol_get_output_local_endpoint";
    __int16 v33 = 2082;
    id v34 = (void *)v27;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    uint64_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, backtrace limit exceeded";
    goto LABEL_50;
  }
  unsigned int v22 = (char *)__nw_create_backtrace_string();
  uint64_t v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_51;
    }
    os_log_type_t v28 = *(const char **)(a1 + 16);
    if (!v28) {
      os_log_type_t v28 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    os_log_type_t v32 = "__nw_protocol_get_output_local_endpoint";
    __int16 v33 = 2082;
    id v34 = (void *)v28;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    uint64_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, no backtrace";
    goto LABEL_50;
  }
  if (v23)
  {
    os_log_type_t v24 = *(const char **)(a1 + 16);
    if (!v24) {
      os_log_type_t v24 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    os_log_type_t v32 = "__nw_protocol_get_output_local_endpoint";
    __int16 v33 = 2082;
    id v34 = (void *)v24;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    __int16 v37 = 2082;
    os_log_type_t v38 = v22;
    _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v22);
LABEL_51:
  if (v13) {
    free(v13);
  }
  uint64_t v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        uint64_t v9 = v8 - 1;
        *(void *)(a1 + 88) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }
          free((void *)a1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_get_output_local_endpoint_quiet(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 200);
  if (!v3) {
    return 0;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5) {
      *(void *)(a1 + 88) = v5 + 1;
    }
    uint64_t v6 = ((uint64_t (*)(uint64_t))v3)(a1);
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(a1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(a1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(a1 + 64);
          if (v9)
          {
            *(void *)(a1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v10 = *(const void **)(a1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)a1);
        }
      }
    }
    return v6;
  }

  return v3();
}

BOOL nw_protocol_get_output_local_endpoint_is_valid(BOOL result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    return v1 && *(void *)(v1 + 200) != 0;
  }
  return result;
}

uint64_t nw_protocol_get_output_interface(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "__nw_protocol_get_output_interface";
    int v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "__nw_protocol_get_output_interface";
          uint64_t v21 = "%{public}s called with null protocol";
LABEL_59:
          _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        BOOL v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v32 = "__nw_protocol_get_output_interface";
            __int16 v33 = 2082;
            id v34 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_60;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "__nw_protocol_get_output_interface";
          uint64_t v21 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "__nw_protocol_get_output_interface";
          uint64_t v21 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v18) {
      free(v18);
    }
    return 0;
  }
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3) {
      *(void *)(a1 + 88) = v3 + 1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 208);
    if (v5)
    {
      uint64_t v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_8;
    }
  }
  __nwlog_obj();
  uint64_t v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v32 = "__nw_protocol_get_output_interface";
  if (!v12) {
    uint64_t v12 = "invalid";
  }
  __int16 v33 = 2082;
  id v34 = (void *)v12;
  __int16 v35 = 2048;
  uint64_t v36 = a1;
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (!__nwlog_fault(v13, &type, &v29)) {
    goto LABEL_51;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    uint64_t v16 = *(const char **)(a1 + 16);
    if (!v16) {
      uint64_t v16 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    os_log_type_t v32 = "__nw_protocol_get_output_interface";
    __int16 v33 = 2082;
    id v34 = (void *)v16;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    uint64_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback";
LABEL_50:
    _os_log_impl(&dword_1830D4000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }
  if (!v29)
  {
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    os_log_type_t v27 = *(const char **)(a1 + 16);
    if (!v27) {
      os_log_type_t v27 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    os_log_type_t v32 = "__nw_protocol_get_output_interface";
    __int16 v33 = 2082;
    id v34 = (void *)v27;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    uint64_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback, backtrace limit exceeded";
    goto LABEL_50;
  }
  unsigned int v22 = (char *)__nw_create_backtrace_string();
  uint64_t v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_51;
    }
    os_log_type_t v28 = *(const char **)(a1 + 16);
    if (!v28) {
      os_log_type_t v28 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    os_log_type_t v32 = "__nw_protocol_get_output_interface";
    __int16 v33 = 2082;
    id v34 = (void *)v28;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    uint64_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback, no backtrace";
    goto LABEL_50;
  }
  if (v23)
  {
    os_log_type_t v24 = *(const char **)(a1 + 16);
    if (!v24) {
      os_log_type_t v24 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    os_log_type_t v32 = "__nw_protocol_get_output_interface";
    __int16 v33 = 2082;
    id v34 = (void *)v24;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    __int16 v37 = 2082;
    os_log_type_t v38 = v22;
    _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s protocol %{public}s (%p) has invalid get_output_interface callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v22);
LABEL_51:
  if (v13) {
    free(v13);
  }
  uint64_t v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        uint64_t v9 = v8 - 1;
        *(void *)(a1 + 88) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }
          free((void *)a1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_get_output_interface_quiet(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 208);
  if (!v3) {
    return 0;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5) {
      *(void *)(a1 + 88) = v5 + 1;
    }
    uint64_t v6 = ((uint64_t (*)(uint64_t))v3)(a1);
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(a1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(a1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(a1 + 64);
          if (v9)
          {
            *(void *)(a1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v10 = *(const void **)(a1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)a1);
        }
      }
    }
    return v6;
  }

  return v3();
}

BOOL nw_protocol_get_output_interface_is_valid(BOOL result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    return v1 && *(void *)(v1 + 208) != 0;
  }
  return result;
}

uint64_t nw_protocol_connect(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 40);
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = *(void *)(a1 + 88);
      if (v5) {
        *(void *)(a1 + 88) = v5 + 1;
      }
    }
    if (a2)
    {
      uint64_t v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = *(void *)(a1 + 24);
      if (v8)
      {
        uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 24);
        if (v9)
        {
          uint64_t v10 = v9(a1, a2);
          if (v6 != &nw_protocol_ref_counted_handle)
          {
LABEL_13:
            if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v12 = *(void *)(a1 + 88);
              if (v12)
              {
                uint64_t v13 = v12 - 1;
                *(void *)(a1 + 88) = v13;
                if (!v13)
                {
                  uint64_t v14 = *(void (***)(void))(a1 + 64);
                  if (v14)
                  {
                    *(void *)(a1 + 64) = 0;
                    v14[2](v14);
                    _Block_release(v14);
                  }
                  if (*(unsigned char *)(a1 + 72))
                  {
                    os_log_type_t v15 = *(const void **)(a1 + 64);
                    if (v15) {
                      _Block_release(v15);
                    }
                  }
                  free((void *)a1);
                }
              }
            }
            return v10;
          }
LABEL_12:
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v16 = *(void *)(a2 + 88);
            if (v16)
            {
              uint64_t v17 = v16 - 1;
              *(void *)(a2 + 88) = v17;
              if (!v17)
              {
                int v18 = *(void (***)(void))(a2 + 64);
                if (v18)
                {
                  *(void *)(a2 + 64) = 0;
                  v18[2](v18);
                  _Block_release(v18);
                }
                if (*(unsigned char *)(a2 + 72))
                {
                  uint64_t v19 = *(const void **)(a2 + 64);
                  if (v19) {
                    _Block_release(v19);
                  }
                }
                free((void *)a2);
              }
            }
          }
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      os_log_type_t v20 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      BOOL v46 = "__nw_protocol_connect";
      if (!v20) {
        os_log_type_t v20 = "invalid";
      }
      __int16 v47 = 2082;
      BOOL v48 = (void *)v20;
      __int16 v49 = 2048;
      uint64_t v50 = a1;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          unsigned int v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          os_log_type_t v24 = *(const char **)(a1 + 16);
          if (!v24) {
            os_log_type_t v24 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          BOOL v46 = "__nw_protocol_connect";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v24;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          uint64_t v25 = "%{public}s protocol %{public}s (%p) has invalid connect callback";
LABEL_73:
          _os_log_impl(&dword_1830D4000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }
        if (!v43)
        {
          unsigned int v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          BOOL v41 = *(const char **)(a1 + 16);
          if (!v41) {
            BOOL v41 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          BOOL v46 = "__nw_protocol_connect";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v41;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          uint64_t v25 = "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded";
          goto LABEL_73;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        unsigned int v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35) {
            goto LABEL_74;
          }
          unsigned int v42 = *(const char **)(a1 + 16);
          if (!v42) {
            unsigned int v42 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          BOOL v46 = "__nw_protocol_connect";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v42;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          uint64_t v25 = "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace";
          goto LABEL_73;
        }
        if (v35)
        {
          uint64_t v36 = *(const char **)(a1 + 16);
          if (!v36) {
            uint64_t v36 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          BOOL v46 = "__nw_protocol_connect";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v36;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          __int16 v51 = 2082;
          os_log_type_t v52 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_74:
      if (v21) {
        free(v21);
      }
      uint64_t v10 = 0;
      if (v6 != &nw_protocol_ref_counted_handle) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v46 = "__nw_protocol_connect";
    os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v46 = "__nw_protocol_connect";
          __int16 v33 = "%{public}s called with null other_protocol";
LABEL_90:
          _os_log_impl(&dword_1830D4000, v31, v32, v33, buf, 0xCu);
        }
      }
      else if (v43)
      {
        uint64_t v39 = (char *)__nw_create_backtrace_string();
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v46 = "__nw_protocol_connect";
            __int16 v47 = 2082;
            BOOL v48 = v39;
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v39);
          goto LABEL_91;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v46 = "__nw_protocol_connect";
          __int16 v33 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_90;
        }
      }
      else
      {
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v46 = "__nw_protocol_connect";
          __int16 v33 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }
LABEL_91:
    if (v30) {
      free(v30);
    }
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v46 = "__nw_protocol_connect";
  BOOL v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v46 = "__nw_protocol_connect";
        char v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      }
    }
    else if (v43)
    {
      __int16 v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v46 = "__nw_protocol_connect";
          __int16 v47 = 2082;
          BOOL v48 = v37;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v37);
        goto LABEL_85;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v46 = "__nw_protocol_connect";
        char v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }
    else
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v46 = "__nw_protocol_connect";
        char v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }
LABEL_85:
  if (v26) {
    free(v26);
  }
  return 0;
}

uint64_t nw_protocol_connect_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 24) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_connected_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 40) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

void nw_protocol_disconnect(void *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)a1;
    uint64_t v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = a1[11];
      if (v5) {
        a1[11] = v5 + 1;
      }
    }
    if (a2)
    {
      uint64_t v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = a1[3];
      if (v8)
      {
        uint64_t v9 = *(void (**)(void *, uint64_t))(v8 + 32);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      int v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      unsigned int v42 = "__nw_protocol_disconnect";
      if (!v18) {
        int v18 = "invalid";
      }
      __int16 v43 = 2082;
      BOOL v44 = (void *)v18;
      __int16 v45 = 2048;
      uint64_t v46 = v3;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          unsigned int v22 = *(const char **)(v3 + 16);
          if (!v22) {
            unsigned int v22 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_disconnect";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v22;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          __int16 v37 = *(const char **)(v3 + 16);
          if (!v37) {
            __int16 v37 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_disconnect";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v37;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            os_log_type_t v32 = *(const char **)(v3 + 16);
            if (!v32) {
              os_log_type_t v32 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            unsigned int v42 = "__nw_protocol_disconnect";
            __int16 v43 = 2082;
            BOOL v44 = (void *)v32;
            __int16 v45 = 2048;
            uint64_t v46 = v3;
            __int16 v47 = 2082;
            BOOL v48 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid disconnect callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          BOOL v38 = *(const char **)(v3 + 16);
          if (!v38) {
            BOOL v38 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_disconnect";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v38;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19) {
        free(v19);
      }
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v14 = *(void *)(v2 + 88);
        if (v14)
        {
          uint64_t v15 = v14 - 1;
          *(void *)(v2 + 88) = v15;
          if (!v15)
          {
            uint64_t v16 = *(void (***)(void))(v2 + 64);
            if (v16)
            {
              *(void *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if (*(unsigned char *)(v2 + 72))
            {
              uint64_t v17 = *(const void **)(v2 + 64);
              if (v17) {
                _Block_release(v17);
              }
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            uint64_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              uint64_t v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v42 = "__nw_protocol_disconnect";
    uint64_t v2 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_disconnect";
        char v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_disconnect";
        char v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      BOOL v35 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v42 = "__nw_protocol_disconnect";
          __int16 v43 = 2082;
          BOOL v44 = v35;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_disconnect";
        char v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned int v42 = "__nw_protocol_disconnect";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_disconnect";
      BOOL v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      __int16 v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v42 = "__nw_protocol_disconnect";
          __int16 v43 = 2082;
          BOOL v44 = v33;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }
      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_disconnect";
      BOOL v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_disconnect";
      BOOL v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

uint64_t nw_protocol_disconnect_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 32) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

void nw_protocol_disconnected_quiet(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 48);
        if (v5)
        {
          uint64_t v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v7 = *(void *)(a1 + 88);
            if (v7) {
              *(void *)(a1 + 88) = v7 + 1;
            }
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v8 = *(void *)(a2 + 88);
            if (v8) {
              *(void *)(a2 + 88) = v8 + 1;
            }
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v9 = *(void *)(a2 + 88);
              if (v9)
              {
                uint64_t v10 = v9 - 1;
                *(void *)(a2 + 88) = v10;
                if (!v10)
                {
                  uint64_t v11 = *(void (***)(void))(a2 + 64);
                  if (v11)
                  {
                    *(void *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if (*(unsigned char *)(a2 + 72))
                  {
                    uint64_t v12 = *(const void **)(a2 + 64);
                    if (v12) {
                      _Block_release(v12);
                    }
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v13 = *(void *)(a1 + 88);
            if (v13)
            {
              uint64_t v14 = v13 - 1;
              *(void *)(a1 + 88) = v14;
              if (!v14)
              {
                uint64_t v15 = *(void (***)(void))(a1 + 64);
                if (v15)
                {
                  *(void *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  uint64_t v16 = *(const void **)(a1 + 64);
                  if (v16) {
                    _Block_release(v16);
                  }
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

void nw_protocol_input_available_quiet(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 64);
        if (v5)
        {
          uint64_t v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v7 = *(void *)(a1 + 88);
            if (v7) {
              *(void *)(a1 + 88) = v7 + 1;
            }
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v8 = *(void *)(a2 + 88);
            if (v8) {
              *(void *)(a2 + 88) = v8 + 1;
            }
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v9 = *(void *)(a2 + 88);
              if (v9)
              {
                uint64_t v10 = v9 - 1;
                *(void *)(a2 + 88) = v10;
                if (!v10)
                {
                  uint64_t v11 = *(void (***)(void))(a2 + 64);
                  if (v11)
                  {
                    *(void *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if (*(unsigned char *)(a2 + 72))
                  {
                    uint64_t v12 = *(const void **)(a2 + 64);
                    if (v12) {
                      _Block_release(v12);
                    }
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v13 = *(void *)(a1 + 88);
            if (v13)
            {
              uint64_t v14 = v13 - 1;
              *(void *)(a1 + 88) = v14;
              if (!v14)
              {
                uint64_t v15 = *(void (***)(void))(a1 + 64);
                if (v15)
                {
                  *(void *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  uint64_t v16 = *(const void **)(a1 + 64);
                  if (v16) {
                    _Block_release(v16);
                  }
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

void nw_protocol_output_available(void *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)a1;
    uint64_t v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = a1[11];
      if (v5) {
        a1[11] = v5 + 1;
      }
    }
    if (a2)
    {
      uint64_t v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = a1[3];
      if (v8)
      {
        uint64_t v9 = *(void (**)(void *, uint64_t))(v8 + 72);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      int v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      unsigned int v42 = "__nw_protocol_output_available";
      if (!v18) {
        int v18 = "invalid";
      }
      __int16 v43 = 2082;
      BOOL v44 = (void *)v18;
      __int16 v45 = 2048;
      uint64_t v46 = v3;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          unsigned int v22 = *(const char **)(v3 + 16);
          if (!v22) {
            unsigned int v22 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_output_available";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v22;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid output_available callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          __int16 v37 = *(const char **)(v3 + 16);
          if (!v37) {
            __int16 v37 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_output_available";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v37;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            os_log_type_t v32 = *(const char **)(v3 + 16);
            if (!v32) {
              os_log_type_t v32 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            unsigned int v42 = "__nw_protocol_output_available";
            __int16 v43 = 2082;
            BOOL v44 = (void *)v32;
            __int16 v45 = 2048;
            uint64_t v46 = v3;
            __int16 v47 = 2082;
            BOOL v48 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          BOOL v38 = *(const char **)(v3 + 16);
          if (!v38) {
            BOOL v38 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_output_available";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v38;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19) {
        free(v19);
      }
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v14 = *(void *)(v2 + 88);
        if (v14)
        {
          uint64_t v15 = v14 - 1;
          *(void *)(v2 + 88) = v15;
          if (!v15)
          {
            uint64_t v16 = *(void (***)(void))(v2 + 64);
            if (v16)
            {
              *(void *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if (*(unsigned char *)(v2 + 72))
            {
              uint64_t v17 = *(const void **)(v2 + 64);
              if (v17) {
                _Block_release(v17);
              }
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            uint64_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              uint64_t v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v42 = "__nw_protocol_output_available";
    uint64_t v2 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_output_available";
        char v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_output_available";
        char v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      BOOL v35 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v42 = "__nw_protocol_output_available";
          __int16 v43 = 2082;
          BOOL v44 = v35;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_output_available";
        char v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned int v42 = "__nw_protocol_output_available";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_output_available";
      BOOL v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      __int16 v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v42 = "__nw_protocol_output_available";
          __int16 v43 = 2082;
          BOOL v44 = v33;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }
      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_output_available";
      BOOL v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_output_available";
      BOOL v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

uint64_t nw_protocol_output_available_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 72) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

void nw_protocol_input_finished_quiet(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 184);
        if (v5)
        {
          uint64_t v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v7 = *(void *)(a1 + 88);
            if (v7) {
              *(void *)(a1 + 88) = v7 + 1;
            }
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v8 = *(void *)(a2 + 88);
            if (v8) {
              *(void *)(a2 + 88) = v8 + 1;
            }
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v9 = *(void *)(a2 + 88);
              if (v9)
              {
                uint64_t v10 = v9 - 1;
                *(void *)(a2 + 88) = v10;
                if (!v10)
                {
                  uint64_t v11 = *(void (***)(void))(a2 + 64);
                  if (v11)
                  {
                    *(void *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if (*(unsigned char *)(a2 + 72))
                  {
                    uint64_t v12 = *(const void **)(a2 + 64);
                    if (v12) {
                      _Block_release(v12);
                    }
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v13 = *(void *)(a1 + 88);
            if (v13)
            {
              uint64_t v14 = v13 - 1;
              *(void *)(a1 + 88) = v14;
              if (!v14)
              {
                uint64_t v15 = *(void (***)(void))(a1 + 64);
                if (v15)
                {
                  *(void *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  uint64_t v16 = *(const void **)(a1 + 64);
                  if (v16) {
                    _Block_release(v16);
                  }
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_input_finished_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 184) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

void nw_protocol_output_finished(void *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)a1;
    uint64_t v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = a1[11];
      if (v5) {
        a1[11] = v5 + 1;
      }
    }
    if (a2)
    {
      uint64_t v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = a1[3];
      if (v8)
      {
        uint64_t v9 = *(void (**)(void *, uint64_t))(v8 + 192);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      int v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      unsigned int v42 = "__nw_protocol_output_finished";
      if (!v18) {
        int v18 = "invalid";
      }
      __int16 v43 = 2082;
      BOOL v44 = (void *)v18;
      __int16 v45 = 2048;
      uint64_t v46 = v3;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          unsigned int v22 = *(const char **)(v3 + 16);
          if (!v22) {
            unsigned int v22 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_output_finished";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v22;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid output_finished callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          __int16 v37 = *(const char **)(v3 + 16);
          if (!v37) {
            __int16 v37 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_output_finished";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v37;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid output_finished callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            os_log_type_t v32 = *(const char **)(v3 + 16);
            if (!v32) {
              os_log_type_t v32 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            unsigned int v42 = "__nw_protocol_output_finished";
            __int16 v43 = 2082;
            BOOL v44 = (void *)v32;
            __int16 v45 = 2048;
            uint64_t v46 = v3;
            __int16 v47 = 2082;
            BOOL v48 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid output_finished callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          BOOL v38 = *(const char **)(v3 + 16);
          if (!v38) {
            BOOL v38 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_output_finished";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v38;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid output_finished callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19) {
        free(v19);
      }
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v14 = *(void *)(v2 + 88);
        if (v14)
        {
          uint64_t v15 = v14 - 1;
          *(void *)(v2 + 88) = v15;
          if (!v15)
          {
            uint64_t v16 = *(void (***)(void))(v2 + 64);
            if (v16)
            {
              *(void *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if (*(unsigned char *)(v2 + 72))
            {
              uint64_t v17 = *(const void **)(v2 + 64);
              if (v17) {
                _Block_release(v17);
              }
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            uint64_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              uint64_t v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v42 = "__nw_protocol_output_finished";
    uint64_t v2 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_output_finished";
        char v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_output_finished";
        char v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      BOOL v35 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v42 = "__nw_protocol_output_finished";
          __int16 v43 = 2082;
          BOOL v44 = v35;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_output_finished";
        char v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned int v42 = "__nw_protocol_output_finished";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_output_finished";
      BOOL v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      __int16 v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v42 = "__nw_protocol_output_finished";
          __int16 v43 = 2082;
          BOOL v44 = v33;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }
      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_output_finished";
      BOOL v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_output_finished";
      BOOL v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

void nw_protocol_output_finished_quiet(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 192);
        if (v5)
        {
          uint64_t v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v7 = *(void *)(a1 + 88);
            if (v7) {
              *(void *)(a1 + 88) = v7 + 1;
            }
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v8 = *(void *)(a2 + 88);
            if (v8) {
              *(void *)(a2 + 88) = v8 + 1;
            }
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v9 = *(void *)(a2 + 88);
              if (v9)
              {
                uint64_t v10 = v9 - 1;
                *(void *)(a2 + 88) = v10;
                if (!v10)
                {
                  uint64_t v11 = *(void (***)(void))(a2 + 64);
                  if (v11)
                  {
                    *(void *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if (*(unsigned char *)(a2 + 72))
                  {
                    uint64_t v12 = *(const void **)(a2 + 64);
                    if (v12) {
                      _Block_release(v12);
                    }
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v13 = *(void *)(a1 + 88);
            if (v13)
            {
              uint64_t v14 = v13 - 1;
              *(void *)(a1 + 88) = v14;
              if (!v14)
              {
                uint64_t v15 = *(void (***)(void))(a1 + 64);
                if (v15)
                {
                  *(void *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  uint64_t v16 = *(const void **)(a1 + 64);
                  if (v16) {
                    _Block_release(v16);
                  }
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_output_finished_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 192) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

void nw_protocol_input_flush(void *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)a1;
    uint64_t v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = a1[11];
      if (v5) {
        a1[11] = v5 + 1;
      }
    }
    if (a2)
    {
      uint64_t v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = a1[3];
      if (v8)
      {
        uint64_t v9 = *(void (**)(void *, uint64_t))(v8 + 264);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      int v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      unsigned int v42 = "__nw_protocol_input_flush";
      if (!v18) {
        int v18 = "invalid";
      }
      __int16 v43 = 2082;
      BOOL v44 = (void *)v18;
      __int16 v45 = 2048;
      uint64_t v46 = v3;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          unsigned int v22 = *(const char **)(v3 + 16);
          if (!v22) {
            unsigned int v22 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_input_flush";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v22;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid input_flush callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          __int16 v37 = *(const char **)(v3 + 16);
          if (!v37) {
            __int16 v37 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_input_flush";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v37;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid input_flush callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            os_log_type_t v32 = *(const char **)(v3 + 16);
            if (!v32) {
              os_log_type_t v32 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            unsigned int v42 = "__nw_protocol_input_flush";
            __int16 v43 = 2082;
            BOOL v44 = (void *)v32;
            __int16 v45 = 2048;
            uint64_t v46 = v3;
            __int16 v47 = 2082;
            BOOL v48 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid input_flush callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          BOOL v38 = *(const char **)(v3 + 16);
          if (!v38) {
            BOOL v38 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_input_flush";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v38;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid input_flush callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19) {
        free(v19);
      }
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v14 = *(void *)(v2 + 88);
        if (v14)
        {
          uint64_t v15 = v14 - 1;
          *(void *)(v2 + 88) = v15;
          if (!v15)
          {
            uint64_t v16 = *(void (***)(void))(v2 + 64);
            if (v16)
            {
              *(void *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if (*(unsigned char *)(v2 + 72))
            {
              uint64_t v17 = *(const void **)(v2 + 64);
              if (v17) {
                _Block_release(v17);
              }
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            uint64_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              uint64_t v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v42 = "__nw_protocol_input_flush";
    uint64_t v2 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_input_flush";
        char v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_input_flush";
        char v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      BOOL v35 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v42 = "__nw_protocol_input_flush";
          __int16 v43 = 2082;
          BOOL v44 = v35;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_input_flush";
        char v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned int v42 = "__nw_protocol_input_flush";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_input_flush";
      BOOL v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      __int16 v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v42 = "__nw_protocol_input_flush";
          __int16 v43 = 2082;
          BOOL v44 = v33;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }
      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_input_flush";
      BOOL v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_input_flush";
      BOOL v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

void nw_protocol_input_flush_quiet(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 264);
        if (v5)
        {
          uint64_t v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v7 = *(void *)(a1 + 88);
            if (v7) {
              *(void *)(a1 + 88) = v7 + 1;
            }
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v8 = *(void *)(a2 + 88);
            if (v8) {
              *(void *)(a2 + 88) = v8 + 1;
            }
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v9 = *(void *)(a2 + 88);
              if (v9)
              {
                uint64_t v10 = v9 - 1;
                *(void *)(a2 + 88) = v10;
                if (!v10)
                {
                  uint64_t v11 = *(void (***)(void))(a2 + 64);
                  if (v11)
                  {
                    *(void *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if (*(unsigned char *)(a2 + 72))
                  {
                    uint64_t v12 = *(const void **)(a2 + 64);
                    if (v12) {
                      _Block_release(v12);
                    }
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v13 = *(void *)(a1 + 88);
            if (v13)
            {
              uint64_t v14 = v13 - 1;
              *(void *)(a1 + 88) = v14;
              if (!v14)
              {
                uint64_t v15 = *(void (***)(void))(a1 + 64);
                if (v15)
                {
                  *(void *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  uint64_t v16 = *(const void **)(a1 + 64);
                  if (v16) {
                    _Block_release(v16);
                  }
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_input_flush_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 264) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

void nw_protocol_error(void *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)a1;
    uint64_t v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = a1[11];
      if (v5) {
        a1[11] = v5 + 1;
      }
    }
    if (a2)
    {
      uint64_t v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = a1[3];
      if (v8)
      {
        uint64_t v9 = *(void (**)(void *, uint64_t))(v8 + 56);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      int v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      unsigned int v42 = "__nw_protocol_error";
      if (!v18) {
        int v18 = "invalid";
      }
      __int16 v43 = 2082;
      BOOL v44 = (void *)v18;
      __int16 v45 = 2048;
      uint64_t v46 = v3;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          unsigned int v22 = *(const char **)(v3 + 16);
          if (!v22) {
            unsigned int v22 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_error";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v22;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid error callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          __int16 v37 = *(const char **)(v3 + 16);
          if (!v37) {
            __int16 v37 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_error";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v37;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            os_log_type_t v32 = *(const char **)(v3 + 16);
            if (!v32) {
              os_log_type_t v32 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            unsigned int v42 = "__nw_protocol_error";
            __int16 v43 = 2082;
            BOOL v44 = (void *)v32;
            __int16 v45 = 2048;
            uint64_t v46 = v3;
            __int16 v47 = 2082;
            BOOL v48 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          BOOL v38 = *(const char **)(v3 + 16);
          if (!v38) {
            BOOL v38 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v42 = "__nw_protocol_error";
          __int16 v43 = 2082;
          BOOL v44 = (void *)v38;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19) {
        free(v19);
      }
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v14 = *(void *)(v2 + 88);
        if (v14)
        {
          uint64_t v15 = v14 - 1;
          *(void *)(v2 + 88) = v15;
          if (!v15)
          {
            uint64_t v16 = *(void (***)(void))(v2 + 64);
            if (v16)
            {
              *(void *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if (*(unsigned char *)(v2 + 72))
            {
              uint64_t v17 = *(const void **)(v2 + 64);
              if (v17) {
                _Block_release(v17);
              }
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            uint64_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              uint64_t v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v42 = "__nw_protocol_error";
    uint64_t v2 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_error";
        char v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_error";
        char v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      BOOL v35 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v42 = "__nw_protocol_error";
          __int16 v43 = 2082;
          BOOL v44 = v35;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v42 = "__nw_protocol_error";
        char v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned int v42 = "__nw_protocol_error";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_error";
      BOOL v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      __int16 v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v42 = "__nw_protocol_error";
          __int16 v43 = 2082;
          BOOL v44 = v33;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }
      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_error";
      BOOL v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v42 = "__nw_protocol_error";
      BOOL v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

void nw_protocol_error_quiet(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 56);
        if (v5)
        {
          uint64_t v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v7 = *(void *)(a1 + 88);
            if (v7) {
              *(void *)(a1 + 88) = v7 + 1;
            }
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v8 = *(void *)(a2 + 88);
            if (v8) {
              *(void *)(a2 + 88) = v8 + 1;
            }
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v9 = *(void *)(a2 + 88);
              if (v9)
              {
                uint64_t v10 = v9 - 1;
                *(void *)(a2 + 88) = v10;
                if (!v10)
                {
                  uint64_t v11 = *(void (***)(void))(a2 + 64);
                  if (v11)
                  {
                    *(void *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if (*(unsigned char *)(a2 + 72))
                  {
                    uint64_t v12 = *(const void **)(a2 + 64);
                    if (v12) {
                      _Block_release(v12);
                    }
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v13 = *(void *)(a1 + 88);
            if (v13)
            {
              uint64_t v14 = v13 - 1;
              *(void *)(a1 + 88) = v14;
              if (!v14)
              {
                uint64_t v15 = *(void (***)(void))(a1 + 64);
                if (v15)
                {
                  *(void *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  uint64_t v16 = *(const void **)(a1 + 64);
                  if (v16) {
                    _Block_release(v16);
                  }
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_error_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 56) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_reset(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 40);
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = *(void *)(a1 + 88);
      if (v5) {
        *(void *)(a1 + 88) = v5 + 1;
      }
    }
    if (a2)
    {
      uint64_t v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = *(void *)(a1 + 24);
      if (v8)
      {
        uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 256);
        if (v9)
        {
          uint64_t v10 = v9(a1, a2);
          if (v6 != &nw_protocol_ref_counted_handle)
          {
LABEL_13:
            if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v12 = *(void *)(a1 + 88);
              if (v12)
              {
                uint64_t v13 = v12 - 1;
                *(void *)(a1 + 88) = v13;
                if (!v13)
                {
                  uint64_t v14 = *(void (***)(void))(a1 + 64);
                  if (v14)
                  {
                    *(void *)(a1 + 64) = 0;
                    v14[2](v14);
                    _Block_release(v14);
                  }
                  if (*(unsigned char *)(a1 + 72))
                  {
                    uint64_t v15 = *(const void **)(a1 + 64);
                    if (v15) {
                      _Block_release(v15);
                    }
                  }
                  free((void *)a1);
                }
              }
            }
            return v10;
          }
LABEL_12:
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v16 = *(void *)(a2 + 88);
            if (v16)
            {
              uint64_t v17 = v16 - 1;
              *(void *)(a2 + 88) = v17;
              if (!v17)
              {
                int v18 = *(void (***)(void))(a2 + 64);
                if (v18)
                {
                  *(void *)(a2 + 64) = 0;
                  v18[2](v18);
                  _Block_release(v18);
                }
                if (*(unsigned char *)(a2 + 72))
                {
                  uint64_t v19 = *(const void **)(a2 + 64);
                  if (v19) {
                    _Block_release(v19);
                  }
                }
                free((void *)a2);
              }
            }
          }
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      os_log_type_t v20 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      uint64_t v46 = "__nw_protocol_reset";
      if (!v20) {
        os_log_type_t v20 = "invalid";
      }
      __int16 v47 = 2082;
      BOOL v48 = (void *)v20;
      __int16 v49 = 2048;
      uint64_t v50 = a1;
      os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          unsigned int v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          os_log_type_t v24 = *(const char **)(a1 + 16);
          if (!v24) {
            os_log_type_t v24 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v46 = "__nw_protocol_reset";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v24;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid reset callback";
LABEL_73:
          _os_log_impl(&dword_1830D4000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }
        if (!v43)
        {
          unsigned int v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          BOOL v41 = *(const char **)(a1 + 16);
          if (!v41) {
            BOOL v41 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v46 = "__nw_protocol_reset";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v41;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid reset callback, backtrace limit exceeded";
          goto LABEL_73;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        unsigned int v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35) {
            goto LABEL_74;
          }
          unsigned int v42 = *(const char **)(a1 + 16);
          if (!v42) {
            unsigned int v42 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v46 = "__nw_protocol_reset";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v42;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid reset callback, no backtrace";
          goto LABEL_73;
        }
        if (v35)
        {
          BOOL v36 = *(const char **)(a1 + 16);
          if (!v36) {
            BOOL v36 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          uint64_t v46 = "__nw_protocol_reset";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v36;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          __int16 v51 = 2082;
          os_log_type_t v52 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s protocol %{public}s (%p) has invalid reset callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_74:
      if (v21) {
        free(v21);
      }
      uint64_t v10 = 0;
      if (v6 != &nw_protocol_ref_counted_handle) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v46 = "__nw_protocol_reset";
    os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v46 = "__nw_protocol_reset";
          __int16 v33 = "%{public}s called with null other_protocol";
LABEL_90:
          _os_log_impl(&dword_1830D4000, v31, v32, v33, buf, 0xCu);
        }
      }
      else if (v43)
      {
        char v39 = (char *)__nw_create_backtrace_string();
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v46 = "__nw_protocol_reset";
            __int16 v47 = 2082;
            BOOL v48 = v39;
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v39);
          goto LABEL_91;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v46 = "__nw_protocol_reset";
          __int16 v33 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_90;
        }
      }
      else
      {
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v46 = "__nw_protocol_reset";
          __int16 v33 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }
LABEL_91:
    if (v30) {
      free(v30);
    }
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v46 = "__nw_protocol_reset";
  BOOL v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "__nw_protocol_reset";
        char v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      }
    }
    else if (v43)
    {
      __int16 v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v46 = "__nw_protocol_reset";
          __int16 v47 = 2082;
          BOOL v48 = v37;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v37);
        goto LABEL_85;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "__nw_protocol_reset";
        char v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }
    else
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "__nw_protocol_reset";
        char v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }
LABEL_85:
  if (v26) {
    free(v26);
  }
  return 0;
}

uint64_t nw_protocol_reset_quiet(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = 0;
  if (a2)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 256);
    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(a1 + 88);
        if (v8) {
          *(void *)(a1 + 88) = v8 + 1;
        }
      }
      if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v9 = *(void *)(a2 + 88);
        if (v9) {
          *(void *)(a2 + 88) = v9 + 1;
        }
        uint64_t v5 = v6(a1, a2);
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v11 = *(void *)(a2 + 88);
          if (v11)
          {
            uint64_t v12 = v11 - 1;
            *(void *)(a2 + 88) = v12;
            if (!v12)
            {
              uint64_t v13 = *(void (***)(void))(a2 + 64);
              if (v13)
              {
                *(void *)(a2 + 64) = 0;
                v13[2](v13);
                _Block_release(v13);
              }
              if (*(unsigned char *)(a2 + 72))
              {
                uint64_t v14 = *(const void **)(a2 + 64);
                if (v14) {
                  _Block_release(v14);
                }
              }
              free((void *)a2);
            }
          }
        }
      }
      else
      {
        uint64_t v5 = v6(a1, a2);
      }
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v15 = *(void *)(a1 + 88);
        if (v15)
        {
          uint64_t v16 = v15 - 1;
          *(void *)(a1 + 88) = v16;
          if (!v16)
          {
            uint64_t v17 = *(void (***)(void))(a1 + 64);
            if (v17)
            {
              *(void *)(a1 + 64) = 0;
              v17[2](v17);
              _Block_release(v17);
            }
            if (*(unsigned char *)(a1 + 72))
            {
              int v18 = *(const void **)(a1 + 64);
              if (v18) {
                _Block_release(v18);
              }
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t nw_protocol_reset_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 256) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

void nw_protocol_get_message_properties(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = a2;
    uint64_t v4 = (uint64_t)a1;
    uint64_t v5 = (void *)a1[5];
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = a1[11];
      if (v6) {
        a1[11] = v6 + 1;
      }
    }
    if (a2)
    {
      uint64_t v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(a2 + 88);
        if (v8) {
          *(void *)(a2 + 88) = v8 + 1;
        }
      }
      if (a3)
      {
        uint64_t v9 = a1[3];
        if (v9)
        {
          uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 248);
          if (v10)
          {
            v10(a1, a2);
            goto LABEL_13;
          }
        }
        __nwlog_obj();
        uint64_t v19 = *(const char **)(v4 + 16);
        *(_DWORD *)buf = 136446722;
        uint64_t v50 = "__nw_protocol_get_message_properties";
        if (!v19) {
          uint64_t v19 = "invalid";
        }
        __int16 v51 = 2082;
        os_log_type_t v52 = (void *)v19;
        __int16 v53 = 2048;
        uint64_t v54 = v4;
        os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v47 = 0;
        if (!__nwlog_fault(v20, &type, &v47)) {
          goto LABEL_108;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v21 = __nwlog_obj();
          os_log_type_t v22 = type;
          if (!os_log_type_enabled(v21, type)) {
            goto LABEL_108;
          }
          os_log_type_t v23 = *(const char **)(v4 + 16);
          if (!v23) {
            os_log_type_t v23 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v50 = "__nw_protocol_get_message_properties";
          __int16 v51 = 2082;
          os_log_type_t v52 = (void *)v23;
          __int16 v53 = 2048;
          uint64_t v54 = v4;
          os_log_type_t v24 = "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback";
LABEL_87:
          BOOL v44 = v21;
          os_log_type_t v45 = v22;
          uint32_t v46 = 32;
LABEL_107:
          _os_log_impl(&dword_1830D4000, v44, v45, v24, buf, v46);
          goto LABEL_108;
        }
        if (!v47)
        {
          os_log_type_t v21 = __nwlog_obj();
          os_log_type_t v22 = type;
          if (!os_log_type_enabled(v21, type)) {
            goto LABEL_108;
          }
          unsigned int v42 = *(const char **)(v4 + 16);
          if (!v42) {
            unsigned int v42 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v50 = "__nw_protocol_get_message_properties";
          __int16 v51 = 2082;
          os_log_type_t v52 = (void *)v42;
          __int16 v53 = 2048;
          uint64_t v54 = v4;
          os_log_type_t v24 = "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, backtrace limit exceeded";
          goto LABEL_87;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v21 = __nwlog_obj();
        os_log_type_t v22 = type;
        BOOL v34 = os_log_type_enabled(v21, type);
        if (!backtrace_string)
        {
          if (!v34) {
            goto LABEL_108;
          }
          char v43 = *(const char **)(v4 + 16);
          if (!v43) {
            char v43 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v50 = "__nw_protocol_get_message_properties";
          __int16 v51 = 2082;
          os_log_type_t v52 = (void *)v43;
          __int16 v53 = 2048;
          uint64_t v54 = v4;
          os_log_type_t v24 = "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, no backtrace";
          goto LABEL_87;
        }
        if (v34)
        {
          BOOL v35 = *(const char **)(v4 + 16);
          if (!v35) {
            BOOL v35 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          uint64_t v50 = "__nw_protocol_get_message_properties";
          __int16 v51 = 2082;
          os_log_type_t v52 = (void *)v35;
          __int16 v53 = 2048;
          uint64_t v54 = v4;
          __int16 v55 = 2082;
          os_log_type_t v56 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
LABEL_108:
        if (!v20) {
          goto LABEL_13;
        }
        goto LABEL_109;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v50 = "__nw_protocol_get_message_properties";
      os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v47 = 0;
      if (!__nwlog_fault(v20, &type, &v47)) {
        goto LABEL_108;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (!os_log_type_enabled(v31, type)) {
          goto LABEL_108;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v50 = "__nw_protocol_get_message_properties";
        os_log_type_t v24 = "%{public}s called with null message_properties";
      }
      else if (v47)
      {
        BOOL v40 = (char *)__nw_create_backtrace_string();
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v41 = os_log_type_enabled(v31, type);
        if (v40)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v50 = "__nw_protocol_get_message_properties";
            __int16 v51 = 2082;
            os_log_type_t v52 = v40;
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null message_properties, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v40);
          if (!v20)
          {
LABEL_13:
            if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v15 = *(void *)(v3 + 88);
              if (v15)
              {
                uint64_t v16 = v15 - 1;
                *(void *)(v3 + 88) = v16;
                if (!v16)
                {
                  uint64_t v17 = *(void (***)(void))(v3 + 64);
                  if (v17)
                  {
                    *(void *)(v3 + 64) = 0;
                    v17[2](v17);
                    _Block_release(v17);
                  }
                  if (*(unsigned char *)(v3 + 72))
                  {
                    int v18 = *(const void **)(v3 + 64);
                    if (v18) {
                      _Block_release(v18);
                    }
                  }
LABEL_33:
                  free((void *)v3);
                }
              }
            }
LABEL_15:
            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v11 = *(void *)(v4 + 88);
              if (v11)
              {
                uint64_t v12 = v11 - 1;
                *(void *)(v4 + 88) = v12;
                if (!v12)
                {
                  uint64_t v13 = *(void (***)(void))(v4 + 64);
                  if (v13)
                  {
                    *(void *)(v4 + 64) = 0;
                    v13[2](v13);
                    _Block_release(v13);
                  }
                  if (*(unsigned char *)(v4 + 72))
                  {
                    uint64_t v14 = *(const void **)(v4 + 64);
                    if (v14) {
                      _Block_release(v14);
                    }
                  }
                  goto LABEL_25;
                }
              }
            }
            return;
          }
LABEL_109:
          free(v20);
          goto LABEL_13;
        }
        if (!v41) {
          goto LABEL_108;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v50 = "__nw_protocol_get_message_properties";
        os_log_type_t v24 = "%{public}s called with null message_properties, no backtrace";
      }
      else
      {
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (!os_log_type_enabled(v31, type)) {
          goto LABEL_108;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v50 = "__nw_protocol_get_message_properties";
        os_log_type_t v24 = "%{public}s called with null message_properties, backtrace limit exceeded";
      }
      BOOL v44 = v31;
      os_log_type_t v45 = v32;
      uint32_t v46 = 12;
      goto LABEL_107;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v50 = "__nw_protocol_get_message_properties";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (__nwlog_fault((const char *)v3, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (!os_log_type_enabled(v28, type)) {
          goto LABEL_102;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v50 = "__nw_protocol_get_message_properties";
        os_log_type_t v30 = "%{public}s called with null other_protocol";
        goto LABEL_101;
      }
      if (!v47)
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (!os_log_type_enabled(v28, type)) {
          goto LABEL_102;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v50 = "__nw_protocol_get_message_properties";
        os_log_type_t v30 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_101;
      }
      BOOL v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v39 = os_log_type_enabled(v28, type);
      if (v38)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v50 = "__nw_protocol_get_message_properties";
          __int16 v51 = 2082;
          os_log_type_t v52 = v38;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v38);
        if (v3) {
          goto LABEL_33;
        }
        goto LABEL_15;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v50 = "__nw_protocol_get_message_properties";
        os_log_type_t v30 = "%{public}s called with null other_protocol, no backtrace";
LABEL_101:
        _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
      }
    }
LABEL_102:
    if (!v3) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v50 = "__nw_protocol_get_message_properties";
  uint64_t v4 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v47 = 0;
  if (__nwlog_fault((const char *)v4, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v50 = "__nw_protocol_get_message_properties";
      os_log_type_t v27 = "%{public}s called with null protocol";
    }
    else if (v47)
    {
      BOOL v36 = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v37 = os_log_type_enabled(v25, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v50 = "__nw_protocol_get_message_properties";
          __int16 v51 = 2082;
          os_log_type_t v52 = v36;
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v36);
        if (v4) {
          goto LABEL_25;
        }
        return;
      }
      if (!v37) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v50 = "__nw_protocol_get_message_properties";
      os_log_type_t v27 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v50 = "__nw_protocol_get_message_properties";
      os_log_type_t v27 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v25, v26, v27, buf, 0xCu);
  }
LABEL_97:
  if (v4) {
LABEL_25:
  }
    free((void *)v4);
}

void nw_protocol_get_message_properties_quiet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4)
    {
      if (a3)
      {
        if (a2)
        {
          uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 248);
          if (v6)
          {
            uint64_t v7 = *(void **)(a1 + 40);
            if (v7 == &nw_protocol_ref_counted_handle)
            {
              uint64_t v8 = *(void *)(a1 + 88);
              if (v8) {
                *(void *)(a1 + 88) = v8 + 1;
              }
            }
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v9 = *(void *)(a2 + 88);
              if (v9) {
                *(void *)(a2 + 88) = v9 + 1;
              }
              v6(a1, a2);
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v10 = *(void *)(a2 + 88);
                if (v10)
                {
                  uint64_t v11 = v10 - 1;
                  *(void *)(a2 + 88) = v11;
                  if (!v11)
                  {
                    uint64_t v12 = *(void (***)(void))(a2 + 64);
                    if (v12)
                    {
                      *(void *)(a2 + 64) = 0;
                      v12[2](v12);
                      _Block_release(v12);
                    }
                    if (*(unsigned char *)(a2 + 72))
                    {
                      uint64_t v13 = *(const void **)(a2 + 64);
                      if (v13) {
                        _Block_release(v13);
                      }
                    }
                    free((void *)a2);
                  }
                }
              }
            }
            else
            {
              v6(a1, a2);
            }
            if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v14 = *(void *)(a1 + 88);
              if (v14)
              {
                uint64_t v15 = v14 - 1;
                *(void *)(a1 + 88) = v15;
                if (!v15)
                {
                  uint64_t v16 = *(void (***)(void))(a1 + 64);
                  if (v16)
                  {
                    *(void *)(a1 + 64) = 0;
                    v16[2](v16);
                    _Block_release(v16);
                  }
                  if (*(unsigned char *)(a1 + 72))
                  {
                    uint64_t v17 = *(const void **)(a1 + 64);
                    if (v17) {
                      _Block_release(v17);
                    }
                  }
                  free((void *)a1);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_get_message_properties_is_valid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3) {
      LODWORD(v3) = *(void *)(v3 + 248) != 0;
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (!a2) {
    LODWORD(v3) = 0;
  }
  if (a3) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_copy_info(uint64_t a1, int a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v4 = *(void *)(a1 + 88);
      if (v4) {
        *(void *)(a1 + 88) = v4 + 1;
      }
    }
    if (a2)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      if (v5)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 224);
        if (v6)
        {
          uint64_t v7 = v6(a1);
          if (v3 != &nw_protocol_ref_counted_handle) {
            return v7;
          }
          goto LABEL_9;
        }
      }
      __nwlog_obj();
      uint64_t v13 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      BOOL v40 = "__nw_protocol_copy_info";
      if (!v13) {
        uint64_t v13 = "invalid";
      }
      __int16 v41 = 2082;
      unsigned int v42 = (void *)v13;
      __int16 v43 = 2048;
      uint64_t v44 = a1;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v37 = 0;
      if (__nwlog_fault(v14, &type, &v37))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          if (!os_log_type_enabled(v15, type)) {
            goto LABEL_76;
          }
          uint64_t v17 = *(const char **)(a1 + 16);
          if (!v17) {
            uint64_t v17 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          BOOL v40 = "__nw_protocol_copy_info";
          __int16 v41 = 2082;
          unsigned int v42 = (void *)v17;
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          int v18 = "%{public}s protocol %{public}s (%p) has invalid copy_info callback";
LABEL_61:
          BOOL v34 = v15;
          os_log_type_t v35 = v16;
          uint32_t v36 = 32;
LABEL_75:
          _os_log_impl(&dword_1830D4000, v34, v35, v18, buf, v36);
          goto LABEL_76;
        }
        if (!v37)
        {
          uint64_t v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          if (!os_log_type_enabled(v15, type)) {
            goto LABEL_76;
          }
          os_log_type_t v32 = *(const char **)(a1 + 16);
          if (!v32) {
            os_log_type_t v32 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          BOOL v40 = "__nw_protocol_copy_info";
          __int16 v41 = 2082;
          unsigned int v42 = (void *)v32;
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          int v18 = "%{public}s protocol %{public}s (%p) has invalid copy_info callback, backtrace limit exceeded";
          goto LABEL_61;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v26 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (!v26) {
            goto LABEL_76;
          }
          __int16 v33 = *(const char **)(a1 + 16);
          if (!v33) {
            __int16 v33 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          BOOL v40 = "__nw_protocol_copy_info";
          __int16 v41 = 2082;
          unsigned int v42 = (void *)v33;
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          int v18 = "%{public}s protocol %{public}s (%p) has invalid copy_info callback, no backtrace";
          goto LABEL_61;
        }
        if (v26)
        {
          os_log_type_t v27 = *(const char **)(a1 + 16);
          if (!v27) {
            os_log_type_t v27 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          BOOL v40 = "__nw_protocol_copy_info";
          __int16 v41 = 2082;
          unsigned int v42 = (void *)v27;
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          __int16 v45 = 2082;
          uint32_t v46 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s protocol %{public}s (%p) has invalid copy_info callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_76:
      if (!v14) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v40 = "__nw_protocol_copy_info";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v14, &type, &v37)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v40 = "__nw_protocol_copy_info";
      int v18 = "%{public}s called with null type";
    }
    else if (v37)
    {
      os_log_type_t v30 = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v40 = "__nw_protocol_copy_info";
          __int16 v41 = 2082;
          unsigned int v42 = v30;
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v30);
        if (!v14)
        {
LABEL_78:
          uint64_t v7 = 0;
          if (v3 != &nw_protocol_ref_counted_handle) {
            return v7;
          }
LABEL_9:
          if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v9 = *(void *)(a1 + 88);
            if (v9)
            {
              uint64_t v10 = v9 - 1;
              *(void *)(a1 + 88) = v10;
              if (!v10)
              {
                uint64_t v11 = *(void (***)(void))(a1 + 64);
                if (v11)
                {
                  *(void *)(a1 + 64) = 0;
                  v11[2](v11);
                  _Block_release(v11);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  uint64_t v12 = *(const void **)(a1 + 64);
                  if (v12) {
                    _Block_release(v12);
                  }
                }
                free((void *)a1);
              }
            }
          }
          return v7;
        }
LABEL_77:
        free(v14);
        goto LABEL_78;
      }
      if (!v31) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v40 = "__nw_protocol_copy_info";
      int v18 = "%{public}s called with null type, no backtrace";
    }
    else
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v40 = "__nw_protocol_copy_info";
      int v18 = "%{public}s called with null type, backtrace limit exceeded";
    }
    BOOL v34 = v23;
    os_log_type_t v35 = v24;
    uint32_t v36 = 12;
    goto LABEL_75;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v40 = "__nw_protocol_copy_info";
  uint64_t v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (__nwlog_fault(v19, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v40 = "__nw_protocol_copy_info";
        os_log_type_t v22 = "%{public}s called with null protocol";
LABEL_68:
        _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0xCu);
      }
    }
    else if (v37)
    {
      os_log_type_t v28 = (char *)__nw_create_backtrace_string();
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v29 = os_log_type_enabled(v20, type);
      if (v28)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v40 = "__nw_protocol_copy_info";
          __int16 v41 = 2082;
          unsigned int v42 = v28;
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v28);
        goto LABEL_69;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v40 = "__nw_protocol_copy_info";
        os_log_type_t v22 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_68;
      }
    }
    else
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v40 = "__nw_protocol_copy_info";
        os_log_type_t v22 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_68;
      }
    }
  }
LABEL_69:
  if (v19) {
    free(v19);
  }
  return 0;
}

BOOL nw_protocol_copy_info_is_valid(BOOL result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    return v1 && *(void *)(v1 + 224) != 0;
  }
  return result;
}

uint64_t nw_protocol_supports_external_data_quiet(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 176);
  if (!v3) {
    return 0;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5) {
      *(void *)(a1 + 88) = v5 + 1;
    }
    uint64_t v6 = ((uint64_t (*)(uint64_t))v3)(a1);
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(a1 + 88);
      if (v7)
      {
        uint64_t v8 = v7 - 1;
        *(void *)(a1 + 88) = v8;
        if (!v8)
        {
          uint64_t v9 = *(void (***)(void))(a1 + 64);
          if (v9)
          {
            *(void *)(a1 + 64) = 0;
            v9[2](v9);
            _Block_release(v9);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v10 = *(const void **)(a1 + 64);
            if (v10) {
              _Block_release(v10);
            }
          }
          free((void *)a1);
        }
      }
    }
    return v6;
  }

  return v3();
}

BOOL nw_protocol_supports_external_data_is_valid(BOOL result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    return v1 && *(void *)(v1 + 176) != 0;
  }
  return result;
}

uint64_t nw_protocol_waiting_for_output(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 40);
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = *(void *)(a1 + 88);
      if (v5) {
        *(void *)(a1 + 88) = v5 + 1;
      }
    }
    if (a2)
    {
      uint64_t v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = *(void *)(a1 + 24);
      if (v8)
      {
        uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 216);
        if (v9)
        {
          uint64_t v10 = v9(a1, a2);
          if (v6 != &nw_protocol_ref_counted_handle)
          {
LABEL_13:
            if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v12 = *(void *)(a1 + 88);
              if (v12)
              {
                uint64_t v13 = v12 - 1;
                *(void *)(a1 + 88) = v13;
                if (!v13)
                {
                  uint64_t v14 = *(void (***)(void))(a1 + 64);
                  if (v14)
                  {
                    *(void *)(a1 + 64) = 0;
                    v14[2](v14);
                    _Block_release(v14);
                  }
                  if (*(unsigned char *)(a1 + 72))
                  {
                    uint64_t v15 = *(const void **)(a1 + 64);
                    if (v15) {
                      _Block_release(v15);
                    }
                  }
                  free((void *)a1);
                }
              }
            }
            return v10;
          }
LABEL_12:
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v16 = *(void *)(a2 + 88);
            if (v16)
            {
              uint64_t v17 = v16 - 1;
              *(void *)(a2 + 88) = v17;
              if (!v17)
              {
                int v18 = *(void (***)(void))(a2 + 64);
                if (v18)
                {
                  *(void *)(a2 + 64) = 0;
                  v18[2](v18);
                  _Block_release(v18);
                }
                if (*(unsigned char *)(a2 + 72))
                {
                  uint64_t v19 = *(const void **)(a2 + 64);
                  if (v19) {
                    _Block_release(v19);
                  }
                }
                free((void *)a2);
              }
            }
          }
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      os_log_type_t v20 = *(const char **)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      uint32_t v46 = "__nw_protocol_waiting_for_output";
      if (!v20) {
        os_log_type_t v20 = "invalid";
      }
      __int16 v47 = 2082;
      BOOL v48 = (void *)v20;
      __int16 v49 = 2048;
      uint64_t v50 = a1;
      os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          os_log_type_t v24 = *(const char **)(a1 + 16);
          if (!v24) {
            os_log_type_t v24 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint32_t v46 = "__nw_protocol_waiting_for_output";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v24;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback";
LABEL_73:
          _os_log_impl(&dword_1830D4000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }
        if (!v43)
        {
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          __int16 v41 = *(const char **)(a1 + 16);
          if (!v41) {
            __int16 v41 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint32_t v46 = "__nw_protocol_waiting_for_output";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v41;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback, backtrace limit exceeded";
          goto LABEL_73;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35) {
            goto LABEL_74;
          }
          unsigned int v42 = *(const char **)(a1 + 16);
          if (!v42) {
            unsigned int v42 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint32_t v46 = "__nw_protocol_waiting_for_output";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v42;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback, no backtrace";
          goto LABEL_73;
        }
        if (v35)
        {
          uint32_t v36 = *(const char **)(a1 + 16);
          if (!v36) {
            uint32_t v36 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          uint32_t v46 = "__nw_protocol_waiting_for_output";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v36;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          __int16 v51 = 2082;
          os_log_type_t v52 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s protocol %{public}s (%p) has invalid waiting_for_output callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_74:
      if (v21) {
        free(v21);
      }
      uint64_t v10 = 0;
      if (v6 != &nw_protocol_ref_counted_handle) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint32_t v46 = "__nw_protocol_waiting_for_output";
    os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          uint32_t v46 = "__nw_protocol_waiting_for_output";
          __int16 v33 = "%{public}s called with null other_protocol";
LABEL_90:
          _os_log_impl(&dword_1830D4000, v31, v32, v33, buf, 0xCu);
        }
      }
      else if (v43)
      {
        BOOL v39 = (char *)__nw_create_backtrace_string();
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            uint32_t v46 = "__nw_protocol_waiting_for_output";
            __int16 v47 = 2082;
            BOOL v48 = v39;
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v39);
          goto LABEL_91;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          uint32_t v46 = "__nw_protocol_waiting_for_output";
          __int16 v33 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_90;
        }
      }
      else
      {
        BOOL v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          uint32_t v46 = "__nw_protocol_waiting_for_output";
          __int16 v33 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }
LABEL_91:
    if (v30) {
      free(v30);
    }
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint32_t v46 = "__nw_protocol_waiting_for_output";
  BOOL v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v46 = "__nw_protocol_waiting_for_output";
        BOOL v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      }
    }
    else if (v43)
    {
      char v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v46 = "__nw_protocol_waiting_for_output";
          __int16 v47 = 2082;
          BOOL v48 = v37;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v37);
        goto LABEL_85;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v46 = "__nw_protocol_waiting_for_output";
        BOOL v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }
    else
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v46 = "__nw_protocol_waiting_for_output";
        BOOL v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }
LABEL_85:
  if (v26) {
    free(v26);
  }
  return 0;
}

uint64_t nw_protocol_waiting_for_output_quiet(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = 0;
  if (a2)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 216);
    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(a1 + 88);
        if (v8) {
          *(void *)(a1 + 88) = v8 + 1;
        }
      }
      if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v9 = *(void *)(a2 + 88);
        if (v9) {
          *(void *)(a2 + 88) = v9 + 1;
        }
        uint64_t v5 = v6(a1, a2);
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v11 = *(void *)(a2 + 88);
          if (v11)
          {
            uint64_t v12 = v11 - 1;
            *(void *)(a2 + 88) = v12;
            if (!v12)
            {
              uint64_t v13 = *(void (***)(void))(a2 + 64);
              if (v13)
              {
                *(void *)(a2 + 64) = 0;
                v13[2](v13);
                _Block_release(v13);
              }
              if (*(unsigned char *)(a2 + 72))
              {
                uint64_t v14 = *(const void **)(a2 + 64);
                if (v14) {
                  _Block_release(v14);
                }
              }
              free((void *)a2);
            }
          }
        }
      }
      else
      {
        uint64_t v5 = v6(a1, a2);
      }
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v15 = *(void *)(a1 + 88);
        if (v15)
        {
          uint64_t v16 = v15 - 1;
          *(void *)(a1 + 88) = v16;
          if (!v16)
          {
            uint64_t v17 = *(void (***)(void))(a1 + 64);
            if (v17)
            {
              *(void *)(a1 + 64) = 0;
              v17[2](v17);
              _Block_release(v17);
            }
            if (*(unsigned char *)(a1 + 72))
            {
              int v18 = *(const void **)(a1 + 64);
              if (v18) {
                _Block_release(v18);
              }
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t nw_protocol_waiting_for_output_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 216) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_register_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v5 = *(void **)(a1 + 40);
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = *(void *)(a1 + 88);
      if (v6) {
        *(void *)(a1 + 88) = v6 + 1;
      }
    }
    if (a2)
    {
      uint64_t v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(a2 + 88);
        if (v8) {
          *(void *)(a2 + 88) = v8 + 1;
        }
      }
      if (a3)
      {
        uint64_t v9 = *(void *)(a1 + 24);
        if (v9)
        {
          uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 144);
          if (v10)
          {
            uint64_t v11 = v10(a1, a2);
            if (v7 == &nw_protocol_ref_counted_handle)
            {
LABEL_13:
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v17 = *(void *)(a2 + 88);
                if (v17)
                {
                  uint64_t v18 = v17 - 1;
                  *(void *)(a2 + 88) = v18;
                  if (!v18)
                  {
                    uint64_t v19 = *(void (***)(void))(a2 + 64);
                    if (v19)
                    {
                      *(void *)(a2 + 64) = 0;
                      v19[2](v19);
                      _Block_release(v19);
                    }
                    if (*(unsigned char *)(a2 + 72))
                    {
                      os_log_type_t v20 = *(const void **)(a2 + 64);
                      if (v20) {
                        _Block_release(v20);
                      }
                    }
                    free((void *)a2);
                  }
                }
              }
            }
LABEL_14:
            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v13 = *(void *)(a1 + 88);
              if (v13)
              {
                uint64_t v14 = v13 - 1;
                *(void *)(a1 + 88) = v14;
                if (!v14)
                {
                  uint64_t v15 = *(void (***)(void))(a1 + 64);
                  if (v15)
                  {
                    *(void *)(a1 + 64) = 0;
                    v15[2](v15);
                    _Block_release(v15);
                  }
                  if (*(unsigned char *)(a1 + 72))
                  {
                    uint64_t v16 = *(const void **)(a1 + 64);
                    if (v16) {
                      _Block_release(v16);
                    }
                  }
                  free((void *)a1);
                }
              }
            }
            return v11;
          }
        }
        __nwlog_obj();
        os_log_type_t v21 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        uint64_t v54 = "__nw_protocol_register_notification";
        if (!v21) {
          os_log_type_t v21 = "invalid";
        }
        __int16 v55 = 2082;
        os_log_type_t v56 = (void *)v21;
        __int16 v57 = 2048;
        uint64_t v58 = a1;
        os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v51 = 0;
        if (__nwlog_fault(v22, &type, &v51))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v23 = __nwlog_obj();
            os_log_type_t v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_107;
            }
            os_log_type_t v25 = *(const char **)(a1 + 16);
            if (!v25) {
              os_log_type_t v25 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v54 = "__nw_protocol_register_notification";
            __int16 v55 = 2082;
            os_log_type_t v56 = (void *)v25;
            __int16 v57 = 2048;
            uint64_t v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid register_notification callback";
LABEL_84:
            BOOL v48 = v23;
            os_log_type_t v49 = v24;
            uint32_t v50 = 32;
LABEL_106:
            _os_log_impl(&dword_1830D4000, v48, v49, v26, buf, v50);
            goto LABEL_107;
          }
          if (!v51)
          {
            os_log_type_t v23 = __nwlog_obj();
            os_log_type_t v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_107;
            }
            uint32_t v46 = *(const char **)(a1 + 16);
            if (!v46) {
              uint32_t v46 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v54 = "__nw_protocol_register_notification";
            __int16 v55 = 2082;
            os_log_type_t v56 = (void *)v46;
            __int16 v57 = 2048;
            uint64_t v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid register_notification callback, backtrace limit exceeded";
            goto LABEL_84;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v23 = __nwlog_obj();
          os_log_type_t v24 = type;
          BOOL v38 = os_log_type_enabled(v23, type);
          if (!backtrace_string)
          {
            if (!v38) {
              goto LABEL_107;
            }
            __int16 v47 = *(const char **)(a1 + 16);
            if (!v47) {
              __int16 v47 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v54 = "__nw_protocol_register_notification";
            __int16 v55 = 2082;
            os_log_type_t v56 = (void *)v47;
            __int16 v57 = 2048;
            uint64_t v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid register_notification callback, no backtrace";
            goto LABEL_84;
          }
          if (v38)
          {
            BOOL v39 = *(const char **)(a1 + 16);
            if (!v39) {
              BOOL v39 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            uint64_t v54 = "__nw_protocol_register_notification";
            __int16 v55 = 2082;
            os_log_type_t v56 = (void *)v39;
            __int16 v57 = 2048;
            uint64_t v58 = a1;
            __int16 v59 = 2082;
            __int16 v60 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s protocol %{public}s (%p) has invalid register_notification callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
        }
LABEL_107:
        if (!v22) {
          goto LABEL_109;
        }
        goto LABEL_108;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v54 = "__nw_protocol_register_notification";
      os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      if (!__nwlog_fault(v22, &type, &v51)) {
        goto LABEL_107;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v35 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (!os_log_type_enabled(v35, type)) {
          goto LABEL_107;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "__nw_protocol_register_notification";
        BOOL v26 = "%{public}s called with null type";
      }
      else if (v51)
      {
        uint64_t v44 = (char *)__nw_create_backtrace_string();
        BOOL v35 = __nwlog_obj();
        os_log_type_t v36 = type;
        BOOL v45 = os_log_type_enabled(v35, type);
        if (v44)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v54 = "__nw_protocol_register_notification";
            __int16 v55 = 2082;
            os_log_type_t v56 = v44;
            _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v44);
          if (!v22)
          {
LABEL_109:
            uint64_t v11 = 0;
            if (v7 == &nw_protocol_ref_counted_handle) {
              goto LABEL_13;
            }
            goto LABEL_14;
          }
LABEL_108:
          free(v22);
          goto LABEL_109;
        }
        if (!v45) {
          goto LABEL_107;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "__nw_protocol_register_notification";
        BOOL v26 = "%{public}s called with null type, no backtrace";
      }
      else
      {
        BOOL v35 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (!os_log_type_enabled(v35, type)) {
          goto LABEL_107;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "__nw_protocol_register_notification";
        BOOL v26 = "%{public}s called with null type, backtrace limit exceeded";
      }
      BOOL v48 = v35;
      os_log_type_t v49 = v36;
      uint32_t v50 = 12;
      goto LABEL_106;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v54 = "__nw_protocol_register_notification";
    BOOL v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (__nwlog_fault(v31, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v54 = "__nw_protocol_register_notification";
          BOOL v34 = "%{public}s called with null other_protocol";
LABEL_99:
          _os_log_impl(&dword_1830D4000, v32, v33, v34, buf, 0xCu);
        }
      }
      else if (v51)
      {
        unsigned int v42 = (char *)__nw_create_backtrace_string();
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        BOOL v43 = os_log_type_enabled(v32, type);
        if (v42)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v54 = "__nw_protocol_register_notification";
            __int16 v55 = 2082;
            os_log_type_t v56 = v42;
            _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v42);
          goto LABEL_100;
        }
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v54 = "__nw_protocol_register_notification";
          BOOL v34 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_99;
        }
      }
      else
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v54 = "__nw_protocol_register_notification";
          BOOL v34 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_99;
        }
      }
    }
LABEL_100:
    if (v31) {
      free(v31);
    }
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v54 = "__nw_protocol_register_notification";
  os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v51 = 0;
  if (__nwlog_fault(v27, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "__nw_protocol_register_notification";
        os_log_type_t v30 = "%{public}s called with null protocol";
LABEL_93:
        _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
      }
    }
    else if (v51)
    {
      BOOL v40 = (char *)__nw_create_backtrace_string();
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v41 = os_log_type_enabled(v28, type);
      if (v40)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v54 = "__nw_protocol_register_notification";
          __int16 v55 = 2082;
          os_log_type_t v56 = v40;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v40);
        goto LABEL_94;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "__nw_protocol_register_notification";
        os_log_type_t v30 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }
    }
    else
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "__nw_protocol_register_notification";
        os_log_type_t v30 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
    }
  }
LABEL_94:
  if (v27) {
    free(v27);
  }
  return 0;
}

uint64_t nw_protocol_unregister_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v5 = *(void **)(a1 + 40);
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = *(void *)(a1 + 88);
      if (v6) {
        *(void *)(a1 + 88) = v6 + 1;
      }
    }
    if (a2)
    {
      uint64_t v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(a2 + 88);
        if (v8) {
          *(void *)(a2 + 88) = v8 + 1;
        }
      }
      if (a3)
      {
        uint64_t v9 = *(void *)(a1 + 24);
        if (v9)
        {
          uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 152);
          if (v10)
          {
            uint64_t v11 = v10(a1, a2);
            if (v7 == &nw_protocol_ref_counted_handle)
            {
LABEL_13:
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v17 = *(void *)(a2 + 88);
                if (v17)
                {
                  uint64_t v18 = v17 - 1;
                  *(void *)(a2 + 88) = v18;
                  if (!v18)
                  {
                    uint64_t v19 = *(void (***)(void))(a2 + 64);
                    if (v19)
                    {
                      *(void *)(a2 + 64) = 0;
                      v19[2](v19);
                      _Block_release(v19);
                    }
                    if (*(unsigned char *)(a2 + 72))
                    {
                      os_log_type_t v20 = *(const void **)(a2 + 64);
                      if (v20) {
                        _Block_release(v20);
                      }
                    }
                    free((void *)a2);
                  }
                }
              }
            }
LABEL_14:
            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v13 = *(void *)(a1 + 88);
              if (v13)
              {
                uint64_t v14 = v13 - 1;
                *(void *)(a1 + 88) = v14;
                if (!v14)
                {
                  uint64_t v15 = *(void (***)(void))(a1 + 64);
                  if (v15)
                  {
                    *(void *)(a1 + 64) = 0;
                    v15[2](v15);
                    _Block_release(v15);
                  }
                  if (*(unsigned char *)(a1 + 72))
                  {
                    uint64_t v16 = *(const void **)(a1 + 64);
                    if (v16) {
                      _Block_release(v16);
                    }
                  }
                  free((void *)a1);
                }
              }
            }
            return v11;
          }
        }
        __nwlog_obj();
        os_log_type_t v21 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        uint64_t v54 = "__nw_protocol_unregister_notification";
        if (!v21) {
          os_log_type_t v21 = "invalid";
        }
        __int16 v55 = 2082;
        os_log_type_t v56 = (void *)v21;
        __int16 v57 = 2048;
        uint64_t v58 = a1;
        os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v51 = 0;
        if (__nwlog_fault(v22, &type, &v51))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v23 = __nwlog_obj();
            os_log_type_t v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_107;
            }
            os_log_type_t v25 = *(const char **)(a1 + 16);
            if (!v25) {
              os_log_type_t v25 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v54 = "__nw_protocol_unregister_notification";
            __int16 v55 = 2082;
            os_log_type_t v56 = (void *)v25;
            __int16 v57 = 2048;
            uint64_t v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback";
LABEL_84:
            BOOL v48 = v23;
            os_log_type_t v49 = v24;
            uint32_t v50 = 32;
LABEL_106:
            _os_log_impl(&dword_1830D4000, v48, v49, v26, buf, v50);
            goto LABEL_107;
          }
          if (!v51)
          {
            os_log_type_t v23 = __nwlog_obj();
            os_log_type_t v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_107;
            }
            uint32_t v46 = *(const char **)(a1 + 16);
            if (!v46) {
              uint32_t v46 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v54 = "__nw_protocol_unregister_notification";
            __int16 v55 = 2082;
            os_log_type_t v56 = (void *)v46;
            __int16 v57 = 2048;
            uint64_t v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, backtrace limit exceeded";
            goto LABEL_84;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v23 = __nwlog_obj();
          os_log_type_t v24 = type;
          BOOL v38 = os_log_type_enabled(v23, type);
          if (!backtrace_string)
          {
            if (!v38) {
              goto LABEL_107;
            }
            __int16 v47 = *(const char **)(a1 + 16);
            if (!v47) {
              __int16 v47 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v54 = "__nw_protocol_unregister_notification";
            __int16 v55 = 2082;
            os_log_type_t v56 = (void *)v47;
            __int16 v57 = 2048;
            uint64_t v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, no backtrace";
            goto LABEL_84;
          }
          if (v38)
          {
            BOOL v39 = *(const char **)(a1 + 16);
            if (!v39) {
              BOOL v39 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            uint64_t v54 = "__nw_protocol_unregister_notification";
            __int16 v55 = 2082;
            os_log_type_t v56 = (void *)v39;
            __int16 v57 = 2048;
            uint64_t v58 = a1;
            __int16 v59 = 2082;
            __int16 v60 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
        }
LABEL_107:
        if (!v22) {
          goto LABEL_109;
        }
        goto LABEL_108;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v54 = "__nw_protocol_unregister_notification";
      os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      if (!__nwlog_fault(v22, &type, &v51)) {
        goto LABEL_107;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v35 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (!os_log_type_enabled(v35, type)) {
          goto LABEL_107;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "__nw_protocol_unregister_notification";
        BOOL v26 = "%{public}s called with null type";
      }
      else if (v51)
      {
        uint64_t v44 = (char *)__nw_create_backtrace_string();
        BOOL v35 = __nwlog_obj();
        os_log_type_t v36 = type;
        BOOL v45 = os_log_type_enabled(v35, type);
        if (v44)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v54 = "__nw_protocol_unregister_notification";
            __int16 v55 = 2082;
            os_log_type_t v56 = v44;
            _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v44);
          if (!v22)
          {
LABEL_109:
            uint64_t v11 = 0;
            if (v7 == &nw_protocol_ref_counted_handle) {
              goto LABEL_13;
            }
            goto LABEL_14;
          }
LABEL_108:
          free(v22);
          goto LABEL_109;
        }
        if (!v45) {
          goto LABEL_107;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "__nw_protocol_unregister_notification";
        BOOL v26 = "%{public}s called with null type, no backtrace";
      }
      else
      {
        BOOL v35 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (!os_log_type_enabled(v35, type)) {
          goto LABEL_107;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "__nw_protocol_unregister_notification";
        BOOL v26 = "%{public}s called with null type, backtrace limit exceeded";
      }
      BOOL v48 = v35;
      os_log_type_t v49 = v36;
      uint32_t v50 = 12;
      goto LABEL_106;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v54 = "__nw_protocol_unregister_notification";
    BOOL v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (__nwlog_fault(v31, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v54 = "__nw_protocol_unregister_notification";
          BOOL v34 = "%{public}s called with null other_protocol";
LABEL_99:
          _os_log_impl(&dword_1830D4000, v32, v33, v34, buf, 0xCu);
        }
      }
      else if (v51)
      {
        unsigned int v42 = (char *)__nw_create_backtrace_string();
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        BOOL v43 = os_log_type_enabled(v32, type);
        if (v42)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v54 = "__nw_protocol_unregister_notification";
            __int16 v55 = 2082;
            os_log_type_t v56 = v42;
            _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v42);
          goto LABEL_100;
        }
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v54 = "__nw_protocol_unregister_notification";
          BOOL v34 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_99;
        }
      }
      else
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v54 = "__nw_protocol_unregister_notification";
          BOOL v34 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_99;
        }
      }
    }
LABEL_100:
    if (v31) {
      free(v31);
    }
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v54 = "__nw_protocol_unregister_notification";
  os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v51 = 0;
  if (__nwlog_fault(v27, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "__nw_protocol_unregister_notification";
        os_log_type_t v30 = "%{public}s called with null protocol";
LABEL_93:
        _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
      }
    }
    else if (v51)
    {
      BOOL v40 = (char *)__nw_create_backtrace_string();
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v41 = os_log_type_enabled(v28, type);
      if (v40)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v54 = "__nw_protocol_unregister_notification";
          __int16 v55 = 2082;
          os_log_type_t v56 = v40;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v40);
        goto LABEL_94;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "__nw_protocol_unregister_notification";
        os_log_type_t v30 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }
    }
    else
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "__nw_protocol_unregister_notification";
        os_log_type_t v30 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
    }
  }
LABEL_94:
  if (v27) {
    free(v27);
  }
  return 0;
}

uint64_t nw_protocol_register_notification_quiet(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = 0;
  if (a2)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 144);
    if (v7)
    {
      uint64_t v8 = *(void **)(a1 + 40);
      if (v8 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v9 = *(void *)(a1 + 88);
        if (v9) {
          *(void *)(a1 + 88) = v9 + 1;
        }
      }
      uint64_t v10 = *(void **)(a2 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v11 = *(void *)(a2 + 88);
        if (v11) {
          *(void *)(a2 + 88) = v11 + 1;
        }
      }
      if (a3)
      {
        uint64_t v6 = v7(a1, a2);
        if (v10 != &nw_protocol_ref_counted_handle)
        {
LABEL_14:
          if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v17 = *(void *)(a1 + 88);
            if (v17)
            {
              uint64_t v18 = v17 - 1;
              *(void *)(a1 + 88) = v18;
              if (!v18)
              {
                uint64_t v19 = *(void (***)(void))(a1 + 64);
                if (v19)
                {
                  *(void *)(a1 + 64) = 0;
                  v19[2](v19);
                  _Block_release(v19);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  os_log_type_t v20 = *(const void **)(a1 + 64);
                  if (v20) {
                    _Block_release(v20);
                  }
                }
                free((void *)a1);
              }
            }
          }
          return v6;
        }
LABEL_13:
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v13 = *(void *)(a2 + 88);
          if (v13)
          {
            uint64_t v14 = v13 - 1;
            *(void *)(a2 + 88) = v14;
            if (!v14)
            {
              uint64_t v15 = *(void (***)(void))(a2 + 64);
              if (v15)
              {
                *(void *)(a2 + 64) = 0;
                v15[2](v15);
                _Block_release(v15);
              }
              if (*(unsigned char *)(a2 + 72))
              {
                uint64_t v16 = *(const void **)(a2 + 64);
                if (v16) {
                  _Block_release(v16);
                }
              }
              free((void *)a2);
            }
          }
        }
        goto LABEL_14;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "__nw_protocol_register_notification";
      os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v27 = 0;
      if (__nwlog_fault(v21, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_48;
          }
          *(_DWORD *)buf = 136446210;
          os_log_type_t v30 = "__nw_protocol_register_notification";
          os_log_type_t v24 = "%{public}s called with null type";
LABEL_47:
          _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
          goto LABEL_48;
        }
        if (!v27)
        {
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_48;
          }
          *(_DWORD *)buf = 136446210;
          os_log_type_t v30 = "__nw_protocol_register_notification";
          os_log_type_t v24 = "%{public}s called with null type, backtrace limit exceeded";
          goto LABEL_47;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v26 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v26) {
            goto LABEL_48;
          }
          *(_DWORD *)buf = 136446210;
          os_log_type_t v30 = "__nw_protocol_register_notification";
          os_log_type_t v24 = "%{public}s called with null type, no backtrace";
          goto LABEL_47;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "__nw_protocol_register_notification";
          __int16 v31 = 2082;
          os_log_type_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
      }
LABEL_48:
      if (v21) {
        free(v21);
      }
      uint64_t v6 = 0;
      if (v10 != &nw_protocol_ref_counted_handle) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  return v6;
}

uint64_t nw_protocol_register_notification_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 144) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_unregister_notification_quiet(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = 0;
  if (a2)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 152);
    if (v7)
    {
      uint64_t v8 = *(void **)(a1 + 40);
      if (v8 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v9 = *(void *)(a1 + 88);
        if (v9) {
          *(void *)(a1 + 88) = v9 + 1;
        }
      }
      uint64_t v10 = *(void **)(a2 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v11 = *(void *)(a2 + 88);
        if (v11) {
          *(void *)(a2 + 88) = v11 + 1;
        }
      }
      if (a3)
      {
        uint64_t v6 = v7(a1, a2);
        if (v10 != &nw_protocol_ref_counted_handle)
        {
LABEL_14:
          if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v17 = *(void *)(a1 + 88);
            if (v17)
            {
              uint64_t v18 = v17 - 1;
              *(void *)(a1 + 88) = v18;
              if (!v18)
              {
                uint64_t v19 = *(void (***)(void))(a1 + 64);
                if (v19)
                {
                  *(void *)(a1 + 64) = 0;
                  v19[2](v19);
                  _Block_release(v19);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  os_log_type_t v20 = *(const void **)(a1 + 64);
                  if (v20) {
                    _Block_release(v20);
                  }
                }
                free((void *)a1);
              }
            }
          }
          return v6;
        }
LABEL_13:
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v13 = *(void *)(a2 + 88);
          if (v13)
          {
            uint64_t v14 = v13 - 1;
            *(void *)(a2 + 88) = v14;
            if (!v14)
            {
              uint64_t v15 = *(void (***)(void))(a2 + 64);
              if (v15)
              {
                *(void *)(a2 + 64) = 0;
                v15[2](v15);
                _Block_release(v15);
              }
              if (*(unsigned char *)(a2 + 72))
              {
                uint64_t v16 = *(const void **)(a2 + 64);
                if (v16) {
                  _Block_release(v16);
                }
              }
              free((void *)a2);
            }
          }
        }
        goto LABEL_14;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "__nw_protocol_unregister_notification";
      os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v27 = 0;
      if (__nwlog_fault(v21, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_48;
          }
          *(_DWORD *)buf = 136446210;
          os_log_type_t v30 = "__nw_protocol_unregister_notification";
          os_log_type_t v24 = "%{public}s called with null type";
LABEL_47:
          _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
          goto LABEL_48;
        }
        if (!v27)
        {
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_48;
          }
          *(_DWORD *)buf = 136446210;
          os_log_type_t v30 = "__nw_protocol_unregister_notification";
          os_log_type_t v24 = "%{public}s called with null type, backtrace limit exceeded";
          goto LABEL_47;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v26 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v26) {
            goto LABEL_48;
          }
          *(_DWORD *)buf = 136446210;
          os_log_type_t v30 = "__nw_protocol_unregister_notification";
          os_log_type_t v24 = "%{public}s called with null type, no backtrace";
          goto LABEL_47;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "__nw_protocol_unregister_notification";
          __int16 v31 = 2082;
          os_log_type_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
      }
LABEL_48:
      if (v21) {
        free(v21);
      }
      uint64_t v6 = 0;
      if (v10 != &nw_protocol_ref_counted_handle) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  return v6;
}

uint64_t nw_protocol_unregister_notification_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 152) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

void nw_protocol_notify(void *a1, uint64_t a2, int a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = a2;
    uint64_t v4 = (uint64_t)a1;
    uint64_t v5 = (void *)a1[5];
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = a1[11];
      if (v6) {
        a1[11] = v6 + 1;
      }
    }
    if (a2)
    {
      uint64_t v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(a2 + 88);
        if (v8) {
          *(void *)(a2 + 88) = v8 + 1;
        }
      }
      if (a3)
      {
        uint64_t v9 = a1[3];
        if (v9)
        {
          uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 160);
          if (v10)
          {
            v10(a1, a2);
            goto LABEL_13;
          }
        }
        __nwlog_obj();
        uint64_t v19 = *(const char **)(v4 + 16);
        *(_DWORD *)buf = 136446722;
        uint32_t v50 = "__nw_protocol_notify";
        if (!v19) {
          uint64_t v19 = "invalid";
        }
        __int16 v51 = 2082;
        os_log_type_t v52 = (void *)v19;
        __int16 v53 = 2048;
        uint64_t v54 = v4;
        os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v47 = 0;
        if (!__nwlog_fault(v20, &type, &v47)) {
          goto LABEL_108;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v21 = __nwlog_obj();
          os_log_type_t v22 = type;
          if (!os_log_type_enabled(v21, type)) {
            goto LABEL_108;
          }
          os_log_type_t v23 = *(const char **)(v4 + 16);
          if (!v23) {
            os_log_type_t v23 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint32_t v50 = "__nw_protocol_notify";
          __int16 v51 = 2082;
          os_log_type_t v52 = (void *)v23;
          __int16 v53 = 2048;
          uint64_t v54 = v4;
          os_log_type_t v24 = "%{public}s protocol %{public}s (%p) has invalid notify callback";
LABEL_87:
          uint64_t v44 = v21;
          os_log_type_t v45 = v22;
          uint32_t v46 = 32;
LABEL_107:
          _os_log_impl(&dword_1830D4000, v44, v45, v24, buf, v46);
          goto LABEL_108;
        }
        if (!v47)
        {
          os_log_type_t v21 = __nwlog_obj();
          os_log_type_t v22 = type;
          if (!os_log_type_enabled(v21, type)) {
            goto LABEL_108;
          }
          unsigned int v42 = *(const char **)(v4 + 16);
          if (!v42) {
            unsigned int v42 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint32_t v50 = "__nw_protocol_notify";
          __int16 v51 = 2082;
          os_log_type_t v52 = (void *)v42;
          __int16 v53 = 2048;
          uint64_t v54 = v4;
          os_log_type_t v24 = "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded";
          goto LABEL_87;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v21 = __nwlog_obj();
        os_log_type_t v22 = type;
        BOOL v34 = os_log_type_enabled(v21, type);
        if (!backtrace_string)
        {
          if (!v34) {
            goto LABEL_108;
          }
          BOOL v43 = *(const char **)(v4 + 16);
          if (!v43) {
            BOOL v43 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint32_t v50 = "__nw_protocol_notify";
          __int16 v51 = 2082;
          os_log_type_t v52 = (void *)v43;
          __int16 v53 = 2048;
          uint64_t v54 = v4;
          os_log_type_t v24 = "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace";
          goto LABEL_87;
        }
        if (v34)
        {
          BOOL v35 = *(const char **)(v4 + 16);
          if (!v35) {
            BOOL v35 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          uint32_t v50 = "__nw_protocol_notify";
          __int16 v51 = 2082;
          os_log_type_t v52 = (void *)v35;
          __int16 v53 = 2048;
          uint64_t v54 = v4;
          __int16 v55 = 2082;
          os_log_type_t v56 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
LABEL_108:
        if (!v20) {
          goto LABEL_13;
        }
        goto LABEL_109;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint32_t v50 = "__nw_protocol_notify";
      os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v47 = 0;
      if (!__nwlog_fault(v20, &type, &v47)) {
        goto LABEL_108;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (!os_log_type_enabled(v31, type)) {
          goto LABEL_108;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v50 = "__nw_protocol_notify";
        os_log_type_t v24 = "%{public}s called with null type";
      }
      else if (v47)
      {
        BOOL v40 = (char *)__nw_create_backtrace_string();
        __int16 v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v41 = os_log_type_enabled(v31, type);
        if (v40)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            uint32_t v50 = "__nw_protocol_notify";
            __int16 v51 = 2082;
            os_log_type_t v52 = v40;
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v40);
          if (!v20)
          {
LABEL_13:
            if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v15 = *(void *)(v3 + 88);
              if (v15)
              {
                uint64_t v16 = v15 - 1;
                *(void *)(v3 + 88) = v16;
                if (!v16)
                {
                  uint64_t v17 = *(void (***)(void))(v3 + 64);
                  if (v17)
                  {
                    *(void *)(v3 + 64) = 0;
                    v17[2](v17);
                    _Block_release(v17);
                  }
                  if (*(unsigned char *)(v3 + 72))
                  {
                    uint64_t v18 = *(const void **)(v3 + 64);
                    if (v18) {
                      _Block_release(v18);
                    }
                  }
LABEL_33:
                  free((void *)v3);
                }
              }
            }
LABEL_15:
            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v11 = *(void *)(v4 + 88);
              if (v11)
              {
                uint64_t v12 = v11 - 1;
                *(void *)(v4 + 88) = v12;
                if (!v12)
                {
                  uint64_t v13 = *(void (***)(void))(v4 + 64);
                  if (v13)
                  {
                    *(void *)(v4 + 64) = 0;
                    v13[2](v13);
                    _Block_release(v13);
                  }
                  if (*(unsigned char *)(v4 + 72))
                  {
                    uint64_t v14 = *(const void **)(v4 + 64);
                    if (v14) {
                      _Block_release(v14);
                    }
                  }
                  goto LABEL_25;
                }
              }
            }
            return;
          }
LABEL_109:
          free(v20);
          goto LABEL_13;
        }
        if (!v41) {
          goto LABEL_108;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v50 = "__nw_protocol_notify";
        os_log_type_t v24 = "%{public}s called with null type, no backtrace";
      }
      else
      {
        __int16 v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (!os_log_type_enabled(v31, type)) {
          goto LABEL_108;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v50 = "__nw_protocol_notify";
        os_log_type_t v24 = "%{public}s called with null type, backtrace limit exceeded";
      }
      uint64_t v44 = v31;
      os_log_type_t v45 = v32;
      uint32_t v46 = 12;
      goto LABEL_107;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint32_t v50 = "__nw_protocol_notify";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (__nwlog_fault((const char *)v3, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (!os_log_type_enabled(v28, type)) {
          goto LABEL_102;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v50 = "__nw_protocol_notify";
        os_log_type_t v30 = "%{public}s called with null other_protocol";
        goto LABEL_101;
      }
      if (!v47)
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (!os_log_type_enabled(v28, type)) {
          goto LABEL_102;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v50 = "__nw_protocol_notify";
        os_log_type_t v30 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_101;
      }
      BOOL v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v39 = os_log_type_enabled(v28, type);
      if (v38)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v50 = "__nw_protocol_notify";
          __int16 v51 = 2082;
          os_log_type_t v52 = v38;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v38);
        if (v3) {
          goto LABEL_33;
        }
        goto LABEL_15;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v50 = "__nw_protocol_notify";
        os_log_type_t v30 = "%{public}s called with null other_protocol, no backtrace";
LABEL_101:
        _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
      }
    }
LABEL_102:
    if (!v3) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint32_t v50 = "__nw_protocol_notify";
  uint64_t v4 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v47 = 0;
  if (__nwlog_fault((const char *)v4, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v50 = "__nw_protocol_notify";
      char v27 = "%{public}s called with null protocol";
    }
    else if (v47)
    {
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v37 = os_log_type_enabled(v25, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v50 = "__nw_protocol_notify";
          __int16 v51 = 2082;
          os_log_type_t v52 = v36;
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v36);
        if (v4) {
          goto LABEL_25;
        }
        return;
      }
      if (!v37) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v50 = "__nw_protocol_notify";
      char v27 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v50 = "__nw_protocol_notify";
      char v27 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v25, v26, v27, buf, 0xCu);
  }
LABEL_97:
  if (v4) {
LABEL_25:
  }
    free((void *)v4);
}

uint64_t nw_protocol_notify_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 160) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_updated_path_quiet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = 0;
  if (a3)
  {
    if (a2)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 168);
      if (v7)
      {
        uint64_t v8 = *(void **)(a1 + 40);
        if (v8 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v9 = *(void *)(a1 + 88);
          if (v9) {
            *(void *)(a1 + 88) = v9 + 1;
          }
        }
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v10 = *(void *)(a2 + 88);
          if (v10) {
            *(void *)(a2 + 88) = v10 + 1;
          }
          uint64_t v5 = v7(a1, a2);
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v12 = *(void *)(a2 + 88);
            if (v12)
            {
              uint64_t v13 = v12 - 1;
              *(void *)(a2 + 88) = v13;
              if (!v13)
              {
                uint64_t v14 = *(void (***)(void))(a2 + 64);
                if (v14)
                {
                  *(void *)(a2 + 64) = 0;
                  v14[2](v14);
                  _Block_release(v14);
                }
                if (*(unsigned char *)(a2 + 72))
                {
                  uint64_t v15 = *(const void **)(a2 + 64);
                  if (v15) {
                    _Block_release(v15);
                  }
                }
                free((void *)a2);
              }
            }
          }
        }
        else
        {
          uint64_t v5 = v7(a1, a2);
        }
        if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v16 = *(void *)(a1 + 88);
          if (v16)
          {
            uint64_t v17 = v16 - 1;
            *(void *)(a1 + 88) = v17;
            if (!v17)
            {
              uint64_t v18 = *(void (***)(void))(a1 + 64);
              if (v18)
              {
                *(void *)(a1 + 64) = 0;
                v18[2](v18);
                _Block_release(v18);
              }
              if (*(unsigned char *)(a1 + 72))
              {
                uint64_t v19 = *(const void **)(a1 + 64);
                if (v19) {
                  _Block_release(v19);
                }
              }
              free((void *)a1);
            }
          }
        }
      }
    }
  }
  return v5;
}

void nw_protocol_link_state(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = a2;
    uint64_t v4 = (uint64_t)a1;
    uint64_t v5 = (void *)a1[5];
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = a1[11];
      if (v6) {
        a1[11] = v6 + 1;
      }
    }
    if (a2)
    {
      uint64_t v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(a2 + 88);
        if (v8) {
          *(void *)(a2 + 88) = v8 + 1;
        }
      }
      if (a3)
      {
        uint64_t v9 = a1[3];
        if (v9)
        {
          uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 104);
          if (v10)
          {
            v10(a1, a2);
            goto LABEL_13;
          }
        }
        __nwlog_obj();
        uint64_t v19 = *(const char **)(v4 + 16);
        *(_DWORD *)buf = 136446722;
        uint32_t v50 = "__nw_protocol_link_state";
        if (!v19) {
          uint64_t v19 = "invalid";
        }
        __int16 v51 = 2082;
        os_log_type_t v52 = (void *)v19;
        __int16 v53 = 2048;
        uint64_t v54 = v4;
        os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v47 = 0;
        if (!__nwlog_fault(v20, &type, &v47)) {
          goto LABEL_108;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v21 = __nwlog_obj();
          os_log_type_t v22 = type;
          if (!os_log_type_enabled(v21, type)) {
            goto LABEL_108;
          }
          os_log_type_t v23 = *(const char **)(v4 + 16);
          if (!v23) {
            os_log_type_t v23 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint32_t v50 = "__nw_protocol_link_state";
          __int16 v51 = 2082;
          os_log_type_t v52 = (void *)v23;
          __int16 v53 = 2048;
          uint64_t v54 = v4;
          os_log_type_t v24 = "%{public}s protocol %{public}s (%p) has invalid link_state callback";
LABEL_87:
          uint64_t v44 = v21;
          os_log_type_t v45 = v22;
          uint32_t v46 = 32;
LABEL_107:
          _os_log_impl(&dword_1830D4000, v44, v45, v24, buf, v46);
          goto LABEL_108;
        }
        if (!v47)
        {
          os_log_type_t v21 = __nwlog_obj();
          os_log_type_t v22 = type;
          if (!os_log_type_enabled(v21, type)) {
            goto LABEL_108;
          }
          unsigned int v42 = *(const char **)(v4 + 16);
          if (!v42) {
            unsigned int v42 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint32_t v50 = "__nw_protocol_link_state";
          __int16 v51 = 2082;
          os_log_type_t v52 = (void *)v42;
          __int16 v53 = 2048;
          uint64_t v54 = v4;
          os_log_type_t v24 = "%{public}s protocol %{public}s (%p) has invalid link_state callback, backtrace limit exceeded";
          goto LABEL_87;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v21 = __nwlog_obj();
        os_log_type_t v22 = type;
        BOOL v34 = os_log_type_enabled(v21, type);
        if (!backtrace_string)
        {
          if (!v34) {
            goto LABEL_108;
          }
          BOOL v43 = *(const char **)(v4 + 16);
          if (!v43) {
            BOOL v43 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          uint32_t v50 = "__nw_protocol_link_state";
          __int16 v51 = 2082;
          os_log_type_t v52 = (void *)v43;
          __int16 v53 = 2048;
          uint64_t v54 = v4;
          os_log_type_t v24 = "%{public}s protocol %{public}s (%p) has invalid link_state callback, no backtrace";
          goto LABEL_87;
        }
        if (v34)
        {
          BOOL v35 = *(const char **)(v4 + 16);
          if (!v35) {
            BOOL v35 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          uint32_t v50 = "__nw_protocol_link_state";
          __int16 v51 = 2082;
          os_log_type_t v52 = (void *)v35;
          __int16 v53 = 2048;
          uint64_t v54 = v4;
          __int16 v55 = 2082;
          os_log_type_t v56 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s protocol %{public}s (%p) has invalid link_state callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
LABEL_108:
        if (!v20) {
          goto LABEL_13;
        }
        goto LABEL_109;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint32_t v50 = "__nw_protocol_link_state";
      os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v47 = 0;
      if (!__nwlog_fault(v20, &type, &v47)) {
        goto LABEL_108;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (!os_log_type_enabled(v31, type)) {
          goto LABEL_108;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v50 = "__nw_protocol_link_state";
        os_log_type_t v24 = "%{public}s called with null link_info";
      }
      else if (v47)
      {
        BOOL v40 = (char *)__nw_create_backtrace_string();
        __int16 v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v41 = os_log_type_enabled(v31, type);
        if (v40)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            uint32_t v50 = "__nw_protocol_link_state";
            __int16 v51 = 2082;
            os_log_type_t v52 = v40;
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null link_info, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v40);
          if (!v20)
          {
LABEL_13:
            if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v15 = *(void *)(v3 + 88);
              if (v15)
              {
                uint64_t v16 = v15 - 1;
                *(void *)(v3 + 88) = v16;
                if (!v16)
                {
                  uint64_t v17 = *(void (***)(void))(v3 + 64);
                  if (v17)
                  {
                    *(void *)(v3 + 64) = 0;
                    v17[2](v17);
                    _Block_release(v17);
                  }
                  if (*(unsigned char *)(v3 + 72))
                  {
                    uint64_t v18 = *(const void **)(v3 + 64);
                    if (v18) {
                      _Block_release(v18);
                    }
                  }
LABEL_33:
                  free((void *)v3);
                }
              }
            }
LABEL_15:
            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v11 = *(void *)(v4 + 88);
              if (v11)
              {
                uint64_t v12 = v11 - 1;
                *(void *)(v4 + 88) = v12;
                if (!v12)
                {
                  uint64_t v13 = *(void (***)(void))(v4 + 64);
                  if (v13)
                  {
                    *(void *)(v4 + 64) = 0;
                    v13[2](v13);
                    _Block_release(v13);
                  }
                  if (*(unsigned char *)(v4 + 72))
                  {
                    uint64_t v14 = *(const void **)(v4 + 64);
                    if (v14) {
                      _Block_release(v14);
                    }
                  }
                  goto LABEL_25;
                }
              }
            }
            return;
          }
LABEL_109:
          free(v20);
          goto LABEL_13;
        }
        if (!v41) {
          goto LABEL_108;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v50 = "__nw_protocol_link_state";
        os_log_type_t v24 = "%{public}s called with null link_info, no backtrace";
      }
      else
      {
        __int16 v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (!os_log_type_enabled(v31, type)) {
          goto LABEL_108;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v50 = "__nw_protocol_link_state";
        os_log_type_t v24 = "%{public}s called with null link_info, backtrace limit exceeded";
      }
      uint64_t v44 = v31;
      os_log_type_t v45 = v32;
      uint32_t v46 = 12;
      goto LABEL_107;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint32_t v50 = "__nw_protocol_link_state";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (__nwlog_fault((const char *)v3, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (!os_log_type_enabled(v28, type)) {
          goto LABEL_102;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v50 = "__nw_protocol_link_state";
        os_log_type_t v30 = "%{public}s called with null other_protocol";
        goto LABEL_101;
      }
      if (!v47)
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (!os_log_type_enabled(v28, type)) {
          goto LABEL_102;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v50 = "__nw_protocol_link_state";
        os_log_type_t v30 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_101;
      }
      BOOL v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v39 = os_log_type_enabled(v28, type);
      if (v38)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v50 = "__nw_protocol_link_state";
          __int16 v51 = 2082;
          os_log_type_t v52 = v38;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v38);
        if (v3) {
          goto LABEL_33;
        }
        goto LABEL_15;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v50 = "__nw_protocol_link_state";
        os_log_type_t v30 = "%{public}s called with null other_protocol, no backtrace";
LABEL_101:
        _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
      }
    }
LABEL_102:
    if (!v3) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint32_t v50 = "__nw_protocol_link_state";
  uint64_t v4 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v47 = 0;
  if (__nwlog_fault((const char *)v4, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v50 = "__nw_protocol_link_state";
      char v27 = "%{public}s called with null protocol";
    }
    else if (v47)
    {
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v37 = os_log_type_enabled(v25, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v50 = "__nw_protocol_link_state";
          __int16 v51 = 2082;
          os_log_type_t v52 = v36;
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v36);
        if (v4) {
          goto LABEL_25;
        }
        return;
      }
      if (!v37) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v50 = "__nw_protocol_link_state";
      char v27 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v50 = "__nw_protocol_link_state";
      char v27 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v25, v26, v27, buf, 0xCu);
  }
LABEL_97:
  if (v4) {
LABEL_25:
  }
    free((void *)v4);
}

void nw_protocol_link_state_quiet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4)
    {
      if (a3)
      {
        if (a2)
        {
          uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 104);
          if (v6)
          {
            uint64_t v7 = *(void **)(a1 + 40);
            if (v7 == &nw_protocol_ref_counted_handle)
            {
              uint64_t v8 = *(void *)(a1 + 88);
              if (v8) {
                *(void *)(a1 + 88) = v8 + 1;
              }
            }
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v9 = *(void *)(a2 + 88);
              if (v9) {
                *(void *)(a2 + 88) = v9 + 1;
              }
              v6(a1, a2);
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v10 = *(void *)(a2 + 88);
                if (v10)
                {
                  uint64_t v11 = v10 - 1;
                  *(void *)(a2 + 88) = v11;
                  if (!v11)
                  {
                    uint64_t v12 = *(void (***)(void))(a2 + 64);
                    if (v12)
                    {
                      *(void *)(a2 + 64) = 0;
                      v12[2](v12);
                      _Block_release(v12);
                    }
                    if (*(unsigned char *)(a2 + 72))
                    {
                      uint64_t v13 = *(const void **)(a2 + 64);
                      if (v13) {
                        _Block_release(v13);
                      }
                    }
                    free((void *)a2);
                  }
                }
              }
            }
            else
            {
              v6(a1, a2);
            }
            if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v14 = *(void *)(a1 + 88);
              if (v14)
              {
                uint64_t v15 = v14 - 1;
                *(void *)(a1 + 88) = v15;
                if (!v15)
                {
                  uint64_t v16 = *(void (***)(void))(a1 + 64);
                  if (v16)
                  {
                    *(void *)(a1 + 64) = 0;
                    v16[2](v16);
                    _Block_release(v16);
                  }
                  if (*(unsigned char *)(a1 + 72))
                  {
                    uint64_t v17 = *(const void **)(a1 + 64);
                    if (v17) {
                      _Block_release(v17);
                    }
                  }
                  free((void *)a1);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t nw_protocol_link_state_is_valid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3) {
      LODWORD(v3) = *(void *)(v3 + 104) != 0;
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (!a2) {
    LODWORD(v3) = 0;
  }
  if (a3) {
    return v3;
  }
  else {
    return 0;
  }
}

void nw_protocol_callbacks_set_supports_external_data(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 176) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_supports_external_data";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_supports_external_data";
        uint64_t v5 = "%{public}s called with null supports_external_data";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_supports_external_data";
        uint64_t v5 = "%{public}s called with null supports_external_data, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v13 = "nw_protocol_callbacks_set_supports_external_data";
          __int16 v14 = 2082;
          uint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null supports_external_data, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_supports_external_data";
        uint64_t v5 = "%{public}s called with null supports_external_data, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_supports_external_data";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_supports_external_data";
      uint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_supports_external_data";
      uint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    uint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_supports_external_data";
      uint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v13 = "nw_protocol_callbacks_set_supports_external_data";
      __int16 v14 = 2082;
      uint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_set_identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)(a1 + 16) = a2;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v11 = "__nw_protocol_set_identifier";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v11 = "__nw_protocol_set_identifier";
      uint64_t v5 = "%{public}s called with null protocol";
      goto LABEL_17;
    }
    if (!v8)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v11 = "__nw_protocol_set_identifier";
      uint64_t v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v11 = "__nw_protocol_set_identifier";
        __int16 v12 = 2082;
        uint64_t v13 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v11 = "__nw_protocol_set_identifier";
      uint64_t v5 = "%{public}s called with null protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
}

void nw_protocol_set_callbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)(a1 + 24) = a2;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v11 = "__nw_protocol_set_callbacks";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v11 = "__nw_protocol_set_callbacks";
      uint64_t v5 = "%{public}s called with null protocol";
      goto LABEL_17;
    }
    if (!v8)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v11 = "__nw_protocol_set_callbacks";
      uint64_t v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v11 = "__nw_protocol_set_callbacks";
        __int16 v12 = 2082;
        uint64_t v13 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v11 = "__nw_protocol_set_callbacks";
      uint64_t v5 = "%{public}s called with null protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
}

void nw_protocol_set_handle(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)(a1 + 40) = a2;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v11 = "__nw_protocol_set_handle";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v11 = "__nw_protocol_set_handle";
      uint64_t v5 = "%{public}s called with null protocol";
      goto LABEL_17;
    }
    if (!v8)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v11 = "__nw_protocol_set_handle";
      uint64_t v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v11 = "__nw_protocol_set_handle";
        __int16 v12 = 2082;
        uint64_t v13 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v11 = "__nw_protocol_set_handle";
      uint64_t v5 = "%{public}s called with null protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
}

uint64_t nw_protocol_zombie_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v18 = "nw_protocol_zombie_remove_listen_handler";
  __int16 v19 = 2080;
  os_log_type_t v20 = identifier;
  __int16 v21 = 2048;
  os_log_type_t v22 = a1;
  os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v4, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      BOOL v7 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v7 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v18 = "nw_protocol_zombie_remove_listen_handler";
      __int16 v19 = 2080;
      os_log_type_t v20 = v7;
      __int16 v21 = 2048;
      os_log_type_t v22 = a1;
      char v8 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v5, v6, v8, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v15)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v12 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v18 = "nw_protocol_zombie_remove_listen_handler";
      __int16 v19 = 2080;
      os_log_type_t v20 = v12;
      __int16 v21 = 2048;
      os_log_type_t v22 = a1;
      char v8 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v10) {
        goto LABEL_30;
      }
      uint64_t v13 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        uint64_t v13 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v18 = "nw_protocol_zombie_remove_listen_handler";
      __int16 v19 = 2080;
      os_log_type_t v20 = v13;
      __int16 v21 = 2048;
      os_log_type_t v22 = a1;
      char v8 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v10)
    {
      uint64_t v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        uint64_t v11 = a1->identifier;
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v18 = "nw_protocol_zombie_remove_listen_handler";
      __int16 v19 = 2080;
      os_log_type_t v20 = v11;
      __int16 v21 = 2048;
      os_log_type_t v22 = a1;
      __int16 v23 = 2082;
      os_log_type_t v24 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v4) {
    free(v4);
  }
  return 0;
}

uint64_t nw_protocol_zombie_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v18 = "nw_protocol_zombie_add_listen_handler";
  __int16 v19 = 2080;
  os_log_type_t v20 = identifier;
  __int16 v21 = 2048;
  os_log_type_t v22 = a1;
  os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v4, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      BOOL v7 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v7 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v18 = "nw_protocol_zombie_add_listen_handler";
      __int16 v19 = 2080;
      os_log_type_t v20 = v7;
      __int16 v21 = 2048;
      os_log_type_t v22 = a1;
      char v8 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v5, v6, v8, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v15)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v12 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v18 = "nw_protocol_zombie_add_listen_handler";
      __int16 v19 = 2080;
      os_log_type_t v20 = v12;
      __int16 v21 = 2048;
      os_log_type_t v22 = a1;
      char v8 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v10) {
        goto LABEL_30;
      }
      uint64_t v13 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        uint64_t v13 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v18 = "nw_protocol_zombie_add_listen_handler";
      __int16 v19 = 2080;
      os_log_type_t v20 = v13;
      __int16 v21 = 2048;
      os_log_type_t v22 = a1;
      char v8 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v10)
    {
      uint64_t v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        uint64_t v11 = a1->identifier;
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v18 = "nw_protocol_zombie_add_listen_handler";
      __int16 v19 = 2080;
      os_log_type_t v20 = v11;
      __int16 v21 = 2048;
      os_log_type_t v22 = a1;
      __int16 v23 = 2082;
      os_log_type_t v24 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v4) {
    free(v4);
  }
  return 0;
}

void nw_protocol_zombie_notify(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v6 = "invalid";
  if (a1 && *(void *)(a1 + 16)) {
    os_log_type_t v6 = *(const char **)(a1 + 16);
  }
  BOOL v7 = "invalid";
  if (a2 && *(void *)(a2 + 16)) {
    BOOL v7 = *(const char **)(a2 + 16);
  }
  *(_DWORD *)buf = 136447490;
  uint64_t v25 = "nw_protocol_zombie_notify";
  __int16 v26 = 2080;
  char v27 = v6;
  __int16 v28 = 2048;
  uint64_t v29 = a1;
  __int16 v30 = 2080;
  __int16 v31 = v7;
  __int16 v32 = 2048;
  uint64_t v33 = a2;
  __int16 v34 = 1024;
  int v35 = a3;
  char v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v8, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      uint64_t v11 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        uint64_t v11 = *(const char **)(a1 + 16);
      }
      __int16 v12 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        __int16 v12 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447490;
      uint64_t v25 = "nw_protocol_zombie_notify";
      __int16 v26 = 2080;
      char v27 = v11;
      __int16 v28 = 2048;
      uint64_t v29 = a1;
      __int16 v30 = 2080;
      __int16 v31 = v12;
      __int16 v32 = 2048;
      uint64_t v33 = a2;
      __int16 v34 = 1024;
      int v35 = a3;
      uint64_t v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v9, v10, v13, buf, 0x3Au);
      goto LABEL_45;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      uint64_t v18 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        uint64_t v18 = *(const char **)(a1 + 16);
      }
      __int16 v19 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        __int16 v19 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447490;
      uint64_t v25 = "nw_protocol_zombie_notify";
      __int16 v26 = 2080;
      char v27 = v18;
      __int16 v28 = 2048;
      uint64_t v29 = a1;
      __int16 v30 = 2080;
      __int16 v31 = v19;
      __int16 v32 = 2048;
      uint64_t v33 = a2;
      __int16 v34 = 1024;
      int v35 = a3;
      uint64_t v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = gLogObj;
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v15) {
        goto LABEL_45;
      }
      os_log_type_t v20 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        os_log_type_t v20 = *(const char **)(a1 + 16);
      }
      __int16 v21 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        __int16 v21 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447490;
      uint64_t v25 = "nw_protocol_zombie_notify";
      __int16 v26 = 2080;
      char v27 = v20;
      __int16 v28 = 2048;
      uint64_t v29 = a1;
      __int16 v30 = 2080;
      __int16 v31 = v21;
      __int16 v32 = 2048;
      uint64_t v33 = a2;
      __int16 v34 = 1024;
      int v35 = a3;
      uint64_t v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, no backtrace";
      goto LABEL_44;
    }
    if (v15)
    {
      uint64_t v16 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        uint64_t v16 = *(const char **)(a1 + 16);
      }
      uint64_t v17 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        uint64_t v17 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447746;
      uint64_t v25 = "nw_protocol_zombie_notify";
      __int16 v26 = 2080;
      char v27 = v16;
      __int16 v28 = 2048;
      uint64_t v29 = a1;
      __int16 v30 = 2080;
      __int16 v31 = v17;
      __int16 v32 = 2048;
      uint64_t v33 = a2;
      __int16 v34 = 1024;
      int v35 = a3;
      __int16 v36 = 2082;
      BOOL v37 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, dumping backtrace:%{public}s", buf, 0x44u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v8) {
    free(v8);
  }
}

uint64_t nw_protocol_zombie_unregister_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v6 = "invalid";
  if (a1 && *(void *)(a1 + 16)) {
    os_log_type_t v6 = *(const char **)(a1 + 16);
  }
  BOOL v7 = "invalid";
  if (a2 && *(void *)(a2 + 16)) {
    BOOL v7 = *(const char **)(a2 + 16);
  }
  *(_DWORD *)buf = 136447490;
  __int16 v26 = "nw_protocol_zombie_unregister_notification";
  __int16 v27 = 2080;
  __int16 v28 = v6;
  __int16 v29 = 2048;
  uint64_t v30 = a1;
  __int16 v31 = 2080;
  __int16 v32 = v7;
  __int16 v33 = 2048;
  uint64_t v34 = a2;
  __int16 v35 = 1024;
  int v36 = a3;
  char v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      uint64_t v11 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        uint64_t v11 = *(const char **)(a1 + 16);
      }
      __int16 v12 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        __int16 v12 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447490;
      __int16 v26 = "nw_protocol_zombie_unregister_notification";
      __int16 v27 = 2080;
      __int16 v28 = v11;
      __int16 v29 = 2048;
      uint64_t v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v12;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = a3;
      uint64_t v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v9, v10, v13, buf, 0x3Au);
      goto LABEL_45;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      uint64_t v18 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        uint64_t v18 = *(const char **)(a1 + 16);
      }
      __int16 v19 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        __int16 v19 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447490;
      __int16 v26 = "nw_protocol_zombie_unregister_notification";
      __int16 v27 = 2080;
      __int16 v28 = v18;
      __int16 v29 = 2048;
      uint64_t v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v19;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = a3;
      uint64_t v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = gLogObj;
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v15) {
        goto LABEL_45;
      }
      os_log_type_t v20 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        os_log_type_t v20 = *(const char **)(a1 + 16);
      }
      __int16 v21 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        __int16 v21 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447490;
      __int16 v26 = "nw_protocol_zombie_unregister_notification";
      __int16 v27 = 2080;
      __int16 v28 = v20;
      __int16 v29 = 2048;
      uint64_t v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v21;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = a3;
      uint64_t v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, no backtrace";
      goto LABEL_44;
    }
    if (v15)
    {
      uint64_t v16 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        uint64_t v16 = *(const char **)(a1 + 16);
      }
      uint64_t v17 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        uint64_t v17 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447746;
      __int16 v26 = "nw_protocol_zombie_unregister_notification";
      __int16 v27 = 2080;
      __int16 v28 = v16;
      __int16 v29 = 2048;
      uint64_t v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v17;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = a3;
      __int16 v37 = 2082;
      uint64_t v38 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, dumping backtrace:%{public}s", buf, 0x44u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v8) {
    free(v8);
  }
  return 0;
}

uint64_t nw_protocol_zombie_register_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v6 = "invalid";
  if (a1 && *(void *)(a1 + 16)) {
    os_log_type_t v6 = *(const char **)(a1 + 16);
  }
  BOOL v7 = "invalid";
  if (a2 && *(void *)(a2 + 16)) {
    BOOL v7 = *(const char **)(a2 + 16);
  }
  *(_DWORD *)buf = 136447490;
  __int16 v26 = "nw_protocol_zombie_register_notification";
  __int16 v27 = 2080;
  __int16 v28 = v6;
  __int16 v29 = 2048;
  uint64_t v30 = a1;
  __int16 v31 = 2080;
  __int16 v32 = v7;
  __int16 v33 = 2048;
  uint64_t v34 = a2;
  __int16 v35 = 1024;
  int v36 = a3;
  char v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      uint64_t v11 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        uint64_t v11 = *(const char **)(a1 + 16);
      }
      __int16 v12 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        __int16 v12 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447490;
      __int16 v26 = "nw_protocol_zombie_register_notification";
      __int16 v27 = 2080;
      __int16 v28 = v11;
      __int16 v29 = 2048;
      uint64_t v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v12;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = a3;
      uint64_t v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v9, v10, v13, buf, 0x3Au);
      goto LABEL_45;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      uint64_t v18 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        uint64_t v18 = *(const char **)(a1 + 16);
      }
      __int16 v19 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        __int16 v19 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447490;
      __int16 v26 = "nw_protocol_zombie_register_notification";
      __int16 v27 = 2080;
      __int16 v28 = v18;
      __int16 v29 = 2048;
      uint64_t v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v19;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = a3;
      uint64_t v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = gLogObj;
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v15) {
        goto LABEL_45;
      }
      os_log_type_t v20 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        os_log_type_t v20 = *(const char **)(a1 + 16);
      }
      __int16 v21 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        __int16 v21 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447490;
      __int16 v26 = "nw_protocol_zombie_register_notification";
      __int16 v27 = 2080;
      __int16 v28 = v20;
      __int16 v29 = 2048;
      uint64_t v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v21;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = a3;
      uint64_t v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, no backtrace";
      goto LABEL_44;
    }
    if (v15)
    {
      uint64_t v16 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        uint64_t v16 = *(const char **)(a1 + 16);
      }
      uint64_t v17 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        uint64_t v17 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447746;
      __int16 v26 = "nw_protocol_zombie_register_notification";
      __int16 v27 = 2080;
      __int16 v28 = v16;
      __int16 v29 = 2048;
      uint64_t v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v17;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = a3;
      __int16 v37 = 2082;
      uint64_t v38 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s protocol %s:%p, other_protocol %s:%p, type %d, dumping backtrace:%{public}s", buf, 0x44u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v8) {
    free(v8);
  }
  return 0;
}

uint64_t nw_protocol_zombie_copy_info(uint64_t a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v4 = "invalid";
  if (a1 && *(void *)(a1 + 16)) {
    os_log_type_t v4 = *(const char **)(a1 + 16);
  }
  *(_DWORD *)buf = 136446978;
  __int16 v19 = "nw_protocol_zombie_copy_info";
  __int16 v20 = 2080;
  __int16 v21 = v4;
  __int16 v22 = 2048;
  uint64_t v23 = a1;
  __int16 v24 = 1024;
  int v25 = a2;
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v5, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      char v8 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        char v8 = *(const char **)(a1 + 16);
      }
      *(_DWORD *)buf = 136446978;
      __int16 v19 = "nw_protocol_zombie_copy_info";
      __int16 v20 = 2080;
      __int16 v21 = v8;
      __int16 v22 = 2048;
      uint64_t v23 = a1;
      __int16 v24 = 1024;
      int v25 = a2;
      BOOL v9 = "%{public}s protocol %s:%p, type %d";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v6, v7, v9, buf, 0x26u);
      goto LABEL_30;
    }
    if (!v16)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      uint64_t v13 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        uint64_t v13 = *(const char **)(a1 + 16);
      }
      *(_DWORD *)buf = 136446978;
      __int16 v19 = "nw_protocol_zombie_copy_info";
      __int16 v20 = 2080;
      __int16 v21 = v13;
      __int16 v22 = 2048;
      uint64_t v23 = a1;
      __int16 v24 = 1024;
      int v25 = a2;
      BOOL v9 = "%{public}s protocol %s:%p, type %d, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v6 = gLogObj;
    os_log_type_t v7 = type;
    BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v11) {
        goto LABEL_30;
      }
      uint64_t v14 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        uint64_t v14 = *(const char **)(a1 + 16);
      }
      *(_DWORD *)buf = 136446978;
      __int16 v19 = "nw_protocol_zombie_copy_info";
      __int16 v20 = 2080;
      __int16 v21 = v14;
      __int16 v22 = 2048;
      uint64_t v23 = a1;
      __int16 v24 = 1024;
      int v25 = a2;
      BOOL v9 = "%{public}s protocol %s:%p, type %d, no backtrace";
      goto LABEL_29;
    }
    if (v11)
    {
      __int16 v12 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        __int16 v12 = *(const char **)(a1 + 16);
      }
      *(_DWORD *)buf = 136447234;
      __int16 v19 = "nw_protocol_zombie_copy_info";
      __int16 v20 = 2080;
      __int16 v21 = v12;
      __int16 v22 = 2048;
      uint64_t v23 = a1;
      __int16 v24 = 1024;
      int v25 = a2;
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s protocol %s:%p, type %d, dumping backtrace:%{public}s", buf, 0x30u);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v5) {
    free(v5);
  }
  return 0;
}

uint64_t nw_protocol_zombie_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  uint64_t v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    uint64_t v5 = a2->identifier;
  }
  *(_DWORD *)buf = 136447234;
  __int16 v24 = "nw_protocol_zombie_waiting_for_output";
  __int16 v25 = 2080;
  __int16 v26 = identifier;
  __int16 v27 = 2048;
  uint64_t v28 = a1;
  __int16 v29 = 2080;
  uint64_t v30 = v5;
  __int16 v31 = 2048;
  __int16 v32 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v6, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v9 = a1->identifier;
      }
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        os_log_type_t v10 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v24 = "nw_protocol_zombie_waiting_for_output";
      __int16 v25 = 2080;
      __int16 v26 = v9;
      __int16 v27 = 2048;
      uint64_t v28 = a1;
      __int16 v29 = 2080;
      uint64_t v30 = v10;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, input_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v24 = "nw_protocol_zombie_waiting_for_output";
      __int16 v25 = 2080;
      __int16 v26 = v16;
      __int16 v27 = 2048;
      uint64_t v28 = a1;
      __int16 v29 = 2080;
      uint64_t v30 = v17;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, input_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      uint64_t v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        uint64_t v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v24 = "nw_protocol_zombie_waiting_for_output";
      __int16 v25 = 2080;
      __int16 v26 = v18;
      __int16 v27 = 2048;
      uint64_t v28 = a1;
      __int16 v29 = 2080;
      uint64_t v30 = v19;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, input_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      uint64_t v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        uint64_t v14 = a1->identifier;
      }
      BOOL v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v15 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v24 = "nw_protocol_zombie_waiting_for_output";
      __int16 v25 = 2080;
      __int16 v26 = v14;
      __int16 v27 = 2048;
      uint64_t v28 = a1;
      __int16 v29 = 2080;
      uint64_t v30 = v15;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      __int16 v33 = 2082;
      uint64_t v34 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, input_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t nw_protocol_zombie_supports_external_data(nw_protocol *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v17 = "nw_protocol_zombie_supports_external_data";
  __int16 v18 = 2080;
  __int16 v19 = identifier;
  __int16 v20 = 2048;
  char v21 = a1;
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      os_log_type_t v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v6 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_supports_external_data";
      __int16 v18 = 2080;
      __int16 v19 = v6;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      BOOL v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v11 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_supports_external_data";
      __int16 v18 = 2080;
      __int16 v19 = v11;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v4 = gLogObj;
    os_log_type_t v5 = type;
    BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_30;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v12 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_supports_external_data";
      __int16 v18 = 2080;
      __int16 v19 = v12;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v10 = a1->identifier;
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v17 = "nw_protocol_zombie_supports_external_data";
      __int16 v18 = 2080;
      __int16 v19 = v10;
      __int16 v20 = 2048;
      char v21 = a1;
      __int16 v22 = 2082;
      uint64_t v23 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_zombie_reset(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v5 = a2->identifier;
  }
  *(_DWORD *)buf = 136447234;
  uint64_t v24 = "nw_protocol_zombie_reset";
  __int16 v25 = 2080;
  __int16 v26 = identifier;
  __int16 v27 = 2048;
  uint64_t v28 = a1;
  __int16 v29 = 2080;
  uint64_t v30 = v5;
  __int16 v31 = 2048;
  __int16 v32 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v6, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v9 = a1->identifier;
      }
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        os_log_type_t v10 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      uint64_t v24 = "nw_protocol_zombie_reset";
      __int16 v25 = 2080;
      __int16 v26 = v9;
      __int16 v27 = 2048;
      uint64_t v28 = a1;
      __int16 v29 = 2080;
      uint64_t v30 = v10;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      uint64_t v24 = "nw_protocol_zombie_reset";
      __int16 v25 = 2080;
      __int16 v26 = v16;
      __int16 v27 = 2048;
      uint64_t v28 = a1;
      __int16 v29 = 2080;
      uint64_t v30 = v17;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      uint64_t v24 = "nw_protocol_zombie_reset";
      __int16 v25 = 2080;
      __int16 v26 = v18;
      __int16 v27 = 2048;
      uint64_t v28 = a1;
      __int16 v29 = 2080;
      uint64_t v30 = v19;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v14 = a1->identifier;
      }
      BOOL v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v15 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      uint64_t v24 = "nw_protocol_zombie_reset";
      __int16 v25 = 2080;
      __int16 v26 = v14;
      __int16 v27 = 2048;
      uint64_t v28 = a1;
      __int16 v29 = 2080;
      uint64_t v30 = v15;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      __int16 v33 = 2082;
      uint64_t v34 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, other_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
  return 0;
}

void nw_protocol_zombie_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v7 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v7 = a2->identifier;
  }
  *(_DWORD *)buf = 136447490;
  __int16 v25 = "nw_protocol_zombie_error";
  __int16 v26 = 2080;
  __int16 v27 = identifier;
  __int16 v28 = 2048;
  __int16 v29 = a1;
  __int16 v30 = 2080;
  __int16 v31 = v7;
  __int16 v32 = 2048;
  __int16 v33 = a2;
  __int16 v34 = 1024;
  int v35 = a3;
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v8, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v11 = a1->identifier;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v12 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v25 = "nw_protocol_zombie_error";
      __int16 v26 = 2080;
      __int16 v27 = v11;
      __int16 v28 = 2048;
      __int16 v29 = a1;
      __int16 v30 = 2080;
      __int16 v31 = v12;
      __int16 v32 = 2048;
      __int16 v33 = a2;
      __int16 v34 = 1024;
      int v35 = a3;
      BOOL v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, error %{errno}d";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v9, v10, v13, buf, 0x3Au);
      goto LABEL_45;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v25 = "nw_protocol_zombie_error";
      __int16 v26 = 2080;
      __int16 v27 = v18;
      __int16 v28 = 2048;
      __int16 v29 = a1;
      __int16 v30 = 2080;
      __int16 v31 = v19;
      __int16 v32 = 2048;
      __int16 v33 = a2;
      __int16 v34 = 1024;
      int v35 = a3;
      BOOL v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, error %{errno}d, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = gLogObj;
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v15) {
        goto LABEL_45;
      }
      __int16 v20 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v20 = a1->identifier;
      }
      char v21 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        char v21 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v25 = "nw_protocol_zombie_error";
      __int16 v26 = 2080;
      __int16 v27 = v20;
      __int16 v28 = 2048;
      __int16 v29 = a1;
      __int16 v30 = 2080;
      __int16 v31 = v21;
      __int16 v32 = 2048;
      __int16 v33 = a2;
      __int16 v34 = 1024;
      int v35 = a3;
      BOOL v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, error %{errno}d, no backtrace";
      goto LABEL_44;
    }
    if (v15)
    {
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447746;
      __int16 v25 = "nw_protocol_zombie_error";
      __int16 v26 = 2080;
      __int16 v27 = v16;
      __int16 v28 = 2048;
      __int16 v29 = a1;
      __int16 v30 = 2080;
      __int16 v31 = v17;
      __int16 v32 = 2048;
      __int16 v33 = a2;
      __int16 v34 = 1024;
      int v35 = a3;
      __int16 v36 = 2082;
      __int16 v37 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s protocol %s:%p, other_protocol %s:%p, error %{errno}d, dumping backtrace:%{public}s", buf, 0x44u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v8) {
    free(v8);
  }
}

void nw_protocol_zombie_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v5 = a2->identifier;
  }
  *(_DWORD *)buf = 136447234;
  uint64_t v23 = "nw_protocol_zombie_disconnected";
  __int16 v24 = 2080;
  __int16 v25 = identifier;
  __int16 v26 = 2048;
  __int16 v27 = a1;
  __int16 v28 = 2080;
  __int16 v29 = v5;
  __int16 v30 = 2048;
  __int16 v31 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v9 = a1->identifier;
      }
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        os_log_type_t v10 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      uint64_t v23 = "nw_protocol_zombie_disconnected";
      __int16 v24 = 2080;
      __int16 v25 = v9;
      __int16 v26 = 2048;
      __int16 v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v10;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      uint64_t v23 = "nw_protocol_zombie_disconnected";
      __int16 v24 = 2080;
      __int16 v25 = v16;
      __int16 v26 = 2048;
      __int16 v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v17;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      uint64_t v23 = "nw_protocol_zombie_disconnected";
      __int16 v24 = 2080;
      __int16 v25 = v18;
      __int16 v26 = 2048;
      __int16 v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v19;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v14 = a1->identifier;
      }
      BOOL v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v15 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      uint64_t v23 = "nw_protocol_zombie_disconnected";
      __int16 v24 = 2080;
      __int16 v25 = v14;
      __int16 v26 = 2048;
      __int16 v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      __int16 v32 = 2082;
      __int16 v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, other_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
}

void nw_protocol_zombie_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v5 = a2->identifier;
  }
  *(_DWORD *)buf = 136447234;
  uint64_t v23 = "nw_protocol_zombie_connected";
  __int16 v24 = 2080;
  __int16 v25 = identifier;
  __int16 v26 = 2048;
  __int16 v27 = a1;
  __int16 v28 = 2080;
  __int16 v29 = v5;
  __int16 v30 = 2048;
  __int16 v31 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v9 = a1->identifier;
      }
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        os_log_type_t v10 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      uint64_t v23 = "nw_protocol_zombie_connected";
      __int16 v24 = 2080;
      __int16 v25 = v9;
      __int16 v26 = 2048;
      __int16 v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v10;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      uint64_t v23 = "nw_protocol_zombie_connected";
      __int16 v24 = 2080;
      __int16 v25 = v16;
      __int16 v26 = 2048;
      __int16 v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v17;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      uint64_t v23 = "nw_protocol_zombie_connected";
      __int16 v24 = 2080;
      __int16 v25 = v18;
      __int16 v26 = 2048;
      __int16 v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v19;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v14 = a1->identifier;
      }
      BOOL v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v15 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      uint64_t v23 = "nw_protocol_zombie_connected";
      __int16 v24 = 2080;
      __int16 v25 = v14;
      __int16 v26 = 2048;
      __int16 v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      __int16 v32 = 2082;
      __int16 v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, other_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
}

void nw_protocol_zombie_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v5 = a2->identifier;
  }
  *(_DWORD *)buf = 136447234;
  uint64_t v23 = "nw_protocol_zombie_disconnect";
  __int16 v24 = 2080;
  __int16 v25 = identifier;
  __int16 v26 = 2048;
  __int16 v27 = a1;
  __int16 v28 = 2080;
  __int16 v29 = v5;
  __int16 v30 = 2048;
  __int16 v31 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v9 = a1->identifier;
      }
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        os_log_type_t v10 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      uint64_t v23 = "nw_protocol_zombie_disconnect";
      __int16 v24 = 2080;
      __int16 v25 = v9;
      __int16 v26 = 2048;
      __int16 v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v10;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      uint64_t v23 = "nw_protocol_zombie_disconnect";
      __int16 v24 = 2080;
      __int16 v25 = v16;
      __int16 v26 = 2048;
      __int16 v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v17;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      uint64_t v23 = "nw_protocol_zombie_disconnect";
      __int16 v24 = 2080;
      __int16 v25 = v18;
      __int16 v26 = 2048;
      __int16 v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v19;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v14 = a1->identifier;
      }
      BOOL v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v15 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      uint64_t v23 = "nw_protocol_zombie_disconnect";
      __int16 v24 = 2080;
      __int16 v25 = v14;
      __int16 v26 = 2048;
      __int16 v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      __int16 v32 = 2082;
      __int16 v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, other_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
}

uint64_t nw_protocol_zombie_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v5 = a2->identifier;
  }
  *(_DWORD *)buf = 136447234;
  __int16 v24 = "nw_protocol_zombie_connect";
  __int16 v25 = 2080;
  __int16 v26 = identifier;
  __int16 v27 = 2048;
  __int16 v28 = a1;
  __int16 v29 = 2080;
  __int16 v30 = v5;
  __int16 v31 = 2048;
  __int16 v32 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v6, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v9 = a1->identifier;
      }
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        os_log_type_t v10 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v24 = "nw_protocol_zombie_connect";
      __int16 v25 = 2080;
      __int16 v26 = v9;
      __int16 v27 = 2048;
      __int16 v28 = a1;
      __int16 v29 = 2080;
      __int16 v30 = v10;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v24 = "nw_protocol_zombie_connect";
      __int16 v25 = 2080;
      __int16 v26 = v16;
      __int16 v27 = 2048;
      __int16 v28 = a1;
      __int16 v29 = 2080;
      __int16 v30 = v17;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v24 = "nw_protocol_zombie_connect";
      __int16 v25 = 2080;
      __int16 v26 = v18;
      __int16 v27 = 2048;
      __int16 v28 = a1;
      __int16 v29 = 2080;
      __int16 v30 = v19;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v14 = a1->identifier;
      }
      BOOL v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v15 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v24 = "nw_protocol_zombie_connect";
      __int16 v25 = 2080;
      __int16 v26 = v14;
      __int16 v27 = 2048;
      __int16 v28 = a1;
      __int16 v29 = 2080;
      __int16 v30 = v15;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      __int16 v33 = 2082;
      uint64_t v34 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, other_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t nw_protocol_zombie_get_output_interface(nw_protocol *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v17 = "nw_protocol_zombie_get_output_interface";
  __int16 v18 = 2080;
  __int16 v19 = identifier;
  __int16 v20 = 2048;
  char v21 = a1;
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      os_log_type_t v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v6 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_output_interface";
      __int16 v18 = 2080;
      __int16 v19 = v6;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      BOOL v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v11 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_output_interface";
      __int16 v18 = 2080;
      __int16 v19 = v11;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v4 = gLogObj;
    os_log_type_t v5 = type;
    BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_30;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v12 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_output_interface";
      __int16 v18 = 2080;
      __int16 v19 = v12;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v10 = a1->identifier;
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v17 = "nw_protocol_zombie_get_output_interface";
      __int16 v18 = 2080;
      __int16 v19 = v10;
      __int16 v20 = 2048;
      char v21 = a1;
      __int16 v22 = 2082;
      uint64_t v23 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_zombie_get_output_local_endpoint(nw_protocol *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v17 = "nw_protocol_zombie_get_output_local_endpoint";
  __int16 v18 = 2080;
  __int16 v19 = identifier;
  __int16 v20 = 2048;
  char v21 = a1;
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      os_log_type_t v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v6 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_output_local_endpoint";
      __int16 v18 = 2080;
      __int16 v19 = v6;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      BOOL v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v11 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_output_local_endpoint";
      __int16 v18 = 2080;
      __int16 v19 = v11;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v4 = gLogObj;
    os_log_type_t v5 = type;
    BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_30;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v12 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_output_local_endpoint";
      __int16 v18 = 2080;
      __int16 v19 = v12;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v10 = a1->identifier;
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v17 = "nw_protocol_zombie_get_output_local_endpoint";
      __int16 v18 = 2080;
      __int16 v19 = v10;
      __int16 v20 = 2048;
      char v21 = a1;
      __int16 v22 = 2082;
      uint64_t v23 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_zombie_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v7 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v7 = a2->identifier;
  }
  *(_DWORD *)buf = 136447490;
  __int16 v26 = "nw_protocol_zombie_updated_path";
  __int16 v27 = 2080;
  __int16 v28 = identifier;
  __int16 v29 = 2048;
  __int16 v30 = a1;
  __int16 v31 = 2080;
  __int16 v32 = v7;
  __int16 v33 = 2048;
  uint64_t v34 = a2;
  __int16 v35 = 2112;
  __int16 v36 = a3;
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v11 = a1->identifier;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v12 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v26 = "nw_protocol_zombie_updated_path";
      __int16 v27 = 2080;
      __int16 v28 = v11;
      __int16 v29 = 2048;
      __int16 v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v12;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 2112;
      __int16 v36 = a3;
      BOOL v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, path %@";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v9, v10, v13, buf, 0x3Eu);
      goto LABEL_45;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v26 = "nw_protocol_zombie_updated_path";
      __int16 v27 = 2080;
      __int16 v28 = v18;
      __int16 v29 = 2048;
      __int16 v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v19;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 2112;
      __int16 v36 = a3;
      BOOL v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, path %@, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = gLogObj;
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v15) {
        goto LABEL_45;
      }
      __int16 v20 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v20 = a1->identifier;
      }
      char v21 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        char v21 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v26 = "nw_protocol_zombie_updated_path";
      __int16 v27 = 2080;
      __int16 v28 = v20;
      __int16 v29 = 2048;
      __int16 v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v21;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 2112;
      __int16 v36 = a3;
      BOOL v13 = "%{public}s protocol %s:%p, other_protocol %s:%p, path %@, no backtrace";
      goto LABEL_44;
    }
    if (v15)
    {
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447746;
      __int16 v26 = "nw_protocol_zombie_updated_path";
      __int16 v27 = 2080;
      __int16 v28 = v16;
      __int16 v29 = 2048;
      __int16 v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v17;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 2112;
      __int16 v36 = a3;
      __int16 v37 = 2082;
      uint64_t v38 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s protocol %s:%p, other_protocol %s:%p, path %@, dumping backtrace:%{public}s", buf, 0x48u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v8) {
    free(v8);
  }
  return 0;
}

uint64_t nw_protocol_zombie_get_path(nw_protocol *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v17 = "nw_protocol_zombie_get_path";
  __int16 v18 = 2080;
  __int16 v19 = identifier;
  __int16 v20 = 2048;
  char v21 = a1;
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      os_log_type_t v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v6 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_path";
      __int16 v18 = 2080;
      __int16 v19 = v6;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      BOOL v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v11 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_path";
      __int16 v18 = 2080;
      __int16 v19 = v11;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v4 = gLogObj;
    os_log_type_t v5 = type;
    BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_30;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v12 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_path";
      __int16 v18 = 2080;
      __int16 v19 = v12;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v10 = a1->identifier;
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v17 = "nw_protocol_zombie_get_path";
      __int16 v18 = 2080;
      __int16 v19 = v10;
      __int16 v20 = 2048;
      char v21 = a1;
      __int16 v22 = 2082;
      char v23 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_zombie_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v17 = "nw_protocol_zombie_get_remote_endpoint";
  __int16 v18 = 2080;
  __int16 v19 = identifier;
  __int16 v20 = 2048;
  char v21 = a1;
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      os_log_type_t v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v6 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_remote_endpoint";
      __int16 v18 = 2080;
      __int16 v19 = v6;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      BOOL v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v11 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_remote_endpoint";
      __int16 v18 = 2080;
      __int16 v19 = v11;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v4 = gLogObj;
    os_log_type_t v5 = type;
    BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_30;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v12 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_remote_endpoint";
      __int16 v18 = 2080;
      __int16 v19 = v12;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v10 = a1->identifier;
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v17 = "nw_protocol_zombie_get_remote_endpoint";
      __int16 v18 = 2080;
      __int16 v19 = v10;
      __int16 v20 = 2048;
      char v21 = a1;
      __int16 v22 = 2082;
      char v23 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_zombie_get_local_endpoint(nw_protocol *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v17 = "nw_protocol_zombie_get_local_endpoint";
  __int16 v18 = 2080;
  __int16 v19 = identifier;
  __int16 v20 = 2048;
  char v21 = a1;
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      os_log_type_t v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v6 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_local_endpoint";
      __int16 v18 = 2080;
      __int16 v19 = v6;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      BOOL v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v11 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_local_endpoint";
      __int16 v18 = 2080;
      __int16 v19 = v11;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v4 = gLogObj;
    os_log_type_t v5 = type;
    BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_30;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v12 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_local_endpoint";
      __int16 v18 = 2080;
      __int16 v19 = v12;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v10 = a1->identifier;
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v17 = "nw_protocol_zombie_get_local_endpoint";
      __int16 v18 = 2080;
      __int16 v19 = v10;
      __int16 v20 = 2048;
      char v21 = a1;
      __int16 v22 = 2082;
      char v23 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_zombie_get_parameters(nw_protocol *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v17 = "nw_protocol_zombie_get_parameters";
  __int16 v18 = 2080;
  __int16 v19 = identifier;
  __int16 v20 = 2048;
  char v21 = a1;
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v3, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      os_log_type_t v6 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v6 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_parameters";
      __int16 v18 = 2080;
      __int16 v19 = v6;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v4, v5, v7, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      BOOL v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v11 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_parameters";
      __int16 v18 = 2080;
      __int16 v19 = v11;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v4 = gLogObj;
    os_log_type_t v5 = type;
    BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_30;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v12 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v17 = "nw_protocol_zombie_get_parameters";
      __int16 v18 = 2080;
      __int16 v19 = v12;
      __int16 v20 = 2048;
      char v21 = a1;
      os_log_type_t v7 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v9)
    {
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v10 = a1->identifier;
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v17 = "nw_protocol_zombie_get_parameters";
      __int16 v18 = 2080;
      __int16 v19 = v10;
      __int16 v20 = 2048;
      char v21 = a1;
      __int16 v22 = 2082;
      char v23 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v3) {
    free(v3);
  }
  return 0;
}

void nw_protocol_zombie_link_state(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v4 = "invalid";
  if (a1 && *(void *)(a1 + 16)) {
    os_log_type_t v4 = *(const char **)(a1 + 16);
  }
  os_log_type_t v5 = "invalid";
  if (a2 && *(void *)(a2 + 16)) {
    os_log_type_t v5 = *(const char **)(a2 + 16);
  }
  *(_DWORD *)buf = 136447234;
  char v23 = "nw_protocol_zombie_link_state";
  __int16 v24 = 2080;
  __int16 v25 = v4;
  __int16 v26 = 2048;
  uint64_t v27 = a1;
  __int16 v28 = 2080;
  __int16 v29 = v5;
  __int16 v30 = 2048;
  uint64_t v31 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        BOOL v9 = *(const char **)(a1 + 16);
      }
      os_log_type_t v10 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        os_log_type_t v10 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447234;
      char v23 = "nw_protocol_zombie_link_state";
      __int16 v24 = 2080;
      __int16 v25 = v9;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v10;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        char v16 = *(const char **)(a1 + 16);
      }
      uint64_t v17 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        uint64_t v17 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447234;
      char v23 = "nw_protocol_zombie_link_state";
      __int16 v24 = 2080;
      __int16 v25 = v16;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v17;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        __int16 v18 = *(const char **)(a1 + 16);
      }
      __int16 v19 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        __int16 v19 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447234;
      char v23 = "nw_protocol_zombie_link_state";
      __int16 v24 = 2080;
      __int16 v25 = v18;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v19;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, other_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        char v14 = *(const char **)(a1 + 16);
      }
      BOOL v15 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        BOOL v15 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447490;
      char v23 = "nw_protocol_zombie_link_state";
      __int16 v24 = 2080;
      __int16 v25 = v14;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      __int16 v32 = 2082;
      __int16 v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, other_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
}

void nw_protocol_zombie_get_message_properties(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v4 = "invalid";
  if (a1 && *(void *)(a1 + 16)) {
    os_log_type_t v4 = *(const char **)(a1 + 16);
  }
  os_log_type_t v5 = "invalid";
  if (a2 && *(void *)(a2 + 16)) {
    os_log_type_t v5 = *(const char **)(a2 + 16);
  }
  *(_DWORD *)buf = 136447234;
  char v23 = "nw_protocol_zombie_get_message_properties";
  __int16 v24 = 2080;
  __int16 v25 = v4;
  __int16 v26 = 2048;
  uint64_t v27 = a1;
  __int16 v28 = 2080;
  __int16 v29 = v5;
  __int16 v30 = 2048;
  uint64_t v31 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        BOOL v9 = *(const char **)(a1 + 16);
      }
      os_log_type_t v10 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        os_log_type_t v10 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447234;
      char v23 = "nw_protocol_zombie_get_message_properties";
      __int16 v24 = 2080;
      __int16 v25 = v9;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v10;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, input_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        char v16 = *(const char **)(a1 + 16);
      }
      uint64_t v17 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        uint64_t v17 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447234;
      char v23 = "nw_protocol_zombie_get_message_properties";
      __int16 v24 = 2080;
      __int16 v25 = v16;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v17;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, input_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        __int16 v18 = *(const char **)(a1 + 16);
      }
      __int16 v19 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        __int16 v19 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447234;
      char v23 = "nw_protocol_zombie_get_message_properties";
      __int16 v24 = 2080;
      __int16 v25 = v18;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v19;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, input_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = "invalid";
      if (a1 && *(void *)(a1 + 16)) {
        char v14 = *(const char **)(a1 + 16);
      }
      BOOL v15 = "invalid";
      if (a2 && *(void *)(a2 + 16)) {
        BOOL v15 = *(const char **)(a2 + 16);
      }
      *(_DWORD *)buf = 136447490;
      char v23 = "nw_protocol_zombie_get_message_properties";
      __int16 v24 = 2080;
      __int16 v25 = v14;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      __int16 v32 = 2082;
      __int16 v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, input_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
}

uint64_t nw_protocol_zombie_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  *(_DWORD *)buf = 136446722;
  __int16 v18 = "nw_protocol_zombie_finalize_output_frames";
  __int16 v19 = 2080;
  char v20 = identifier;
  __int16 v21 = 2048;
  __int16 v22 = a1;
  os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v4, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      os_log_type_t v7 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        os_log_type_t v7 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      __int16 v18 = "nw_protocol_zombie_finalize_output_frames";
      __int16 v19 = 2080;
      char v20 = v7;
      __int16 v21 = 2048;
      __int16 v22 = a1;
      os_log_type_t v8 = "%{public}s protocol %s:%p";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v5, v6, v8, buf, 0x20u);
      goto LABEL_30;
    }
    if (!v15)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_30;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v12 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      __int16 v18 = "nw_protocol_zombie_finalize_output_frames";
      __int16 v19 = 2080;
      char v20 = v12;
      __int16 v21 = 2048;
      __int16 v22 = a1;
      os_log_type_t v8 = "%{public}s protocol %s:%p, backtrace limit exceeded";
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v10) {
        goto LABEL_30;
      }
      BOOL v13 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v13 = a1->identifier;
      }
      *(_DWORD *)buf = 136446722;
      __int16 v18 = "nw_protocol_zombie_finalize_output_frames";
      __int16 v19 = 2080;
      char v20 = v13;
      __int16 v21 = 2048;
      __int16 v22 = a1;
      os_log_type_t v8 = "%{public}s protocol %s:%p, no backtrace";
      goto LABEL_29;
    }
    if (v10)
    {
      BOOL v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v11 = a1->identifier;
      }
      *(_DWORD *)buf = 136446978;
      __int16 v18 = "nw_protocol_zombie_finalize_output_frames";
      __int16 v19 = 2080;
      char v20 = v11;
      __int16 v21 = 2048;
      __int16 v22 = a1;
      __int16 v23 = 2082;
      __int16 v24 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s protocol %s:%p, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
  }
LABEL_30:
  if (v4) {
    free(v4);
  }
  return 0;
}

uint64_t nw_protocol_zombie_get_output_frames(nw_protocol *a1, nw_protocol *a2, int a3, int a4, int a5, nw_frame_array_s *a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  __int16 v12 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    __int16 v12 = a2->identifier;
  }
  *(_DWORD *)buf = 136448002;
  uint64_t v31 = "nw_protocol_zombie_get_output_frames";
  __int16 v32 = 2080;
  __int16 v33 = identifier;
  __int16 v34 = 2048;
  __int16 v35 = a1;
  __int16 v36 = 2080;
  __int16 v37 = v12;
  __int16 v38 = 2048;
  uint64_t v39 = a2;
  __int16 v40 = 1024;
  int v41 = a3;
  __int16 v42 = 1024;
  int v43 = a4;
  __int16 v44 = 1024;
  int v45 = a5;
  BOOL v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (__nwlog_fault(v13, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v14 = gLogObj;
      os_log_type_t v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136448002;
      uint64_t v31 = "nw_protocol_zombie_get_output_frames";
      __int16 v32 = 2080;
      __int16 v33 = v16;
      __int16 v34 = 2048;
      __int16 v35 = a1;
      __int16 v36 = 2080;
      __int16 v37 = v17;
      __int16 v38 = 2048;
      uint64_t v39 = a2;
      __int16 v40 = 1024;
      int v41 = a3;
      __int16 v42 = 1024;
      int v43 = a4;
      __int16 v44 = 1024;
      int v45 = a5;
      __int16 v18 = "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v14, v15, v18, buf, 0x46u);
      goto LABEL_45;
    }
    if (!v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v14 = gLogObj;
      os_log_type_t v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      __int16 v23 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v23 = a1->identifier;
      }
      __int16 v24 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v24 = a2->identifier;
      }
      *(_DWORD *)buf = 136448002;
      uint64_t v31 = "nw_protocol_zombie_get_output_frames";
      __int16 v32 = 2080;
      __int16 v33 = v23;
      __int16 v34 = 2048;
      __int16 v35 = a1;
      __int16 v36 = 2080;
      __int16 v37 = v24;
      __int16 v38 = 2048;
      uint64_t v39 = a2;
      __int16 v40 = 1024;
      int v41 = a3;
      __int16 v42 = 1024;
      int v43 = a4;
      __int16 v44 = 1024;
      int v45 = a5;
      __int16 v18 = "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u,"
            " backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v14 = gLogObj;
    os_log_type_t v15 = type;
    BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v20) {
        goto LABEL_45;
      }
      uint64_t v25 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        uint64_t v25 = a1->identifier;
      }
      __int16 v26 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v26 = a2->identifier;
      }
      *(_DWORD *)buf = 136448002;
      uint64_t v31 = "nw_protocol_zombie_get_output_frames";
      __int16 v32 = 2080;
      __int16 v33 = v25;
      __int16 v34 = 2048;
      __int16 v35 = a1;
      __int16 v36 = 2080;
      __int16 v37 = v26;
      __int16 v38 = 2048;
      uint64_t v39 = a2;
      __int16 v40 = 1024;
      int v41 = a3;
      __int16 v42 = 1024;
      int v43 = a4;
      __int16 v44 = 1024;
      int v45 = a5;
      __int16 v18 = "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u, no backtrace";
      goto LABEL_44;
    }
    if (v20)
    {
      __int16 v21 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v21 = a1->identifier;
      }
      __int16 v22 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v22 = a2->identifier;
      }
      *(_DWORD *)buf = 136448258;
      uint64_t v31 = "nw_protocol_zombie_get_output_frames";
      __int16 v32 = 2080;
      __int16 v33 = v21;
      __int16 v34 = 2048;
      __int16 v35 = a1;
      __int16 v36 = 2080;
      __int16 v37 = v22;
      __int16 v38 = 2048;
      uint64_t v39 = a2;
      __int16 v40 = 1024;
      int v41 = a3;
      __int16 v42 = 1024;
      int v43 = a4;
      __int16 v44 = 1024;
      int v45 = a5;
      __int16 v46 = 2082;
      char v47 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u, dumping backtrace:%{public}s", buf, 0x50u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v13) {
    free(v13);
  }
  return 0;
}

uint64_t nw_protocol_zombie_get_input_frames(nw_protocol *a1, nw_protocol *a2, int a3, int a4, int a5, nw_frame_array_s *a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  __int16 v12 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    __int16 v12 = a2->identifier;
  }
  *(_DWORD *)buf = 136448002;
  uint64_t v31 = "nw_protocol_zombie_get_input_frames";
  __int16 v32 = 2080;
  __int16 v33 = identifier;
  __int16 v34 = 2048;
  __int16 v35 = a1;
  __int16 v36 = 2080;
  __int16 v37 = v12;
  __int16 v38 = 2048;
  uint64_t v39 = a2;
  __int16 v40 = 1024;
  int v41 = a3;
  __int16 v42 = 1024;
  int v43 = a4;
  __int16 v44 = 1024;
  int v45 = a5;
  BOOL v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (__nwlog_fault(v13, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v14 = gLogObj;
      os_log_type_t v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136448002;
      uint64_t v31 = "nw_protocol_zombie_get_input_frames";
      __int16 v32 = 2080;
      __int16 v33 = v16;
      __int16 v34 = 2048;
      __int16 v35 = a1;
      __int16 v36 = 2080;
      __int16 v37 = v17;
      __int16 v38 = 2048;
      uint64_t v39 = a2;
      __int16 v40 = 1024;
      int v41 = a3;
      __int16 v42 = 1024;
      int v43 = a4;
      __int16 v44 = 1024;
      int v45 = a5;
      __int16 v18 = "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v14, v15, v18, buf, 0x46u);
      goto LABEL_45;
    }
    if (!v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v14 = gLogObj;
      os_log_type_t v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      __int16 v23 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v23 = a1->identifier;
      }
      __int16 v24 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v24 = a2->identifier;
      }
      *(_DWORD *)buf = 136448002;
      uint64_t v31 = "nw_protocol_zombie_get_input_frames";
      __int16 v32 = 2080;
      __int16 v33 = v23;
      __int16 v34 = 2048;
      __int16 v35 = a1;
      __int16 v36 = 2080;
      __int16 v37 = v24;
      __int16 v38 = 2048;
      uint64_t v39 = a2;
      __int16 v40 = 1024;
      int v41 = a3;
      __int16 v42 = 1024;
      int v43 = a4;
      __int16 v44 = 1024;
      int v45 = a5;
      __int16 v18 = "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u,"
            " backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v14 = gLogObj;
    os_log_type_t v15 = type;
    BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v20) {
        goto LABEL_45;
      }
      uint64_t v25 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        uint64_t v25 = a1->identifier;
      }
      __int16 v26 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v26 = a2->identifier;
      }
      *(_DWORD *)buf = 136448002;
      uint64_t v31 = "nw_protocol_zombie_get_input_frames";
      __int16 v32 = 2080;
      __int16 v33 = v25;
      __int16 v34 = 2048;
      __int16 v35 = a1;
      __int16 v36 = 2080;
      __int16 v37 = v26;
      __int16 v38 = 2048;
      uint64_t v39 = a2;
      __int16 v40 = 1024;
      int v41 = a3;
      __int16 v42 = 1024;
      int v43 = a4;
      __int16 v44 = 1024;
      int v45 = a5;
      __int16 v18 = "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u, no backtrace";
      goto LABEL_44;
    }
    if (v20)
    {
      __int16 v21 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v21 = a1->identifier;
      }
      __int16 v22 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v22 = a2->identifier;
      }
      *(_DWORD *)buf = 136448258;
      uint64_t v31 = "nw_protocol_zombie_get_input_frames";
      __int16 v32 = 2080;
      __int16 v33 = v21;
      __int16 v34 = 2048;
      __int16 v35 = a1;
      __int16 v36 = 2080;
      __int16 v37 = v22;
      __int16 v38 = 2048;
      uint64_t v39 = a2;
      __int16 v40 = 1024;
      int v41 = a3;
      __int16 v42 = 1024;
      int v43 = a4;
      __int16 v44 = 1024;
      int v45 = a5;
      __int16 v46 = 2082;
      char v47 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s protocol %s:%p, input_protocol %s:%p, minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u, dumping backtrace:%{public}s", buf, 0x50u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v13) {
    free(v13);
  }
  return 0;
}

void nw_protocol_zombie_input_flush(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v5 = a2->identifier;
  }
  *(_DWORD *)buf = 136447234;
  __int16 v23 = "nw_protocol_zombie_input_flush";
  __int16 v24 = 2080;
  uint64_t v25 = identifier;
  __int16 v26 = 2048;
  uint64_t v27 = a1;
  __int16 v28 = 2080;
  __int16 v29 = v5;
  __int16 v30 = 2048;
  uint64_t v31 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v9 = a1->identifier;
      }
      BOOL v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v10 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_input_flush";
      __int16 v24 = 2080;
      uint64_t v25 = v9;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v10;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_input_flush";
      __int16 v24 = 2080;
      uint64_t v25 = v16;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v17;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_input_flush";
      __int16 v24 = 2080;
      uint64_t v25 = v18;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v19;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v14 = a1->identifier;
      }
      os_log_type_t v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        os_log_type_t v15 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v23 = "nw_protocol_zombie_input_flush";
      __int16 v24 = 2080;
      uint64_t v25 = v14;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      __int16 v32 = 2082;
      __int16 v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, output_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
}

void nw_protocol_zombie_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v5 = a2->identifier;
  }
  *(_DWORD *)buf = 136447234;
  __int16 v23 = "nw_protocol_zombie_output_finished";
  __int16 v24 = 2080;
  uint64_t v25 = identifier;
  __int16 v26 = 2048;
  uint64_t v27 = a1;
  __int16 v28 = 2080;
  __int16 v29 = v5;
  __int16 v30 = 2048;
  uint64_t v31 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v9 = a1->identifier;
      }
      BOOL v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v10 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_output_finished";
      __int16 v24 = 2080;
      uint64_t v25 = v9;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v10;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_output_finished";
      __int16 v24 = 2080;
      uint64_t v25 = v16;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v17;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_output_finished";
      __int16 v24 = 2080;
      uint64_t v25 = v18;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v19;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v14 = a1->identifier;
      }
      os_log_type_t v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        os_log_type_t v15 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v23 = "nw_protocol_zombie_output_finished";
      __int16 v24 = 2080;
      uint64_t v25 = v14;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      __int16 v32 = 2082;
      __int16 v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, output_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
}

void nw_protocol_zombie_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v5 = a2->identifier;
  }
  *(_DWORD *)buf = 136447234;
  __int16 v23 = "nw_protocol_zombie_input_finished";
  __int16 v24 = 2080;
  uint64_t v25 = identifier;
  __int16 v26 = 2048;
  uint64_t v27 = a1;
  __int16 v28 = 2080;
  __int16 v29 = v5;
  __int16 v30 = 2048;
  uint64_t v31 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v9 = a1->identifier;
      }
      BOOL v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v10 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_input_finished";
      __int16 v24 = 2080;
      uint64_t v25 = v9;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v10;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_input_finished";
      __int16 v24 = 2080;
      uint64_t v25 = v16;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v17;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_input_finished";
      __int16 v24 = 2080;
      uint64_t v25 = v18;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v19;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v14 = a1->identifier;
      }
      os_log_type_t v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        os_log_type_t v15 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v23 = "nw_protocol_zombie_input_finished";
      __int16 v24 = 2080;
      uint64_t v25 = v14;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      __int16 v32 = 2082;
      __int16 v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, output_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
}

void nw_protocol_zombie_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v5 = a2->identifier;
  }
  *(_DWORD *)buf = 136447234;
  __int16 v23 = "nw_protocol_zombie_output_available";
  __int16 v24 = 2080;
  uint64_t v25 = identifier;
  __int16 v26 = 2048;
  uint64_t v27 = a1;
  __int16 v28 = 2080;
  __int16 v29 = v5;
  __int16 v30 = 2048;
  uint64_t v31 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v9 = a1->identifier;
      }
      BOOL v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v10 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_output_available";
      __int16 v24 = 2080;
      uint64_t v25 = v9;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v10;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_output_available";
      __int16 v24 = 2080;
      uint64_t v25 = v16;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v17;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_output_available";
      __int16 v24 = 2080;
      uint64_t v25 = v18;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v19;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v14 = a1->identifier;
      }
      os_log_type_t v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        os_log_type_t v15 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v23 = "nw_protocol_zombie_output_available";
      __int16 v24 = 2080;
      uint64_t v25 = v14;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      __int16 v32 = 2082;
      __int16 v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, output_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
}

void nw_protocol_zombie_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v5 = a2->identifier;
  }
  *(_DWORD *)buf = 136447234;
  __int16 v23 = "nw_protocol_zombie_input_available";
  __int16 v24 = 2080;
  uint64_t v25 = identifier;
  __int16 v26 = 2048;
  uint64_t v27 = a1;
  __int16 v28 = 2080;
  __int16 v29 = v5;
  __int16 v30 = 2048;
  uint64_t v31 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v6, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v9 = a1->identifier;
      }
      BOOL v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v10 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_input_available";
      __int16 v24 = 2080;
      uint64_t v25 = v9;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v10;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_input_available";
      __int16 v24 = 2080;
      uint64_t v25 = v16;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v17;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v23 = "nw_protocol_zombie_input_available";
      __int16 v24 = 2080;
      uint64_t v25 = v18;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v19;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      BOOL v11 = "%{public}s protocol %s:%p, output_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v14 = a1->identifier;
      }
      os_log_type_t v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        os_log_type_t v15 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v23 = "nw_protocol_zombie_input_available";
      __int16 v24 = 2080;
      uint64_t v25 = v14;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      __int16 v32 = 2082;
      __int16 v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, output_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
}

uint64_t nw_protocol_zombie_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v7 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v7 = a2->identifier;
  }
  *(_DWORD *)buf = 136447490;
  __int16 v26 = "nw_protocol_zombie_remove_input_handler";
  __int16 v27 = 2080;
  __int16 v28 = identifier;
  __int16 v29 = 2048;
  __int16 v30 = a1;
  __int16 v31 = 2080;
  __int16 v32 = v7;
  __int16 v33 = 2048;
  uint64_t v34 = a2;
  __int16 v35 = 1024;
  int v36 = a3;
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v11 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v11 = a1->identifier;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v12 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v26 = "nw_protocol_zombie_remove_input_handler";
      __int16 v27 = 2080;
      __int16 v28 = v11;
      __int16 v29 = 2048;
      __int16 v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v12;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = a3;
      BOOL v13 = "%{public}s protocol %s:%p, input_protocol %s:%p, destroy %{BOOL}d";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v9, v10, v13, buf, 0x3Au);
      goto LABEL_45;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v26 = "nw_protocol_zombie_remove_input_handler";
      __int16 v27 = 2080;
      __int16 v28 = v18;
      __int16 v29 = 2048;
      __int16 v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v19;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = a3;
      BOOL v13 = "%{public}s protocol %s:%p, input_protocol %s:%p, destroy %{BOOL}d, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = gLogObj;
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v15) {
        goto LABEL_45;
      }
      char v20 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v20 = a1->identifier;
      }
      __int16 v21 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v21 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v26 = "nw_protocol_zombie_remove_input_handler";
      __int16 v27 = 2080;
      __int16 v28 = v20;
      __int16 v29 = 2048;
      __int16 v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v21;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = a3;
      BOOL v13 = "%{public}s protocol %s:%p, input_protocol %s:%p, destroy %{BOOL}d, no backtrace";
      goto LABEL_44;
    }
    if (v15)
    {
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      uint64_t v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447746;
      __int16 v26 = "nw_protocol_zombie_remove_input_handler";
      __int16 v27 = 2080;
      __int16 v28 = v16;
      __int16 v29 = 2048;
      __int16 v30 = a1;
      __int16 v31 = 2080;
      __int16 v32 = v17;
      __int16 v33 = 2048;
      uint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = a3;
      __int16 v37 = 2082;
      __int16 v38 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s protocol %s:%p, input_protocol %s:%p, destroy %{BOOL}d, dumping backtrace:%{public}s", buf, 0x44u);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v8) {
    free(v8);
  }
  return 0;
}

uint64_t nw_protocol_zombie_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v7 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v7 = a2->identifier;
  }
  os_log_type_t v8 = (nw_protocol_identifier *)"invalid";
  if (a3 && a3->identifier) {
    os_log_type_t v8 = a3->identifier;
  }
  *(_DWORD *)buf = 136447746;
  __int16 v31 = "nw_protocol_zombie_replace_input_handler";
  __int16 v32 = 2080;
  __int16 v33 = identifier;
  __int16 v34 = 2048;
  __int16 v35 = a1;
  __int16 v36 = 2080;
  __int16 v37 = v7;
  __int16 v38 = 2048;
  uint64_t v39 = a2;
  __int16 v40 = 2080;
  int v41 = v8;
  __int16 v42 = 2048;
  int v43 = a3;
  BOOL v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (__nwlog_fault(v9, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_60;
      }
      __int16 v12 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v12 = a1->identifier;
      }
      BOOL v13 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v13 = a2->identifier;
      }
      char v14 = (nw_protocol_identifier *)"invalid";
      if (a3 && a3->identifier) {
        char v14 = a3->identifier;
      }
      *(_DWORD *)buf = 136447746;
      __int16 v31 = "nw_protocol_zombie_replace_input_handler";
      __int16 v32 = 2080;
      __int16 v33 = v12;
      __int16 v34 = 2048;
      __int16 v35 = a1;
      __int16 v36 = 2080;
      __int16 v37 = v13;
      __int16 v38 = 2048;
      uint64_t v39 = a2;
      __int16 v40 = 2080;
      int v41 = v14;
      __int16 v42 = 2048;
      int v43 = a3;
      BOOL v15 = "%{public}s protocol %s:%p, old_input_handler %s:%p, new_input_handler %s:%p";
LABEL_59:
      _os_log_impl(&dword_1830D4000, v10, v11, v15, buf, 0x48u);
      goto LABEL_60;
    }
    if (!v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_60;
      }
      __int16 v21 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v21 = a1->identifier;
      }
      __int16 v22 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v22 = a2->identifier;
      }
      char v23 = (nw_protocol_identifier *)"invalid";
      if (a3 && a3->identifier) {
        char v23 = a3->identifier;
      }
      *(_DWORD *)buf = 136447746;
      __int16 v31 = "nw_protocol_zombie_replace_input_handler";
      __int16 v32 = 2080;
      __int16 v33 = v21;
      __int16 v34 = 2048;
      __int16 v35 = a1;
      __int16 v36 = 2080;
      __int16 v37 = v22;
      __int16 v38 = 2048;
      uint64_t v39 = a2;
      __int16 v40 = 2080;
      int v41 = v23;
      __int16 v42 = 2048;
      int v43 = a3;
      BOOL v15 = "%{public}s protocol %s:%p, old_input_handler %s:%p, new_input_handler %s:%p, backtrace limit exceeded";
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = gLogObj;
    os_log_type_t v11 = type;
    BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v17) {
        goto LABEL_60;
      }
      __int16 v24 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v24 = a1->identifier;
      }
      uint64_t v25 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        uint64_t v25 = a2->identifier;
      }
      __int16 v26 = (nw_protocol_identifier *)"invalid";
      if (a3 && a3->identifier) {
        __int16 v26 = a3->identifier;
      }
      *(_DWORD *)buf = 136447746;
      __int16 v31 = "nw_protocol_zombie_replace_input_handler";
      __int16 v32 = 2080;
      __int16 v33 = v24;
      __int16 v34 = 2048;
      __int16 v35 = a1;
      __int16 v36 = 2080;
      __int16 v37 = v25;
      __int16 v38 = 2048;
      uint64_t v39 = a2;
      __int16 v40 = 2080;
      int v41 = v26;
      __int16 v42 = 2048;
      int v43 = a3;
      BOOL v15 = "%{public}s protocol %s:%p, old_input_handler %s:%p, new_input_handler %s:%p, no backtrace";
      goto LABEL_59;
    }
    if (v17)
    {
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      char v20 = (nw_protocol_identifier *)"invalid";
      if (a3 && a3->identifier) {
        char v20 = a3->identifier;
      }
      *(_DWORD *)buf = 136448002;
      __int16 v31 = "nw_protocol_zombie_replace_input_handler";
      __int16 v32 = 2080;
      __int16 v33 = v18;
      __int16 v34 = 2048;
      __int16 v35 = a1;
      __int16 v36 = 2080;
      __int16 v37 = v19;
      __int16 v38 = 2048;
      uint64_t v39 = a2;
      __int16 v40 = 2080;
      int v41 = v20;
      __int16 v42 = 2048;
      int v43 = a3;
      __int16 v44 = 2082;
      int v45 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s protocol %s:%p, old_input_handler %s:%p, new_input_handler %s:%p, dumping backtrace:%{public}s", buf, 0x52u);
    }
    free(backtrace_string);
  }
LABEL_60:
  if (v9) {
    free(v9);
  }
  return 0;
}

uint64_t nw_protocol_zombie_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  identifier = (nw_protocol_identifier *)"invalid";
  if (a1 && a1->identifier) {
    identifier = a1->identifier;
  }
  os_log_type_t v5 = (nw_protocol_identifier *)"invalid";
  if (a2 && a2->identifier) {
    os_log_type_t v5 = a2->identifier;
  }
  *(_DWORD *)buf = 136447234;
  __int16 v24 = "nw_protocol_zombie_add_input_handler";
  __int16 v25 = 2080;
  __int16 v26 = identifier;
  __int16 v27 = 2048;
  char v28 = a1;
  __int16 v29 = 2080;
  __int16 v30 = v5;
  __int16 v31 = 2048;
  __int16 v32 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v6, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      BOOL v9 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        BOOL v9 = a1->identifier;
      }
      os_log_type_t v10 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        os_log_type_t v10 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v24 = "nw_protocol_zombie_add_input_handler";
      __int16 v25 = 2080;
      __int16 v26 = v9;
      __int16 v27 = 2048;
      char v28 = a1;
      __int16 v29 = 2080;
      __int16 v30 = v10;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      os_log_type_t v11 = "%{public}s protocol %s:%p, input_protocol %s:%p";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v11, buf, 0x34u);
      goto LABEL_45;
    }
    if (!v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      char v16 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v16 = a1->identifier;
      }
      BOOL v17 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v17 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v24 = "nw_protocol_zombie_add_input_handler";
      __int16 v25 = 2080;
      __int16 v26 = v16;
      __int16 v27 = 2048;
      char v28 = a1;
      __int16 v29 = 2080;
      __int16 v30 = v17;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      os_log_type_t v11 = "%{public}s protocol %s:%p, input_protocol %s:%p, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_45;
      }
      __int16 v18 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        __int16 v18 = a1->identifier;
      }
      __int16 v19 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        __int16 v19 = a2->identifier;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v24 = "nw_protocol_zombie_add_input_handler";
      __int16 v25 = 2080;
      __int16 v26 = v18;
      __int16 v27 = 2048;
      char v28 = a1;
      __int16 v29 = 2080;
      __int16 v30 = v19;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      os_log_type_t v11 = "%{public}s protocol %s:%p, input_protocol %s:%p, no backtrace";
      goto LABEL_44;
    }
    if (v13)
    {
      char v14 = (nw_protocol_identifier *)"invalid";
      if (a1 && a1->identifier) {
        char v14 = a1->identifier;
      }
      BOOL v15 = (nw_protocol_identifier *)"invalid";
      if (a2 && a2->identifier) {
        BOOL v15 = a2->identifier;
      }
      *(_DWORD *)buf = 136447490;
      __int16 v24 = "nw_protocol_zombie_add_input_handler";
      __int16 v25 = 2080;
      __int16 v26 = v14;
      __int16 v27 = 2048;
      char v28 = a1;
      __int16 v29 = 2080;
      __int16 v30 = v15;
      __int16 v31 = 2048;
      __int16 v32 = a2;
      __int16 v33 = 2082;
      __int16 v34 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol %s:%p, input_protocol %s:%p, dumping backtrace:%{public}s", buf, 0x3Eu);
    }
    free(backtrace_string);
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t nw_protocol_get_callbacks(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 24);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "__nw_protocol_get_callbacks";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "__nw_protocol_get_callbacks";
        os_log_type_t v5 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v11 = "__nw_protocol_get_callbacks";
          __int16 v12 = 2082;
          BOOL v13 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "__nw_protocol_get_callbacks";
        os_log_type_t v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "__nw_protocol_get_callbacks";
        os_log_type_t v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
  return 0;
}

const char *nw_protocol_get_name(uint64_t a1)
{
  uint64_t result = "invalid";
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3) {
      return (const char *)v3;
    }
  }
  return result;
}

uint64_t nw_protocol_get_handle(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 40);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "__nw_protocol_get_handle";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "__nw_protocol_get_handle";
        os_log_type_t v5 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v11 = "__nw_protocol_get_handle";
          __int16 v12 = 2082;
          BOOL v13 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "__nw_protocol_get_handle";
        os_log_type_t v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "__nw_protocol_get_handle";
        os_log_type_t v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
  return 0;
}

void nw_protocol_set_flow_id(_OWORD *a1, _OWORD *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *a1 = *a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "nw_protocol_set_flow_id";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_protocol_set_flow_id";
        os_log_type_t v5 = "%{public}s called with null flow_id";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_protocol_set_flow_id";
        os_log_type_t v5 = "%{public}s called with null flow_id, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v13 = "nw_protocol_set_flow_id";
          __int16 v14 = 2082;
          BOOL v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null flow_id, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_protocol_set_flow_id";
        os_log_type_t v5 = "%{public}s called with null flow_id, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "nw_protocol_set_flow_id";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_protocol_set_flow_id";
      os_log_type_t v5 = "%{public}s called with null protocol";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_protocol_set_flow_id";
      os_log_type_t v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_32;
    }
    os_log_type_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v13 = "nw_protocol_set_flow_id";
      os_log_type_t v5 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v13 = "nw_protocol_set_flow_id";
      __int16 v14 = 2082;
      BOOL v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_set_output_handler_context(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)(a1 + 56) = a2;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "__nw_protocol_set_output_handler_context";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v11 = "__nw_protocol_set_output_handler_context";
      os_log_type_t v5 = "%{public}s called with null protocol";
      goto LABEL_17;
    }
    if (!v8)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v11 = "__nw_protocol_set_output_handler_context";
      os_log_type_t v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v11 = "__nw_protocol_set_output_handler_context";
        __int16 v12 = 2082;
        BOOL v13 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v11 = "__nw_protocol_set_output_handler_context";
      os_log_type_t v5 = "%{public}s called with null protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
}

uint64_t nw_protocol_get_output_handler_context(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 56);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "__nw_protocol_get_output_handler_context";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "__nw_protocol_get_output_handler_context";
        os_log_type_t v5 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v11 = "__nw_protocol_get_output_handler_context";
          __int16 v12 = 2082;
          BOOL v13 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "__nw_protocol_get_output_handler_context";
        os_log_type_t v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "__nw_protocol_get_output_handler_context";
        os_log_type_t v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
  return 0;
}

BOOL nw_quic_info_allocate()
{
  BOOL v0 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v0) {
    goto LABEL_2;
  }
  uint64_t v2 = __nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  uint64_t v3 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
LABEL_2:
    void *v0 = nw_array_create();
    return (BOOL)v0;
  }
  __break(1u);
  return result;
}

void nw_quic_info_destroy(uint64_t *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_array_remove_all_objects(*a1);
    if (*a1) {
      os_release((void *)*a1);
    }
    free(a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "nw_quic_info_destroy";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v11 = "nw_quic_info_destroy";
      os_log_type_t v5 = "%{public}s called with null quic_info";
      goto LABEL_20;
    }
    if (!v8)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v11 = "nw_quic_info_destroy";
      os_log_type_t v5 = "%{public}s called with null quic_info, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v11 = "nw_quic_info_destroy";
        __int16 v12 = 2082;
        BOOL v13 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null quic_info, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_21;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v11 = "nw_quic_info_destroy";
      os_log_type_t v5 = "%{public}s called with null quic_info, no backtrace";
LABEL_20:
      _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_21:
  if (v2) {
    free(v2);
  }
}

BOOL __currentProcessHasSSIDEntitlement_block_invoke()
{
  BOOL result = NWUtilsCurrentProcessHasEntitlement(@"com.apple.wlan.authentication")
        || NWUtilsCurrentProcessHasEntitlement(@"com.apple.private.corewifi");
  currentProcessHasSSIDEntitlement_hasSSIDEntitlement = result;
  return result;
}

void sub_1836F2014(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1836F2198(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id NWMonitorStatusToString(unint64_t a1)
{
  if (a1 >= 3)
  {
    uint64_t v1 = objc_msgSend(NSString, "stringWithFormat:", @"Unknown[%ld]", a1);
  }
  else
  {
    uint64_t v1 = (void *)*((void *)&off_1E523BC78 + a1);
  }

  return v1;
}

nw_ws_response_t nw_ws_response_create(nw_ws_response_status_t status, const char *selected_subprotocol)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (status == nw_ws_response_status_invalid)
  {
    BOOL v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v33 = "nw_ws_response_create";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v31.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v14, &v31, &type)) {
      goto LABEL_44;
    }
    if (LOBYTE(v31.receiver) == 17)
    {
      BOOL v15 = __nwlog_obj();
      os_log_type_t receiver = (os_log_type_t)v31.receiver;
      if (os_log_type_enabled(v15, (os_log_type_t)v31.receiver))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_ws_response_create";
        _os_log_impl(&dword_1830D4000, v15, receiver, "%{public}s called with null status", buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v15 = __nwlog_obj();
      os_log_type_t v23 = (os_log_type_t)v31.receiver;
      BOOL v24 = os_log_type_enabled(v15, (os_log_type_t)v31.receiver);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v33 = "nw_ws_response_create";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null status, dumping backtrace:%{public}s", buf, 0x16u);
        }

        goto LABEL_31;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_ws_response_create";
        _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null status, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v15 = __nwlog_obj();
      os_log_type_t v27 = (os_log_type_t)v31.receiver;
      if (os_log_type_enabled(v15, (os_log_type_t)v31.receiver))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_ws_response_create";
        _os_log_impl(&dword_1830D4000, v15, v27, "%{public}s called with null status, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_44;
  }
  os_log_type_t v4 = [NWConcrete_nw_ws_response alloc];
  if (!v4) {
    return 0;
  }
  v31.os_log_type_t receiver = v4;
  v31.super_class = (Class)NWConcrete_nw_ws_response;
  os_log_type_t v5 = objc_msgSendSuper2(&v31, sel_init);
  if (!v5)
  {
    BOOL v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if ((__nwlog_fault(v14, &type, &v29) & 1) == 0) {
      goto LABEL_44;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s [super init] failed", buf, 0xCu);
      }
LABEL_43:

LABEL_44:
      if (v14) {
        free(v14);
      }
      return 0;
    }
    if (!v29)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
        _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
        _os_log_impl(&dword_1830D4000, v18, v25, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_43;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
      __int16 v34 = 2082;
      uint64_t v35 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v18, v25, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
    }

LABEL_31:
    free(backtrace_string);
    goto LABEL_44;
  }
  os_log_type_t v6 = v5;
  LODWORD(v5[1].isa) = status;
  if (!selected_subprotocol)
  {
LABEL_7:
    char v8 = (objc_class *)xpc_array_create(0, 0);
    Class isa = v6[3].isa;
    v6[3].Class isa = v8;

    char v10 = (objc_class *)xpc_array_create(0, 0);
    Class v11 = v6[4].isa;
    v6[4].Class isa = v10;

    return v6;
  }
  BOOL v7 = strdup(selected_subprotocol);
  if (v7)
  {
LABEL_6:
    v6[2].Class isa = (Class)v7;
    goto LABEL_7;
  }
  char v20 = __nwlog_obj();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  __int16 v33 = "strict_strdup";
  char v21 = (void *)_os_log_send_and_compose_impl();

  nw_ws_response_t result = (nw_ws_response_t)__nwlog_abort((uint64_t)v21);
  if (!result)
  {
    free(v21);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void sub_1836F2964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_ws_response_status_t nw_ws_response_get_status(nw_ws_response_t response)
{
  if (response) {
    LODWORD(response) = response[1].isa;
  }
  return response;
}

const char *__cdecl nw_ws_response_get_selected_subprotocol(nw_ws_response_t response)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_ws_response_t v1 = response;
  nw_ws_response_t v2 = v1;
  if (v1)
  {
    Class isa = (const char *)v1[2].isa;
    goto LABEL_3;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_ws_response_get_selected_subprotocol";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_ws_response_get_selected_subprotocol";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null response", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_ws_response_get_selected_subprotocol";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null response, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_ws_response_get_selected_subprotocol";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null response, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_ws_response_get_selected_subprotocol";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null response, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  Class isa = 0;
LABEL_3:

  return isa;
}

void nw_ws_response_add_additional_header(nw_ws_response_t response, const char *name, const char *value)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  nw_ws_response_t v5 = response;
  if (!v5)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v33 = "nw_ws_response_add_additional_header";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v12, &type, &v30)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null response", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v33 = "nw_ws_response_add_additional_header";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null response, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_62:
        if (!v12) {
          goto LABEL_12;
        }
LABEL_63:
        free(v12);
        goto LABEL_12;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null response, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_1830D4000, v13, v27, "%{public}s called with null response, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  if (!name)
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v33 = "nw_ws_response_add_additional_header";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v12, &type, &v30)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null name", buf, 0xCu);
      }
      goto LABEL_61;
    }
    if (!v30)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null name, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_61;
    }
    __int16 v22 = (char *)__nw_create_backtrace_string();
    char v13 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null name, no backtrace", buf, 0xCu);
      }
      goto LABEL_61;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v33 = "nw_ws_response_add_additional_header";
      __int16 v34 = 2082;
      uint64_t v35 = v22;
      _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_42;
  }
  if (!value)
  {
    __int16 v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v33 = "nw_ws_response_add_additional_header";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v12, &type, &v30)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null value", buf, 0xCu);
      }
      goto LABEL_61;
    }
    if (!v30)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_1830D4000, v13, v29, "%{public}s called with null value, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_61;
    }
    __int16 v22 = (char *)__nw_create_backtrace_string();
    char v13 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_ws_response_add_additional_header";
        _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null value, no backtrace", buf, 0xCu);
      }
      goto LABEL_61;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v33 = "nw_ws_response_add_additional_header";
      __int16 v34 = 2082;
      uint64_t v35 = v22;
      _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null value, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_42:

    free(v22);
    if (!v12) {
      goto LABEL_12;
    }
    goto LABEL_63;
  }
  if (!strcasecmp(name, "Sec-WebSocket-Accept")
    || !strcasecmp(name, "Sec-WebSocket-Protocol")
    || !strcasecmp(name, "Upgrade")
    || !strcasecmp(name, "Connection"))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v33 = "nw_ws_response_add_additional_header";
      __int16 v34 = 2080;
      uint64_t v35 = name;
      __int16 v36 = 2080;
      __int16 v37 = value;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s Cannot override (%s, %s) header in the server's response", buf, 0x20u);
    }
  }
  else
  {
    Class isa = v5[3].isa;
    xpc_object_t v7 = xpc_string_create(name);
    xpc_array_append_value(isa, v7);

    Class v8 = v5[4].isa;
    xpc_object_t v9 = xpc_string_create(value);
    xpc_array_append_value(v8, v9);
  }
LABEL_12:
}

void sub_1836F33F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_ws_response_enumerate_additional_headers(nw_ws_response_t response, nw_ws_additional_header_enumerator_t enumerator)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  nw_ws_response_t v3 = response;
  nw_ws_additional_header_enumerator_t v4 = enumerator;
  nw_ws_response_t v5 = (uint64_t (**)(void, void, void))v4;
  if (!v3)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_ws_response_enumerate_additional_headers";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null response", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v29 = "nw_ws_response_enumerate_additional_headers";
          __int16 v30 = 2082;
          objc_super v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null response, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v13)
        {
LABEL_6:
          BOOL v8 = 0;
          goto LABEL_7;
        }
LABEL_42:
        free(v13);
        goto LABEL_6;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null response, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null response, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (!v4)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_ws_response_enumerate_additional_headers";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null enumerator", buf, 0xCu);
      }
    }
    else if (v26)
    {
      BOOL v21 = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v29 = "nw_ws_response_enumerate_additional_headers";
          __int16 v30 = 2082;
          objc_super v31 = v21;
          _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        if (!v13) {
          goto LABEL_6;
        }
        goto LABEL_42;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_40;
  }
  size_t v6 = 0;
  while (1)
  {
    size_t count = xpc_array_get_count(v3[3].isa);
    BOOL v8 = v6 >= count;
    if (v6 >= count) {
      break;
    }
    string = xpc_array_get_string(v3[3].isa, v6);
    os_log_type_t v10 = xpc_array_get_string(v3[4].isa, v6++);
    if ((((uint64_t (**)(void, const char *, const char *))v5)[2](v5, string, v10) & 1) == 0) {
      goto LABEL_6;
    }
  }
LABEL_7:

  return v8;
}

void sub_1836F3920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_group_type_to_string(unsigned int a1)
{
  if (a1 > 4) {
    return "unknown";
  }
  else {
    return off_1E523BC90[a1];
  }
}

void sub_1836F4078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_group_descriptor_allows_endpoint(void *a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  nw_ws_response_t v3 = a1;
  id v4 = a2;
  nw_ws_response_t v5 = v4;
  if (!v3)
  {
    char v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v40 = "nw_group_descriptor_allows_endpoint";
    xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v7, &type, &v37)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_1830D4000, v8, v27, "%{public}s called with null descriptor", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (!v37)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_1830D4000, v8, v35, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v8 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v32 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_1830D4000, v8, v31, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v40 = "nw_group_descriptor_allows_endpoint";
      __int16 v41 = 2082;
      id v42 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v31, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_65;
  }
  if (!v4)
  {
    os_log_type_t v28 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v40 = "nw_group_descriptor_allows_endpoint";
    xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v7, &type, &v37)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_1830D4000, v8, v29, "%{public}s called with null endpoint", buf, 0xCu);
      }
LABEL_41:

LABEL_42:
      if (v7) {
LABEL_43:
      }
        free(v7);
LABEL_44:
      BOOL v17 = 0;
      goto LABEL_45;
    }
    if (!v37)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_1830D4000, v8, v36, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v8 = __nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v34 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v40 = "nw_group_descriptor_allows_endpoint";
        _os_log_impl(&dword_1830D4000, v8, v33, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v40 = "nw_group_descriptor_allows_endpoint";
      __int16 v41 = 2082;
      id v42 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v33, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_65:

    free(backtrace_string);
    goto LABEL_42;
  }
  switch(v3[2])
  {
    case 0:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      __int16 v40 = "nw_group_descriptor_allows_endpoint";
      xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v37 = 0;
      if (!__nwlog_fault(v7, &type, &v37)) {
        goto LABEL_42;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v40 = "nw_group_descriptor_allows_endpoint";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s Invalid group descriptor type", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v37)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v8 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v40 = "nw_group_descriptor_allows_endpoint";
          _os_log_impl(&dword_1830D4000, v8, v24, "%{public}s Invalid group descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      BOOL v21 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (id)gLogObj;
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v8, type);
      if (!v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v40 = "nw_group_descriptor_allows_endpoint";
          _os_log_impl(&dword_1830D4000, v8, v22, "%{public}s Invalid group descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v40 = "nw_group_descriptor_allows_endpoint";
        __int16 v41 = 2082;
        id v42 = v21;
        _os_log_impl(&dword_1830D4000, v8, v22, "%{public}s Invalid group descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v21);
      if (v7) {
        goto LABEL_43;
      }
      goto LABEL_44;
    case 1:
      os_log_type_t v10 = v4;
      int v11 = [v10 type];

      if (v11 != 1)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v40 = "nw_group_descriptor_allows_endpoint";
          __int16 v41 = 2112;
          id v42 = v10;
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Endpoint %@ is not of type address", buf, 0x16u);
        }
        goto LABEL_15;
      }
      nw_endpoint_t address = nw_endpoint_get_address(v10);
      int sa_family = address->sa_family;
      if (sa_family == 2)
      {
        if ((*(_DWORD *)&address->sa_data[2] & 0xF0) != 0xE0) {
          goto LABEL_13;
        }
      }
      else if (sa_family != 30 || address->sa_data[6] != 255)
      {
LABEL_13:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v40 = "nw_group_descriptor_allows_endpoint";
          __int16 v41 = 2112;
          id v42 = v10;
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Endpoint %@ is not a multicast address", buf, 0x16u);
        }
LABEL_15:

        goto LABEL_44;
      }
      BOOL v17 = 1;
      break;
    case 2:
      id v15 = v4;
      int v16 = [v15 type];

      BOOL v17 = v16 != 3 && v16 != 0;
      if (v16 == 3 || !v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v40 = "nw_group_descriptor_allows_endpoint";
          __int16 v41 = 2112;
          id v42 = v15;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s Endpoint %@ is of invalid type for multiplex group", buf, 0x16u);
        }
      }
      break;
    case 3:
      id v19 = v4;
      int v20 = [v19 type];

      BOOL v17 = v20 == 6;
      break;
    default:
      goto LABEL_44;
  }
LABEL_45:

  return v17;
}

void sub_1836F4A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_group_descriptor_t nw_group_descriptor_create_multicast(nw_endpoint_t multicast_group)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  nw_ws_response_t v1 = multicast_group;
  if (v1)
  {
    nw_ws_response_t v2 = -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], 1, v1, 0);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v15 = "nw_group_descriptor_create_multicast";
  nw_ws_response_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        id v15 = "nw_group_descriptor_create_multicast";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null multicast_group", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          id v15 = "nw_group_descriptor_create_multicast";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null multicast_group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        id v15 = "nw_group_descriptor_create_multicast";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null multicast_group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        id v15 = "nw_group_descriptor_create_multicast";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null multicast_group, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  nw_ws_response_t v2 = 0;
LABEL_3:

  return (nw_group_descriptor_t)v2;
}

void sub_1836F4D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_group_descriptor_t nw_group_descriptor_create_multiplex(nw_endpoint_t remote_endpoint)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  nw_ws_response_t v1 = remote_endpoint;
  if (v1)
  {
    nw_ws_response_t v2 = -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], 2, v1, 0);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v15 = "nw_group_descriptor_create_multiplex";
  nw_ws_response_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        id v15 = "nw_group_descriptor_create_multiplex";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null remote_endpoint", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          id v15 = "nw_group_descriptor_create_multiplex";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null remote_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        id v15 = "nw_group_descriptor_create_multiplex";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null remote_endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        id v15 = "nw_group_descriptor_create_multiplex";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null remote_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  nw_ws_response_t v2 = 0;
LABEL_3:

  return (nw_group_descriptor_t)v2;
}

void sub_1836F4FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *nw_group_descriptor_create_apple_id(void *a1, _OWORD *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (v3)
  {
    id v4 = -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], 3, v3, a2);
    goto LABEL_3;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_group_descriptor_create_apple_id";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_group_descriptor_create_apple_id";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null apple_id", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_group_descriptor_create_apple_id";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null apple_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_group_descriptor_create_apple_id";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null apple_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_group_descriptor_create_apple_id";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null apple_id, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  id v4 = 0;
LABEL_3:

  return v4;
}

void sub_1836F52A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *nw_group_descriptor_create_application_service(void *a1, _OWORD *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (v3)
  {
    id v4 = -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], 3, v3, a2);
    goto LABEL_3;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_group_descriptor_create_application_service";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_group_descriptor_create_application_service";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_group_descriptor_create_application_service";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_group_descriptor_create_application_service";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_group_descriptor_create_application_service";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  id v4 = 0;
LABEL_3:

  return v4;
}

void sub_1836F5568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *nw_group_descriptor_create_with_type(int a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v4 = [NWConcrete_nw_group_descriptor alloc];
    return -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)v4, a1, 0, a2);
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_group_descriptor_create_with_type";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_group_descriptor_create_with_type";
        BOOL v10 = "%{public}s called with null (type != nw_group_type_invalid)";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v16 = "nw_group_descriptor_create_with_type";
            __int16 v17 = 2082;
            __int16 v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null (type != nw_group_type_invalid), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v12) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_group_descriptor_create_with_type";
        BOOL v10 = "%{public}s called with null (type != nw_group_type_invalid), no backtrace";
        goto LABEL_18;
      }
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_group_descriptor_create_with_type";
        BOOL v10 = "%{public}s called with null (type != nw_group_type_invalid), backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  return 0;
}

uint64_t *nw_group_descriptor_copy(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_ws_response_t v1 = a1;
  nw_ws_response_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_group_descriptor_copy";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v10, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_group_descriptor_copy";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null descriptor", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v20 = "nw_group_descriptor_copy";
            __int16 v21 = 2082;
            os_log_type_t v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_group_descriptor_copy";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_group_descriptor_copy";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_26:
    if (v10) {
      free(v10);
    }
    goto LABEL_28;
  }
  if (!*((void *)v1 + 4) && v1[2] != 4)
  {
LABEL_28:
    id v3 = 0;
    goto LABEL_9;
  }
  id v3 = -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], v1[2], 0, (_OWORD *)v1 + 1);
  uint64_t v4 = *((void *)v2 + 4);
  if (v4)
  {
    uint64_t v5 = nw_array_create();
    if (v5 != v4)
    {
      uint64_t v6 = v5;
      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v5 + 16, *(void ***)(v4 + 16), *(void ***)(v4 + 24), (uint64_t)(*(void *)(v4 + 24) - *(void *)(v4 + 16)) >> 3);
      uint64_t v4 = v6;
    }
    os_log_type_t v7 = (void *)v3[4];
    v3[4] = v4;
  }
  objc_storeStrong((id *)v3 + 5, *((id *)v2 + 5));
  *((unsigned char *)v3 + 48) = v3[6] & 0xFE | v2[12] & 1;
LABEL_9:

  return v3;
}

void sub_1836F5B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_group_descriptor_get_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_ws_response_t v1 = a1;
  nw_ws_response_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[2];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_group_descriptor_get_type";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_group_descriptor_get_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_group_descriptor_get_type";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_group_descriptor_get_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_group_descriptor_get_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_group_descriptor_get_id(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    *a2 = *((_OWORD *)v3 + 1);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_group_descriptor_get_id";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_group_descriptor_get_id";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_group_descriptor_get_id";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_group_descriptor_get_id";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_group_descriptor_get_id";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_group_descriptor_supports_known_membership(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_ws_response_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_group_descriptor_supports_known_membership";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v5, &type, &v20)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_group_descriptor_supports_known_membership";
        _os_log_impl(&dword_1830D4000, v6, v15, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_group_descriptor_supports_known_membership";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v17, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_group_descriptor_supports_known_membership";
        _os_log_impl(&dword_1830D4000, v6, v17, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_group_descriptor_supports_known_membership";
        _os_log_impl(&dword_1830D4000, v6, v19, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  int v3 = *((_DWORD *)v1 + 2);
  if (v3 != 3)
  {
    if (v3) {
      goto LABEL_24;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_group_descriptor_supports_known_membership";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v5, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_group_descriptor_supports_known_membership";
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s Invalid group descriptor type", buf, 0xCu);
        }
      }
      else if (v20)
      {
        os_log_type_t v9 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = (id)gLogObj;
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v6, type);
        if (v9)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v23 = "nw_group_descriptor_supports_known_membership";
            __int16 v24 = 2082;
            os_log_type_t v25 = v9;
            _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s Invalid group descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v9);
          if (!v5) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_group_descriptor_supports_known_membership";
          _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s Invalid group descriptor type, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_group_descriptor_supports_known_membership";
          _os_log_impl(&dword_1830D4000, v6, v12, "%{public}s Invalid group descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_21;
    }
LABEL_22:
    if (v5) {
LABEL_23:
    }
      free(v5);
LABEL_24:
    uint64_t v8 = 0;
    goto LABEL_25;
  }
  uint64_t v8 = 1;
LABEL_25:

  return v8;
}

BOOL nw_group_descriptor_add_endpoint(nw_group_descriptor_t descriptor, nw_endpoint_t endpoint)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  nw_group_descriptor_t v3 = descriptor;
  id v4 = endpoint;
  uint64_t v5 = v4;
  if (!v3)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_group_descriptor_add_endpoint";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v14, &type, &v26)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_group_descriptor_add_endpoint";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null descriptor", buf, 0xCu);
      }
      goto LABEL_51;
    }
    if (!v26)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_group_descriptor_add_endpoint";
        _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v15 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_group_descriptor_add_endpoint";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
      goto LABEL_51;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_group_descriptor_add_endpoint";
      __int16 v30 = 2082;
      os_log_type_t v31 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_39;
  }
  if (!v4)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_group_descriptor_add_endpoint";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v14, &type, &v26)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_group_descriptor_add_endpoint";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null endpoint", buf, 0xCu);
      }
LABEL_51:

LABEL_52:
      if (v14) {
        free(v14);
      }
      goto LABEL_18;
    }
    if (!v26)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_group_descriptor_add_endpoint";
        _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v15 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_group_descriptor_add_endpoint";
        _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_51;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_group_descriptor_add_endpoint";
      __int16 v30 = 2082;
      os_log_type_t v31 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_39:

    free(backtrace_string);
    goto LABEL_52;
  }
  if (!nw_group_descriptor_allows_endpoint(v3, v4))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t isa_low = LODWORD(v3[1].isa);
      if (isa_low > 4) {
        os_log_type_t v9 = "unknown";
      }
      else {
        os_log_type_t v9 = off_1E523BC90[isa_low];
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_group_descriptor_add_endpoint";
      __int16 v30 = 2080;
      os_log_type_t v31 = (void *)v9;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s Invalid endpoint type %s for group descriptor", buf, 0x16u);
    }
    goto LABEL_17;
  }
  if ((nw_group_descriptor_supports_multiple_members((NWConcrete_nw_group_descriptor *)v3) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = LODWORD(v3[1].isa);
      if (v10 > 4) {
        BOOL v11 = "unknown";
      }
      else {
        BOOL v11 = off_1E523BC90[v10];
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_group_descriptor_add_endpoint";
      __int16 v30 = 2080;
      os_log_type_t v31 = (void *)v11;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s Group descriptor of type %s does not support multiple members", buf, 0x16u);
    }
LABEL_17:

LABEL_18:
    BOOL v6 = 0;
    goto LABEL_19;
  }
  nw_array_append((uint64_t)v3[4].isa, v5);
  BOOL v6 = 1;
LABEL_19:

  return v6;
}

void sub_1836F6BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_group_descriptor_supports_multiple_members(NWConcrete_nw_group_descriptor *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1->type;
  if (v2 == 4 || v2 == 2) {
    goto LABEL_11;
  }
  if (v2)
  {
    uint64_t v7 = 1;
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_group_descriptor_supports_multiple_members";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v4, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (id)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_group_descriptor_supports_multiple_members";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s Invalid group descriptor type", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_group_descriptor_supports_multiple_members";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s Invalid group descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v4) {
          goto LABEL_11;
        }
        goto LABEL_10;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_group_descriptor_supports_multiple_members";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s Invalid group descriptor type, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (id)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_group_descriptor_supports_multiple_members";
        _os_log_impl(&dword_1830D4000, v5, v12, "%{public}s Invalid group descriptor type, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v4) {
LABEL_10:
  }
    free(v4);
LABEL_11:
  uint64_t v7 = 0;
LABEL_13:

  return v7;
}

void nw_group_descriptor_remove_endpoint(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_group_descriptor_remove_endpoint";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_group_descriptor_remove_endpoint";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v23 = "nw_group_descriptor_remove_endpoint";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_group_descriptor_remove_endpoint";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_group_descriptor_remove_endpoint";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    nw_array_remove_object(v3[4], (uint64_t)v4);
    goto LABEL_4;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v23 = "nw_group_descriptor_remove_endpoint";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_group_descriptor_remove_endpoint";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null endpoint", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_group_descriptor_remove_endpoint";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  uint64_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_group_descriptor_remove_endpoint";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v23 = "nw_group_descriptor_remove_endpoint";
    __int16 v24 = 2082;
    os_log_type_t v25 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t nw_group_descriptor_set_members(void *a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      os_log_type_t v6 = (atomic_uchar *)v3[4];
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 3221225472;
      v30[2] = __nw_group_descriptor_set_members_block_invoke;
      v30[3] = &unk_1E524AE18;
      uint64_t v7 = v3;
      os_log_type_t v31 = v7;
      if (nw_array_apply(v6, (uint64_t)v30))
      {
        if (nw_group_descriptor_supports_multiple_members(v7))
        {
          id v8 = v5;
          os_log_type_t v9 = v3[4];
          v3[4] = v8;
          uint64_t v10 = 1;
LABEL_15:

          goto LABEL_16;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          uint64_t v14 = v7->type;
          if (v14 > 4) {
            os_log_type_t v15 = "unknown";
          }
          else {
            os_log_type_t v15 = off_1E523BC90[v14];
          }
          *(_DWORD *)buf = 136446466;
          os_log_type_t v35 = "nw_group_descriptor_set_members";
          __int16 v36 = 2080;
          char v37 = (void *)v15;
          os_log_type_t v11 = "%{public}s Group descriptor of type %s does not support multiple members";
          os_log_type_t v12 = v9;
          uint32_t v13 = 22;
          goto LABEL_13;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_group_descriptor_set_members";
          os_log_type_t v11 = "%{public}s Invalid endpoint type for group descriptor";
          os_log_type_t v12 = v9;
          uint32_t v13 = 12;
LABEL_13:
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
        }
      }
      uint64_t v10 = 0;
      goto LABEL_15;
    }
    BOOL v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v35 = "nw_group_descriptor_set_members";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v18, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null endpoints", buf, 0xCu);
        }
LABEL_48:

        goto LABEL_49;
      }
      if (!v32)
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null endpoints, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_48;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v19, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_1830D4000, v19, v26, "%{public}s called with null endpoints, no backtrace", buf, 0xCu);
        }
        goto LABEL_48;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v35 = "nw_group_descriptor_set_members";
        __int16 v36 = 2082;
        char v37 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v19, v26, "%{public}s called with null endpoints, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_36;
    }
  }
  else
  {
    BOOL v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v35 = "nw_group_descriptor_set_members";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v18, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null descriptor", buf, 0xCu);
        }
        goto LABEL_48;
      }
      if (!v32)
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_1830D4000, v19, v28, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_48;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v19, type);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_group_descriptor_set_members";
          _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_48;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v35 = "nw_group_descriptor_set_members";
        __int16 v36 = 2082;
        char v37 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_36:

      free(backtrace_string);
    }
  }
LABEL_49:
  if (v18) {
    free(v18);
  }
  uint64_t v10 = 0;
LABEL_16:

  return v10;
}

BOOL __nw_group_descriptor_set_members_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return nw_group_descriptor_allows_endpoint(*(void **)(a1 + 32), a3);
}

void nw_group_descriptor_enumerate_endpoints(nw_group_descriptor_t descriptor, nw_group_descriptor_enumerate_endpoints_block_t enumerate_block)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_group_descriptor_t v3 = descriptor;
  nw_group_descriptor_enumerate_endpoints_block_t v4 = enumerate_block;
  uint64_t v5 = v4;
  if (!v3)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_group_descriptor_enumerate_endpoints";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_group_descriptor_enumerate_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v26 = "nw_group_descriptor_enumerate_endpoints";
          __int16 v27 = 2082;
          os_log_type_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_group_descriptor_enumerate_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_group_descriptor_enumerate_endpoints";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    Class isa = (atomic_uchar *)v3[4].isa;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_group_descriptor_enumerate_endpoints_block_invoke;
    v21[3] = &unk_1E524AE90;
    id v22 = v4;
    nw_array_apply(isa, (uint64_t)v21);

    goto LABEL_4;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_group_descriptor_enumerate_endpoints";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_group_descriptor_enumerate_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_group_descriptor_enumerate_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_group_descriptor_enumerate_endpoints";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_group_descriptor_enumerate_endpoints";
    __int16 v27 = 2082;
    os_log_type_t v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t __nw_group_descriptor_enumerate_endpoints_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t nw_group_descriptor_copy_member(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_group_descriptor_copy_member";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v10, &type, &v22)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_group_descriptor_copy_member";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null descriptor", buf, 0xCu);
      }
      goto LABEL_45;
    }
    if (!v22)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_group_descriptor_copy_member";
        _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_group_descriptor_copy_member";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
      goto LABEL_45;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v25 = "nw_group_descriptor_copy_member";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_33;
  }
  if (nw_group_descriptor_supports_multiple_members(v1))
  {
    uint32_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_group_descriptor_copy_member";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v10, &type, &v22)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_group_descriptor_copy_member";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called on group descriptor that supports multiple endpoints", buf, 0xCu);
      }
LABEL_45:

LABEL_46:
      if (v10) {
        free(v10);
      }
      goto LABEL_12;
    }
    if (!v22)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_group_descriptor_copy_member";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called on group descriptor that supports multiple endpoints, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_group_descriptor_copy_member";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called on group descriptor that supports multiple endpoints, no backtrace", buf, 0xCu);
      }
      goto LABEL_45;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v25 = "nw_group_descriptor_copy_member";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called on group descriptor that supports multiple endpoints, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_33:

    free(backtrace_string);
    goto LABEL_46;
  }
  uint64_t members = (uint64_t)v2->members;
  if (!members || *(void *)(members + 24) - *(void *)(members + 16) != 8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v2->type;
      if (v6 > 4) {
        uint64_t v7 = "unknown";
      }
      else {
        uint64_t v7 = off_1E523BC90[v6];
      }
      *(_DWORD *)buf = 136446466;
      BOOL v25 = "nw_group_descriptor_copy_member";
      __int16 v26 = 2080;
      __int16 v27 = (void *)v7;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s Group descriptor of type %s does not have exactly one member", buf, 0x16u);
    }

LABEL_12:
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  uint64_t v4 = nw_array_get_object_at_index(members, 0);
LABEL_13:

  return v4;
}

id nw_group_descriptor_copy_members(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    id v3 = v1[4];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_group_descriptor_copy_members";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_group_descriptor_copy_members";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_group_descriptor_copy_members";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_group_descriptor_copy_members";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_group_descriptor_copy_members";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_multicast_group_descriptor_set_specific_source(nw_group_descriptor_t multicast_descriptor, nw_endpoint_t source)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_group_descriptor_t v3 = multicast_descriptor;
  uint64_t v4 = source;
  if (v3)
  {
    objc_storeStrong((id *)&v3[5].isa, source);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_multicast_group_descriptor_set_specific_source";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_multicast_group_descriptor_set_specific_source";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null multicast_descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_multicast_group_descriptor_set_specific_source";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null multicast_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_multicast_group_descriptor_set_specific_source";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null multicast_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_multicast_group_descriptor_set_specific_source";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null multicast_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

id nw_multicast_group_descriptor_get_specific_source(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    id v3 = v1[5];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_multicast_group_descriptor_get_specific_source";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_multicast_group_descriptor_get_specific_source";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null multicast_descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_multicast_group_descriptor_get_specific_source";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null multicast_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_multicast_group_descriptor_get_specific_source";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null multicast_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_multicast_group_descriptor_get_specific_source";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null multicast_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_multicast_group_descriptor_set_disable_unicast_traffic(nw_group_descriptor_t multicast_descriptor, BOOL disable_unicast_traffic)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_group_descriptor_t v3 = multicast_descriptor;
  nw_group_descriptor_t v4 = v3;
  if (v3)
  {
    LOBYTE(v3[6].isa) = (uint64_t)v3[6].isa & 0xFE | disable_unicast_traffic;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_multicast_group_descriptor_set_disable_unicast_traffic";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_multicast_group_descriptor_set_disable_unicast_traffic";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null multicast_descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_multicast_group_descriptor_set_disable_unicast_traffic";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null multicast_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_multicast_group_descriptor_set_disable_unicast_traffic";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null multicast_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_multicast_group_descriptor_set_disable_unicast_traffic";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null multicast_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

BOOL nw_multicast_group_descriptor_get_disable_unicast_traffic(nw_group_descriptor_t multicast_descriptor)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_group_descriptor_t v1 = multicast_descriptor;
  nw_group_descriptor_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (uint64_t)v1[6].isa & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_multicast_group_descriptor_get_disable_unicast_traffic";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_multicast_group_descriptor_get_disable_unicast_traffic";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null multicast_descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_multicast_group_descriptor_get_disable_unicast_traffic";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null multicast_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_multicast_group_descriptor_get_disable_unicast_traffic";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null multicast_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_multicast_group_descriptor_get_disable_unicast_traffic";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null multicast_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

nw_privacy_context_t nw_privacy_context_create(const char *description)
{
  nw_group_descriptor_t v1 = -[NWConcrete_nw_context initWithIdentifier:]([NWConcrete_nw_context alloc], description);
  nw_context_set_isolate_protocol_cache(v1, 1);
  nw_context_activate(v1);
  return v1;
}

void sub_1836F9508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_privacy_context_flush_cache(nw_privacy_context_t privacy_context)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  nw_group_descriptor_t v1 = privacy_context;
  if (v1)
  {
    if (v1 == &__block_literal_global_11145)
    {
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
      }
      nw_group_descriptor_t v1 = (id)nw_context_copy_implicit_context::implicit_context;
    }
    BOOL v11 = v1;
    BOOL v2 = nw_context_copy_cache_context(v1);
    nw_context_purge_all_endpoints((void *)v2);

    return;
  }
  BOOL v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_privacy_context_flush_cache";
  nw_group_descriptor_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v4, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_privacy_context_flush_cache";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null privacy_context", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v15 = "nw_privacy_context_flush_cache";
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null privacy_context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_privacy_context_flush_cache";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_privacy_context_flush_cache";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null privacy_context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v4) {
    free(v4);
  }
}

void sub_1836F9828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  _Unwind_Resume(a1);
}

void nw_privacy_context_disable_logging(nw_privacy_context_t privacy_context)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_group_descriptor_t v1 = privacy_context;
  BOOL v2 = v1;
  if (!v1)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "nw_privacy_context_disable_logging";
    nw_group_descriptor_t v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v4, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v20 = "nw_privacy_context_disable_logging";
          _os_log_impl(&dword_1830D4000, v5, v12, "%{public}s called with null privacy_context", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (!v17)
      {
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v20 = "nw_privacy_context_disable_logging";
          _os_log_impl(&dword_1830D4000, v5, v16, "%{public}s called with null privacy_context, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v20 = "nw_privacy_context_disable_logging";
          _os_log_impl(&dword_1830D4000, v5, v14, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v20 = "nw_privacy_context_disable_logging";
        __int16 v21 = 2082;
        char v22 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v14, "%{public}s called with null privacy_context, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v4) {
      goto LABEL_23;
    }
LABEL_22:
    free(v4);
    goto LABEL_23;
  }
  if (v1 != &__block_literal_global_11145)
  {
    nw_context_set_privacy_level_internal(v1, 4, 0);
    goto LABEL_23;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v20 = "nw_privacy_context_disable_logging";
  nw_group_descriptor_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v4, &type, &v17)) {
    goto LABEL_21;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (id)gLogObj;
    os_log_type_t v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v20 = "nw_privacy_context_disable_logging";
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s Logging cannot be disabled for the default privacy context", buf, 0xCu);
    }
LABEL_20:

    goto LABEL_21;
  }
  if (!v17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v20 = "nw_privacy_context_disable_logging";
      _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s Logging cannot be disabled for the default privacy context, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_20;
  }
  uint64_t v7 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v5 = (id)gLogObj;
  os_log_type_t v8 = type;
  BOOL v9 = os_log_type_enabled(v5, type);
  if (!v7)
  {
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v20 = "nw_privacy_context_disable_logging";
      _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s Logging cannot be disabled for the default privacy context, no backtrace", buf, 0xCu);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v20 = "nw_privacy_context_disable_logging";
    __int16 v21 = 2082;
    char v22 = v7;
    _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s Logging cannot be disabled for the default privacy context, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v7);
  if (v4) {
    goto LABEL_22;
  }
LABEL_23:
}

void sub_1836F9D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_privacy_context_require_encrypted_name_resolution(nw_privacy_context_t privacy_context, BOOL require_encrypted_name_resolution, nw_resolver_config_t fallback_resolver_config)
{
  BOOL v4 = require_encrypted_name_resolution;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = privacy_context;
  os_log_type_t v6 = fallback_resolver_config;
  if (v5)
  {
    if (v5 == &__block_literal_global_11145)
    {
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
      }
      uint64_t v5 = (id)nw_context_copy_implicit_context::implicit_context;
    }
    nw_context_require_encrypted_name_resolution(v5, v4, v6);
    goto LABEL_7;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_privacy_context_require_encrypted_name_resolution";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_privacy_context_require_encrypted_name_resolution";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null privacy_context", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_privacy_context_require_encrypted_name_resolution";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null privacy_context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_privacy_context_require_encrypted_name_resolution";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_privacy_context_require_encrypted_name_resolution";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null privacy_context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0;
LABEL_7:
}

void sub_1836FA070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_privacy_context_add_proxy(nw_privacy_context_t privacy_context, nw_proxy_config_t proxy_config)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = privacy_context;
  BOOL v4 = proxy_config;
  if (v3)
  {
    if (v3 == &__block_literal_global_11145)
    {
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
      }
      id v3 = (id)nw_context_copy_implicit_context::implicit_context;
    }
    nw_context_add_proxy(v3, v4);
    goto LABEL_7;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_privacy_context_add_proxy";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_privacy_context_add_proxy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null privacy_context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_privacy_context_add_proxy";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null privacy_context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_privacy_context_add_proxy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_privacy_context_add_proxy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null privacy_context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_7:
}

void sub_1836FA378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_privacy_context_clear_proxies(nw_privacy_context_t privacy_context)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  nw_group_descriptor_t v1 = privacy_context;
  if (v1)
  {
    BOOL v2 = v1;
    if (v1 == &__block_literal_global_11145)
    {
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
      }
      BOOL v2 = (id)nw_context_copy_implicit_context::implicit_context;
    }
    nw_context_clear_proxies(v2);
    goto LABEL_7;
  }
  id v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v14 = "nw_privacy_context_clear_proxies";
  BOOL v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_privacy_context_clear_proxies";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null privacy_context", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v14 = "nw_privacy_context_clear_proxies";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null privacy_context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_privacy_context_clear_proxies";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_privacy_context_clear_proxies";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null privacy_context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v4) {
    free(v4);
  }
  BOOL v2 = 0;
LABEL_7:
}

void sub_1836FA664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr(uint64_t a1)
{
  id v2 = *(id *)a1;
  if ((*(unsigned char *)(a1 + 8) & 1) != 0 && v2)
  {
    *(void *)a1 = 0;

    id v2 = *(id *)a1;
  }
  *(void *)a1 = 0;

  return a1;
}

void nw_protocol_path_state_dispose(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  BOOL v4 = v3;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_protocol_path_state_dispose";
    char v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_protocol_path_state_dispose";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_protocol_path_state_dispose";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v11) {
          goto LABEL_6;
        }
LABEL_41:
        free(v11);
        goto LABEL_6;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_protocol_path_state_dispose";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_protocol_path_state_dispose";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (a2)
  {
    nw_protocol_instance_tear_down_path_inner(v3, a2);
    uint64_t v5 = *(void **)(a2 + 16);
    *(void *)(a2 + 16) = 0;

    os_log_type_t v6 = *(void **)(a2 + 64);
    *(void *)(a2 + 64) = 0;

    uint64_t v7 = *(void **)(a2 + 72);
    *(void *)(a2 + 72) = 0;

    os_log_type_t v8 = *(void **)(a2 + 80);
    *(void *)(a2 + 80) = 0;

    BOOL v9 = *(void **)(a2 + 96);
    *(void *)(a2 + 96) = 0;

    *(_DWORD *)(a2 + 132) = -1;
    if (*(unsigned char *)(a2 + 40)) {
      nw::release_if_needed<nw_protocol *>((uint64_t *)(a2 + 32));
    }
    *(void *)(a2 + 32) = 0;

    goto LABEL_6;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v27 = "nw_protocol_path_state_dispose";
  char v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v11, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_protocol_path_state_dispose";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null path_state", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_protocol_path_state_dispose";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null path_state, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  uint64_t v19 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_protocol_path_state_dispose";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null path_state, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v27 = "nw_protocol_path_state_dispose";
    __int16 v28 = 2082;
    uint64_t v29 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null path_state, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_1836FB210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_instance_tear_down_path_inner(void *a1, uint64_t a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!v3)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v61) = 0;
    if (!__nwlog_fault(v18, type, &v61)) {
      goto LABEL_82;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)v61)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v31 = type[0];
      BOOL v32 = os_log_type_enabled(v19, type[0]);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_82:
        if (!v18) {
          goto LABEL_120;
        }
LABEL_83:
        free(v18);
        goto LABEL_120;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
        _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
        _os_log_impl(&dword_1830D4000, v19, v39, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_81:

    goto LABEL_82;
  }
  if (a2)
  {
    if (gLogDatapath)
    {
      os_log_type_t v23 = __nwlog_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_11434;
    __int16 v66 = (const char *)&__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
    *(void *)uint64_t v67 = a2 + 104;
    v67[8] = 0;
    uint64_t v4 = *(void *)(a2 + 104);
    do
    {
      if (!v4) {
        break;
      }
      uint64_t v5 = *(void *)(v4 + 32);
      char v6 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
      uint64_t v4 = v5;
    }
    while ((v6 & 1) != 0);
    uint64_t v7 = *(const char **)(a2 + 32);
    if (!v7) {
      goto LABEL_117;
    }
    if (v7 == *((const char **)v3 - 8)) {
      goto LABEL_114;
    }
    os_log_type_t v8 = (void *)*((void *)v7 + 5);
    if (v8 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v10 = *((void *)v7 + 11);
      if (v10) {
        *((void *)v7 + 11) = v10 + 1;
      }
      char v9 = -1;
    }
    else
    {
      char v9 = 0;
    }
    *(void *)os_log_type_t type = v7;
    char v64 = v9;
    char v11 = (void *)*((void *)v3 - 7);
    if (v11 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v13 = *((void *)v3 - 1);
      if (v13) {
        *((void *)v3 - 1) = v13 + 1;
      }
      char v12 = -1;
    }
    else
    {
      char v12 = 0;
    }
    uint64_t v61 = v3 - 96;
    char v62 = v12;
    uint64_t v14 = *((void *)v7 + 3);
    if (v14)
    {
      os_log_type_t v15 = *(uint64_t (**)(const char *, char *, uint64_t))(v14 + 8);
      if (v15)
      {
        char v16 = v15(v7, v3 - 96, 1);
        if (v11 != &nw_protocol_ref_counted_handle) {
          goto LABEL_22;
        }
        goto LABEL_92;
      }
    }
    char v24 = __nwlog_obj();
    BOOL v25 = (const char *)*((void *)v7 + 2);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "__nw_protocol_remove_input_handler";
    if (!v25) {
      BOOL v25 = "invalid";
    }
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v25;
    *(_WORD *)&buf[22] = 2048;
    __int16 v66 = v7;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v60 = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (__nwlog_fault(v26, &v60, &v59))
    {
      if (v60 == OS_LOG_TYPE_FAULT)
      {
        __int16 v27 = __nwlog_obj();
        os_log_type_t v28 = v60;
        if (os_log_type_enabled(v27, v60))
        {
          uint64_t v29 = (const char *)*((void *)v7 + 2);
          if (!v29) {
            uint64_t v29 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_remove_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v29;
          *(_WORD *)&buf[22] = 2048;
          __int16 v66 = v7;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback", buf, 0x20u);
        }
LABEL_88:

        goto LABEL_89;
      }
      if (!v59)
      {
        __int16 v27 = __nwlog_obj();
        os_log_type_t v41 = v60;
        if (os_log_type_enabled(v27, v60))
        {
          id v42 = (const char *)*((void *)v7 + 2);
          if (!v42) {
            id v42 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_remove_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v42;
          *(_WORD *)&buf[22] = 2048;
          __int16 v66 = v7;
          _os_log_impl(&dword_1830D4000, v27, v41, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded", buf, 0x20u);
        }
        goto LABEL_88;
      }
      __int16 v36 = (char *)__nw_create_backtrace_string();
      __int16 v27 = __nwlog_obj();
      os_log_type_t v58 = v60;
      BOOL v37 = os_log_type_enabled(v27, v60);
      if (!v36)
      {
        if (v37)
        {
          uint64_t v43 = (const char *)*((void *)v7 + 2);
          if (!v43) {
            uint64_t v43 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_remove_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v43;
          *(_WORD *)&buf[22] = 2048;
          __int16 v66 = v7;
          _os_log_impl(&dword_1830D4000, v27, v58, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace", buf, 0x20u);
        }
        goto LABEL_88;
      }
      if (v37)
      {
        uint64_t v38 = (const char *)*((void *)v7 + 2);
        if (!v38) {
          uint64_t v38 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "__nw_protocol_remove_input_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v38;
        *(_WORD *)&buf[22] = 2048;
        __int16 v66 = v7;
        *(_WORD *)uint64_t v67 = 2082;
        *(void *)&v67[2] = v36;
        _os_log_impl(&dword_1830D4000, v27, v58, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(v36);
    }
LABEL_89:
    if (v26) {
      free(v26);
    }
    char v16 = 0;
    if (v11 != &nw_protocol_ref_counted_handle)
    {
LABEL_22:
      if (v8 != &nw_protocol_ref_counted_handle) {
        goto LABEL_23;
      }
      goto LABEL_93;
    }
LABEL_92:
    nw::release_if_needed<nw_protocol *>((uint64_t *)&v61);
    if (v8 != &nw_protocol_ref_counted_handle)
    {
LABEL_23:
      if (v16) {
        goto LABEL_114;
      }
LABEL_94:
      if ((v3[405] & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v44 = (id)gLogObj;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v3 + 407;
        *(_WORD *)&buf[22] = 2080;
        __int16 v66 = " ";
        int v45 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v61) = 0;
        if (__nwlog_fault(v45, type, &v61))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v46 = (id)gLogObj;
            os_log_type_t v47 = type[0];
            if (os_log_type_enabled(v46, type[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v3 + 407;
              *(_WORD *)&buf[22] = 2080;
              __int16 v66 = " ";
              _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s %{public}s%sUnable to remove output handler", buf, 0x20u);
            }
          }
          else if ((_BYTE)v61)
          {
            uint64_t v48 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v46 = (id)gLogObj;
            os_log_type_t v49 = type[0];
            BOOL v50 = os_log_type_enabled(v46, type[0]);
            if (v48)
            {
              if (v50)
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v3 + 407;
                *(_WORD *)&buf[22] = 2080;
                __int16 v66 = " ";
                *(_WORD *)uint64_t v67 = 2082;
                *(void *)&v67[2] = v48;
                _os_log_impl(&dword_1830D4000, v46, v49, "%{public}s %{public}s%sUnable to remove output handler, dumping backtrace:%{public}s", buf, 0x2Au);
              }

              free(v48);
              if (!v45) {
                goto LABEL_114;
              }
              goto LABEL_113;
            }
            if (v50)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v3 + 407;
              *(_WORD *)&buf[22] = 2080;
              __int16 v66 = " ";
              _os_log_impl(&dword_1830D4000, v46, v49, "%{public}s %{public}s%sUnable to remove output handler, no backtrace", buf, 0x20u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v46 = (id)gLogObj;
            os_log_type_t v51 = type[0];
            if (os_log_type_enabled(v46, type[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v3 + 407;
              *(_WORD *)&buf[22] = 2080;
              __int16 v66 = " ";
              _os_log_impl(&dword_1830D4000, v46, v51, "%{public}s %{public}s%sUnable to remove output handler, backtrace limit exceeded", buf, 0x20u);
            }
          }
        }
        if (v45) {
LABEL_113:
        }
          free(v45);
      }
LABEL_114:
      char v52 = *(unsigned char *)(a2 + 40);
      if (v52)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)(a2 + 32));
        char v52 = *(unsigned char *)(a2 + 40);
      }
      *(void *)(a2 + 32) = 0;
      *(unsigned char *)(a2 + 40) = v52 | 1;
LABEL_117:
      __int16 v53 = *(void **)(a2 + 24);
      if (v53)
      {
        nw_path_flow_registration_close(v53);
        uint64_t v54 = *(void **)(a2 + 24);
        *(void *)(a2 + 24) = 0;
      }
      __int16 v55 = *(void **)(a2 + 48);
      *(void *)(a2 + 48) = 0;

      *(void *)(a2 + 56) = 0;
      os_log_type_t v56 = *(void **)(a2 + 120);
      *(void *)(a2 + 120) = 0;

      uint64_t v57 = *(void **)(a2 + 88);
      *(void *)(a2 + 88) = 0;

      goto LABEL_120;
    }
LABEL_93:
    nw::release_if_needed<nw_protocol *>((uint64_t *)type);
    if (v16) {
      goto LABEL_114;
    }
    goto LABEL_94;
  }
  BOOL v21 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
  BOOL v18 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v61) = 0;
  if (!__nwlog_fault(v18, type, &v61)) {
    goto LABEL_82;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    uint64_t v19 = __nwlog_obj();
    os_log_type_t v22 = type[0];
    if (os_log_type_enabled(v19, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
      _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null path_state", buf, 0xCu);
    }
    goto LABEL_81;
  }
  if (!(_BYTE)v61)
  {
    uint64_t v19 = __nwlog_obj();
    os_log_type_t v40 = type[0];
    if (os_log_type_enabled(v19, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
      _os_log_impl(&dword_1830D4000, v19, v40, "%{public}s called with null path_state, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_81;
  }
  os_log_type_t v33 = (char *)__nw_create_backtrace_string();
  uint64_t v19 = __nwlog_obj();
  os_log_type_t v34 = type[0];
  BOOL v35 = os_log_type_enabled(v19, type[0]);
  if (!v33)
  {
    if (v35)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
      _os_log_impl(&dword_1830D4000, v19, v34, "%{public}s called with null path_state, no backtrace", buf, 0xCu);
    }
    goto LABEL_81;
  }
  if (v35)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_tear_down_path_inner";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v33;
    _os_log_impl(&dword_1830D4000, v19, v34, "%{public}s called with null path_state, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v33);
  if (v18) {
    goto LABEL_83;
  }
LABEL_120:
}

void sub_1836FBEDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_11434(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)v3 + 4);
  char v6 = (void *)*((void *)v3 + 5);
  if (v5)
  {
    *(void *)(v5 + 40) = v6;
    char v6 = (void *)*((void *)v3 + 5);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v6;
  }
  *char v6 = v5;
  *((void *)v3 + 4) = 0;
  *((void *)v3 + 5) = 0;
  nw_frame_finalize((uint64_t)v3);

  return 1;
}

uint64_t nw_protocol_instance_stub_get_handle(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 1);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_instance_stub_get_handle";
  char v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_instance_stub_get_handle";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null stub", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_instance_stub_get_handle";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null stub, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_instance_stub_get_handle";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null stub, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_instance_stub_get_handle";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null stub, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_instance_flush_batched_input(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if ((v1->flow_in_connected & 0x10000000) != 0)
    {
      nw_protocol_instance_flush_batched_input_internal(v1);
      BYTE3(v2->flow_in_connected) |= 0x10u;
      var10 = (void (*)(NWConcrete_nw_protocol_instance *))v2->parent_definition->extended_state->var10;
      if (var10) {
        var10(v2);
      }
    }
    goto LABEL_5;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_protocol_instance_flush_batched_input";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_protocol_instance_flush_batched_input";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_protocol_instance_flush_batched_input";
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_protocol_instance_flush_batched_input";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_protocol_instance_flush_batched_input";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v5) {
    free(v5);
  }
LABEL_5:
}

void sub_1836FC8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_implementation_finalize_pending_frames_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t extra = nw_hash_node_get_extra(a2);
  uint64_t v6 = extra + 104;
  if (!*(void *)(extra + 104)) {
    return 1;
  }
  uint64_t v7 = extra;
  uint64_t v8 = *(void *)(a1 + 32);
  if ((!v8 || (*(char *)(v8 + 405) & 0x80000000) == 0) && gLogDatapath)
  {
    __int16 v26 = __nwlog_obj();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v27 = *(void *)(a1 + 32);
      BOOL v28 = v27 == 0;
      if (v27) {
        uint64_t v29 = (const char *)(v27 + 407);
      }
      else {
        uint64_t v29 = "";
      }
      *(_DWORD *)buf = 136446978;
      os_log_type_t v47 = "nw_protocol_implementation_finalize_pending_frames_block_invoke";
      __int16 v48 = 2082;
      os_log_type_t v49 = (void *)v29;
      if (v28) {
        uint64_t v30 = "";
      }
      else {
        uint64_t v30 = " ";
      }
      __int16 v50 = 2080;
      os_log_type_t v51 = v30;
      __int16 v52 = 2048;
      uint64_t v53 = object;
      _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing outbound frames for %lx (batched)", buf, 0x2Au);
    }
  }
  os_log_type_t v9 = *(const char **)(v7 + 32);
  if (v9)
  {
    BOOL v10 = (void *)*((void *)v9 + 5);
    if (v10 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v12 = *((void *)v9 + 11);
      if (v12) {
        *((void *)v9 + 11) = v12 + 1;
      }
      char v11 = -1;
    }
    else
    {
      char v11 = 0;
    }
    *(void *)uint64_t v43 = v9;
    char v44 = v11;
    uint64_t v13 = *((void *)v9 + 3);
    if (v13)
    {
      uint64_t v14 = *(void (**)(const char *, uint64_t))(v13 + 96);
      if (v14)
      {
        v14(v9, v6);
LABEL_14:
        if (v10 == &nw_protocol_ref_counted_handle) {
          nw::release_if_needed<nw_protocol *>((uint64_t *)v43);
        }
        return 1;
      }
    }
    __int16 v16 = __nwlog_obj();
    __int16 v17 = (const char *)*((void *)v9 + 2);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
    if (!v17) {
      __int16 v17 = "invalid";
    }
    __int16 v48 = 2082;
    os_log_type_t v49 = (void *)v17;
    __int16 v50 = 2048;
    os_log_type_t v51 = v9;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v18, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          BOOL v21 = (const char *)*((void *)v9 + 2);
          if (!v21) {
            BOOL v21 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
          __int16 v48 = 2082;
          os_log_type_t v49 = (void *)v21;
          __int16 v50 = 2048;
          os_log_type_t v51 = v9;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback", buf, 0x20u);
        }
      }
      else if (v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v33 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v33)
          {
            if (*((void *)v9 + 2)) {
              os_log_type_t v34 = (const char *)*((void *)v9 + 2);
            }
            else {
              os_log_type_t v34 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
            __int16 v48 = 2082;
            os_log_type_t v49 = (void *)v34;
            __int16 v50 = 2048;
            os_log_type_t v51 = v9;
            __int16 v52 = 2082;
            uint64_t v53 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v32, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_64;
        }
        if (v33)
        {
          if (*((void *)v9 + 2)) {
            os_log_type_t v40 = (const char *)*((void *)v9 + 2);
          }
          else {
            os_log_type_t v40 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
          __int16 v48 = 2082;
          os_log_type_t v49 = (void *)v40;
          __int16 v50 = 2048;
          os_log_type_t v51 = v9;
          _os_log_impl(&dword_1830D4000, v19, v32, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v19, type))
        {
          os_log_type_t v39 = (const char *)*((void *)v9 + 2);
          if (!v39) {
            os_log_type_t v39 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
          __int16 v48 = 2082;
          os_log_type_t v49 = (void *)v39;
          __int16 v50 = 2048;
          os_log_type_t v51 = v9;
          _os_log_impl(&dword_1830D4000, v19, v38, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
LABEL_64:
    if (v18) {
      free(v18);
    }
    goto LABEL_14;
  }
  os_log_type_t v22 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
  os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

  v43[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v43, &type))
  {
    if (v43[0] == OS_LOG_TYPE_FAULT)
    {
      char v24 = __nwlog_obj();
      os_log_type_t v25 = v43[0];
      if (os_log_type_enabled(v24, v43[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (type)
    {
      BOOL v35 = (char *)__nw_create_backtrace_string();
      char v24 = __nwlog_obj();
      os_log_type_t v36 = v43[0];
      BOOL v37 = os_log_type_enabled(v24, v43[0]);
      if (v35)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
          __int16 v48 = 2082;
          os_log_type_t v49 = v35;
          _os_log_impl(&dword_1830D4000, v24, v36, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v35);
        goto LABEL_72;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v24, v36, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v24 = __nwlog_obj();
      os_log_type_t v41 = v43[0];
      if (os_log_type_enabled(v24, v43[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v24, v41, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_72:
  if (v23) {
    free(v23);
  }
  return 1;
}

void sub_1836FCF88(_Unwind_Exception *exception_object)
{
}

uint64_t nw_protocol_instance_wait_for_early_data(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    uint64_t v4 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_protocol_instance_wait_for_early_data";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v16 = "nw_protocol_instance_wait_for_early_data";
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null instance", buf, 0xCu);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v6 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v16 = "nw_protocol_instance_wait_for_early_data";
            __int16 v17 = 2082;
            uint64_t v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v16 = "nw_protocol_instance_wait_for_early_data";
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v6 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v16 = "nw_protocol_instance_wait_for_early_data";
          _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v5) {
      free(v5);
    }
    goto LABEL_22;
  }
  nw_context_assert_queue(*((void **)v1 + 15));
  if (!*((void *)v2 - 6))
  {
LABEL_22:
    uint64_t v3 = 0;
    goto LABEL_23;
  }
  v2[405] |= 8u;
  uint64_t v3 = 1;
LABEL_23:

  return v3;
}

void sub_1836FD260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_instance_reset_after_early_data(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    *((unsigned char *)v1 + 405) &= ~8u;
    if (*((_DWORD *)v1[1] + 16) == 3) {
      nw_hash_table_apply(v1[29], (uint64_t)&__block_literal_global_62);
    }
    goto LABEL_4;
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_protocol_instance_reset_after_early_data";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_instance_reset_after_early_data";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_protocol_instance_reset_after_early_data";
          __int16 v15 = 2082;
          __int16 v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_instance_reset_after_early_data";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_instance_reset_after_early_data";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v4) {
    free(v4);
  }
LABEL_4:
}

uint64_t __nw_protocol_instance_reset_after_early_data_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  *(_WORD *)(extra + 52) &= ~0x10u;
  return 1;
}

void nw_protocol_instance_assert_fallback_agent(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = (void **)v1;
    uint64_t v4 = v3;
    if ((*((unsigned char *)v3[1] + 184) & 0x10) != 0
      && nw_parameters_get_multipath(v3[6])
      && *(void *)(*((void *)v4[1] + 10) + 208))
    {
      char v5 = *((unsigned char *)v4 + 405);

      if ((v5 & 4) == 0)
      {
        long long v22 = 0uLL;
        if (nw_path_get_fallback_agent(v4[36], &v22))
        {
          if ((*((char *)v4 + 405) & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v6 = (id)gLogObj;
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446722;
              uint64_t v17 = "nw_protocol_instance_assert_fallback_agent";
              __int16 v18 = 2082;
              uint64_t v19 = (char *)v4 + 407;
              __int16 v20 = 2080;
              BOOL v21 = " ";
              _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sasserting fallback agent", buf, 0x20u);
            }
          }
          nw_path_agent_action((NWConcrete_nw_path *)v4[36], (const unsigned __int8 *)&v22, 131);
        }
      }
    }
    else
    {
    }
    goto LABEL_13;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_protocol_instance_assert_fallback_agent";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v22) = 16;
  char v15 = 0;
  if (__nwlog_fault(v8, &v22, &v15))
  {
    if (v22 == 17)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = v22;
      if (os_log_type_enabled(v9, (os_log_type_t)v22))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_instance_assert_fallback_agent";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = v22;
      BOOL v13 = os_log_type_enabled(v9, (os_log_type_t)v22);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_protocol_instance_assert_fallback_agent";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_instance_assert_fallback_agent";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = v22;
      if (os_log_type_enabled(v9, (os_log_type_t)v22))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_instance_assert_fallback_agent";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_30:
  if (v8) {
    free(v8);
  }
LABEL_13:
}

void sub_1836FD8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_instance_unassert_fallback_agent(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = (void **)v1;
    uint64_t v4 = v3;
    if ((*((unsigned char *)v3[1] + 184) & 0x10) != 0
      && nw_parameters_get_multipath(v3[6])
      && *(void *)(*((void *)v4[1] + 10) + 208))
    {
      char v5 = *((unsigned char *)v4 + 405);

      if ((v5 & 4) == 0)
      {
        long long v22 = 0uLL;
        if (nw_path_get_fallback_agent(v4[36], &v22))
        {
          if ((*((char *)v4 + 405) & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v6 = (id)gLogObj;
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446722;
              uint64_t v17 = "nw_protocol_instance_unassert_fallback_agent";
              __int16 v18 = 2082;
              uint64_t v19 = (char *)v4 + 407;
              __int16 v20 = 2080;
              BOOL v21 = " ";
              _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sunasserting fallback agent", buf, 0x20u);
            }
          }
          nw_path_agent_action((NWConcrete_nw_path *)v4[36], (const unsigned __int8 *)&v22, 132);
        }
      }
    }
    else
    {
    }
    goto LABEL_13;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_protocol_instance_unassert_fallback_agent";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v22) = 16;
  char v15 = 0;
  if (__nwlog_fault(v8, &v22, &v15))
  {
    if (v22 == 17)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = v22;
      if (os_log_type_enabled(v9, (os_log_type_t)v22))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_instance_unassert_fallback_agent";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = v22;
      BOOL v13 = os_log_type_enabled(v9, (os_log_type_t)v22);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_protocol_instance_unassert_fallback_agent";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_instance_unassert_fallback_agent";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = v22;
      if (os_log_type_enabled(v9, (os_log_type_t)v22))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_protocol_instance_unassert_fallback_agent";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_30:
  if (v8) {
    free(v8);
  }
LABEL_13:
}

void sub_1836FDCA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_protocol_instance_copy_interface_for_path(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_instance_copy_interface_for_path";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_instance_copy_interface_for_path";
      __int16 v26 = 2082;
      uint64_t v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_instance_copy_interface_for_path";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v9) {
        free(v9);
      }
      goto LABEL_40;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_interface_for_path";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_instance_copy_interface_for_path";
      __int16 v26 = 2082;
      uint64_t v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  uint64_t v5 = v3[37];
  if (!v5 || (uint64_t node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_40:
    id v7 = 0;
    goto LABEL_41;
  }
  id v7 = *(id *)(node + 48);
LABEL_41:

  return v7;
}

id nw_protocol_instance_copy_override_endpoint_for_path(void *a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    BOOL v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_39;
    }
    if (!v23)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_39;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
      __int16 v27 = 2082;
      uint64_t v28 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_27;
  }
  if (!a2)
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_39:

LABEL_40:
      if (v10) {
        free(v10);
      }
      goto LABEL_42;
    }
    if (!v23)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_39;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
      __int16 v27 = 2082;
      uint64_t v28 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_27:

    free(backtrace_string);
    goto LABEL_40;
  }
  uint64_t v5 = v3[37];
  if (!v5 || (uint64_t node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_42:
    id v8 = 0;
    goto LABEL_43;
  }
  uint64_t v7 = 152;
  if (!*(void *)(node + 152)) {
    uint64_t v7 = 120;
  }
  id v8 = *(id *)(node + v7);
LABEL_43:

  return v8;
}

uint64_t nw_protocol_instance_get_priority_for_path(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_instance_get_priority_for_path";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_instance_get_priority_for_path";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_instance_get_priority_for_path";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v9) {
        free(v9);
      }
      goto LABEL_40;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_get_priority_for_path";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_instance_get_priority_for_path";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  uint64_t v5 = v3[37];
  if (!v5 || (uint64_t node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_40:
    char v7 = 0;
    goto LABEL_41;
  }
  char v7 = *(unsigned char *)(node + 168);
LABEL_41:

  return v7;
}

id nw_protocol_instance_copy_local_cid_for_path(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_instance_copy_local_cid_for_path";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_instance_copy_local_cid_for_path";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_instance_copy_local_cid_for_path";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v9) {
        free(v9);
      }
      goto LABEL_40;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_local_cid_for_path";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_instance_copy_local_cid_for_path";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  uint64_t v5 = v3[37];
  if (!v5 || (uint64_t node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_40:
    id v7 = 0;
    goto LABEL_41;
  }
  id v7 = *(id *)(node + 96);
LABEL_41:

  return v7;
}

id nw_protocol_instance_copy_remote_cid_for_path(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_instance_copy_remote_cid_for_path";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_instance_copy_remote_cid_for_path";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_instance_copy_remote_cid_for_path";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v9) {
        free(v9);
      }
      goto LABEL_40;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_remote_cid_for_path";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_instance_copy_remote_cid_for_path";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  uint64_t v5 = v3[37];
  if (!v5 || (uint64_t node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_40:
    id v7 = 0;
    goto LABEL_41;
  }
  id v7 = *(id *)(node + 104);
LABEL_41:

  return v7;
}

id nw_protocol_instance_copy_initial_data_for_path(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_instance_copy_initial_data_for_path";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_instance_copy_initial_data_for_path";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_instance_copy_initial_data_for_path";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v9) {
        free(v9);
      }
      goto LABEL_40;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_copy_initial_data_for_path";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_instance_copy_initial_data_for_path";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  uint64_t v5 = v3[37];
  if (!v5 || (uint64_t node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_40:
    id v7 = 0;
    goto LABEL_41;
  }
  id v7 = *(id *)(node + 112);
LABEL_41:

  return v7;
}

uint64_t nw_protocol_instance_get_sockfd_for_path(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_instance_get_sockfd_for_path";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_instance_get_sockfd_for_path";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_protocol_instance_get_sockfd_for_path";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v9) {
        free(v9);
      }
      goto LABEL_40;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_protocol_instance_get_sockfd_for_path";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_protocol_instance_get_sockfd_for_path";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  uint64_t v5 = v3[37];
  if (!v5 || (uint64_t node = nw_hash_table_get_node(v5, a2, 8)) == 0)
  {
LABEL_40:
    uint64_t v7 = 0xFFFFFFFFLL;
    goto LABEL_41;
  }
  uint64_t v7 = *(unsigned int *)(node + 164);
LABEL_41:

  return v7;
}

void nw_protocol_instance_set_current_path(void *a1, uint64_t a2)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2)
    {
      uint64_t v5 = nw_protocol_implementation_lookup_path(v3, a2, 0);
      if (!v5)
      {
        if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0)
        {
          __int16 v52 = __nwlog_obj();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            __int16 v83 = "nw_protocol_instance_set_current_path";
            __int16 v84 = 2082;
            id v85 = (char *)&v4->flow_in_connected + 7;
            __int16 v86 = 2080;
            id v87 = " ";
            __int16 v88 = 2048;
            p_uint32_t os_unfair_lock_opaque = (_DWORD *)a2;
            _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot find current protocol_path %lx", buf, 0x2Au);
          }
        }
        os_log_type_t v14 = 0;
        id v8 = 0;
        id v10 = 0;
        goto LABEL_62;
      }
      uint64_t v6 = v5;
      uint64_t v7 = (os_unfair_lock_s *)*(id *)(v5 + 96);
      id v8 = v7;
      if (v7)
      {
        BOOL v9 = v7;
        os_unfair_lock_lock(v8 + 24);
        id v10 = v9[6];
        os_unfair_lock_unlock(v8 + 24);
      }
      else
      {
        id v10 = 0;
      }
      os_log_type_t v15 = (os_unfair_lock_s *)*(id *)(v6 + 16);
      int v16 = SBYTE5(v4->flow_in_connected);
      if (!v15)
      {
        if ((v16 & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v20 = (id)gLogObj;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            __int16 v83 = "nw_protocol_instance_set_current_path";
            __int16 v84 = 2082;
            id v85 = (char *)&v4->flow_in_connected + 7;
            __int16 v86 = 2080;
            id v87 = " ";
            __int16 v88 = 2048;
            p_uint32_t os_unfair_lock_opaque = (_DWORD *)a2;
            _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot find interface for new current protocol_path %lx", buf, 0x2Au);
          }
        }
        os_log_type_t v14 = 0;
        goto LABEL_62;
      }
      os_log_type_t v14 = v15;
      if ((v16 & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (id)gLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136447490;
          __int16 v83 = "nw_protocol_instance_set_current_path";
          __int16 v84 = 2082;
          id v85 = (char *)&v4->flow_in_connected + 7;
          __int16 v86 = 2080;
          id v87 = " ";
          __int16 v88 = 2048;
          p_uint32_t os_unfair_lock_opaque = (_DWORD *)a2;
          __int16 v90 = 2112;
          uint32_t v91 = v14;
          __int16 v92 = 2112;
          id v93 = v10;
          _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sNew current protocol_path %lx using interface %@, path %@", buf, 0x3Eu);
        }

        LOBYTE(v16) = BYTE5(v4->flow_in_connected);
      }
      if (v8)
      {
        if ((v16 & 0x80) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v18 = (id)gLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            wakeup = v4->wakeup;
            *(_DWORD *)buf = 136447234;
            __int16 v83 = "nw_protocol_instance_set_current_path";
            __int16 v84 = 2082;
            id v85 = (char *)&v4->flow_in_connected + 7;
            __int16 v86 = 2080;
            id v87 = " ";
            __int16 v88 = 2112;
            p_uint32_t os_unfair_lock_opaque = wakeup;
            __int16 v90 = 2112;
            uint32_t v91 = v8;
            _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sOverriding %@ with evaluator %@", buf, 0x34u);
          }
        }
        nw_path_flow_registration_override_evaluator(v4->wakeup, v8);
        nw_path_flow_registration_override_interface_types(v4->wakeup, 0, 0, 0, 0, 0);
        if (SBYTE5(v4->flow_in_connected) < 0) {
          goto LABEL_41;
        }
LABEL_38:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v31 = (id)gLogObj;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446978;
          __int16 v83 = "nw_protocol_instance_set_current_path";
          __int16 v84 = 2082;
          id v85 = (char *)&v4->flow_in_connected + 7;
          __int16 v86 = 2080;
          id v87 = " ";
          __int16 v88 = 2112;
          p_uint32_t os_unfair_lock_opaque = &v14->_os_unfair_lock_opaque;
          _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sCalling notify nw_protocol_notification_type_migration %@", buf, 0x2Au);
        }

        goto LABEL_41;
      }
      if ((v16 & 0x80) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v21 = (id)gLogObj;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          char v22 = v4->wakeup;
          *(_DWORD *)buf = 136447234;
          __int16 v83 = "nw_protocol_instance_set_current_path";
          __int16 v84 = 2082;
          id v85 = (char *)&v4->flow_in_connected + 7;
          __int16 v86 = 2080;
          id v87 = " ";
          __int16 v88 = 2112;
          p_uint32_t os_unfair_lock_opaque = v22;
          __int16 v90 = 2112;
          uint32_t v91 = v14;
          _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sOverriding %@ with properties from interface %@", buf, 0x34u);
        }
      }
      nw_path_flow_registration_override_evaluator(v4->wakeup, 0);
      id v23 = v4->wakeup;
      char v24 = v14;
      __int16 v26 = (unsigned __int16 *)((char *)&v24[21]._os_unfair_lock_opaque + 1);
      __int16 v25 = *(_WORD *)((char *)&v24[21]._os_unfair_lock_opaque + 1);

      __int16 v27 = v24;
      LODWORD(v26) = *v26;

      uint64_t v28 = v27;
      uint64_t v30 = v28 + 96;
      int v29 = *((_DWORD *)v28 + 24);

      os_log_type_t v14 = v28;
      LODWORD(v30) = *v30;

      nw_path_flow_registration_override_interface_types(v23, v25 & 1, (v26 >> 1) & 1, v29 == 1, v30 == 2, 0);
      id v8 = 0;
      if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      if ((SBYTE5(v3->flow_in_connected) & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446722;
          __int16 v83 = "nw_protocol_instance_set_current_path";
          __int16 v84 = 2082;
          id v85 = (char *)&v4->flow_in_connected + 7;
          __int16 v86 = 2080;
          id v87 = " ";
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sLost all paths", buf, 0x20u);
        }

        if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v12 = (id)gLogObj;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            os_log_type_t v13 = v4->wakeup;
            *(_DWORD *)buf = 136446978;
            __int16 v83 = "nw_protocol_instance_set_current_path";
            __int16 v84 = 2082;
            id v85 = (char *)&v4->flow_in_connected + 7;
            __int16 v86 = 2080;
            id v87 = " ";
            __int16 v88 = 2112;
            p_uint32_t os_unfair_lock_opaque = v13;
            _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sClearing overrides for %@", buf, 0x2Au);
          }
        }
      }
      nw_path_flow_registration_override_evaluator(v4->wakeup, 0);
      nw_path_flow_registration_override_interface_types(v4->wakeup, 0, 0, 0, 0, 0);
      id v10 = 0;
      id v8 = 0;
      os_log_type_t v14 = 0;
      if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0) {
        goto LABEL_38;
      }
    }
LABEL_41:
    if (v4->parent_definition->variant == 3)
    {
      tqh_last = (char *)v4->pending_outbound_frames.tqh_last;
      v73[0] = MEMORY[0x1E4F143A8];
      v73[1] = 3221225472;
      v73[2] = __nw_protocol_instance_set_current_path_block_invoke;
      v73[3] = &unk_1E523BCE8;
      id v74 = v4;
      os_log_type_t v14 = v14;
      char v75 = v14;
      nw_hash_table_apply(tqh_last, (uint64_t)v73);

LABEL_62:
      goto LABEL_63;
    }
    BOOL v33 = *(const char **)&v4[-1].log_str[41];
    if (v33)
    {
      os_log_type_t v34 = (void *)*((void *)v33 + 5);
      if (v34 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v36 = *((void *)v33 + 11);
        if (v36) {
          *((void *)v33 + 11) = v36 + 1;
        }
        char v35 = -1;
      }
      else
      {
        char v35 = 0;
      }
      *(void *)os_log_type_t type = v33;
      char v81 = v35;
      BOOL v37 = *(void **)&v4[-1].log_str[33];
      if (v37 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v39 = *(void *)&v4[-1].log_str[81];
        if (v39) {
          *(void *)&v4[-1].log_str[81] = v39 + 1;
        }
        char v38 = -1;
      }
      else
      {
        char v38 = 0;
      }
      p_paths_log_id_num = &v4[-1].paths_log_id_num;
      char v79 = v38;
      uint64_t v40 = *((void *)v33 + 3);
      if (v40)
      {
        os_log_type_t v41 = *(void (**)(const char *, unsigned __int16 *, uint64_t, os_unfair_lock_s *, uint64_t))(v40 + 160);
        if (v41)
        {
          v41(v33, &v4[-1].paths_log_id_num, 24, v14, 8);
          goto LABEL_57;
        }
      }
      uint64_t v46 = __nwlog_obj();
      os_log_type_t v47 = (const char *)*((void *)v33 + 2);
      *(_DWORD *)buf = 136446722;
      __int16 v83 = "__nw_protocol_notify";
      if (!v47) {
        os_log_type_t v47 = "invalid";
      }
      __int16 v84 = 2082;
      id v85 = (void *)v47;
      __int16 v86 = 2048;
      id v87 = v33;
      char v72 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t v77 = OS_LOG_TYPE_ERROR;
      char v76 = 0;
      __int16 v48 = (char *)v72;
      if (!__nwlog_fault(v72, &v77, &v76))
      {
LABEL_124:
        if (v48) {
          free(v48);
        }
LABEL_57:
        if (v37 == &nw_protocol_ref_counted_handle)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)&p_paths_log_id_num);
          if (v34 != &nw_protocol_ref_counted_handle) {
            goto LABEL_62;
          }
        }
        else if (v34 != &nw_protocol_ref_counted_handle)
        {
          goto LABEL_62;
        }
        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
        goto LABEL_62;
      }
      if (v77 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v49 = __nwlog_obj();
        os_log_type_t v50 = v77;
        if (os_log_type_enabled(v49, v77))
        {
          os_log_type_t v51 = (const char *)*((void *)v33 + 2);
          if (!v51) {
            os_log_type_t v51 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          __int16 v83 = "__nw_protocol_notify";
          __int16 v84 = 2082;
          id v85 = (void *)v51;
          __int16 v86 = 2048;
          id v87 = v33;
          _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s protocol %{public}s (%p) has invalid notify callback", buf, 0x20u);
        }
      }
      else if (v76)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v49 = __nwlog_obj();
        os_log_type_t v71 = v77;
        BOOL v61 = os_log_type_enabled(v49, v77);
        if (backtrace_string)
        {
          if (v61)
          {
            char v62 = (const char *)*((void *)v33 + 2);
            if (!v62) {
              char v62 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            __int16 v83 = "__nw_protocol_notify";
            __int16 v84 = 2082;
            id v85 = (void *)v62;
            __int16 v86 = 2048;
            id v87 = v33;
            __int16 v88 = 2082;
            p_uint32_t os_unfair_lock_opaque = backtrace_string;
            _os_log_impl(&dword_1830D4000, v49, v71, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_123;
        }
        if (v61)
        {
          uint64_t v69 = (const char *)*((void *)v33 + 2);
          if (!v69) {
            uint64_t v69 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          __int16 v83 = "__nw_protocol_notify";
          __int16 v84 = 2082;
          id v85 = (void *)v69;
          __int16 v86 = 2048;
          id v87 = v33;
          _os_log_impl(&dword_1830D4000, v49, v71, "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        os_log_type_t v49 = __nwlog_obj();
        os_log_type_t v67 = v77;
        if (os_log_type_enabled(v49, v77))
        {
          uint64_t v68 = (const char *)*((void *)v33 + 2);
          if (!v68) {
            uint64_t v68 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          __int16 v83 = "__nw_protocol_notify";
          __int16 v84 = 2082;
          id v85 = (void *)v68;
          __int16 v86 = 2048;
          id v87 = v33;
          _os_log_impl(&dword_1830D4000, v49, v67, "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded", buf, 0x20u);
        }
      }

LABEL_123:
      __int16 v48 = (char *)v72;
      goto LABEL_124;
    }
    os_log_type_t v56 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v83 = "__nw_protocol_notify";
    uint64_t v57 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (__nwlog_fault(v57, type, &p_paths_log_id_num))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v58 = __nwlog_obj();
        os_log_type_t v59 = type[0];
        if (os_log_type_enabled(v58, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v83 = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if ((_BYTE)p_paths_log_id_num)
      {
        BOOL v63 = (char *)__nw_create_backtrace_string();
        os_log_type_t v58 = __nwlog_obj();
        os_log_type_t v64 = type[0];
        BOOL v65 = os_log_type_enabled(v58, type[0]);
        if (v63)
        {
          if (v65)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v83 = "__nw_protocol_notify";
            __int16 v84 = 2082;
            id v85 = v63;
            _os_log_impl(&dword_1830D4000, v58, v64, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v63);
          goto LABEL_132;
        }
        if (v65)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v83 = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v58, v64, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v58 = __nwlog_obj();
        os_log_type_t v70 = type[0];
        if (os_log_type_enabled(v58, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v83 = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v58, v70, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_132:
    if (v57) {
      free(v57);
    }
    goto LABEL_62;
  }
  char v42 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v83 = "nw_protocol_instance_set_current_path";
  uint64_t v43 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(p_paths_log_id_num) = 0;
  if (__nwlog_fault(v43, type, &p_paths_log_id_num))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v44 = __nwlog_obj();
      os_log_type_t v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v83 = "nw_protocol_instance_set_current_path";
        _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)p_paths_log_id_num)
    {
      uint64_t v53 = (char *)__nw_create_backtrace_string();
      char v44 = __nwlog_obj();
      os_log_type_t v54 = type[0];
      BOOL v55 = os_log_type_enabled(v44, type[0]);
      if (v53)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v83 = "nw_protocol_instance_set_current_path";
          __int16 v84 = 2082;
          id v85 = v53;
          _os_log_impl(&dword_1830D4000, v44, v54, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v53);
        goto LABEL_116;
      }
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v83 = "nw_protocol_instance_set_current_path";
        _os_log_impl(&dword_1830D4000, v44, v54, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v44 = __nwlog_obj();
      os_log_type_t v66 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v83 = "nw_protocol_instance_set_current_path";
        _os_log_impl(&dword_1830D4000, v44, v66, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_116:
  if (v43) {
    free(v43);
  }
LABEL_63:
}

BOOL nw_protocol_implementation_lookup_path(NWConcrete_nw_protocol_instance *a1, uint64_t current_path, unint64_t *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  uint64_t v6 = (char *)v5;
  if (!current_path)
  {
    current_path = (uint64_t)v5->current_path;
    if (a3) {
      *a3 = current_path;
    }
  }
  BOOL node = nw_hash_table_get_node((uint64_t)v5->flow_registration, current_path, 8);
  if (node)
  {
    BOOL v8 = node + 32;
  }
  else
  {
    if ((v6[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136446978;
        os_log_type_t v12 = "nw_protocol_implementation_lookup_path";
        __int16 v13 = 2082;
        os_log_type_t v14 = v6 + 407;
        __int16 v15 = 2080;
        int v16 = " ";
        __int16 v17 = 2048;
        uint64_t v18 = current_path;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo path found for %lx", (uint8_t *)&v11, 0x2Au);
      }
    }
    BOOL v8 = 0;
  }

  return v8;
}

uint64_t __nw_protocol_instance_set_current_path_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t object = (void *)nw_hash_node_get_object(a2);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    uint64_t v5 = v4 - 96;
  }
  else {
    uint64_t v5 = 0;
  }
  if (object)
  {
    uint64_t v6 = object;
    uint64_t v7 = (void *)object[5];
    if (v7 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v9 = object[11];
      if (v9) {
        object[11] = v9 + 1;
      }
      char v8 = -1;
    }
    else
    {
      char v8 = 0;
    }
    *(void *)os_log_type_t v49 = object;
    char v50 = v8;
    if (v4)
    {
      id v10 = *(void **)(v5 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v12 = *(void *)(v5 + 88);
        if (v12) {
          *(void *)(v5 + 88) = v12 + 1;
        }
        char v11 = -1;
      }
      else
      {
        char v11 = 0;
      }
      *(void *)uint64_t v46 = v5;
      char v47 = v11;
      uint64_t v13 = object[3];
      if (v13)
      {
        os_log_type_t v14 = *(void (**)(void *))(v13 + 160);
        if (v14)
        {
          v14(object);
LABEL_19:
          if (v10 == &nw_protocol_ref_counted_handle) {
            nw::release_if_needed<nw_protocol *>((uint64_t *)v46);
          }
LABEL_21:
          if (v7 == &nw_protocol_ref_counted_handle) {
            nw::release_if_needed<nw_protocol *>((uint64_t *)v49);
          }
          return 1;
        }
      }
      int v16 = __nwlog_obj();
      __int16 v17 = (const char *)v6[2];
      *(_DWORD *)buf = 136446722;
      __int16 v52 = "__nw_protocol_notify";
      if (!v17) {
        __int16 v17 = "invalid";
      }
      __int16 v53 = 2082;
      os_log_type_t v54 = (void *)v17;
      __int16 v55 = 2048;
      os_log_type_t v56 = v6;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      if (__nwlog_fault(v18, &type, &v45))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v19 = __nwlog_obj();
          os_log_type_t v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            os_log_type_t v21 = (const char *)v6[2];
            if (!v21) {
              os_log_type_t v21 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            __int16 v52 = "__nw_protocol_notify";
            __int16 v53 = 2082;
            os_log_type_t v54 = (void *)v21;
            __int16 v55 = 2048;
            os_log_type_t v56 = v6;
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s protocol %{public}s (%p) has invalid notify callback", buf, 0x20u);
          }
        }
        else if (v45)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v19 = __nwlog_obj();
          os_log_type_t v31 = type;
          BOOL v32 = os_log_type_enabled(v19, type);
          if (backtrace_string)
          {
            if (v32)
            {
              BOOL v33 = (const char *)v6[2];
              if (!v33) {
                BOOL v33 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              __int16 v52 = "__nw_protocol_notify";
              __int16 v53 = 2082;
              os_log_type_t v54 = (void *)v33;
              __int16 v55 = 2048;
              os_log_type_t v56 = v6;
              __int16 v57 = 2082;
              os_log_type_t v58 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            goto LABEL_70;
          }
          if (v32)
          {
            char v42 = (const char *)v6[2];
            if (!v42) {
              char v42 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            __int16 v52 = "__nw_protocol_notify";
            __int16 v53 = 2082;
            os_log_type_t v54 = (void *)v42;
            __int16 v55 = 2048;
            os_log_type_t v56 = v6;
            _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          uint64_t v19 = __nwlog_obj();
          os_log_type_t v40 = type;
          if (os_log_type_enabled(v19, type))
          {
            os_log_type_t v41 = (const char *)v6[2];
            if (!v41) {
              os_log_type_t v41 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            __int16 v52 = "__nw_protocol_notify";
            __int16 v53 = 2082;
            os_log_type_t v54 = (void *)v41;
            __int16 v55 = 2048;
            os_log_type_t v56 = v6;
            _os_log_impl(&dword_1830D4000, v19, v40, "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded", buf, 0x20u);
          }
        }
      }
LABEL_70:
      if (v18) {
        free(v18);
      }
      goto LABEL_19;
    }
    __int16 v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v52 = "__nw_protocol_notify";
    __int16 v27 = (char *)_os_log_send_and_compose_impl();

    v46[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v27, v46, &type))
    {
      if (v46[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = v46[0];
        if (os_log_type_enabled(v28, v46[0]))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v52 = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        BOOL v37 = (char *)__nw_create_backtrace_string();
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v38 = v46[0];
        BOOL v39 = os_log_type_enabled(v28, v46[0]);
        if (v37)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v52 = "__nw_protocol_notify";
            __int16 v53 = 2082;
            os_log_type_t v54 = v37;
            _os_log_impl(&dword_1830D4000, v28, v38, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v37);
          goto LABEL_86;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v52 = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v28, v38, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v44 = v46[0];
        if (os_log_type_enabled(v28, v46[0]))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v52 = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v28, v44, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_86:
    if (v27) {
      free(v27);
    }
    goto LABEL_21;
  }
  char v22 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v52 = "__nw_protocol_notify";
  id v23 = (char *)_os_log_send_and_compose_impl();

  v49[0] = OS_LOG_TYPE_ERROR;
  v46[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v49, v46))
  {
    if (v49[0] == OS_LOG_TYPE_FAULT)
    {
      char v24 = __nwlog_obj();
      os_log_type_t v25 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v52 = "__nw_protocol_notify";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v46[0])
    {
      os_log_type_t v34 = (char *)__nw_create_backtrace_string();
      char v24 = __nwlog_obj();
      os_log_type_t v35 = v49[0];
      BOOL v36 = os_log_type_enabled(v24, v49[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v52 = "__nw_protocol_notify";
          __int16 v53 = 2082;
          os_log_type_t v54 = v34;
          _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        goto LABEL_81;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v52 = "__nw_protocol_notify";
        _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v24 = __nwlog_obj();
      os_log_type_t v43 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v52 = "__nw_protocol_notify";
        _os_log_impl(&dword_1830D4000, v24, v43, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_81:
  if (v23) {
    free(v23);
  }
  return 1;
}

void sub_1837017C8(_Unwind_Exception *exception_object)
{
}

uint64_t nw_protocol_instance_create_extra_path(void *a1, uint64_t a2, void *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    os_log_type_t v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v37 = "nw_protocol_instance_create_extra_path";
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__buf) = 16;
    char v35 = 0;
    if (!__nwlog_fault(v21, &__buf, &v35)) {
      goto LABEL_55;
    }
    if (__buf == 17)
    {
      char v22 = __nwlog_obj();
      os_log_type_t v23 = __buf;
      if (os_log_type_enabled(v22, (os_log_type_t)__buf))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v37 = "nw_protocol_instance_create_extra_path";
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v35)
    {
      char v22 = __nwlog_obj();
      os_log_type_t v31 = __buf;
      if (os_log_type_enabled(v22, (os_log_type_t)__buf))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v37 = "nw_protocol_instance_create_extra_path";
        _os_log_impl(&dword_1830D4000, v22, v31, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v22 = __nwlog_obj();
    os_log_type_t v27 = __buf;
    BOOL v28 = os_log_type_enabled(v22, (os_log_type_t)__buf);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v37 = "nw_protocol_instance_create_extra_path";
        _os_log_impl(&dword_1830D4000, v22, v27, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v37 = "nw_protocol_instance_create_extra_path";
      __int16 v38 = 2082;
      BOOL v39 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v22, v27, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_42;
  }
  if (!a2)
  {
    char v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v37 = "nw_protocol_instance_create_extra_path";
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__buf) = 16;
    char v35 = 0;
    if (!__nwlog_fault(v21, &__buf, &v35)) {
      goto LABEL_55;
    }
    if (__buf == 17)
    {
      char v22 = __nwlog_obj();
      os_log_type_t v25 = __buf;
      if (os_log_type_enabled(v22, (os_log_type_t)__buf))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v37 = "nw_protocol_instance_create_extra_path";
        _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s called with null existing_path", buf, 0xCu);
      }
LABEL_54:

LABEL_55:
      if (v21) {
        free(v21);
      }
      goto LABEL_57;
    }
    if (!v35)
    {
      char v22 = __nwlog_obj();
      os_log_type_t v32 = __buf;
      if (os_log_type_enabled(v22, (os_log_type_t)__buf))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v37 = "nw_protocol_instance_create_extra_path";
        _os_log_impl(&dword_1830D4000, v22, v32, "%{public}s called with null existing_path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v22 = __nwlog_obj();
    os_log_type_t v29 = __buf;
    BOOL v30 = os_log_type_enabled(v22, (os_log_type_t)__buf);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v37 = "nw_protocol_instance_create_extra_path";
        _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s called with null existing_path, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v37 = "nw_protocol_instance_create_extra_path";
      __int16 v38 = 2082;
      BOOL v39 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s called with null existing_path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_42:

    free(backtrace_string);
    goto LABEL_55;
  }
  uint64_t __buf = 0;
  uint64_t v7 = *((void *)v5 + 37);
  if (!v7 || (uint64_t node = nw_hash_table_get_node(v7, a2, 8)) == 0)
  {
LABEL_57:
    uint64_t v17 = 0;
    goto LABEL_58;
  }
  uint64_t v9 = node;
  id v10 = *(void **)(node + 48);
  id v11 = v10;
  if (v11)
  {
    arc4random_buf(&__buf, 8uLL);
    char v35 = 0;
    uint64_t v12 = nw_hash_table_add_object(*((void *)v5 + 37), __buf, &v35);
    if (v35)
    {
      uint64_t v13 = v12;
      if (v12)
      {
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)(v12 + 144) = 0u;
        *(_OWORD *)(v12 + 160) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        *(_OWORD *)(v12 + 128) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        objc_storeStrong((id *)(v12 + 48), v10);
        *(_OWORD *)(v13 + 32) = *(_OWORD *)(v9 + 32);
        *(_DWORD *)(v13 + 160) = 1;
        *(unsigned char *)(v13 + 169) &= ~8u;
        objc_storeStrong((id *)(v13 + 152), a3);
        *(void *)(v13 + 136) = 0;
        *(void *)(v13 + 144) = v13 + 136;
        (*(void (**)(char *))(*(void *)(*((void *)v5 + 1) + 80) + 208))(v5);
        if ((v5[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v14 = (id)gLogObj;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            uint64_t v15 = *(void *)(v13 + 48);
            uint64_t v16 = *(void *)(v13 + 152);
            *(_DWORD *)buf = 136447490;
            BOOL v37 = "nw_protocol_instance_create_extra_path";
            __int16 v38 = 2082;
            BOOL v39 = v5 + 407;
            __int16 v40 = 2080;
            os_log_type_t v41 = " ";
            __int16 v42 = 2048;
            uint64_t v43 = __buf;
            __int16 v44 = 2112;
            uint64_t v45 = v15;
            __int16 v46 = 2112;
            uint64_t v47 = v16;
            _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sPath %lx created over %@ (overriden endpoint %@)", buf, 0x3Eu);
          }
        }
        uint64_t v17 = __buf;
        goto LABEL_22;
      }
    }
    if ((v5[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        BOOL v37 = "nw_protocol_instance_create_extra_path";
        __int16 v38 = 2082;
        BOOL v39 = v5 + 407;
        __int16 v40 = 2080;
        os_log_type_t v41 = " ";
        __int16 v42 = 2048;
        uint64_t v43 = __buf;
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to add additional path %lx to paths table", buf, 0x2Au);
      }
    }
  }
  else if ((v5[405] & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      BOOL v37 = "nw_protocol_instance_create_extra_path";
      __int16 v38 = 2082;
      BOOL v39 = v5 + 407;
      __int16 v40 = 2080;
      os_log_type_t v41 = " ";
      __int16 v42 = 2048;
      uint64_t v43 = a2;
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot establish extra path on interface used by %lx: interface not found", buf, 0x2Au);
    }
  }
  uint64_t v17 = 0;
LABEL_22:

LABEL_58:
  return v17;
}

void sub_183701FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_instance_establish_path(void *a1, uint64_t a2)
{
  uint64_t v226 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = (char *)v3;
  if (!v3)
  {
    uint64_t v126 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
    id v127 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__dst) = 16;
    LOBYTE(v218) = 0;
    if (!__nwlog_fault(v127, &__dst, &v218)) {
      goto LABEL_247;
    }
    if (__dst == 17)
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = __dst;
      if (os_log_type_enabled(v128, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
        _os_log_impl(&dword_1830D4000, v128, v129, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)v218)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v133 = __dst;
      BOOL v134 = os_log_type_enabled(v128, (os_log_type_t)__dst);
      if (backtrace_string)
      {
        if (v134)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v128, v133, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_247:
        if (!v127) {
          goto LABEL_18;
        }
LABEL_248:
        free(v127);
        goto LABEL_18;
      }
      if (v134)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
        _os_log_impl(&dword_1830D4000, v128, v133, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v138 = __dst;
      if (os_log_type_enabled(v128, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
        _os_log_impl(&dword_1830D4000, v128, v138, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_246:

    goto LABEL_247;
  }
  if (!a2)
  {
    char v130 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
    id v127 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__dst) = 16;
    LOBYTE(v218) = 0;
    if (!__nwlog_fault(v127, &__dst, &v218)) {
      goto LABEL_247;
    }
    if (__dst == 17)
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v131 = __dst;
      if (os_log_type_enabled(v128, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
        _os_log_impl(&dword_1830D4000, v128, v131, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if ((_BYTE)v218)
    {
      BOOL v135 = (char *)__nw_create_backtrace_string();
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v136 = __dst;
      BOOL v137 = os_log_type_enabled(v128, (os_log_type_t)__dst);
      if (v135)
      {
        if (v137)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v135;
          _os_log_impl(&dword_1830D4000, v128, v136, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v135);
        if (!v127) {
          goto LABEL_18;
        }
        goto LABEL_248;
      }
      if (v137)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
        _os_log_impl(&dword_1830D4000, v128, v136, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v139 = __dst;
      if (os_log_type_enabled(v128, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
        _os_log_impl(&dword_1830D4000, v128, v139, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_246;
  }
  uint64_t v5 = v3[37];
  if (!v5)
  {
    if ((v4[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v4 + 407;
        *(_WORD *)&buf[22] = 2080;
        v207 = " ";
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo path table found", buf, 0x20u);
      }
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  uint64_t node = nw_hash_table_get_node(v5, a2, 8);
  if (node)
  {
    uint64_t v7 = node;
    if (*(void *)(node + 56))
    {
      if ((v4[405] & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v8 = (id)gLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v4 + 407;
          *(_WORD *)&buf[22] = 2080;
          v207 = " ";
          __int16 v208 = 2048;
          uint64_t v209 = a2;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sPath %lx already has registered flow", buf, 0x2Au);
        }
LABEL_17:

        goto LABEL_18;
      }
      goto LABEL_18;
    }
    uint64_t v184 = node + 32;
    int is_null = uuid_is_null((const unsigned __int8 *)(node + 32));
    uint64_t v12 = *(void **)(v7 + 152);
    if (v12)
    {
      id v13 = v12;
LABEL_43:
      __int16 v182 = (void **)(v4 + 40);
      goto LABEL_44;
    }
    if (!*((void *)v4 + 45) && !*((void *)v4 + 46))
    {
LABEL_49:
      id v33 = *((id *)v4 + 44);
      __int16 v182 = (void **)(v4 + 40);
      if (!v33)
      {
        os_log_type_t v25 = *((id *)v4 + 5);
        nw_endpoint_t v185 = 0;
        os_log_type_t v27 = 0;
        if (!v25) {
          goto LABEL_65;
        }
        goto LABEL_45;
      }
      id v13 = v33;
LABEL_44:
      os_log_type_t v25 = v13;
      nw_endpoint_t v185 = v25;
LABEL_45:
      endpoint = v25;
      int v26 = [endpoint type];

      if (v26 == 1)
      {
        os_log_type_t v27 = endpoint;
        if (nw_endpoint_get_address_family(endpoint) != 2) {
          goto LABEL_65;
        }
        BOOL v28 = nw_parameters_create();
        nw_parameters_require_interface(v28, *(nw_interface_t *)(v7 + 48));
        evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(0, v28);
        BOOL v30 = (os_unfair_lock_s *)evaluator_for_endpoint;
        if (evaluator_for_endpoint)
        {
          os_log_type_t v31 = evaluator_for_endpoint;
          os_unfair_lock_lock(v30 + 24);
          id v32 = v31[6];
          os_unfair_lock_unlock(v30 + 24);
        }
        else
        {
          id v32 = 0;
        }
        int is_eligible_for_CrazyIvan46 = nw_path_is_eligible_for_CrazyIvan46(v32);

        if (is_eligible_for_CrazyIvan46)
        {
          uint64_t v35 = *(void *)(v7 + 48);
          if (v35) {
            LODWORD(v35) = *(_DWORD *)(v35 + 8);
          }
          LODWORD(v201[0]) = v35;
          nw_endpoint_t address = nw_endpoint_get_address(endpoint);
          *(void *)&long long v218 = 0;
          int v37 = nw_nat64_copy_prefixes((unsigned int *)v201, &v218);
          if (v37 >= 1)
          {
            int v180 = is_null;
            uint64_t v38 = 0;
            uint64_t v39 = 16 * v37;
            while (1)
            {
              long long __dst = 0uLL;
              if (nw_nat64_synthesize_v6((void *)(v218 + v38), (__int16 *)&address->sa_data[2], (char *)&__dst))break; {
              v38 += 16;
              }
              if (v39 == v38)
              {
                int is_null = v180;
                goto LABEL_61;
              }
            }
            LODWORD(v207) = 0;
            *(void *)&buf[8] = 0;
            *(void *)&buf[16] = 0;
            *(void *)buf = 7708;
            *(_WORD *)&buf[2] = *(_WORD *)address->sa_data;
            *(_OWORD *)&buf[8] = __dst;
            nw_endpoint_t v40 = nw_endpoint_create_address((const sockaddr *)buf);

            int is_null = v180;
            nw_endpoint_t v185 = v40;
          }
LABEL_61:
          if ((void)v218) {
            free((void *)v218);
          }
        }
      }
      os_log_type_t v27 = endpoint;
LABEL_65:
      endpointa = v27;
      os_log_type_t v41 = *(void **)(v7 + 128);
      int v42 = v4[405];
      if (v41)
      {
        if ((v42 & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v43 = (id)gLogObj;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            __int16 v44 = *(os_unfair_lock_s **)(v7 + 128);
            if (v44)
            {
              uint64_t v45 = v44;
              os_unfair_lock_lock(v44 + 24);
              id v46 = v45[6];
              os_unfair_lock_unlock(v44 + 24);
            }
            else
            {
              id v46 = 0;
            }
            id v50 = v46;
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v4 + 407;
            *(_WORD *)&buf[22] = 2080;
            v207 = " ";
            __int16 v208 = 2112;
            uint64_t v209 = (uint64_t)v44;
            __int16 v210 = 2112;
            *(void *)int v211 = v50;
            _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sCreating new flow from evaluator %@ path %@", buf, 0x34u);
          }
          os_log_type_t v41 = *(void **)(v7 + 128);
        }
        new_flow_from_evaluator = nw_path_flow_registration_create_new_flow_from_evaluator(*((void **)v4 + 35), v41);
      }
      else
      {
        if ((v42 & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v47 = (id)gLogObj;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v4 + 407;
            *(_WORD *)&buf[22] = 2080;
            v207 = " ";
            __int16 v208 = 2112;
            uint64_t v209 = (uint64_t)endpointa;
            _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sCreating new flow for %@", buf, 0x2Au);
          }
        }
        if (is_null) {
          uint64_t v48 = 0;
        }
        else {
          uint64_t v48 = (_OWORD *)v184;
        }
        new_flow_from_evaluator = nw_path_flow_registration_create_new_flow(*((void **)v4 + 35), 1, is_null == 0, 0, 0, v48, v185, 0);
      }
      os_log_type_t v51 = *(void **)(v7 + 56);
      *(void *)(v7 + 56) = new_flow_from_evaluator;

      __int16 v52 = *(void **)(v7 + 56);
      if (!v52)
      {
        if ((v4[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v67 = (id)gLogObj;
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
          {
            uint64_t v68 = *(void *)(v7 + 48);
            uint64_t v69 = "socket";
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&unsigned char buf[12] = 2082;
            if (!is_null) {
              uint64_t v69 = "channel";
            }
            *(void *)&buf[14] = v4 + 407;
            *(_WORD *)&buf[22] = 2080;
            v207 = " ";
            __int16 v208 = 2048;
            uint64_t v209 = a2;
            __int16 v210 = 2080;
            *(void *)int v211 = v69;
            *(_WORD *)&v211[8] = 2112;
            *(void *)&v211[10] = v68;
            _os_log_impl(&dword_1830D4000, v67, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sPath %lx failed to request %s flow over %@", buf, 0x3Eu);
          }
        }
        *(_DWORD *)(v7 + 160) = 2;
        *(unsigned char *)(v7 + 169) |= 8u;
        os_log_type_t v70 = endpointa;
        (*(void (**)(char *, uint64_t, uint64_t, BOOL))(*(void *)(*((void *)v4 + 1) + 80) + 208))(v4, a2, 2, *((void *)v4 + 39) == a2);
        nw_protocol_path_state_dispose(v4, v184);
        nw_hash_table_remove_node(*((void *)v4 + 37), v7);
        uint64_t v9 = 0;
        goto LABEL_198;
      }
      __int16 v53 = v4 - 96;
      if (is_null)
      {
        long long v225 = *(_OWORD *)v53;
        long long v224 = 0uLL;
        nw_path_flow_registration_get_id(v52, &v224);
        *(_OWORD *)__int16 v53 = v224;
        *((void *)v4 + 40) = a2;
        nw_path_override_interface(*((void **)v4 + 36), *(void **)(v7 + 48), 1);
        os_log_type_t v54 = v185;
        if (!v185) {
          os_log_type_t v54 = *v182;
        }
        objc_storeStrong((id *)v4 + 41, v54);
        __int16 v55 = (void *)*((void *)v4 + 42);
        *((void *)v4 + 42) = 0;

        id v56 = *((id *)v4 + 6);
        BOOL v57 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v56, 0, 0);

        os_log_type_t v58 = (void *)*((void *)v4 + 43);
        *((void *)v4 + 43) = v57;

        nw_parameters_require_interface(*((nw_parameters_t *)v4 + 43), *(nw_interface_t *)(v7 + 48));
        *(void *)&long long __dst = 0;
        *((void *)&__dst + 1) = &__dst;
        uint64_t v222 = 0x2020000000;
        v223 = v4 - 96;
        *(void *)&long long v218 = 0;
        *((void *)&v218 + 1) = &v218;
        uint64_t v219 = 0x2020000000;
        char v220 = 0;
        v201[0] = 0;
        v201[1] = v201;
        v201[2] = 0x2020000000;
        v201[3] = 0;
        uint64_t v59 = (void *)*((void *)v4 + 6);
        v197[0] = MEMORY[0x1E4F143A8];
        v197[1] = 3221225472;
        v197[2] = __nw_protocol_instance_establish_path_block_invoke;
        v197[3] = &unk_1E523BD10;
        os_log_type_t v60 = v4;
        id v198 = v60;
        v199 = &v218;
        uint32_t v200 = v201;
        nw_parameters_internal_iterate_protocol_stack(v59, 4, 0, v197);
        if (*(unsigned char *)(*((void *)&v218 + 1) + 24))
        {
          *(void *)buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2020000000;
          LOBYTE(v207) = 0;
          BOOL v61 = (void *)*((void *)v4 + 43);
          v190[0] = MEMORY[0x1E4F143A8];
          v190[1] = 3221225472;
          v190[2] = __nw_protocol_instance_establish_path_block_invoke_2;
          v190[3] = &unk_1E523BD38;
          int v192 = v201;
          char v62 = v60;
          nw_endpoint_type_t v191 = v62;
          p_dst = &__dst;
          int v194 = buf;
          uint64_t v195 = a2;
          uint64_t v196 = v184;
          nw_parameters_internal_iterate_protocol_stack(v61, 4, 0, v190);
          if (*(unsigned char *)(*(void *)&buf[8] + 24))
          {
            if ((v4[405] & 0x80000000) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v63 = (id)gLogObj;
              if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v213 = 136446722;
                *(void *)&v213[4] = "nw_protocol_instance_establish_path";
                __int16 v214 = 2082;
                uint32_t v215 = v62 + 407;
                __int16 v216 = 2080;
                v217 = " ";
                _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach application protocol", v213, 0x20u);
              }
            }
            nw_protocol_instance_tear_down_path_inner(v62, v184);
            *(_OWORD *)__int16 v53 = v225;
            *((void *)v4 + 40) = 0;
            nw_path_override_interface(*((void **)v4 + 36), 0, 0);
            os_log_type_t v64 = (void *)*((void *)v4 + 41);
            *((void *)v4 + 41) = 0;

            BOOL v65 = (void *)*((void *)v4 + 42);
            *((void *)v4 + 42) = 0;

            os_log_type_t v66 = (void *)*((void *)v4 + 43);
            *((void *)v4 + 43) = 0;

            _Block_object_dispose(buf, 8);
            uint64_t v9 = 0;
            goto LABEL_196;
          }

          _Block_object_dispose(buf, 8);
        }
        long long v212 = *(_OWORD *)v53;
        if ((v4[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v86 = (id)gLogObj;
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v87 = *(void *)(v7 + 48);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v60 + 407;
            *(_WORD *)&buf[22] = 2080;
            v207 = " ";
            __int16 v208 = 2048;
            uint64_t v209 = a2;
            __int16 v210 = 1040;
            *(_DWORD *)int v211 = 16;
            *(_WORD *)&v211[4] = 2096;
            *(void *)&v211[6] = &v212;
            *(_WORD *)&v211[14] = 2112;
            *(void *)&v211[16] = v87;
            _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPath %lx requested socket flow %{uuid_t}.16P over %@", buf, 0x44u);
          }
        }
        __int16 v88 = v60;
        uint64_t v89 = nw_hash_table_get_node(*((void *)v4 + 37), a2, 8);
        if (v89)
        {
          uint64_t v90 = v89;
          if (*(void *)(v89 + 56))
          {
            if (nw_socket_protocol_identifier::onceToken != -1) {
              dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_65117);
            }
            uint64_t internal = nw_protocol_create_internal((uint64_t)&nw_socket_protocol_identifier::identifier, *((void **)v4 + 41), *((const char **)v4 + 43), 1);
            if (internal)
            {
              __int16 v92 = (const char *)internal;
              if (nw_socket_protocol_identifier::onceToken != -1) {
                dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_65117);
              }
              id v93 = nw_protocol_definition_create_with_identifier(&nw_socket_protocol_identifier::identifier);
              uint64_t v94 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)v4 + 43));
              nw_protocol_options_t v177 = nw_protocol_stack_copy_transport_protocol(v94);
              nw_protocol_instance_set_protocol_instance(v88, v177, v93, (uint64_t)v92);
              char v176 = v94;
              nw_protocol_options_t v178 = nw_protocol_stack_copy_internet_protocol(v94);
              nw_protocol_instance_set_protocol_instance(v88, v178, v93, (uint64_t)v92);
              int v183 = (uint64_t *)(v90 + 64);
              if (*(void *)(v90 + 64)) {
                uint64_t v95 = *(void *)(v90 + 64);
              }
              else {
                uint64_t v95 = (uint64_t)(v4 - 96);
              }
              nw_content_context_t v181 = (void *)*((void *)v92 + 5);
              if (v181 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v101 = *((void *)v92 + 11);
                if (v101) {
                  *((void *)v92 + 11) = v101 + 1;
                }
                *(void *)v213 = v92;
                char v96 = v213[8] | 1;
              }
              else
              {
                *(void *)v213 = v92;
                char v96 = v213[8] & 0xFE;
              }
              v213[8] = v96;
              id v179 = *(void **)(v95 + 40);
              if (v179 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v103 = *(void *)(v95 + 88);
                if (v103) {
                  *(void *)(v95 + 88) = v103 + 1;
                }
                int v204 = (char *)v95;
                char v102 = v205 | 1;
              }
              else
              {
                int v204 = (char *)v95;
                char v102 = v205 & 0xFE;
              }
              char v205 = v102;
              id v104 = (uint64_t (**)(const char *))*((void *)v92 + 3);
              id v175 = v93;
              if (v104)
              {
                BOOL v105 = *v104;
                if (v105)
                {
                  char v100 = v105(v92);
LABEL_163:
                  if (v179 == &nw_protocol_ref_counted_handle) {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)&v204);
                  }
                  if (v181 == &nw_protocol_ref_counted_handle) {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v213);
                  }
                  if (!*v183)
                  {
                    if (*((_UNKNOWN **)v92 + 5) == &nw_protocol_ref_counted_handle)
                    {
                      uint64_t v107 = *((void *)v92 + 11);
                      if (v107) {
                        *((void *)v92 + 11) = v107 + 1;
                      }
                      *(void *)buf = v92;
                      buf[8] |= 1u;
                      char v106 = 1;
                    }
                    else
                    {
                      char v106 = 0;
                      *(void *)buf = v92;
                      buf[8] &= ~1u;
                    }
                    char v108 = *(unsigned char *)(v90 + 72);
                    if (v108)
                    {
                      nw::release_if_needed<nw_protocol *>(v183);
                      char v108 = *(unsigned char *)(v90 + 72);
                    }
                    *(void *)(v90 + 64) = v92;
                    *(unsigned char *)(v90 + 72) = v106 | v108 & 0xFE;
                  }

                  p_super = &v175->super;
                  goto LABEL_182;
                }
              }
              __int16 v140 = __nwlog_obj();
              uint32_t v141 = (const char *)*((void *)v92 + 2);
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
              if (!v141) {
                uint32_t v141 = "invalid";
              }
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v141;
              *(_WORD *)&buf[22] = 2048;
              v207 = v92;
              nw_endpoint_type_t v174 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v202 = 0;
              if (__nwlog_fault(v174, &type, &v202))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  __int16 v142 = __nwlog_obj();
                  os_log_type_t v143 = type;
                  if (os_log_type_enabled(v142, type))
                  {
                    os_log_type_t v144 = (const char *)*((void *)v92 + 2);
                    if (!v144) {
                      os_log_type_t v144 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v144;
                    *(_WORD *)&buf[22] = 2048;
                    v207 = v92;
                    _os_log_impl(&dword_1830D4000, v142, v143, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback", buf, 0x20u);
                  }
                }
                else
                {
                  if (v202)
                  {
                    os_log_type_t v151 = (char *)__nw_create_backtrace_string();
                    log = __nwlog_obj();
                    os_log_type_t v172 = type;
                    BOOL v152 = os_log_type_enabled(log, type);
                    if (v151)
                    {
                      if (v152)
                      {
                        uint64_t v153 = (const char *)*((void *)v92 + 2);
                        if (!v153) {
                          uint64_t v153 = "invalid";
                        }
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v153;
                        *(_WORD *)&buf[22] = 2048;
                        v207 = v92;
                        __int16 v208 = 2082;
                        uint64_t v209 = (uint64_t)v151;
                        _os_log_impl(&dword_1830D4000, log, v172, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
                      }

                      free(v151);
                    }
                    else
                    {
                      if (v152)
                      {
                        id v169 = (const char *)*((void *)v92 + 2);
                        if (!v169) {
                          id v169 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v169;
                        *(_WORD *)&buf[22] = 2048;
                        v207 = v92;
                        _os_log_impl(&dword_1830D4000, log, v172, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, no backtrace", buf, 0x20u);
                      }
                    }
                    goto LABEL_307;
                  }
                  __int16 v142 = __nwlog_obj();
                  os_log_type_t v165 = type;
                  if (os_log_type_enabled(v142, type))
                  {
                    uint64_t v166 = (const char *)*((void *)v92 + 2);
                    if (!v166) {
                      uint64_t v166 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v166;
                    *(_WORD *)&buf[22] = 2048;
                    v207 = v92;
                    _os_log_impl(&dword_1830D4000, v142, v165, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, backtrace limit exceeded", buf, 0x20u);
                  }
                }
              }
LABEL_307:
              if (v174) {
                free(v174);
              }
              char v100 = 0;
              goto LABEL_163;
            }
            if ((v4[405] & 0x80000000) == 0)
            {
              p_super = __nwlog_obj();
              if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_instance_attach_socket_protocol";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v88 + 407;
                *(_WORD *)&buf[22] = 2080;
                v207 = " ";
                __int16 v208 = 2048;
                uint64_t v209 = a2;
                _os_log_impl(&dword_1830D4000, p_super, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sPath %lx could not create socket protocol", buf, 0x2Au);
              }
              char v100 = 0;
LABEL_182:

              *(_OWORD *)__int16 v53 = v225;
              int v109 = v4[405];
              if (v100)
              {
                if ((v109 & 0x80000000) == 0)
                {
                  id v110 = __nwlog_obj();
                  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v111 = *(void *)(v7 + 48);
                    *(_DWORD *)buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v88 + 407;
                    *(_WORD *)&buf[22] = 2080;
                    v207 = " ";
                    __int16 v208 = 2048;
                    uint64_t v209 = a2;
                    __int16 v210 = 2112;
                    *(void *)int v211 = v111;
                    _os_log_impl(&dword_1830D4000, v110, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPath %lx opened socket over %@", buf, 0x34u);
                  }
                }
                uint64_t v112 = *(const char **)(v7 + 64);
                if (v112)
                {
                  os_log_type_t v113 = (void *)*((void *)v112 + 5);
                  if (v113 == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v120 = *((void *)v112 + 11);
                    if (v120) {
                      *((void *)v112 + 11) = v120 + 1;
                    }
                    *(void *)v213 = v112;
                    char v114 = v213[8] | 1;
                  }
                  else
                  {
                    *(void *)v213 = *(void *)(v7 + 64);
                    char v114 = v213[8] & 0xFE;
                  }
                  v213[8] = v114;
                  BOOL v121 = (void *)*((void *)v88 - 7);
                  if (v121 == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v123 = *((void *)v88 - 1);
                    if (v123) {
                      *((void *)v88 - 1) = v123 + 1;
                    }
                    int v204 = v4 - 96;
                    char v122 = v205 | 1;
                  }
                  else
                  {
                    int v204 = v4 - 96;
                    char v122 = v205 & 0xFE;
                  }
                  char v205 = v122;
                  uint64_t v124 = *((void *)v112 + 3);
                  if (v124)
                  {
                    os_log_type_t v125 = *(void (**)(const char *, char *))(v124 + 24);
                    if (v125)
                    {
                      v125(v112, v4 - 96);
                      if (v121 != &nw_protocol_ref_counted_handle) {
                        goto LABEL_211;
                      }
                      goto LABEL_210;
                    }
                  }
                  uint64_t v145 = __nwlog_obj();
                  id v146 = (const char *)*((void *)v112 + 2);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                  if (!v146) {
                    id v146 = "invalid";
                  }
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v146;
                  *(_WORD *)&buf[22] = 2048;
                  v207 = v112;
                  os_log_type_t v147 = (char *)_os_log_send_and_compose_impl();

                  os_log_type_t type = OS_LOG_TYPE_ERROR;
                  char v202 = 0;
                  if (__nwlog_fault(v147, &type, &v202))
                  {
                    if (type == OS_LOG_TYPE_FAULT)
                    {
                      os_log_type_t v148 = __nwlog_obj();
                      os_log_type_t v149 = type;
                      if (os_log_type_enabled(v148, type))
                      {
                        uint64_t v150 = (const char *)*((void *)v112 + 2);
                        if (!v150) {
                          uint64_t v150 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v150;
                        *(_WORD *)&buf[22] = 2048;
                        v207 = v112;
                        _os_log_impl(&dword_1830D4000, v148, v149, "%{public}s protocol %{public}s (%p) has invalid connect callback", buf, 0x20u);
                      }
LABEL_314:

                      goto LABEL_315;
                    }
                    if (!v202)
                    {
                      os_log_type_t v148 = __nwlog_obj();
                      os_log_type_t v167 = type;
                      if (os_log_type_enabled(v148, type))
                      {
                        v168 = (const char *)*((void *)v112 + 2);
                        if (!v168) {
                          v168 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v168;
                        *(_WORD *)&buf[22] = 2048;
                        v207 = v112;
                        _os_log_impl(&dword_1830D4000, v148, v167, "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded", buf, 0x20u);
                      }
                      goto LABEL_314;
                    }
                    v158 = (char *)__nw_create_backtrace_string();
                    os_log_type_t v148 = __nwlog_obj();
                    os_log_type_t v159 = type;
                    BOOL v160 = os_log_type_enabled(v148, type);
                    if (!v158)
                    {
                      if (v160)
                      {
                        int v170 = (const char *)*((void *)v112 + 2);
                        if (!v170) {
                          int v170 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v170;
                        *(_WORD *)&buf[22] = 2048;
                        v207 = v112;
                        _os_log_impl(&dword_1830D4000, v148, v159, "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace", buf, 0x20u);
                      }
                      goto LABEL_314;
                    }
                    if (v160)
                    {
                      uint32_t v161 = (const char *)*((void *)v112 + 2);
                      if (!v161) {
                        uint32_t v161 = "invalid";
                      }
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v161;
                      *(_WORD *)&buf[22] = 2048;
                      v207 = v112;
                      __int16 v208 = 2082;
                      uint64_t v209 = (uint64_t)v158;
                      _os_log_impl(&dword_1830D4000, v148, v159, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }

                    free(v158);
                  }
LABEL_315:
                  if (v147) {
                    free(v147);
                  }
                  if (v121 != &nw_protocol_ref_counted_handle) {
                    goto LABEL_211;
                  }
LABEL_210:
                  nw::release_if_needed<nw_protocol *>((uint64_t *)&v204);
LABEL_211:
                  if (v113 == &nw_protocol_ref_counted_handle) {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v213);
                  }
LABEL_213:
                  uint64_t v9 = 1;
                  goto LABEL_195;
                }
                uint32_t v154 = __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                int v155 = (char *)_os_log_send_and_compose_impl();

                v213[0] = 16;
                LOBYTE(v204) = 0;
                if (__nwlog_fault(v155, v213, &v204))
                {
                  if (v213[0] == 17)
                  {
                    v156 = __nwlog_obj();
                    os_log_type_t v157 = v213[0];
                    if (os_log_type_enabled(v156, (os_log_type_t)v213[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                      _os_log_impl(&dword_1830D4000, v156, v157, "%{public}s called with null protocol", buf, 0xCu);
                    }
                  }
                  else if ((_BYTE)v204)
                  {
                    id v162 = (char *)__nw_create_backtrace_string();
                    v156 = __nwlog_obj();
                    os_log_type_t v163 = v213[0];
                    BOOL v164 = os_log_type_enabled(v156, (os_log_type_t)v213[0]);
                    if (v162)
                    {
                      if (v164)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v162;
                        _os_log_impl(&dword_1830D4000, v156, v163, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(v162);
                      goto LABEL_325;
                    }
                    if (v164)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                      _os_log_impl(&dword_1830D4000, v156, v163, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                    }
                  }
                  else
                  {
                    v156 = __nwlog_obj();
                    os_log_type_t v171 = v213[0];
                    if (os_log_type_enabled(v156, (os_log_type_t)v213[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                      _os_log_impl(&dword_1830D4000, v156, v171, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                    }
                  }
                }
LABEL_325:
                if (v155) {
                  free(v155);
                }
                goto LABEL_213;
              }
              if ((v109 & 0x80000000) == 0) {
                goto LABEL_191;
              }
              goto LABEL_194;
            }
LABEL_144:

            *(_OWORD *)__int16 v53 = v225;
            if ((v4[405] & 0x80000000) == 0)
            {
LABEL_191:
              os_log_type_t v115 = __nwlog_obj();
              if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
              {
                uint64_t v116 = *(void *)(v7 + 48);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v88 + 407;
                *(_WORD *)&buf[22] = 2080;
                v207 = " ";
                __int16 v208 = 2048;
                uint64_t v209 = a2;
                __int16 v210 = 2112;
                *(void *)int v211 = v116;
                _os_log_impl(&dword_1830D4000, v115, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sPath %lx failed to open socket over %@", buf, 0x34u);
              }
            }
LABEL_194:
            nw_protocol_instance_tear_down_path_inner(v88, v184);
            uint64_t v9 = 0;
LABEL_195:
            *((void *)v4 + 40) = 0;
            nw_path_override_interface(*((void **)v4 + 36), 0, 0);
            char v117 = (void *)*((void *)v4 + 41);
            *((void *)v4 + 41) = 0;

            uint64_t v118 = (void *)*((void *)v4 + 42);
            *((void *)v4 + 42) = 0;

            BOOL v119 = (void *)*((void *)v4 + 43);
            *((void *)v4 + 43) = 0;

LABEL_196:
            _Block_object_dispose(v201, 8);
            _Block_object_dispose(&v218, 8);
            _Block_object_dispose(&__dst, 8);
            goto LABEL_197;
          }
          if (v4[405] < 0) {
            goto LABEL_144;
          }
          BOOL v97 = __nwlog_obj();
          if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
          {
LABEL_143:

            goto LABEL_144;
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_attach_socket_protocol";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v88 + 407;
          *(_WORD *)&buf[22] = 2080;
          v207 = " ";
          __int16 v208 = 2048;
          uint64_t v209 = a2;
          os_log_type_t v98 = "%{public}s %{public}s%sPath %lx has no registered flow";
        }
        else
        {
          if (v4[405] < 0) {
            goto LABEL_144;
          }
          BOOL v97 = __nwlog_obj();
          if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
            goto LABEL_143;
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_attach_socket_protocol";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v88 + 407;
          *(_WORD *)&buf[22] = 2080;
          v207 = " ";
          __int16 v208 = 2048;
          uint64_t v209 = a2;
          os_log_type_t v98 = "%{public}s %{public}s%sNo path found for %lx";
        }
        _os_log_impl(&dword_1830D4000, v97, OS_LOG_TYPE_ERROR, v98, buf, 0x2Au);
        goto LABEL_143;
      }
      long long __dst = *(_OWORD *)v53;
      if ((v4[405] & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v71 = (id)gLogObj;
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v72 = *(void *)(v7 + 48);
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v4 + 407;
          *(_WORD *)&buf[22] = 2080;
          v207 = " ";
          __int16 v208 = 2048;
          uint64_t v209 = a2;
          __int16 v210 = 1040;
          *(_DWORD *)int v211 = 16;
          *(_WORD *)&v211[4] = 2096;
          *(void *)&v211[6] = &__dst;
          *(_WORD *)&v211[14] = 2112;
          *(void *)&v211[16] = v72;
          _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPath %lx requested channel flow %{uuid_t}.16P over %@", buf, 0x44u);
        }

        __int16 v52 = *(void **)(v7 + 56);
      }
      uint64_t v73 = (NWConcrete_nw_path *)nw_path_flow_registration_force_update(v52);
      LODWORD(v201[0]) = 0;
      if (nw_path_flow_registration_get_nexus_instance(v73, *(NWConcrete_nw_path_flow_registration **)(v7 + 56), &v218, v201))
      {
        nw_protocol_instance_bring_up_channel(v4, a2, v184, v73);
LABEL_174:

        uint64_t v9 = 1;
LABEL_197:
        os_log_type_t v70 = endpointa;
LABEL_198:

        goto LABEL_19;
      }
      if ((v4[405] & 0x80000000) == 0)
      {
        id v74 = __nwlog_obj();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v75 = *(void *)(v7 + 48);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v4 + 407;
          *(_WORD *)&buf[22] = 2080;
          v207 = " ";
          __int16 v208 = 2048;
          uint64_t v209 = a2;
          __int16 v210 = 2112;
          *(void *)int v211 = v75;
          _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNo nexus assignment yet, saving path %lx over %@", buf, 0x34u);
        }
      }
      char v76 = (void *)*((void *)v4 + 9);
      if (!v76)
      {
        xpc_object_t v77 = xpc_array_create(0, 0);
        __int16 v78 = (void *)*((void *)v4 + 9);
        *((void *)v4 + 9) = v77;

        char v76 = (void *)*((void *)v4 + 9);
      }
      xpc_array_set_uint64(v76, 0xFFFFFFFFFFFFFFFFLL, a2);
      if (*((void *)v4 + 8)) {
        goto LABEL_174;
      }
      char v79 = nw_protocol_instance_copy_association(v4);
      __int16 v80 = (void *)*((void *)v4 + 8);
      *((void *)v4 + 8) = v79;

      char v81 = (void *)*((void *)v4 + 8);
      int v82 = v4[405];
      if (v81)
      {
        if ((v82 & 0x80000000) == 0)
        {
          __int16 v83 = __nwlog_obj();
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v4 + 407;
            *(_WORD *)&buf[22] = 2080;
            v207 = " ";
            _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRegistering association", buf, 0x20u);
          }

          char v81 = (void *)*((void *)v4 + 8);
        }
        __int16 v84 = (void *)*((void *)v4 + 6);
        v188[0] = MEMORY[0x1E4F143A8];
        v188[1] = 3221225472;
        v188[2] = __nw_protocol_instance_establish_path_block_invoke_66;
        v188[3] = &unk_1E523F9F0;
        os_log_type_t v189 = v4;
        nw_association_register_internal(v81, v84, v189, 0, 1, v188);
        id v85 = v189;
      }
      else
      {
        if (v82 < 0) {
          goto LABEL_174;
        }
        id v85 = __nwlog_obj();
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v4 + 407;
          *(_WORD *)&buf[22] = 2080;
          v207 = " ";
          _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFailed to access protocol instance association", buf, 0x20u);
        }
      }

      goto LABEL_174;
    }
    os_log_type_t v14 = nw_parameters_create();
    nw_parameters_require_interface(v14, *(nw_interface_t *)(v7 + 48));
    uint64_t v15 = nw_path_create_evaluator_for_endpoint(0, v14);
    uint64_t v16 = (os_unfair_lock_s *)v15;
    if (v15)
    {
      uint64_t v17 = v15;
      os_unfair_lock_lock(v16 + 24);
      uint64_t v18 = v17[6];
      os_unfair_lock_unlock(v16 + 24);
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (nw_path_has_ipv6(v18) && (uint64_t v19 = (void *)*((void *)v4 + 46)) != 0)
    {
      if ((v4[405] & 0x80000000) == 0)
      {
        os_log_type_t v20 = __nwlog_obj();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          logging_description = nw_endpoint_get_logging_description(*((void **)v4 + 46));
          *(_DWORD *)buf = 136446979;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v4 + 407;
          *(_WORD *)&buf[22] = 2080;
          v207 = " ";
          __int16 v208 = 2081;
          uint64_t v209 = (uint64_t)logging_description;
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sUsing IPv6 Preferred Address %{private}s to establish a new path", buf, 0x2Au);
        }

        uint64_t v19 = (void *)*((void *)v4 + 46);
      }
    }
    else
    {
      if (!nw_path_has_ipv4(v18) || (uint64_t v19 = (void *)*((void *)v4 + 45)) == 0)
      {
        id v13 = 0;
        goto LABEL_41;
      }
      if ((v4[405] & 0x80000000) == 0)
      {
        char v22 = __nwlog_obj();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v23 = nw_endpoint_get_logging_description(*((void **)v4 + 45));
          *(_DWORD *)buf = 136446979;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v4 + 407;
          *(_WORD *)&buf[22] = 2080;
          v207 = " ";
          __int16 v208 = 2081;
          uint64_t v209 = (uint64_t)v23;
          _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sUsing IPv4 Preferred Address %{private}s to establish a new path", buf, 0x2Au);
        }

        uint64_t v19 = (void *)*((void *)v4 + 45);
      }
    }
    id v13 = v19;
    char v24 = *(void **)(v7 + 120);
    *(void *)(v7 + 120) = v13;

LABEL_41:
    if (v13) {
      goto LABEL_43;
    }
    id v13 = *(id *)(v7 + 152);
    if (v13) {
      goto LABEL_43;
    }
    goto LABEL_49;
  }
  if ((v4[405] & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v4 + 407;
      *(_WORD *)&buf[22] = 2080;
      v207 = " ";
      __int16 v208 = 2048;
      uint64_t v209 = a2;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo path found for %lx", buf, 0x2Au);
    }
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v9 = 0;
LABEL_19:

  return v9;
}

void sub_1837044C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a21 == &nw_protocol_ref_counted_handle) {
    nw::release_if_needed<nw_protocol *>(&a59);
  }

  _Block_object_dispose(&a52, 8);
  _Block_object_dispose((const void *)(v61 - 224), 8);
  _Block_object_dispose((const void *)(v61 - 192), 8);

  _Unwind_Resume(a1);
}

BOOL __nw_protocol_instance_establish_path_block_invoke(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(a4);
  uint64_t v7 = a1[4];
  if (v7) {
    uint64_t v8 = v7 - 96;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 == protocol_handle)
  {
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
    *(void *)(*(void *)(a1[6] + 8) + 24) = a2;
  }
  return v8 != protocol_handle;
}

uint64_t __nw_protocol_instance_establish_path_block_invoke_2(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) < a2)
  {
    uint64_t v9 = nw_protocol_instance_attach_protocol(*(void **)(a1 + 32), v7, v8, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(char **)(a1 + 64), *(void *)(a1 + 72));
    if (!v9)
    {
      uint64_t v16 = 0;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
      goto LABEL_15;
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v9;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        BOOL v13 = v12 == 0;
        if (v12) {
          os_log_type_t v14 = (const char *)(v12 + 407);
        }
        else {
          os_log_type_t v14 = "";
        }
        int v18 = 136446978;
        uint64_t v19 = "nw_protocol_instance_establish_path_block_invoke_2";
        __int16 v20 = 2082;
        os_log_type_t v21 = v14;
        if (v13) {
          uint64_t v15 = "";
        }
        else {
          uint64_t v15 = " ";
        }
        __int16 v22 = 2080;
        os_log_type_t v23 = v15;
        __int16 v24 = 2114;
        id v25 = v7;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAttached application protocol: %{public}@", (uint8_t *)&v18, 0x2Au);
      }
    }
  }
  uint64_t v16 = 1;
LABEL_15:

  return v16;
}

void sub_1837048C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_instance_set_protocol_instance(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (!v8)
  {
    int v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v31 = "nw_protocol_instance_set_protocol_instance";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v19, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v31 = "nw_protocol_instance_set_protocol_instance";
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null protocol_parameters", buf, 0xCu);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v20 = __nwlog_obj();
        os_log_type_t v25 = type;
        BOOL v26 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v31 = "nw_protocol_instance_set_protocol_instance";
            __int16 v32 = 2082;
            id v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v31 = "nw_protocol_instance_set_protocol_instance";
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null protocol_parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v20 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v31 = "nw_protocol_instance_set_protocol_instance";
          _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null protocol_parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_32:
    if (v19) {
      free(v19);
    }
    goto LABEL_13;
  }
  uint64_t v10 = strdup(v7 + 407);
  if (v10)
  {
LABEL_3:
    size_t v11 = strlen(v10);
    if (v11) {
      v10[v11 - 1] = 0;
    }
    BOOL v12 = v11 > 2;
    int v13 = *((unsigned __int16 *)v7 + 200);
    int v14 = 0xFFFF;
    if (v13 != 0xFFFF)
    {
      int v14 = v13 + 1;
      *((_WORD *)v7 + 200) = v13 + 1;
    }
    uint64_t v15 = (char *)v8;
    uint64_t v16 = v15;
    if (v10)
    {
      if (v10[2 * v12])
      {
        *((_WORD *)v15 + 68) = v14;
        snprintf(v15 + 48, 0x54uLL, "[%s%s:%u]", "C", &v10[2 * v12], v14);
      }

      free(v10);
    }
    else
    {
    }
    uint64_t v17 = v16;
    *((void *)v17 + 2) = a4;

LABEL_13:
    return;
  }
  __int16 v22 = __nwlog_obj();
  os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  os_log_type_t v31 = "strict_strdup";
  os_log_type_t v23 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v23))
  {
    free(v23);
    goto LABEL_3;
  }
  __break(1u);
}

void nw_protocol_instance_bring_up_channel(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v252 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  path = a4;
  if (v7)
  {
    if (!a2)
    {
      id v110 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
      uint64_t v107 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v223) = 0;
      if (!__nwlog_fault(v107, type, &v223)) {
        goto LABEL_221;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v108 = __nwlog_obj();
        os_log_type_t v111 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_1830D4000, v108, v111, "%{public}s called with null path", buf, 0xCu);
        }
        goto LABEL_220;
      }
      if (!(_BYTE)v223)
      {
        char v108 = __nwlog_obj();
        os_log_type_t v132 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_1830D4000, v108, v132, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_220;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v108 = __nwlog_obj();
      os_log_type_t v120 = type[0];
      BOOL v121 = os_log_type_enabled(v108, type[0]);
      if (!backtrace_string)
      {
        if (v121)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_1830D4000, v108, v120, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
        goto LABEL_220;
      }
      if (v121)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v108, v120, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_169;
    }
    if (!a3)
    {
      uint64_t v112 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
      uint64_t v107 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v223) = 0;
      if (!__nwlog_fault(v107, type, &v223)) {
        goto LABEL_221;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v108 = __nwlog_obj();
        os_log_type_t v113 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_1830D4000, v108, v113, "%{public}s called with null path_state", buf, 0xCu);
        }
        goto LABEL_220;
      }
      if (!(_BYTE)v223)
      {
        char v108 = __nwlog_obj();
        os_log_type_t v133 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_1830D4000, v108, v133, "%{public}s called with null path_state, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_220;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v108 = __nwlog_obj();
      os_log_type_t v122 = type[0];
      BOOL v123 = os_log_type_enabled(v108, type[0]);
      if (!backtrace_string)
      {
        if (v123)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_1830D4000, v108, v122, "%{public}s called with null path_state, no backtrace", buf, 0xCu);
        }
        goto LABEL_220;
      }
      if (v123)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v108, v122, "%{public}s called with null path_state, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_169;
    }
    if (path)
    {
      if ((v7[405] & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (id)gLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          id v9 = *(char **)(a3 + 16);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v7 + 407;
          *(_WORD *)&buf[22] = 2080;
          v239 = " ";
          __int16 v240 = 2112;
          int v241 = v9;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sReceived nexus assignment, bringing up channel for %@", buf, 0x2Au);
        }
      }
      long long v250 = *((_OWORD *)v7 - 6);
      long long v249 = 0uLL;
      nw_path_flow_registration_get_id(*(void **)(a3 + 24), &v249);
      nw_endpoint_type_t v191 = v7 - 96;
      *((_OWORD *)v7 - 6) = v249;
      *((void *)v7 + 40) = a2;
      nw_endpoint_t v10 = nw_path_copy_effective_remote_endpoint(path);
      size_t v11 = (void *)*((void *)v7 + 41);
      *((void *)v7 + 41) = v10;

      nw_endpoint_t v12 = nw_path_copy_effective_local_endpoint(path);
      int v13 = (void *)*((void *)v7 + 42);
      *((void *)v7 + 42) = v12;

      id v14 = *((id *)v7 + 6);
      BOOL v15 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v14, 0, 0);

      uint64_t v16 = (void *)*((void *)v7 + 43);
      *((void *)v7 + 43) = v15;

      nw_parameters_require_interface(*((nw_parameters_t *)v7 + 43), *(nw_interface_t *)(a3 + 16));
      int protocol_level = nw_path_flow_registration_get_protocol_level(path, *(void **)(a3 + 24));
      *(void *)os_log_type_t type = 0;
      v228 = type;
      uint64_t v229 = 0x2020000000;
      uint64_t v230 = v7 - 96;
      v222[3] = 0;
      uint64_t v223 = 0;
      long long v224 = &v223;
      uint64_t v225 = 0x2020000000;
      char v226 = 0;
      v222[0] = 0;
      v222[1] = v222;
      v222[2] = 0x2020000000;
      int v18 = (void *)*((void *)v7 + 6);
      v218[0] = MEMORY[0x1E4F143A8];
      v218[1] = 3221225472;
      v218[2] = ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke;
      v218[3] = &unk_1E523BD10;
      uint64_t v19 = v7;
      uint64_t v219 = v19;
      char v220 = &v223;
      v221 = v222;
      nw_parameters_internal_iterate_protocol_stack(v18, 4, 0, v218);
      if (*((unsigned char *)v224 + 24))
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2020000000;
        LOBYTE(v239) = 0;
        __int16 v20 = (void *)*((void *)v7 + 43);
        v211[0] = MEMORY[0x1E4F143A8];
        v211[1] = 3221225472;
        v211[2] = ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_2;
        v211[3] = &unk_1E523BD38;
        v213 = v222;
        os_log_type_t v21 = v19;
        long long v212 = v21;
        __int16 v214 = type;
        uint32_t v215 = buf;
        uint64_t v216 = a2;
        uint64_t v217 = a3;
        nw_parameters_internal_iterate_protocol_stack(v20, 4, 0, v211);
        if (*(unsigned char *)(*(void *)&buf[8] + 24))
        {
          if ((v7[405] & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v22 = (id)gLogObj;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v244 = 136446722;
              *(void *)&v244[4] = "nw_protocol_instance_bring_up_channel";
              __int16 v245 = 2082;
              v246 = v21 + 407;
              __int16 v247 = 2080;
              v248 = " ";
              _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach application protocol", v244, 0x20u);
            }
          }
          nw_protocol_instance_tear_down_path_inner(v21, a3);
          *(_OWORD *)nw_endpoint_type_t v191 = v250;
          os_log_type_t v23 = (void *)*((void *)v7 + 41);
          *((void *)v7 + 40) = 0;
          *((void *)v7 + 41) = 0;

          __int16 v24 = (void *)*((void *)v7 + 42);
          *((void *)v7 + 42) = 0;

          os_log_type_t v25 = (void *)*((void *)v7 + 43);
          *((void *)v7 + 43) = 0;

LABEL_24:
          _Block_object_dispose(buf, 8);
LABEL_291:

          _Block_object_dispose(v222, 8);
          _Block_object_dispose(&v223, 8);
          _Block_object_dispose(type, 8);
          goto LABEL_292;
        }

        _Block_object_dispose(buf, 8);
      }
      if ((protocol_level - 1) <= 2)
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2020000000;
        LOBYTE(v239) = 0;
        BOOL v26 = (void *)*((void *)v7 + 43);
        v205[0] = MEMORY[0x1E4F143A8];
        v205[1] = 3221225472;
        v205[2] = ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_270;
        v205[3] = &unk_1E523BE20;
        os_log_type_t v27 = v19;
        v206 = v27;
        v207 = type;
        uint64_t v209 = a2;
        uint64_t v210 = a3;
        __int16 v208 = buf;
        nw_parameters_internal_iterate_protocol_stack(v26, 3, 0, v205);
        if (*(unsigned char *)(*(void *)&buf[8] + 24))
        {
          if ((v7[405] & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v28 = (id)gLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v244 = 136446722;
              *(void *)&v244[4] = "nw_protocol_instance_bring_up_channel";
              __int16 v245 = 2082;
              v246 = v27 + 407;
              __int16 v247 = 2080;
              v248 = " ";
              _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach transport protocol", v244, 0x20u);
            }
          }
          nw_protocol_instance_tear_down_path_inner(v27, a3);
          *(_OWORD *)nw_endpoint_type_t v191 = v250;
          os_log_type_t v29 = (void *)*((void *)v7 + 41);
          *((void *)v7 + 40) = 0;
          *((void *)v7 + 41) = 0;

          BOOL v30 = (void *)*((void *)v7 + 42);
          *((void *)v7 + 42) = 0;

          os_log_type_t v31 = (void *)*((void *)v7 + 43);
          *((void *)v7 + 43) = 0;

          goto LABEL_24;
        }

        _Block_object_dispose(buf, 8);
        if ((protocol_level - 1) <= 1)
        {
          *(void *)buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2020000000;
          LOBYTE(v239) = 0;
          __int16 v32 = (void *)*((void *)v7 + 43);
          v199[0] = MEMORY[0x1E4F143A8];
          v199[1] = 3221225472;
          v199[2] = ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_271;
          v199[3] = &unk_1E523BE20;
          id v33 = v27;
          uint32_t v200 = v33;
          v201 = type;
          uint64_t v203 = a2;
          uint64_t v204 = a3;
          char v202 = buf;
          nw_parameters_internal_iterate_protocol_stack(v32, 2, 0, v199);
          if (*(unsigned char *)(*(void *)&buf[8] + 24))
          {
            if ((v7[405] & 0x80000000) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v34 = (id)gLogObj;
              if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v244 = 136446722;
                *(void *)&v244[4] = "nw_protocol_instance_bring_up_channel";
                __int16 v245 = 2082;
                v246 = v33 + 407;
                __int16 v247 = 2080;
                v248 = " ";
                _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach internet protocol", v244, 0x20u);
              }
            }
            nw_protocol_instance_tear_down_path_inner(v33, a3);
            *(_OWORD *)nw_endpoint_type_t v191 = v250;
            uint64_t v35 = (void *)*((void *)v7 + 41);
            *((void *)v7 + 40) = 0;
            *((void *)v7 + 41) = 0;

            BOOL v36 = (void *)*((void *)v7 + 42);
            *((void *)v7 + 42) = 0;

            int v37 = (void *)*((void *)v7 + 43);
            *((void *)v7 + 43) = 0;

            goto LABEL_24;
          }

          _Block_object_dispose(buf, 8);
          if (protocol_level == 1)
          {
            *(void *)buf = 0;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x2020000000;
            LOBYTE(v239) = 0;
            uint64_t v38 = (void *)*((void *)v7 + 43);
            v193[0] = MEMORY[0x1E4F143A8];
            v193[1] = 3221225472;
            v193[2] = ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_272;
            v193[3] = &unk_1E523BE20;
            uint64_t v39 = v33;
            int v194 = v39;
            uint64_t v195 = type;
            uint64_t v197 = a2;
            uint64_t v198 = a3;
            uint64_t v196 = buf;
            nw_parameters_internal_iterate_protocol_stack(v38, 1, 0, v193);
            if (*(unsigned char *)(*(void *)&buf[8] + 24))
            {
              if ((v7[405] & 0x80000000) == 0)
              {
                nw_endpoint_t v40 = __nwlog_obj();
                if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v244 = 136446722;
                  *(void *)&v244[4] = "nw_protocol_instance_bring_up_channel";
                  __int16 v245 = 2082;
                  v246 = v39 + 407;
                  __int16 v247 = 2080;
                  v248 = " ";
                  _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach link protocol", v244, 0x20u);
                }
              }
              nw_protocol_instance_tear_down_path_inner(v39, a3);
              *(_OWORD *)nw_endpoint_type_t v191 = v250;
              os_log_type_t v41 = (void *)*((void *)v7 + 41);
              *((void *)v7 + 40) = 0;
              *((void *)v7 + 41) = 0;

              int v42 = (void *)*((void *)v7 + 42);
              *((void *)v7 + 42) = 0;

              uint64_t v43 = (void *)*((void *)v7 + 43);
              *((void *)v7 + 43) = 0;

              goto LABEL_24;
            }

            _Block_object_dispose(buf, 8);
          }
        }
      }
      uint64_t v44 = *((void *)v228 + 3);
      uint64_t v45 = v19;
      id v46 = path;
      long long uu = 0uLL;
      unsigned int v233 = 0;
      if (!nw_path_flow_registration_get_nexus_instance(v46, *(NWConcrete_nw_path_flow_registration **)(a3 + 24), &uu, &v233))
      {
        if ((v7[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v51 = (id)gLogObj;
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_attach_channel_protocol";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v45 + 407;
            *(_WORD *)&buf[22] = 2080;
            v239 = " ";
            _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%snexus is not ready", buf, 0x20u);
          }
        }
        goto LABEL_285;
      }
      id v47 = nw_path_copy_flow_for_registration(v46, *(NWConcrete_nw_path_flow_registration **)(a3 + 24));
      uint64_t v48 = v47;
      if (v47)
      {
        os_log_type_t v49 = v47;
        uint64_t v50 = v49[1];
        if (!v50 || !*((_DWORD *)v49 + 40)) {
          uint64_t v50 = 0;
        }
      }
      else
      {
        uint64_t v50 = 0;
      }

      uint64_t v232 = 0;
      uint64_t v231 = 0;
      char can_support_user_packet_pool = nw_path_flow_registration_can_support_user_packet_pool(v46, *(void **)(a3 + 24));
      BYTE4(v232) = BYTE4(v232) & 0xFE | can_support_user_packet_pool;
      if (nw_path_flow_registration_should_use_event_ring(v46, *(void **)(a3 + 24))) {
        char v53 = 2;
      }
      else {
        char v53 = 0;
      }
      BYTE4(v232) = BYTE4(v232) & 0xFD | v53;
      uint64_t v231 = v50;
      LODWORD(v232) = 16;
      os_log_type_t v54 = v46;
      id v55 = v54[3];

      id v56 = v54;
      id v190 = v56[2];
      os_log_type_t v189 = v56;

      BOOL v57 = nw_parameters_copy_context(v190);
      BOOL v58 = nw_channel_create_with_attributes(v57, (unsigned __int8 *)&uu, v233, (uint64_t)&v231);
      uint64_t v59 = *(void **)(a3 + 48);
      *(void *)(a3 + 48) = v58;

      uint64_t v60 = *(void *)(a3 + 48);
      int v61 = v7[405];
      if (!v60)
      {
        if ((v61 & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v71 = (id)gLogObj;
          if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_attach_channel_protocol";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v45 + 407;
            *(_WORD *)&buf[22] = 2080;
            v239 = " ";
            _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sfailed to open channel", buf, 0x20u);
          }
        }
        goto LABEL_284;
      }
      if ((v61 & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v62 = (id)gLogObj;
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_attach_channel_protocol";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v45 + 407;
          *(_WORD *)&buf[22] = 2080;
          v239 = " ";
          __int16 v240 = 1024;
          LODWORD(v241) = protocol_level;
          _os_log_impl(&dword_1830D4000, v62, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sopened channel at level %u", buf, 0x26u);
        }

        uint64_t v60 = *(void *)(a3 + 48);
      }
      nw_channel_set_close_automatically(v60, 1);
      nw_channel_set_defer_input_available(*(void *)(a3 + 48), 1);
      nw_channel_set_protocol_level(*(void *)(a3 + 48), protocol_level);
      if (protocol_level == 2)
      {
        if (nw_protocol_ip_identifier::onceToken != -1) {
          dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_86959);
        }
        BOOL has_protocol_in_stack = nw_parameters_has_protocol_in_stack(v190, &nw_protocol_ip_identifier::identifier);
        if (v55) {
          BOOL v64 = has_protocol_in_stack;
        }
        else {
          BOOL v64 = 0;
        }
        if (v64)
        {
          id v65 = v55;
          int v66 = [v65 type];

          if (v66 == 1)
          {
            int address_family = nw_endpoint_get_address_family(v65);
            uint64_t v68 = *(void **)(a3 + 24);
            if (nw_protocol_ip_identifier::onceToken != -1) {
              dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_86959);
            }
            if (address_family == 2) {
              int v69 = 1;
            }
            else {
              int v69 = 2;
            }
            uint64_t stats_region = nw_channel_get_stats_region(*(void *)(a3 + 48), v69);
            nw_path_flow_registration_set_stats_region(v68, 2, (long long *)&nw_protocol_ip_identifier::identifier, stats_region);
          }
        }
      }
      else if ((protocol_level & 0xFFFFFFFE) != 2)
      {
        goto LABEL_87;
      }
      uint64_t v72 = (void *)nw_protocol_tcp_identifier();
      if (nw_parameters_has_protocol_in_stack(v190, v72))
      {
        uint64_t v73 = *(void **)(a3 + 24);
        id v74 = (long long *)nw_protocol_tcp_identifier();
        int v75 = 3;
      }
      else
      {
        if (nw_protocol_udp_identifier::onceToken[0] != -1) {
          dispatch_once(nw_protocol_udp_identifier::onceToken, &__block_literal_global_23);
        }
        if (!nw_parameters_has_protocol_in_stack(v190, &nw_protocol_udp_identifier::identifier))
        {
          if (nw_parameters_get_upper_transport_protocol(v190) == 253)
          {
            upper_transport_protocol_identifier = (long long *)nw_parameters_get_upper_transport_protocol_identifier(v190);
            id v93 = *(void **)(a3 + 24);
            uint64_t v94 = nw_channel_get_stats_region(*(void *)(a3 + 48), 5);
            nw_path_flow_registration_set_stats_region(v93, 3, upper_transport_protocol_identifier, v94);
            uint64_t v95 = *(void **)(a3 + 24);
            if (nw_protocol_udp_identifier::onceToken[0] != -1) {
              dispatch_once(nw_protocol_udp_identifier::onceToken, &__block_literal_global_23);
            }
            uint64_t v96 = nw_channel_get_stats_region(*(void *)(a3 + 48), 4);
            nw_path_flow_registration_set_stats_region(v95, 3, (long long *)&nw_protocol_udp_identifier::identifier, v96);
          }
LABEL_87:
          protocol_handler = (const char *)nw_channel_get_protocol_handler(*(void *)(a3 + 48));
          if (protocol_handler)
          {
            __int16 v78 = protocol_handler;
            char v79 = (void *)*((void *)protocol_handler + 5);
            if (v79 == &nw_protocol_ref_counted_handle)
            {
              uint64_t v81 = *((void *)protocol_handler + 11);
              if (v81) {
                *((void *)protocol_handler + 11) = v81 + 1;
              }
              char v80 = -1;
            }
            else
            {
              char v80 = 0;
            }
            *(void *)v244 = protocol_handler;
            v244[8] = v80;
            if (v44)
            {
              int v82 = *(void **)(v44 + 40);
              if (v82 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v84 = *(void *)(v44 + 88);
                if (v84) {
                  *(void *)(v44 + 88) = v84 + 1;
                }
                char v83 = -1;
              }
              else
              {
                char v83 = 0;
              }
              *(void *)v235 = v44;
              char v236 = v83;
              id v85 = (uint64_t (**)(const char *, uint64_t))*((void *)protocol_handler + 3);
              if (v85)
              {
                __int16 v86 = *v85;
                if (v86)
                {
                  char v87 = v86(protocol_handler, v44);
                  if (v82 != &nw_protocol_ref_counted_handle) {
                    goto LABEL_103;
                  }
                  goto LABEL_102;
                }
              }
              uint64_t v126 = __nwlog_obj();
              id v127 = (const char *)*((void *)v78 + 2);
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
              if (!v127) {
                id v127 = "invalid";
              }
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v127;
              *(_WORD *)&buf[22] = 2048;
              v239 = v78;
              id v187 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v237 = OS_LOG_TYPE_ERROR;
              char v234 = 0;
              if (!__nwlog_fault(v187, &v237, &v234)) {
                goto LABEL_264;
              }
              if (v237 == OS_LOG_TYPE_FAULT)
              {
                uint64_t v128 = __nwlog_obj();
                os_log_type_t v129 = v237;
                if (os_log_type_enabled(v128, v237))
                {
                  char v130 = (const char *)*((void *)v78 + 2);
                  if (!v130) {
                    char v130 = "invalid";
                  }
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v130;
                  *(_WORD *)&buf[22] = 2048;
                  v239 = v78;
                  _os_log_impl(&dword_1830D4000, v128, v129, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback", buf, 0x20u);
                }
              }
              else
              {
                if (v234)
                {
                  __int16 v142 = (char *)__nw_create_backtrace_string();
                  os_log_type_t v143 = __nwlog_obj();
                  os_log_type_t v186 = v237;
                  BOOL v144 = os_log_type_enabled(v143, v237);
                  if (v142)
                  {
                    if (v144)
                    {
                      uint64_t v145 = (const char *)*((void *)v78 + 2);
                      if (!v145) {
                        uint64_t v145 = "invalid";
                      }
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v145;
                      *(_WORD *)&buf[22] = 2048;
                      v239 = v78;
                      __int16 v240 = 2082;
                      int v241 = v142;
                      _os_log_impl(&dword_1830D4000, v143, v186, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }

                    free(v142);
                  }
                  else
                  {
                    if (v144)
                    {
                      int v170 = (const char *)*((void *)v78 + 2);
                      if (!v170) {
                        int v170 = "invalid";
                      }
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v170;
                      *(_WORD *)&buf[22] = 2048;
                      v239 = v78;
                      _os_log_impl(&dword_1830D4000, v143, v186, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, no backtrace", buf, 0x20u);
                    }
                  }
LABEL_264:
                  if (v187) {
                    free(v187);
                  }
                  char v87 = 0;
                  if (v82 == &nw_protocol_ref_counted_handle) {
LABEL_102:
                  }
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v235);
LABEL_103:
                  if (v79 == &nw_protocol_ref_counted_handle)
                  {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v244);
                    if ((v87 & 1) == 0)
                    {
LABEL_284:

LABEL_285:
                      goto LABEL_286;
                    }
                  }
                  else if ((v87 & 1) == 0)
                  {
                    goto LABEL_284;
                  }
                  BOOL v88 = nw_channel_set_path_flow_registration(*(void *)(a3 + 48), v189, *(void **)(a3 + 24));

                  if (!v88)
                  {
LABEL_286:
                    if ((v7[405] & 0x80000000) == 0)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      char v176 = (id)gLogObj;
                      if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
                      {
                        uint64_t v178 = *((void *)v7 + 41);
                        nw_protocol_options_t v177 = (char *)*((void *)v7 + 42);
                        *(_DWORD *)buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v45 + 407;
                        *(_WORD *)&buf[22] = 2080;
                        v239 = " ";
                        __int16 v240 = 2112;
                        int v241 = v177;
                        __int16 v242 = 2112;
                        uint64_t v243 = v178;
                        _os_log_impl(&dword_1830D4000, v176, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to attach channel protocol for %@ -> %@", buf, 0x34u);
                      }
                    }
                    nw_protocol_instance_tear_down_path_inner(v45, a3);
                    *(_OWORD *)nw_endpoint_type_t v191 = v250;
                    id v179 = (void *)*((void *)v7 + 41);
                    *((void *)v7 + 40) = 0;
                    *((void *)v7 + 41) = 0;

                    int v180 = (void *)*((void *)v7 + 42);
                    *((void *)v7 + 42) = 0;

                    nw_content_context_t v181 = (void *)*((void *)v7 + 43);
                    *((void *)v7 + 43) = 0;

                    goto LABEL_291;
                  }
                  *(_OWORD *)nw_endpoint_type_t v191 = v250;
                  uint64_t v89 = *(const char **)(a3 + 32);
                  if (v89)
                  {
                    uint64_t v90 = (void *)*((void *)v89 + 5);
                    if (v90 == &nw_protocol_ref_counted_handle)
                    {
                      uint64_t v97 = *((void *)v89 + 11);
                      if (v97) {
                        *((void *)v89 + 11) = v97 + 1;
                      }
                      char v91 = -1;
                    }
                    else
                    {
                      char v91 = 0;
                    }
                    *(void *)v244 = v89;
                    v244[8] = v91;
                    os_log_type_t v98 = (void *)*((void *)v45 - 7);
                    if (v98 == &nw_protocol_ref_counted_handle)
                    {
                      uint64_t v100 = *((void *)v45 - 1);
                      if (v100) {
                        *((void *)v45 - 1) = v100 + 1;
                      }
                      char v99 = -1;
                    }
                    else
                    {
                      char v99 = 0;
                    }
                    *(void *)v235 = v7 - 96;
                    char v236 = v99;
                    uint64_t v101 = *((void *)v89 + 3);
                    if (v101)
                    {
                      char v102 = *(void (**)(const char *, char *))(v101 + 24);
                      if (v102)
                      {
                        v102(v89, v191);
                        if (v98 != &nw_protocol_ref_counted_handle) {
                          goto LABEL_127;
                        }
                        goto LABEL_126;
                      }
                    }
                    uint32_t v154 = __nwlog_obj();
                    int v155 = (const char *)*((void *)v89 + 2);
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                    if (!v155) {
                      int v155 = "invalid";
                    }
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v155;
                    *(_WORD *)&buf[22] = 2048;
                    v239 = v89;
                    v156 = (char *)_os_log_send_and_compose_impl();

                    LOBYTE(uu) = 16;
                    LOBYTE(v231) = 0;
                    if (__nwlog_fault(v156, &uu, &v231))
                    {
                      if (uu == 17)
                      {
                        os_log_type_t v157 = __nwlog_obj();
                        os_log_type_t v158 = uu;
                        if (os_log_type_enabled(v157, (os_log_type_t)uu))
                        {
                          os_log_type_t v159 = (const char *)*((void *)v89 + 2);
                          if (!v159) {
                            os_log_type_t v159 = "invalid";
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v159;
                          *(_WORD *)&buf[22] = 2048;
                          v239 = v89;
                          _os_log_impl(&dword_1830D4000, v157, v158, "%{public}s protocol %{public}s (%p) has invalid connect callback", buf, 0x20u);
                        }
LABEL_308:

                        goto LABEL_309;
                      }
                      if (!(_BYTE)v231)
                      {
                        os_log_type_t v157 = __nwlog_obj();
                        os_log_type_t v182 = uu;
                        if (os_log_type_enabled(v157, (os_log_type_t)uu))
                        {
                          int v183 = (const char *)*((void *)v89 + 2);
                          if (!v183) {
                            int v183 = "invalid";
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v183;
                          *(_WORD *)&buf[22] = 2048;
                          v239 = v89;
                          _os_log_impl(&dword_1830D4000, v157, v182, "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded", buf, 0x20u);
                        }
                        goto LABEL_308;
                      }
                      uint64_t v166 = (char *)__nw_create_backtrace_string();
                      os_log_type_t v157 = __nwlog_obj();
                      os_log_type_t v167 = uu;
                      BOOL v168 = os_log_type_enabled(v157, (os_log_type_t)uu);
                      if (!v166)
                      {
                        if (v168)
                        {
                          uint64_t v184 = (const char *)*((void *)v89 + 2);
                          if (!v184) {
                            uint64_t v184 = "invalid";
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v184;
                          *(_WORD *)&buf[22] = 2048;
                          v239 = v89;
                          _os_log_impl(&dword_1830D4000, v157, v167, "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace", buf, 0x20u);
                        }
                        goto LABEL_308;
                      }
                      if (v168)
                      {
                        id v169 = (const char *)*((void *)v89 + 2);
                        if (!v169) {
                          id v169 = "invalid";
                        }
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v169;
                        *(_WORD *)&buf[22] = 2048;
                        v239 = v89;
                        __int16 v240 = 2082;
                        int v241 = v166;
                        _os_log_impl(&dword_1830D4000, v157, v167, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
                      }

                      free(v166);
                    }
LABEL_309:
                    if (v156) {
                      free(v156);
                    }
                    if (v98 != &nw_protocol_ref_counted_handle) {
                      goto LABEL_127;
                    }
LABEL_126:
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v235);
LABEL_127:
                    if (v90 == &nw_protocol_ref_counted_handle) {
                      nw::release_if_needed<nw_protocol *>((uint64_t *)v244);
                    }
LABEL_129:
                    uint64_t v103 = (void *)*((void *)v7 + 41);
                    *((void *)v7 + 40) = 0;
                    *((void *)v7 + 41) = 0;

                    id v104 = (void *)*((void *)v7 + 42);
                    *((void *)v7 + 42) = 0;

                    BOOL v105 = (void *)*((void *)v7 + 43);
                    *((void *)v7 + 43) = 0;

                    goto LABEL_291;
                  }
                  id v162 = __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                  os_log_type_t v163 = (char *)_os_log_send_and_compose_impl();

                  v244[0] = 16;
                  v235[0] = OS_LOG_TYPE_DEFAULT;
                  if (__nwlog_fault(v163, v244, v235))
                  {
                    if (v244[0] == 17)
                    {
                      BOOL v164 = __nwlog_obj();
                      os_log_type_t v165 = v244[0];
                      if (os_log_type_enabled(v164, (os_log_type_t)v244[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        _os_log_impl(&dword_1830D4000, v164, v165, "%{public}s called with null protocol", buf, 0xCu);
                      }
                    }
                    else if (v235[0])
                    {
                      int v173 = (char *)__nw_create_backtrace_string();
                      BOOL v164 = __nwlog_obj();
                      os_log_type_t v174 = v244[0];
                      BOOL v175 = os_log_type_enabled(v164, (os_log_type_t)v244[0]);
                      if (v173)
                      {
                        if (v175)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v173;
                          _os_log_impl(&dword_1830D4000, v164, v174, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v173);
                        goto LABEL_319;
                      }
                      if (v175)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        _os_log_impl(&dword_1830D4000, v164, v174, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                      }
                    }
                    else
                    {
                      BOOL v164 = __nwlog_obj();
                      os_log_type_t v185 = v244[0];
                      if (os_log_type_enabled(v164, (os_log_type_t)v244[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        _os_log_impl(&dword_1830D4000, v164, v185, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                      }
                    }
                  }
LABEL_319:
                  if (v163) {
                    free(v163);
                  }
                  goto LABEL_129;
                }
                uint64_t v128 = __nwlog_obj();
                os_log_type_t v160 = v237;
                if (os_log_type_enabled(v128, v237))
                {
                  uint32_t v161 = (const char *)*((void *)v78 + 2);
                  if (!v161) {
                    uint32_t v161 = "invalid";
                  }
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v161;
                  *(_WORD *)&buf[22] = 2048;
                  v239 = v78;
                  _os_log_impl(&dword_1830D4000, v128, v160, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, backtrace limit exceeded", buf, 0x20u);
                }
              }

              goto LABEL_264;
            }
            os_log_type_t v139 = __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
            uint64_t v188 = (char *)_os_log_send_and_compose_impl();

            v235[0] = OS_LOG_TYPE_ERROR;
            os_log_type_t v237 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v188, v235, &v237))
            {
              if (v235[0] == OS_LOG_TYPE_FAULT)
              {
                __int16 v140 = __nwlog_obj();
                os_log_type_t v141 = v235[0];
                if (os_log_type_enabled(v140, v235[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                  _os_log_impl(&dword_1830D4000, v140, v141, "%{public}s called with null input_protocol", buf, 0xCu);
                }
              }
              else
              {
                if (v237)
                {
                  uint64_t v150 = (char *)__nw_create_backtrace_string();
                  os_log_type_t v151 = __nwlog_obj();
                  os_log_type_t v152 = v235[0];
                  BOOL v153 = os_log_type_enabled(v151, v235[0]);
                  if (v150)
                  {
                    if (v153)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v150;
                      _os_log_impl(&dword_1830D4000, v151, v152, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(v150);
                    goto LABEL_296;
                  }
                  if (v153)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                    _os_log_impl(&dword_1830D4000, v151, v152, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
                  }
                }
                else
                {
                  os_log_type_t v151 = __nwlog_obj();
                  os_log_type_t v172 = v235[0];
                  if (os_log_type_enabled(v151, v235[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                    _os_log_impl(&dword_1830D4000, v151, v172, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
                  }
                }
              }
            }
LABEL_296:
            if (v188) {
              free(v188);
            }
            char v87 = 0;
            goto LABEL_103;
          }
          BOOL v135 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
          os_log_type_t v136 = (char *)_os_log_send_and_compose_impl();

          v244[0] = 16;
          v235[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v136, v244, v235))
          {
            if (v244[0] == 17)
            {
              BOOL v137 = __nwlog_obj();
              os_log_type_t v138 = v244[0];
              if (os_log_type_enabled(v137, (os_log_type_t)v244[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                _os_log_impl(&dword_1830D4000, v137, v138, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else
            {
              if (v235[0])
              {
                id v146 = (char *)__nw_create_backtrace_string();
                os_log_type_t v147 = __nwlog_obj();
                os_log_type_t v148 = v244[0];
                BOOL v149 = os_log_type_enabled(v147, (os_log_type_t)v244[0]);
                if (v146)
                {
                  if (v149)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v146;
                    _os_log_impl(&dword_1830D4000, v147, v148, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v146);
                }
                else
                {
                  if (v149)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                    _os_log_impl(&dword_1830D4000, v147, v148, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                  }
                }
                goto LABEL_282;
              }
              BOOL v137 = __nwlog_obj();
              os_log_type_t v171 = v244[0];
              if (os_log_type_enabled(v137, (os_log_type_t)v244[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
                _os_log_impl(&dword_1830D4000, v137, v171, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_282:
          if (v136) {
            free(v136);
          }
          goto LABEL_284;
        }
        uint64_t v73 = *(void **)(a3 + 24);
        if (nw_protocol_udp_identifier::onceToken[0] != -1) {
          dispatch_once(nw_protocol_udp_identifier::onceToken, &__block_literal_global_23);
        }
        id v74 = (long long *)&nw_protocol_udp_identifier::identifier;
        int v75 = 4;
      }
      uint64_t v76 = nw_channel_get_stats_region(*(void *)(a3 + 48), v75);
      nw_path_flow_registration_set_stats_region(v73, 3, v74, v76);
      goto LABEL_87;
    }
    char v114 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
    uint64_t v107 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v223) = 0;
    if (__nwlog_fault(v107, type, &v223))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v108 = __nwlog_obj();
        os_log_type_t v115 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_1830D4000, v108, v115, "%{public}s called with null new_path", buf, 0xCu);
        }
LABEL_220:

        goto LABEL_221;
      }
      if (!(_BYTE)v223)
      {
        char v108 = __nwlog_obj();
        os_log_type_t v134 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_1830D4000, v108, v134, "%{public}s called with null new_path, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_220;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v108 = __nwlog_obj();
      os_log_type_t v124 = type[0];
      BOOL v125 = os_log_type_enabled(v108, type[0]);
      if (!backtrace_string)
      {
        if (v125)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_1830D4000, v108, v124, "%{public}s called with null new_path, no backtrace", buf, 0xCu);
        }
        goto LABEL_220;
      }
      if (v125)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v108, v124, "%{public}s called with null new_path, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_169:

      free(backtrace_string);
      if (!v107) {
        goto LABEL_292;
      }
      goto LABEL_222;
    }
  }
  else
  {
    char v106 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
    uint64_t v107 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v223) = 0;
    if (!__nwlog_fault(v107, type, &v223)) {
      goto LABEL_221;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v108 = __nwlog_obj();
      os_log_type_t v109 = type[0];
      if (os_log_type_enabled(v108, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
        _os_log_impl(&dword_1830D4000, v108, v109, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_220;
    }
    if (!(_BYTE)v223)
    {
      char v108 = __nwlog_obj();
      os_log_type_t v131 = type[0];
      if (os_log_type_enabled(v108, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
        _os_log_impl(&dword_1830D4000, v108, v131, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_220;
    }
    uint64_t v116 = (char *)__nw_create_backtrace_string();
    char v108 = __nwlog_obj();
    os_log_type_t v117 = type[0];
    BOOL v118 = os_log_type_enabled(v108, type[0]);
    if (!v116)
    {
      if (v118)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
        _os_log_impl(&dword_1830D4000, v108, v117, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_220;
    }
    if (v118)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v116;
      _os_log_impl(&dword_1830D4000, v108, v117, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v116);
  }
LABEL_221:
  if (v107) {
LABEL_222:
  }
    free(v107);
LABEL_292:
}

void sub_1837073B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose(&STACK[0x220], 8);

  _Unwind_Resume(a1);
}

void __nw_protocol_instance_establish_path_block_invoke_66(uint64_t a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v7 || (*(char *)(v7 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      nw_endpoint_t v10 = "";
      BOOL v11 = v9 == 0;
      if (v9) {
        nw_endpoint_t v12 = (const char *)(v9 + 407);
      }
      else {
        nw_endpoint_t v12 = "";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_establish_path_block_invoke";
      if (!v11) {
        nw_endpoint_t v10 = " ";
      }
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2080;
      os_log_type_t v29 = (uint64_t (*)(uint64_t, uint64_t))v10;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAssociation update", buf, 0x20u);
    }
  }
  int v13 = (id *)v5;
  id v14 = v13[9];
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void **)(v15 + 72);
  *(void *)(v15 + 72) = 0;

  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  os_log_type_t v29 = __Block_byref_object_copy__11790;
  BOOL v30 = __Block_byref_object_dispose__11791;
  id v31 = 0;
  if (v14 && object_getClass(v14) == (Class)MEMORY[0x1E4F14568])
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = __nw_protocol_instance_establish_path_block_invoke_67;
    applier[3] = &unk_1E5242810;
    uint64_t v19 = v13;
    id v20 = *(id *)(a1 + 32);
    os_log_type_t v21 = buf;
    xpc_array_apply(v14, applier);

    uint64_t v17 = v19;
LABEL_17:

    goto LABEL_18;
  }
  if ((*((char *)v13 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int16 v22 = 136446722;
      os_log_type_t v23 = "nw_protocol_instance_establish_path_block_invoke";
      __int16 v24 = 2082;
      os_log_type_t v25 = (char *)v13 + 407;
      __int16 v26 = 2080;
      os_log_type_t v27 = " ";
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNo saved paths to update", v22, 0x20u);
    }
    goto LABEL_17;
  }
LABEL_18:
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 72), *(id *)(*(void *)&buf[8] + 40));
  _Block_object_dispose(buf, 8);
}

void sub_183707820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11790(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11791(uint64_t a1)
{
}

uint64_t __nw_protocol_instance_establish_path_block_invoke_67(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t value = xpc_uint64_get_value(v4);
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6 || (*(char *)(v6 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      BOOL v9 = v8 == 0;
      if (v8) {
        nw_endpoint_t v10 = (const char *)(v8 + 407);
      }
      else {
        nw_endpoint_t v10 = "";
      }
      *(_DWORD *)buf = 136446978;
      id v47 = "nw_protocol_instance_establish_path_block_invoke";
      __int16 v48 = 2082;
      os_log_type_t v49 = v10;
      if (v9) {
        BOOL v11 = "";
      }
      else {
        BOOL v11 = " ";
      }
      __int16 v50 = 2080;
      os_log_type_t v51 = v11;
      __int16 v52 = 2048;
      uint64_t v53 = value;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sChecking path %lx", buf, 0x2Au);
    }

    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t node = nw_hash_table_get_node(*(void *)(v6 + 296), value, 8);
  if (node)
  {
    uint64_t v13 = node;
    id v14 = *(void **)(node + 56);
    if (v14)
    {
      uint64_t v15 = (NWConcrete_nw_path *)nw_path_flow_registration_force_update(v14);
      int v44 = 0;
      if (nw_path_flow_registration_get_nexus_instance(v15, *(NWConcrete_nw_path_flow_registration **)(v13 + 56), &v45, &v44))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        if (!v16 || (*(char *)(v16 + 405) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v17 = (id)gLogObj;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v18 = *(void *)(a1 + 40);
            uint64_t v19 = "";
            BOOL v20 = v18 == 0;
            if (v18) {
              os_log_type_t v21 = (const char *)(v18 + 407);
            }
            else {
              os_log_type_t v21 = "";
            }
            *(_DWORD *)buf = 136446722;
            id v47 = "nw_protocol_instance_establish_path_block_invoke";
            if (!v20) {
              uint64_t v19 = " ";
            }
            __int16 v48 = 2082;
            os_log_type_t v49 = v21;
            __int16 v50 = 2080;
            os_log_type_t v51 = v19;
            _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPath has nexus assignment", buf, 0x20u);
          }
        }
        nw_protocol_instance_bring_up_channel(*(void **)(a1 + 32), value, v13 + 32, v15);
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 32);
        if (!v33 || (*(char *)(v33 + 405) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v34 = (id)gLogObj;
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v35 = *(void *)(a1 + 32);
            BOOL v36 = "";
            BOOL v37 = v35 == 0;
            if (v35) {
              uint64_t v38 = (const char *)(v35 + 407);
            }
            else {
              uint64_t v38 = "";
            }
            *(_DWORD *)buf = 136446722;
            id v47 = "nw_protocol_instance_establish_path_block_invoke";
            if (!v37) {
              BOOL v36 = " ";
            }
            __int16 v48 = 2082;
            os_log_type_t v49 = v38;
            __int16 v50 = 2080;
            os_log_type_t v51 = v36;
            _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNo nexus assignment yet", buf, 0x20u);
          }
        }
        uint64_t v39 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        if (!v39)
        {
          xpc_object_t v40 = xpc_array_create(0, 0);
          uint64_t v41 = *(void *)(*(void *)(a1 + 48) + 8);
          int v42 = *(void **)(v41 + 40);
          *(void *)(v41 + 40) = v40;

          uint64_t v39 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        }
        xpc_array_set_uint64(v39, 0xFFFFFFFFFFFFFFFFLL, value);
      }
      goto LABEL_60;
    }
    uint64_t v28 = *(void *)(a1 + 32);
    if (!v28 || (*(char *)(v28 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v15 = (NWConcrete_nw_path *)(id)gLogObj;
      if (os_log_type_enabled(&v15->super, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = *(void *)(a1 + 32);
        BOOL v30 = v29 == 0;
        if (v29) {
          id v31 = (const char *)(v29 + 407);
        }
        else {
          id v31 = "";
        }
        *(_DWORD *)buf = 136446978;
        id v47 = "nw_protocol_instance_establish_path_block_invoke";
        __int16 v48 = 2082;
        os_log_type_t v49 = v31;
        if (v30) {
          uint64_t v32 = "";
        }
        else {
          uint64_t v32 = " ";
        }
        __int16 v50 = 2080;
        os_log_type_t v51 = v32;
        __int16 v52 = 2048;
        uint64_t v53 = value;
        os_log_type_t v27 = "%{public}s %{public}s%sNo flow registration found for path %lx";
LABEL_46:
        _os_log_impl(&dword_1830D4000, &v15->super, OS_LOG_TYPE_ERROR, v27, buf, 0x2Au);
        goto LABEL_60;
      }
      goto LABEL_60;
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 32);
    if (!v22 || (*(char *)(v22 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v15 = (NWConcrete_nw_path *)(id)gLogObj;
      if (os_log_type_enabled(&v15->super, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(a1 + 32);
        BOOL v24 = v23 == 0;
        if (v23) {
          os_log_type_t v25 = (const char *)(v23 + 407);
        }
        else {
          os_log_type_t v25 = "";
        }
        *(_DWORD *)buf = 136446978;
        id v47 = "nw_protocol_instance_establish_path_block_invoke";
        __int16 v48 = 2082;
        os_log_type_t v49 = v25;
        if (v24) {
          __int16 v26 = "";
        }
        else {
          __int16 v26 = " ";
        }
        __int16 v50 = 2080;
        os_log_type_t v51 = v26;
        __int16 v52 = 2048;
        uint64_t v53 = value;
        os_log_type_t v27 = "%{public}s %{public}s%sNo path found for path %lx";
        goto LABEL_46;
      }
LABEL_60:
    }
  }

  return 1;
}

void sub_183707D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(a4);
  uint64_t v7 = a1[4];
  if (v7) {
    uint64_t v8 = v7 - 96;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 == protocol_handle)
  {
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
    *(void *)(*(void *)(a1[6] + 8) + 24) = a2;
  }
  return v8 != protocol_handle;
}

uint64_t ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_2(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) < a2)
  {
    BOOL v9 = nw_protocol_instance_attach_protocol(*(void **)(a1 + 32), v7, v8, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(char **)(a1 + 64), *(void *)(a1 + 72));
    if (!v9)
    {
      uint64_t v16 = 0;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
      goto LABEL_15;
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v9;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        BOOL v13 = v12 == 0;
        if (v12) {
          id v14 = (const char *)(v12 + 407);
        }
        else {
          id v14 = "";
        }
        int v18 = 136446978;
        uint64_t v19 = "nw_protocol_instance_bring_up_channel_block_invoke_2";
        __int16 v20 = 2082;
        os_log_type_t v21 = v14;
        if (v13) {
          uint64_t v15 = "";
        }
        else {
          uint64_t v15 = " ";
        }
        __int16 v22 = 2080;
        uint64_t v23 = v15;
        __int16 v24 = 2114;
        id v25 = v7;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAttached application protocol: %{public}@", (uint8_t *)&v18, 0x2Au);
      }
    }
  }
  uint64_t v16 = 1;
LABEL_15:

  return v16;
}

void sub_183707FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_270(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = nw_protocol_instance_attach_protocol(*(void **)(a1 + 32), v6, v7, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(char **)(a1 + 56), *(void *)(a1 + 64));
  BOOL v9 = v8;
  if (v8)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v8;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        BOOL v13 = v12 == 0;
        if (v12) {
          id v14 = (const char *)(v12 + 407);
        }
        else {
          id v14 = "";
        }
        int v17 = 136446978;
        int v18 = "nw_protocol_instance_bring_up_channel_block_invoke";
        __int16 v19 = 2082;
        __int16 v20 = v14;
        if (v13) {
          uint64_t v15 = "";
        }
        else {
          uint64_t v15 = " ";
        }
        __int16 v21 = 2080;
        __int16 v22 = v15;
        __int16 v23 = 2114;
        id v24 = v6;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAttached transport protocol: %{public}@", (uint8_t *)&v17, 0x2Au);
      }
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }

  return v9 != 0;
}

void sub_183708190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_271(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = nw_protocol_instance_attach_protocol(*(void **)(a1 + 32), v6, v7, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(char **)(a1 + 56), *(void *)(a1 + 64));
  BOOL v9 = v8;
  if (v8)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v8;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        BOOL v13 = v12 == 0;
        if (v12) {
          id v14 = (const char *)(v12 + 407);
        }
        else {
          id v14 = "";
        }
        int v17 = 136446978;
        int v18 = "nw_protocol_instance_bring_up_channel_block_invoke";
        __int16 v19 = 2082;
        __int16 v20 = v14;
        if (v13) {
          uint64_t v15 = "";
        }
        else {
          uint64_t v15 = " ";
        }
        __int16 v21 = 2080;
        __int16 v22 = v15;
        __int16 v23 = 2114;
        id v24 = v6;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAttached internet protocol: %{public}@", (uint8_t *)&v17, 0x2Au);
      }
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }

  return v9 != 0;
}

void sub_18370834C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL37nw_protocol_instance_bring_up_channelP31NWConcrete_nw_protocol_instancemP22nw_protocol_path_statePU21objcproto10OS_nw_path8NSObject_block_invoke_272(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = nw_protocol_instance_attach_protocol(*(void **)(a1 + 32), v6, v7, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(char **)(a1 + 56), *(void *)(a1 + 64));
  BOOL v9 = v8;
  if (v8)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v8;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        BOOL v13 = v12 == 0;
        if (v12) {
          id v14 = (const char *)(v12 + 407);
        }
        else {
          id v14 = "";
        }
        int v17 = 136446978;
        int v18 = "nw_protocol_instance_bring_up_channel_block_invoke";
        __int16 v19 = 2082;
        __int16 v20 = v14;
        if (v13) {
          uint64_t v15 = "";
        }
        else {
          uint64_t v15 = " ";
        }
        __int16 v21 = 2080;
        __int16 v22 = v15;
        __int16 v23 = 2114;
        id v24 = v6;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAttached link protocol: %{public}@", (uint8_t *)&v17, 0x2Au);
      }
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }

  return v9 != 0;
}

void sub_183708508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_protocol_instance_attach_protocol(void *a1, void *a2, void *a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  BOOL v11 = a1;
  id v12 = a2;
  id v13 = a3;
  identifier = nw_protocol_definition_get_identifier(v12);
  uint64_t internal = nw_protocol_create_internal((uint64_t)identifier, *((void **)v11 + 41), *((const char **)v11 + 43), 1);
  if (internal)
  {
    uint64_t v16 = (const char *)internal;
    nw_protocol_instance_set_protocol_instance(v11, v13, v12, internal);
    int v17 = (void *)*((void *)v16 + 5);
    if (v17 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v21 = *((void *)v16 + 11);
      if (v21) {
        *((void *)v16 + 11) = v21 + 1;
      }
      char v18 = -1;
    }
    else
    {
      char v18 = 0;
    }
    uint64_t v60 = v16;
    char v61 = v18;
    if (a4)
    {
      __int16 v22 = *(void **)(a4 + 40);
      if (v22 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v24 = *(void *)(a4 + 88);
        if (v24) {
          *(void *)(a4 + 88) = v24 + 1;
        }
        char v23 = -1;
      }
      else
      {
        char v23 = 0;
      }
      *(void *)BOOL v57 = a4;
      char v58 = v23;
      uint64_t v25 = (uint64_t (**)(const char *, uint64_t))*((void *)v16 + 3);
      if (v25)
      {
        uint64_t v26 = *v25;
        if (v26)
        {
          int v27 = v26(v16, a4);
          if (v22 != &nw_protocol_ref_counted_handle)
          {
LABEL_22:
            if (v17 == &nw_protocol_ref_counted_handle) {
              nw::release_if_needed<nw_protocol *>((uint64_t *)&v60);
            }
            if (!*(void *)(a6 + 32))
            {
              if (*((_UNKNOWN **)v16 + 5) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v30 = *((void *)v16 + 11);
                if (v30) {
                  *((void *)v16 + 11) = v30 + 1;
                }
                char v29 = 1;
                char v28 = -1;
              }
              else
              {
                char v28 = 0;
                char v29 = 0;
              }
              *(void *)buf = v16;
              buf[8] = v28;
              char v31 = *(unsigned char *)(a6 + 40);
              if (v31)
              {
                nw::release_if_needed<nw_protocol *>((uint64_t *)(a6 + 32));
                char v31 = *(unsigned char *)(a6 + 40);
              }
              *(void *)(a6 + 32) = v16;
              *(unsigned char *)(a6 + 40) = v29 | v31 & 0xFE;
            }
            if (v27) {
              __int16 v20 = v16;
            }
            else {
              __int16 v20 = 0;
            }
            goto LABEL_36;
          }
LABEL_21:
          nw::release_if_needed<nw_protocol *>((uint64_t *)v57);
          goto LABEL_22;
        }
      }
      uint64_t v33 = __nwlog_obj();
      uint64_t v34 = (const char *)*((void *)v16 + 2);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
      if (!v34) {
        uint64_t v34 = "invalid";
      }
      __int16 v63 = 2082;
      BOOL v64 = (char *)v34;
      __int16 v65 = 2048;
      int v66 = v16;
      id v55 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v56 = 0;
      uint64_t v35 = (char *)v55;
      if (!__nwlog_fault(v55, &type, &v56))
      {
LABEL_74:
        if (v35) {
          free(v35);
        }
        int v27 = 0;
        if (v22 != &nw_protocol_ref_counted_handle) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          uint64_t v38 = (const char *)*((void *)v16 + 2);
          if (!v38) {
            uint64_t v38 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
          __int16 v63 = 2082;
          BOOL v64 = (char *)v38;
          __int16 v65 = 2048;
          int v66 = v16;
          _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback", buf, 0x20u);
        }
      }
      else
      {
        if (v56)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          int v44 = __nwlog_obj();
          os_log_type_t v53 = type;
          BOOL v45 = os_log_type_enabled(v44, type);
          if (backtrace_string)
          {
            if (v45)
            {
              id v46 = (const char *)*((void *)v16 + 2);
              if (!v46) {
                id v46 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
              __int16 v63 = 2082;
              BOOL v64 = (char *)v46;
              __int16 v65 = 2048;
              int v66 = v16;
              __int16 v67 = 2082;
              uint64_t v68 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v44, v53, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
          }
          else
          {
            if (v45)
            {
              os_log_type_t v51 = (const char *)*((void *)v16 + 2);
              if (!v51) {
                os_log_type_t v51 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
              __int16 v63 = 2082;
              BOOL v64 = (char *)v51;
              __int16 v65 = 2048;
              int v66 = v16;
              _os_log_impl(&dword_1830D4000, v44, v53, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, no backtrace", buf, 0x20u);
            }
          }
          goto LABEL_73;
        }
        BOOL v36 = __nwlog_obj();
        os_log_type_t v49 = type;
        if (os_log_type_enabled(v36, type))
        {
          __int16 v50 = (const char *)*((void *)v16 + 2);
          if (!v50) {
            __int16 v50 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
          __int16 v63 = 2082;
          BOOL v64 = (char *)v50;
          __int16 v65 = 2048;
          int v66 = v16;
          _os_log_impl(&dword_1830D4000, v36, v49, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, backtrace limit exceeded", buf, 0x20u);
        }
      }

LABEL_73:
      uint64_t v35 = (char *)v55;
      goto LABEL_74;
    }
    uint64_t v39 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
    xpc_object_t v40 = (char *)_os_log_send_and_compose_impl();

    v57[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v40, v57, &type))
    {
      if (v57[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v42 = v57[0];
        if (os_log_type_enabled(v41, v57[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
          _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null input_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        id v47 = (char *)__nw_create_backtrace_string();
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v54 = v57[0];
        BOOL v48 = os_log_type_enabled(v41, v57[0]);
        if (v47)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
            __int16 v63 = 2082;
            BOOL v64 = v47;
            _os_log_impl(&dword_1830D4000, v41, v54, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v47);
          goto LABEL_84;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
          _os_log_impl(&dword_1830D4000, v41, v54, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v52 = v57[0];
        if (os_log_type_enabled(v41, v57[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_add_input_handler";
          _os_log_impl(&dword_1830D4000, v41, v52, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_84:
    if (v40) {
      free(v40);
    }
    int v27 = 0;
    goto LABEL_22;
  }
  if ((v11[405] & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_attach_protocol";
      __int16 v63 = 2082;
      BOOL v64 = v11 + 407;
      __int16 v65 = 2080;
      int v66 = " ";
      __int16 v67 = 2048;
      uint64_t v68 = a5;
      __int16 v69 = 2114;
      id v70 = v12;
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sPath %lx could not create protocol for %{public}@", buf, 0x34u);
    }
  }
  __int16 v20 = 0;
LABEL_36:

  return v20;
}

void nw_protocol_instance_tear_down_path(void *a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v27 = "nw_protocol_instance_tear_down_path";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v8, &type, &v24)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_protocol_instance_tear_down_path";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          int v27 = "nw_protocol_instance_tear_down_path";
          __int16 v28 = 2082;
          char v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v8) {
          goto LABEL_9;
        }
LABEL_44:
        free(v8);
        goto LABEL_9;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_protocol_instance_tear_down_path";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_protocol_instance_tear_down_path";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  if (a2)
  {
    if (*((void *)v3 + 37))
    {
      id v5 = (void *)*((void *)v3 + 15);
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_protocol_instance_tear_down_path_block_invoke;
      v21[3] = &unk_1E52491B0;
      __int16 v22 = v3;
      uint64_t v23 = a2;
      nw_queue_context_async(v5, v21);
    }
    else if ((v3[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        int v27 = "nw_protocol_instance_tear_down_path";
        __int16 v28 = 2082;
        char v29 = v4 + 407;
        __int16 v30 = 2080;
        char v31 = " ";
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo path table found", buf, 0x20u);
      }
    }
    goto LABEL_9;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v27 = "nw_protocol_instance_tear_down_path";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v8, &type, &v24)) {
    goto LABEL_43;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      int v27 = "nw_protocol_instance_tear_down_path";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null path", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (!v24)
  {
    BOOL v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      int v27 = "nw_protocol_instance_tear_down_path";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_42;
  }
  uint64_t v16 = (char *)__nw_create_backtrace_string();
  BOOL v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      int v27 = "nw_protocol_instance_tear_down_path";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    int v27 = "nw_protocol_instance_tear_down_path";
    __int16 v28 = 2082;
    char v29 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_44;
  }
LABEL_9:
}

void sub_183709330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_instance_tear_down_path_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 296);
  if (!v3)
  {
    if (*(char *)(v2 + 405) < 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
      goto LABEL_29;
    }
    uint64_t v9 = *(void *)(a1 + 32);
    os_log_type_t v10 = "";
    BOOL v11 = v9 == 0;
    if (v9) {
      os_log_type_t v12 = (const char *)(v9 + 407);
    }
    else {
      os_log_type_t v12 = "";
    }
    int v22 = 136446722;
    uint64_t v23 = "nw_protocol_instance_tear_down_path_block_invoke";
    if (!v11) {
      os_log_type_t v10 = " ";
    }
    __int16 v24 = 2082;
    uint64_t v25 = v12;
    __int16 v26 = 2080;
    int v27 = v10;
    id v13 = "%{public}s %{public}s%sNo path table found";
    os_log_type_t v14 = v8;
    uint32_t v15 = 32;
    goto LABEL_28;
  }
  BOOL node = nw_hash_table_get_node(v3, *(void *)(a1 + 40), 8);
  if (!node)
  {
    uint64_t v16 = *(void *)(a1 + 32);
    if (v16 && *(char *)(v16 + 405) < 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
LABEL_29:

      return;
    }
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
    BOOL v19 = v17 == 0;
    if (v17) {
      os_log_type_t v20 = (const char *)(v17 + 407);
    }
    else {
      os_log_type_t v20 = "";
    }
    uint64_t v23 = "nw_protocol_instance_tear_down_path_block_invoke";
    __int16 v24 = 2082;
    uint64_t v21 = " ";
    int v22 = 136446978;
    if (v19) {
      uint64_t v21 = "";
    }
    uint64_t v25 = v20;
    __int16 v26 = 2080;
    int v27 = v21;
    __int16 v28 = 2048;
    uint64_t v29 = v18;
    id v13 = "%{public}s %{public}s%sNo path found for %lx";
    os_log_type_t v14 = v8;
    uint32_t v15 = 42;
LABEL_28:
    _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v22, v15);
    goto LABEL_29;
  }
  uint64_t v5 = node;
  nw_protocol_instance_tear_down_path_inner(*(void **)(a1 + 32), node + 32);
  if (*(_DWORD *)(v5 + 160) == 3)
  {
    *(_DWORD *)(v5 + 160) = 1;
    uint64_t v6 = *(void *)(a1 + 32);
    if ((*(unsigned char *)(v6 + 404) & 8) == 0)
    {
      if (*(void *)(v6 + 16)) {
        (*(void (**)(void))(*(void *)(*(void *)(v6 + 8) + 80) + 208))();
      }
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v7 + 404) & 8) != 0)
  {
    nw_protocol_implementation_destroy((NWConcrete_nw_protocol_instance *)v7);
  }
}

uint64_t ___ZL43nw_protocol_implementation_has_active_pathsP31NWConcrete_nw_protocol_instance_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  if (*(_DWORD *)(extra + 128) != 3 && !*(void *)(extra + 32)) {
    return 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

void *nw_protocol_instance_copy_endpoint(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = *(void **)(a1 + 40);
    return nw_endpoint_copy(v1);
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v14 = "nw_protocol_instance_copy_endpoint";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_protocol_instance_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v14 = "nw_protocol_instance_copy_endpoint";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_protocol_instance_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_protocol_instance_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v4) {
    free(v4);
  }
  return 0;
}

uint64_t nw_protocol_instance_get_maximum_message_size(void *a1, uint64_t a2)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    int v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v73 = "nw_protocol_instance_get_maximum_message_size";
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (!__nwlog_fault(v23, type, &v68)) {
      goto LABEL_140;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (os_log_type_enabled(v24, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v73 = "nw_protocol_instance_get_maximum_message_size";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_139;
    }
    if (!(_BYTE)v68)
    {
      __int16 v24 = __nwlog_obj();
      os_log_type_t v53 = type[0];
      if (os_log_type_enabled(v24, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v73 = "nw_protocol_instance_get_maximum_message_size";
        _os_log_impl(&dword_1830D4000, v24, v53, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_139;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v24 = __nwlog_obj();
    os_log_type_t v37 = type[0];
    BOOL v38 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v73 = "nw_protocol_instance_get_maximum_message_size";
        _os_log_impl(&dword_1830D4000, v24, v37, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_139;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v73 = "nw_protocol_instance_get_maximum_message_size";
      __int16 v74 = 2082;
      int v75 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v24, v37, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
    goto LABEL_140;
  }
  if (a2)
  {
    uint64_t v5 = nw_protocol_implementation_lookup_path(v3, a2, 0);
    if (!v5) {
      goto LABEL_142;
    }
    os_log_type_t v6 = *(void **)(v5 + 32);
    uint64_t v65 = 0;
    if (v6)
    {
      uint64_t v7 = (void *)v6[5];
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = v6[11];
        if (v10) {
          v6[11] = v10 + 1;
        }
        char v8 = -1;
      }
      else
      {
        char v8 = 0;
      }
      p_paths_log_id_num = &v4[-1].paths_log_id_num;
      *(void *)os_log_type_t type = v6;
      char v71 = v8;
      os_log_type_t v12 = *(void **)&v4[-1].log_str[33];
      if (v12 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v14 = *(void *)&v4[-1].log_str[81];
        if (v14) {
          *(void *)&v4[-1].log_str[81] = v14 + 1;
        }
        char v13 = -1;
      }
      else
      {
        char v13 = 0;
      }
      uint64_t v68 = &v4[-1].paths_log_id_num;
      char v69 = v13;
      uint64_t v15 = v6[3];
      if (v15)
      {
        uint64_t v16 = *(void (**)(void *, unsigned __int16 *, uint64_t *))(v15 + 248);
        if (v16)
        {
LABEL_31:
          v16(v6, p_paths_log_id_num, &v65);
          goto LABEL_32;
        }
      }
      __int16 v26 = __nwlog_obj();
      int v27 = (const char *)v6[2];
      *(_DWORD *)buf = 136446722;
      uint64_t v73 = "__nw_protocol_get_message_properties";
      if (!v27) {
        int v27 = "invalid";
      }
      __int16 v74 = 2082;
      int v75 = (void *)v27;
      __int16 v76 = 2048;
      xpc_object_t v77 = v6;
      __int16 v28 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v67 = OS_LOG_TYPE_ERROR;
      char v66 = 0;
      if (__nwlog_fault(v28, &v67, &v66))
      {
        if (v67 == OS_LOG_TYPE_FAULT)
        {
          uint64_t v29 = __nwlog_obj();
          os_log_type_t v30 = v67;
          if (os_log_type_enabled(v29, v67))
          {
            char v31 = (const char *)v6[2];
            if (!v31) {
              char v31 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v73 = "__nw_protocol_get_message_properties";
            __int16 v74 = 2082;
            int v75 = (void *)v31;
            __int16 v76 = 2048;
            xpc_object_t v77 = v6;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback", buf, 0x20u);
          }
LABEL_125:

          goto LABEL_126;
        }
        if (!v66)
        {
          uint64_t v29 = __nwlog_obj();
          os_log_type_t v56 = v67;
          if (os_log_type_enabled(v29, v67))
          {
            BOOL v57 = (const char *)v6[2];
            if (!v57) {
              BOOL v57 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v73 = "__nw_protocol_get_message_properties";
            __int16 v74 = 2082;
            int v75 = (void *)v57;
            __int16 v76 = 2048;
            xpc_object_t v77 = v6;
            _os_log_impl(&dword_1830D4000, v29, v56, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, backtrace limit exceeded", buf, 0x20u);
          }
          goto LABEL_125;
        }
        uint64_t v41 = (char *)__nw_create_backtrace_string();
        uint64_t v29 = __nwlog_obj();
        os_log_type_t v42 = v67;
        BOOL v43 = os_log_type_enabled(v29, v67);
        if (!v41)
        {
          if (v43)
          {
            uint64_t v60 = (const char *)v6[2];
            if (!v60) {
              uint64_t v60 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v73 = "__nw_protocol_get_message_properties";
            __int16 v74 = 2082;
            int v75 = (void *)v60;
            __int16 v76 = 2048;
            xpc_object_t v77 = v6;
            _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, no backtrace", buf, 0x20u);
          }
          goto LABEL_125;
        }
        if (v43)
        {
          int v44 = (const char *)v6[2];
          if (!v44) {
            int v44 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          uint64_t v73 = "__nw_protocol_get_message_properties";
          __int16 v74 = 2082;
          int v75 = (void *)v44;
          __int16 v76 = 2048;
          xpc_object_t v77 = v6;
          __int16 v78 = 2082;
          char v79 = v41;
          _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
LABEL_88:

        free(v41);
        goto LABEL_126;
      }
      goto LABEL_126;
    }
    uint64_t v39 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v73 = "__nw_protocol_get_message_properties";
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (__nwlog_fault(v23, type, &v68))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v24 = __nwlog_obj();
        os_log_type_t v40 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v73 = "__nw_protocol_get_message_properties";
          _os_log_impl(&dword_1830D4000, v24, v40, "%{public}s called with null protocol", buf, 0xCu);
        }
LABEL_139:

        goto LABEL_140;
      }
      if (!(_BYTE)v68)
      {
        __int16 v24 = __nwlog_obj();
        os_log_type_t v62 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v73 = "__nw_protocol_get_message_properties";
          _os_log_impl(&dword_1830D4000, v24, v62, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_139;
      }
      __int16 v50 = (char *)__nw_create_backtrace_string();
      __int16 v24 = __nwlog_obj();
      os_log_type_t v51 = type[0];
      BOOL v52 = os_log_type_enabled(v24, type[0]);
      if (!v50)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v73 = "__nw_protocol_get_message_properties";
          _os_log_impl(&dword_1830D4000, v24, v51, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
        goto LABEL_139;
      }
      if (v52)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v73 = "__nw_protocol_get_message_properties";
        __int16 v74 = 2082;
        int v75 = v50;
        _os_log_impl(&dword_1830D4000, v24, v51, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_101:

      free(v50);
      if (!v23) {
        goto LABEL_142;
      }
      goto LABEL_141;
    }
LABEL_140:
    if (v23) {
LABEL_141:
    }
      free(v23);
LABEL_142:
    uint64_t v21 = 0;
    goto LABEL_143;
  }
  uint64_t v65 = 0;
  os_log_type_t v6 = *(void **)&v3[-1].log_str[25];
  if (!v6)
  {
    BOOL v45 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v73 = "__nw_protocol_get_message_properties";
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (!__nwlog_fault(v23, type, &v68)) {
      goto LABEL_140;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v24 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v24, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v73 = "__nw_protocol_get_message_properties";
        _os_log_impl(&dword_1830D4000, v24, v46, "%{public}s called with null protocol", buf, 0xCu);
      }
      goto LABEL_139;
    }
    if (!(_BYTE)v68)
    {
      __int16 v24 = __nwlog_obj();
      os_log_type_t v63 = type[0];
      if (os_log_type_enabled(v24, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v73 = "__nw_protocol_get_message_properties";
        _os_log_impl(&dword_1830D4000, v24, v63, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_139;
    }
    __int16 v50 = (char *)__nw_create_backtrace_string();
    __int16 v24 = __nwlog_obj();
    os_log_type_t v54 = type[0];
    BOOL v55 = os_log_type_enabled(v24, type[0]);
    if (!v50)
    {
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v73 = "__nw_protocol_get_message_properties";
        _os_log_impl(&dword_1830D4000, v24, v54, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
      goto LABEL_139;
    }
    if (v55)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v73 = "__nw_protocol_get_message_properties";
      __int16 v74 = 2082;
      int v75 = v50;
      _os_log_impl(&dword_1830D4000, v24, v54, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_101;
  }
  uint64_t v7 = (void *)v6[5];
  if (v7 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v17 = v6[11];
    if (v17) {
      v6[11] = v17 + 1;
    }
    char v9 = -1;
  }
  else
  {
    char v9 = 0;
  }
  p_paths_log_id_num = &v3[-1].paths_log_id_num;
  *(void *)os_log_type_t type = v6;
  char v71 = v9;
  os_log_type_t v12 = *(void **)&v3[-1].log_str[33];
  if (v12 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v19 = *(void *)&v3[-1].log_str[81];
    if (v19) {
      *(void *)&v3[-1].log_str[81] = v19 + 1;
    }
    char v18 = -1;
  }
  else
  {
    char v18 = 0;
  }
  uint64_t v68 = &v3[-1].paths_log_id_num;
  char v69 = v18;
  uint64_t v20 = v6[3];
  if (v20)
  {
    uint64_t v16 = *(void (**)(void *, unsigned __int16 *, uint64_t *))(v20 + 248);
    if (v16) {
      goto LABEL_31;
    }
  }
  uint64_t v32 = __nwlog_obj();
  uint64_t v33 = (const char *)v6[2];
  *(_DWORD *)buf = 136446722;
  uint64_t v73 = "__nw_protocol_get_message_properties";
  if (!v33) {
    uint64_t v33 = "invalid";
  }
  __int16 v74 = 2082;
  int v75 = (void *)v33;
  __int16 v76 = 2048;
  xpc_object_t v77 = v6;
  __int16 v28 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v67 = OS_LOG_TYPE_ERROR;
  char v66 = 0;
  if (__nwlog_fault(v28, &v67, &v66))
  {
    if (v67 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v34 = v67;
      if (os_log_type_enabled(v29, v67))
      {
        uint64_t v35 = (const char *)v6[2];
        if (!v35) {
          uint64_t v35 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v73 = "__nw_protocol_get_message_properties";
        __int16 v74 = 2082;
        int v75 = (void *)v35;
        __int16 v76 = 2048;
        xpc_object_t v77 = v6;
        _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback", buf, 0x20u);
      }
      goto LABEL_125;
    }
    if (!v66)
    {
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v58 = v67;
      if (os_log_type_enabled(v29, v67))
      {
        uint64_t v59 = (const char *)v6[2];
        if (!v59) {
          uint64_t v59 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v73 = "__nw_protocol_get_message_properties";
        __int16 v74 = 2082;
        int v75 = (void *)v59;
        __int16 v76 = 2048;
        xpc_object_t v77 = v6;
        _os_log_impl(&dword_1830D4000, v29, v58, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, backtrace limit exceeded", buf, 0x20u);
      }
      goto LABEL_125;
    }
    uint64_t v41 = (char *)__nw_create_backtrace_string();
    uint64_t v29 = __nwlog_obj();
    os_log_type_t v47 = v67;
    BOOL v48 = os_log_type_enabled(v29, v67);
    if (!v41)
    {
      if (v48)
      {
        char v61 = (const char *)v6[2];
        if (!v61) {
          char v61 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v73 = "__nw_protocol_get_message_properties";
        __int16 v74 = 2082;
        int v75 = (void *)v61;
        __int16 v76 = 2048;
        xpc_object_t v77 = v6;
        _os_log_impl(&dword_1830D4000, v29, v47, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, no backtrace", buf, 0x20u);
      }
      goto LABEL_125;
    }
    if (v48)
    {
      os_log_type_t v49 = (const char *)v6[2];
      if (!v49) {
        os_log_type_t v49 = "invalid";
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v73 = "__nw_protocol_get_message_properties";
      __int16 v74 = 2082;
      int v75 = (void *)v49;
      __int16 v76 = 2048;
      xpc_object_t v77 = v6;
      __int16 v78 = 2082;
      char v79 = v41;
      _os_log_impl(&dword_1830D4000, v29, v47, "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    goto LABEL_88;
  }
LABEL_126:
  if (v28) {
    free(v28);
  }
LABEL_32:
  if (v12 == &nw_protocol_ref_counted_handle)
  {
    nw::release_if_needed<nw_protocol *>((uint64_t *)&v68);
    if (v7 != &nw_protocol_ref_counted_handle) {
      goto LABEL_34;
    }
LABEL_36:
    nw::release_if_needed<nw_protocol *>((uint64_t *)type);
    goto LABEL_34;
  }
  if (v7 == &nw_protocol_ref_counted_handle) {
    goto LABEL_36;
  }
LABEL_34:
  uint64_t v21 = v65;
LABEL_143:

  return v21;
}

void sub_18370A6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  if (v10 == v9) {
    nw::release_if_needed<nw_protocol *>((uint64_t *)va);
  }
  if (v8 == v9) {
    nw::release_if_needed<nw_protocol *>((uint64_t *)va1);
  }

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_instance_get_buffer_manager(void *a1, unsigned int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = (void *)*((void *)v3 + 15);
    if (v5)
    {
      uint64_t buffer_manager_with_context = nw_frame_get_buffer_manager_with_context(v5, a2);
      goto LABEL_4;
    }
    uint64_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_instance_get_buffer_manager";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null instance->context", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null instance->context, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null instance->context, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v24 = "nw_protocol_instance_get_buffer_manager";
        __int16 v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null instance->context, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_instance_get_buffer_manager";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v24 = "nw_protocol_instance_get_buffer_manager";
        __int16 v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9) {
    free(v9);
  }
  uint64_t buffer_manager_with_context = 0;
LABEL_4:

  return buffer_manager_with_context;
}

uint64_t nw_protocol_instance_access_cached_content(void *a1, void *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v12, &type, &v48)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (!v48)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v41, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v29 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
      __int16 v52 = 2082;
      os_log_type_t v53 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_63:

    free(backtrace_string);
    goto LABEL_64;
  }
  if (!v4)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v12, &type, &v48)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null access_block", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (!v48)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v42, "%{public}s called with null access_block, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v30 = type;
    BOOL v31 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v30, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
      __int16 v52 = 2082;
      os_log_type_t v53 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v30, "%{public}s called with null access_block, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
  os_log_type_t v6 = v3[1];
  if (!v6)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v12, &type, &v48)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null instance->parent_definition", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (!v48)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v43, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v32 = type;
    BOOL v33 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v32, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
      __int16 v52 = 2082;
      os_log_type_t v53 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v32, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
  uint64_t v7 = v6[9];
  if (!v7)
  {
    os_log_type_t v19 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v12, &type, &v48)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null instance->parent_definition->common_state", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (!v48)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v44, "%{public}s called with null instance->parent_definition->common_state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v34 = type;
    BOOL v35 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v34, "%{public}s called with null instance->parent_definition->common_state, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
      __int16 v52 = 2082;
      os_log_type_t v53 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v34, "%{public}s called with null instance->parent_definition->common_state, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
  if (*(void *)(v7 + 56))
  {
    uint64_t v8 = nw_protocol_instance_copy_association(v3);
    uint64_t v9 = v8;
    if (v8)
    {
      if (nw_association_get_cached_content_for_protocol(v8, v3[1]))
      {
        uint64_t v10 = v5[2](v5);
LABEL_111:

        goto LABEL_112;
      }
LABEL_110:
      uint64_t v10 = 0;
      goto LABEL_111;
    }
    uint64_t v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
    __int16 v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (__nwlog_fault(v24, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null association", buf, 0xCu);
        }
      }
      else if (v48)
      {
        BOOL v38 = (char *)__nw_create_backtrace_string();
        __int16 v25 = __nwlog_obj();
        os_log_type_t v39 = type;
        BOOL v40 = os_log_type_enabled(v25, type);
        if (v38)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
            __int16 v52 = 2082;
            os_log_type_t v53 = v38;
            _os_log_impl(&dword_1830D4000, v25, v39, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v38);
          goto LABEL_108;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
          _os_log_impl(&dword_1830D4000, v25, v39, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v25 = __nwlog_obj();
        os_log_type_t v46 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
          _os_log_impl(&dword_1830D4000, v25, v46, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_108:
    if (v24) {
      free(v24);
    }
    goto LABEL_110;
  }
  char v21 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
  uint64_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v48 = 0;
  if (__nwlog_fault(v12, &type, &v48))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry", buf, 0xCu);
      }
LABEL_104:

      goto LABEL_64;
    }
    if (!v48)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v45, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v36 = type;
    BOOL v37 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v36, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v51 = "nw_protocol_instance_access_cached_content";
      __int16 v52 = 2082;
      os_log_type_t v53 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v36, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_63;
  }
LABEL_64:
  if (v12) {
    free(v12);
  }
  uint64_t v10 = 0;
LABEL_112:

  return v10;
}

void sub_18370B898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_instance_set_cached_content(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  os_log_type_t v6 = (void **)v5;
  if (!v5)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v12, &type, &v43)) {
      goto LABEL_87;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
          __int16 v47 = 2082;
          char v48 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_87:
        if (!v12) {
          goto LABEL_8;
        }
LABEL_88:
        free(v12);
        goto LABEL_8;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v38, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_86:

    goto LABEL_87;
  }
  uint64_t v7 = v5[1];
  if (!v7)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v12, &type, &v43)) {
      goto LABEL_87;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null instance->parent_definition", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (!v43)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v39, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_86;
    }
    os_log_type_t v28 = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v30 = os_log_type_enabled(v13, type);
    if (!v28)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v29, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
      __int16 v47 = 2082;
      char v48 = v28;
      _os_log_impl(&dword_1830D4000, v13, v29, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_53;
  }
  uint64_t v8 = *(void *)(v7 + 72);
  if (!v8)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v12, &type, &v43)) {
      goto LABEL_87;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null instance->parent_definition->common_state", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (!v43)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v40, "%{public}s called with null instance->parent_definition->common_state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_86;
    }
    os_log_type_t v28 = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v32 = os_log_type_enabled(v13, type);
    if (!v28)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v31, "%{public}s called with null instance->parent_definition->common_state, no backtrace", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
      __int16 v47 = 2082;
      char v48 = v28;
      _os_log_impl(&dword_1830D4000, v13, v31, "%{public}s called with null instance->parent_definition->common_state, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_53;
  }
  if (!*(void *)(v8 + 56))
  {
    os_log_type_t v19 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v12, &type, &v43)) {
      goto LABEL_87;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (!v43)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v41, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_86;
    }
    os_log_type_t v28 = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v34 = os_log_type_enabled(v13, type);
    if (!v28)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
        _os_log_impl(&dword_1830D4000, v13, v33, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, no backtrace", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
      __int16 v47 = 2082;
      char v48 = v28;
      _os_log_impl(&dword_1830D4000, v13, v33, "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_53:

    free(v28);
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_88;
  }
  uint64_t v9 = nw_protocol_instance_copy_association(v5);
  uint64_t v10 = v9;
  if (!v9)
  {
    char v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v22, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null association", buf, 0xCu);
        }
      }
      else if (v43)
      {
        BOOL v35 = (char *)__nw_create_backtrace_string();
        uint64_t v23 = __nwlog_obj();
        os_log_type_t v36 = type;
        BOOL v37 = os_log_type_enabled(v23, type);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
            __int16 v47 = 2082;
            char v48 = v35;
            _os_log_impl(&dword_1830D4000, v23, v36, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v35);
          goto LABEL_92;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
          _os_log_impl(&dword_1830D4000, v23, v36, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v23 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
          _os_log_impl(&dword_1830D4000, v23, v42, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_92:
    if (v22) {
      free(v22);
    }
    goto LABEL_7;
  }
  nw_association_set_cached_content_for_protocol(v9, v6[1], a2, a3);
LABEL_7:

LABEL_8:
}

void sub_18370C37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_protocol_instance_copy_definition(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[1];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_instance_copy_definition";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_instance_copy_definition";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_instance_copy_definition";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_instance_copy_definition";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_instance_copy_definition";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_instance_set_reserve_header_size(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((void *)v3 + 10) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_instance_set_reserve_header_size";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_instance_set_reserve_header_size";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_instance_set_reserve_header_size";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_instance_set_reserve_header_size";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_instance_set_reserve_header_size";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_protocol_instance_set_reserve_footer_size(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((void *)v3 + 11) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_instance_set_reserve_footer_size";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_instance_set_reserve_footer_size";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_instance_set_reserve_footer_size";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_instance_set_reserve_footer_size";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_instance_set_reserve_footer_size";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_protocol_instance_set_maximum_content_size(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((void *)v3 + 12) = a2;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_instance_set_maximum_content_size";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_instance_set_maximum_content_size";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_instance_set_maximum_content_size";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_instance_set_maximum_content_size";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_instance_set_maximum_content_size";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_protocol_instance_notify_updated_metadata(void *a1)
{
}

void nw_protocol_instance_notify_updated_internal(void *a1, unsigned int a2, int a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  os_log_type_t v6 = (char *)v5;
  if (!v5)
  {
    os_log_type_t v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_notify_updated_internal";
    char v21 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v21, type, &v34))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_notify_updated_internal";
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null instance", buf, 0xCu);
        }
      }
      else if (v34)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v27 = type[0];
        BOOL v28 = os_log_type_enabled(v22, type[0]);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_notify_updated_internal";
            __int16 v38 = 2082;
            os_log_type_t v39 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v22, v27, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_53;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_notify_updated_internal";
          _os_log_impl(&dword_1830D4000, v22, v27, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v29 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_notify_updated_internal";
          _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_53:
    if (v21) {
      free(v21);
    }
    goto LABEL_30;
  }
  uint64_t v7 = (void *)v5[15];
  if (v7)
  {
    os_log_type_t v8 = v7;
    uint64_t v9 = v8;
    if (((_BYTE)v8[17] & 8) == 0) {
      dispatch_assert_queue_V2(v8[1]);
    }
  }
  if ((v6[405] & 0x80000000) == 0 && gLogDatapath)
  {
    os_log_type_t v24 = __nwlog_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      if (a2 > 0x1A) {
        __int16 v25 = "unknown";
      }
      else {
        __int16 v25 = off_1E5241E58[a2];
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_notify_updated_internal";
      __int16 v38 = 2082;
      os_log_type_t v39 = v6 + 407;
      __int16 v40 = 2080;
      os_log_type_t v41 = " ";
      __int16 v42 = 2082;
      char v43 = v25;
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNotify updated %{public}s", buf, 0x2Au);
    }
  }
  if (*(_DWORD *)(*((void *)v6 + 1) + 64) == 3)
  {
    os_log_type_t v10 = (char *)*((void *)v6 + 29);
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = ___ZL44nw_protocol_instance_notify_updated_internalP31NWConcrete_nw_protocol_instance31nw_protocol_notification_type_tb_block_invoke;
    v30[3] = &unk_1E523BE70;
    char v33 = a3;
    os_log_type_t v31 = v6;
    unsigned int v32 = a2;
    nw_hash_table_apply(v10, (uint64_t)v30);
  }
  else if (!a3 || v6[402] < 0)
  {
    BOOL v11 = (void *)*((void *)v6 - 6);
    if (v11)
    {
      uint64_t v12 = v11[3];
      if (v12)
      {
        char v13 = *(void (**)(void))(v12 + 160);
        if (v13)
        {
          os_log_type_t v14 = (void *)v11[5];
          if (v14 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v16 = v11[11];
            if (v16) {
              v11[11] = v16 + 1;
            }
            char v15 = -1;
          }
          else
          {
            char v15 = 0;
          }
          *(void *)buf = v11;
          buf[8] = v15;
          __int16 v17 = (void *)*((void *)v6 - 7);
          if (v17 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v19 = *((void *)v6 - 1);
            if (v19) {
              *((void *)v6 - 1) = v19 + 1;
            }
            char v18 = -1;
          }
          else
          {
            char v18 = 0;
          }
          *(void *)os_log_type_t type = v6 - 96;
          char v36 = v18;
          v13();
          if (v17 == &nw_protocol_ref_counted_handle)
          {
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            if (v14 != &nw_protocol_ref_counted_handle) {
              goto LABEL_30;
            }
          }
          else if (v14 != &nw_protocol_ref_counted_handle)
          {
            goto LABEL_30;
          }
          nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
        }
      }
    }
  }
LABEL_30:
}

uint64_t ___ZL44nw_protocol_instance_notify_updated_internalP31NWConcrete_nw_protocol_instance31nw_protocol_notification_type_tb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 44) && (*(_WORD *)(nw_hash_node_get_extra(a2) + 52) & 0x800) == 0) {
    return 1;
  }
  uint64_t object = (void *)nw_hash_node_get_object(a2);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = v5 ? v5 - 96 : 0;
  if (!object) {
    return 1;
  }
  uint64_t v7 = object[3];
  if (!v7) {
    return 1;
  }
  if (!v5) {
    return 1;
  }
  os_log_type_t v8 = *(void (**)(void))(v7 + 160);
  if (!v8) {
    return 1;
  }
  int v9 = *(_DWORD *)(a1 + 40);
  os_log_type_t v10 = (void *)object[5];
  if (v10 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v12 = object[11];
    if (v12) {
      object[11] = v12 + 1;
    }
    char v11 = -1;
  }
  else
  {
    char v11 = 0;
  }
  os_log_type_t v31 = object;
  char v32 = v11;
  if (*(_UNKNOWN **)(v6 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v15 = *(void *)(v6 + 88);
    char v14 = 0;
    if (v15) {
      *(void *)(v6 + 88) = v15 + 1;
    }
    char v13 = -1;
  }
  else
  {
    char v13 = 0;
    char v14 = 1;
  }
  uint64_t v29 = v6;
  char v30 = v13;
  if (!v9)
  {
    __int16 v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v34 = "__nw_protocol_notify";
    char v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v18, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          char v34 = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null type", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v26 = v10;
        if (v27)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          BOOL v24 = os_log_type_enabled(v22, type);
          if (backtrace_string)
          {
            if (v24)
            {
              *(_DWORD *)buf = 136446466;
              char v34 = "__nw_protocol_notify";
              __int16 v35 = 2082;
              char v36 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
            }

            os_log_type_t v10 = v26;
            free(backtrace_string);
            goto LABEL_43;
          }
          if (v24)
          {
            *(_DWORD *)buf = 136446210;
            char v34 = "__nw_protocol_notify";
            _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null type, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)buf = 136446210;
            char v34 = "__nw_protocol_notify";
            _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s called with null type, backtrace limit exceeded", buf, 0xCu);
          }
        }

        os_log_type_t v10 = v26;
      }
    }
LABEL_43:
    if (v18) {
      free(v18);
    }
    goto LABEL_22;
  }
  v8();
LABEL_22:
  if ((v14 & 1) == 0) {
    nw::release_if_needed<nw_protocol *>(&v29);
  }
  if (v10 == &nw_protocol_ref_counted_handle) {
    nw::release_if_needed<nw_protocol *>((uint64_t *)&v31);
  }
  return 1;
}

void sub_18370D698(_Unwind_Exception *exception_object)
{
}

void sub_18370D6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if ((v21 & 1) == 0) {
    nw::release_if_needed<nw_protocol *>(&a17);
  }
  if (v19 == v20) {
    nw::release_if_needed<nw_protocol *>(&a19);
  }
  _Unwind_Resume(exception_object);
}

void nw_protocol_instance_notify_updated_message_properties(void *a1, int a2)
{
}

uint64_t ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t extra = nw_hash_node_get_extra(a2);
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6 || (*(char *)(v6 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = (const char *)(v8 + 407);
      BOOL v10 = v8 == 0;
      if (!v8) {
        int v9 = "";
      }
      char v11 = " ";
      if (v10) {
        char v11 = "";
      }
      uint64_t v12 = *(unsigned int *)(extra + 128);
      if (v12 > 3) {
        char v13 = "unknown";
      }
      else {
        char v13 = off_1E523C0C0[v12];
      }
      uint64_t v14 = *(void *)(extra + 16);
      int v15 = *(char *)(extra + 136);
      uint64_t v16 = *(void *)(extra + 120);
      int v18 = 136448002;
      uint64_t v19 = "nw_protocol_instance_update_available_paths_block_invoke";
      __int16 v20 = 2082;
      char v21 = v9;
      __int16 v22 = 2080;
      os_log_type_t v23 = v11;
      __int16 v24 = 2048;
      uint64_t v25 = object;
      __int16 v26 = 2080;
      char v27 = v13;
      __int16 v28 = 2112;
      uint64_t v29 = v14;
      __int16 v30 = 1024;
      int v31 = v15;
      __int16 v32 = 2112;
      uint64_t v33 = v16;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s\tPath %lx %s over %@ p:%d (%@)", (uint8_t *)&v18, 0x4Eu);
    }
  }
  return 1;
}

void ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_273(uint64_t a1, void *a2, const unsigned __int8 *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9 || (*(char *)(v9 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int is_null = uuid_is_null(a3);
      char v13 = " ";
      int v16 = 136447490;
      __int16 v17 = "nw_protocol_instance_update_available_paths_block_invoke";
      __int16 v18 = 2082;
      uint64_t v14 = (const char *)(v11 + 407);
      if (!v11) {
        uint64_t v14 = "";
      }
      uint64_t v19 = v14;
      if (!v11) {
        char v13 = "";
      }
      __int16 v20 = 2080;
      char v21 = v13;
      int v15 = "channel";
      __int16 v22 = 2112;
      id v23 = v7;
      __int16 v24 = 2112;
      if (is_null) {
        int v15 = "socket";
      }
      id v25 = v8;
      __int16 v26 = 2080;
      char v27 = v15;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s\t%@ (%@) (%s)", (uint8_t *)&v16, 0x3Eu);
    }
  }
}

void sub_18370DA0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_275(uint64_t a1, void *a2)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = nw_interface_option_details_copy_remote_endpoint(v3);
  id v5 = nw_interface_option_details_copy_interface(v3);
  if (nw_parameters_get_stricter_path_scoping(*(void **)(*(void *)(a1 + 32) + 48))) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  id obj = v5;
  if (!v6 || (id v7 = *(void **)(a1 + 40)) == 0)
  {
LABEL_9:
    uint64_t v102 = 0;
    uint64_t v103 = &v102;
    uint64_t v104 = 0x2020000000;
    uint64_t v105 = 0;
    uint64_t v98 = 0;
    char v99 = &v98;
    uint64_t v100 = 0x2020000000;
    uint64_t v101 = 0;
    BOOL v10 = *(char **)(*(void *)(a1 + 32) + 296);
    v92[0] = MEMORY[0x1E4F143A8];
    v92[1] = 3221225472;
    v92[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_276;
    v92[3] = &unk_1E523C9C0;
    id v93 = v5;
    id v94 = v4;
    id v11 = v3;
    id v95 = v11;
    uint64_t v96 = &v102;
    uint64_t v97 = &v98;
    nw_hash_table_apply(v10, (uint64_t)v92);
    uint64_t v12 = v103[3];
    if (!v12)
    {
      uint64_t __buf = 0;
      arc4random_buf(&__buf, 8uLL);
      char v106 = 0;
      uint64_t v13 = nw_hash_table_add_object(*(void *)(*(void *)(a1 + 32) + 296), __buf, &v106);
      if (!v106 || (uint64_t v14 = v13) == 0)
      {
        uint64_t v67 = *(void *)(a1 + 32);
        if (!v67 || (*(char *)(v67 + 405) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v68 = (id)gLogObj;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            uint64_t v69 = *(void *)(a1 + 32);
            id v70 = (const char *)(v69 + 407);
            char v71 = "";
            if (!v69) {
              id v70 = "";
            }
            char v108 = "nw_protocol_instance_update_available_paths_block_invoke_2";
            __int16 v109 = 2082;
            *(_DWORD *)buf = 136446978;
            if (v69) {
              char v71 = " ";
            }
            id v110 = (void *)v70;
            __int16 v111 = 2080;
            uint64_t v112 = v71;
            __int16 v113 = 2048;
            uint64_t v114 = __buf;
            _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to add path %lx to paths table", buf, 0x2Au);
          }
        }
        goto LABEL_79;
      }
      *(_OWORD *)(v13 + 32) = 0u;
      uint64_t v15 = v13 + 32;
      *(_OWORD *)(v13 + 48) = 0u;
      int v16 = (uint64_t *)(v13 + 48);
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_OWORD *)(v13 + 128) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      objc_storeStrong((id *)(v13 + 48), v5);
      nw_interface_option_details_get_nexus_agent(v11, (_OWORD *)(v14 + 32));
      objc_storeStrong((id *)(v14 + 152), v4);
      *(unsigned char *)(v14 + 168) = nw_interface_option_details_get_priority(v11);
      id v17 = nw_interface_option_details_copy_local_cid(v11);
      __int16 v18 = *(void **)(v14 + 96);
      *(void *)(v14 + 96) = v17;

      id v19 = nw_interface_option_details_copy_remote_cid(v11);
      __int16 v20 = *(void **)(v14 + 104);
      *(void *)(v14 + 104) = v19;

      id v21 = nw_interface_option_details_copy_initial_data(v11);
      __int16 v22 = *(void **)(v14 + 112);
      *(void *)(v14 + 112) = v21;

      id v23 = nw_interface_option_details_copy_evaluator(v11);
      __int16 v24 = *(void **)(v14 + 128);
      *(void *)(v14 + 128) = v23;

      int sockfd = nw_interface_option_details_get_sockfd(v11);
      *(void *)(v14 + 136) = 0;
      uint64_t v26 = v14 + 136;
      *(unsigned char *)(v26 + 33) &= ~8u;
      *(_DWORD *)(v26 + 24) = 1;
      *(_DWORD *)(v26 + 28) = sockfd;
      *(void *)(v26 + 8) = v26;
      xpc_array_set_uint64(*(xpc_object_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL, __buf);
      uint64_t v27 = *(void *)(a1 + 32);
      if (!v27 || (*(char *)(v27 + 405) & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v28 = (id)gLogObj;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v29 = *(void *)(a1 + 32);
          __int16 v30 = (const char *)(v29 + 407);
          BOOL v6 = v29 == 0;
          int v31 = " ";
          uint64_t v32 = *v16;
          if (v6)
          {
            __int16 v30 = "";
            int v31 = "";
          }
          *(_DWORD *)buf = 136447234;
          char v108 = "nw_protocol_instance_update_available_paths_block_invoke";
          __int16 v109 = 2082;
          id v110 = (void *)v30;
          __int16 v111 = 2080;
          uint64_t v112 = v31;
          __int16 v113 = 2048;
          uint64_t v114 = __buf;
          __int16 v115 = 2112;
          uint64_t v116 = v32;
          _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected path %lx over %@", buf, 0x34u);
        }
      }
      v103[3] = v15;
      v99[3] = __buf;
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      uint64_t v33 = *(void *)(a1 + 32);
      uint64_t v34 = *(void *)(v33 + 312);
      __int16 v35 = v99;
      uint64_t v36 = v99[3];
      if (v34 != v36)
      {
        if (v34)
        {
          *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v34;
          uint64_t v36 = v35[3];
          uint64_t v33 = *(void *)(a1 + 32);
        }
        *(void *)(v33 + 312) = v36;
        uint64_t v37 = *(void *)(a1 + 32);
        if (!v37 || (*(char *)(v37 + 405) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v38 = (id)gLogObj;
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v39 = *(void *)(a1 + 32);
            BOOL v40 = v39 == 0;
            if (v39) {
              os_log_type_t v41 = (const char *)(v39 + 407);
            }
            else {
              os_log_type_t v41 = "";
            }
            __int16 v42 = " ";
            if (v40) {
              __int16 v42 = "";
            }
            uint64_t v43 = v99[3];
            uint64_t v44 = *(void *)(v103[3] + 16);
            *(_DWORD *)buf = 136447234;
            char v108 = "nw_protocol_instance_update_available_paths_block_invoke";
            __int16 v109 = 2082;
            id v110 = (void *)v41;
            __int16 v111 = 2080;
            uint64_t v112 = v42;
            __int16 v113 = 2048;
            uint64_t v114 = v43;
            __int16 v115 = 2112;
            uint64_t v116 = v44;
            _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMarking path %lx as primary path over %@", buf, 0x34u);
          }
        }
        if (v12) {
          xpc_array_set_uint64(*(xpc_object_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL, v99[3]);
        }
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    }
    else if (v12)
    {
      uint64_t v45 = v99[3];
      if (v45 == *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
      {
        uint64_t v46 = *(void *)(a1 + 32);
        if (!v46 || (*(char *)(v46 + 405) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v47 = (id)gLogObj;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v48 = *(void *)(a1 + 32);
            BOOL v49 = v48 == 0;
            if (v48) {
              __int16 v50 = (const char *)(v48 + 407);
            }
            else {
              __int16 v50 = "";
            }
            os_log_type_t v51 = " ";
            if (v49) {
              os_log_type_t v51 = "";
            }
            uint64_t v52 = v99[3];
            uint64_t v53 = *(void *)(v103[3] + 16);
            *(_DWORD *)buf = 136447234;
            char v108 = "nw_protocol_instance_update_available_paths_block_invoke";
            __int16 v109 = 2082;
            id v110 = (void *)v50;
            __int16 v111 = 2080;
            uint64_t v112 = v51;
            __int16 v113 = 2048;
            uint64_t v114 = v52;
            __int16 v115 = 2112;
            uint64_t v116 = v53;
            _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPath %lx over %@ is no longer primary", buf, 0x34u);
          }

          uint64_t v45 = v99[3];
        }
        xpc_array_set_uint64(*(xpc_object_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL, v45);
      }
    }
    uint64_t v54 = *(void *)(*(void *)(a1 + 72) + 8);
    if (*(unsigned char *)(v54 + 24) || (uint64_t v55 = v103[3], *(_DWORD *)(v55 + 128) != 3))
    {
LABEL_79:

      _Block_object_dispose(&v98, 8);
      _Block_object_dispose(&v102, 8);
      goto LABEL_80;
    }
    *(unsigned char *)(v54 + 24) = 1;
    *(void *)(*(void *)(a1 + 32) + 304) = v99[3];
    uint64_t v56 = *(void *)(a1 + 32);
    if (v56 && *(char *)(v56 + 405) < 0)
    {
LABEL_63:
      uint64_t v64 = *(void *)(v55 + 32);
      uint64_t v65 = *(void *)(v56 - 64);
      if (v65 != v64)
      {
        if (v65)
        {
          if (*(_UNKNOWN **)(v65 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v78 = *(void *)(v65 + 88);
            if (v78)
            {
              uint64_t v79 = v78 - 1;
              *(void *)(v65 + 88) = v79;
              if (!v79)
              {
                uint64_t v80 = *(void (***)(void))(v65 + 64);
                if (v80)
                {
                  *(void *)(v65 + 64) = 0;
                  v80[2](v80);
                  _Block_release(v80);
                }
                if (*(unsigned char *)(v65 + 72))
                {
                  uint64_t v81 = *(const void **)(v65 + 64);
                  if (v81) {
                    _Block_release(v81);
                  }
                }
                free((void *)v65);
              }
            }
          }
        }
        *(void *)(v56 - 64) = v64;
        if (v64)
        {
          if (*(_UNKNOWN **)(v64 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v66 = *(void *)(v64 + 88);
            if (v66) {
              *(void *)(v64 + 88) = v66 + 1;
            }
          }
        }
      }
      goto LABEL_79;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v57 = (id)gLogObj;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v58 = *(void *)(a1 + 32);
      BOOL v59 = v58 == 0;
      if (v58) {
        uint64_t v60 = (const char *)(v58 + 407);
      }
      else {
        uint64_t v60 = "";
      }
      char v61 = " ";
      if (v59) {
        char v61 = "";
      }
      uint64_t v62 = v99[3];
      uint64_t v63 = *(void *)(v103[3] + 16);
      *(_DWORD *)buf = 136447234;
      char v108 = "nw_protocol_instance_update_available_paths_block_invoke";
      __int16 v109 = 2082;
      id v110 = (void *)v60;
      __int16 v111 = 2080;
      uint64_t v112 = v61;
      __int16 v113 = 2048;
      uint64_t v114 = v62;
      __int16 v115 = 2112;
      uint64_t v116 = v63;
      _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMarking path %lx as default path over %@", buf, 0x34u);
    }

    uint64_t v56 = *(void *)(a1 + 32);
    if (v56)
    {
      uint64_t v55 = v103[3];
      goto LABEL_63;
    }
    int v82 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v108 = "__nw_protocol_set_output_handler";
    char v83 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__buf) = 16;
    char v106 = 0;
    if (__nwlog_fault(v83, &__buf, &v106))
    {
      if (__buf == 17)
      {
        uint64_t v84 = __nwlog_obj();
        os_log_type_t v85 = __buf;
        if (os_log_type_enabled(v84, (os_log_type_t)__buf))
        {
          *(_DWORD *)buf = 136446210;
          char v108 = "__nw_protocol_set_output_handler";
          _os_log_impl(&dword_1830D4000, v84, v85, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (v106)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v84 = __nwlog_obj();
        os_log_type_t v87 = __buf;
        BOOL v88 = os_log_type_enabled(v84, (os_log_type_t)__buf);
        if (backtrace_string)
        {
          if (v88)
          {
            *(_DWORD *)buf = 136446466;
            char v108 = "__nw_protocol_set_output_handler";
            __int16 v109 = 2082;
            id v110 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v84, v87, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_117;
        }
        if (v88)
        {
          *(_DWORD *)buf = 136446210;
          char v108 = "__nw_protocol_set_output_handler";
          _os_log_impl(&dword_1830D4000, v84, v87, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v84 = __nwlog_obj();
        os_log_type_t v89 = __buf;
        if (os_log_type_enabled(v84, (os_log_type_t)__buf))
        {
          *(_DWORD *)buf = 136446210;
          char v108 = "__nw_protocol_set_output_handler";
          _os_log_impl(&dword_1830D4000, v84, v89, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_117:
    if (v83) {
      free(v83);
    }
    goto LABEL_79;
  }
  id v8 = v7;
  id v9 = v8[2];

  if (nw_interface_shallow_compare(v9, v5))
  {

    goto LABEL_9;
  }
  uint64_t v72 = *(void *)(a1 + 32);
  if (!v72 || (*(char *)(v72 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v73 = (id)gLogObj;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v74 = *(void *)(a1 + 32);
      BOOL v75 = v74 == 0;
      if (v74) {
        __int16 v76 = (const char *)(v74 + 407);
      }
      else {
        __int16 v76 = "";
      }
      *(_DWORD *)buf = 136446978;
      char v108 = "nw_protocol_instance_update_available_paths_block_invoke";
      __int16 v109 = 2082;
      id v110 = (void *)v76;
      if (v75) {
        xpc_object_t v77 = "";
      }
      else {
        xpc_object_t v77 = " ";
      }
      __int16 v111 = 2080;
      uint64_t v112 = v77;
      __int16 v113 = 2112;
      uint64_t v114 = (uint64_t)v5;
      _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSkipping path over %@, doesn't match endpoint interface", buf, 0x2Au);
    }
  }
LABEL_80:
}

void sub_18370E664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_278(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t extra = nw_hash_node_get_extra(a2);
  uint64_t v21 = 0;
  __int16 v22 = &v21;
  uint64_t v23 = 0x2020000000;
  char v24 = 0;
  id v5 = *(void **)(a1 + 32);
  BOOL v6 = (void *)v5[36];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_2;
  v17[3] = &unk_1E523BEE8;
  id v19 = &v21;
  uint64_t v20 = extra;
  __int16 v18 = v5;
  nw_path_enumerate_interface_options_with_details(v6, v17);
  if (!*((unsigned char *)v22 + 24) && (*(unsigned char *)(extra + 137) & 8) == 0)
  {
    uint64_t object = nw_hash_node_get_object(a2);
    xpc_array_set_uint64(*(xpc_object_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL, object);
    *(_DWORD *)(extra + 128) = 2;
    *(unsigned char *)(extra + 137) |= 8u;
    uint64_t v8 = *(void *)(a1 + 32);
    if (!v8 || (*(char *)(v8 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        id v11 = "";
        uint64_t v12 = *(void *)(extra + 16);
        BOOL v13 = v10 == 0;
        if (v10) {
          uint64_t v14 = (const char *)(v10 + 407);
        }
        else {
          uint64_t v14 = "";
        }
        uint64_t v15 = *(void *)(extra + 120);
        if (!v13) {
          id v11 = " ";
        }
        *(_DWORD *)buf = 136447234;
        uint64_t v26 = "nw_protocol_instance_update_available_paths_block_invoke";
        __int16 v27 = 2082;
        uint64_t v28 = v14;
        __int16 v29 = 2080;
        __int16 v30 = v11;
        __int16 v31 = 2112;
        uint64_t v32 = v12;
        __int16 v33 = 2112;
        uint64_t v34 = v15;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRemoving path over %@ (override endpoint %@)", buf, 0x34u);
      }
    }
  }

  _Block_object_dispose(&v21, 8);
  return 1;
}

void sub_18370E8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_279(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t value = xpc_uint64_get_value(v4);
  if (*(void *)(a1 + 40) != value)
  {
    nw_hash_table_get_node(*(void *)(*(void *)(a1 + 32) + 296), value, 8);
    (*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 80) + 208))();
  }

  return 1;
}

void sub_18370E9A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_2_280(uint64_t a1)
{
  applier[0] = MEMORY[0x1E4F143A8];
  applier[1] = 3221225472;
  applier[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_3;
  applier[3] = &unk_1E524B4A0;
  id v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  xpc_array_apply(v1, applier);
}

void sub_18370EA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void nw_protocol_instance_async(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    BOOL v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_protocol_instance_async";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v28 = "nw_protocol_instance_async";
          __int16 v29 = 2082;
          __int16 v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_56:
        free(v7);
        goto LABEL_5;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_1830D4000, v8, v22, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  id v5 = (void *)v3[15];
  if (!v5)
  {
    uint64_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_protocol_instance_async";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null instance->context", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_1830D4000, v8, v23, "%{public}s called with null instance->context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    id v17 = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v8, type);
    if (!v17)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null instance->context, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v28 = "nw_protocol_instance_async";
      __int16 v29 = 2082;
      __int16 v30 = v17;
      _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null instance->context, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v4)
  {
    uint64_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_protocol_instance_async";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null block", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_1830D4000, v8, v24, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    id v17 = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v8, type);
    if (!v17)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s called with null block, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v28 = "nw_protocol_instance_async";
      __int16 v29 = 2082;
      __int16 v30 = v17;
      _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v17);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  nw_queue_context_async(v5, v4);
LABEL_5:
}

void sub_18370F114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t value = xpc_uint64_get_value(v4);
  (*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 80) + 208))();
  BOOL node = nw_hash_table_get_node(*(void *)(*(void *)(a1 + 32) + 296), value, 8);
  if (node)
  {
    uint64_t v7 = node;
    nw_protocol_path_state_dispose(*(void **)(a1 + 32), node + 32);
    nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 32) + 296), v7);
  }

  return 1;
}

void sub_18370F1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_2(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = nw_interface_option_details_copy_interface(v3);
  id v5 = nw_interface_option_details_copy_remote_endpoint(v3);
  uint64_t v6 = a1[4];
  if ((!v6 || (*(char *)(v6 + 405) & 0x80000000) == 0) && gLogDatapath)
  {
    uint64_t v10 = __nwlog_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = a1[4];
      uint64_t v12 = "";
      os_log_type_t v13 = (const char *)(v11 + 407);
      uint64_t v14 = a1[6];
      BOOL v15 = v11 == 0;
      uint64_t v16 = *(void *)(v14 + 16);
      if (v15) {
        os_log_type_t v13 = "";
      }
      uint64_t v17 = *(void *)(v14 + 120);
      if (!v15) {
        uint64_t v12 = " ";
      }
      int v18 = 136447746;
      BOOL v19 = "nw_protocol_instance_update_available_paths_block_invoke_2";
      __int16 v20 = 2082;
      BOOL v21 = v13;
      __int16 v22 = 2080;
      os_log_type_t v23 = v12;
      __int16 v24 = 2112;
      id v25 = v4;
      __int16 v26 = 2112;
      uint64_t v27 = v16;
      __int16 v28 = 2112;
      id v29 = v5;
      __int16 v30 = 2112;
      uint64_t v31 = v17;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sComparing interface %@ with %@ and endpoint %@ with %@", (uint8_t *)&v18, 0x48u);
    }
  }
  if (nw_interface_shallow_compare(v4, *(void **)(a1[6] + 16))
    && (!v5 || nw_endpoint_is_equal(v5, *(void **)(a1[6] + 120), 0)))
  {
    uint64_t v7 = nw_interface_option_details_copy_local_cid(v3);
    if (nw_dispatch_data_is_equal(v7, *(NSObject **)(a1[6] + 64)))
    {
      uint64_t v8 = nw_interface_option_details_copy_remote_cid(v3);
      BOOL is_equal = nw_dispatch_data_is_equal(v8, *(NSObject **)(a1[6] + 72));

      if (is_equal) {
        *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
      }
    }
    else
    {
    }
  }
}

void sub_18370F3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_276(uint64_t a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  if (nw_interface_shallow_compare(*(void **)(a1 + 32), *(void **)(extra + 16))
    && nw_endpoint_is_equal(*(void **)(a1 + 40), *(void **)(extra + 120), 0))
  {
    id v5 = nw_interface_option_details_copy_local_cid(*(void **)(a1 + 48));
    if (nw_dispatch_data_is_equal(v5, *(NSObject **)(extra + 64)))
    {
      uint64_t v6 = nw_interface_option_details_copy_remote_cid(*(void **)(a1 + 48));
      BOOL is_equal = nw_dispatch_data_is_equal(v6, *(NSObject **)(extra + 72));

      if (is_equal)
      {
        *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = extra;
        *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = nw_hash_node_get_object(a2);
        nw_interface_option_details_get_nexus_agent(*(void **)(a1 + 48), (_OWORD *)extra);
        return 0;
      }
    }
    else
    {
    }
  }
  return 1;
}

BOOL ___ZL47nw_protocol_implementation_lookup_path_by_frameP31NWConcrete_nw_protocol_instancePU22objcproto11OS_nw_frame8NSObjectPm_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(nw_hash_node_get_extra(a2) + 56);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v4 == v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  }
  return v4 != v5;
}

void nw_protocol_instance_set_flow_is_datagram(void *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1;
  uint64_t v8 = (char *)v7;
  if (!v7)
  {
    BOOL v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_set_flow_is_datagram";
    __int16 v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v22, type, &v35)) {
      goto LABEL_64;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_set_flow_is_datagram";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      BOOL v29 = os_log_type_enabled(v23, type[0]);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_set_flow_is_datagram";
          __int16 v39 = 2082;
          BOOL v40 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_64:
        if (!v22) {
          goto LABEL_18;
        }
LABEL_65:
        free(v22);
        goto LABEL_18;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_set_flow_is_datagram";
        _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v33 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_set_flow_is_datagram";
        _os_log_impl(&dword_1830D4000, v23, v33, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_63:

    goto LABEL_64;
  }
  if (a2 != -1)
  {
    uint64_t node = nw_hash_table_get_node(v7[29], a2, 8);
    if (node)
    {
      if (a3) {
        __int16 v10 = 2048;
      }
      else {
        __int16 v10 = 0;
      }
      *(_WORD *)(node + 84) = *(_WORD *)(node + 84) & 0xF7FF | v10;
      *(_DWORD *)(node + 76) = a4;
      if (a3)
      {
        if (*(_DWORD *)(*((void *)v8 + 1) + 64) == 3)
        {
          uint64_t v11 = *(void **)(node + 16);
          if (v11)
          {
            uint64_t v12 = v11[3];
            if (v12)
            {
              os_log_type_t v13 = *(void (**)(void))(v12 + 160);
              if (v13)
              {
                uint64_t v14 = (void *)v11[5];
                if (v14 == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v17 = v11[11];
                  if (v17) {
                    v11[11] = v17 + 1;
                  }
                  char v15 = -1;
                }
                else
                {
                  char v15 = 0;
                }
                *(void *)buf = v11;
                buf[8] = v15;
                int v18 = (void *)*((void *)v8 - 7);
                if (v18 == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v20 = *((void *)v8 - 1);
                  if (v20) {
                    *((void *)v8 - 1) = v20 + 1;
                  }
                  char v19 = -1;
                }
                else
                {
                  char v19 = 0;
                }
                *(void *)os_log_type_t type = v8 - 96;
                char v37 = v19;
                v13();
                if (v18 == &nw_protocol_ref_counted_handle) {
                  nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                }
                if (v14 == &nw_protocol_ref_counted_handle) {
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                }
              }
            }
          }
        }
      }
    }
    else if ((v8[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = (id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_set_flow_is_datagram";
        __int16 v39 = 2082;
        BOOL v40 = v8 + 407;
        __int16 v41 = 2080;
        __int16 v42 = " ";
        __int16 v43 = 2048;
        uint64_t v44 = a2;
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot set datagram, flow %llx does not exist", buf, 0x2Au);
      }
    }
    goto LABEL_18;
  }
  id v25 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_instance_set_flow_is_datagram";
  __int16 v22 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (!__nwlog_fault(v22, type, &v35)) {
    goto LABEL_64;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v26 = type[0];
    if (os_log_type_enabled(v23, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_set_flow_is_datagram";
      _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s called with null (flow != NW_PROTOCOL_ALL_FLOWS)", buf, 0xCu);
    }
    goto LABEL_63;
  }
  if (!v35)
  {
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v34 = type[0];
    if (os_log_type_enabled(v23, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_set_flow_is_datagram";
      _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s called with null (flow != NW_PROTOCOL_ALL_FLOWS), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_63;
  }
  __int16 v30 = (char *)__nw_create_backtrace_string();
  os_log_type_t v23 = __nwlog_obj();
  os_log_type_t v31 = type[0];
  BOOL v32 = os_log_type_enabled(v23, type[0]);
  if (!v30)
  {
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_set_flow_is_datagram";
      _os_log_impl(&dword_1830D4000, v23, v31, "%{public}s called with null (flow != NW_PROTOCOL_ALL_FLOWS), no backtrace", buf, 0xCu);
    }
    goto LABEL_63;
  }
  if (v32)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_set_flow_is_datagram";
    __int16 v39 = 2082;
    BOOL v40 = v30;
    _os_log_impl(&dword_1830D4000, v23, v31, "%{public}s called with null (flow != NW_PROTOCOL_ALL_FLOWS), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v30);
  if (v22) {
    goto LABEL_65;
  }
LABEL_18:
}

uint64_t __nw_protocol_instance_update_outbound_data_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t extra = nw_hash_node_get_extra(a2);
  if (gLogDatapath)
  {
    os_log_type_t v9 = __nwlog_obj();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *(_DWORD *)(extra + 40);
      int v11 = *(_DWORD *)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 40);
      int v13 = 136446978;
      uint64_t v14 = "nw_protocol_instance_update_outbound_data_limit_block_invoke";
      __int16 v15 = 1024;
      int v16 = v10;
      __int16 v17 = 1024;
      int v18 = v11;
      __int16 v19 = 2048;
      uint64_t v20 = v12;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s Increase current outbound limit %u to %u bytes for flow %llx", (uint8_t *)&v13, 0x22u);
    }
  }
  *(_DWORD *)(extra + 40) = *(_DWORD *)(a1 + 48);
  __int16 v6 = *(_WORD *)(extra + 52);
  if ((v6 & 0x80) != 0 && (*(_WORD *)(extra + 52) & 0x100) == 0)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      if (object)
      {
        uint64_t v7 = *(void *)(object + 24);
        if (v7)
        {
          if (*(void *)(a1 + 32) && *(void *)(v7 + 72))
          {
            *(_WORD *)(extra + 52) = v6 | 0x100;
            *(unsigned char *)(*(void *)(a1 + 32) + 405) |= 1u;
          }
        }
      }
    }
  }
  return 1;
}

void nw_protocol_instance_enumerate_flow_keys(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 30);
    if (v5 && *(_DWORD *)(v5 + 40))
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = __nw_protocol_instance_enumerate_flow_keys_block_invoke;
      v15[3] = &unk_1E523BD88;
      int v16 = v3;
      id v17 = v4;
      nw_hash_table_apply((char *)v5, (uint64_t)v15);
    }
    else if ((v3[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v21 = "nw_protocol_instance_enumerate_flow_keys";
        __int16 v22 = 2082;
        os_log_type_t v23 = v3 + 407;
        __int16 v24 = 2080;
        id v25 = " ";
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFlow mapping table is empty", buf, 0x20u);
      }
    }
    goto LABEL_9;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v21 = "nw_protocol_instance_enumerate_flow_keys";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v8, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_protocol_instance_enumerate_flow_keys";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v21 = "nw_protocol_instance_enumerate_flow_keys";
          __int16 v22 = 2082;
          os_log_type_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_protocol_instance_enumerate_flow_keys";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_protocol_instance_enumerate_flow_keys";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_26:
  if (v8) {
    free(v8);
  }
LABEL_9:
}

uint64_t __nw_protocol_instance_enumerate_flow_keys_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5 && *(char *)(v5 + 405) < 0) {
      return 1;
    }
    __int16 v6 = __nwlog_obj();
    uint64_t v7 = *(void *)(a1 + 32);
    BOOL v8 = v7 == 0;
    if (v7) {
      os_log_type_t v9 = (const char *)(v7 + 407);
    }
    else {
      os_log_type_t v9 = "";
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v36 = "nw_protocol_instance_enumerate_flow_keys_block_invoke";
    if (v8) {
      os_log_type_t v10 = "";
    }
    else {
      os_log_type_t v10 = " ";
    }
    __int16 v37 = 2082;
    __int16 v38 = v9;
    __int16 v39 = 2080;
    BOOL v40 = v10;
    int v11 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault((const char *)v11, &type, &v33))
    {
LABEL_50:
      if (v11) {
        free(v11);
      }
      return 1;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        BOOL v15 = v14 == 0;
        if (v14) {
          int v16 = (const char *)(v14 + 407);
        }
        else {
          int v16 = "";
        }
        *(_DWORD *)buf = 136446722;
        if (v15) {
          id v17 = "";
        }
        else {
          id v17 = " ";
        }
        uint64_t v36 = "nw_protocol_instance_enumerate_flow_keys_block_invoke";
        __int16 v37 = 2082;
        __int16 v38 = v16;
        __int16 v39 = 2080;
        BOOL v40 = v17;
        char v18 = "%{public}s %{public}s%sFound null node when enumerating custom flow mapping table";
LABEL_48:
        _os_log_impl(&dword_1830D4000, v12, v13, v18, buf, 0x20u);
      }
    }
    else
    {
      if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v20 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v20)
          {
            uint64_t v21 = *(void *)(a1 + 32);
            BOOL v22 = v21 == 0;
            if (v21) {
              os_log_type_t v23 = (const char *)(v21 + 407);
            }
            else {
              os_log_type_t v23 = "";
            }
            if (v22) {
              __int16 v24 = "";
            }
            else {
              __int16 v24 = " ";
            }
            *(_DWORD *)buf = 136446978;
            uint64_t v36 = "nw_protocol_instance_enumerate_flow_keys_block_invoke";
            __int16 v37 = 2082;
            __int16 v38 = v23;
            __int16 v39 = 2080;
            BOOL v40 = v24;
            __int16 v41 = 2082;
            __int16 v42 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s %{public}s%sFound null node when enumerating custom flow mapping table, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (!v20) {
          goto LABEL_49;
        }
        uint64_t v29 = *(void *)(a1 + 32);
        __int16 v30 = (const char *)(v29 + 407);
        BOOL v31 = v29 == 0;
        BOOL v32 = "";
        if (v31) {
          __int16 v30 = "";
        }
        *(_DWORD *)buf = 136446722;
        if (!v31) {
          BOOL v32 = " ";
        }
        uint64_t v36 = "nw_protocol_instance_enumerate_flow_keys_block_invoke";
        __int16 v37 = 2082;
        __int16 v38 = v30;
        __int16 v39 = 2080;
        BOOL v40 = v32;
        char v18 = "%{public}s %{public}s%sFound null node when enumerating custom flow mapping table, no backtrace";
        goto LABEL_48;
      }
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        uint64_t v25 = *(void *)(a1 + 32);
        BOOL v26 = v25 == 0;
        if (v25) {
          uint64_t v27 = (const char *)(v25 + 407);
        }
        else {
          uint64_t v27 = "";
        }
        *(_DWORD *)buf = 136446722;
        if (v26) {
          os_log_type_t v28 = "";
        }
        else {
          os_log_type_t v28 = " ";
        }
        uint64_t v36 = "nw_protocol_instance_enumerate_flow_keys_block_invoke";
        __int16 v37 = 2082;
        __int16 v38 = v27;
        __int16 v39 = 2080;
        BOOL v40 = v28;
        char v18 = "%{public}s %{public}s%sFound null node when enumerating custom flow mapping table, backtrace limit exceeded";
        goto LABEL_48;
      }
    }
LABEL_49:

    goto LABEL_50;
  }
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void nw_protocol_instance_set_link_flow_controlled(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    char v5 = v3[403];
    if (a2) {
      int v6 = 4;
    }
    else {
      int v6 = 0;
    }
    v3[403] = v5 & 0xFB | v6;
    if ((a2 & 1) == 0 && (v5 & 8) != 0)
    {
      nw_protocol_implementation_output_available((nw_protocol *)(v3 - 96), (nw_protocol *)(v3 - 96));
      char v7 = v4[403];
      v4[403] = v7 & 0xF7;
      int v6 = v7 & 4;
    }
    BOOL v8 = *(void (**)(unsigned char *, void, BOOL))(*(void *)(*((void *)v4 + 1) + 80) + 136);
    if (v8) {
      v8(v4, 0, v6 != 0);
    }
    goto LABEL_10;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_protocol_instance_set_link_flow_controlled";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_protocol_instance_set_link_flow_controlled";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v20 = "nw_protocol_instance_set_link_flow_controlled";
          __int16 v21 = 2082;
          BOOL v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_protocol_instance_set_link_flow_controlled";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_protocol_instance_set_link_flow_controlled";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_27:
  if (v10) {
    free(v10);
  }
LABEL_10:
}

void sub_183710794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_implementation_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle) {
      p_output_handler = 0;
    }
    char v5 = p_output_handler;
    int v6 = v5;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      parent_definition = v5->parent_definition;
      if (parent_definition)
      {
        if (parent_definition->extended_state)
        {
          BOOL v8 = nw_protocol_service_outbound_requests(v5);
          unint64_t v125 = 0;
          uint64_t v9 = nw_protocol_implementation_lookup_path_by_protocol(v6, a2, &v125);
          if (v9)
          {
            char v10 = *(unsigned char *)(v9 + 137);
            if ((v10 & 1) == 0) {
              goto LABEL_37;
            }
            uint64_t v11 = v9 + 104;
            if (!*(void *)(v9 + 104)) {
              goto LABEL_37;
            }
            if ((SBYTE5(v6->flow_in_connected) & 0x80000000) == 0 && gLogDatapath)
            {
              uint64_t v86 = v9;
              os_log_type_t v87 = __nwlog_obj();
              if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446978;
                os_log_type_t v133 = "nw_protocol_implementation_output_available";
                __int16 v134 = 2082;
                BOOL v135 = (char *)&v6->flow_in_connected + 7;
                __int16 v136 = 2080;
                BOOL v137 = " ";
                __int16 v138 = 2048;
                unint64_t v139 = v125;
                _os_log_impl(&dword_1830D4000, v87, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing pending outbound frames for %lx", buf, 0x2Au);
              }

              uint64_t v9 = v86;
              char v10 = *(unsigned char *)(v86 + 137);
            }
            *(unsigned char *)(v9 + 137) = v10 & 0xFE;
            os_log_type_t v12 = *(const char **)(v9 + 32);
            if (v12)
            {
              os_log_type_t v13 = (void *)*((void *)v12 + 5);
              if (v13 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v18 = *((void *)v12 + 11);
                if (v18) {
                  *((void *)v12 + 11) = v18 + 1;
                }
                char v14 = -1;
              }
              else
              {
                char v14 = 0;
              }
              *(void *)os_log_type_t type = v12;
              char v131 = v14;
              uint64_t v19 = *((void *)v12 + 3);
              if (v19)
              {
                BOOL v20 = *(void (**)(const char *, uint64_t))(v19 + 96);
                if (v20)
                {
                  v20(v12, v11);
                  goto LABEL_28;
                }
              }
              char v61 = __nwlog_obj();
              uint64_t v62 = (const char *)*((void *)v12 + 2);
              *(_DWORD *)buf = 136446722;
              os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
              if (!v62) {
                uint64_t v62 = "invalid";
              }
              __int16 v134 = 2082;
              BOOL v135 = (void *)v62;
              __int16 v136 = 2048;
              uint64_t v63 = v12;
              BOOL v137 = v12;
              uint64_t v64 = (char *)_os_log_send_and_compose_impl();

              v128[0] = OS_LOG_TYPE_ERROR;
              os_log_type_t v127 = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v64, v128, &v127))
              {
                if (v128[0] == OS_LOG_TYPE_FAULT)
                {
                  uint64_t v65 = __nwlog_obj();
                  os_log_type_t v66 = v128[0];
                  if (os_log_type_enabled(v65, v128[0]))
                  {
                    uint64_t v67 = (const char *)*((void *)v63 + 2);
                    if (!v67) {
                      uint64_t v67 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                    __int16 v134 = 2082;
                    BOOL v135 = (void *)v67;
                    __int16 v136 = 2048;
                    BOOL v137 = v63;
                    _os_log_impl(&dword_1830D4000, v65, v66, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback", buf, 0x20u);
                  }
                }
                else if (v127)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  uint64_t v65 = __nwlog_obj();
                  os_log_type_t v89 = v128[0];
                  BOOL v90 = os_log_type_enabled(v65, v128[0]);
                  if (backtrace_string)
                  {
                    if (v90)
                    {
                      char v91 = (const char *)*((void *)v63 + 2);
                      if (!v91) {
                        char v91 = "invalid";
                      }
                      *(_DWORD *)buf = 136446978;
                      os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                      __int16 v134 = 2082;
                      BOOL v135 = (void *)v91;
                      __int16 v136 = 2048;
                      BOOL v137 = v63;
                      __int16 v138 = 2082;
                      unint64_t v139 = (unint64_t)backtrace_string;
                      _os_log_impl(&dword_1830D4000, v65, v89, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }

                    free(backtrace_string);
                    goto LABEL_238;
                  }
                  if (v90)
                  {
                    uint64_t v117 = (const char *)*((void *)v63 + 2);
                    if (!v117) {
                      uint64_t v117 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                    __int16 v134 = 2082;
                    BOOL v135 = (void *)v117;
                    __int16 v136 = 2048;
                    BOOL v137 = v63;
                    _os_log_impl(&dword_1830D4000, v65, v89, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace", buf, 0x20u);
                  }
                }
                else
                {
                  uint64_t v65 = __nwlog_obj();
                  os_log_type_t v110 = v128[0];
                  if (os_log_type_enabled(v65, v128[0]))
                  {
                    __int16 v111 = (const char *)*((void *)v63 + 2);
                    if (!v111) {
                      __int16 v111 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                    __int16 v134 = 2082;
                    BOOL v135 = (void *)v111;
                    __int16 v136 = 2048;
                    BOOL v137 = v63;
                    _os_log_impl(&dword_1830D4000, v65, v110, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded", buf, 0x20u);
                  }
                }
              }
LABEL_238:
              if (v64) {
                free(v64);
              }
LABEL_28:
              if (v13 == &nw_protocol_ref_counted_handle) {
                goto LABEL_36;
              }
              goto LABEL_37;
            }
            int v82 = __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
            char v83 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v128[0] = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v83, type, v128)) {
              goto LABEL_271;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              uint64_t v84 = __nwlog_obj();
              os_log_type_t v85 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_1830D4000, v84, v85, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else if (v128[0])
            {
              uint64_t v105 = (char *)__nw_create_backtrace_string();
              uint64_t v84 = __nwlog_obj();
              os_log_type_t v106 = type[0];
              BOOL v107 = os_log_type_enabled(v84, type[0]);
              if (v105)
              {
                if (v107)
                {
                  *(_DWORD *)buf = 136446466;
                  os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                  __int16 v134 = 2082;
                  BOOL v135 = v105;
                  _os_log_impl(&dword_1830D4000, v84, v106, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v105);
LABEL_271:
                if (!v83) {
                  goto LABEL_37;
                }
LABEL_272:
                free(v83);
                goto LABEL_37;
              }
              if (v107)
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_1830D4000, v84, v106, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              uint64_t v84 = __nwlog_obj();
              os_log_type_t v120 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_1830D4000, v84, v120, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }
LABEL_270:

            goto LABEL_271;
          }
          char v15 = BYTE5(v6->flow_in_connected);
          if ((v15 & 2) == 0 || !v6->pending_inbound_frames.tqh_last) {
            goto LABEL_37;
          }
          if ((v6->flow_in_connected & 0x800000000000) == 0 && gLogDatapath)
          {
            uint64_t v100 = __nwlog_obj();
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446722;
              os_log_type_t v133 = "nw_protocol_implementation_output_available";
              __int16 v134 = 2082;
              BOOL v135 = (char *)&v6->flow_in_connected + 7;
              __int16 v136 = 2080;
              BOOL v137 = " ";
              _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing pending outbound frames", buf, 0x20u);
            }

            char v15 = BYTE5(v6->flow_in_connected);
          }
          BYTE5(v6->flow_in_connected) = v15 & 0xFD;
          uint64_t v16 = *(void *)&v6[-1].log_str[25];
          if (!v16)
          {
            uint64_t v98 = __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
            char v83 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v128[0] = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v83, type, v128)) {
              goto LABEL_271;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              uint64_t v84 = __nwlog_obj();
              os_log_type_t v99 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_1830D4000, v84, v99, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else if (v128[0])
            {
              uint64_t v112 = (char *)__nw_create_backtrace_string();
              uint64_t v84 = __nwlog_obj();
              os_log_type_t v113 = type[0];
              BOOL v114 = os_log_type_enabled(v84, type[0]);
              if (v112)
              {
                if (v114)
                {
                  *(_DWORD *)buf = 136446466;
                  os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                  __int16 v134 = 2082;
                  BOOL v135 = v112;
                  _os_log_impl(&dword_1830D4000, v84, v113, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v112);
                if (!v83) {
                  goto LABEL_37;
                }
                goto LABEL_272;
              }
              if (v114)
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_1830D4000, v84, v113, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              uint64_t v84 = __nwlog_obj();
              os_log_type_t v122 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_1830D4000, v84, v122, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }
            goto LABEL_270;
          }
          if (*(_UNKNOWN **)(v16 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v21 = *(void *)(v16 + 88);
            if (v21) {
              *(void *)(v16 + 88) = v21 + 1;
            }
            char v17 = -1;
          }
          else
          {
            char v17 = 0;
          }
          *(void *)os_log_type_t type = v16;
          char v131 = v17;
          uint64_t v22 = *(void *)(v16 + 24);
          if (v22)
          {
            uint64_t v23 = *(void (**)(uint64_t, nw_frame ***))(v22 + 96);
            if (v23)
            {
              v23(v16, &v6->pending_inbound_frames.tqh_last);
              if (v131) {
LABEL_36:
              }
                nw::release_if_needed<nw_protocol *>((uint64_t *)type);
LABEL_37:
              if (!v8)
              {
LABEL_58:

                return;
              }
              if (v6->parent_definition->variant == 3)
              {
                tqh_last = (char *)v6->pending_outbound_frames.tqh_last;
                v123[0] = MEMORY[0x1E4F143A8];
                v123[1] = 3221225472;
                v123[2] = ___ZL43nw_protocol_implementation_output_availableP11nw_protocolS0__block_invoke;
                v123[3] = &unk_1E524AF58;
                os_log_type_t v124 = v6;
                nw_hash_table_apply(tqh_last, (uint64_t)v123);

                goto LABEL_58;
              }
              uint64_t v25 = *(void *)&v6[-1].log_str[41];
              if (v25)
              {
                if (*(_UNKNOWN **)(v25 + 40) == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v27 = *(void *)(v25 + 88);
                  if (v27) {
                    *(void *)(v25 + 88) = v27 + 1;
                  }
                  *(void *)os_log_type_t type = v25;
                  char v26 = v131 | 1;
                }
                else
                {
                  *(void *)os_log_type_t type = *(void *)&v6[-1].log_str[41];
                  char v26 = v131 & 0xFE;
                }
                char v131 = v26;
                if (*(_UNKNOWN **)&v6[-1].log_str[33] == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v29 = *(void *)&v6[-1].log_str[81];
                  if (v29) {
                    *(void *)&v6[-1].log_str[81] = v29 + 1;
                  }
                  *(void *)uint64_t v128 = (char *)v6 - 96;
                  char v28 = v129 | 1;
                }
                else
                {
                  *(void *)uint64_t v128 = (char *)v6 - 96;
                  char v28 = v129 & 0xFE;
                }
                char v129 = v28;
                uint64_t v30 = *(void *)(v25 + 24);
                if (v30)
                {
                  BOOL v31 = *(void (**)(uint64_t, unsigned __int16 *))(v30 + 72);
                  if (v31)
                  {
                    v31(v25, &v6[-1].paths_log_id_num);
                    char v28 = v129;
LABEL_54:
                    if (v28) {
                      nw::release_if_needed<nw_protocol *>((uint64_t *)v128);
                    }
                    if (v131) {
                      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                    }
                    goto LABEL_58;
                  }
                }
                uint64_t v55 = __nwlog_obj();
                uint64_t v56 = *(const char **)(v25 + 16);
                *(_DWORD *)buf = 136446722;
                os_log_type_t v133 = "__nw_protocol_output_available";
                if (!v56) {
                  uint64_t v56 = "invalid";
                }
                __int16 v134 = 2082;
                BOOL v135 = (void *)v56;
                __int16 v136 = 2048;
                BOOL v137 = (const char *)v25;
                BOOL v57 = (char *)_os_log_send_and_compose_impl();

                os_log_type_t v127 = OS_LOG_TYPE_ERROR;
                char v126 = 0;
                if (__nwlog_fault(v57, &v127, &v126))
                {
                  if (v127 == OS_LOG_TYPE_FAULT)
                  {
                    uint64_t v58 = __nwlog_obj();
                    os_log_type_t v59 = v127;
                    if (os_log_type_enabled(v58, v127))
                    {
                      uint64_t v60 = *(const char **)(v25 + 16);
                      if (!v60) {
                        uint64_t v60 = "invalid";
                      }
                      *(_DWORD *)buf = 136446722;
                      os_log_type_t v133 = "__nw_protocol_output_available";
                      __int16 v134 = 2082;
                      BOOL v135 = (void *)v60;
                      __int16 v136 = 2048;
                      BOOL v137 = (const char *)v25;
                      _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s protocol %{public}s (%p) has invalid output_available callback", buf, 0x20u);
                    }
                  }
                  else if (v126)
                  {
                    char v71 = (char *)__nw_create_backtrace_string();
                    uint64_t v58 = __nwlog_obj();
                    os_log_type_t v72 = v127;
                    BOOL v73 = os_log_type_enabled(v58, v127);
                    if (v71)
                    {
                      if (v73)
                      {
                        uint64_t v74 = *(const char **)(v25 + 16);
                        if (!v74) {
                          uint64_t v74 = "invalid";
                        }
                        *(_DWORD *)buf = 136446978;
                        os_log_type_t v133 = "__nw_protocol_output_available";
                        __int16 v134 = 2082;
                        BOOL v135 = (void *)v74;
                        __int16 v136 = 2048;
                        BOOL v137 = (const char *)v25;
                        __int16 v138 = 2082;
                        unint64_t v139 = (unint64_t)v71;
                        _os_log_impl(&dword_1830D4000, v58, v72, "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
                      }

                      free(v71);
                      goto LABEL_228;
                    }
                    if (v73)
                    {
                      __int16 v115 = *(const char **)(v25 + 16);
                      if (!v115) {
                        __int16 v115 = "invalid";
                      }
                      *(_DWORD *)buf = 136446722;
                      os_log_type_t v133 = "__nw_protocol_output_available";
                      __int16 v134 = 2082;
                      BOOL v135 = (void *)v115;
                      __int16 v136 = 2048;
                      BOOL v137 = (const char *)v25;
                      _os_log_impl(&dword_1830D4000, v58, v72, "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace", buf, 0x20u);
                    }
                  }
                  else
                  {
                    uint64_t v58 = __nwlog_obj();
                    os_log_type_t v108 = v127;
                    if (os_log_type_enabled(v58, v127))
                    {
                      __int16 v109 = *(const char **)(v25 + 16);
                      if (!v109) {
                        __int16 v109 = "invalid";
                      }
                      *(_DWORD *)buf = 136446722;
                      os_log_type_t v133 = "__nw_protocol_output_available";
                      __int16 v134 = 2082;
                      BOOL v135 = (void *)v109;
                      __int16 v136 = 2048;
                      BOOL v137 = (const char *)v25;
                      _os_log_impl(&dword_1830D4000, v58, v108, "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded", buf, 0x20u);
                    }
                  }
                }
LABEL_228:
                if (v57) {
                  free(v57);
                }
                goto LABEL_54;
              }
              uint64_t v68 = __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              os_log_type_t v133 = "__nw_protocol_output_available";
              __int16 v37 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              v128[0] = OS_LOG_TYPE_DEFAULT;
              if (!__nwlog_fault(v37, type, v128)) {
                goto LABEL_251;
              }
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                uint64_t v69 = __nwlog_obj();
                os_log_type_t v70 = type[0];
                if (os_log_type_enabled(v69, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  os_log_type_t v133 = "__nw_protocol_output_available";
                  _os_log_impl(&dword_1830D4000, v69, v70, "%{public}s called with null protocol", buf, 0xCu);
                }
LABEL_250:

                goto LABEL_251;
              }
              if (v128[0] == OS_LOG_TYPE_DEFAULT)
              {
                uint64_t v69 = __nwlog_obj();
                os_log_type_t v116 = type[0];
                if (os_log_type_enabled(v69, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  os_log_type_t v133 = "__nw_protocol_output_available";
                  _os_log_impl(&dword_1830D4000, v69, v116, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_250;
              }
              __int16 v50 = (char *)__nw_create_backtrace_string();
              uint64_t v69 = __nwlog_obj();
              os_log_type_t v96 = type[0];
              BOOL v97 = os_log_type_enabled(v69, type[0]);
              if (!v50)
              {
                if (v97)
                {
                  *(_DWORD *)buf = 136446210;
                  os_log_type_t v133 = "__nw_protocol_output_available";
                  _os_log_impl(&dword_1830D4000, v69, v96, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                }
                goto LABEL_250;
              }
              if (v97)
              {
                *(_DWORD *)buf = 136446466;
                os_log_type_t v133 = "__nw_protocol_output_available";
                __int16 v134 = 2082;
                BOOL v135 = v50;
                _os_log_impl(&dword_1830D4000, v69, v96, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
              }

LABEL_100:
              free(v50);
              if (!v37) {
                goto LABEL_58;
              }
              goto LABEL_252;
            }
          }
          BOOL v75 = __nwlog_obj();
          __int16 v76 = *(const char **)(v16 + 16);
          *(_DWORD *)buf = 136446722;
          os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
          if (!v76) {
            __int16 v76 = "invalid";
          }
          __int16 v134 = 2082;
          BOOL v135 = (void *)v76;
          __int16 v136 = 2048;
          uint64_t v77 = v16;
          BOOL v137 = (const char *)v16;
          uint64_t v78 = (char *)_os_log_send_and_compose_impl();

          v128[0] = OS_LOG_TYPE_ERROR;
          os_log_type_t v127 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v78, v128, &v127))
          {
            if (v128[0] == OS_LOG_TYPE_FAULT)
            {
              uint64_t v79 = __nwlog_obj();
              os_log_type_t v80 = v128[0];
              if (os_log_type_enabled(v79, v128[0]))
              {
                uint64_t v81 = *(const char **)(v77 + 16);
                if (!v81) {
                  uint64_t v81 = "invalid";
                }
                *(_DWORD *)buf = 136446722;
                os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                __int16 v134 = 2082;
                BOOL v135 = (void *)v81;
                __int16 v136 = 2048;
                BOOL v137 = (const char *)v77;
                _os_log_impl(&dword_1830D4000, v79, v80, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback", buf, 0x20u);
              }
LABEL_257:

              goto LABEL_258;
            }
            if (v127 == OS_LOG_TYPE_DEFAULT)
            {
              uint64_t v79 = __nwlog_obj();
              os_log_type_t v118 = v128[0];
              if (os_log_type_enabled(v79, v128[0]))
              {
                BOOL v119 = *(const char **)(v77 + 16);
                if (!v119) {
                  BOOL v119 = "invalid";
                }
                *(_DWORD *)buf = 136446722;
                os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                __int16 v134 = 2082;
                BOOL v135 = (void *)v119;
                __int16 v136 = 2048;
                BOOL v137 = (const char *)v77;
                _os_log_impl(&dword_1830D4000, v79, v118, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded", buf, 0x20u);
              }
              goto LABEL_257;
            }
            uint64_t v101 = (char *)__nw_create_backtrace_string();
            uint64_t v79 = __nwlog_obj();
            os_log_type_t v102 = v128[0];
            BOOL v103 = os_log_type_enabled(v79, v128[0]);
            if (!v101)
            {
              if (v103)
              {
                BOOL v121 = *(const char **)(v77 + 16);
                if (!v121) {
                  BOOL v121 = "invalid";
                }
                *(_DWORD *)buf = 136446722;
                os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
                __int16 v134 = 2082;
                BOOL v135 = (void *)v121;
                __int16 v136 = 2048;
                BOOL v137 = (const char *)v77;
                _os_log_impl(&dword_1830D4000, v79, v102, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace", buf, 0x20u);
              }
              goto LABEL_257;
            }
            if (v103)
            {
              uint64_t v104 = *(const char **)(v77 + 16);
              if (!v104) {
                uint64_t v104 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              os_log_type_t v133 = "__nw_protocol_finalize_output_frames";
              __int16 v134 = 2082;
              BOOL v135 = (void *)v104;
              __int16 v136 = 2048;
              BOOL v137 = (const char *)v77;
              __int16 v138 = 2082;
              unint64_t v139 = (unint64_t)v101;
              _os_log_impl(&dword_1830D4000, v79, v102, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v101);
          }
LABEL_258:
          if (v78) {
            free(v78);
          }
          if ((v17 & 1) == 0) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }
        __int16 v42 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        os_log_type_t v133 = "nw_protocol_implementation_output_available";
        __int16 v37 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v128[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v37, type, v128)) {
          goto LABEL_251;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __int16 v38 = __nwlog_obj();
          os_log_type_t v43 = type[0];
          if (os_log_type_enabled(v38, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v133 = "nw_protocol_implementation_output_available";
            _os_log_impl(&dword_1830D4000, v38, v43, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_191;
        }
        if (v128[0] == OS_LOG_TYPE_DEFAULT)
        {
          __int16 v38 = __nwlog_obj();
          os_log_type_t v95 = type[0];
          if (os_log_type_enabled(v38, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v133 = "nw_protocol_implementation_output_available";
            _os_log_impl(&dword_1830D4000, v38, v95, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_191;
        }
        __int16 v50 = (char *)__nw_create_backtrace_string();
        __int16 v38 = __nwlog_obj();
        os_log_type_t v53 = type[0];
        BOOL v54 = os_log_type_enabled(v38, type[0]);
        if (!v50)
        {
          if (v54)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v133 = "nw_protocol_implementation_output_available";
            _os_log_impl(&dword_1830D4000, v38, v53, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_191;
        }
        if (v54)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v133 = "nw_protocol_implementation_output_available";
          __int16 v134 = 2082;
          BOOL v135 = v50;
          _os_log_impl(&dword_1830D4000, v38, v53, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        BOOL v40 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        os_log_type_t v133 = "nw_protocol_implementation_output_available";
        __int16 v37 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v128[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v37, type, v128)) {
          goto LABEL_251;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __int16 v38 = __nwlog_obj();
          os_log_type_t v41 = type[0];
          if (os_log_type_enabled(v38, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v133 = "nw_protocol_implementation_output_available";
            _os_log_impl(&dword_1830D4000, v38, v41, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_191;
        }
        if (v128[0] == OS_LOG_TYPE_DEFAULT)
        {
          __int16 v38 = __nwlog_obj();
          os_log_type_t v94 = type[0];
          if (os_log_type_enabled(v38, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v133 = "nw_protocol_implementation_output_available";
            _os_log_impl(&dword_1830D4000, v38, v94, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_191;
        }
        __int16 v50 = (char *)__nw_create_backtrace_string();
        __int16 v38 = __nwlog_obj();
        os_log_type_t v51 = type[0];
        BOOL v52 = os_log_type_enabled(v38, type[0]);
        if (!v50)
        {
          if (v52)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v133 = "nw_protocol_implementation_output_available";
            _os_log_impl(&dword_1830D4000, v38, v51, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_191;
        }
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v133 = "nw_protocol_implementation_output_available";
          __int16 v134 = 2082;
          BOOL v135 = v50;
          _os_log_impl(&dword_1830D4000, v38, v51, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      goto LABEL_100;
    }
    uint64_t v36 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v133 = "nw_protocol_implementation_output_available";
    __int16 v37 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v128[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v37, type, v128)) {
      goto LABEL_251;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v38 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v133 = "nw_protocol_implementation_output_available";
        _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v128[0])
    {
      __int16 v47 = (char *)__nw_create_backtrace_string();
      __int16 v38 = __nwlog_obj();
      os_log_type_t v48 = type[0];
      BOOL v49 = os_log_type_enabled(v38, type[0]);
      if (v47)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v133 = "nw_protocol_implementation_output_available";
          __int16 v134 = 2082;
          BOOL v135 = v47;
          _os_log_impl(&dword_1830D4000, v38, v48, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v47);
LABEL_251:
        if (!v37) {
          goto LABEL_58;
        }
LABEL_252:
        free(v37);
        goto LABEL_58;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v133 = "nw_protocol_implementation_output_available";
        _os_log_impl(&dword_1830D4000, v38, v48, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v38 = __nwlog_obj();
      os_log_type_t v93 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v133 = "nw_protocol_implementation_output_available";
        _os_log_impl(&dword_1830D4000, v38, v93, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_191:

    goto LABEL_251;
  }
  BOOL v32 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v133 = "nw_protocol_implementation_output_available";
  char v33 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v128[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v33, type, v128))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v34 = __nwlog_obj();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v133 = "nw_protocol_implementation_output_available";
        _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v128[0])
    {
      uint64_t v44 = (char *)__nw_create_backtrace_string();
      os_log_type_t v34 = __nwlog_obj();
      os_log_type_t v45 = type[0];
      BOOL v46 = os_log_type_enabled(v34, type[0]);
      if (v44)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v133 = "nw_protocol_implementation_output_available";
          __int16 v134 = 2082;
          BOOL v135 = v44;
          _os_log_impl(&dword_1830D4000, v34, v45, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v44);
        goto LABEL_176;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v133 = "nw_protocol_implementation_output_available";
        _os_log_impl(&dword_1830D4000, v34, v45, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v34 = __nwlog_obj();
      os_log_type_t v92 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v133 = "nw_protocol_implementation_output_available";
        _os_log_impl(&dword_1830D4000, v34, v92, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_176:
  if (v33) {
    free(v33);
  }
}

void sub_183712280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24) {
    nw::release_if_needed<nw_protocol *>(&a23);
  }

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_implementation_lookup_path_by_protocol(NWConcrete_nw_protocol_instance *a1, nw_protocol *a2, unint64_t *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  char v5 = a1;
  int v6 = v5;
  if (a2)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v22 = 0;
    flow_registration = (char *)v5->flow_registration;
    if (flow_registration)
    {
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      v18[2] = ___ZL50nw_protocol_implementation_lookup_path_by_protocolP31NWConcrete_nw_protocol_instanceP11nw_protocolPm_block_invoke;
      v18[3] = &unk_1E523C998;
      v18[4] = buf;
      v18[5] = a2;
      v18[6] = a3;
      nw_hash_table_apply(flow_registration, (uint64_t)v18);
      uint64_t v8 = *(void *)(*(void *)&buf[8] + 24);
    }
    else
    {
      uint64_t v8 = 0;
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  char v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_lookup_path_by_protocol";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v11, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_lookup_path_by_protocol";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_lookup_path_by_protocol";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_lookup_path_by_protocol";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_lookup_path_by_protocol";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v11) {
    free(v11);
  }
  uint64_t v8 = 0;
LABEL_6:

  return v8;
}

uint64_t ___ZL43nw_protocol_implementation_output_availableP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t object = (void *)nw_hash_node_get_object(a2);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    uint64_t v5 = v4 - 96;
  }
  else {
    uint64_t v5 = 0;
  }
  if (object)
  {
    int v6 = object;
    char v7 = (void *)object[5];
    if (v7 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v9 = object[11];
      if (v9) {
        object[11] = v9 + 1;
      }
      char v8 = -1;
    }
    else
    {
      char v8 = 0;
    }
    *(void *)BOOL v49 = object;
    char v50 = v8;
    if (v4)
    {
      char v10 = *(void **)(v5 + 40);
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v12 = *(void *)(v5 + 88);
        if (v12) {
          *(void *)(v5 + 88) = v12 + 1;
        }
        char v11 = -1;
      }
      else
      {
        char v11 = 0;
      }
      *(void *)BOOL v46 = v5;
      char v47 = v11;
      uint64_t v13 = object[3];
      if (v13)
      {
        char v14 = *(void (**)(void *))(v13 + 72);
        if (v14)
        {
          v14(object);
LABEL_19:
          if (v10 == &nw_protocol_ref_counted_handle) {
            nw::release_if_needed<nw_protocol *>((uint64_t *)v46);
          }
LABEL_21:
          if (v7 == &nw_protocol_ref_counted_handle) {
            nw::release_if_needed<nw_protocol *>((uint64_t *)v49);
          }
          return 1;
        }
      }
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = (const char *)v6[2];
      *(_DWORD *)buf = 136446722;
      BOOL v52 = "__nw_protocol_output_available";
      if (!v17) {
        os_log_type_t v17 = "invalid";
      }
      __int16 v53 = 2082;
      BOOL v54 = (void *)v17;
      __int16 v55 = 2048;
      uint64_t v56 = v6;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      if (__nwlog_fault(v18, &type, &v45))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v19 = __nwlog_obj();
          os_log_type_t v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            uint64_t v21 = (const char *)v6[2];
            if (!v21) {
              uint64_t v21 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            BOOL v52 = "__nw_protocol_output_available";
            __int16 v53 = 2082;
            BOOL v54 = (void *)v21;
            __int16 v55 = 2048;
            uint64_t v56 = v6;
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s protocol %{public}s (%p) has invalid output_available callback", buf, 0x20u);
          }
        }
        else if (v45)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          char v19 = __nwlog_obj();
          os_log_type_t v31 = type;
          BOOL v32 = os_log_type_enabled(v19, type);
          if (backtrace_string)
          {
            if (v32)
            {
              char v33 = (const char *)v6[2];
              if (!v33) {
                char v33 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              BOOL v52 = "__nw_protocol_output_available";
              __int16 v53 = 2082;
              BOOL v54 = (void *)v33;
              __int16 v55 = 2048;
              uint64_t v56 = v6;
              __int16 v57 = 2082;
              uint64_t v58 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            goto LABEL_70;
          }
          if (v32)
          {
            __int16 v42 = (const char *)v6[2];
            if (!v42) {
              __int16 v42 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            BOOL v52 = "__nw_protocol_output_available";
            __int16 v53 = 2082;
            BOOL v54 = (void *)v42;
            __int16 v55 = 2048;
            uint64_t v56 = v6;
            _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          char v19 = __nwlog_obj();
          os_log_type_t v40 = type;
          if (os_log_type_enabled(v19, type))
          {
            os_log_type_t v41 = (const char *)v6[2];
            if (!v41) {
              os_log_type_t v41 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            BOOL v52 = "__nw_protocol_output_available";
            __int16 v53 = 2082;
            BOOL v54 = (void *)v41;
            __int16 v55 = 2048;
            uint64_t v56 = v6;
            _os_log_impl(&dword_1830D4000, v19, v40, "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded", buf, 0x20u);
          }
        }
      }
LABEL_70:
      if (v18) {
        free(v18);
      }
      goto LABEL_19;
    }
    char v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v52 = "__nw_protocol_output_available";
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();

    v46[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v27, v46, &type))
    {
      if (v46[0] == OS_LOG_TYPE_FAULT)
      {
        char v28 = __nwlog_obj();
        os_log_type_t v29 = v46[0];
        if (os_log_type_enabled(v28, v46[0]))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v52 = "__nw_protocol_output_available";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        __int16 v37 = (char *)__nw_create_backtrace_string();
        char v28 = __nwlog_obj();
        os_log_type_t v38 = v46[0];
        BOOL v39 = os_log_type_enabled(v28, v46[0]);
        if (v37)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v52 = "__nw_protocol_output_available";
            __int16 v53 = 2082;
            BOOL v54 = v37;
            _os_log_impl(&dword_1830D4000, v28, v38, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v37);
          goto LABEL_86;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v52 = "__nw_protocol_output_available";
          _os_log_impl(&dword_1830D4000, v28, v38, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v28 = __nwlog_obj();
        os_log_type_t v44 = v46[0];
        if (os_log_type_enabled(v28, v46[0]))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v52 = "__nw_protocol_output_available";
          _os_log_impl(&dword_1830D4000, v28, v44, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_86:
    if (v27) {
      free(v27);
    }
    goto LABEL_21;
  }
  uint64_t v22 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v52 = "__nw_protocol_output_available";
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();

  v49[0] = OS_LOG_TYPE_ERROR;
  v46[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v49, v46))
  {
    if (v49[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v24 = __nwlog_obj();
      os_log_type_t v25 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v52 = "__nw_protocol_output_available";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v46[0])
    {
      os_log_type_t v34 = (char *)__nw_create_backtrace_string();
      __int16 v24 = __nwlog_obj();
      os_log_type_t v35 = v49[0];
      BOOL v36 = os_log_type_enabled(v24, v49[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v52 = "__nw_protocol_output_available";
          __int16 v53 = 2082;
          BOOL v54 = v34;
          _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        goto LABEL_81;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v52 = "__nw_protocol_output_available";
        _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v24 = __nwlog_obj();
      os_log_type_t v43 = v49[0];
      if (os_log_type_enabled(v24, v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v52 = "__nw_protocol_output_available";
        _os_log_impl(&dword_1830D4000, v24, v43, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_81:
  if (v23) {
    free(v23);
  }
  return 1;
}

void sub_183712E08(_Unwind_Exception *exception_object)
{
}

uint64_t ___ZL50nw_protocol_implementation_lookup_path_by_protocolP31NWConcrete_nw_protocol_instanceP11nw_protocolPm_block_invoke(void *a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  uint64_t v5 = *(void *)(extra + 32);
  if (!v5) {
    return 1;
  }
  while (a1[5] != v5)
  {
    uint64_t v5 = *(void *)(v5 + 32);
    if (!v5) {
      return 1;
    }
  }
  *(void *)(*(void *)(a1[4] + 8) + 24) = extra;
  if (!a1[6]) {
    return 0;
  }
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t result = 0;
  *(void *)a1[6] = object;
  return result;
}

uint64_t ___ZL37nw_protocol_service_outbound_requestsP31NWConcrete_nw_protocol_instance_block_invoke(uint64_t a1, int a2, void *aBlock)
{
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v6) {
    goto LABEL_4;
  }
  if (((*((uint64_t (**)(void *, void, void))v4 + 2))(v4, *(void *)(a1 + 32), 0) & 1) == 0)
  {
    BOOL v7 = nw_array_create();
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
LABEL_4:
    char v10 = _Block_copy(v5);
    nw_array_append(v6, v10);
  }
  return 1;
}

void sub_183712F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_instance_set_preferred_addresses(void *a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5)
  {
    objc_storeStrong(v5 + 45, a2);
    objc_storeStrong(v5 + 46, a3);
    goto LABEL_3;
  }
  uint64_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_protocol_instance_set_preferred_addresses";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_protocol_instance_set_preferred_addresses";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          char v19 = "nw_protocol_instance_set_preferred_addresses";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_protocol_instance_set_preferred_addresses";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_protocol_instance_set_preferred_addresses";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

uint64_t nw_protocol_definition_get_framer_create(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1[9];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_definition_get_framer_create";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_definition_get_framer_create";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition->common_state", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_definition_get_framer_create";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition->common_state, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_definition_get_framer_create";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition->common_state, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_definition_get_framer_create";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition->common_state, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

NWConcrete_nw_protocol_definition *nw_protocol_definition_create(int a1)
{
  return nw_protocol_definition_create_named(a1, 0);
}

void nw_protocol_definition_set_is_proxy(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *((unsigned char *)v1 + 184) |= 0x80u;
    goto LABEL_3;
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_protocol_definition_set_is_proxy";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_definition_set_is_proxy";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v14 = "nw_protocol_definition_set_is_proxy";
          __int16 v15 = 2082;
          char v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_definition_set_is_proxy";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_definition_set_is_proxy";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
LABEL_3:
}

uint64_t nw_protocol_definition_get_multipath(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[184] >> 4) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_definition_get_multipath";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_definition_get_multipath";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_definition_get_multipath";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_definition_get_multipath";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_definition_get_multipath";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_protocol_definition_get_supports_discontiguous_data(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[184] >> 5) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_definition_get_supports_discontiguous_data";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_definition_get_supports_discontiguous_data";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_definition_get_supports_discontiguous_data";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_definition_get_supports_discontiguous_data";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_definition_get_supports_discontiguous_data";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_definition_set_metadata_serializer(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  os_log_type_t v6 = v5;
  if (!v5)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
          __int16 v30 = 2082;
          os_log_type_t v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_56:
        free(v8);
        goto LABEL_5;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_1830D4000, v9, v23, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!a2)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null serialize_function", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s called with null serialize_function, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v18 = (char *)__nw_create_backtrace_string();
    BOOL v9 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null serialize_function, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
      __int16 v30 = 2082;
      os_log_type_t v31 = v18;
      _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null serialize_function, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a3)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null deserialize_function", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_1830D4000, v9, v25, "%{public}s called with null deserialize_function, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v18 = (char *)__nw_create_backtrace_string();
    BOOL v9 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null deserialize_function, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_protocol_definition_set_metadata_serializer";
      __int16 v30 = 2082;
      os_log_type_t v31 = v18;
      _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null deserialize_function, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v18);
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  *((void *)v5 + 21) = a2;
  *((void *)v5 + 22) = a3;
LABEL_5:
}

void nw_protocol_definition_set_metadata_comparator(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_protocol_definition_set_metadata_comparator";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_protocol_definition_set_metadata_comparator";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v22 = "nw_protocol_definition_set_metadata_comparator";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_protocol_definition_set_metadata_comparator";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_protocol_definition_set_metadata_comparator";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *((void *)v3 + 20) = a2;
    goto LABEL_4;
  }
  BOOL v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v22 = "nw_protocol_definition_set_metadata_comparator";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v22 = "nw_protocol_definition_set_metadata_comparator";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null comparator_function", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v22 = "nw_protocol_definition_set_metadata_comparator";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null comparator_function, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  id v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v22 = "nw_protocol_definition_set_metadata_comparator";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null comparator_function, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v22 = "nw_protocol_definition_set_metadata_comparator";
    __int16 v23 = 2082;
    os_log_type_t v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null comparator_function, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

void *nw_protocol_copy_definition_for_identifier(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v20 = "nw_protocol_copy_definition_for_identifier";
    BOOL v11 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault((const char *)v11, &type, &v17))
    {
LABEL_38:
      if (v11) {
        free(v11);
      }
      return 0;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_protocol_copy_definition_for_identifier";
        os_log_type_t v14 = "%{public}s called with null identifier";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v20 = "nw_protocol_copy_definition_for_identifier";
            __int16 v21 = 2082;
            BOOL v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }
        if (!v16) {
          goto LABEL_37;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_protocol_copy_definition_for_identifier";
        os_log_type_t v14 = "%{public}s called with null identifier, no backtrace";
        goto LABEL_36;
      }
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_protocol_copy_definition_for_identifier";
        os_log_type_t v14 = "%{public}s called with null identifier, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  os_unfair_lock_lock(&nw_protocol_registrar_lock);
  uint64_t v2 = &g_registration_list;
  while (1)
  {
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      break;
    }
    if (*a1 == v2[4] && a1[1] == v2[5] && a1[2] == v2[6] && a1[3] == v2[7] && a1[4] == v2[8])
    {
      id v7 = (void *)v2[14];
      if (v7)
      {
        os_log_type_t v8 = os_retain(v7);
        goto LABEL_21;
      }
      break;
    }
  }
  os_log_type_t v8 = 0;
LABEL_21:
  os_unfair_lock_unlock(&nw_protocol_registrar_lock);
  return v8;
}

uint64_t nw_protocol_implementation_accept(uint64_t a1, void *a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!a1)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "nw_protocol_implementation_accept";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null many_to_one_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_1830D4000, v12, v26, "%{public}s called with null many_to_one_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null many_to_one_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v32 = "nw_protocol_implementation_accept";
      __int16 v33 = 2082;
      os_log_type_t v34 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null many_to_one_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_30;
  }
  if (!v5)
  {
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "nw_protocol_implementation_accept";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v32 = "nw_protocol_implementation_accept";
      __int16 v33 = 2082;
      os_log_type_t v34 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_30:

    free(backtrace_string);
    if (!v11) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (!v6)
  {
    BOOL v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "nw_protocol_implementation_accept";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v29)
    {
      uint64_t v23 = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v32 = "nw_protocol_implementation_accept";
          __int16 v33 = 2082;
          os_log_type_t v34 = v23;
          _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
LABEL_55:
        if (!v11)
        {
LABEL_57:
          uint64_t v8 = 0;
          goto LABEL_5;
        }
LABEL_56:
        free(v11);
        goto LABEL_57;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v32 = "nw_protocol_implementation_accept";
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  uint64_t v8 = 1;
LABEL_5:

  return v8;
}

uint64_t nw_protocol_flow_for_protocol(NWConcrete_nw_protocol_instance *a1, uint64_t a2)
{
  id v3 = a1;
  if (nw_protocol_definition_get_message_is_stream(v3->parent_definition)
    && *(void *)&v3[-1].log_str[41] == a2)
  {
    a2 = -2;
  }

  return a2;
}

void ___ZL39nw_protocol_implementation_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = (char *)v4[37];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZL39nw_protocol_implementation_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke_2;
  v7[3] = &unk_1E523C028;
  id v8 = v3;
  BOOL v9 = v4;
  int v10 = *(_DWORD *)(a1 + 40);
  id v6 = v3;
  nw_hash_table_apply(v5, (uint64_t)v7);
}

uint64_t ___ZL39nw_protocol_implementation_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  if (nw_interface_shallow_compare(*(void **)(a1 + 32), *(void **)(extra + 16)))
  {
    nw_hash_node_get_object(a2);
    (*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 80) + 224))();
  }
  return 1;
}

void nw_protocol_implementation_error(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle) {
      p_output_handler = 0;
    }
    id v7 = p_output_handler;
    id v8 = v7;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v9 = *((void *)v7 + 1);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 80);
        if (v10)
        {
          if (a2)
          {
            if (!a3)
            {
              if ((v7[405] & 0x80000000) == 0 && gLogDatapath)
              {
                os_log_type_t v15 = __nwlog_obj();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
                  __int16 v83 = 2082;
                  uint64_t v84 = v8 + 407;
                  __int16 v85 = 2080;
                  uint64_t v86 = " ";
                  _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSupressing error 0", buf, 0x20u);
                }
              }
              goto LABEL_37;
            }
            if (*(void *)(v10 + 72))
            {
              *(void *)buf = 0;
              nw_protocol_implementation_lookup_path_by_protocol((NWConcrete_nw_protocol_instance *)v7, a2, (unint64_t *)buf);
              BOOL v11 = *(void (**)(char *, uint64_t, uint64_t, _DWORD *))(*(void *)(*((void *)v8 + 1) + 80)
                                                                              + 72);
              uint64_t v12 = *(void *)buf;
              posix_error = nw_error_create_posix_error(a3);
              v11(v8, -1, v12, posix_error);
            }
            if ((v8[402] & 0x20) != 0)
            {
LABEL_37:

              return;
            }
            if (*(_DWORD *)(*((void *)v8 + 1) + 64) == 3)
            {
              os_log_type_t v14 = (char *)*((void *)v8 + 29);
              v73[0] = MEMORY[0x1E4F143A8];
              v73[1] = 3221225472;
              v73[2] = ___ZL32nw_protocol_implementation_errorP11nw_protocolS0_i_block_invoke;
              v73[3] = &unk_1E523C000;
              uint64_t v74 = v8;
              int v75 = a3;
              nw_hash_table_apply(v14, (uint64_t)v73);

              goto LABEL_37;
            }
            uint64_t v16 = *((void *)v8 - 6);
            if (v16)
            {
              if (*(_UNKNOWN **)(v16 + 40) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v18 = *(void *)(v16 + 88);
                if (v18) {
                  *(void *)(v16 + 88) = v18 + 1;
                }
                char v17 = -1;
              }
              else
              {
                char v17 = 0;
              }
              *(void *)os_log_type_t type = v16;
              char v81 = v17;
              if (*((_UNKNOWN **)v8 - 7) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v20 = *((void *)v8 - 1);
                if (v20) {
                  *((void *)v8 - 1) = v20 + 1;
                }
                char v19 = -1;
              }
              else
              {
                char v19 = 0;
              }
              uint64_t v78 = v8 - 96;
              char v79 = v19;
              uint64_t v21 = *(void *)(v16 + 24);
              if (v21)
              {
                BOOL v22 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 56);
                if (v22)
                {
                  v22(v16, v8 - 96, a3);
                  char v19 = v79;
LABEL_33:
                  if (v19) {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)&v78);
                  }
                  if (v81) {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                  }
                  goto LABEL_37;
                }
              }
              char v50 = __nwlog_obj();
              os_log_type_t v51 = *(const char **)(v16 + 16);
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_error";
              if (!v51) {
                os_log_type_t v51 = "invalid";
              }
              __int16 v83 = 2082;
              uint64_t v84 = (void *)v51;
              __int16 v85 = 2048;
              uint64_t v86 = (const char *)v16;
              BOOL v52 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v77 = OS_LOG_TYPE_ERROR;
              char v76 = 0;
              if (__nwlog_fault(v52, &v77, &v76))
              {
                if (v77 == OS_LOG_TYPE_FAULT)
                {
                  __int16 v53 = __nwlog_obj();
                  os_log_type_t v54 = v77;
                  if (os_log_type_enabled(v53, v77))
                  {
                    __int16 v55 = *(const char **)(v16 + 16);
                    if (!v55) {
                      __int16 v55 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_error";
                    __int16 v83 = 2082;
                    uint64_t v84 = (void *)v55;
                    __int16 v85 = 2048;
                    uint64_t v86 = (const char *)v16;
                    _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s protocol %{public}s (%p) has invalid error callback", buf, 0x20u);
                  }
                }
                else if (v76)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __int16 v53 = __nwlog_obj();
                  os_log_type_t v64 = v77;
                  BOOL v65 = os_log_type_enabled(v53, v77);
                  if (backtrace_string)
                  {
                    if (v65)
                    {
                      os_log_type_t v66 = *(const char **)(v16 + 16);
                      if (!v66) {
                        os_log_type_t v66 = "invalid";
                      }
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_error";
                      __int16 v83 = 2082;
                      uint64_t v84 = (void *)v66;
                      __int16 v85 = 2048;
                      uint64_t v86 = (const char *)v16;
                      __int16 v87 = 2082;
                      BOOL v88 = backtrace_string;
                      _os_log_impl(&dword_1830D4000, v53, v64, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }

                    free(backtrace_string);
                    goto LABEL_160;
                  }
                  if (v65)
                  {
                    char v71 = *(const char **)(v16 + 16);
                    if (!v71) {
                      char v71 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_error";
                    __int16 v83 = 2082;
                    uint64_t v84 = (void *)v71;
                    __int16 v85 = 2048;
                    uint64_t v86 = (const char *)v16;
                    _os_log_impl(&dword_1830D4000, v53, v64, "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace", buf, 0x20u);
                  }
                }
                else
                {
                  __int16 v53 = __nwlog_obj();
                  os_log_type_t v69 = v77;
                  if (os_log_type_enabled(v53, v77))
                  {
                    os_log_type_t v70 = *(const char **)(v16 + 16);
                    if (!v70) {
                      os_log_type_t v70 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_error";
                    __int16 v83 = 2082;
                    uint64_t v84 = (void *)v70;
                    __int16 v85 = 2048;
                    uint64_t v86 = (const char *)v16;
                    _os_log_impl(&dword_1830D4000, v53, v69, "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded", buf, 0x20u);
                  }
                }
              }
LABEL_160:
              if (v52) {
                free(v52);
              }
              goto LABEL_33;
            }
            char v61 = __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_error";
            os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v78) = 0;
            if (!__nwlog_fault(v28, type, &v78)) {
              goto LABEL_143;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              char v29 = __nwlog_obj();
              os_log_type_t v62 = type[0];
              if (os_log_type_enabled(v29, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_error";
                _os_log_impl(&dword_1830D4000, v29, v62, "%{public}s called with null protocol", buf, 0xCu);
              }
              goto LABEL_142;
            }
            if (!(_BYTE)v78)
            {
              char v29 = __nwlog_obj();
              os_log_type_t v72 = type[0];
              if (os_log_type_enabled(v29, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_error";
                _os_log_impl(&dword_1830D4000, v29, v72, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_142;
            }
            os_log_type_t v43 = (char *)__nw_create_backtrace_string();
            char v29 = __nwlog_obj();
            os_log_type_t v67 = type[0];
            BOOL v68 = os_log_type_enabled(v29, type[0]);
            if (!v43)
            {
              if (v68)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_error";
                _os_log_impl(&dword_1830D4000, v29, v67, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
              goto LABEL_142;
            }
            if (v68)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_protocol_error";
              __int16 v83 = 2082;
              uint64_t v84 = v43;
              _os_log_impl(&dword_1830D4000, v29, v67, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
          else
          {
            uint64_t v35 = __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
            os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v78) = 0;
            if (!__nwlog_fault(v28, type, &v78)) {
              goto LABEL_143;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              char v29 = __nwlog_obj();
              os_log_type_t v36 = type[0];
              if (os_log_type_enabled(v29, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
                _os_log_impl(&dword_1830D4000, v29, v36, "%{public}s called with null other_protocol", buf, 0xCu);
              }
              goto LABEL_142;
            }
            if (!(_BYTE)v78)
            {
              char v29 = __nwlog_obj();
              os_log_type_t v60 = type[0];
              if (os_log_type_enabled(v29, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
                _os_log_impl(&dword_1830D4000, v29, v60, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_142;
            }
            os_log_type_t v43 = (char *)__nw_create_backtrace_string();
            char v29 = __nwlog_obj();
            os_log_type_t v48 = type[0];
            BOOL v49 = os_log_type_enabled(v29, type[0]);
            if (!v43)
            {
              if (v49)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
                _os_log_impl(&dword_1830D4000, v29, v48, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
              }
              goto LABEL_142;
            }
            if (v49)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
              __int16 v83 = 2082;
              uint64_t v84 = v43;
              _os_log_impl(&dword_1830D4000, v29, v48, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
        }
        else
        {
          __int16 v33 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
          os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v78) = 0;
          if (!__nwlog_fault(v28, type, &v78)) {
            goto LABEL_143;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            char v29 = __nwlog_obj();
            os_log_type_t v34 = type[0];
            if (os_log_type_enabled(v29, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
              _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
            }
            goto LABEL_142;
          }
          if (!(_BYTE)v78)
          {
            char v29 = __nwlog_obj();
            os_log_type_t v59 = type[0];
            if (os_log_type_enabled(v29, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
              _os_log_impl(&dword_1830D4000, v29, v59, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_142;
          }
          os_log_type_t v43 = (char *)__nw_create_backtrace_string();
          char v29 = __nwlog_obj();
          os_log_type_t v46 = type[0];
          BOOL v47 = os_log_type_enabled(v29, type[0]);
          if (!v43)
          {
            if (v47)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
              _os_log_impl(&dword_1830D4000, v29, v46, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
            }
            goto LABEL_142;
          }
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
            __int16 v83 = 2082;
            uint64_t v84 = v43;
            _os_log_impl(&dword_1830D4000, v29, v46, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
      }
      else
      {
        os_log_type_t v31 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v78) = 0;
        if (!__nwlog_fault(v28, type, &v78)) {
          goto LABEL_143;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          char v29 = __nwlog_obj();
          os_log_type_t v32 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
            _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_142;
        }
        if (!(_BYTE)v78)
        {
          char v29 = __nwlog_obj();
          os_log_type_t v58 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
            _os_log_impl(&dword_1830D4000, v29, v58, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_142;
        }
        os_log_type_t v43 = (char *)__nw_create_backtrace_string();
        char v29 = __nwlog_obj();
        os_log_type_t v44 = type[0];
        BOOL v45 = os_log_type_enabled(v29, type[0]);
        if (!v43)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
            _os_log_impl(&dword_1830D4000, v29, v44, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_142;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
          __int16 v83 = 2082;
          uint64_t v84 = v43;
          _os_log_impl(&dword_1830D4000, v29, v44, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v43);
      if (!v28) {
        goto LABEL_37;
      }
      goto LABEL_144;
    }
    os_log_type_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v78) = 0;
    if (!__nwlog_fault(v28, type, &v78)) {
      goto LABEL_143;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v29 = __nwlog_obj();
      os_log_type_t v30 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)v78)
    {
      os_log_type_t v40 = (char *)__nw_create_backtrace_string();
      char v29 = __nwlog_obj();
      os_log_type_t v41 = type[0];
      BOOL v42 = os_log_type_enabled(v29, type[0]);
      if (v40)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
          __int16 v83 = 2082;
          uint64_t v84 = v40;
          _os_log_impl(&dword_1830D4000, v29, v41, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v40);
LABEL_143:
        if (!v28) {
          goto LABEL_37;
        }
LABEL_144:
        free(v28);
        goto LABEL_37;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_1830D4000, v29, v41, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v29 = __nwlog_obj();
      os_log_type_t v57 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_1830D4000, v29, v57, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_142:

    goto LABEL_143;
  }
  uint64_t v23 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
  os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v78) = 0;
  if (__nwlog_fault(v24, type, &v78))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v25 = __nwlog_obj();
      os_log_type_t v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v78)
    {
      __int16 v37 = (char *)__nw_create_backtrace_string();
      BOOL v25 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      BOOL v39 = os_log_type_enabled(v25, type[0]);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
          __int16 v83 = 2082;
          uint64_t v84 = v37;
          _os_log_impl(&dword_1830D4000, v25, v38, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v37);
        goto LABEL_129;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_1830D4000, v25, v38, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v25 = __nwlog_obj();
      os_log_type_t v56 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_1830D4000, v25, v56, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_129:
  if (v24) {
    free(v24);
  }
}