void nw_protocol_masque_frame_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  void *buffer;
  uint64_t v6;
  void *v7;
  uint64_t vars8;

  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0);
  if (buffer) {
    free(buffer);
  }
  v6 = *((void *)a1 + 2);
  v7 = (void *)*((void *)a1 + 3);
  if (v6)
  {
    *(void *)(v6 + 24) = v7;
    v7 = (void *)*((void *)a1 + 3);
  }
  else
  {
    a3[33] = v7;
  }
  *v7 = v6;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;

  os_release(a1);
}

uint64_t nw_protocol_masque_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v111) = 0;
    if (!__nwlog_fault(v5, type, &v111)) {
      goto LABEL_53;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
      v8 = "%{public}s called with null protocol";
      goto LABEL_99;
    }
    if ((_BYTE)v111)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      BOOL v40 = os_log_type_enabled(v37, type[0]);
      if (backtrace_string)
      {
        if (!v40) {
          goto LABEL_85;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        v41 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_84;
      }
      if (!v40) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_99:
    v27 = v37;
    os_log_type_t v28 = v38;
    uint32_t v29 = 12;
    goto LABEL_52;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v111) = 0;
    if (!__nwlog_fault(v5, type, &v111)) {
      goto LABEL_53;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
      v8 = "%{public}s called with null masque";
      goto LABEL_99;
    }
    if ((_BYTE)v111)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      BOOL v42 = os_log_type_enabled(v37, type[0]);
      if (backtrace_string)
      {
        if (!v42) {
          goto LABEL_85;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        v41 = "%{public}s called with null masque, dumping backtrace:%{public}s";
LABEL_84:
        _os_log_impl(&dword_1830D4000, v37, v38, v41, buf, 0x16u);
LABEL_85:
        free(backtrace_string);
        if (!v5) {
          return 0;
        }
        goto LABEL_54;
      }
      if (!v42) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
      v8 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
      v8 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    goto LABEL_99;
  }
  if (a1->default_input_handler)
  {
    if (handle[529]) {
      return 0;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    v4 = handle + 531;
    *(_DWORD *)buf = 136446722;
    *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = handle + 531;
    *(_WORD *)&buf[22] = 2080;
    v124 = " ";
    v5 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v111) = 0;
    if (__nwlog_fault(v5, type, &v111))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v6 = gprivacy_proxyLogObj;
        os_log_type_t v7 = type[0];
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v4;
          *(_WORD *)&buf[22] = 2080;
          v124 = " ";
          v8 = "%{public}s %{public}s%sProtocol instance already has default input handler";
LABEL_50:
          v27 = v6;
          os_log_type_t v28 = v7;
LABEL_51:
          uint32_t v29 = 32;
LABEL_52:
          _os_log_impl(&dword_1830D4000, v27, v28, v8, buf, v29);
        }
      }
      else if ((_BYTE)v111)
      {
        v23 = (char *)__nw_create_backtrace_string();
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        v24 = gprivacy_proxyLogObj;
        os_log_type_t v25 = type[0];
        BOOL v26 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type[0]);
        if (v23)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v4;
            *(_WORD *)&buf[22] = 2080;
            v124 = " ";
            LOWORD(v125) = 2082;
            *(void *)((char *)&v125 + 2) = v23;
            _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s %{public}s%sProtocol instance already has default input handler, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v23);
        }
        else if (v26)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v4;
          *(_WORD *)&buf[22] = 2080;
          v124 = " ";
          v8 = "%{public}s %{public}s%sProtocol instance already has default input handler, no backtrace";
          v27 = v24;
          os_log_type_t v28 = v25;
          goto LABEL_51;
        }
      }
      else
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v6 = gprivacy_proxyLogObj;
        os_log_type_t v7 = type[0];
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&buf[4] = "nw_protocol_masque_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v4;
          *(_WORD *)&buf[22] = 2080;
          v124 = " ";
          v8 = "%{public}s %{public}s%sProtocol instance already has default input handler, backtrace limit exceeded";
          goto LABEL_50;
        }
      }
    }
LABEL_53:
    if (v5) {
LABEL_54:
    }
      free(v5);
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
  if (a2)
  {
    *(_OWORD *)a1->flow_id = *(_OWORD *)a2->flow_id;
    if (!a2->output_handler) {
      nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
    }
    callbacks = a2->callbacks;
    if (callbacks)
    {
      get_parameters = (uint64_t (*)(nw_protocol *))callbacks->get_parameters;
      if (!get_parameters) {
        goto LABEL_21;
      }
      v12 = (void *)get_parameters(a2);
      v13 = v12;
      if (v12) {
        v12 = os_retain(v12);
      }
      *((void *)handle + 40) = v12;
      *((void *)handle + 41) = nw_parameters_copy_context(v13);
      callbacks = a2->callbacks;
      if (callbacks)
      {
LABEL_21:
        get_path = (uint64_t (*)(nw_protocol *))callbacks->get_path;
        if (get_path)
        {
          v15 = (void *)get_path(a2);
          if (v15) {
            v15 = os_retain(v15);
          }
          *((void *)handle + 42) = v15;
        }
      }
    }
  }
  v16 = (void *)*((void *)handle + 40);
  if (!v16) {
    goto LABEL_200;
  }
  v17 = nw_parameters_copy_protocol_options_legacy(v16, (nw_protocol *)handle);
  *((void *)handle + 43) = v17;
  nw_protocol_options_get_log_id_str(v17, handle + 531, 84);
  *((_DWORD *)handle + 126) = nw_masque_options_get_version(*((void **)handle + 43));
  v18 = (void *)*((void *)handle + 43);
  if (v18)
  {
    if (nw_protocol_options_access_handle(v18, &__block_literal_global_51)) {
      int v19 = 0;
    }
    else {
      int v19 = 4;
    }
    goto LABEL_30;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_masque_options_has_target_endpoint";
  v43 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v111) = 0;
  if (__nwlog_fault(v43, type, &v111))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v44 = __nwlog_obj();
      os_log_type_t v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_options_has_target_endpoint";
        v46 = "%{public}s called with null options";
LABEL_113:
        _os_log_impl(&dword_1830D4000, v44, v45, v46, buf, 0xCu);
      }
    }
    else if ((_BYTE)v111)
    {
      v47 = (char *)__nw_create_backtrace_string();
      v44 = __nwlog_obj();
      os_log_type_t v45 = type[0];
      BOOL v48 = os_log_type_enabled(v44, type[0]);
      if (v47)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_masque_options_has_target_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v47;
          _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v47);
        goto LABEL_114;
      }
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_options_has_target_endpoint";
        v46 = "%{public}s called with null options, no backtrace";
        goto LABEL_113;
      }
    }
    else
    {
      v44 = __nwlog_obj();
      os_log_type_t v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_options_has_target_endpoint";
        v46 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_113;
      }
    }
  }
LABEL_114:
  if (v43) {
    free(v43);
  }
  int v19 = 4;
LABEL_30:
  v20 = handle + 527;
  *(_DWORD *)(handle + 527) = *(_DWORD *)(handle + 527) & 0xFFFFFFFB | v19;
  v21 = (void *)*((void *)handle + 40);
  if (nw_protocol_http_messaging_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_77555);
  }
  if (nw_parameters_has_protocol_in_stack(v21, nw_protocol_http_messaging_identifier::protocol_identifier)) {
    int v22 = 0x1000000;
  }
  else {
    int v22 = 0;
  }
  *(_DWORD *)v20 = *(_DWORD *)v20 & 0xFEFFFFFF | v22;
  if (nw_masque_options_get_forced_protocol(*((nw_protocol_options **)handle + 43)) == 2) {
    goto LABEL_36;
  }
  if (nw_masque_options_get_forced_protocol(*((nw_protocol_options **)handle + 43)) == 1)
  {
    *(_DWORD *)v20 &= ~8u;
    goto LABEL_145;
  }
  if (a2)
  {
    v31 = (void *)*((void *)handle + 43);
    if (v31)
    {
      if (nw_protocol_options_access_handle(v31, &__block_literal_global_55))
      {
        identifier = a2->identifier;
        if (nw_protocol_ip_identifier::onceToken != -1) {
          dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_86959);
        }
        if (nw_protocols_are_equal(identifier, &nw_protocol_ip_identifier::identifier))
        {
          *(_DWORD *)v20 |= 0x20u;
          nw_protocol_stack_t v33 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)handle + 40));
          if (!v33) {
            goto LABEL_145;
          }
          nw_protocol_stack_t v34 = v33;
          v35 = nw_protocol_stack_copy_original_proxied_transport_protocol(v33);
          if (!v35) {
            goto LABEL_144;
          }
          v36 = v35;
          if (nw_protocol_options_is_custom_ip(v35)) {
            handle[526] = nw_custom_ip_options_get_protocol(v36);
          }
          goto LABEL_143;
        }
      }
      goto LABEL_130;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_masque_options_get_allow_connect_ip";
    v49 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v111) = 0;
    if (__nwlog_fault(v49, type, &v111))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v50 = __nwlog_obj();
        os_log_type_t v51 = type[0];
        if (os_log_type_enabled(v50, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_masque_options_get_allow_connect_ip";
          v52 = "%{public}s called with null options";
LABEL_126:
          _os_log_impl(&dword_1830D4000, v50, v51, v52, buf, 0xCu);
        }
      }
      else if ((_BYTE)v111)
      {
        v53 = (char *)__nw_create_backtrace_string();
        v50 = __nwlog_obj();
        os_log_type_t v51 = type[0];
        BOOL v54 = os_log_type_enabled(v50, type[0]);
        if (v53)
        {
          if (v54)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_masque_options_get_allow_connect_ip";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v53;
            _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v53);
          goto LABEL_127;
        }
        if (v54)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_masque_options_get_allow_connect_ip";
          v52 = "%{public}s called with null options, no backtrace";
          goto LABEL_126;
        }
      }
      else
      {
        v50 = __nwlog_obj();
        os_log_type_t v51 = type[0];
        if (os_log_type_enabled(v50, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_masque_options_get_allow_connect_ip";
          v52 = "%{public}s called with null options, backtrace limit exceeded";
          goto LABEL_126;
        }
      }
    }
LABEL_127:
    if (v49) {
      free(v49);
    }
    v20 = handle + 527;
LABEL_130:
    v55 = a2->identifier;
    quic_stream_protocol_identifier = nw_protocol_get_quic_stream_protocol_identifier();
    if (nw_protocols_are_equal(v55, quic_stream_protocol_identifier)) {
      goto LABEL_36;
    }
    v57 = a2->identifier;
    quic_connection_protocol_identifier = nw_protocol_get_quic_connection_protocol_identifier();
    if (nw_protocols_are_equal(v57, quic_connection_protocol_identifier)) {
      goto LABEL_36;
    }
    v59 = a2->identifier;
    if (nw_protocol_demux_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_demux_identifier::onceToken, &__block_literal_global_25983);
    }
    if (nw_protocols_are_equal(v59, &g_demux_protocol_identifier))
    {
      default_input_handler = a2->default_input_handler;
      if (default_input_handler)
      {
        v61 = default_input_handler->identifier;
        v62 = nw_protocol_get_quic_stream_protocol_identifier();
        if (nw_protocols_are_equal(v61, v62)
          || (v63 = a2->default_input_handler->identifier,
              v64 = nw_protocol_get_quic_connection_protocol_identifier(),
              nw_protocols_are_equal(v63, v64)))
        {
LABEL_36:
          *(_DWORD *)v20 |= 8u;
          goto LABEL_145;
        }
      }
    }
  }
  nw_protocol_stack_t v65 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)handle + 40));
  if (!v65) {
    goto LABEL_145;
  }
  nw_protocol_stack_t v34 = v65;
  v66 = nw_protocol_stack_copy_original_proxied_transport_protocol(v65);
  if (v66)
  {
    v36 = v66;
    if (nw_protocol_options_is_quic(v66) || nw_protocol_options_is_udp(v36)) {
      *(_DWORD *)v20 |= 8u;
    }
LABEL_143:
    os_release(v36);
  }
LABEL_144:
  os_release(v34);
LABEL_145:
  id v67 = nw_parameters_copy_effective_proxy_config(*((void **)handle + 40));
  if (v67)
  {
    v68 = (unsigned __int16 *)v67;
    int v69 = v68[84];

    if (!v69)
    {
LABEL_160:
      os_release(v68);
      goto LABEL_161;
    }
    *((_WORD *)handle + 262) = v69;
    v70 = (void *)*((void *)handle + 41);
    if (v70)
    {
      if (nw_protocol_masque_get_definition(void)::onceToken != -1) {
        dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27403);
      }
      if (nw_protocol_masque_get_definition(void)::definition) {
        v71 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
      }
      else {
        v71 = 0;
      }
      globals_for_protocol = (unsigned __int16 *)nw_context_get_globals_for_protocol(v70, v71);
      if (globals_for_protocol)
      {
        if (*globals_for_protocol != v69)
        {
          unsigned __int16 *globals_for_protocol = v69;
          globals_for_protocol[1] = 0;
          if ((v20[2] & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            v73 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&buf[4] = handle + 531;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = " ";
              *(_WORD *)&buf[22] = 1024;
              LODWORD(v124) = v69;
              _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_INFO, "%{public}s%sSaving config epoch value: %u", buf, 0x1Cu);
            }
          }
        }
        goto LABEL_160;
      }
      v106 = v20;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_masque_set_config_epoch_value";
      v92 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v111) = 0;
      if (!__nwlog_fault(v92, type, &v111)) {
        goto LABEL_244;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v93 = __nwlog_obj();
        os_log_type_t v94 = type[0];
        if (os_log_type_enabled(v93, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_masque_set_config_epoch_value";
          v95 = "%{public}s called with null globals";
          goto LABEL_243;
        }
        goto LABEL_244;
      }
      if (!(_BYTE)v111)
      {
        v93 = __nwlog_obj();
        os_log_type_t v94 = type[0];
        if (os_log_type_enabled(v93, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_masque_set_config_epoch_value";
          v95 = "%{public}s called with null globals, backtrace limit exceeded";
          goto LABEL_243;
        }
        goto LABEL_244;
      }
      v100 = (char *)__nw_create_backtrace_string();
      v93 = __nwlog_obj();
      os_log_type_t v94 = type[0];
      BOOL v103 = os_log_type_enabled(v93, type[0]);
      if (!v100)
      {
        if (v103)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_masque_set_config_epoch_value";
          v95 = "%{public}s called with null globals, no backtrace";
          goto LABEL_243;
        }
        goto LABEL_244;
      }
      if (v103)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_masque_set_config_epoch_value";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v100;
        v102 = "%{public}s called with null globals, dumping backtrace:%{public}s";
        goto LABEL_228;
      }
    }
    else
    {
      v106 = v20;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_masque_set_config_epoch_value";
      v92 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v111) = 0;
      if (!__nwlog_fault(v92, type, &v111)) {
        goto LABEL_244;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v93 = __nwlog_obj();
        os_log_type_t v94 = type[0];
        if (os_log_type_enabled(v93, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_masque_set_config_epoch_value";
          v95 = "%{public}s called with null masque->context";
LABEL_243:
          _os_log_impl(&dword_1830D4000, v93, v94, v95, buf, 0xCu);
        }
LABEL_244:
        if (v92) {
          free(v92);
        }
        v20 = v106;
        goto LABEL_160;
      }
      if (!(_BYTE)v111)
      {
        v93 = __nwlog_obj();
        os_log_type_t v94 = type[0];
        if (os_log_type_enabled(v93, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_masque_set_config_epoch_value";
          v95 = "%{public}s called with null masque->context, backtrace limit exceeded";
          goto LABEL_243;
        }
        goto LABEL_244;
      }
      v100 = (char *)__nw_create_backtrace_string();
      v93 = __nwlog_obj();
      os_log_type_t v94 = type[0];
      BOOL v101 = os_log_type_enabled(v93, type[0]);
      if (!v100)
      {
        if (v101)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_masque_set_config_epoch_value";
          v95 = "%{public}s called with null masque->context, no backtrace";
          goto LABEL_243;
        }
        goto LABEL_244;
      }
      if (v101)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_masque_set_config_epoch_value";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v100;
        v102 = "%{public}s called with null masque->context, dumping backtrace:%{public}s";
LABEL_228:
        _os_log_impl(&dword_1830D4000, v93, v94, v102, buf, 0x16u);
      }
    }
    free(v100);
    goto LABEL_244;
  }
LABEL_161:
  account_id = (const char *)nw_parameters_get_account_id(*((void **)handle + 40));
  if (account_id && !strncmp(account_id, "FT-P2P", 7uLL))
  {
    v75 = (void *)*((void *)handle + 40);
    if (v75)
    {
      uint64_t v111 = 0;
      v112 = &v111;
      uint64_t v113 = 0x2000000000;
      char v114 = 0;
      uint64_t v107 = 0;
      v108 = &v107;
      uint64_t v109 = 0x2000000000;
      uint64_t v110 = 0;
      v76 = v75;
      v77 = v76[19];

      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL46nw_masque_enable_spin_bit_for_ft_p2p_if_neededP9nw_masque_block_invoke;
      v124 = (const char *)&unk_1E523E650;
      *((void *)&v125 + 1) = &v107;
      v126 = handle;
      *(void *)&long long v125 = &v111;
      nw_protocol_stack_iterate_application_protocols(v77, buf);
      if (*((unsigned char *)v112 + 24))
      {
        if (v108[3])
        {
          v78 = 0;
        }
        else
        {
          v84 = nw_protocol_stack_copy_transport_protocol(v77);
          v78 = v84;
          if (v84
            && (nw_protocol_options_is_quic(v84)
             || nw_protocol_options_is_quic_connection(v78)
             || nw_protocol_options_is_quic_stream(v78)))
          {
            v108[3] = (uint64_t)v78;
            if ((v20[2] & 1) == 0)
            {
              if (gLogDatapath)
              {
                v85 = v20;
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                v86 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v87 = v108[3];
                  *(_DWORD *)type = 136446978;
                  v116 = "nw_masque_enable_spin_bit_for_ft_p2p_if_needed";
                  __int16 v117 = 2082;
                  v118 = handle + 531;
                  __int16 v119 = 2080;
                  v120 = " ";
                  __int16 v121 = 2048;
                  uint64_t v122 = v87;
                  _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sfound quic as transport protocol: %p", (uint8_t *)type, 0x2Au);
                }
                v20 = v85;
              }
            }
          }
        }
        int v79 = *(_DWORD *)v20;
        if (v108[3])
        {
          if ((v79 & 0x10000) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            v80 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)type = 136446466;
              v116 = handle + 531;
              __int16 v117 = 2080;
              v118 = " ";
              _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_INFO, "%{public}s%soverriding spin bit for quic below masque", (uint8_t *)type, 0x16u);
            }
          }
          id v81 = nw_quic_stream_copy_shared_connection_options((void *)v108[3]);
          nw_quic_connection_set_disable_spin_bit(v81, 1);

          id v82 = nw_quic_stream_copy_shared_connection_options((void *)v108[3]);
          nw_quic_connection_set_spin_bit_value(v82, 1);
        }
        else if ((v79 & 0x10000) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          v88 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)type = 136446466;
            v116 = handle + 531;
            __int16 v117 = 2080;
            v118 = " ";
            _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_ERROR, "%{public}s%scould not find quic options below masque", (uint8_t *)type, 0x16u);
          }
        }
        if (v78) {
          os_release(v78);
        }
      }
      else if ((v20[2] & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        v83 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)type = 136446466;
          v116 = handle + 531;
          __int16 v117 = 2080;
          v118 = " ";
          _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_ERROR, "%{public}s%sdid not find self in protocol stack", (uint8_t *)type, 0x16u);
        }
      }
      if (v77) {
        os_release(v77);
      }
      _Block_object_dispose(&v107, 8);
      _Block_object_dispose(&v111, 8);
      goto LABEL_200;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_masque_enable_spin_bit_for_ft_p2p_if_needed";
    v96 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v111) = 0;
    if (__nwlog_fault(v96, type, &v111))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v97 = __nwlog_obj();
        os_log_type_t v98 = type[0];
        if (!os_log_type_enabled(v97, type[0])) {
          goto LABEL_252;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_enable_spin_bit_for_ft_p2p_if_needed";
        v99 = "%{public}s called with null masque->parameters";
        goto LABEL_251;
      }
      if (!(_BYTE)v111)
      {
        v97 = __nwlog_obj();
        os_log_type_t v98 = type[0];
        if (!os_log_type_enabled(v97, type[0])) {
          goto LABEL_252;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_enable_spin_bit_for_ft_p2p_if_needed";
        v99 = "%{public}s called with null masque->parameters, backtrace limit exceeded";
        goto LABEL_251;
      }
      v104 = (char *)__nw_create_backtrace_string();
      v97 = __nwlog_obj();
      os_log_type_t v98 = type[0];
      BOOL v105 = os_log_type_enabled(v97, type[0]);
      if (v104)
      {
        if (v105)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_masque_enable_spin_bit_for_ft_p2p_if_needed";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v104;
          _os_log_impl(&dword_1830D4000, v97, v98, "%{public}s called with null masque->parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v104);
        goto LABEL_252;
      }
      if (v105)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_enable_spin_bit_for_ft_p2p_if_needed";
        v99 = "%{public}s called with null masque->parameters, no backtrace";
LABEL_251:
        _os_log_impl(&dword_1830D4000, v97, v98, v99, buf, 0xCu);
      }
    }
LABEL_252:
    if (v96) {
      free(v96);
    }
  }
LABEL_200:
  if (a2)
  {
    v89 = a2->callbacks;
    if (v89)
    {
      supports_external_data = (unsigned int (*)(nw_protocol *))v89->supports_external_data;
      if (supports_external_data)
      {
        if (supports_external_data(a2)) {
          int v91 = 64;
        }
        else {
          int v91 = 0;
        }
        *(_DWORD *)(handle + 527) = *(_DWORD *)(handle + 527) & 0xFFFFFFBF | v91;
      }
    }
  }
  return 1;
}

void sub_1838460E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_masque_options_get_version(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v13 = 1;
    *(void *)&buf[16] = 0x2000000000;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    v9[2] = __nw_masque_options_get_version_block_invoke;
    v9[3] = &unk_1E523E430;
    v9[4] = buf;
    nw_protocol_options_access_handle(a1, v9);
    uint64_t v1 = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    return v1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_masque_options_get_version";
  v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_options_get_version";
        uint64_t v6 = "%{public}s called with null options";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_masque_options_get_version";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_options_get_version";
        uint64_t v6 = "%{public}s called with null options, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_options_get_version";
        uint64_t v6 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v3) {
    free(v3);
  }
  return 1;
}

uint64_t nw_masque_options_get_forced_protocol(nw_protocol_options *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v13 = 0;
    *(void *)&buf[16] = 0x2000000000;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    v9[2] = ___ZL37nw_masque_options_get_forced_protocolP19nw_protocol_options_block_invoke;
    v9[3] = &unk_1E523E608;
    v9[4] = buf;
    nw_protocol_options_access_handle(a1, v9);
    uint64_t v1 = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    return v1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_masque_options_get_forced_protocol";
  v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_options_get_forced_protocol";
        uint64_t v6 = "%{public}s called with null options";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_masque_options_get_forced_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_options_get_forced_protocol";
        uint64_t v6 = "%{public}s called with null options, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_options_get_forced_protocol";
        uint64_t v6 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v3) {
    free(v3);
  }
  return 0;
}

void ___ZL46nw_masque_enable_spin_bit_for_ft_p2p_if_neededP9nw_masque_block_invoke(void *a1, nw_protocol_options_t options)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    if (!*(void *)(*(void *)(a1[5] + 8) + 24)
      && (nw_protocol_options_is_quic(options)
       || nw_protocol_options_is_quic_connection(options)
       || nw_protocol_options_is_quic_stream(options)))
    {
      *(void *)(*(void *)(a1[5] + 8) + 24) = options;
      uint64_t v4 = a1[6];
      if (!v4 || (*(unsigned char *)(v4 + 529) & 1) == 0)
      {
        if (gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          os_log_type_t v5 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v6 = a1[6];
            BOOL v7 = v6 == 0;
            if (v6) {
              BOOL v8 = (const char *)(v6 + 531);
            }
            else {
              BOOL v8 = "";
            }
            v9 = " ";
            if (v7) {
              v9 = "";
            }
            uint64_t v10 = *(void *)(*(void *)(a1[5] + 8) + 24);
            int v11 = 136446978;
            v12 = "nw_masque_enable_spin_bit_for_ft_p2p_if_needed_block_invoke";
            __int16 v13 = 2082;
            uint64_t v14 = v8;
            __int16 v15 = 2080;
            v16 = v9;
            __int16 v17 = 2048;
            uint64_t v18 = v10;
            _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sfound quic as application protocol: %p", (uint8_t *)&v11, 0x2Au);
          }
        }
      }
    }
  }
  else if (nw_protocol_options_get_protocol_handle(options) == a1[6])
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
}

uint64_t ___ZL38nw_masque_options_get_allow_connect_ipP19nw_protocol_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 32);
}

uint64_t ___ZL37nw_masque_options_get_forced_protocolP19nw_protocol_options_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 28);
  return 1;
}

BOOL ___ZL37nw_masque_options_has_target_endpointP19nw_protocol_options_block_invoke(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

uint64_t __nw_masque_options_get_version_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 24);
  if (v2) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
  }
  return 1;
}

BOOL nw_masque_compare_metadata(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (a3) {
      return *a2 == *a3;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v15 = "nw_masque_compare_metadata";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_masque_compare_metadata";
        BOOL v7 = "%{public}s called with null handle2";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v12)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_masque_compare_metadata";
        BOOL v7 = "%{public}s called with null handle2, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_masque_compare_metadata";
        BOOL v7 = "%{public}s called with null handle2, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v15 = "nw_masque_compare_metadata";
      __int16 v16 = 2082;
      __int16 v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null handle2, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v15 = "nw_masque_compare_metadata";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_masque_compare_metadata";
        BOOL v7 = "%{public}s called with null handle1, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_masque_compare_metadata";
        BOOL v7 = "%{public}s called with null handle1, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v15 = "nw_masque_compare_metadata";
      __int16 v16 = 2082;
      __int16 v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null handle1, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v5, v6, v10, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  os_log_type_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    __int16 v15 = "nw_masque_compare_metadata";
    BOOL v7 = "%{public}s called with null handle1";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
  }
LABEL_32:
  if (v4) {
    free(v4);
  }
  return 0;
}

void nw_masque_deallocate_metadata(nw_protocol_definition *a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL nw_masque_allocate_metadata(nw_protocol_definition *a1)
{
  uint64_t v1 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v1) {
    return (BOOL)v1;
  }
  v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  uint64_t v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

double ___ZL29nw_protocol_masque_identifierv_block_invoke()
{
  unk_1E8F6B1F7 = 0;
  unk_1E8F6B1EF = 0;
  byte_1E8F6B207 = 0;
  unk_1E8F6B1FF = 0;
  strcpy((char *)nw_protocol_masque_identifier(void)::g_masque_protocol_identifier, "masque");
  *(void *)&double result = 0x100000005;
  qword_1E8F6B208 = 0x100000005;
  return result;
}

uint64_t nw_protocol_masque_get_output_local_endpoint(nw_protocol *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_protocol_masque_get_output_local_endpoint";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_masque_get_output_local_endpoint";
      BOOL v8 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v13)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_36;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_masque_get_output_local_endpoint";
        BOOL v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_masque_get_output_local_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v5) {
          return 0;
        }
        goto LABEL_37;
      }
      if (!v10) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_masque_get_output_local_endpoint";
      BOOL v8 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_36;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_protocol_masque_get_output_local_endpoint";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_masque_get_output_local_endpoint";
      BOOL v8 = "%{public}s called with null masque";
      goto LABEL_35;
    }
    if (!v13)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_masque_get_output_local_endpoint";
      BOOL v8 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_35;
    }
    BOOL v11 = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (!v11)
    {
      if (!v12) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_masque_get_output_local_endpoint";
      BOOL v8 = "%{public}s called with null masque, no backtrace";
      goto LABEL_35;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v16 = "nw_protocol_masque_get_output_local_endpoint";
      __int16 v17 = 2082;
      uint64_t v18 = v11;
      _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v11);
LABEL_36:
    if (!v5) {
      return 0;
    }
LABEL_37:
    free(v5);
    return 0;
  }
  uint64_t v2 = handle[45];
  if (v2) {
    return v2;
  }
  output_handler = a1->output_handler;

  return nw_protocol_get_output_local_endpoint((uint64_t)output_handler);
}

uint64_t nw_protocol_masque_get_parameters(nw_protocol *a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_protocol_masque_get_parameters";
    v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v27, &type, &v46)) {
      goto LABEL_81;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_masque_get_parameters";
      v30 = "%{public}s called with null protocol";
      goto LABEL_80;
    }
    if (!v46)
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_masque_get_parameters";
      v30 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_80;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v32 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (!v32) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_masque_get_parameters";
      v30 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_80;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v49 = "nw_protocol_masque_get_parameters";
      __int16 v50 = 2082;
      os_log_type_t v51 = backtrace_string;
      nw_protocol_stack_t v33 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_66:
      _os_log_impl(&dword_1830D4000, v28, v29, v33, buf, 0x16u);
    }
LABEL_67:
    free(backtrace_string);
    goto LABEL_81;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_protocol_masque_get_parameters";
    v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v27, &type, &v46)) {
      goto LABEL_81;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_masque_get_parameters";
      v30 = "%{public}s called with null masque";
      goto LABEL_80;
    }
    if (!v46)
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_masque_get_parameters";
      v30 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_80;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v34 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (!v34) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_masque_get_parameters";
      v30 = "%{public}s called with null masque, no backtrace";
      goto LABEL_80;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v49 = "nw_protocol_masque_get_parameters";
      __int16 v50 = 2082;
      os_log_type_t v51 = backtrace_string;
      nw_protocol_stack_t v33 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_66;
    }
    goto LABEL_67;
  }
  if (handle + 128 == (char *)a1)
  {
    if (*((void *)handle + 53)) {
      return *((void *)handle + 53);
    }
    if (!*((void *)handle + 48) && !*((void *)handle + 56)) {
      return 0;
    }
    BOOL v9 = (void *)*((void *)handle + 40);
    if (v9)
    {
      id v10 = v9;
      BOOL v11 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v10, 0, 1);

      *((void *)handle + 53) = v11;
      BOOL v12 = (nw_protocol *)*((void *)handle + 54);
      if (!v12) {
        return *((void *)handle + 53);
      }
      if (nw_protocol_demux_copy_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
      }
      if (nw_protocol_demux_copy_definition::definition) {
        char v13 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
      }
      else {
        char v13 = 0;
      }
      uint64_t v14 = nw_parameters_copy_protocol_options_legacy(*((void **)handle + 53), v12);
      __int16 v15 = v14;
      if (!v14)
      {
        __int16 v15 = nw_parameters_copy_protocol_options_for_definition(*((void **)handle + 53), v13);
        if (!v15)
        {
LABEL_102:
          if (v13) {
            os_release(v13);
          }
          return *((void *)handle + 53);
        }
      }
      if (nw_protocol_demux_copy_definition::onceToken == -1)
      {
        __int16 v16 = (void *)nw_protocol_demux_copy_definition::definition;
        if (nw_protocol_demux_copy_definition::definition) {
          goto LABEL_35;
        }
      }
      else
      {
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
        __int16 v16 = (void *)nw_protocol_demux_copy_definition::definition;
        if (nw_protocol_demux_copy_definition::definition)
        {
LABEL_35:
          __int16 v17 = os_retain(v16);
          BOOL v18 = nw_protocol_options_matches_definition(v15, v17);
          BOOL v20 = v18;
          if (v17)
          {
            os_release(v17);
            if (!v20) {
              goto LABEL_101;
            }
          }
          else if (!v18)
          {
            goto LABEL_101;
          }
          goto LABEL_86;
        }
      }
      if (!nw_protocol_options_matches_definition(v15, 0))
      {
LABEL_101:
        os_release(v15);
        goto LABEL_102;
      }
LABEL_86:
      if (*((void *)handle + 48))
      {
        v35 = nw_protocol_options_copy(v15);
        v36 = v35;
        if (*((void *)handle + 50)) {
          v37 = *((void *)handle + 50);
        }
        else {
          v37 = *((void *)handle + 48);
        }
        nw_demux_options_add_pattern_data(v35, 1, v37);
      }
      else
      {
        os_log_type_t v38 = (void *)*((void *)handle + 56);
        if (v38) {
          v36 = nw_protocol_options_copy(v38);
        }
        else {
          v36 = 0;
        }
      }
      nw_parameters_set_protocol_instance(v36, v19, (uint64_t)v12);
      nw_protocol_options_inherit_log_id(v15, v36);
      nw_protocol_stack_t v39 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)handle + 53));
      nw_protocol_stack_t v40 = v39;
      if (v14) {
        nw_protocol_stack_replace_protocol_with_handle(v39, (uint64_t)v12, v36);
      }
      else {
        nw_protocol_stack_replace_protocol(v39, v13, v36);
      }
      if (v40) {
        os_release(v40);
      }
      if (v36) {
        os_release(v36);
      }
      goto LABEL_101;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_protocol_masque_get_parameters";
    v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault(v27, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (!os_log_type_enabled(v28, type)) {
          goto LABEL_81;
        }
        *(_DWORD *)buf = 136446210;
        v49 = "nw_protocol_masque_get_parameters";
        v30 = "%{public}s called with null masque->parameters";
        goto LABEL_80;
      }
      if (v46)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        BOOL v45 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (!v45) {
            goto LABEL_67;
          }
          *(_DWORD *)buf = 136446466;
          v49 = "nw_protocol_masque_get_parameters";
          __int16 v50 = 2082;
          os_log_type_t v51 = backtrace_string;
          nw_protocol_stack_t v33 = "%{public}s called with null masque->parameters, dumping backtrace:%{public}s";
          goto LABEL_66;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_protocol_masque_get_parameters";
          v30 = "%{public}s called with null masque->parameters, no backtrace";
          goto LABEL_80;
        }
      }
      else
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_protocol_masque_get_parameters";
          v30 = "%{public}s called with null masque->parameters, backtrace limit exceeded";
LABEL_80:
          _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
        }
      }
    }
LABEL_81:
    if (v27) {
      free(v27);
    }
    return 0;
  }
  if (handle + 192 == (char *)a1)
  {
    if ((handle[529] & 2) != 0) {
      return *((void *)handle + 40);
    }
    os_log_type_t v7 = (nw_protocol *)*((void *)handle + 54);
    if (!v7) {
      return *((void *)handle + 40);
    }
    if (nw_protocol_demux_copy_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
    }
    if (nw_protocol_demux_copy_definition::definition) {
      BOOL v8 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
    }
    else {
      BOOL v8 = 0;
    }
    v21 = nw_parameters_copy_protocol_options_legacy(*((void **)handle + 40), v7);
    int v22 = v21;
    if (!v21)
    {
      int v22 = nw_parameters_copy_protocol_options_for_definition(*((void **)handle + 40), v8);
      if (!v22)
      {
LABEL_114:
        if (v8) {
          os_release(v8);
        }
        return *((void *)handle + 40);
      }
    }
    if (nw_protocol_demux_copy_definition::onceToken == -1)
    {
      v23 = (void *)nw_protocol_demux_copy_definition::definition;
      if (nw_protocol_demux_copy_definition::definition) {
        goto LABEL_43;
      }
    }
    else
    {
      dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
      v23 = (void *)nw_protocol_demux_copy_definition::definition;
      if (nw_protocol_demux_copy_definition::definition)
      {
LABEL_43:
        v24 = os_retain(v23);
        BOOL v25 = nw_protocol_options_matches_definition(v22, v24);
        BOOL v26 = v25;
        if (v24)
        {
          os_release(v24);
          if (!v26) {
            goto LABEL_113;
          }
        }
        else if (!v25)
        {
          goto LABEL_113;
        }
        goto LABEL_106;
      }
    }
    if (!nw_protocol_options_matches_definition(v22, 0))
    {
LABEL_113:
      os_release(v22);
      goto LABEL_114;
    }
LABEL_106:
    v41 = nw_protocol_options_copy(v22);
    nw_parameters_set_protocol_instance(v41, v42, (uint64_t)v7);
    nw_protocol_options_inherit_log_id(v22, v41);
    nw_protocol_stack_t v43 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)handle + 40));
    nw_protocol_stack_t v44 = v43;
    if (v21) {
      nw_protocol_stack_replace_protocol_with_handle(v43, (uint64_t)v7, v41);
    }
    else {
      nw_protocol_stack_replace_protocol(v43, v8, v41);
    }
    *(_DWORD *)(handle + 527) |= 0x20000u;
    if (v44) {
      os_release(v44);
    }
    if (v41) {
      os_release(v41);
    }
    goto LABEL_113;
  }
  uint64_t v2 = *((void *)handle + 6);
  if (handle + 64 == (char *)a1)
  {
    uint64_t result = *((void *)handle + 52);
    if (result) {
      return result;
    }
  }
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 112);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *((void *)handle + 6);

  return v4(v5);
}

void sub_183847ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_protocol *nw_protocol_masque_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_get_remote_endpoint";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v12, &type, &v20)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_get_remote_endpoint";
      __int16 v15 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v20)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_masque_get_remote_endpoint";
        __int16 v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_49;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_protocol_masque_get_remote_endpoint";
          __int16 v24 = 2082;
          BOOL v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v12) {
          return 0;
        }
        goto LABEL_51;
      }
      if (!v17) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_get_remote_endpoint";
      __int16 v15 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_49:
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_50;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_get_remote_endpoint";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v12, &type, &v20)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_get_remote_endpoint";
      __int16 v15 = "%{public}s called with null masque";
      goto LABEL_49;
    }
    if (!v20)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_get_remote_endpoint";
      __int16 v15 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_49;
    }
    BOOL v18 = (char *)__nw_create_backtrace_string();
    char v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v19 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v19) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_get_remote_endpoint";
      __int16 v15 = "%{public}s called with null masque, no backtrace";
      goto LABEL_49;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_masque_get_remote_endpoint";
      __int16 v24 = 2082;
      BOOL v25 = v18;
      _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v18);
LABEL_50:
    if (!v12) {
      return 0;
    }
LABEL_51:
    free(v12);
    return 0;
  }
  uint64_t v3 = (void *)*((void *)handle + 43);
  if (!v3) {
    goto LABEL_16;
  }
  uint64_t v4 = v3;
  if (!*((void *)v4 + 3))
  {

    uint64_t result = (nw_protocol *)*((void *)handle + 38);
    if (result) {
      return result;
    }
LABEL_16:
    uint64_t result = a1->default_input_handler;
    if (!result) {
      return result;
    }
    callbacks = result->callbacks;
    if (callbacks)
    {
      get_remote_endpoint = (uint64_t (*)(void))callbacks->get_remote_endpoint;
      if (get_remote_endpoint)
      {
        return (nw_protocol *)get_remote_endpoint();
      }
    }
    return 0;
  }
  int v5 = v4[152];

  if (v5)
  {
    id v6 = nw_protocol_options_copy_proxy_endpoint_for_stack(*((void **)handle + 43));
    if (v6)
    {
      os_log_type_t v7 = v6;
      BOOL v8 = (void *)*((void *)handle + 38);
      if (v8 != v7)
      {
        if (v8)
        {
          os_release(v8);
          *((void *)handle + 38) = 0;
        }
        *((void *)handle + 38) = os_retain(v7);
      }
      os_release(v7);
    }
  }
  uint64_t result = (nw_protocol *)*((void *)handle + 38);
  if (!result) {
    goto LABEL_16;
  }
  return result;
}

void nw_protocol_masque_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v42 = "nw_protocol_masque_input_finished";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v8, &type, &v39)) {
      goto LABEL_80;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v42 = "nw_protocol_masque_input_finished";
      BOOL v11 = "%{public}s called with null protocol";
LABEL_67:
      v30 = v9;
      os_log_type_t v31 = v10;
      uint32_t v32 = 12;
LABEL_79:
      _os_log_impl(&dword_1830D4000, v30, v31, v11, buf, v32);
      goto LABEL_80;
    }
    if (!v39)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v42 = "nw_protocol_masque_input_finished";
      BOOL v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v22 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v42 = "nw_protocol_masque_input_finished";
      BOOL v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_67;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v42 = "nw_protocol_masque_input_finished";
      __int16 v43 = 2082;
      nw_protocol_stack_t v44 = backtrace_string;
      v23 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_48:
      _os_log_impl(&dword_1830D4000, v9, v10, v23, buf, 0x16u);
    }
LABEL_49:
    free(backtrace_string);
    if (!v8) {
      return;
    }
LABEL_81:
    free(v8);
    return;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v42 = "nw_protocol_masque_input_finished";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v8, &type, &v39)) {
      goto LABEL_80;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v42 = "nw_protocol_masque_input_finished";
      BOOL v11 = "%{public}s called with null masque";
      goto LABEL_67;
    }
    if (!v39)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v42 = "nw_protocol_masque_input_finished";
      BOOL v11 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v24 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v24) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v42 = "nw_protocol_masque_input_finished";
      BOOL v11 = "%{public}s called with null masque, no backtrace";
      goto LABEL_67;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v42 = "nw_protocol_masque_input_finished";
      __int16 v43 = 2082;
      nw_protocol_stack_t v44 = backtrace_string;
      v23 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_48;
    }
    goto LABEL_49;
  }
  if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    BOOL v12 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v42 = "nw_protocol_masque_input_finished";
      __int16 v43 = 2082;
      nw_protocol_stack_t v44 = handle + 531;
      __int16 v45 = 2080;
      char v46 = " ";
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (*((_DWORD *)handle + 127) != 2 && !*((_DWORD *)handle + 129))
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        input_finished = (void (*)(void))callbacks->input_finished;
        if (input_finished)
        {
          input_finished();
          return;
        }
      }
    }
    __nwlog_obj();
    char v13 = a1->default_input_handler;
    os_log_type_t v14 = "invalid";
    if (v13)
    {
      identifier = v13->identifier;
      if (identifier) {
        os_log_type_t v14 = (const char *)identifier;
      }
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v42 = "nw_protocol_masque_input_finished";
    __int16 v43 = 2082;
    nw_protocol_stack_t v44 = (char *)v14;
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v8, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_80;
        }
        BOOL v18 = a1->default_input_handler;
        BOOL v19 = "invalid";
        if (v18)
        {
          char v20 = v18->identifier;
          if (v20) {
            BOOL v19 = (const char *)v20;
          }
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v42 = "nw_protocol_masque_input_finished";
        __int16 v43 = 2082;
        nw_protocol_stack_t v44 = (char *)v19;
        BOOL v11 = "%{public}s protocol %{public}s has invalid input_finished callback";
LABEL_78:
        v30 = v16;
        os_log_type_t v31 = v17;
        uint32_t v32 = 22;
        goto LABEL_79;
      }
      if (!v39)
      {
        __int16 v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_80;
        }
        nw_protocol_stack_t v33 = a1->default_input_handler;
        BOOL v34 = "invalid";
        if (v33)
        {
          v35 = v33->identifier;
          if (v35) {
            BOOL v34 = (const char *)v35;
          }
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v42 = "nw_protocol_masque_input_finished";
        __int16 v43 = 2082;
        nw_protocol_stack_t v44 = (char *)v34;
        BOOL v11 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
        goto LABEL_78;
      }
      BOOL v25 = (char *)__nw_create_backtrace_string();
      __int16 v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v26 = os_log_type_enabled(v16, type);
      if (!v25)
      {
        if (!v26) {
          goto LABEL_80;
        }
        v36 = a1->default_input_handler;
        v37 = "invalid";
        if (v36)
        {
          os_log_type_t v38 = v36->identifier;
          if (v38) {
            v37 = (const char *)v38;
          }
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v42 = "nw_protocol_masque_input_finished";
        __int16 v43 = 2082;
        nw_protocol_stack_t v44 = (char *)v37;
        BOOL v11 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
        goto LABEL_78;
      }
      if (v26)
      {
        v27 = a1->default_input_handler;
        os_log_type_t v28 = "invalid";
        if (v27)
        {
          os_log_type_t v29 = v27->identifier;
          if (v29) {
            os_log_type_t v28 = (const char *)v29;
          }
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v42 = "nw_protocol_masque_input_finished";
        __int16 v43 = 2082;
        nw_protocol_stack_t v44 = (char *)v28;
        __int16 v45 = 2082;
        char v46 = v25;
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v25);
    }
LABEL_80:
    if (!v8) {
      return;
    }
    goto LABEL_81;
  }
  if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v4 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v42 = "nw_protocol_masque_input_finished";
      __int16 v43 = 2082;
      nw_protocol_stack_t v44 = handle + 531;
      __int16 v45 = 2080;
      char v46 = " ";
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%signoring input_finished, receiving connect", buf, 0x20u);
    }
  }
}

void nw_protocol_masque_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
    v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v83) = 0;
    if (!__nwlog_fault(v23, type, &v83)) {
      goto LABEL_99;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
      BOOL v26 = "%{public}s called with null protocol";
      goto LABEL_98;
    }
    if (!(_BYTE)v83)
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
      BOOL v26 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_98;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v24 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v38 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (!v38) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
      BOOL v26 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_98;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_99:
    if (!v23) {
      return;
    }
    goto LABEL_100;
  }
  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
    v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v83) = 0;
    if (!__nwlog_fault(v23, type, &v83)) {
      goto LABEL_99;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
      BOOL v26 = "%{public}s called with null masque";
      goto LABEL_98;
    }
    if (!(_BYTE)v83)
    {
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
      BOOL v26 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_98;
    }
    char v39 = (char *)__nw_create_backtrace_string();
    BOOL v24 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v40 = os_log_type_enabled(v24, type[0]);
    if (v39)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v39;
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v39);
      if (!v23) {
        return;
      }
LABEL_100:
      free(v23);
      return;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
      BOOL v26 = "%{public}s called with null masque, no backtrace";
LABEL_98:
      _os_log_impl(&dword_1830D4000, v24, v25, v26, buf, 0xCu);
      goto LABEL_99;
    }
    goto LABEL_99;
  }
  uint64_t v4 = handle + 1;
  uint64_t v5 = 32;
  if (&handle[1] == a1)
  {
    uint64_t v5 = 96;
    uint64_t v6 = 512;
  }
  else
  {
    uint64_t v6 = 508;
  }
  int v7 = *(_DWORD *)&handle->flow_id[v6];
  if (v7 != 4)
  {
    if ((v7 & 0xFFFFFFFE) != 2) {
      return;
    }
    uint64_t v11 = *(void *)&handle->flow_id[v5];
    BOOL v12 = v4 == a1;
    if (v4 == a1)
    {
      do
      {
        uint64_t v83 = 0;
        v84 = &v83;
        if (!(*(unsigned int (**)(uint64_t, nw_protocol *, void, void, uint64_t, uint64_t *))(*(void *)(v11 + 24) + 80))(v11, a1, 0, 0, 1, &v83))break; {
        *(void *)buf = 0;
        }
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000;
        LOBYTE(v92) = 0;
        uint64_t v75 = MEMORY[0x1E4F143A8];
        uint64_t v76 = 0x40000000;
        v77 = (uint64_t (*)(uint64_t *))___ZL34nw_protocol_masque_input_availableP11nw_protocolS0__block_invoke;
        v78 = &unk_1E523EA98;
        int v79 = buf;
        v80 = handle;
        BOOL v82 = v12;
        int v81 = v7;
        uint64_t v16 = v83;
        do
        {
          if (!v16) {
            break;
          }
          uint64_t v17 = *(void *)(v16 + 32);
          char v18 = v77(&v75);
          uint64_t v16 = v17;
        }
        while ((v18 & 1) != 0);
        int v7 = *(_DWORD *)&handle->flow_id[v6];
        _Block_object_dispose(buf, 8);
      }
      while ((v7 & 0xFFFFFFFE) == 2);
      return;
    }
    while (1)
    {
      uint64_t v83 = 0;
      v84 = &v83;
      if (!(*(unsigned int (**)(uint64_t, nw_protocol *, void, void, uint64_t, uint64_t *))(*(void *)(v11 + 24) + 80))(v11, a1, 0, 0, 1, &v83))return; {
      *(void *)buf = 0;
      }
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      LOBYTE(v92) = 0;
      uint64_t v75 = MEMORY[0x1E4F143A8];
      uint64_t v76 = 0x40000000;
      v77 = (uint64_t (*)(uint64_t *))___ZL34nw_protocol_masque_input_availableP11nw_protocolS0__block_invoke;
      v78 = &unk_1E523EA98;
      int v79 = buf;
      v80 = handle;
      BOOL v82 = v12;
      int v81 = v7;
      uint64_t v13 = v83;
      do
      {
        if (!v13) {
          break;
        }
        uint64_t v14 = *(void *)(v13 + 32);
        char v15 = v77(&v75);
        uint64_t v13 = v14;
      }
      while ((v15 & 1) != 0);
      int v7 = *(_DWORD *)&handle->flow_id[v6];
      if (v7 == 4) {
        break;
      }
      _Block_object_dispose(buf, 8);
      if ((v7 & 0xFFFFFFFE) != 2) {
        return;
      }
    }
    default_input_handler = handle->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        input_available = (void (*)(void))callbacks->input_available;
        if (input_available)
        {
          input_available();
LABEL_36:
          _Block_object_dispose(buf, 8);
          return;
        }
      }
    }
    __nwlog_obj();
    char v46 = handle->default_input_handler;
    uint64_t v47 = "invalid";
    if (v46)
    {
      name = v46->identifier->name;
      if (name) {
        uint64_t v47 = name;
      }
    }
    *(_DWORD *)os_log_type_t type = 136446466;
    v86 = "nw_protocol_masque_input_available";
    __int16 v87 = 2082;
    v88 = v47;
    v49 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v74 = OS_LOG_TYPE_ERROR;
    char v73 = 0;
    if (__nwlog_fault(v49, &v74, &v73))
    {
      if (v74 == OS_LOG_TYPE_FAULT)
      {
        __int16 v50 = __nwlog_obj();
        os_log_type_t v51 = v74;
        if (!os_log_type_enabled(v50, v74)) {
          goto LABEL_128;
        }
        uint64_t v52 = handle->default_input_handler;
        v53 = "invalid";
        if (v52)
        {
          BOOL v54 = v52->identifier->name;
          if (v54) {
            v53 = v54;
          }
        }
        *(_DWORD *)os_log_type_t type = 136446466;
        v86 = "nw_protocol_masque_input_available";
        __int16 v87 = 2082;
        v88 = v53;
        v55 = "%{public}s protocol %{public}s has invalid input_available callback";
        goto LABEL_127;
      }
      if (!v73)
      {
        __int16 v50 = __nwlog_obj();
        os_log_type_t v51 = v74;
        if (!os_log_type_enabled(v50, v74)) {
          goto LABEL_128;
        }
        id v67 = handle->default_input_handler;
        v68 = "invalid";
        if (v67)
        {
          int v69 = v67->identifier->name;
          if (v69) {
            v68 = v69;
          }
        }
        *(_DWORD *)os_log_type_t type = 136446466;
        v86 = "nw_protocol_masque_input_available";
        __int16 v87 = 2082;
        v88 = v68;
        v55 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
        goto LABEL_127;
      }
      v62 = (char *)__nw_create_backtrace_string();
      __int16 v50 = __nwlog_obj();
      os_log_type_t v51 = v74;
      BOOL v63 = os_log_type_enabled(v50, v74);
      if (v62)
      {
        if (v63)
        {
          v64 = handle->default_input_handler;
          nw_protocol_stack_t v65 = "invalid";
          if (v64)
          {
            v66 = v64->identifier->name;
            if (v66) {
              nw_protocol_stack_t v65 = v66;
            }
          }
          *(_DWORD *)os_log_type_t type = 136446722;
          v86 = "nw_protocol_masque_input_available";
          __int16 v87 = 2082;
          v88 = v65;
          __int16 v89 = 2082;
          v90 = v62;
          _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", (uint8_t *)type, 0x20u);
        }
        free(v62);
        goto LABEL_128;
      }
      if (v63)
      {
        v70 = handle->default_input_handler;
        v71 = "invalid";
        if (v70)
        {
          v72 = v70->identifier->name;
          if (v72) {
            v71 = v72;
          }
        }
        *(_DWORD *)os_log_type_t type = 136446466;
        v86 = "nw_protocol_masque_input_available";
        __int16 v87 = 2082;
        v88 = v71;
        v55 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_127:
        _os_log_impl(&dword_1830D4000, v50, v51, v55, (uint8_t *)type, 0x16u);
      }
    }
LABEL_128:
    if (v49) {
      free(v49);
    }
    goto LABEL_36;
  }
  if ((handle[8].flow_id[15] & 0x10) == 0)
  {
    BOOL v8 = handle->default_input_handler;
    if (v8)
    {
      BOOL v9 = v8->callbacks;
      if (v9)
      {
        os_log_type_t v10 = (void (*)(void))v9->input_available;
        if (v10)
        {
          v10();
          return;
        }
      }
    }
    __nwlog_obj();
    v27 = handle->default_input_handler;
    os_log_type_t v28 = "invalid";
    if (v27)
    {
      os_log_type_t v29 = v27->identifier->name;
      if (v29) {
        os_log_type_t v28 = v29;
      }
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v28;
    v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v83) = 0;
    if (!__nwlog_fault(v30, type, &v83)) {
      goto LABEL_107;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v31 = __nwlog_obj();
      os_log_type_t v32 = type[0];
      if (!os_log_type_enabled(v31, type[0])) {
        goto LABEL_107;
      }
      nw_protocol_stack_t v33 = handle->default_input_handler;
      BOOL v34 = "invalid";
      if (v33)
      {
        v35 = v33->identifier->name;
        if (v35) {
          BOOL v34 = v35;
        }
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v34;
      v36 = "%{public}s protocol %{public}s has invalid input_available callback";
    }
    else if ((_BYTE)v83)
    {
      v41 = (char *)__nw_create_backtrace_string();
      os_log_type_t v31 = __nwlog_obj();
      os_log_type_t v32 = type[0];
      BOOL v42 = os_log_type_enabled(v31, type[0]);
      if (v41)
      {
        if (v42)
        {
          __int16 v43 = handle->default_input_handler;
          nw_protocol_stack_t v44 = "invalid";
          if (v43)
          {
            __int16 v45 = v43->identifier->name;
            if (v45) {
              nw_protocol_stack_t v44 = v45;
            }
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v44;
          *(_WORD *)&buf[22] = 2082;
          v92 = v41;
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v41);
        goto LABEL_107;
      }
      if (!v42)
      {
LABEL_107:
        if (v30) {
          free(v30);
        }
        return;
      }
      v59 = handle->default_input_handler;
      v60 = "invalid";
      if (v59)
      {
        v61 = v59->identifier->name;
        if (v61) {
          v60 = v61;
        }
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v60;
      v36 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
    }
    else
    {
      os_log_type_t v31 = __nwlog_obj();
      os_log_type_t v32 = type[0];
      if (!os_log_type_enabled(v31, type[0])) {
        goto LABEL_107;
      }
      v56 = handle->default_input_handler;
      v57 = "invalid";
      if (v56)
      {
        v58 = v56->identifier->name;
        if (v58) {
          v57 = v58;
        }
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_input_available";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v57;
      v36 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v31, v32, v36, buf, 0x16u);
    goto LABEL_107;
  }
  BOOL v19 = a1->handle;

  nw_protocol_masque_listener_read_input((uint64_t)v19, 0, 0, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
}

uint64_t ___ZL34nw_protocol_masque_input_availableP11nw_protocolS0__block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t v211 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (!v4 || (*(unsigned char *)(v4 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v5 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        BOOL v7 = v6 == 0;
        if (v6) {
          BOOL v8 = (const char *)(v6 + 531);
        }
        else {
          BOOL v8 = "";
        }
        BOOL v9 = " ";
        if (v7) {
          BOOL v9 = "";
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = v8;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v9;
        os_log_type_t v10 = "%{public}s%sReceived unexpected input frame when not waiting for a response";
LABEL_13:
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, v10, buf, 0x16u);
        goto LABEL_242;
      }
    }
    goto LABEL_242;
  }
  int v11 = nw_frame_unclaimed_length(a2);
  if (v11)
  {
    int v12 = v11;
    uint64_t v13 = *(void *)(a1 + 40);
    if (!v13 || (*(unsigned char *)(v13 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v14 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        BOOL v16 = v15 == 0;
        if (v15) {
          uint64_t v17 = (const char *)(v15 + 531);
        }
        else {
          uint64_t v17 = "";
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = v17;
        char v18 = " ";
        if (v16) {
          char v18 = "";
        }
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v18;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v199) = v12;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s%sReceived unexpected input frame of length %u", buf, 0x1Cu);
      }
    }
  }
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  id v19 = (id)nw_protocol_copy_http_definition_http_definition;
  char v20 = nw_frame_copy_metadata_for_protocol((uint64_t)a2, (uint64_t)v19);
  if (v19) {
    os_release(v19);
  }
  if (v20)
  {
    if (*(unsigned char *)(a1 + 52))
    {
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21)
      {
        if (nw_protocol_metadata_is_http(v20))
        {
          id v22 = nw_http_metadata_copy_response(v20);
          if (v22)
          {
            id v23 = v22;
            int status_code = _nw_http_response_get_status_code();

            if (!status_code) {
              goto LABEL_240;
            }
            if (status_code == 200)
            {
              id v25 = v23;
              char have_field_with_name = _nw_http_fields_have_field_with_name((uint64_t)v25, (unint64_t)"Server-Connection-Id");

              *(void *)v188 = 0;
              *(void *)&v188[8] = v188;
              *(void *)&v188[16] = 0x2000000000;
              v189[0] = 0;
              *(void *)os_log_type_t type = 0;
              uint64_t v156 = (uint64_t)type;
              uint64_t v157 = 0x2000000000;
              LOBYTE(v158) = 0;
              *(void *)buf = MEMORY[0x1E4F143A8];
              *(void *)&buf[8] = 0x40000000;
              *(void *)&buf[16] = ___ZL40nw_masque_handle_server_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke;
              v199 = &unk_1E523EB58;
              v200 = (os_log_type_t *)v188;
              v201 = type;
              v202 = (os_log_type_t *)v21;
              id v27 = v25;
              os_log_type_t v28 = buf;
              _nw_http_fields_access_value_by_name((uint64_t)v27, (unint64_t)"Datagram-Flow-Id", v28);

              if (have_field_with_name)
              {
                if (*(unsigned char *)(*(void *)&v188[8] + 24))
                {
                  int v29 = *(_DWORD *)(v21 + 527);
                  if (*(unsigned char *)(v156 + 24))
                  {
                    if ((v29 & 0x10000) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                      }
                      v30 = gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)v207 = 136446466;
                        *(void *)&v207[4] = v21 + 531;
                        *(_WORD *)&v207[12] = 2080;
                        *(void *)&v207[14] = " ";
                        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_INFO, "%{public}s%sReceived 200 OK, forwarding allowed", v207, 0x16u);
                      }
                    }
                    *(_DWORD *)(v21 + 512) = 4;
                    goto LABEL_143;
                  }
                  if ((v29 & 0x10000) != 0) {
                    goto LABEL_142;
                  }
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                  }
                  v49 = gprivacy_proxyLogObj;
                  if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                  {
LABEL_142:
                    nw_masque_mark_failed_with_error(v21, 94);
LABEL_143:
                    _Block_object_dispose(type, 8);
                    v70 = (os_log_type_t *)v188;
LABEL_239:
                    _Block_object_dispose(v70, 8);
                    goto LABEL_240;
                  }
                  *(_DWORD *)v207 = 136446466;
                  *(void *)&v207[4] = v21 + 531;
                  *(_WORD *)&v207[12] = 2080;
                  *(void *)&v207[14] = " ";
                  __int16 v50 = "%{public}s%sReceived response without invalid datagram flow ID";
                }
                else
                {
                  if (*(unsigned char *)(v21 + 529)) {
                    goto LABEL_142;
                  }
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                  }
                  v49 = gprivacy_proxyLogObj;
                  if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_142;
                  }
                  *(_DWORD *)v207 = 136446466;
                  *(void *)&v207[4] = v21 + 531;
                  *(_WORD *)&v207[12] = 2080;
                  *(void *)&v207[14] = " ";
                  __int16 v50 = "%{public}s%sReceived response without datagram flow ID";
                }
              }
              else
              {
                if (*(unsigned char *)(v21 + 529)) {
                  goto LABEL_142;
                }
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                v49 = gprivacy_proxyLogObj;
                if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_142;
                }
                *(_DWORD *)v207 = 136446466;
                *(void *)&v207[4] = v21 + 531;
                *(_WORD *)&v207[12] = 2080;
                *(void *)&v207[14] = " ";
                __int16 v50 = "%{public}s%sReceived response without server Connection ID";
              }
              _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_ERROR, v50, v207, 0x16u);
              goto LABEL_142;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v37 = gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
LABEL_240:
              os_release(v23);
              goto LABEL_241;
            }
            *(_DWORD *)v188 = 136446466;
            *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
            *(_WORD *)&v188[12] = 1024;
            *(_DWORD *)&v188[14] = status_code;
            BOOL v38 = "%{public}s Received response code %u, forwarding not allowed";
            char v39 = v37;
            os_log_type_t v40 = OS_LOG_TYPE_ERROR;
            uint32_t v41 = 18;
LABEL_61:
            _os_log_impl(&dword_1830D4000, v39, v40, v38, v188, v41);
            goto LABEL_240;
          }
          __nwlog_obj();
          *(_DWORD *)v188 = 136446210;
          *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
          BOOL v103 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          v207[0] = 0;
          if (!__nwlog_fault(v103, type, v207)) {
            goto LABEL_367;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v104 = __nwlog_obj();
            os_log_type_t v105 = type[0];
            if (!os_log_type_enabled(v104, type[0])) {
              goto LABEL_367;
            }
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
            v106 = "%{public}s called with null response";
            goto LABEL_366;
          }
          if (!v207[0])
          {
            v104 = __nwlog_obj();
            os_log_type_t v105 = type[0];
            if (!os_log_type_enabled(v104, type[0])) {
              goto LABEL_367;
            }
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
            v106 = "%{public}s called with null response, backtrace limit exceeded";
            goto LABEL_366;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v104 = __nwlog_obj();
          os_log_type_t v105 = type[0];
          BOOL v112 = os_log_type_enabled(v104, type[0]);
          if (!backtrace_string)
          {
            if (!v112) {
              goto LABEL_367;
            }
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
            v106 = "%{public}s called with null response, no backtrace";
            goto LABEL_366;
          }
          if (v112)
          {
            *(_DWORD *)v188 = 136446466;
            *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
            *(_WORD *)&v188[12] = 2082;
            *(void *)&v188[14] = backtrace_string;
            uint64_t v111 = "%{public}s called with null response, dumping backtrace:%{public}s";
            goto LABEL_303;
          }
          goto LABEL_304;
        }
        __nwlog_obj();
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
        BOOL v103 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v207[0] = 0;
        if (!__nwlog_fault(v103, type, v207)) {
          goto LABEL_367;
        }
        if (type[0] != OS_LOG_TYPE_FAULT)
        {
          if (!v207[0])
          {
            v104 = __nwlog_obj();
            os_log_type_t v105 = type[0];
            if (!os_log_type_enabled(v104, type[0])) {
              goto LABEL_367;
            }
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
            v106 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), backtrace limit exceeded";
            goto LABEL_366;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v104 = __nwlog_obj();
          os_log_type_t v105 = type[0];
          BOOL v110 = os_log_type_enabled(v104, type[0]);
          if (!backtrace_string)
          {
            if (!v110) {
              goto LABEL_367;
            }
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
            v106 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), no backtrace";
            goto LABEL_366;
          }
          if (v110)
          {
            *(_DWORD *)v188 = 136446466;
            *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
            *(_WORD *)&v188[12] = 2082;
            *(void *)&v188[14] = backtrace_string;
            uint64_t v111 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), dumping backtrace:%{public}s";
LABEL_303:
            _os_log_impl(&dword_1830D4000, v104, v105, v111, v188, 0x16u);
          }
LABEL_304:
          free(backtrace_string);
          if (!v103) {
            goto LABEL_241;
          }
          goto LABEL_368;
        }
        v104 = __nwlog_obj();
        os_log_type_t v105 = type[0];
        if (!os_log_type_enabled(v104, type[0])) {
          goto LABEL_367;
        }
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
        v106 = "%{public}s called with null nw_protocol_metadata_is_http(metadata)";
      }
      else
      {
        __nwlog_obj();
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
        BOOL v103 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v207[0] = 0;
        if (!__nwlog_fault(v103, type, v207)) {
          goto LABEL_367;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v104 = __nwlog_obj();
          os_log_type_t v105 = type[0];
          if (!os_log_type_enabled(v104, type[0])) {
            goto LABEL_367;
          }
          *(_DWORD *)v188 = 136446210;
          *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
          v106 = "%{public}s called with null masque";
        }
        else if (v207[0])
        {
          uint64_t v107 = (char *)__nw_create_backtrace_string();
          v104 = __nwlog_obj();
          os_log_type_t v105 = type[0];
          BOOL v108 = os_log_type_enabled(v104, type[0]);
          if (v107)
          {
            if (v108)
            {
              *(_DWORD *)v188 = 136446466;
              *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
              *(_WORD *)&v188[12] = 2082;
              *(void *)&v188[14] = v107;
              _os_log_impl(&dword_1830D4000, v104, v105, "%{public}s called with null masque, dumping backtrace:%{public}s", v188, 0x16u);
            }
            free(v107);
LABEL_367:
            if (!v103) {
              goto LABEL_241;
            }
LABEL_368:
            free(v103);
            goto LABEL_241;
          }
          if (!v108) {
            goto LABEL_367;
          }
          *(_DWORD *)v188 = 136446210;
          *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
          v106 = "%{public}s called with null masque, no backtrace";
        }
        else
        {
          v104 = __nwlog_obj();
          os_log_type_t v105 = type[0];
          if (!os_log_type_enabled(v104, type[0])) {
            goto LABEL_367;
          }
          *(_DWORD *)v188 = 136446210;
          *(void *)&v188[4] = "nw_masque_handle_server_connect_response";
          v106 = "%{public}s called with null masque, backtrace limit exceeded";
        }
      }
LABEL_366:
      _os_log_impl(&dword_1830D4000, v104, v105, v106, v188, 0xCu);
      goto LABEL_367;
    }
    uint64_t v36 = *(void *)(a1 + 40);
    if (*(_DWORD *)(a1 + 48) == 3)
    {
      nw_masque_handle_capsule(*(void *)(a1 + 40), v20);
LABEL_241:
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      os_release(v20);
      goto LABEL_242;
    }
    if (!v36)
    {
      __nwlog_obj();
      *(_DWORD *)v188 = 136446210;
      *(void *)&v188[4] = "nw_masque_handle_connect_response";
      BOOL v103 = (char *)_os_log_send_and_compose_impl();
      v180[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v176) = 0;
      if (!__nwlog_fault(v103, v180, &v176)) {
        goto LABEL_367;
      }
      if (v180[0] == OS_LOG_TYPE_FAULT)
      {
        v104 = __nwlog_obj();
        os_log_type_t v105 = v180[0];
        if (!os_log_type_enabled(v104, v180[0])) {
          goto LABEL_367;
        }
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_handle_connect_response";
        v106 = "%{public}s called with null masque";
        goto LABEL_366;
      }
      if (!(_BYTE)v176)
      {
        v104 = __nwlog_obj();
        os_log_type_t v105 = v180[0];
        if (!os_log_type_enabled(v104, v180[0])) {
          goto LABEL_367;
        }
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_handle_connect_response";
        v106 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_366;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v104 = __nwlog_obj();
      os_log_type_t v105 = v180[0];
      BOOL v113 = os_log_type_enabled(v104, v180[0]);
      if (!backtrace_string)
      {
        if (!v113) {
          goto LABEL_367;
        }
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_handle_connect_response";
        v106 = "%{public}s called with null masque, no backtrace";
        goto LABEL_366;
      }
      if (v113)
      {
        *(_DWORD *)v188 = 136446466;
        *(void *)&v188[4] = "nw_masque_handle_connect_response";
        *(_WORD *)&v188[12] = 2082;
        *(void *)&v188[14] = backtrace_string;
        uint64_t v111 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_303;
      }
      goto LABEL_304;
    }
    if (!nw_protocol_metadata_is_http(v20))
    {
      __nwlog_obj();
      *(_DWORD *)v188 = 136446210;
      *(void *)&v188[4] = "nw_masque_handle_connect_response";
      BOOL v103 = (char *)_os_log_send_and_compose_impl();
      v180[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v176) = 0;
      if (!__nwlog_fault(v103, v180, &v176)) {
        goto LABEL_367;
      }
      if (v180[0] == OS_LOG_TYPE_FAULT)
      {
        v104 = __nwlog_obj();
        os_log_type_t v105 = v180[0];
        if (!os_log_type_enabled(v104, v180[0])) {
          goto LABEL_367;
        }
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_handle_connect_response";
        v106 = "%{public}s called with null nw_protocol_metadata_is_http(metadata)";
        goto LABEL_366;
      }
      if (!(_BYTE)v176)
      {
        v104 = __nwlog_obj();
        os_log_type_t v105 = v180[0];
        if (!os_log_type_enabled(v104, v180[0])) {
          goto LABEL_367;
        }
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_handle_connect_response";
        v106 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), backtrace limit exceeded";
        goto LABEL_366;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v104 = __nwlog_obj();
      os_log_type_t v105 = v180[0];
      BOOL v114 = os_log_type_enabled(v104, v180[0]);
      if (!backtrace_string)
      {
        if (!v114) {
          goto LABEL_367;
        }
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_handle_connect_response";
        v106 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), no backtrace";
        goto LABEL_366;
      }
      if (v114)
      {
        *(_DWORD *)v188 = 136446466;
        *(void *)&v188[4] = "nw_masque_handle_connect_response";
        *(_WORD *)&v188[12] = 2082;
        *(void *)&v188[14] = backtrace_string;
        uint64_t v111 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), dumping backtrace:%{public}s";
        goto LABEL_303;
      }
      goto LABEL_304;
    }
    id v42 = nw_http_metadata_copy_response(v20);
    if (!v42)
    {
      __nwlog_obj();
      *(_DWORD *)v188 = 136446210;
      *(void *)&v188[4] = "nw_masque_handle_connect_response";
      BOOL v103 = (char *)_os_log_send_and_compose_impl();
      v180[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v176) = 0;
      if (!__nwlog_fault(v103, v180, &v176)) {
        goto LABEL_367;
      }
      if (v180[0] == OS_LOG_TYPE_FAULT)
      {
        v104 = __nwlog_obj();
        os_log_type_t v105 = v180[0];
        if (!os_log_type_enabled(v104, v180[0])) {
          goto LABEL_367;
        }
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_handle_connect_response";
        v106 = "%{public}s called with null response";
        goto LABEL_366;
      }
      if (!(_BYTE)v176)
      {
        v104 = __nwlog_obj();
        os_log_type_t v105 = v180[0];
        if (!os_log_type_enabled(v104, v180[0])) {
          goto LABEL_367;
        }
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_handle_connect_response";
        v106 = "%{public}s called with null response, backtrace limit exceeded";
        goto LABEL_366;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v104 = __nwlog_obj();
      os_log_type_t v105 = v180[0];
      BOOL v115 = os_log_type_enabled(v104, v180[0]);
      if (!backtrace_string)
      {
        if (!v115) {
          goto LABEL_367;
        }
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_handle_connect_response";
        v106 = "%{public}s called with null response, no backtrace";
        goto LABEL_366;
      }
      if (v115)
      {
        *(_DWORD *)v188 = 136446466;
        *(void *)&v188[4] = "nw_masque_handle_connect_response";
        *(_WORD *)&v188[12] = 2082;
        *(void *)&v188[14] = backtrace_string;
        uint64_t v111 = "%{public}s called with null response, dumping backtrace:%{public}s";
        goto LABEL_303;
      }
      goto LABEL_304;
    }
    id v23 = v42;
    int v43 = _nw_http_response_get_status_code();

    if ((v43 - 200) <= 0x63)
    {
      nw_protocol_stack_t v44 = (unsigned char *)(v36 + 527);
      int v45 = *(_DWORD *)(v36 + 527);
      if ((v45 & 8) != 0)
      {
        v186[0] = MEMORY[0x1E4F143A8];
        v186[1] = 0x40000000;
        v186[2] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke;
        v186[3] = &__block_descriptor_tmp_166;
        v186[4] = v36;
        nw_http_fields_access_value_by_name(v23, (unint64_t)"Datagram-Flow-Id", v186);
        if (nw_http_fields_have_field_with_name(v23, (unint64_t)"Client-Connection-Id"))
        {
          int v46 = *(_DWORD *)v44;
          *(_DWORD *)v44 |= 0x100080u;
          if ((v46 & 0x10000) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            uint64_t v47 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v188 = 136446466;
              *(void *)&v188[4] = v36 + 531;
              *(_WORD *)&v188[12] = 2080;
              *(void *)&v188[14] = " ";
              _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_INFO, "%{public}s%sReceived acked client CID, server supports forwarding", v188, 0x16u);
            }
          }
        }
        v185[0] = MEMORY[0x1E4F143A8];
        v185[1] = 0x40000000;
        v185[2] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_167;
        v185[3] = &__block_descriptor_tmp_168;
        v185[4] = v36;
        nw_http_fields_access_value_by_name(v23, (unint64_t)"Proxy-QUIC-Forwarding", v185);
        if (*(_DWORD *)(v36 + 504) == 1)
        {
          int v45 = *(_DWORD *)v44;
          if (!*(unsigned char *)(v36 + 615))
          {
            if ((v45 & 0x10000) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
              }
              BOOL v48 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v188 = 136446466;
                *(void *)&v188[4] = v36 + 531;
                *(_WORD *)&v188[12] = 2080;
                *(void *)&v188[14] = " ";
                _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_ERROR, "%{public}s%sReceived response without datagram flow ID", v188, 0x16u);
              }
            }
            nw_masque_mark_failed_with_error(v36, 94);
            goto LABEL_240;
          }
        }
        else
        {
          int v45 = *(_DWORD *)v44;
        }
      }
      if ((v45 & 0x40000) != 0)
      {
        v184[0] = MEMORY[0x1E4F143A8];
        v184[1] = 0x40000000;
        v184[2] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_169;
        v184[3] = &__block_descriptor_tmp_170;
        v184[4] = v36;
        nw_http_fields_access_value_by_name(v23, (unint64_t)"Capsule-Protocol", v184);
      }
      *(void *)v180 = 0;
      v181 = v180;
      uint64_t v182 = 0x2000000000;
      char v183 = 0;
      uint64_t v176 = 0;
      v177 = &v176;
      uint64_t v178 = 0x2000000000;
      char v179 = 0;
      uint64_t v172 = 0;
      v173 = &v172;
      int v175 = 0;
      uint64_t v174 = 0x2000000000;
      uint64_t v168 = 0;
      v169 = &v168;
      uint64_t v170 = 0x2000000000;
      uint64_t v171 = 0;
      uint64_t v164 = 0;
      v165 = &v164;
      uint64_t v166 = 0x2000000000;
      uint64_t v167 = 0;
      *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
      uint64_t v156 = 0x40000000;
      uint64_t v157 = (uint64_t)___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_2;
      v158 = &unk_1E523EBE0;
      v159 = v180;
      v160 = &v176;
      v162 = &v164;
      uint64_t v163 = v36;
      v161 = &v168;
      nw_http_fields_access_value_by_name(v23, (unint64_t)"Proxy-Status", type);
      v154[0] = MEMORY[0x1E4F143A8];
      v154[1] = 0x40000000;
      v154[2] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_3;
      v154[3] = &__block_descriptor_tmp_174;
      v154[4] = v36;
      nw_http_fields_access_value_by_name(v23, (unint64_t)"Client-Geohash", v154);
      *(void *)v207 = MEMORY[0x1E4F143A8];
      *(void *)&v207[8] = 0x40000000;
      *(void *)&v207[16] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_4;
      v208 = &unk_1E523EC28;
      v209 = &v172;
      uint64_t v210 = v36;
      nw_http_fields_access_value_by_name(v23, (unint64_t)"Proxy-Config-Epoch", v207);
      if (v169[3] && (*(unsigned char *)(v36 + 529) & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        v124 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v125 = v169[3];
          *(_DWORD *)v188 = 136446978;
          *(void *)&v188[4] = "nw_masque_handle_connect_response";
          *(_WORD *)&v188[12] = 2082;
          *(void *)&v188[14] = v36 + 531;
          *(_WORD *)&v188[22] = 2080;
          *(void *)v189 = " ";
          *(_WORD *)&v189[8] = 2112;
          *(void *)&v189[10] = v125;
          _os_log_impl(&dword_1830D4000, v124, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived next hop: %@", v188, 0x2Au);
        }
      }
      if (v165[3] && (*(unsigned char *)(v36 + 529) & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        v126 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v127 = v165[3];
          *(_DWORD *)v188 = 136446978;
          *(void *)&v188[4] = "nw_masque_handle_connect_response";
          *(_WORD *)&v188[12] = 2082;
          *(void *)&v188[14] = v36 + 531;
          *(_WORD *)&v188[22] = 2080;
          *(void *)v189 = " ";
          *(_WORD *)&v189[8] = 2112;
          *(void *)&v189[10] = v127;
          _os_log_impl(&dword_1830D4000, v126, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived next hop aliases: %@", v188, 0x2Au);
        }
      }
      v71 = *(void **)(v36 + 312);
      if (v71)
      {
        v72 = (void *)v165[3];
        uint64_t v73 = v169[3];
        if (v72)
        {
          if (v73)
          {
            nw_array_append(v165[3], (void *)v169[3]);
            v71 = *(void **)(v36 + 312);
            v72 = (void *)v165[3];
          }
          nw_endpoint_set_cname_array(v71, v72);
        }
        else if (v73)
        {
          BOOL v78 = nw_array_create();
          nw_array_append(v78, (void *)v169[3]);
          nw_endpoint_set_cname_array(*(void **)(v36 + 312), (void *)v78);
          if (v78) {
            os_release((void *)v78);
          }
        }
      }
      os_log_type_t v74 = (void *)v169[3];
      if (v74)
      {
        os_release(v74);
        v169[3] = 0;
      }
      uint64_t v75 = (void *)v165[3];
      if (v75)
      {
        os_release(v75);
        v165[3] = 0;
      }
      if (!*((unsigned char *)v181 + 24))
      {
LABEL_174:
        if (*((unsigned char *)v177 + 24)) {
          nw_masque_report_error_to_proxy_agent(v36, 1303);
        }
        unsigned int v80 = *((_DWORD *)v173 + 6);
        if (!v80)
        {
LABEL_201:
          if ((*v44 & 2) == 0)
          {
LABEL_209:
            uint64_t v88 = *(void *)(v36 + 288);
            uint64_t v89 = mach_continuous_time();
            if (v89 <= 1) {
              uint64_t v90 = 1;
            }
            else {
              uint64_t v90 = v89;
            }
            unint64_t v91 = nw_delta_nanos(v88, v90);
            uint64_t v92 = (v91 / 0xF4240);
            if (v91 > 0xF423FFFFFFFFFLL) {
              uint64_t v92 = 0xFFFFFFFFLL;
            }
            *(void *)(v36 + 296) = v92;
            if ((v44[2] & 1) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
              }
              uint64_t v93 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
              {
                logging_description = nw_endpoint_get_logging_description(*(void **)(v36 + 312));
                *(_DWORD *)v188 = 136446722;
                *(void *)&v188[4] = v36 + 531;
                *(_WORD *)&v188[12] = 2080;
                *(void *)&v188[14] = " ";
                *(_WORD *)&v188[22] = 2082;
                *(void *)v189 = logging_description;
                _os_log_impl(&dword_1830D4000, v93, OS_LOG_TYPE_INFO, "%{public}s%sReceived 200 OK, connected to %{public}s", v188, 0x20u);
              }
            }
            if (*(_DWORD *)(v36 + 516) && (v44[2] & 1) == 0 && gLogDatapath)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
              }
              v128 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
              {
                int v129 = *(_DWORD *)(v36 + 516);
                *(_DWORD *)v188 = 136446978;
                *(void *)&v188[4] = "nw_masque_clear_reverse_proxy_state";
                *(_WORD *)&v188[12] = 2082;
                *(void *)&v188[14] = v36 + 531;
                *(_WORD *)&v188[22] = 2080;
                *(void *)v189 = " ";
                *(_WORD *)&v189[8] = 1024;
                *(_DWORD *)&v189[10] = v129;
                _os_log_impl(&dword_1830D4000, v128, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sClearing reverse proxy state from %u", v188, 0x26u);
              }
            }
            *(_DWORD *)(v36 + 516) = 0;
            uint64_t v95 = *(void *)(v36 + 32);
            if (v95)
            {
              uint64_t v96 = *(void *)(v95 + 24);
              if (v96)
              {
                v97 = *(void (**)(uint64_t, uint64_t))(v96 + 152);
                if (v97) {
                  v97(v95, v36);
                }
              }
            }
            nw_masque_mark_connected(v36);
            goto LABEL_238;
          }
LABEL_202:
          if (!uuid_is_null((const unsigned __int8 *)(v36 + 272)))
          {
            v86 = *(void **)(v36 + 456);
            if (v86) {
              nw_http_connection_metadata_set_cached_token(v86, 0, 0);
            }
            if (*((unsigned char *)v181 + 24)) {
              int v87 = 1001;
            }
            else {
              int v87 = 0;
            }
            nw_path_report_error_to_agent(*(void **)(v36 + 336), (const unsigned __int8 *)(v36 + 272), v87);
          }
          goto LABEL_209;
        }
        int v81 = *(void **)(v36 + 328);
        if (v81)
        {
          if (v80 - 0x10000 < 0xFFFF0001 || !*(_WORD *)(v36 + 524)) {
            goto LABEL_201;
          }
          if (nw_protocol_masque_get_definition(void)::onceToken != -1) {
            dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27403);
          }
          if (nw_protocol_masque_get_definition(void)::definition) {
            BOOL v82 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
          }
          else {
            BOOL v82 = 0;
          }
          globals_for_protocol = (unsigned __int16 *)nw_context_get_globals_for_protocol(v81, v82);
          if (globals_for_protocol)
          {
            if (*globals_for_protocol && v80 > *globals_for_protocol && v80 > globals_for_protocol[1])
            {
              globals_for_protocol[1] = v80;
              if ((v44[2] & 1) == 0)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                v85 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)v188 = 136446722;
                  *(void *)&v188[4] = v36 + 531;
                  *(_WORD *)&v188[12] = 2080;
                  *(void *)&v188[14] = " ";
                  *(_WORD *)&v188[22] = 1024;
                  *(_DWORD *)v189 = v80;
                  _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_INFO, "%{public}s%sReporting new epoch value: %u", v188, 0x1Cu);
                }
              }
              nw_masque_report_error_to_proxy_agent(v36, v80 | 0xFF0000);
            }
            goto LABEL_201;
          }
          v147 = v44;
          __nwlog_obj();
          *(_DWORD *)v188 = 136446210;
          *(void *)&v188[4] = "nw_masque_handle_received_epoch_value";
          v120 = (char *)_os_log_send_and_compose_impl();
          v150[0] = OS_LOG_TYPE_ERROR;
          char v187 = 0;
          if (!__nwlog_fault(v120, v150, &v187)) {
            goto LABEL_397;
          }
          if (v150[0] == OS_LOG_TYPE_FAULT)
          {
            __int16 v121 = __nwlog_obj();
            os_log_type_t v122 = v150[0];
            if (!os_log_type_enabled(v121, v150[0])) {
              goto LABEL_397;
            }
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_handle_received_epoch_value";
            v123 = "%{public}s called with null globals";
            goto LABEL_395;
          }
          if (!v187)
          {
            __int16 v121 = __nwlog_obj();
            os_log_type_t v122 = v150[0];
            if (!os_log_type_enabled(v121, v150[0])) {
              goto LABEL_397;
            }
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_handle_received_epoch_value";
            v123 = "%{public}s called with null globals, backtrace limit exceeded";
            goto LABEL_395;
          }
          v134 = (char *)__nw_create_backtrace_string();
          v140 = __nwlog_obj();
          os_log_type_t v122 = v150[0];
          loga = v140;
          BOOL v141 = os_log_type_enabled(v140, v150[0]);
          if (v134)
          {
            if (v141)
            {
              *(_DWORD *)v188 = 136446466;
              *(void *)&v188[4] = "nw_masque_handle_received_epoch_value";
              *(_WORD *)&v188[12] = 2082;
              *(void *)&v188[14] = v134;
              v137 = "%{public}s called with null globals, dumping backtrace:%{public}s";
              goto LABEL_373;
            }
            goto LABEL_374;
          }
          if (!v141)
          {
LABEL_397:
            if (v120) {
              free(v120);
            }
            nw_protocol_stack_t v44 = v147;
            if ((*v147 & 2) == 0) {
              goto LABEL_209;
            }
            goto LABEL_202;
          }
          *(_DWORD *)v188 = 136446210;
          *(void *)&v188[4] = "nw_masque_handle_received_epoch_value";
          v123 = "%{public}s called with null globals, no backtrace";
        }
        else
        {
          v147 = v44;
          __nwlog_obj();
          *(_DWORD *)v188 = 136446210;
          *(void *)&v188[4] = "nw_masque_handle_received_epoch_value";
          v120 = (char *)_os_log_send_and_compose_impl();
          v150[0] = OS_LOG_TYPE_ERROR;
          char v187 = 0;
          if (!__nwlog_fault(v120, v150, &v187)) {
            goto LABEL_397;
          }
          if (v150[0] == OS_LOG_TYPE_FAULT)
          {
            __int16 v121 = __nwlog_obj();
            os_log_type_t v122 = v150[0];
            if (!os_log_type_enabled(v121, v150[0])) {
              goto LABEL_397;
            }
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_handle_received_epoch_value";
            v123 = "%{public}s called with null masque->context";
LABEL_395:
            v143 = v121;
LABEL_396:
            _os_log_impl(&dword_1830D4000, v143, v122, v123, v188, 0xCu);
            goto LABEL_397;
          }
          if (!v187)
          {
            __int16 v121 = __nwlog_obj();
            os_log_type_t v122 = v150[0];
            if (!os_log_type_enabled(v121, v150[0])) {
              goto LABEL_397;
            }
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_handle_received_epoch_value";
            v123 = "%{public}s called with null masque->context, backtrace limit exceeded";
            goto LABEL_395;
          }
          v134 = (char *)__nw_create_backtrace_string();
          v135 = __nwlog_obj();
          os_log_type_t v122 = v150[0];
          loga = v135;
          BOOL v136 = os_log_type_enabled(v135, v150[0]);
          if (v134)
          {
            if (v136)
            {
              *(_DWORD *)v188 = 136446466;
              *(void *)&v188[4] = "nw_masque_handle_received_epoch_value";
              *(_WORD *)&v188[12] = 2082;
              *(void *)&v188[14] = v134;
              v137 = "%{public}s called with null masque->context, dumping backtrace:%{public}s";
LABEL_373:
              _os_log_impl(&dword_1830D4000, loga, v122, v137, v188, 0x16u);
            }
LABEL_374:
            free(v134);
            goto LABEL_397;
          }
          if (!v136) {
            goto LABEL_397;
          }
          *(_DWORD *)v188 = 136446210;
          *(void *)&v188[4] = "nw_masque_handle_received_epoch_value";
          v123 = "%{public}s called with null masque->context, no backtrace";
        }
        v143 = loga;
        goto LABEL_396;
      }
      uint64_t v76 = *(void **)(v36 + 328);
      if (v76)
      {
        if (nw_protocol_masque_get_definition(void)::onceToken != -1) {
          dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27403);
        }
        if (nw_protocol_masque_get_definition(void)::definition) {
          v77 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
        }
        else {
          v77 = 0;
        }
        uint64_t v79 = nw_context_get_globals_for_protocol(v76, v77);
        if (v79)
        {
          *(_DWORD *)(v79 + 7) = 0;
          *(_DWORD *)(v79 + 4) = 0;
          goto LABEL_174;
        }
        uint64_t v146 = v36 + 527;
        __nwlog_obj();
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_clear_cached_geohash_value";
        v116 = (char *)_os_log_send_and_compose_impl();
        v150[0] = OS_LOG_TYPE_ERROR;
        char v187 = 0;
        if (!__nwlog_fault(v116, v150, &v187)) {
          goto LABEL_383;
        }
        if (v150[0] == OS_LOG_TYPE_FAULT)
        {
          __int16 v117 = __nwlog_obj();
          os_log_type_t v118 = v150[0];
          if (os_log_type_enabled(v117, v150[0]))
          {
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_clear_cached_geohash_value";
            __int16 v119 = "%{public}s called with null globals";
            goto LABEL_381;
          }
          goto LABEL_383;
        }
        if (!v187)
        {
          __int16 v117 = __nwlog_obj();
          os_log_type_t v118 = v150[0];
          if (os_log_type_enabled(v117, v150[0]))
          {
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_clear_cached_geohash_value";
            __int16 v119 = "%{public}s called with null globals, backtrace limit exceeded";
            goto LABEL_381;
          }
          goto LABEL_383;
        }
        v130 = (char *)__nw_create_backtrace_string();
        v138 = __nwlog_obj();
        os_log_type_t v118 = v150[0];
        log = v138;
        BOOL v139 = os_log_type_enabled(v138, v150[0]);
        if (v130)
        {
          if (v139)
          {
            *(_DWORD *)v188 = 136446466;
            *(void *)&v188[4] = "nw_masque_clear_cached_geohash_value";
            *(_WORD *)&v188[12] = 2082;
            *(void *)&v188[14] = v130;
            v133 = "%{public}s called with null globals, dumping backtrace:%{public}s";
            goto LABEL_358;
          }
          goto LABEL_359;
        }
        if (!v139) {
          goto LABEL_383;
        }
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_clear_cached_geohash_value";
        __int16 v119 = "%{public}s called with null globals, no backtrace";
      }
      else
      {
        uint64_t v146 = v36 + 527;
        __nwlog_obj();
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_clear_cached_geohash_value";
        v116 = (char *)_os_log_send_and_compose_impl();
        v150[0] = OS_LOG_TYPE_ERROR;
        char v187 = 0;
        if (!__nwlog_fault(v116, v150, &v187)) {
          goto LABEL_383;
        }
        if (v150[0] == OS_LOG_TYPE_FAULT)
        {
          __int16 v117 = __nwlog_obj();
          os_log_type_t v118 = v150[0];
          if (os_log_type_enabled(v117, v150[0]))
          {
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_clear_cached_geohash_value";
            __int16 v119 = "%{public}s called with null masque->context";
LABEL_381:
            v142 = v117;
LABEL_382:
            _os_log_impl(&dword_1830D4000, v142, v118, v119, v188, 0xCu);
          }
LABEL_383:
          if (v116) {
            free(v116);
          }
          nw_protocol_stack_t v44 = (unsigned char *)v146;
          goto LABEL_174;
        }
        if (!v187)
        {
          __int16 v117 = __nwlog_obj();
          os_log_type_t v118 = v150[0];
          if (os_log_type_enabled(v117, v150[0]))
          {
            *(_DWORD *)v188 = 136446210;
            *(void *)&v188[4] = "nw_masque_clear_cached_geohash_value";
            __int16 v119 = "%{public}s called with null masque->context, backtrace limit exceeded";
            goto LABEL_381;
          }
          goto LABEL_383;
        }
        v130 = (char *)__nw_create_backtrace_string();
        v131 = __nwlog_obj();
        os_log_type_t v118 = v150[0];
        log = v131;
        BOOL v132 = os_log_type_enabled(v131, v150[0]);
        if (v130)
        {
          if (v132)
          {
            *(_DWORD *)v188 = 136446466;
            *(void *)&v188[4] = "nw_masque_clear_cached_geohash_value";
            *(_WORD *)&v188[12] = 2082;
            *(void *)&v188[14] = v130;
            v133 = "%{public}s called with null masque->context, dumping backtrace:%{public}s";
LABEL_358:
            _os_log_impl(&dword_1830D4000, log, v118, v133, v188, 0x16u);
          }
LABEL_359:
          free(v130);
          goto LABEL_383;
        }
        if (!v132) {
          goto LABEL_383;
        }
        *(_DWORD *)v188 = 136446210;
        *(void *)&v188[4] = "nw_masque_clear_cached_geohash_value";
        __int16 v119 = "%{public}s called with null masque->context, no backtrace";
      }
      v142 = log;
      goto LABEL_382;
    }
    if (!v43)
    {
      if (*(unsigned char *)(v36 + 529)) {
        goto LABEL_240;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v67 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_240;
      }
      *(_DWORD *)v188 = 136446722;
      *(void *)&v188[4] = "nw_masque_handle_connect_response";
      *(_WORD *)&v188[12] = 2082;
      *(void *)&v188[14] = v36 + 531;
      *(_WORD *)&v188[22] = 2080;
      *(void *)v189 = " ";
      BOOL v38 = "%{public}s %{public}s%sReceived no response code, ignoring";
      char v39 = v67;
      os_log_type_t v40 = OS_LOG_TYPE_DEBUG;
      uint32_t v41 = 32;
      goto LABEL_61;
    }
    *(void *)v180 = 0;
    v181 = v180;
    uint64_t v182 = 0x2000000000;
    char v183 = 0;
    uint64_t v176 = 0;
    v177 = &v176;
    uint64_t v178 = 0x2000000000;
    char v179 = 0;
    uint64_t v172 = 0;
    v173 = &v172;
    uint64_t v174 = 0x2000000000;
    LOBYTE(v175) = 0;
    uint64_t v168 = 0;
    v169 = &v168;
    uint64_t v170 = 0x2000000000;
    LOBYTE(v171) = 0;
    uint64_t v164 = 0;
    v165 = &v164;
    uint64_t v166 = 0x2000000000;
    LOBYTE(v167) = 0;
    *(void *)v150 = 0;
    v151 = v150;
    int v153 = 0;
    uint64_t v152 = 0x2000000000;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_176;
    v199 = &unk_1E523EC50;
    v200 = v180;
    v201 = (os_log_type_t *)&v168;
    uint64_t v206 = v36;
    v202 = v150;
    v203 = &v176;
    v204 = &v164;
    v205 = &v172;
    nw_http_fields_access_value_by_name(v23, (unint64_t)"Proxy-Status", buf);
    if (*((unsigned char *)v181 + 24)) {
      nw_masque_report_error_to_proxy_agent(v36, 1303);
    }
    if ((*(unsigned char *)(v36 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      os_log_type_t v51 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v52 = nw_endpoint_get_logging_description(*(void **)(v36 + 312));
        v53 = "";
        if (*((unsigned char *)v165 + 24)) {
          BOOL v54 = ", attempt to reverse proxy with certificates";
        }
        else {
          BOOL v54 = "";
        }
        if (*((unsigned char *)v177 + 24)) {
          v55 = ", unreachable through proxy";
        }
        else {
          v55 = "";
        }
        if (*((unsigned char *)v173 + 24)) {
          v56 = ", origin server failed";
        }
        else {
          v56 = "";
        }
        if (*((unsigned char *)v169 + 24)) {
          v57 = ", has received status";
        }
        else {
          v57 = "";
        }
        int v58 = *((_DWORD *)v151 + 6);
        *(_DWORD *)v188 = 136448258;
        if (v58) {
          v53 = ", has dns failure reason";
        }
        *(void *)&v188[4] = v36 + 531;
        *(_WORD *)&v188[12] = 2080;
        *(void *)&v188[14] = " ";
        *(_WORD *)&v188[22] = 1024;
        *(_DWORD *)v189 = v43;
        *(_WORD *)&v189[4] = 2082;
        *(void *)&v189[6] = v52;
        *(_WORD *)&v189[14] = 2082;
        *(void *)&v189[16] = v54;
        __int16 v190 = 2082;
        v191 = v55;
        __int16 v192 = 2082;
        v193 = v56;
        __int16 v194 = 2082;
        v195 = v57;
        __int16 v196 = 2082;
        v197 = v53;
        _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_ERROR, "%{public}s%sReceived response code %u for %{public}s%{public}s%{public}s%{public}s%{public}s%{public}s", v188, 0x58u);
      }
    }
    int v59 = *((_DWORD *)v151 + 6);
    if (v59)
    {
      v60 = *(void **)(v36 + 312);
      if (v60)
      {
        v61 = v60;
        v61[56] = v59;
      }
    }
    v62 = (_DWORD *)(v36 + 527);
    if ((v43 - 400) <= 0x63 && *((unsigned char *)v165 + 24))
    {
      if (!nw_http_connection_metadata_get_secondary_certificate_count(*(void **)(v36 + 456))
        || (nw_masque_setup_reverse_proxy(v36) & 1) == 0)
      {
        if ((*(unsigned char *)(v36 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          BOOL v63 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v188 = 136446466;
            *(void *)&v188[4] = v36 + 531;
            *(_WORD *)&v188[12] = 2080;
            *(void *)&v188[14] = " ";
            _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_INFO, "%{public}s%sCONNECT response indicates that secondary certificates will be sent, waiting", v188, 0x16u);
          }
        }
        *(_DWORD *)(v36 + 516) = 1;
        uint64_t v64 = *(void *)(v36 + 352);
        if (v64) {
          nw_queue_cancel_source(v64);
        }
        v148[0] = MEMORY[0x1E4F143A8];
        v148[1] = 0x40000000;
        v148[2] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_192;
        v148[3] = &__block_descriptor_tmp_193;
        v148[4] = v36;
        __int16 v149 = v43;
        BOOL source = nw_queue_context_create_source(0, 2, 3, 0, v148, 0);
        *(void *)(v36 + 352) = source;
        dispatch_time_t v66 = dispatch_time(0x8000000000000000, 10000000000);
        nw_queue_set_timer_values(source, v66, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
        nw_queue_activate_source(*(void *)(v36 + 352));
      }
      goto LABEL_237;
    }
    if ((v43 - 500) > 0x63)
    {
      if (v43 == 401)
      {
        if (!*((unsigned char *)v169 + 24) && !uuid_is_null((const unsigned __int8 *)(v36 + 272)))
        {
          uint64_t v83 = *(void **)(v36 + 456);
          if (v83) {
            nw_http_connection_metadata_mark_cached_token_failed(v83);
          }
          nw_path_report_error_to_agent(*(void **)(v36 + 336), (const unsigned __int8 *)(v36 + 272), 80);
          goto LABEL_235;
        }
        goto LABEL_230;
      }
    }
    else
    {
      if (*((unsigned char *)v177 + 24))
      {
        uint64_t v68 = v36;
        int v69 = 65;
LABEL_236:
        nw_masque_mark_failed_with_error(v68, v69);
LABEL_237:
        _Block_object_dispose(v150, 8);
LABEL_238:
        _Block_object_dispose(&v164, 8);
        _Block_object_dispose(&v168, 8);
        _Block_object_dispose(&v172, 8);
        _Block_object_dispose(&v176, 8);
        v70 = v180;
        goto LABEL_239;
      }
      if (*((unsigned char *)v173 + 24))
      {
        uint64_t v68 = v36;
        int v69 = 64;
        goto LABEL_236;
      }
    }
    if ((v43 - 400) > 0x63)
    {
      if (v43 == 502)
      {
        BOOL v98 = (*v62 & 4) == 0;
        int v99 = 1207;
        int v100 = 1107;
      }
      else
      {
        BOOL v98 = (*v62 & 4) == 0;
        if ((v43 - 500) > 0x63)
        {
          int v99 = 1201;
          int v100 = 1101;
        }
        else
        {
          int v99 = 1205;
          int v100 = 1105;
        }
      }
LABEL_231:
      if (v98) {
        int v101 = v100;
      }
      else {
        int v101 = v99;
      }
      nw_masque_report_error_to_proxy_agent(v36, v101);
LABEL_235:
      uint64_t v68 = v36;
      int v69 = 61;
      goto LABEL_236;
    }
LABEL_230:
    BOOL v98 = (*v62 & 4) == 0;
    int v99 = 1204;
    int v100 = 1104;
    goto LABEL_231;
  }
  uint64_t v31 = *(void *)(a1 + 40);
  if (!v31 || (*(unsigned char *)(v31 + 529) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v5 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)(a1 + 40);
      BOOL v33 = v32 == 0;
      if (v32) {
        BOOL v34 = (const char *)(v32 + 531);
      }
      else {
        BOOL v34 = "";
      }
      v35 = " ";
      if (v33) {
        v35 = "";
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = v34;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v35;
      os_log_type_t v10 = "%{public}s%sReceived unexpected input frame without HTTP metadata";
      goto LABEL_13;
    }
  }
LABEL_242:
  nw_frame_finalize((uint64_t)a2);
  return 1;
}

uint64_t nw_protocol_masque_listener_read_input(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 527) & 0x10) == 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_read_input";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v39[0]) = 0;
    if (!__nwlog_fault(v17, type, v39)) {
      goto LABEL_35;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type[0];
      if (!os_log_type_enabled(v18, type[0])) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_read_input";
      char v20 = "%{public}s called with null (masque->listen_udp)";
    }
    else if (LOBYTE(v39[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type[0];
      BOOL v22 = os_log_type_enabled(v18, type[0]);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_read_input";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null (masque->listen_udp), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_35;
      }
      if (!v22)
      {
LABEL_35:
        if (v17) {
          free(v17);
        }
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_read_input";
      char v20 = "%{public}s called with null (masque->listen_udp), no backtrace";
    }
    else
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type[0];
      if (!os_log_type_enabled(v18, type[0])) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_read_input";
      char v20 = "%{public}s called with null (masque->listen_udp), backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
    goto LABEL_35;
  }
  if (*(_DWORD *)(a1 + 508) != 4) {
    return 0;
  }
  int v7 = a6;
  int v8 = a5;
  v39[0] = 0;
  v39[1] = v39;
  nw_protocol_get_input_frames(*(void *)(a1 + 32), a1, a4, a5, a6, (uint64_t)v39);
  if (!v39[0]) {
    return 0;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000;
  char v41 = 0;
  *(void *)os_log_type_t type = 0;
  uint64_t v36 = type;
  int v38 = 0;
  uint64_t v37 = 0x2000000000;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  id v11 = (id)nw_protocol_copy_http_definition_http_definition;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  BOOL v26 = ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke;
  id v27 = &unk_1E523EB10;
  id v30 = v11;
  uint64_t v31 = a1;
  uint64_t v32 = v39;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  os_log_type_t v28 = type;
  int v29 = buf;
  uint64_t v12 = v39[0];
  do
  {
    if (!v12) {
      break;
    }
    uint64_t v13 = *(void *)(v12 + 32);
    char v14 = ((uint64_t (*)(void *))v26)(v25);
    uint64_t v12 = v13;
  }
  while ((v14 & 1) != 0);
  if (v11) {
    os_release(v11);
  }
  if (*(unsigned char *)(*(void *)&buf[8] + 24))
  {
    uint64_t v15 = *(char **)(a1 + 480);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 0x40000000;
    v24[2] = ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke_163;
    v24[3] = &__block_descriptor_tmp_164;
    v24[4] = a1;
    nw_hash_table_apply(v15, (uint64_t)v24);
  }
  if (a2)
  {
    uint64_t v16 = *((unsigned int *)v36 + 6);
    if (!v16)
    {
      if (*(unsigned char *)(*(void *)&buf[8] + 24) && *(void *)(a2 + 32)) {
        uint64_t v16 = nw_frame_array_fill_from_pending_array((void *)(a2 + 32), a3, v8, v7);
      }
      else {
        uint64_t v16 = 0;
      }
    }
  }
  else
  {
    uint64_t v16 = *((unsigned int *)v36 + 6);
  }
  _Block_object_dispose(type, 8);
  _Block_object_dispose(buf, 8);
  return v16;
}

uint64_t ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke_163(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*(void *)nw_hash_node_get_extra(a2)) {
    return 1;
  }
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t v5 = object;
  if (object)
  {
    uint64_t v6 = *(void *)(object + 24);
    if (v6)
    {
      int v7 = *(void (**)(uint64_t, void))(v6 + 64);
      if (v7)
      {
        v7(object, *(void *)(a1 + 32));
        return 1;
      }
    }
    __nwlog_obj();
    BOOL v9 = *(const char **)(v5 + 16);
    if (!v9) {
      BOOL v9 = "invalid";
    }
  }
  else
  {
    __nwlog_obj();
    BOOL v9 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  id v23 = "nw_protocol_masque_listener_read_input_block_invoke";
  __int16 v24 = 2082;
  id v25 = v9;
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v10, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_37;
      }
      uint64_t v13 = "invalid";
      if (v5 && *(void *)(v5 + 16)) {
        uint64_t v13 = *(const char **)(v5 + 16);
      }
      *(_DWORD *)buf = 136446466;
      id v23 = "nw_protocol_masque_listener_read_input_block_invoke";
      __int16 v24 = 2082;
      id v25 = v13;
      char v14 = "%{public}s protocol %{public}s has invalid input_available callback";
      goto LABEL_36;
    }
    if (!v20)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_37;
      }
      char v18 = "invalid";
      if (v5 && *(void *)(v5 + 16)) {
        char v18 = *(const char **)(v5 + 16);
      }
      *(_DWORD *)buf = 136446466;
      id v23 = "nw_protocol_masque_listener_read_input_block_invoke";
      __int16 v24 = 2082;
      id v25 = v18;
      char v14 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v16 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v16)
      {
        uint64_t v17 = "invalid";
        if (v5 && *(void *)(v5 + 16)) {
          uint64_t v17 = *(const char **)(v5 + 16);
        }
        *(_DWORD *)buf = 136446722;
        id v23 = "nw_protocol_masque_listener_read_input_block_invoke";
        __int16 v24 = 2082;
        id v25 = v17;
        __int16 v26 = 2082;
        id v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_37;
    }
    if (v16)
    {
      os_log_type_t v19 = "invalid";
      if (v5 && *(void *)(v5 + 16)) {
        os_log_type_t v19 = *(const char **)(v5 + 16);
      }
      *(_DWORD *)buf = 136446466;
      id v23 = "nw_protocol_masque_listener_read_input_block_invoke";
      __int16 v24 = 2082;
      id v25 = v19;
      char v14 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_36:
      _os_log_impl(&dword_1830D4000, v11, v12, v14, buf, 0x16u);
    }
  }
LABEL_37:
  if (v10) {
    free(v10);
  }
  return 1;
}

BOOL ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke_158(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t extra = nw_hash_node_get_extra(a2);
  uint64_t v5 = *(void **)(extra + 16);
  if (v5)
  {
    uint64_t v6 = extra;
    if (nw_endpoint_is_equal(*(void **)(a1 + 56), v5, 0))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      if (*(void *)(a1 + 64) == a2)
      {
        uint64_t v10 = *(void *)(a1 + 72);
        uint64_t v11 = *(void *)(a1 + 80);
        *(void *)(v11 + 32) = 0;
        os_log_type_t v12 = *(void **)(v10 + 8);
        *(void *)(v11 + 40) = v12;
        void *v12 = v11;
        *(void *)(v10 + 8) = v11 + 32;
        uint64_t v13 = *(void *)(a1 + 88);
        if ((!v13 || (*(unsigned char *)(v13 + 529) & 1) == 0) && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          char v20 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v21 = *(void *)(a1 + 88);
            BOOL v22 = "";
            BOOL v23 = v21 == 0;
            if (v21) {
              __int16 v24 = (const char *)(v21 + 531);
            }
            else {
              __int16 v24 = "";
            }
            int v25 = 136446722;
            __int16 v26 = "nw_protocol_masque_listener_read_input_block_invoke";
            if (!v23) {
              BOOL v22 = " ";
            }
            __int16 v27 = 2082;
            uint64_t v28 = v24;
            __int16 v29 = 2080;
            id v30 = v22;
            _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound frame matching remote address", (uint8_t *)&v25, 0x20u);
          }
        }
        ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 80);
        *(void *)(v7 + 32) = 0;
        int v8 = *(void **)(v6 + 8);
        *(void *)(v7 + 40) = v8;
        void *v8 = v7;
        *(void *)(v6 + 8) = v7 + 32;
        uint64_t v9 = *(void *)(a1 + 88);
        if ((!v9 || (*(unsigned char *)(v9 + 529) & 1) == 0) && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v15 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v16 = *(void *)(a1 + 88);
            uint64_t v17 = "";
            BOOL v18 = v16 == 0;
            if (v16) {
              os_log_type_t v19 = (const char *)(v16 + 531);
            }
            else {
              os_log_type_t v19 = "";
            }
            int v25 = 136446722;
            __int16 v26 = "nw_protocol_masque_listener_read_input_block_invoke";
            if (!v18) {
              uint64_t v17 = " ";
            }
            __int16 v27 = 2082;
            uint64_t v28 = v19;
            __int16 v29 = 2080;
            id v30 = v17;
            _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound frame matching remote address, pending", (uint8_t *)&v25, 0x20u);
          }
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      }
    }
  }
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

BOOL ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke_160(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t extra = nw_hash_node_get_extra(a2);
  uint64_t v4 = *(void **)(extra + 16);
  if (v4)
  {
    uint64_t v5 = extra;
    if (nw_endpoint_is_equal(*(void **)(a1 + 48), v4, 0))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      uint64_t v6 = *(void *)(a1 + 56);
      *(void *)(v6 + 32) = 0;
      uint64_t v7 = *(void **)(v5 + 8);
      *(void *)(v6 + 40) = v7;
      *uint64_t v7 = v6;
      *(void *)(v5 + 8) = v6 + 32;
      uint64_t v8 = *(void *)(a1 + 64);
      if ((!v8 || (*(unsigned char *)(v8 + 529) & 1) == 0) && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v10 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v11 = *(void *)(a1 + 64);
          os_log_type_t v12 = "";
          BOOL v13 = v11 == 0;
          if (v11) {
            char v14 = (const char *)(v11 + 531);
          }
          else {
            char v14 = "";
          }
          int v15 = 136446722;
          uint64_t v16 = "nw_protocol_masque_listener_read_input_block_invoke";
          if (!v13) {
            os_log_type_t v12 = " ";
          }
          __int16 v17 = 2082;
          BOOL v18 = v14;
          __int16 v19 = 2080;
          char v20 = v12;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound new flow matching remote address, pending", (uint8_t *)&v15, 0x20u);
        }
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
  }
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

unint64_t ___ZL40nw_masque_handle_server_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke(unint64_t result, char *__s)
{
  if (__s)
  {
    uint64_t v3 = (void *)result;
    uint64_t result = strlen(__s);
    if (result <= 7)
    {
      *(unsigned char *)(*(void *)(v3[4] + 8) + 24) = 1;
      uint64_t result = strcmp((const char *)(v3[6] + 615), __s);
      *(unsigned char *)(*(void *)(v3[5] + 8) + 24) = result == 0;
    }
  }
  return result;
}

size_t ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke(size_t result, char *__s)
{
  if (__s)
  {
    uint64_t v3 = result;
    uint64_t result = strlen(__s);
    if (result <= 7)
    {
      uint64_t v4 = *(unsigned char **)(v3 + 32);
      int v5 = *__s;
      v4[615] = v5;
      if (v5)
      {
        int v6 = __s[1];
        v4[616] = v6;
        if (v6)
        {
          int v7 = __s[2];
          v4[617] = v7;
          if (v7)
          {
            int v8 = __s[3];
            v4[618] = v8;
            if (v8)
            {
              int v9 = __s[4];
              v4[619] = v9;
              if (v9)
              {
                int v10 = __s[5];
                v4[620] = v10;
                if (v10)
                {
                  int v11 = __s[6];
                  v4[621] = v11;
                  if (v11) {
                    v4[622] = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_167(uint64_t a1, char *__s1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (__s1 && !strcmp(__s1, "?1"))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (!v3 || (*(unsigned char *)(v3 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v4 = gprivacy_proxyLogObj;
      BOOL v5 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO);
      uint64_t v3 = *(void *)(a1 + 32);
      if (v5)
      {
        BOOL v6 = v3 == 0;
        if (v3) {
          int v7 = (const char *)(v3 + 531);
        }
        else {
          int v7 = "";
        }
        int v8 = " ";
        if (v6) {
          int v8 = "";
        }
        int v9 = 136446466;
        int v10 = v7;
        __int16 v11 = 2080;
        os_log_type_t v12 = v8;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s%sServer supports forwarding", (uint8_t *)&v9, 0x16u);
        uint64_t v3 = *(void *)(a1 + 32);
      }
    }
    *(_DWORD *)(v3 + 527) |= 0x100000u;
  }
}

uint64_t ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_169(uint64_t result, char *__s1)
{
  uint64_t v2 = result;
  if (__s1)
  {
    uint64_t result = strcmp(__s1, "?1");
    int v3 = (result == 0) << 19;
  }
  else
  {
    int v3 = 0;
  }
  *(_DWORD *)(*(void *)(v2 + 32) + 527) = *(_DWORD *)(*(void *)(v2 + 32) + 527) & 0xFFF7FFFF | v3;
  return result;
}

void ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_2(void *a1, char *__s1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (__s1)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = strstr(__s1, "invalid geohash") != 0;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = strstr(__s1, "expired routing") != 0;
    unsigned int v4 = strlen(__s1);
    unsigned int v5 = v4;
    uint64_t v6 = a1[8];
    if (v6)
    {
      if (*(void *)(v6 + 312))
      {
        uint64_t v7 = v4;
        int v8 = strnstr(__s1, "next-hop=\"", v4);
        int v9 = v8;
        if (v8)
        {
          int v10 = "\";";
          uint64_t v11 = 10;
        }
        else
        {
          int v8 = strnstr(__s1, "next-hop=", v5);
          if (!v8) {
            goto LABEL_38;
          }
          int v10 = ";";
          uint64_t v11 = 9;
        }
        BOOL v12 = v9 != 0;
        uint64_t v13 = &v8[v11];
        char v14 = &__s1[v7];
        int v15 = strnstr(&v8[v11], v10, v14 - &v8[v11]);
        if (v15) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = &v14[-v12];
        }
        size_t v17 = v16 - v13;
        if (v16 > v13)
        {
          if (*v13 == 91 || (int v25 = strnstr(v13, ":", v16 - v13)) != 0 && !strnstr(v25 + 1, ":", v16 - (v25 + 1)))
          {
            long long v64 = xmmword_183D5D04C;
            long long v65 = unk_183D5D05C;
            long long v66 = xmmword_183D5D06C;
            long long v67 = unk_183D5D07C;
            long long v60 = xmmword_183D5D00C;
            long long v61 = unk_183D5D01C;
            long long v62 = xmmword_183D5D02C;
            long long v63 = unk_183D5D03C;
            long long v56 = xmmword_183D5CFCC;
            long long v57 = unk_183D5CFDC;
            long long v58 = xmmword_183D5CFEC;
            long long v59 = unk_183D5CFFC;
            *(_OWORD *)__s = *(_OWORD *)"https://";
            *(_OWORD *)&__s[16] = unk_183D5CF9C;
            long long v54 = xmmword_183D5CFAC;
            long long v55 = unk_183D5CFBC;
            size_t v18 = strlen(__s);
            if (v18 + v17 <= 0xFF)
            {
              memcpy(&__s[v18], v13, v17);
              nw_endpoint_t url = nw_endpoint_create_url(__s);
              if (url)
              {
                nw_endpoint_t v20 = url;
                unsigned int url_port = nw_endpoint_get_url_port(url, 0);
                BOOL v22 = v20;
                BOOL v23 = (const char *)[v22 hostname];

                if (!url_port) {
                  unsigned int url_port = nw_endpoint_get_port(*(nw_endpoint_t *)(v6 + 312));
                }
                BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v23, url_port);
                os_release(v22);
LABEL_39:
                *(void *)(*(void *)(a1[6] + 8) + 24) = host_with_numeric_port;
                uint64_t v33 = a1[8];
                if (v33)
                {
                  if (*(void *)(v33 + 312))
                  {
                    uint64_t v34 = strnstr(__s1, "next-hop-aliases=\"", v5);
                    if (v34)
                    {
                      v35 = v34 + 18;
                      uint64_t v36 = strnstr(v34 + 18, "\"", &__s1[v5] - (v34 + 18));
                      if (v36)
                      {
                        uint64_t v37 = v36;
                        BOOL v38 = 0;
                        do
                        {
                          if (v35 >= v37) {
                            break;
                          }
                          long long v66 = 0u;
                          long long v67 = 0u;
                          long long v64 = 0u;
                          long long v65 = 0u;
                          long long v62 = 0u;
                          long long v63 = 0u;
                          long long v60 = 0u;
                          long long v61 = 0u;
                          long long v58 = 0u;
                          long long v59 = 0u;
                          long long v56 = 0u;
                          long long v57 = 0u;
                          long long v54 = 0u;
                          long long v55 = 0u;
                          size_t v39 = v37 - v35;
                          memset(__s, 0, sizeof(__s));
                          os_log_type_t v40 = strnstr(v35, ",", v37 - v35);
                          char v41 = v40;
                          if (v40) {
                            size_t v39 = v40 - v35;
                          }
                          if (v39 - 1 <= 0xFE)
                          {
                            if (!v38) {
                              BOOL v38 = nw_array_create();
                            }
                            memcpy(__s, v35, v39);
                            unsigned int port = nw_endpoint_get_port(*(nw_endpoint_t *)(v33 + 312));
                            BOOL v43 = nw_endpoint_create_host_with_numeric_port(__s, port);
                            if (v43)
                            {
                              nw_protocol_stack_t v44 = (void *)v43;
                              nw_array_append(v38, (void *)v43);
                              os_release(v44);
                            }
                          }
                          v35 = v41 + 1;
                        }
                        while (v41);
                        goto LABEL_70;
                      }
                    }
                  }
LABEL_69:
                  BOOL v38 = 0;
LABEL_70:
                  *(void *)(*(void *)(a1[7] + 8) + 24) = v38;
                  return;
                }
                __nwlog_obj();
                *(_DWORD *)__s = 136446210;
                *(void *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                int v45 = (char *)_os_log_send_and_compose_impl();
                os_log_type_t type = OS_LOG_TYPE_ERROR;
                char v51 = 0;
                if (__nwlog_fault(v45, &type, &v51))
                {
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    int v46 = __nwlog_obj();
                    os_log_type_t v47 = type;
                    if (!os_log_type_enabled(v46, type)) {
                      goto LABEL_67;
                    }
                    *(_DWORD *)__s = 136446210;
                    *(void *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                    BOOL v48 = "%{public}s called with null masque";
                    goto LABEL_66;
                  }
                  if (!v51)
                  {
                    int v46 = __nwlog_obj();
                    os_log_type_t v47 = type;
                    if (!os_log_type_enabled(v46, type)) {
                      goto LABEL_67;
                    }
                    *(_DWORD *)__s = 136446210;
                    *(void *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                    BOOL v48 = "%{public}s called with null masque, backtrace limit exceeded";
                    goto LABEL_66;
                  }
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  int v46 = __nwlog_obj();
                  os_log_type_t v47 = type;
                  BOOL v50 = os_log_type_enabled(v46, type);
                  if (backtrace_string)
                  {
                    if (v50)
                    {
                      *(_DWORD *)__s = 136446466;
                      *(void *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                      *(_WORD *)&__s[12] = 2082;
                      *(void *)&__s[14] = backtrace_string;
                      _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null masque, dumping backtrace:%{public}s", (uint8_t *)__s, 0x16u);
                    }
                    free(backtrace_string);
                    goto LABEL_67;
                  }
                  if (v50)
                  {
                    *(_DWORD *)__s = 136446210;
                    *(void *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                    BOOL v48 = "%{public}s called with null masque, no backtrace";
LABEL_66:
                    _os_log_impl(&dword_1830D4000, v46, v47, v48, (uint8_t *)__s, 0xCu);
                  }
                }
LABEL_67:
                if (v45) {
                  free(v45);
                }
                goto LABEL_69;
              }
            }
          }
          else if (v17 <= 0xFF)
          {
            long long v66 = 0u;
            long long v67 = 0u;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v58 = 0u;
            long long v59 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            memset(__s, 0, sizeof(__s));
            memcpy(__s, v13, v16 - v13);
            unsigned int v26 = nw_endpoint_get_port(*(nw_endpoint_t *)(v6 + 312));
            BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(__s, v26);
            goto LABEL_39;
          }
        }
      }
LABEL_38:
      BOOL host_with_numeric_port = 0;
      goto LABEL_39;
    }
    __nwlog_obj();
    *(_DWORD *)__s = 136446210;
    *(void *)&__s[4] = "nw_masque_copy_next_hop_from_proxy_status";
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (__nwlog_fault(v27, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (!os_log_type_enabled(v28, type)) {
          goto LABEL_36;
        }
        *(_DWORD *)__s = 136446210;
        *(void *)&__s[4] = "nw_masque_copy_next_hop_from_proxy_status";
        id v30 = "%{public}s called with null masque";
        goto LABEL_35;
      }
      if (!v51)
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (!os_log_type_enabled(v28, type)) {
          goto LABEL_36;
        }
        *(_DWORD *)__s = 136446210;
        *(void *)&__s[4] = "nw_masque_copy_next_hop_from_proxy_status";
        id v30 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_35;
      }
      uint64_t v31 = (char *)__nw_create_backtrace_string();
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v32 = os_log_type_enabled(v28, type);
      if (v31)
      {
        if (v32)
        {
          *(_DWORD *)__s = 136446466;
          *(void *)&__s[4] = "nw_masque_copy_next_hop_from_proxy_status";
          *(_WORD *)&__s[12] = 2082;
          *(void *)&__s[14] = v31;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null masque, dumping backtrace:%{public}s", (uint8_t *)__s, 0x16u);
        }
        free(v31);
        goto LABEL_36;
      }
      if (v32)
      {
        *(_DWORD *)__s = 136446210;
        *(void *)&__s[4] = "nw_masque_copy_next_hop_from_proxy_status";
        id v30 = "%{public}s called with null masque, no backtrace";
LABEL_35:
        _os_log_impl(&dword_1830D4000, v28, v29, v30, (uint8_t *)__s, 0xCu);
      }
    }
LABEL_36:
    if (v27) {
      free(v27);
    }
    goto LABEL_38;
  }
}

void sub_18384D0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_3(uint64_t a1, char *__s)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!__s || strlen(__s) > 6) {
    return;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
    int v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v15, &type, &v26)) {
      goto LABEL_66;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
      size_t v18 = "%{public}s called with null masque";
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v21 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
          __int16 v30 = 2082;
          uint64_t v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_66:
        if (!v15) {
          return;
        }
        goto LABEL_67;
      }
      if (!v21) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
      size_t v18 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
      size_t v18 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    goto LABEL_65;
  }
  unsigned int v5 = *(void **)(v4 + 328);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
    int v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v15, &type, &v26)) {
      goto LABEL_66;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        uint64_t v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_66;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
        size_t v18 = "%{public}s called with null masque->context, backtrace limit exceeded";
        goto LABEL_65;
      }
      BOOL v22 = (char *)__nw_create_backtrace_string();
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v23 = os_log_type_enabled(v16, type);
      if (!v22)
      {
        if (!v23) {
          goto LABEL_66;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
        size_t v18 = "%{public}s called with null masque->context, no backtrace";
        goto LABEL_65;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
        __int16 v30 = 2082;
        uint64_t v31 = v22;
        __int16 v24 = "%{public}s called with null masque->context, dumping backtrace:%{public}s";
LABEL_50:
        _os_log_impl(&dword_1830D4000, v16, v17, v24, buf, 0x16u);
      }
LABEL_51:
      free(v22);
      if (!v15) {
        return;
      }
LABEL_67:
      free(v15);
      return;
    }
    uint64_t v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    if (!os_log_type_enabled(v16, type)) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
    size_t v18 = "%{public}s called with null masque->context";
LABEL_65:
    _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
    goto LABEL_66;
  }
  if (nw_protocol_masque_get_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27403);
  }
  if (nw_protocol_masque_get_definition(void)::definition) {
    uint64_t v6 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
  }
  else {
    uint64_t v6 = 0;
  }
  globals_for_protocol = (unsigned char *)nw_context_get_globals_for_protocol(v5, v6);
  if (!globals_for_protocol)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
    int v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v15, &type, &v26)) {
      goto LABEL_66;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
      size_t v18 = "%{public}s called with null globals";
      goto LABEL_65;
    }
    if (!v26)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
      size_t v18 = "%{public}s called with null globals, backtrace limit exceeded";
      goto LABEL_65;
    }
    BOOL v22 = (char *)__nw_create_backtrace_string();
    uint64_t v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v25 = os_log_type_enabled(v16, type);
    if (!v22)
    {
      if (!v25) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
      size_t v18 = "%{public}s called with null globals, no backtrace";
      goto LABEL_65;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
      __int16 v30 = 2082;
      uint64_t v31 = v22;
      __int16 v24 = "%{public}s called with null globals, dumping backtrace:%{public}s";
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  int v8 = *__s;
  globals_for_protocol[4] = v8;
  int v9 = globals_for_protocol + 4;
  if (v8)
  {
    int v10 = __s[1];
    globals_for_protocol[5] = v10;
    if (v10)
    {
      int v11 = __s[2];
      globals_for_protocol[6] = v11;
      if (v11)
      {
        int v12 = __s[3];
        globals_for_protocol[7] = v12;
        if (v12)
        {
          int v13 = __s[4];
          globals_for_protocol[8] = v13;
          if (v13)
          {
            int v14 = __s[5];
            globals_for_protocol[9] = v14;
            if (v14) {
              globals_for_protocol[10] = 0;
            }
          }
        }
      }
    }
  }
  if ((*(unsigned char *)(v4 + 529) & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    __int16 v19 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      os_log_type_t v29 = "nw_masque_store_cached_geohash_value";
      __int16 v30 = 2082;
      uint64_t v31 = (char *)(v4 + 531);
      __int16 v32 = 2080;
      uint64_t v33 = " ";
      __int16 v34 = 2082;
      v35 = v9;
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sStoring geohash hint %{public}s", buf, 0x2Au);
    }
  }
}

void ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_4(uint64_t a1, char *__s)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *(void *)os_log_type_t v17 = 0;
  if (__s && strlen(__s) <= 7)
  {
    v17[0] = *__s;
    if (v17[0])
    {
      v17[1] = __s[1];
      if (v17[1])
      {
        v17[2] = __s[2];
        if (v17[2])
        {
          v17[3] = __s[3];
          if (v17[3])
          {
            v17[4] = __s[4];
            if (v17[4])
            {
              v17[5] = __s[5];
              if (v17[5])
              {
                v17[6] = __s[6];
                if (v17[6]) {
                  v17[7] = 0;
                }
              }
            }
          }
        }
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = atoi(v17);
    uint64_t v4 = *(void *)(a1 + 40);
    if (!v4 || (*(unsigned char *)(v4 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      unsigned int v5 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = "";
        uint64_t v7 = *(void *)(a1 + 40);
        BOOL v8 = v7 == 0;
        if (v7) {
          int v9 = (const char *)(v7 + 531);
        }
        else {
          int v9 = "";
        }
        if (!v8) {
          uint64_t v6 = " ";
        }
        int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        int v11 = 136446722;
        int v12 = v9;
        __int16 v13 = 2080;
        int v14 = v6;
        __int16 v15 = 1024;
        int v16 = v10;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s%sReceived epoch value of %d", (uint8_t *)&v11, 0x1Cu);
      }
    }
  }
}

char *___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_176(char *result, char *__s1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!__s1) {
    return result;
  }
  int v3 = result;
  *(unsigned char *)(*(void *)(*((void *)result + 4) + 8) + 24) = strstr(__s1, "expired routing") != 0;
  *(unsigned char *)(*(void *)(*((void *)v3 + 5) + 8) + 24) = strstr(__s1, "received-status=") != 0;
  if (!*((void *)v3 + 10))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_masque_get_dns_failure_reason_from_proxy_status";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_25;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v17 = "nw_masque_get_dns_failure_reason_from_proxy_status";
      int v9 = "%{public}s called with null masque";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_masque_get_dns_failure_reason_from_proxy_status";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_25;
      }
      if (!v11)
      {
LABEL_25:
        if (v6) {
          free(v6);
        }
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v17 = "nw_masque_get_dns_failure_reason_from_proxy_status";
      int v9 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v17 = "nw_masque_get_dns_failure_reason_from_proxy_status";
      int v9 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_25;
  }
  size_t v4 = strlen(__s1);
  if (!strnstr(__s1, "error=dns_error", v4))
  {
LABEL_27:
    int v5 = 0;
    goto LABEL_28;
  }
  if (strnstr(__s1, "info-code=15", v4))
  {
    int v5 = 1;
  }
  else if (strnstr(__s1, "info-code=16", v4))
  {
    int v5 = 2;
  }
  else if (strnstr(__s1, "info-code=17", v4))
  {
    int v5 = 3;
  }
  else
  {
    int v5 = 0;
  }
LABEL_28:
  *(_DWORD *)(*(void *)(*((void *)v3 + 6) + 8) + 24) = v5;
  BOOL v12 = strstr(__s1, "error=dns_error") && !*(_DWORD *)(*(void *)(*((void *)v3 + 6) + 8) + 24)
     || strstr(__s1, "error=destination_ip_prohibited")
     || strstr(__s1, "error=destination_ip_unroutable")
     || strstr(__s1, "error=destination_not_found")
     || strstr(__s1, "error=destination_unavailable") != 0;
  *(unsigned char *)(*(void *)(*((void *)v3 + 7) + 8) + 24) = v12;
  *(unsigned char *)(*(void *)(*((void *)v3 + 8) + 8) + 24) = strstr(__s1, "error=resource_uses_reverse_proxy") != 0;
  uint64_t result = strstr(__s1, "error=connection_refused");
  if (result)
  {
    __int16 v13 = v3 + 72;
  }
  else
  {
    uint64_t result = strstr(__s1, "error=connection_timeout");
    if (!result) {
      return result;
    }
    uint64_t result = (char *)nw_endpoint_get_type(*(nw_endpoint_t *)(*((void *)v3 + 10) + 312));
    __int16 v13 = v3 + 72;
    if (result == 1) {
      __int16 v13 = v3 + 56;
    }
  }
  *(unsigned char *)(*(void *)(*(void *)v13 + 8) + 24) = 1;
  return result;
}

void ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_192(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || (*(unsigned char *)(v2 + 529) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    int v3 = gprivacy_proxyLogObj;
    BOOL v4 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
    uint64_t v2 = *(void *)(a1 + 32);
    if (v4)
    {
      int v5 = (const char *)(v2 + 531);
      if (!v2) {
        int v5 = "";
      }
      int v6 = *(unsigned __int16 *)(a1 + 40);
      int v8 = 136446722;
      int v9 = v5;
      uint64_t v7 = " ";
      if (!v2) {
        uint64_t v7 = "";
      }
      __int16 v10 = 2080;
      BOOL v11 = v7;
      __int16 v12 = 1024;
      int v13 = v6;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s%sCONNECT response %u timed out waiting for certificates, failing", (uint8_t *)&v8, 0x1Cu);
      uint64_t v2 = *(void *)(a1 + 32);
    }
  }
  nw_masque_mark_failed_with_error(v2, 61);
}

uint64_t nw_protocol_masque_listener_get_input_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
      int v13 = "%{public}s called with null protocol";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
          __int16 v24 = 2082;
          BOOL v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_59:
        if (!v10) {
          return 0;
        }
LABEL_60:
        free(v10);
        return 0;
      }
      if (!v15) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
      int v13 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
      int v13 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_58;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20)) {
      goto LABEL_59;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_59;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
        int v13 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_58;
      }
      int v16 = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!v16)
      {
        if (!v17) {
          goto LABEL_59;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
        int v13 = "%{public}s called with null masque, no backtrace";
        goto LABEL_58;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
        __int16 v24 = 2082;
        BOOL v25 = v16;
        __int16 v18 = "%{public}s called with null masque, dumping backtrace:%{public}s";
LABEL_43:
        _os_log_impl(&dword_1830D4000, v11, v12, v18, buf, 0x16u);
      }
LABEL_44:
      free(v16);
      if (!v10) {
        return 0;
      }
      goto LABEL_60;
    }
    BOOL v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_59;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
    int v13 = "%{public}s called with null masque";
LABEL_58:
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    goto LABEL_59;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
      int v13 = "%{public}s called with null input_protocol";
      goto LABEL_58;
    }
    if (!v20)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
      int v13 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_58;
    }
    int v16 = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v19 = os_log_type_enabled(v11, type);
    if (!v16)
    {
      if (!v19) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
      int v13 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_58;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v23 = "nw_protocol_masque_listener_get_input_frames";
      __int16 v24 = 2082;
      BOOL v25 = v16;
      __int16 v18 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      int v9 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v23 = handle + 531;
        __int16 v24 = 2080;
        BOOL v25 = " ";
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s%sNo valid node found", buf, 0x16u);
      }
    }
    return 0;
  }
  if (output_handler_context[4])
  {
    return nw_frame_array_fill_from_pending_array(output_handler_context + 4, (uint64_t)a6, a4, a5);
  }
  else
  {
    return nw_protocol_masque_listener_read_input((uint64_t)handle, (uint64_t)output_handler_context, (uint64_t)a6, a3, a4, a5);
  }
}

uint64_t nw_protocol_masque_listener_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 0x40000000;
      __int16 v18 = (uint64_t (*)(void *))___ZL50nw_protocol_masque_listener_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
      BOOL v19 = &__block_descriptor_tmp_217;
      char v20 = a1;
      BOOL v21 = handle;
      tqh_first = a2->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        int v6 = (nw_frame *)*((void *)tqh_first + 4);
        char v7 = v18(v17);
        tqh_first = v6;
      }
      while ((v7 & 1) != 0);
      return nw_protocol_finalize_output_frames((uint64_t)a1->output_handler, (uint64_t)a2);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_protocol_masque_listener_finalize_output_frames";
    int v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v23 = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &v23, &v22)) {
      goto LABEL_35;
    }
    if (v23 == OS_LOG_TYPE_FAULT)
    {
      __int16 v10 = __nwlog_obj();
      os_log_type_t v11 = v23;
      if (os_log_type_enabled(v10, v23))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_protocol_masque_listener_finalize_output_frames";
        os_log_type_t v12 = "%{public}s called with null masque";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (!v22)
    {
      __int16 v10 = __nwlog_obj();
      os_log_type_t v11 = v23;
      if (os_log_type_enabled(v10, v23))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_protocol_masque_listener_finalize_output_frames";
        os_log_type_t v12 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v10 = __nwlog_obj();
    os_log_type_t v11 = v23;
    BOOL v16 = os_log_type_enabled(v10, v23);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_protocol_masque_listener_finalize_output_frames";
        os_log_type_t v12 = "%{public}s called with null masque, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v25 = "nw_protocol_masque_listener_finalize_output_frames";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      BOOL v15 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v25 = "nw_protocol_masque_listener_finalize_output_frames";
  int v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v23 = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &v23, &v22)) {
    goto LABEL_35;
  }
  if (v23 != OS_LOG_TYPE_FAULT)
  {
    if (!v22)
    {
      __int16 v10 = __nwlog_obj();
      os_log_type_t v11 = v23;
      if (os_log_type_enabled(v10, v23))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_protocol_masque_listener_finalize_output_frames";
        os_log_type_t v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v10 = __nwlog_obj();
    os_log_type_t v11 = v23;
    BOOL v14 = os_log_type_enabled(v10, v23);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_protocol_masque_listener_finalize_output_frames";
        os_log_type_t v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v25 = "nw_protocol_masque_listener_finalize_output_frames";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      BOOL v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_1830D4000, v10, v11, v15, buf, 0x16u);
    }
LABEL_25:
    free(backtrace_string);
    goto LABEL_35;
  }
  __int16 v10 = __nwlog_obj();
  os_log_type_t v11 = v23;
  if (os_log_type_enabled(v10, v23))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_protocol_masque_listener_finalize_output_frames";
    os_log_type_t v12 = "%{public}s called with null protocol";
LABEL_34:
    _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
  }
LABEL_35:
  if (v9) {
    free(v9);
  }
  return 0;
}

uint64_t ___ZL50nw_protocol_masque_listener_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v4 = nw_frame_unclaimed_length(a2);
  int v31 = 0;
  nw_frame_get_buffer((uint64_t)a2, &v31);
  unsigned int v6 = v31 - v4;
  if (v31 - v4 == 19 || v6 == 7)
  {
    nw_frame_unclaim((uint64_t)a2, v5, v6, 0);
    return 1;
  }
  if (!nw_frame_unclaim((uint64_t)a2, v5, 7u, 0))
  {
    uint64_t v19 = *(void *)(a1 + 40);
    if (v19 && (*(unsigned char *)(v19 + 529) & 1) != 0) {
      return 1;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v20 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    uint64_t v21 = *(void *)(a1 + 40);
    if (v21) {
      char v22 = (const char *)(v21 + 531);
    }
    else {
      char v22 = "";
    }
    if (v21) {
      os_log_type_t v23 = " ";
    }
    else {
      os_log_type_t v23 = "";
    }
    int v24 = nw_frame_unclaimed_length(a2);
    *(_DWORD *)buf = 136446722;
    uint64_t v33 = v22;
    __int16 v34 = 2080;
    v35 = v23;
    __int16 v36 = 1024;
    int v37 = v24;
    BOOL v16 = "%{public}s%sFrame is too short for header (%u)";
LABEL_47:
    BOOL v17 = v20;
    uint32_t v18 = 28;
LABEL_48:
    _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    return 1;
  }
  int v30 = 0;
  if (*(unsigned char *)nw_frame_unclaimed_bytes((uint64_t)a2, &v30) == 4) {
    return 1;
  }
  if (!nw_frame_unclaim((uint64_t)a2, v9, 0xCu, 0))
  {
    uint64_t v25 = *(void *)(a1 + 40);
    if (v25 && (*(unsigned char *)(v25 + 529) & 1) != 0) {
      return 1;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v20 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    uint64_t v26 = *(void *)(a1 + 40);
    if (v26) {
      __int16 v27 = (const char *)(v26 + 531);
    }
    else {
      __int16 v27 = "";
    }
    if (v26) {
      uint64_t v28 = " ";
    }
    else {
      uint64_t v28 = "";
    }
    int v29 = nw_frame_unclaimed_length(a2);
    *(_DWORD *)buf = 136446722;
    uint64_t v33 = v27;
    __int16 v34 = 2080;
    v35 = v28;
    __int16 v36 = 1024;
    int v37 = v29;
    BOOL v16 = "%{public}s%sFrame did not contain expected IP version, too short for IPv6 (%u)";
    goto LABEL_47;
  }
  if (*(unsigned char *)nw_frame_unclaimed_bytes((uint64_t)a2, &v30) != 6)
  {
    uint64_t v10 = *(void *)(a1 + 40);
    if (!v10 || (*(unsigned char *)(v10 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v11 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        BOOL v13 = v12 == 0;
        if (v12) {
          BOOL v14 = (const char *)(v12 + 531);
        }
        else {
          BOOL v14 = "";
        }
        BOOL v15 = " ";
        if (v13) {
          BOOL v15 = "";
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v33 = v14;
        __int16 v34 = 2080;
        v35 = v15;
        BOOL v16 = "%{public}s%sFrame did not contain expected IP version";
        BOOL v17 = v11;
        uint32_t v18 = 22;
        goto LABEL_48;
      }
    }
  }
  return 1;
}

uint64_t nw_protocol_masque_listener_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v27, &type, &v53)) {
      goto LABEL_98;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
      int v30 = "%{public}s called with null protocol";
      goto LABEL_97;
    }
    if (!v53)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
      int v30 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v36 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (!v36) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
      int v30 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_97;
    }
    if (!v36) {
      goto LABEL_73;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    int v37 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_72:
    _os_log_impl(&dword_1830D4000, v28, v29, v37, buf, 0x16u);
    goto LABEL_73;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v27, &type, &v53)) {
      goto LABEL_98;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
      int v30 = "%{public}s called with null masque";
      goto LABEL_97;
    }
    if (!v53)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
      int v30 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v38 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (!v38) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
      int v30 = "%{public}s called with null masque, no backtrace";
      goto LABEL_97;
    }
    if (!v38) {
      goto LABEL_73;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    int v37 = "%{public}s called with null masque, dumping backtrace:%{public}s";
    goto LABEL_72;
  }
  if ((handle[527] & 0x10) == 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v27, &type, &v53)) {
      goto LABEL_98;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
      int v30 = "%{public}s called with null masque->listen_udp";
      goto LABEL_97;
    }
    if (!v53)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
      int v30 = "%{public}s called with null masque->listen_udp, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v39 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (!v39) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
      int v30 = "%{public}s called with null masque->listen_udp, no backtrace";
      goto LABEL_97;
    }
    if (!v39) {
      goto LABEL_73;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    int v37 = "%{public}s called with null masque->listen_udp, dumping backtrace:%{public}s";
    goto LABEL_72;
  }
  uint64_t v8 = *((void *)handle + 60);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v27, &type, &v53)) {
      goto LABEL_98;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
      int v30 = "%{public}s called with null masque->listener_flows";
      goto LABEL_97;
    }
    if (!v53)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
      int v30 = "%{public}s called with null masque->listener_flows, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v40 = os_log_type_enabled(v28, type);
    if (backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        int v37 = "%{public}s called with null masque->listener_flows, dumping backtrace:%{public}s";
        goto LABEL_72;
      }
LABEL_73:
      free(backtrace_string);
      goto LABEL_98;
    }
    if (!v40) {
      goto LABEL_98;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_masque_listener_get_output_frames";
    int v30 = "%{public}s called with null masque->listener_flows, no backtrace";
LABEL_97:
    _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
LABEL_98:
    if (v27) {
      free(v27);
    }
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
    int v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (!__nwlog_fault(v31, &type, &v53)) {
      goto LABEL_105;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
      __int16 v34 = "%{public}s called with null input_protocol";
    }
    else if (v53)
    {
      char v41 = (char *)__nw_create_backtrace_string();
      __int16 v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v42 = os_log_type_enabled(v32, type);
      if (v41)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v41;
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v41);
        goto LABEL_105;
      }
      if (!v42)
      {
LABEL_105:
        if (v31) {
          free(v31);
        }
LABEL_13:
        if ((handle[529] & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v14 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = handle + 531;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = " ";
            BOOL v15 = "%{public}s%sNo valid listener flow found";
            BOOL v16 = v14;
            uint32_t v17 = 22;
LABEL_18:
            _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
            return 0;
          }
        }
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
      __int16 v34 = "%{public}s called with null input_protocol, no backtrace";
    }
    else
    {
      __int16 v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (!os_log_type_enabled(v32, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
      __int16 v34 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v32, v33, v34, buf, 0xCu);
    goto LABEL_105;
  }
  node = (void **)nw_hash_table_get_node(v8, (uint64_t)a2, 8);
  if (!node || (uint64_t v12 = node, a2->output_handler_context != node))
  {
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      BOOL v13 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = handle + 531;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = " ";
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s%sNo valid node found", buf, 0x16u);
      }
    }
    goto LABEL_13;
  }
  int address_family = nw_endpoint_get_address_family(node[6]);
  int v20 = address_family;
  if (address_family != 2 && address_family != 30)
  {
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v26 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = handle + 531;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = " ";
        *(_WORD *)&buf[22] = 1024;
        int v56 = v20;
        BOOL v15 = "%{public}s%sInvalid address family %u";
        BOOL v16 = v26;
        uint32_t v17 = 28;
        goto LABEL_18;
      }
    }
    return 0;
  }
  output_handler = a1->output_handler;
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  int v56 = 0;
  *(void *)&buf[16] = 0x2000000000;
  int v56 = ((uint64_t (*)(void))output_handler->callbacks->get_output_frames)();
  if (*(_DWORD *)(*(void *)&buf[8] + 24))
  {
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 0x40000000;
    int v45 = ___ZL45nw_protocol_masque_listener_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
    int v46 = &unk_1E523ED40;
    char v52 = v20;
    os_log_type_t v47 = buf;
    BOOL v48 = handle;
    v49 = a6;
    BOOL v50 = v12 + 4;
    char v51 = a1;
    tqh_first = a6->tqh_first;
    do
    {
      if (!tqh_first) {
        break;
      }
      int v24 = (nw_frame *)*((void *)tqh_first + 4);
      char v25 = ((uint64_t (*)(void *))v45)(v44);
      tqh_first = v24;
    }
    while ((v25 & 1) != 0);
    uint64_t v18 = *(unsigned int *)(*(void *)&buf[8] + 24);
  }
  else
  {
    uint64_t v18 = 0;
  }
  _Block_object_dispose(buf, 8);
  return v18;
}

uint64_t ___ZL45nw_protocol_masque_listener_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unsigned int v28 = 0;
  int v4 = (unsigned char *)nw_frame_unclaimed_bytes(a2, &v28);
  uint64_t v5 = v4;
  int v6 = *(unsigned __int8 *)(a1 + 72);
  if (v6 == 2)
  {
    if (v28 <= 6)
    {
      uint64_t v14 = *(void *)(a1 + 40);
      if (v14 && (*(unsigned char *)(v14 + 529) & 1) != 0) {
        goto LABEL_38;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v8 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_38;
      }
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v10 = "";
      BOOL v16 = v15 == 0;
      if (v15) {
        uint64_t v12 = (const char *)(v15 + 531);
      }
      else {
        uint64_t v12 = "";
      }
      unsigned int v13 = v28;
      *(_DWORD *)buf = 136446722;
      if (!v16) {
        uint64_t v10 = " ";
      }
      goto LABEL_37;
    }
    unsigned char *v4 = 4;
    address = nw_endpoint_get_address(*(nw_endpoint_t *)(*(void *)(a1 + 56) + 16));
    *(_DWORD *)(v5 + 1) = *(_DWORD *)&address->sa_data[2];
    *(_WORD *)(v5 + 5) = *(_WORD *)address->sa_data;
    uint64_t v24 = a2;
    int v25 = 7;
LABEL_44:
    nw_frame_claim(v24, v23, v25, 0);
    return 1;
  }
  if (v6 != 30)
  {
    uint64_t v17 = *(void *)(a1 + 40);
    if (v17 && (*(unsigned char *)(v17 + 529) & 1) != 0) {
      goto LABEL_38;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v8 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_38;
    }
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v10 = "";
    BOOL v19 = v18 == 0;
    if (v18) {
      uint64_t v12 = (const char *)(v18 + 531);
    }
    else {
      uint64_t v12 = "";
    }
    unsigned int v13 = v28;
    *(_DWORD *)buf = 136446722;
    if (!v19) {
      uint64_t v10 = " ";
    }
    goto LABEL_37;
  }
  if (v28 > 0x12)
  {
    unsigned char *v4 = 6;
    char v22 = nw_endpoint_get_address(*(nw_endpoint_t *)(*(void *)(a1 + 56) + 16));
    *(sockaddr *)(v5 + 1) = *(sockaddr *)&v22->sa_data[6];
    *(_WORD *)(v5 + 17) = *(_WORD *)v22->sa_data;
    uint64_t v24 = a2;
    int v25 = 19;
    goto LABEL_44;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7 && (*(unsigned char *)(v7 + 529) & 1) != 0) {
    goto LABEL_38;
  }
  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
  }
  uint64_t v8 = gprivacy_proxyLogObj;
  if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
    goto LABEL_38;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = "";
  BOOL v11 = v9 == 0;
  if (v9) {
    uint64_t v12 = (const char *)(v9 + 531);
  }
  else {
    uint64_t v12 = "";
  }
  unsigned int v13 = v28;
  *(_DWORD *)buf = 136446722;
  if (!v11) {
    uint64_t v10 = " ";
  }
LABEL_37:
  int v30 = v12;
  __int16 v31 = 2080;
  __int16 v32 = v10;
  __int16 v33 = 1024;
  unsigned int v34 = v13;
  _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s%sFrame is too short for header (%u)", buf, 0x1Cu);
LABEL_38:
  uint64_t v20 = *(void *)(a2 + 32);
  uint64_t v21 = *(void **)(a2 + 40);
  if (v20)
  {
    *(void *)(v20 + 40) = v21;
    uint64_t v21 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 48) + 8) = v21;
  }
  void *v21 = v20;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  --*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return 1;
}

BOOL nw_protocol_masque_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[127] == 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v15 = "nw_protocol_masque_waiting_for_output";
    int v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_protocol_masque_waiting_for_output";
        uint64_t v7 = "%{public}s called with null masque";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v12)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_protocol_masque_waiting_for_output";
        uint64_t v7 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_protocol_masque_waiting_for_output";
        uint64_t v7 = "%{public}s called with null masque, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v15 = "nw_protocol_masque_waiting_for_output";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v15 = "nw_protocol_masque_waiting_for_output";
  int v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_protocol_masque_waiting_for_output";
        uint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_protocol_masque_waiting_for_output";
        uint64_t v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v15 = "nw_protocol_masque_waiting_for_output";
      __int16 v16 = 2082;
      uint64_t v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v5, v6, v10, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v15 = "nw_protocol_masque_waiting_for_output";
    uint64_t v7 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
  }
LABEL_32:
  if (v4) {
    free(v4);
  }
  return 0;
}

uint64_t nw_protocol_masque_supports_external_data(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = (unsigned __int8 *)a1->handle;
    if (handle) {
      return (handle[527] >> 6) & 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_masque_supports_external_data";
    int v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_masque_supports_external_data";
        os_log_type_t v6 = "%{public}s called with null masque";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_masque_supports_external_data";
        os_log_type_t v6 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_masque_supports_external_data";
        os_log_type_t v6 = "%{public}s called with null masque, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_masque_supports_external_data";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_protocol_masque_supports_external_data";
  int v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_masque_supports_external_data";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_masque_supports_external_data";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_masque_supports_external_data";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  int v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_masque_supports_external_data";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

void nw_protocol_masque_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_protocol_masque_error";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v14, &type, &v23)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_protocol_masque_error";
      uint64_t v17 = "%{public}s called with null protocol";
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_protocol_masque_error";
          __int16 v27 = 2082;
          unsigned int v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_60:
        if (!v14) {
          return;
        }
        goto LABEL_61;
      }
      if (!v19) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_protocol_masque_error";
      uint64_t v17 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_protocol_masque_error";
      uint64_t v17 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_59:
    _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
    goto LABEL_60;
  }
  handle = a1->handle;
  if (handle)
  {
    if (a3 == 40)
    {
      if (handle[127] == 2 && (*(_DWORD *)((char *)handle + 527) & 0x600000) == 0x200000) {
        return;
      }
      handle[130] = 40;
      goto LABEL_26;
    }
    handle[130] = a3;
    if ((a3 + 9815) <= 7 && (int v7 = 1, ((1 << (a3 + 87)) & 0x83) != 0))
    {
      int v22 = 0;
    }
    else
    {
      if (a3 == 35) {
        return;
      }
      if (a3 != 60 || (*((unsigned char *)handle + 527) & 4) == 0) {
        goto LABEL_26;
      }
      int v7 = 0;
      int v22 = 1;
    }
    BOOL v8 = a1;
    while (1)
    {
      BOOL v8 = v8->output_handler;
      if (!v8) {
        break;
      }
      name = v8->identifier->name;
      if (!strcmp(name, "quic") || !strcmp(name, "quic-connection") || !strcmp(name, "tls"))
      {
        if (v8 != a2) {
          break;
        }
        if (v7)
        {
          if ((*((unsigned char *)handle + 527) & 4) != 0) {
            int v10 = 1206;
          }
          else {
            int v10 = 1106;
          }
        }
        else
        {
          int v10 = a3;
          if (!v22) {
            break;
          }
        }
        nw_masque_report_error_to_proxy_agent((uint64_t)handle, v10);
        break;
      }
    }
LABEL_26:
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        error = (void (*)(void))callbacks->error;
        if (error)
        {
          error();
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v26 = "nw_protocol_masque_error";
  uint64_t v14 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v14, &type, &v23)) {
    goto LABEL_60;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    __int16 v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_60;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_protocol_masque_error";
    uint64_t v17 = "%{public}s called with null masque";
    goto LABEL_59;
  }
  if (!v23)
  {
    __int16 v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_60;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_protocol_masque_error";
    uint64_t v17 = "%{public}s called with null masque, backtrace limit exceeded";
    goto LABEL_59;
  }
  uint64_t v20 = (char *)__nw_create_backtrace_string();
  __int16 v15 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v21 = os_log_type_enabled(v15, type);
  if (!v20)
  {
    if (!v21) {
      goto LABEL_60;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_protocol_masque_error";
    uint64_t v17 = "%{public}s called with null masque, no backtrace";
    goto LABEL_59;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v26 = "nw_protocol_masque_error";
    __int16 v27 = 2082;
    unsigned int v28 = v20;
    _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v20);
  if (v14) {
LABEL_61:
  }
    free(v14);
}

void nw_protocol_masque_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_protocol_masque_disconnected";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v17, &type, &v26)) {
      goto LABEL_69;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_69;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_protocol_masque_disconnected";
      uint64_t v20 = "%{public}s called with null protocol";
      goto LABEL_68;
    }
    if (!v26)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_69;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_protocol_masque_disconnected";
      uint64_t v20 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_68;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v22 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_69;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_protocol_masque_disconnected";
      uint64_t v20 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_68;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v29 = "nw_protocol_masque_disconnected";
      __int16 v30 = 2082;
      __int16 v31 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_69:
    if (!v17) {
      return;
    }
    goto LABEL_70;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_protocol_masque_disconnected";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v17, &type, &v26)) {
      goto LABEL_69;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_69;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_protocol_masque_disconnected";
      uint64_t v20 = "%{public}s called with null masque";
      goto LABEL_68;
    }
    if (!v26)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_69;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_protocol_masque_disconnected";
      uint64_t v20 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_68;
    }
    char v23 = (char *)__nw_create_backtrace_string();
    uint64_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v24 = os_log_type_enabled(v18, type);
    if (v23)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v29 = "nw_protocol_masque_disconnected";
        __int16 v30 = 2082;
        __int16 v31 = v23;
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v23);
      if (!v17) {
        return;
      }
LABEL_70:
      free(v17);
      return;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_protocol_masque_disconnected";
      uint64_t v20 = "%{public}s called with null masque, no backtrace";
LABEL_68:
      _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
      goto LABEL_69;
    }
    goto LABEL_69;
  }
  if (*((nw_protocol **)handle + 54) == a2)
  {
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      BOOL v8 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v29 = handle + 531;
        __int16 v30 = 2080;
        __int16 v31 = " ";
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s%sDemux protocol disconnected", buf, 0x16u);
      }
    }
    uint64_t v9 = *((void *)handle + 62);
    int v10 = (void *)*((void *)handle + 41);
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 0x40000000;
    void v25[2] = ___ZL31nw_protocol_masque_disconnectedP11nw_protocolS0__block_invoke;
    v25[3] = &unk_1E523E8A8;
    v25[4] = v9;
    nw_queue_context_async(v10, v25);
  }
  else
  {
    if (*((nw_protocol **)handle + 4) != a2 || *((_DWORD *)handle + 127) == 5) {
      return;
    }
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      int v4 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        logging_description = nw_endpoint_get_logging_description(*((void **)handle + 39));
        *(_DWORD *)buf = 136446722;
        uint64_t v29 = handle + 531;
        __int16 v30 = 2080;
        __int16 v31 = " ";
        __int16 v32 = 2082;
        __int16 v33 = logging_description;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s%sDisconnected from %{public}s", buf, 0x20u);
      }
    }
    nw_protocol_remove_instance((uint64_t)a1);
    if (*((_DWORD *)handle + 127) == 2)
    {
      int v6 = *((_DWORD *)handle + 130);
      if (v6)
      {
        if (v6 != 57)
        {
          if (v6 == 35)
          {
            if ((handle[529] & 1) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
              }
              int v7 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136446466;
                uint64_t v29 = handle + 531;
                __int16 v30 = 2080;
                __int16 v31 = " ";
                _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s%sConnection needs to retry, asking to rebuild", buf, 0x16u);
              }
            }
            *((_DWORD *)handle + 127) = 0;
            nw_protocol_notify(*((void **)handle + 6), (uint64_t)handle, 19);
            return;
          }
          if ((handle[529] & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            char v11 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
            {
              char v12 = nw_endpoint_get_logging_description(*((void **)handle + 39));
              *(_DWORD *)buf = 136446722;
              uint64_t v29 = handle + 531;
              __int16 v30 = 2080;
              __int16 v31 = " ";
              __int16 v32 = 2082;
              __int16 v33 = v12;
              _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s%sConnection disconnected from %{public}s without a reply", buf, 0x20u);
            }
          }
          if ((*(_DWORD *)(handle + 527) & 4) != 0) {
            int v13 = 1200;
          }
          else {
            int v13 = 1100;
          }
          nw_masque_report_error_to_proxy_agent((uint64_t)handle, v13);
        }
      }
    }
    *((_DWORD *)handle + 127) = 5;
    uint64_t v14 = *((void *)handle + 6);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 24);
      if (v15)
      {
        os_log_type_t v16 = *(void (**)(void))(v15 + 48);
        if (v16) {
          v16();
        }
      }
    }
  }
}

uint64_t ___ZL31nw_protocol_masque_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 160);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        os_log_type_t v5 = *(void (**)(void))(v4 + 8);
        if (v5) {
          v5();
        }
      }
    }
    uint64_t result = *(void *)(v2 + 224);
    if (result)
    {
      uint64_t v6 = *(void *)(result + 24);
      if (v6)
      {
        int v7 = *(uint64_t (**)(void))(v6 + 8);
        if (v7)
        {
          return v7();
        }
      }
    }
  }
  return result;
}

void nw_protocol_masque_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v23 = "nw_protocol_masque_disconnect";
    char v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v12, &type, &v20)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v23 = "nw_protocol_masque_disconnect";
      uint64_t v15 = "%{public}s called with null protocol";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          char v23 = "nw_protocol_masque_disconnect";
          __int16 v24 = 2082;
          int v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_46:
        if (!v12) {
          return;
        }
LABEL_47:
        free(v12);
        return;
      }
      if (!v17) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v23 = "nw_protocol_masque_disconnect";
      uint64_t v15 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      int v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      char v23 = "nw_protocol_masque_disconnect";
      uint64_t v15 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_45:
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_46;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    if (*((_DWORD *)handle + 127) != 5)
    {
      if ((handle[529] & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        os_log_type_t v5 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
        {
          logging_description = nw_endpoint_get_logging_description(*((void **)handle + 39));
          *(_DWORD *)buf = 136446722;
          char v23 = handle + 531;
          __int16 v24 = 2080;
          int v25 = " ";
          __int16 v26 = 2082;
          __int16 v27 = logging_description;
          _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s%sClosing connection for %{public}s", buf, 0x20u);
        }
      }
      nw_protocol_remove_instance((uint64_t)a1);
      *((_DWORD *)handle + 127) = 5;
      if (a2)
      {
        callbacks = a2->callbacks;
        if (callbacks)
        {
          disconnected = (void (*)(nw_protocol *, nw_protocol *))callbacks->disconnected;
          if (disconnected) {
            disconnected(a2, a1);
          }
        }
      }
      uint64_t v9 = *((void *)handle + 4);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 24);
        if (v10)
        {
          char v11 = *(void (**)(void))(v10 + 32);
          if (v11) {
            v11();
          }
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v23 = "nw_protocol_masque_disconnect";
  char v12 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v12, &type, &v20)) {
    goto LABEL_46;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v23 = "nw_protocol_masque_disconnect";
    uint64_t v15 = "%{public}s called with null masque";
    goto LABEL_45;
  }
  if (!v20)
  {
    int v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v23 = "nw_protocol_masque_disconnect";
    uint64_t v15 = "%{public}s called with null masque, backtrace limit exceeded";
    goto LABEL_45;
  }
  uint64_t v18 = (char *)__nw_create_backtrace_string();
  int v13 = __nwlog_obj();
  os_log_type_t v14 = type;
  BOOL v19 = os_log_type_enabled(v13, type);
  if (!v18)
  {
    if (!v19) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    char v23 = "nw_protocol_masque_disconnect";
    uint64_t v15 = "%{public}s called with null masque, no backtrace";
    goto LABEL_45;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    char v23 = "nw_protocol_masque_disconnect";
    __int16 v24 = 2082;
    int v25 = v18;
    _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v18);
  if (v12) {
    goto LABEL_47;
  }
}

void nw_protocol_masque_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_masque_connected";
    uint64_t v57 = (char *)_os_log_send_and_compose_impl();
    applier[0] = 16;
    LOBYTE(v106) = 0;
    if (!__nwlog_fault(v57, applier, &v106)) {
      goto LABEL_162;
    }
    if (applier[0] == 17)
    {
      long long v58 = __nwlog_obj();
      os_log_type_t v59 = applier[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)applier[0])) {
        goto LABEL_162;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_masque_connected";
      long long v60 = "%{public}s called with null protocol";
      goto LABEL_161;
    }
    if (!(_BYTE)v106)
    {
      long long v58 = __nwlog_obj();
      os_log_type_t v59 = applier[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)applier[0])) {
        goto LABEL_162;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_masque_connected";
      long long v60 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_161;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    long long v58 = __nwlog_obj();
    os_log_type_t v59 = applier[0];
    BOOL v62 = os_log_type_enabled(v58, (os_log_type_t)applier[0]);
    if (!backtrace_string)
    {
      if (!v62) {
        goto LABEL_162;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_masque_connected";
      long long v60 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_161;
    }
    if (v62)
    {
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "nw_protocol_masque_connected";
      WORD6(buf[0]) = 2082;
      *(void *)((char *)buf + 14) = backtrace_string;
      _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s called with null protocol, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
    }
    free(backtrace_string);
LABEL_162:
    if (!v57) {
      return;
    }
    goto LABEL_163;
  }
  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_masque_connected";
    uint64_t v57 = (char *)_os_log_send_and_compose_impl();
    applier[0] = 16;
    LOBYTE(v106) = 0;
    if (!__nwlog_fault(v57, applier, &v106)) {
      goto LABEL_162;
    }
    if (applier[0] == 17)
    {
      long long v58 = __nwlog_obj();
      os_log_type_t v59 = applier[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)applier[0])) {
        goto LABEL_162;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_masque_connected";
      long long v60 = "%{public}s called with null masque";
      goto LABEL_161;
    }
    if (!(_BYTE)v106)
    {
      long long v58 = __nwlog_obj();
      os_log_type_t v59 = applier[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)applier[0])) {
        goto LABEL_162;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_masque_connected";
      long long v60 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_161;
    }
    long long v63 = (char *)__nw_create_backtrace_string();
    long long v58 = __nwlog_obj();
    os_log_type_t v59 = applier[0];
    BOOL v64 = os_log_type_enabled(v58, (os_log_type_t)applier[0]);
    if (v63)
    {
      if (v64)
      {
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_protocol_masque_connected";
        WORD6(buf[0]) = 2082;
        *(void *)((char *)buf + 14) = v63;
        _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s called with null masque, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
      }
      free(v63);
      if (!v57) {
        return;
      }
LABEL_163:
      free(v57);
      return;
    }
    if (v64)
    {
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_masque_connected";
      long long v60 = "%{public}s called with null masque, no backtrace";
LABEL_161:
      _os_log_impl(&dword_1830D4000, v58, v59, v60, (uint8_t *)buf, 0xCu);
      goto LABEL_162;
    }
    goto LABEL_162;
  }
  if (&handle[1] == a1)
  {
    if ((BYTE1(handle[8].identifier) & 1) == 0 && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      long long v65 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136446722;
        *(void *)((char *)buf + 4) = "nw_protocol_masque_connected";
        WORD6(buf[0]) = 2082;
        *(void *)((char *)buf + 14) = (char *)handle + 531;
        WORD3(buf[1]) = 2080;
        *((void *)&buf[1] + 1) = " ";
        _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived connected event for server connect", (uint8_t *)buf, 0x20u);
      }
    }
    if (*(_DWORD *)handle[8].flow_id) {
      return;
    }
    output_handler_context = handle[4].output_handler_context;
    if (output_handler_context)
    {
      if (*(void *)&handle[6].flow_id[8])
      {
        int v101 = 0;
        id v31 = output_handler_context;
        int v32 = [v31 type];

        if (v32 == 1 && nw_endpoint_get_address_family(handle[4].output_handler_context) == 30) {
          __int16 v33 = "[%s]:%u";
        }
        else {
          __int16 v33 = "%s:%u";
        }
        hostname = nw_endpoint_get_hostname((nw_endpoint_t)handle[4].output_handler_context);
        unsigned int port = nw_endpoint_get_port((nw_endpoint_t)handle[4].output_handler_context);
        asprintf(&v101, v33, hostname, port);
        BOOL v36 = (void *)_nw_http_request_create("CONNECT-UDP", "https", v101, "/");
        if (v101)
        {
          free(v101);
          int v101 = 0;
        }
        if (v36)
        {
          id v37 = v36;
          _nw_http_fields_append(v37, "Datagram-Flow-Id", (char *)&handle[9].output_handler + 7);

          BOOL v38 = dispatch_data_create_with_transform();
          memset((char *)buf + 1, 0, 63);
          LOBYTE(buf[0]) = 58;
          if (dispatch_data_get_size(v38) <= 0x3D)
          {
            for (i = (char *)buf; ; i = v43 + 1)
            {
              BOOL v43 = strchr(i, 43);
              if (!v43) {
                break;
              }
              char *v43 = 45;
            }
            for (j = (char *)buf; ; j = v45 + 1)
            {
              int v45 = strchr(j, 47);
              if (!v45) {
                break;
              }
              *int v45 = 95;
            }
            uint64_t v106 = 0;
            uint64_t v107 = &v106;
            uint64_t v108 = 0x2000000000;
            uint64_t v109 = 0;
            *(void *)os_log_type_t type = 0;
            BOOL v103 = type;
            uint64_t v104 = 0x2000000000;
            os_log_type_t v105 = (char *)buf + 1;
            if (v38)
            {
              *(void *)applier = MEMORY[0x1E4F143A8];
              *(void *)&applier[8] = 0x40000000;
              *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
              BOOL v112 = (const char *)&unk_1E5242B60;
              BOOL v114 = type;
              uint64_t v115 = 61;
              BOOL v113 = &v106;
              dispatch_data_apply(v38, applier);
              uint64_t v46 = v107[3];
            }
            else
            {
              uint64_t v46 = 0;
            }
            _Block_object_dispose(type, 8);
            _Block_object_dispose(&v106, 8);
            *(_WORD *)((char *)buf + v46 + 1) = 58;
            id v54 = v37;
            _nw_http_fields_append(v54, "Server-Connection-Id", buf);

            if (v38) {
              dispatch_release(v38);
            }
            metadata_for_request = nw_http_create_metadata_for_request(v54);
            if (nw_masque_send_metadata((uint64_t)handle, (uint64_t)metadata_for_request, (uint64_t)handle[1].output_handler))
            {
              if ((BYTE1(handle[8].identifier) & 1) == 0)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
                }
                int v56 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)applier = 136446722;
                  *(void *)&applier[4] = "nw_masque_send_server_connect";
                  *(_WORD *)&applier[12] = 2082;
                  *(void *)&applier[14] = (char *)handle + 531;
                  *(_WORD *)&applier[22] = 2080;
                  BOOL v112 = " ";
                  _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSent CONNECT-UDP request for server CID", applier, 0x20u);
                }
              }
              *(_DWORD *)handle[8].flow_id = 2;
            }
            if (metadata_for_request) {
              os_release(metadata_for_request);
            }
          }
          else
          {
            if ((BYTE1(handle[8].identifier) & 1) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
              }
              BOOL v39 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
              {
                size_t size = dispatch_data_get_size(v38);
                *(_DWORD *)applier = 136446722;
                *(void *)&applier[4] = (char *)handle + 531;
                *(_WORD *)&applier[12] = 2080;
                *(void *)&applier[14] = " ";
                *(_WORD *)&applier[22] = 2048;
                BOOL v112 = (const char *)size;
                _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_ERROR, "%{public}s%sBase64 data is too large: %zu", applier, 0x20u);
              }
            }
            if (v38) {
              dispatch_release(v38);
            }
          }
          os_release(v37);
        }
        else if ((BYTE1(handle[8].identifier) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          char v41 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf[0]) = 136446466;
            *(void *)((char *)buf + 4) = (char *)handle + 531;
            WORD6(buf[0]) = 2080;
            *(void *)((char *)buf + 14) = " ";
            _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_ERROR, "%{public}s%sFailed to create HTTP message", (uint8_t *)buf, 0x16u);
          }
        }
      }
      goto LABEL_5;
    }
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_masque_send_server_connect";
    long long v66 = (char *)_os_log_send_and_compose_impl();
    applier[0] = 16;
    LOBYTE(v106) = 0;
    if (!__nwlog_fault(v66, applier, &v106)) {
      goto LABEL_197;
    }
    if (applier[0] == 17)
    {
      long long v67 = __nwlog_obj();
      os_log_type_t v68 = applier[0];
      if (!os_log_type_enabled(v67, (os_log_type_t)applier[0])) {
        goto LABEL_197;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_masque_send_server_connect";
      int v69 = "%{public}s called with null masque->target_endpoint";
    }
    else if ((_BYTE)v106)
    {
      v70 = (char *)__nw_create_backtrace_string();
      long long v67 = __nwlog_obj();
      os_log_type_t v68 = applier[0];
      BOOL v71 = os_log_type_enabled(v67, (os_log_type_t)applier[0]);
      if (v70)
      {
        if (v71)
        {
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "nw_masque_send_server_connect";
          WORD6(buf[0]) = 2082;
          *(void *)((char *)buf + 14) = v70;
          _os_log_impl(&dword_1830D4000, v67, v68, "%{public}s called with null masque->target_endpoint, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }
        free(v70);
        goto LABEL_197;
      }
      if (!v71)
      {
LABEL_197:
        if (v66) {
          free(v66);
        }
        goto LABEL_5;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_masque_send_server_connect";
      int v69 = "%{public}s called with null masque->target_endpoint, no backtrace";
    }
    else
    {
      long long v67 = __nwlog_obj();
      os_log_type_t v68 = applier[0];
      if (!os_log_type_enabled(v67, (os_log_type_t)applier[0])) {
        goto LABEL_197;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_masque_send_server_connect";
      int v69 = "%{public}s called with null masque->target_endpoint, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v67, v68, v69, (uint8_t *)buf, 0xCu);
    goto LABEL_197;
  }
  if (handle != a1) {
    return;
  }
LABEL_5:
  os_log_type_t v5 = &unk_1E8F6B000;
  if ((BYTE1(handle[8].identifier) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v6 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
    {
      int output_handler_context_high = HIDWORD(handle[7].output_handler_context);
      LODWORD(buf[0]) = 136446722;
      *(void *)((char *)buf + 4) = (char *)handle + 531;
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = " ";
      WORD3(buf[1]) = 1024;
      DWORD2(buf[1]) = output_handler_context_high;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s%sReceived connected event with state %u", (uint8_t *)buf, 0x1Cu);
    }
  }
  BOOL v8 = &handle[8].flow_id[15];
  uint64_t v9 = *(void **)&handle[7].flow_id[8];
  if (!v9)
  {
    output_handler = a1->output_handler;
    if (!output_handler) {
      goto LABEL_228;
    }
    callbacks = output_handler->callbacks;
    if (!callbacks) {
      goto LABEL_228;
    }
    copy_info = (uint64_t (*)(nw_protocol *, uint64_t))callbacks->copy_info;
    if (!copy_info) {
      goto LABEL_228;
    }
    int v13 = (atomic_uchar *)copy_info(output_handler, 255);
    *(void *)applier = 0;
    *(void *)&applier[8] = applier;
    *(void *)&applier[16] = 0x2000000000;
    BOOL v112 = 0;
    *(void *)&buf[0] = MEMORY[0x1E4F143A8];
    *((void *)&buf[0] + 1) = 0x40000000;
    *(void *)&buf[1] = ___ZL34nw_masque_save_connection_metadataP9nw_masqueP11nw_protocol_block_invoke;
    *((void *)&buf[1] + 1) = &unk_1E523E6F8;
    *(void *)&buf[2] = applier;
    nw_array_apply(v13, (uint64_t)buf);
    os_log_type_t v14 = *(void **)(*(void *)&applier[8] + 24);
    if (v14)
    {
      *(void *)&handle[7].flow_id[8] = os_retain(v14);
      nw_protocol_register_notification((uint64_t)a1, (uint64_t)a1->output_handler, 5);
    }
    if (v13) {
      os_release(v13);
    }
    _Block_object_dispose(applier, 8);
    uint64_t v9 = *(void **)&handle[7].flow_id[8];
    if (!v9) {
      goto LABEL_228;
    }
  }
  if (!nw_http_connection_metadata_get_secondary_certificate_count(v9)
    || *(_DWORD *)&handle[8].flow_id[4]
    || HIDWORD(handle[7].output_handler_context))
  {
    goto LABEL_228;
  }
  if ((BYTE1(handle[8].identifier) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    uint64_t v15 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = (char *)handle + 531;
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = " ";
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_INFO, "%{public}s%sJoined HTTP with secondary certificates, checking for trusted endpoints", (uint8_t *)buf, 0x16u);
    }
  }
  if ((nw_masque_setup_reverse_proxy((uint64_t)handle) & 1) == 0)
  {
LABEL_228:
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      BOOL v17 = default_input_handler->callbacks;
      if (v17)
      {
        connected = (void (*)(nw_protocol *, nw_protocol *))v17->connected;
        if (connected) {
          connected(default_input_handler, a2);
        }
      }
    }
    if (a1->output_handler == a2 && !HIDWORD(handle[7].output_handler_context))
    {
      BOOL v19 = *(void **)&handle[7].flow_id[8];
      if (!v19) {
        goto LABEL_51;
      }
      *(_DWORD *)applier = 0;
      LODWORD(v106) = 0;
      id v20 = v19;
      id v21 = *((id *)v20 + 1);

      if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
      }
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v21, nw_protocol_copy_http_connection_definition_definition);

      if (is_equal_unsafe)
      {
        *(void *)&buf[0] = MEMORY[0x1E4F143A8];
        *((void *)&buf[0] + 1) = 3221225472;
        *(void *)&buf[1] = __nw_http_connection_metadata_get_message_counts_block_invoke;
        *((void *)&buf[1] + 1) = &__block_descriptor_48_e9_B16__0_v8l;
        *(void *)&buf[2] = applier;
        *((void *)&buf[2] + 1) = &v106;
        uint64_t v23 = *((void *)v20 + 4);
        if (v23) {
          __nw_http_connection_metadata_get_message_counts_block_invoke((uint64_t)buf, v23);
        }
LABEL_40:

        if (!v106)
        {
          int v24 = *(_DWORD *)v8;
          *(_DWORD *)v8 |= 2u;
          if ((v24 & 0x10000) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            int v25 = *((void *)v5 + 8);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0]) = 136446978;
              *(void *)((char *)buf + 4) = "nw_protocol_masque_connected";
              WORD6(buf[0]) = 2082;
              *(void *)((char *)buf + 14) = (char *)handle + 531;
              WORD3(buf[1]) = 2080;
              *((void *)&buf[1] + 1) = " ";
              LOWORD(buf[2]) = 1024;
              *(_DWORD *)((char *)&buf[2] + 2) = *(_DWORD *)applier;
              _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNew request, no responses received on connection yet (%u requests)", (uint8_t *)buf, 0x26u);
            }
          }
        }
        if ((*(_DWORD *)v8 & 0x10003) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          __int16 v26 = *((void *)v5 + 8);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf[0]) = 136446722;
            *(void *)((char *)buf + 4) = (char *)handle + 531;
            WORD6(buf[0]) = 2080;
            *(void *)((char *)buf + 14) = " ";
            WORD3(buf[1]) = 1024;
            DWORD2(buf[1]) = *(_DWORD *)applier;
            _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_INFO, "%{public}s%sRequest blocked on getting new streams after %u requests", (uint8_t *)buf, 0x1Cu);
          }
        }
LABEL_51:
        nw_protocol_masque_reset_demux_protocol(a1);
        __int16 v27 = handle[5].callbacks;
        if (v27)
        {
          char v28 = nw_protocol_options_access_handle(v27, &__block_literal_global_82);
          uint64_t v29 = handle->default_input_handler;
          if (!v29) {
            goto LABEL_107;
          }
        }
        else
        {
          char v28 = 0;
          uint64_t v29 = handle->default_input_handler;
          if (!v29) {
            goto LABEL_107;
          }
        }
        name = v29->identifier->name;
        if (!name)
        {
LABEL_93:
          BOOL v48 = v29->default_input_handler;
          if (!v48 || (v49 = v48->identifier->name) == 0 || strncmp(v49, "ohttp", 5uLL))
          {
            if ((v28 & 1) == 0
              && (!name || strcmp(name, "tls") && strcmp(name, "quic") && strcmp(name, "quic-connection")))
            {
              goto LABEL_107;
            }
LABEL_104:
            HIDWORD(handle[7].output_handler_context) = 1;
            if ((*(_DWORD *)v8 & 0x200000) != 0)
            {
              uint64_t v50 = *(void *)handle[4].flow_id;
              if (v50)
              {
                *(_DWORD *)v8 &= ~0x400000u;
                *(void *)(v50 + 32) = 0;
                *(void *)(v50 + 40) = buf;
                *(void *)&buf[0] = v50;
                *((void *)&buf[0] + 1) = v50 + 32;
                nw_protocol_finalize_output_frames((uint64_t)handle, (uint64_t)buf);
                return;
              }
            }
            char v51 = handle->default_input_handler;
            if (v51)
            {
              char v52 = v51->callbacks;
              if (v52)
              {
                char v53 = (void (*)(nw_protocol *, nw_protocol *))v52->connected;
                if (v53)
                {
                  v53(v51, handle);
                  return;
                }
              }
            }
            __nwlog_obj();
            v72 = handle->default_input_handler;
            uint64_t v73 = "invalid";
            if (v72)
            {
              os_log_type_t v74 = v72->identifier->name;
              if (v74) {
                uint64_t v73 = v74;
              }
            }
            LODWORD(buf[0]) = 136446466;
            *(void *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
            WORD6(buf[0]) = 2082;
            *(void *)((char *)buf + 14) = v73;
            uint64_t v75 = (char *)_os_log_send_and_compose_impl();
            applier[0] = 16;
            LOBYTE(v106) = 0;
            if (!__nwlog_fault(v75, applier, &v106)) {
              goto LABEL_218;
            }
            if (applier[0] == 17)
            {
              uint64_t v76 = __nwlog_obj();
              os_log_type_t v77 = applier[0];
              if (!os_log_type_enabled(v76, (os_log_type_t)applier[0])) {
                goto LABEL_218;
              }
              BOOL v78 = handle->default_input_handler;
              uint64_t v79 = "invalid";
              if (v78)
              {
                unsigned int v80 = v78->identifier->name;
                if (v80) {
                  uint64_t v79 = v80;
                }
              }
              LODWORD(buf[0]) = 136446466;
              *(void *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
              WORD6(buf[0]) = 2082;
              *(void *)((char *)buf + 14) = v79;
              int v81 = "%{public}s protocol %{public}s has invalid connected callback";
            }
            else if ((_BYTE)v106)
            {
              v86 = (char *)__nw_create_backtrace_string();
              uint64_t v76 = __nwlog_obj();
              os_log_type_t v77 = applier[0];
              BOOL v87 = os_log_type_enabled(v76, (os_log_type_t)applier[0]);
              if (v86)
              {
                if (v87)
                {
                  uint64_t v88 = handle->default_input_handler;
                  uint64_t v89 = "invalid";
                  if (v88)
                  {
                    uint64_t v90 = v88->identifier->name;
                    if (v90) {
                      uint64_t v89 = v90;
                    }
                  }
                  LODWORD(buf[0]) = 136446722;
                  *(void *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
                  WORD6(buf[0]) = 2082;
                  *(void *)((char *)buf + 14) = v89;
                  WORD3(buf[1]) = 2082;
                  *((void *)&buf[1] + 1) = v86;
                  _os_log_impl(&dword_1830D4000, v76, v77, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x20u);
                }
                free(v86);
                goto LABEL_218;
              }
              if (!v87)
              {
LABEL_218:
                if (v75) {
                  free(v75);
                }
                return;
              }
              BOOL v98 = handle->default_input_handler;
              int v99 = "invalid";
              if (v98)
              {
                int v100 = v98->identifier->name;
                if (v100) {
                  int v99 = v100;
                }
              }
              LODWORD(buf[0]) = 136446466;
              *(void *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
              WORD6(buf[0]) = 2082;
              *(void *)((char *)buf + 14) = v99;
              int v81 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
            }
            else
            {
              uint64_t v76 = __nwlog_obj();
              os_log_type_t v77 = applier[0];
              if (!os_log_type_enabled(v76, (os_log_type_t)applier[0])) {
                goto LABEL_218;
              }
              os_log_type_t v94 = handle->default_input_handler;
              uint64_t v95 = "invalid";
              if (v94)
              {
                uint64_t v96 = v94->identifier->name;
                if (v96) {
                  uint64_t v95 = v96;
                }
              }
              LODWORD(buf[0]) = 136446466;
              *(void *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
              WORD6(buf[0]) = 2082;
              *(void *)((char *)buf + 14) = v95;
              int v81 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
            }
            _os_log_impl(&dword_1830D4000, v76, v77, v81, (uint8_t *)buf, 0x16u);
            goto LABEL_218;
          }
LABEL_125:
          *(_DWORD *)v8 |= 0x3000u;
          nw_masque_mark_connected((uint64_t)handle);
          return;
        }
        if (strcmp(v29->identifier->name, "endpoint_flow") && strcmp(name, "flow_replay"))
        {
          if (!strncmp(name, "ohttp", 5uLL)) {
            goto LABEL_125;
          }
          goto LABEL_93;
        }
        if (nw_parameters_get_fast_open_enabled(*(nw_parameters_t *)handle[5].flow_id))
        {
          *(_DWORD *)v8 |= 0x800u;
          goto LABEL_104;
        }
LABEL_107:
        nw_masque_send_connect((uint64_t)handle);
        return;
      }
      BOOL v82 = __nwlog_obj();
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_http_connection_metadata_get_message_counts";
      uint64_t v83 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v101) = 0;
      if (__nwlog_fault(v83, type, &v101))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v84 = __nwlog_obj();
          os_log_type_t v85 = type[0];
          if (os_log_type_enabled(v84, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_http_connection_metadata_get_message_counts";
            _os_log_impl(&dword_1830D4000, v84, v85, "%{public}s metadata must be http_connection", (uint8_t *)buf, 0xCu);
          }
        }
        else if ((_BYTE)v101)
        {
          unint64_t v91 = (char *)__nw_create_backtrace_string();
          v84 = __nwlog_obj();
          os_log_type_t v92 = type[0];
          BOOL v93 = os_log_type_enabled(v84, type[0]);
          if (v91)
          {
            if (v93)
            {
              LODWORD(buf[0]) = 136446466;
              *(void *)((char *)buf + 4) = "nw_http_connection_metadata_get_message_counts";
              WORD6(buf[0]) = 2082;
              *(void *)((char *)buf + 14) = v91;
              _os_log_impl(&dword_1830D4000, v84, v92, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v91);
            goto LABEL_223;
          }
          if (v93)
          {
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_http_connection_metadata_get_message_counts";
            _os_log_impl(&dword_1830D4000, v84, v92, "%{public}s metadata must be http_connection, no backtrace", (uint8_t *)buf, 0xCu);
          }
        }
        else
        {
          v84 = __nwlog_obj();
          os_log_type_t v97 = type[0];
          if (os_log_type_enabled(v84, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_http_connection_metadata_get_message_counts";
            _os_log_impl(&dword_1830D4000, v84, v97, "%{public}s metadata must be http_connection, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
        }
      }
LABEL_223:
      if (v83) {
        free(v83);
      }
      BOOL v8 = &handle[8].flow_id[15];
      os_log_type_t v5 = &unk_1E8F6B000;
      goto LABEL_40;
    }
  }
}

void sub_183852AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_masque_save_connection_metadataP9nw_masqueP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  if (nw_protocol_metadata_is_http_connection(a3)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
  }
  return 1;
}

uint64_t ___ZL31nw_masque_options_get_fast_openP19nw_protocol_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 33);
}

uint64_t nw_protocol_masque_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = "nw_protocol_masque_connect";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(uu) = 16;
    char v59 = 0;
    if (!__nwlog_fault(v19, &uu, &v59)) {
      goto LABEL_99;
    }
    if (uu != 17)
    {
      if (!v59)
      {
        id v20 = __nwlog_obj();
        os_log_type_t v21 = uu;
        if (!os_log_type_enabled(v20, (os_log_type_t)uu)) {
          goto LABEL_99;
        }
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_protocol_masque_connect";
        BOOL v22 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_98;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v20 = __nwlog_obj();
      os_log_type_t v21 = uu;
      BOOL v35 = os_log_type_enabled(v20, (os_log_type_t)uu);
      if (!backtrace_string)
      {
        if (!v35) {
          goto LABEL_99;
        }
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_protocol_masque_connect";
        BOOL v22 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_98;
      }
      if (v35)
      {
        *(_DWORD *)uuid_string_t out = 136446466;
        *(void *)&out[4] = "nw_protocol_masque_connect";
        *(_WORD *)&out[12] = 2082;
        *(void *)&out[14] = backtrace_string;
        BOOL v36 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_57:
        _os_log_impl(&dword_1830D4000, v20, v21, v36, (uint8_t *)out, 0x16u);
      }
LABEL_58:
      free(backtrace_string);
      goto LABEL_99;
    }
    id v20 = __nwlog_obj();
    os_log_type_t v21 = uu;
    if (!os_log_type_enabled(v20, (os_log_type_t)uu)) {
      goto LABEL_99;
    }
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = "nw_protocol_masque_connect";
    BOOL v22 = "%{public}s called with null protocol";
LABEL_98:
    _os_log_impl(&dword_1830D4000, v20, v21, v22, (uint8_t *)out, 0xCu);
LABEL_99:
    if (v19) {
      free(v19);
    }
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = "nw_protocol_masque_connect";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(uu) = 16;
    char v59 = 0;
    if (!__nwlog_fault(v19, &uu, &v59)) {
      goto LABEL_99;
    }
    if (uu == 17)
    {
      id v20 = __nwlog_obj();
      os_log_type_t v21 = uu;
      if (!os_log_type_enabled(v20, (os_log_type_t)uu)) {
        goto LABEL_99;
      }
      *(_DWORD *)uuid_string_t out = 136446210;
      *(void *)&out[4] = "nw_protocol_masque_connect";
      BOOL v22 = "%{public}s called with null masque";
      goto LABEL_98;
    }
    if (!v59)
    {
      id v20 = __nwlog_obj();
      os_log_type_t v21 = uu;
      if (!os_log_type_enabled(v20, (os_log_type_t)uu)) {
        goto LABEL_99;
      }
      *(_DWORD *)uuid_string_t out = 136446210;
      *(void *)&out[4] = "nw_protocol_masque_connect";
      BOOL v22 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_98;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v20 = __nwlog_obj();
    os_log_type_t v21 = uu;
    BOOL v37 = os_log_type_enabled(v20, (os_log_type_t)uu);
    if (backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)uuid_string_t out = 136446466;
        *(void *)&out[4] = "nw_protocol_masque_connect";
        *(_WORD *)&out[12] = 2082;
        *(void *)&out[14] = backtrace_string;
        BOOL v36 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (!v37) {
      goto LABEL_99;
    }
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = "nw_protocol_masque_connect";
    BOOL v22 = "%{public}s called with null masque, no backtrace";
    goto LABEL_98;
  }
  if (*((_DWORD *)handle + 127) == 4)
  {
    if (*((void *)handle + 60))
    {
      if (!*((void *)handle + 61)) {
        *((void *)handle + 61) = nw_dictionary_create();
      }
      if (a2)
      {
        callbacks = a2->callbacks;
        if (callbacks)
        {
          connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
          if (connected)
          {
            connected(a2, a1);
            long long uu = 0uLL;
            goto LABEL_11;
          }
        }
        __nwlog_obj();
        identifier = a2->identifier;
        if (!identifier) {
          identifier = (nw_protocol_identifier *)"invalid";
        }
      }
      else
      {
        __nwlog_obj();
        identifier = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)uuid_string_t out = 136446466;
      *(void *)&out[4] = "nw_protocol_masque_connect";
      *(_WORD *)&out[12] = 2082;
      *(void *)&out[14] = identifier;
      BOOL v38 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(uu) = 16;
      char v59 = 0;
      if (__nwlog_fault(v38, &uu, &v59))
      {
        if (uu == 17)
        {
          BOOL v39 = __nwlog_obj();
          os_log_type_t v40 = uu;
          if (!os_log_type_enabled(v39, (os_log_type_t)uu)) {
            goto LABEL_108;
          }
          char v41 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier) {
            char v41 = a2->identifier;
          }
          *(_DWORD *)uuid_string_t out = 136446466;
          *(void *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = v41;
          BOOL v42 = "%{public}s protocol %{public}s has invalid connected callback";
LABEL_107:
          _os_log_impl(&dword_1830D4000, v39, v40, v42, (uint8_t *)out, 0x16u);
          goto LABEL_108;
        }
        if (!v59)
        {
          BOOL v39 = __nwlog_obj();
          os_log_type_t v40 = uu;
          if (!os_log_type_enabled(v39, (os_log_type_t)uu)) {
            goto LABEL_108;
          }
          char v51 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier) {
            char v51 = a2->identifier;
          }
          *(_DWORD *)uuid_string_t out = 136446466;
          *(void *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = v51;
          BOOL v42 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
          goto LABEL_107;
        }
        BOOL v43 = (char *)__nw_create_backtrace_string();
        BOOL v39 = __nwlog_obj();
        os_log_type_t v40 = uu;
        BOOL v44 = os_log_type_enabled(v39, (os_log_type_t)uu);
        if (!v43)
        {
          if (!v44) {
            goto LABEL_108;
          }
          char v52 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier) {
            char v52 = a2->identifier;
          }
          *(_DWORD *)uuid_string_t out = 136446466;
          *(void *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = v52;
          BOOL v42 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
          goto LABEL_107;
        }
        if (v44)
        {
          int v45 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier) {
            int v45 = a2->identifier;
          }
          *(_DWORD *)uuid_string_t out = 136446722;
          *(void *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = v45;
          *(_WORD *)&out[22] = 2082;
          *(void *)&out[24] = v43;
          _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", (uint8_t *)out, 0x20u);
        }
        free(v43);
      }
LABEL_108:
      if (v38) {
        free(v38);
      }
      long long uu = 0uLL;
      if (!a2) {
        return 1;
      }
LABEL_11:
      int v7 = a2->callbacks;
      if (v7)
      {
        get_remote_endpoint = (uint64_t (*)(nw_protocol *))v7->get_remote_endpoint;
        if (get_remote_endpoint)
        {
          uint64_t v9 = (void *)get_remote_endpoint(a2);
          uint64_t v10 = a2->callbacks;
          if (v10)
          {
            get_path = (uint64_t (*)(nw_protocol *))v10->get_path;
            if (get_path) {
              goto LABEL_15;
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
          get_path = (uint64_t (*)(nw_protocol *))v7->get_path;
          if (get_path)
          {
LABEL_15:
            char v12 = (void *)get_path(a2);
            nw_path_get_client_id(v12, &uu);
          }
        }
        if (v9)
        {
          if (!uuid_is_null((const unsigned __int8 *)&uu))
          {
            memset(out, 0, sizeof(out));
            uuid_unparse((const unsigned __int8 *)&uu, out);
            nw_dictionary_set_value(*((void *)handle + 61), out, v9);
          }
        }
      }
      return 1;
    }
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      BOOL v17 = default_input_handler->callbacks;
      if (v17)
      {
        uint64_t v18 = (void (*)(void))v17->connected;
        if (v18)
        {
          v18();
          return 1;
        }
      }
    }
    __nwlog_obj();
    int v24 = a1->default_input_handler;
    int v25 = "invalid";
    if (v24)
    {
      __int16 v26 = v24->identifier;
      if (v26) {
        int v25 = (const char *)v26;
      }
    }
    *(_DWORD *)uuid_string_t out = 136446466;
    *(void *)&out[4] = "nw_protocol_masque_connect";
    *(_WORD *)&out[12] = 2082;
    *(void *)&out[14] = v25;
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(uu) = 16;
    char v59 = 0;
    if (__nwlog_fault(v27, &uu, &v59))
    {
      if (uu == 17)
      {
        char v28 = __nwlog_obj();
        os_log_type_t v29 = uu;
        if (!os_log_type_enabled(v28, (os_log_type_t)uu)) {
          goto LABEL_123;
        }
        __int16 v30 = a1->default_input_handler;
        id v31 = "invalid";
        if (v30)
        {
          int v32 = v30->identifier;
          if (v32) {
            id v31 = (const char *)v32;
          }
        }
        *(_DWORD *)uuid_string_t out = 136446466;
        *(void *)&out[4] = "nw_protocol_masque_connect";
        *(_WORD *)&out[12] = 2082;
        *(void *)&out[14] = v31;
        __int16 v33 = "%{public}s protocol %{public}s has invalid connected callback";
        goto LABEL_122;
      }
      if (!v59)
      {
        char v28 = __nwlog_obj();
        os_log_type_t v29 = uu;
        if (!os_log_type_enabled(v28, (os_log_type_t)uu)) {
          goto LABEL_123;
        }
        char v53 = a1->default_input_handler;
        id v54 = "invalid";
        if (v53)
        {
          long long v55 = v53->identifier;
          if (v55) {
            id v54 = (const char *)v55;
          }
        }
        *(_DWORD *)uuid_string_t out = 136446466;
        *(void *)&out[4] = "nw_protocol_masque_connect";
        *(_WORD *)&out[12] = 2082;
        *(void *)&out[14] = v54;
        __int16 v33 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_122;
      }
      uint64_t v46 = (char *)__nw_create_backtrace_string();
      char v28 = __nwlog_obj();
      os_log_type_t v29 = uu;
      BOOL v47 = os_log_type_enabled(v28, (os_log_type_t)uu);
      if (v46)
      {
        if (v47)
        {
          BOOL v48 = a1->default_input_handler;
          v49 = "invalid";
          if (v48)
          {
            uint64_t v50 = v48->identifier;
            if (v50) {
              v49 = (const char *)v50;
            }
          }
          *(_DWORD *)uuid_string_t out = 136446722;
          *(void *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = v49;
          *(_WORD *)&out[22] = 2082;
          *(void *)&out[24] = v46;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", (uint8_t *)out, 0x20u);
        }
        free(v46);
        goto LABEL_123;
      }
      if (v47)
      {
        int v56 = a1->default_input_handler;
        uint64_t v57 = "invalid";
        if (v56)
        {
          long long v58 = v56->identifier;
          if (v58) {
            uint64_t v57 = (const char *)v58;
          }
        }
        *(_DWORD *)uuid_string_t out = 136446466;
        *(void *)&out[4] = "nw_protocol_masque_connect";
        *(_WORD *)&out[12] = 2082;
        *(void *)&out[14] = v57;
        __int16 v33 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_122:
        _os_log_impl(&dword_1830D4000, v28, v29, v33, (uint8_t *)out, 0x16u);
      }
    }
LABEL_123:
    if (v27) {
      free(v27);
    }
    return 1;
  }
  output_handler = a1->output_handler;
  if (!output_handler) {
    return 1;
  }
  os_log_type_t v14 = output_handler->callbacks;
  if (v14 && v14->connect)
  {
    *(_DWORD *)(handle + 527) |= 1u;
    uint64_t result = ((uint64_t (*)(void))a1->output_handler->callbacks->connect)();
    *(_DWORD *)(handle + 527) &= ~1u;
    return result;
  }
  return 0;
}

uint64_t nw_protocol_masque_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v52 = "nw_protocol_masque_remove_input_handler";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v29, &type, &v49)) {
      goto LABEL_84;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v49)
      {
        __int16 v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_84;
        }
        *(_DWORD *)buf = 136446210;
        char v52 = "nw_protocol_masque_remove_input_handler";
        int v32 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_83;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v35 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v35) {
          goto LABEL_84;
        }
        *(_DWORD *)buf = 136446210;
        char v52 = "nw_protocol_masque_remove_input_handler";
        int v32 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_83;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446466;
        char v52 = "nw_protocol_masque_remove_input_handler";
        __int16 v53 = 2082;
        id v54 = backtrace_string;
        BOOL v36 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_64:
        _os_log_impl(&dword_1830D4000, v30, v31, v36, buf, 0x16u);
      }
LABEL_65:
      free(backtrace_string);
      goto LABEL_84;
    }
    __int16 v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446210;
    char v52 = "nw_protocol_masque_remove_input_handler";
    int v32 = "%{public}s called with null protocol";
LABEL_83:
    _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0xCu);
LABEL_84:
    if (v29) {
      free(v29);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v52 = "nw_protocol_masque_remove_input_handler";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v29, &type, &v49)) {
      goto LABEL_84;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_84;
      }
      *(_DWORD *)buf = 136446210;
      char v52 = "nw_protocol_masque_remove_input_handler";
      int v32 = "%{public}s called with null masque";
      goto LABEL_83;
    }
    if (!v49)
    {
      __int16 v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_84;
      }
      *(_DWORD *)buf = 136446210;
      char v52 = "nw_protocol_masque_remove_input_handler";
      int v32 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_83;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v37 = os_log_type_enabled(v30, type);
    if (backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        char v52 = "nw_protocol_masque_remove_input_handler";
        __int16 v53 = 2082;
        id v54 = backtrace_string;
        BOOL v36 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    if (!v37) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446210;
    char v52 = "nw_protocol_masque_remove_input_handler";
    int v32 = "%{public}s called with null masque, no backtrace";
    goto LABEL_83;
  }
  if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    __int16 v33 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      char v52 = "nw_protocol_masque_remove_input_handler";
      __int16 v53 = 2082;
      id v54 = handle + 531;
      __int16 v55 = 2080;
      int v56 = " ";
      _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (!a2) {
    return 0;
  }
  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  }
  if (a1->default_input_handler != a2)
  {
    output_handler_context = a2->output_handler_context;
    if (output_handler_context)
    {
      a2->output_handler_context = 0;
      nw_protocol_set_output_handler((uint64_t)a2, 0);
      uint64_t v8 = output_handler_context[4];
      if (v8)
      {
        do
        {
          if (!v8) {
            break;
          }
          uint64_t v9 = *(void *)(v8 + 32);
          char v10 = ___ZL40nw_protocol_masque_destroy_listener_flowP9nw_masqueP12nw_hash_node_block_invoke((uint64_t)&__block_literal_global_66, v8);
          uint64_t v8 = v9;
        }
        while ((v10 & 1) != 0);
      }
      char v11 = (void *)output_handler_context[6];
      if (v11)
      {
        os_release(v11);
        output_handler_context[6] = 0;
      }
      goto LABEL_38;
    }
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  nw_protocol_set_input_handler((uint64_t)(handle + 64), 0);
  uint64_t v12 = *((void *)handle + 20);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 24);
    if (v13)
    {
      os_log_type_t v14 = *(void (**)(void))(v13 + 8);
      if (v14) {
        v14();
      }
    }
  }
  uint64_t v15 = *((void *)handle + 28);
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 24);
    if (v16)
    {
      BOOL v17 = *(void (**)(void))(v16 + 8);
      if (v17) {
        v17();
      }
    }
  }
  uint64_t v18 = *((void *)handle + 12);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 24);
    if (v19)
    {
      id v20 = *(void (**)(void))(v19 + 8);
      if (v20) {
        v20();
      }
    }
  }
  uint64_t v21 = *((void *)handle + 4);
  if (v21)
  {
    uint64_t v22 = *(void *)(v21 + 24);
    if (v22)
    {
      uint64_t v23 = *(void (**)(void))(v22 + 8);
      if (v23) {
        v23();
      }
    }
  }
  int v24 = (void *)*((void *)handle + 56);
  if (v24)
  {
    os_release(v24);
    *((void *)handle + 56) = 0;
  }
  uint64_t v25 = *((void *)handle + 55);
  if (!v25) {
    goto LABEL_38;
  }
  if (!*(void *)v25 || (__int16 v26 = *(void (**)(void))(*(void *)v25 + 8)) == 0)
  {
    __nwlog_obj();
    BOOL v38 = (char *)*((void *)handle + 55);
    *(_DWORD *)buf = 136446466;
    char v52 = "nw_protocol_masque_remove_input_handler";
    __int16 v53 = 2048;
    id v54 = v38;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    BOOL v48 = (char *)_os_log_send_and_compose_impl();
    if (!__nwlog_fault(v48, &type, &v49)) {
      goto LABEL_92;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_92;
      }
      char v41 = (char *)*((void *)handle + 55);
      *(_DWORD *)buf = 136446466;
      char v52 = "nw_protocol_masque_remove_input_handler";
      __int16 v53 = 2048;
      id v54 = v41;
      BOOL v42 = "%{public}s listen protocol (%p) has invalid disconnected callback";
    }
    else if (v49)
    {
      BOOL v43 = (char *)__nw_create_backtrace_string();
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v44 = os_log_type_enabled(v39, type);
      if (v43)
      {
        if (v44)
        {
          int v45 = (char *)*((void *)handle + 55);
          *(_DWORD *)buf = 136446722;
          char v52 = "nw_protocol_masque_remove_input_handler";
          __int16 v53 = 2048;
          id v54 = v45;
          __int16 v55 = 2082;
          int v56 = v43;
          _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s listen protocol (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v43);
        goto LABEL_92;
      }
      if (!v44)
      {
LABEL_92:
        if (v48) {
          free(v48);
        }
        goto LABEL_37;
      }
      BOOL v47 = (char *)*((void *)handle + 55);
      *(_DWORD *)buf = 136446466;
      char v52 = "nw_protocol_masque_remove_input_handler";
      __int16 v53 = 2048;
      id v54 = v47;
      BOOL v42 = "%{public}s listen protocol (%p) has invalid disconnected callback, no backtrace";
    }
    else
    {
      BOOL v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_92;
      }
      uint64_t v46 = (char *)*((void *)handle + 55);
      *(_DWORD *)buf = 136446466;
      char v52 = "nw_protocol_masque_remove_input_handler";
      __int16 v53 = 2048;
      id v54 = v46;
      BOOL v42 = "%{public}s listen protocol (%p) has invalid disconnected callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v39, v40, v42, buf, 0x16u);
    goto LABEL_92;
  }
  v26();
LABEL_37:
  *((void *)handle + 55) = 0;
LABEL_38:
  if (a3)
  {
    if (!a1->default_input_handler)
    {
      uint64_t v27 = *((void *)handle + 60);
      if (!v27 || !*(_DWORD *)(v27 + 40)) {
        nw_masque_protocol_destroy((uint64_t)handle);
      }
    }
  }
  return 1;
}

void nw_masque_protocol_destroy(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40) != a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_protocol_destroy";
    uint64_t v2 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v2))
    {
      __break(1u);
LABEL_64:
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      goto LABEL_61;
    }
    free(v2);
  }
  if ((*(unsigned char *)(a1 + 529) & 1) != 0 || !gLogDatapath) {
    goto LABEL_6;
  }
  if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
    goto LABEL_64;
  }
LABEL_61:
  int v32 = gprivacy_proxyLogObj;
  if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_masque_protocol_destroy";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = a1 + 531;
    *(_WORD *)&buf[22] = 2080;
    BOOL v35 = " ";
    _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDestroying protocol", buf, 0x20u);
  }
LABEL_6:
  nw_protocol_remove_instance(a1);
  uint64_t v3 = *(void *)(a1 + 352);
  if (v3)
  {
    nw_queue_cancel_source(v3);
    *(void *)(a1 + 352) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 256);
  do
  {
    if (!v4) {
      break;
    }
    uint64_t v5 = *(void *)(v4 + 16);
    char v6 = ___ZL26nw_masque_protocol_destroyP9nw_masque_block_invoke((uint64_t)&__block_literal_global_60, v4);
    uint64_t v4 = v5;
  }
  while ((v6 & 1) != 0);
  int v7 = *(char **)(a1 + 480);
  if (v7)
  {
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 0x40000000;
    v33[2] = ___ZL26nw_masque_protocol_destroyP9nw_masque_block_invoke_2;
    v33[3] = &__block_descriptor_tmp_62_28239;
    v33[4] = a1;
    nw_hash_table_apply(v7, (uint64_t)v33);
    uint64_t v8 = *(os_unfair_lock_s **)(a1 + 480);
    if (v8)
    {
      _nw_hash_table_release(v8);
      *(void *)(a1 + 480) = 0;
    }
  }
  uint64_t v9 = *(void *)(a1 + 464);
  if (v9)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL32nw_masque_listener_set_callbacksP20nw_protocol_metadataPv_block_invoke;
    BOOL v35 = (const char *)&__block_descriptor_tmp_63;
    uint64_t v36 = 0;
    uint64_t v10 = *(void *)(v9 + 32);
    if (v10) {
      ___ZL32nw_masque_listener_set_callbacksP20nw_protocol_metadataPv_block_invoke((uint64_t)buf, v10);
    }
  }
  char v11 = *(void **)(a1 + 472);
  if (v11)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL23nw_masque_set_callbacksP20nw_protocol_metadataPv_block_invoke;
    BOOL v35 = (const char *)&__block_descriptor_tmp_204;
    uint64_t v36 = 0;
    uint64_t v12 = v11[4];
    if (!v12
      || (___ZL23nw_masque_set_callbacksP20nw_protocol_metadataPv_block_invoke((uint64_t)buf, v12),
          (char v11 = *(void **)(a1 + 472)) != 0))
    {
      os_release(v11);
      *(void *)(a1 + 472) = 0;
    }
  }
  uint64_t v13 = *(void **)(a1 + 488);
  if (v13)
  {
    os_release(v13);
    *(void *)(a1 + 488) = 0;
  }
  os_log_type_t v14 = *(void **)(a1 + 464);
  if (v14)
  {
    os_release(v14);
    *(void *)(a1 + 464) = 0;
  }
  uint64_t v15 = *(void **)(a1 + 304);
  if (v15)
  {
    os_release(v15);
    *(void *)(a1 + 304) = 0;
  }
  uint64_t v16 = *(void **)(a1 + 312);
  if (v16)
  {
    os_release(v16);
    *(void *)(a1 + 312) = 0;
  }
  BOOL v17 = *(void **)(a1 + 320);
  if (v17)
  {
    os_release(v17);
    *(void *)(a1 + 320) = 0;
  }
  uint64_t v18 = *(void **)(a1 + 328);
  if (v18)
  {
    os_release(v18);
    *(void *)(a1 + 328) = 0;
  }
  uint64_t v19 = *(void **)(a1 + 336);
  if (v19)
  {
    os_release(v19);
    *(void *)(a1 + 336) = 0;
  }
  id v20 = *(void **)(a1 + 344);
  if (v20)
  {
    os_release(v20);
    *(void *)(a1 + 344) = 0;
  }
  uint64_t v21 = *(void **)(a1 + 424);
  if (v21)
  {
    os_release(v21);
    *(void *)(a1 + 424) = 0;
  }
  uint64_t v22 = *(void **)(a1 + 416);
  if (v22)
  {
    os_release(v22);
    *(void *)(a1 + 416) = 0;
  }
  uint64_t v23 = *(void **)(a1 + 456);
  if (v23)
  {
    os_release(v23);
    *(void *)(a1 + 456) = 0;
  }
  int v24 = *(void **)(a1 + 360);
  if (v24)
  {
    os_release(v24);
    *(void *)(a1 + 360) = 0;
  }
  uint64_t v25 = *(void **)(a1 + 368);
  if (v25)
  {
    os_release(v25);
    *(void *)(a1 + 368) = 0;
  }
  __int16 v26 = *(void **)(a1 + 376);
  if (v26)
  {
    os_release(v26);
    *(void *)(a1 + 376) = 0;
  }
  uint64_t v27 = *(NSObject **)(a1 + 384);
  if (v27)
  {
    dispatch_release(v27);
    *(void *)(a1 + 384) = 0;
  }
  char v28 = *(NSObject **)(a1 + 392);
  if (v28)
  {
    dispatch_release(v28);
    *(void *)(a1 + 392) = 0;
  }
  os_log_type_t v29 = *(NSObject **)(a1 + 400);
  if (v29)
  {
    dispatch_release(v29);
    *(void *)(a1 + 400) = 0;
  }
  __int16 v30 = *(NSObject **)(a1 + 408);
  if (v30)
  {
    dispatch_release(v30);
    *(void *)(a1 + 408) = 0;
  }
  (*(void (**)(void, void))(*(void *)(a1 + 496) + 16))(*(void *)(a1 + 496), 0);
  os_log_type_t v31 = *(const void **)(a1 + 496);
  if (v31) {
    _Block_release(v31);
  }
  free((void *)a1);
}

uint64_t ___ZL40nw_protocol_masque_destroy_listener_flowP9nw_masqueP12nw_hash_node_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t ___ZL26nw_masque_protocol_destroyP9nw_masque_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t extra = (uint64_t *)nw_hash_node_get_extra(a2);
  uint64_t v3 = *extra;
  if (*extra)
  {
    do
    {
      if (!v3) {
        break;
      }
      uint64_t v4 = *(void *)(v3 + 32);
      char v5 = ___ZL40nw_protocol_masque_destroy_listener_flowP9nw_masqueP12nw_hash_node_block_invoke((uint64_t)&__block_literal_global_66, v3);
      uint64_t v3 = v4;
    }
    while ((v5 & 1) != 0);
  }
  char v6 = (void *)extra[2];
  if (v6)
  {
    os_release(v6);
    extra[2] = 0;
  }
  return 1;
}

uint64_t ___ZL26nw_masque_protocol_destroyP9nw_masque_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_protocol_masque_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
    uint64_t v27 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v27, &type, &v37)) {
      goto LABEL_94;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        char v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
          __int16 v30 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_93;
        }
        goto LABEL_94;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v32 = os_log_type_enabled(v28, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
          __int16 v30 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_93;
        }
        goto LABEL_94;
      }
      if (!v32) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
      __int16 v41 = 2082;
      BOOL v42 = backtrace_string;
      __int16 v33 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    char v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    if (!os_log_type_enabled(v28, type)) {
      goto LABEL_94;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
    __int16 v30 = "%{public}s called with null protocol";
LABEL_93:
    _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
    goto LABEL_94;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
    uint64_t v27 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v27, &type, &v37)) {
      goto LABEL_94;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        char v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
          __int16 v30 = "%{public}s called with null masque, backtrace limit exceeded";
          goto LABEL_93;
        }
        goto LABEL_94;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v34 = os_log_type_enabled(v28, type);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
          __int16 v30 = "%{public}s called with null masque, no backtrace";
          goto LABEL_93;
        }
        goto LABEL_94;
      }
      if (!v34) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
      __int16 v41 = 2082;
      BOOL v42 = backtrace_string;
      __int16 v33 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    char v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    if (!os_log_type_enabled(v28, type)) {
      goto LABEL_94;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
    __int16 v30 = "%{public}s called with null masque";
    goto LABEL_93;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
    uint64_t v27 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v27, &type, &v37)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
      __int16 v30 = "%{public}s called with null old_input_handler";
      goto LABEL_93;
    }
    if (!v37)
    {
      char v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
        __int16 v30 = "%{public}s called with null old_input_handler, backtrace limit exceeded";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v35 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
        __int16 v30 = "%{public}s called with null old_input_handler, no backtrace";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    if (!v35) {
      goto LABEL_76;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
    __int16 v41 = 2082;
    BOOL v42 = backtrace_string;
    __int16 v33 = "%{public}s called with null old_input_handler, dumping backtrace:%{public}s";
LABEL_75:
    _os_log_impl(&dword_1830D4000, v28, v29, v33, buf, 0x16u);
    goto LABEL_76;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
    uint64_t v27 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (!__nwlog_fault(v27, &type, &v37)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
        __int16 v30 = "%{public}s called with null new_input_handler";
        goto LABEL_93;
      }
LABEL_94:
      if (!v27) {
        return 0;
      }
      __int16 v26 = (char *)v27;
      goto LABEL_40;
    }
    if (!v37)
    {
      char v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
        __int16 v30 = "%{public}s called with null new_input_handler, backtrace limit exceeded";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v36 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
        __int16 v30 = "%{public}s called with null new_input_handler, no backtrace";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
      __int16 v41 = 2082;
      BOOL v42 = backtrace_string;
      __int16 v33 = "%{public}s called with null new_input_handler, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
LABEL_76:
    free(backtrace_string);
    goto LABEL_94;
  }
  if (a1->default_input_handler != a2)
  {
    if (handle[529]) {
      return 0;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
    }
    int v7 = handle + 531;
    default_input_handler = a1->default_input_handler;
    *(_DWORD *)buf = 136447234;
    os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
    __int16 v41 = 2082;
    BOOL v42 = handle + 531;
    __int16 v43 = 2080;
    BOOL v44 = " ";
    __int16 v45 = 2048;
    uint64_t v46 = default_input_handler;
    __int16 v47 = 2048;
    BOOL v48 = a2;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (__nwlog_fault(v9, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v10 = gprivacy_proxyLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type))
        {
          uint64_t v12 = a1->default_input_handler;
          *(_DWORD *)buf = 136447234;
          os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
          __int16 v41 = 2082;
          BOOL v42 = handle + 531;
          __int16 v43 = 2080;
          BOOL v44 = " ";
          __int16 v45 = 2048;
          uint64_t v46 = v12;
          __int16 v47 = 2048;
          BOOL v48 = a2;
          uint64_t v13 = "%{public}s %{public}s%sOld input handler does not match (%p != %p)";
LABEL_37:
          _os_log_impl(&dword_1830D4000, v10, v11, v13, buf, 0x34u);
        }
      }
      else if (v37)
      {
        uint64_t v21 = (char *)__nw_create_backtrace_string();
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v10 = gprivacy_proxyLogObj;
        os_log_type_t v11 = type;
        BOOL v22 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type);
        if (!v21)
        {
          if (!v22) {
            goto LABEL_38;
          }
          uint64_t v25 = a1->default_input_handler;
          *(_DWORD *)buf = 136447234;
          os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
          __int16 v41 = 2082;
          BOOL v42 = v7;
          __int16 v43 = 2080;
          BOOL v44 = " ";
          __int16 v45 = 2048;
          uint64_t v46 = v25;
          __int16 v47 = 2048;
          BOOL v48 = a2;
          uint64_t v13 = "%{public}s %{public}s%sOld input handler does not match (%p != %p), no backtrace";
          goto LABEL_37;
        }
        if (v22)
        {
          uint64_t v23 = a1->default_input_handler;
          *(_DWORD *)buf = 136447490;
          os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
          __int16 v41 = 2082;
          BOOL v42 = v7;
          __int16 v43 = 2080;
          BOOL v44 = " ";
          __int16 v45 = 2048;
          uint64_t v46 = v23;
          __int16 v47 = 2048;
          BOOL v48 = a2;
          __int16 v49 = 2082;
          uint64_t v50 = v21;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s %{public}s%sOld input handler does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x3Eu);
        }
        free(v21);
      }
      else
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
        }
        uint64_t v10 = gprivacy_proxyLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type))
        {
          int v24 = a1->default_input_handler;
          *(_DWORD *)buf = 136447234;
          os_log_type_t v40 = "nw_protocol_masque_replace_input_handler";
          __int16 v41 = 2082;
          BOOL v42 = handle + 531;
          __int16 v43 = 2080;
          BOOL v44 = " ";
          __int16 v45 = 2048;
          uint64_t v46 = v24;
          __int16 v47 = 2048;
          BOOL v48 = a2;
          uint64_t v13 = "%{public}s %{public}s%sOld input handler does not match (%p != %p), backtrace limit exceeded";
          goto LABEL_37;
        }
      }
    }
LABEL_38:
    if (v9)
    {
      __int16 v26 = (char *)v9;
LABEL_40:
      free(v26);
    }
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a3);
  *(_OWORD *)a1->flow_id = *(_OWORD *)a3->flow_id;
  if (!a3->output_handler) {
    nw_protocol_set_output_handler((uint64_t)a3, (uint64_t)a1);
  }
  callbacks = a3->callbacks;
  if (callbacks
    && (supports_external_data = (uint64_t (*)(nw_protocol *))callbacks->supports_external_data) != 0)
  {
    int v16 = supports_external_data(a3);
    BOOL v17 = (unsigned int *)(handle + 527);
    if (v16) {
      int v18 = 64;
    }
    else {
      int v18 = 0;
    }
    unsigned int v19 = *(_DWORD *)(handle + 527) & 0xFFFFFFBF | v18;
  }
  else
  {
    BOOL v17 = (unsigned int *)(handle + 527);
    unsigned int v19 = *(_DWORD *)(handle + 527) & 0xFFFFFFBF;
  }
  unsigned int *v17 = v19;
  return 1;
}

uint64_t nw_protocol_masque_listener_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v28 = "nw_protocol_masque_listener_add_input_handler";
    int v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v16, &type, &v25)) {
      goto LABEL_62;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        BOOL v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_62;
        }
        *(_DWORD *)buf = 136446210;
        char v28 = "nw_protocol_masque_listener_add_input_handler";
        unsigned int v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_61;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21) {
          goto LABEL_62;
        }
        *(_DWORD *)buf = 136446210;
        char v28 = "nw_protocol_masque_listener_add_input_handler";
        unsigned int v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_61;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        char v28 = "nw_protocol_masque_listener_add_input_handler";
        __int16 v29 = 2082;
        __int16 v30 = backtrace_string;
        BOOL v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_47:
        _os_log_impl(&dword_1830D4000, v17, v18, v22, buf, 0x16u);
      }
LABEL_48:
      free(backtrace_string);
      goto LABEL_62;
    }
    BOOL v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446210;
    char v28 = "nw_protocol_masque_listener_add_input_handler";
    unsigned int v19 = "%{public}s called with null protocol";
LABEL_61:
    _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
LABEL_62:
    if (v16) {
      free(v16);
    }
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v28 = "nw_protocol_masque_listener_add_input_handler";
    int v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v16, &type, &v25)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      char v28 = "nw_protocol_masque_listener_add_input_handler";
      unsigned int v19 = "%{public}s called with null masque";
      goto LABEL_61;
    }
    if (!v25)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      char v28 = "nw_protocol_masque_listener_add_input_handler";
      unsigned int v19 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_61;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        char v28 = "nw_protocol_masque_listener_add_input_handler";
        __int16 v29 = 2082;
        __int16 v30 = backtrace_string;
        BOOL v22 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    if (!v23) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446210;
    char v28 = "nw_protocol_masque_listener_add_input_handler";
    unsigned int v19 = "%{public}s called with null masque, no backtrace";
    goto LABEL_61;
  }
  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    if (default_input_handler == a2)
    {
      if (handle[529]) {
        return 0;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v13 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)buf = 136446466;
      char v28 = handle + 531;
      __int16 v29 = 2080;
      __int16 v30 = " ";
      os_log_type_t v14 = "%{public}s%sDefault input handler is being re-added";
    }
    else
    {
      uint64_t remote_endpoint = nw_protocol_get_remote_endpoint((uint64_t)a2);
      if (remote_endpoint)
      {
        int v7 = (void *)remote_endpoint;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        BOOL v8 = nw_hash_table_add_object(*((void *)handle + 60), (uint64_t)a2, (char *)&type);
        BOOL v9 = type != OS_LOG_TYPE_DEFAULT;
        if (type)
        {
          uint64_t v10 = (void *)v8;
          uint64_t extra = (void *)nw_hash_node_get_extra(v8);
          *uint64_t extra = 0;
          extra[1] = extra;
          extra[2] = os_retain(v7);
          if ((handle[529] & 1) == 0 && gLogDatapath)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
            }
            int v24 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              char v28 = "nw_protocol_masque_listener_add_input_handler";
              __int16 v29 = 2082;
              __int16 v30 = handle + 531;
              __int16 v31 = 2080;
              *(void *)BOOL v32 = " ";
              *(_WORD *)&v32[8] = 2112;
              *(void *)&v32[10] = v7;
              _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAdded new flow for endpoint %@", buf, 0x2Au);
            }
          }
          a2->output_handler_context = v10;
          nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
        }
        else if ((handle[529] & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
          }
          uint64_t v15 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            char v28 = handle + 531;
            __int16 v29 = 2080;
            __int16 v30 = " ";
            __int16 v31 = 1042;
            *(_DWORD *)BOOL v32 = 16;
            *(_WORD *)&v32[4] = 2098;
            *(void *)&v32[6] = a2;
            _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s%sInput handler already registered for %{public,uuid_t}.16P", buf, 0x26u);
          }
        }
        return v9;
      }
      if (handle[529]) {
        return 0;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v13 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)buf = 136446466;
      char v28 = handle + 531;
      __int16 v29 = 2080;
      __int16 v30 = " ";
      os_log_type_t v14 = "%{public}s%sInput handler did not provide remote endpoint";
    }
    _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x16u);
    return 0;
  }

  return nw_protocol_masque_add_input_handler(a1, a2);
}

BOOL nw_masque_listener_compare_metadata(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (a3) {
      return *a2 == *a3;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v15 = "nw_masque_listener_compare_metadata";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_masque_listener_compare_metadata";
        int v7 = "%{public}s called with null handle2";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v12)
    {
      char v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_masque_listener_compare_metadata";
        int v7 = "%{public}s called with null handle2, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_masque_listener_compare_metadata";
        int v7 = "%{public}s called with null handle2, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v15 = "nw_masque_listener_compare_metadata";
      __int16 v16 = 2082;
      BOOL v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null handle2, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v15 = "nw_masque_listener_compare_metadata";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      char v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_masque_listener_compare_metadata";
        int v7 = "%{public}s called with null handle1, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_masque_listener_compare_metadata";
        int v7 = "%{public}s called with null handle1, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v15 = "nw_masque_listener_compare_metadata";
      __int16 v16 = 2082;
      BOOL v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null handle1, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v5, v6, v10, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  char v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v15 = "nw_masque_listener_compare_metadata";
    int v7 = "%{public}s called with null handle1";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
  }
LABEL_32:
  if (v4) {
    free(v4);
  }
  return 0;
}

void nw_masque_listener_deallocate_metadata(nw_protocol_definition *a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL nw_masque_listener_allocate_metadata(nw_protocol_definition *a1)
{
  uint64_t v1 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v1) {
    return (BOOL)v1;
  }
  uint64_t v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  uint64_t v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

BOOL nw_masque_serialize_options(nw_protocol_definition *a1, void *a2, unint64_t *a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v62 = "nw_masque_serialize_options";
    __int16 v49 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (__nwlog_fault(v49, &type, &v59))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v50 = __nwlog_obj();
        os_log_type_t v51 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v62 = "nw_masque_serialize_options";
          char v52 = "%{public}s called with null existing_handle";
LABEL_77:
          _os_log_impl(&dword_1830D4000, v50, v51, v52, buf, 0xCu);
        }
      }
      else if (v59)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v50 = __nwlog_obj();
        os_log_type_t v51 = type;
        BOOL v56 = os_log_type_enabled(v50, type);
        if (backtrace_string)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v62 = "nw_masque_serialize_options";
            __int16 v63 = 2082;
            uint64_t v64 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_78;
        }
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v62 = "nw_masque_serialize_options";
          char v52 = "%{public}s called with null existing_handle, no backtrace";
          goto LABEL_77;
        }
      }
      else
      {
        uint64_t v50 = __nwlog_obj();
        os_log_type_t v51 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v62 = "nw_masque_serialize_options";
          char v52 = "%{public}s called with null existing_handle, backtrace limit exceeded";
          goto LABEL_77;
        }
      }
    }
LABEL_78:
    if (v49) {
      free(v49);
    }
    return 0;
  }
  char v5 = (void *)*((void *)a2 + 1);
  if (v5)
  {
    size_t count = xpc_array_get_count(v5);
    int v7 = (void *)*((void *)a2 + 2);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  size_t count = 0;
  int v7 = (void *)*((void *)a2 + 2);
  if (v7) {
LABEL_4:
  }
    int v7 = (void *)xpc_array_get_count(v7);
LABEL_5:
  if (count) {
    BOOL v8 = count == (void)v7;
  }
  else {
    BOOL v8 = 0;
  }
  int v9 = v8;
  if (v8)
  {
    size_t v10 = 0;
    size_t v11 = 0;
    do
    {
      string = xpc_array_get_string(*((xpc_object_t *)a2 + 1), v10);
      uint64_t v13 = xpc_array_get_string(*((xpc_object_t *)a2 + 2), v10);
      size_t v14 = strlen(string);
      size_t v15 = v11 + v14 + strlen(v13);
      size_t v11 = v15 + 2;
      ++v10;
    }
    while (count != v10);
    size_t v19 = v15 + 78;
    if (v15 == -78)
    {
      __int16 v16 = __nwlog_obj();
      os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      uint64_t v62 = "strict_calloc";
      BOOL v17 = (void *)_os_log_send_and_compose_impl();
      BOOL result = __nwlog_abort((uint64_t)v17);
      if (result) {
        goto LABEL_81;
      }
      free(v17);
      size_t v19 = 0;
    }
  }
  else
  {
    size_t v19 = 76;
  }
  id v20 = (char *)malloc_type_calloc(1uLL, v19, 0xEAFB8F1AuLL);
  if (v20) {
    goto LABEL_19;
  }
  __int16 v53 = __nwlog_obj();
  os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  uint64_t v62 = "strict_calloc";
  __int16 v63 = 2048;
  uint64_t v64 = 1;
  __int16 v65 = 2048;
  size_t v66 = v19;
  id v54 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v54);
  if (!result)
  {
    free(v54);
LABEL_19:
    *(void *)id v20 = *((void *)a2 + 3);
    *((_WORD *)v20 + 37) = *((_WORD *)a2 + 16);
    if (*(void *)a2)
    {
      id v21 = *(id *)a2;
      unsigned int v22 = [v21 port];

      *((_WORD *)v20 + 4) = __rev16(v22);
      hostname = nw_endpoint_get_hostname(*(nw_endpoint_t *)a2);
      if (hostname)
      {
        int v24 = hostname;
        if (strlen(hostname) - 1 <= 0x3E)
        {
          char v25 = v20 + 10;
          uint64_t v26 = 64;
          while (1)
          {
            int v27 = *(unsigned __int8 *)v24;
            *char v25 = v27;
            if (!v27) {
              break;
            }
            ++v25;
            ++v24;
            if ((unint64_t)--v26 <= 1)
            {
              *char v25 = 0;
              break;
            }
          }
        }
      }
    }
    if (v9)
    {
      size_t v28 = 0;
      __int16 v29 = v20 + 76;
      do
      {
        __int16 v30 = xpc_array_get_string(*((xpc_object_t *)a2 + 1), v28);
        size_t v31 = strlen(v30);
        if (v29)
        {
          if (v30) {
            goto LABEL_31;
          }
        }
        else
        {
          __int16 v43 = __nwlog_obj();
          os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          uint64_t v62 = "_strict_strlcpy";
          BOOL v44 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v44);
          if (result) {
            goto LABEL_81;
          }
          free(v44);
          if (v30) {
            goto LABEL_31;
          }
        }
        __int16 v45 = __nwlog_obj();
        os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        uint64_t v62 = "_strict_strlcpy";
        uint64_t v46 = (void *)_os_log_send_and_compose_impl();
        BOOL result = __nwlog_abort((uint64_t)v46);
        if (result) {
          goto LABEL_81;
        }
        free(v46);
LABEL_31:
        size_t v32 = v31 + 1;
        uint64_t v33 = v29;
        uint64_t v34 = v31 + 1;
        if (v31 + 1 < 2)
        {
LABEL_36:
          if (v31 != -1 && v34) {
            *uint64_t v33 = 0;
          }
        }
        else
        {
          size_t v35 = v31 + 1;
          uint64_t v33 = v29;
          while (1)
          {
            int v36 = *(unsigned __int8 *)v30;
            *uint64_t v33 = v36;
            if (!v36) {
              break;
            }
            ++v33;
            ++v30;
            if (--v35 <= 1)
            {
              uint64_t v34 = 1;
              goto LABEL_36;
            }
          }
        }
        char v37 = xpc_array_get_string(*((xpc_object_t *)a2 + 2), v28);
        size_t v38 = strlen(v37);
        if (v29)
        {
          if (!v37) {
            goto LABEL_56;
          }
        }
        else
        {
          __int16 v47 = __nwlog_obj();
          os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          uint64_t v62 = "_strict_strlcpy";
          uint64_t v57 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v57);
          if (result) {
            goto LABEL_81;
          }
          free(v57);
          if (!v37)
          {
LABEL_56:
            BOOL v48 = __nwlog_obj();
            os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446210;
            uint64_t v62 = "_strict_strlcpy";
            long long v58 = (void *)_os_log_send_and_compose_impl();
            BOOL result = __nwlog_abort((uint64_t)v58);
            if (result) {
              goto LABEL_81;
            }
            free(v58);
          }
        }
        if (v38 + 1 < 2)
        {
          os_log_type_t v40 = &v29[v32];
          uint64_t v42 = v38 + 1;
          if (v38 != -1)
          {
LABEL_48:
            if (v42) {
              *os_log_type_t v40 = 0;
            }
          }
        }
        else
        {
          size_t v39 = v38 + 1;
          os_log_type_t v40 = &v29[v32];
          while (1)
          {
            int v41 = *(unsigned __int8 *)v37;
            *os_log_type_t v40 = v41;
            if (!v41) {
              break;
            }
            ++v40;
            ++v37;
            if (--v39 <= 1)
            {
              uint64_t v42 = 1;
              if (v38 != -1) {
                goto LABEL_48;
              }
              break;
            }
          }
        }
        v29 += v32 + v38 + 1;
        ++v28;
      }
      while (v28 != count);
    }
    *a3 = v19;
    return (BOOL)v20;
  }
LABEL_81:
  __break(1u);
  return result;
}

void sub_183856088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_masque_option_is_equal(nw_protocol_definition *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*((_DWORD *)a2 + 6) != *((_DWORD *)a3 + 6)
    || *((_DWORD *)a2 + 7) != *((_DWORD *)a3 + 7)
    || a2[32] != a3[32]
    || a2[33] != a3[33]
    || !nw_endpoint_is_equal(*(void **)a2, *(void **)a3, 0)
    || !nw_unordered_xpc_array_is_equal(*((xpc_object_t *)a2 + 1), *((xpc_object_t *)a3 + 1)))
  {
    return 0;
  }
  char v5 = (void *)*((void *)a2 + 2);
  os_log_type_t v6 = (void *)*((void *)a3 + 2);

  return nw_unordered_xpc_array_is_equal(v5, v6);
}

void nw_masque_deallocate_options(nw_protocol_definition *a1, void **a2)
{
  if (*a2)
  {
    os_release(*a2);
    *a2 = 0;
  }
  uint64_t v3 = a2[1];
  if (v3)
  {
    xpc_release(v3);
    a2[1] = 0;
  }
  uint64_t v4 = a2[2];
  if (v4) {
    xpc_release(v4);
  }

  free(a2);
}

BOOL nw_masque_copy_options(nw_protocol_definition *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v19 = "nw_masque_copy_options";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          size_t v19 = "nw_masque_copy_options";
          size_t v11 = "%{public}s called with null existing_handle";
LABEL_27:
          _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v15 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            size_t v19 = "nw_masque_copy_options";
            __int16 v20 = 2082;
            uint64_t v21 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_28;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          size_t v19 = "nw_masque_copy_options";
          size_t v11 = "%{public}s called with null existing_handle, no backtrace";
          goto LABEL_27;
        }
      }
      else
      {
        int v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          size_t v19 = "nw_masque_copy_options";
          size_t v11 = "%{public}s called with null existing_handle, backtrace limit exceeded";
          goto LABEL_27;
        }
      }
    }
LABEL_28:
    if (v8) {
      free(v8);
    }
    return 0;
  }
  uint64_t v3 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v3)
  {
    uint64_t v4 = (void *)*a2;
    if (!*a2)
    {
LABEL_5:
      void *v3 = v4;
      char v5 = (void *)a2[1];
      if (v5) {
        v3[1] = xpc_copy(v5);
      }
      os_log_type_t v6 = (void *)a2[2];
      if (v6) {
        v3[2] = xpc_copy(v6);
      }
      v3[3] = a2[3];
      *((_WORD *)v3 + 16) = *((_WORD *)a2 + 16);
      return (BOOL)v3;
    }
LABEL_4:
    uint64_t v4 = os_retain(v4);
    goto LABEL_5;
  }
  char v12 = __nwlog_obj();
  os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  size_t v19 = "strict_calloc";
  __int16 v20 = 2048;
  uint64_t v21 = 1;
  __int16 v22 = 2048;
  uint64_t v23 = 40;
  uint64_t v13 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v13);
  if (!result)
  {
    free(v13);
    uint64_t v4 = (void *)*a2;
    if (!*a2) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

BOOL nw_masque_allocate_options(nw_protocol_definition *a1)
{
  uint64_t v1 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v1) {
    return (BOOL)v1;
  }
  uint64_t v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  uint64_t v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

void nw_masque_deallocate_globals(nw_protocol_definition *a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL nw_masque_allocate_globals(nw_protocol_definition *a1)
{
  uint64_t v1 = malloc_type_calloc(1uLL, 0xCuLL, 0xEAFB8F1AuLL);
  if (v1) {
    return (BOOL)v1;
  }
  uint64_t v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  uint64_t v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

double ___ZL38nw_protocol_masque_listener_identifierv_block_invoke()
{
  qword_1E8F6B220 = 0;
  unk_1E8F6B228 = 0;
  strcpy((char *)&nw_protocol_masque_listener_identifier(void)::g_masque_protocol_identifier, "masque_listener");
  *(void *)&double result = 0x200000005;
  qword_1E8F6B230 = 0x200000005;
  return result;
}

BOOL nw_masque_add_additional_demux_pattern(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  BOOL is_masque = nw_protocol_metadata_is_masque(a1);
  if (is_masque)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    v12[2] = __nw_masque_add_additional_demux_pattern_block_invoke;
    v12[3] = &__block_descriptor_tmp_12_28318;
    v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)a1, (uint64_t)v12);
    return is_masque;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_masque_add_additional_demux_pattern";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_masque_add_additional_demux_pattern";
      int v9 = "%{public}s called with null nw_protocol_metadata_is_masque(metadata)";
      goto LABEL_17;
    }
    if (!v13)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_masque_add_additional_demux_pattern";
      int v9 = "%{public}s called with null nw_protocol_metadata_is_masque(metadata), backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        char v16 = "nw_masque_add_additional_demux_pattern";
        __int16 v17 = 2082;
        uint64_t v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_masque(metadata), dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_masque_add_additional_demux_pattern";
      int v9 = "%{public}s called with null nw_protocol_metadata_is_masque(metadata), no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_18:
  if (v6) {
    free(v6);
  }
  return is_masque;
}

BOOL nw_protocol_metadata_is_masque(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_masque_get_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27403);
    }
    if (nw_protocol_masque_get_definition(void)::definition) {
      uint64_t v3 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
    }
    else {
      uint64_t v3 = 0;
    }
    return nw_protocol_definition_is_equal_unsafe((uint64_t)v2, (uint64_t)v3);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  size_t v14 = "nw_protocol_metadata_is_masque";
  char v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v14 = "nw_protocol_metadata_is_masque";
        os_log_type_t v8 = "%{public}s called with null metadata";
LABEL_23:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          size_t v14 = "nw_protocol_metadata_is_masque";
          __int16 v15 = 2082;
          char v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_24;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        size_t v14 = "nw_protocol_metadata_is_masque";
        os_log_type_t v8 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_23;
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v14 = "nw_protocol_metadata_is_masque";
        os_log_type_t v8 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_23;
      }
    }
  }
LABEL_24:
  if (v5) {
    free(v5);
  }
  return 0;
}

uint64_t __nw_masque_add_additional_demux_pattern_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 8));
  uint64_t v5 = *(void *)a2;
  nw_masque_send_demux_options(v5, *(void **)(a1 + 32), 0);
  os_log_type_t v6 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(v5 + 320));
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __nw_masque_add_additional_demux_pattern_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_11_28319;
  uint64_t v7 = *(void *)(a1 + 32);
  v9[4] = v5;
  void v9[5] = v7;
  nw_protocol_stack_iterate_application_protocols(v6, v9);
  os_unfair_lock_unlock(v4);
  return 1;
}

void __nw_masque_add_additional_demux_pattern_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(a2);
  uint64_t v5 = *(void *)(a1 + 32);
  if (protocol_handle == *(void *)(v5 + 432))
  {
    if ((*(unsigned char *)(v5 + 529) & 1) == 0)
    {
      uint64_t v6 = protocol_handle;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_56_44901);
      }
      uint64_t v7 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        BOOL v9 = v8 == 0;
        if (v8) {
          BOOL v10 = (const char *)(v8 + 531);
        }
        else {
          BOOL v10 = "";
        }
        *(_DWORD *)buf = 136446722;
        __int16 v15 = v10;
        char v11 = " ";
        if (v9) {
          char v11 = "";
        }
        __int16 v16 = 2080;
        uint64_t v17 = v11;
        __int16 v18 = 2048;
        uint64_t v19 = v6;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s%sFound lower demux protocol %p, registering options", buf, 0x20u);
      }
    }
    char v12 = *(void **)(a1 + 40);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 0x40000000;
    v13[2] = __nw_masque_add_additional_demux_pattern_block_invoke_7;
    v13[3] = &__block_descriptor_tmp_9_28321;
    v13[4] = a2;
    nw_demux_options_enumerate_patterns(v12, (uint64_t)v13);
  }
}

uint64_t __nw_masque_add_additional_demux_pattern_block_invoke_7(uint64_t a1, unsigned int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  return 1;
}

void *nw_protocol_masque_copy_definition()
{
  if (nw_protocol_masque_get_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27403);
  }
  if (!nw_protocol_masque_get_definition(void)::definition) {
    return 0;
  }
  v0 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
  if (!v0) {
    return 0;
  }

  return os_retain(v0);
}

void *nw_protocol_masque_listener_copy_definition()
{
  if (nw_protocol_masque_listener_get_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_207);
  }
  if (!nw_protocol_masque_listener_get_definition(void)::definition) {
    return 0;
  }
  v0 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
  if (!v0) {
    return 0;
  }

  return os_retain(v0);
}

BOOL nw_protocol_options_is_masque(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (nw_protocol_masque_get_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27403);
    }
    if (nw_protocol_masque_get_definition(void)::definition) {
      id v2 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
    }
    else {
      id v2 = 0;
    }
    if (nw_protocol_options_matches_definition(a1, v2)) {
      return 1;
    }
    if (nw_protocol_masque_listener_get_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_207);
    }
    if (nw_protocol_masque_listener_get_definition(void)::definition) {
      uint64_t v4 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
    }
    else {
      uint64_t v4 = 0;
    }
    return nw_protocol_options_matches_definition(a1, v4);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  size_t v14 = "nw_protocol_options_is_masque";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v14 = "nw_protocol_options_is_masque";
        uint64_t v8 = "%{public}s called with null options";
LABEL_30:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          size_t v14 = "nw_protocol_options_is_masque";
          __int16 v15 = 2082;
          __int16 v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_31;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        size_t v14 = "nw_protocol_options_is_masque";
        uint64_t v8 = "%{public}s called with null options, no backtrace";
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v14 = "nw_protocol_options_is_masque";
        uint64_t v8 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_30;
      }
    }
  }
LABEL_31:
  if (v5) {
    free(v5);
  }
  return 0;
}

BOOL nw_protocol_options_is_masque_listener(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (nw_protocol_masque_listener_get_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_207);
    }
    if (nw_protocol_masque_listener_get_definition(void)::definition) {
      id v2 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
    }
    else {
      id v2 = 0;
    }
    return nw_protocol_options_matches_definition(a1, v2);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v13 = "nw_protocol_options_is_masque_listener";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_options_is_masque_listener";
        os_log_type_t v7 = "%{public}s called with null options";
LABEL_23:
        _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_options_is_masque_listener";
          __int16 v14 = 2082;
          __int16 v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_24;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_options_is_masque_listener";
        os_log_type_t v7 = "%{public}s called with null options, no backtrace";
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_options_is_masque_listener";
        os_log_type_t v7 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_23;
      }
    }
  }
LABEL_24:
  if (v4) {
    free(v4);
  }
  return 0;
}

void nw_masque_options_set_target_endpoint(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    v8[2] = __nw_masque_options_set_target_endpoint_block_invoke;
    v8[3] = &__block_descriptor_tmp_13_28346;
    v8[4] = a2;
    nw_protocol_options_access_handle(a1, v8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v12 = "nw_masque_options_set_target_endpoint";
  id v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v10 = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v2, &v10, &v9))
  {
    if (v10 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v10;
      if (!os_log_type_enabled(v3, v10)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v12 = "nw_masque_options_set_target_endpoint";
      uint64_t v5 = "%{public}s called with null options";
      goto LABEL_17;
    }
    if (!v9)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v10;
      if (!os_log_type_enabled(v3, v10)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v12 = "nw_masque_options_set_target_endpoint";
      uint64_t v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = v10;
    BOOL v7 = os_log_type_enabled(v3, v10);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        char v12 = "nw_masque_options_set_target_endpoint";
        __int16 v13 = 2082;
        __int16 v14 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      char v12 = "nw_masque_options_set_target_endpoint";
      uint64_t v5 = "%{public}s called with null options, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
}

uint64_t __nw_masque_options_set_target_endpoint_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    uint64_t v3 = os_retain(v3);
  }
  *a2 = v3;
  return 1;
}

uint64_t nw_masque_options_copy_target_endpoint(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    uint64_t v13 = 0;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    v9[2] = __nw_masque_options_copy_target_endpoint_block_invoke;
    v9[3] = &unk_1E523E368;
    v9[4] = buf;
    nw_protocol_options_access_handle(a1, v9);
    uint64_t v1 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    return v1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_options_copy_target_endpoint";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_options_copy_target_endpoint";
        os_log_type_t v6 = "%{public}s called with null options";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_options_copy_target_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_options_copy_target_endpoint";
        os_log_type_t v6 = "%{public}s called with null options, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      os_log_type_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_options_copy_target_endpoint";
        os_log_type_t v6 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v3) {
    free(v3);
  }
  return 0;
}

void nw_masque_options_set_forced_protocol(void *a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    v8[2] = __nw_masque_options_set_forced_protocol_block_invoke;
    v8[3] = &__block_descriptor_tmp_15_28357;
    int v9 = a2;
    nw_protocol_options_access_handle(a1, v8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v13 = "nw_masque_options_set_forced_protocol";
  id v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v11 = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v2, &v11, &v10))
  {
    if (v11 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v11;
      if (!os_log_type_enabled(v3, v11)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_masque_options_set_forced_protocol";
      os_log_type_t v5 = "%{public}s called with null options";
      goto LABEL_17;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v11;
      if (!os_log_type_enabled(v3, v11)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_masque_options_set_forced_protocol";
      os_log_type_t v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = v11;
    BOOL v7 = os_log_type_enabled(v3, v11);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v13 = "nw_masque_options_set_forced_protocol";
        __int16 v14 = 2082;
        uint64_t v15 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_masque_options_set_forced_protocol";
      os_log_type_t v5 = "%{public}s called with null options, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
}

uint64_t __nw_masque_options_set_forced_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 32);
  return 1;
}

void nw_masque_options_set_allow_connect_ip(void *a1, char a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    v8[2] = __nw_masque_options_set_allow_connect_ip_block_invoke;
    v8[3] = &__block_descriptor_tmp_16_28363;
    char v9 = a2;
    nw_protocol_options_access_handle(a1, v8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v13 = "nw_masque_options_set_allow_connect_ip";
  id v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v11 = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v2, &v11, &v10))
  {
    if (v11 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v11;
      if (!os_log_type_enabled(v3, v11)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_masque_options_set_allow_connect_ip";
      os_log_type_t v5 = "%{public}s called with null options";
      goto LABEL_17;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v11;
      if (!os_log_type_enabled(v3, v11)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_masque_options_set_allow_connect_ip";
      os_log_type_t v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = v11;
    BOOL v7 = os_log_type_enabled(v3, v11);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v13 = "nw_masque_options_set_allow_connect_ip";
        __int16 v14 = 2082;
        uint64_t v15 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_masque_options_set_allow_connect_ip";
      os_log_type_t v5 = "%{public}s called with null options, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
}

uint64_t __nw_masque_options_set_allow_connect_ip_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a1 + 32);
  return 1;
}

void nw_masque_options_set_fast_open(void *a1, char a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    v8[2] = __nw_masque_options_set_fast_open_block_invoke;
    v8[3] = &__block_descriptor_tmp_17_28369;
    char v9 = a2;
    nw_protocol_options_access_handle(a1, v8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v13 = "nw_masque_options_set_fast_open";
  id v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v11 = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v2, &v11, &v10))
  {
    if (v11 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v11;
      if (!os_log_type_enabled(v3, v11)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_masque_options_set_fast_open";
      os_log_type_t v5 = "%{public}s called with null options";
      goto LABEL_17;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v11;
      if (!os_log_type_enabled(v3, v11)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_masque_options_set_fast_open";
      os_log_type_t v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = v11;
    BOOL v7 = os_log_type_enabled(v3, v11);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v13 = "nw_masque_options_set_fast_open";
        __int16 v14 = 2082;
        uint64_t v15 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v13 = "nw_masque_options_set_fast_open";
      os_log_type_t v5 = "%{public}s called with null options, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
}

uint64_t __nw_masque_options_set_fast_open_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 33) = *(unsigned char *)(a1 + 32);
  return 1;
}

void nw_masque_options_add_extra_header(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_masque_options_add_extra_header";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v3, &v15, &v14)) {
      goto LABEL_47;
    }
    if (v15 != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        os_log_type_t v4 = __nwlog_obj();
        os_log_type_t v5 = v15;
        if (!os_log_type_enabled(v4, v15)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_masque_options_add_extra_header";
        os_log_type_t v6 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v4 = __nwlog_obj();
      os_log_type_t v5 = v15;
      BOOL v8 = os_log_type_enabled(v4, v15);
      if (!backtrace_string)
      {
        if (!v8) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_masque_options_add_extra_header";
        os_log_type_t v6 = "%{public}s called with null options, no backtrace";
        goto LABEL_46;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v17 = "nw_masque_options_add_extra_header";
        __int16 v18 = 2082;
        uint64_t v19 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_47;
    }
    os_log_type_t v4 = __nwlog_obj();
    os_log_type_t v5 = v15;
    if (!os_log_type_enabled(v4, v15)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_masque_options_add_extra_header";
    os_log_type_t v6 = "%{public}s called with null options";
LABEL_46:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_47;
  }
  if (a2)
  {
    if (a3)
    {
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 0x40000000;
      v13[2] = __nw_masque_options_add_extra_header_block_invoke;
      v13[3] = &__block_descriptor_tmp_18_28385;
      v13[4] = a2;
      void v13[5] = a3;
      nw_protocol_options_access_handle(a1, v13);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_masque_options_add_extra_header";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v3, &v15, &v14))
    {
      if (v15 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v4 = __nwlog_obj();
        os_log_type_t v5 = v15;
        if (!os_log_type_enabled(v4, v15)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_masque_options_add_extra_header";
        os_log_type_t v6 = "%{public}s called with null value";
        goto LABEL_46;
      }
      if (!v14)
      {
        os_log_type_t v4 = __nwlog_obj();
        os_log_type_t v5 = v15;
        if (!os_log_type_enabled(v4, v15)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_masque_options_add_extra_header";
        os_log_type_t v6 = "%{public}s called with null value, backtrace limit exceeded";
        goto LABEL_46;
      }
      char v9 = (char *)__nw_create_backtrace_string();
      os_log_type_t v4 = __nwlog_obj();
      os_log_type_t v5 = v15;
      BOOL v12 = os_log_type_enabled(v4, v15);
      if (!v9)
      {
        if (!v12) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_masque_options_add_extra_header";
        os_log_type_t v6 = "%{public}s called with null value, no backtrace";
        goto LABEL_46;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v17 = "nw_masque_options_add_extra_header";
        __int16 v18 = 2082;
        uint64_t v19 = v9;
        os_log_type_t v11 = "%{public}s called with null value, dumping backtrace:%{public}s";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
LABEL_47:
    if (v3) {
      goto LABEL_48;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_masque_options_add_extra_header";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v15 = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v3, &v15, &v14)) {
    goto LABEL_47;
  }
  if (v15 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v4 = __nwlog_obj();
    os_log_type_t v5 = v15;
    if (!os_log_type_enabled(v4, v15)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_masque_options_add_extra_header";
    os_log_type_t v6 = "%{public}s called with null header";
    goto LABEL_46;
  }
  if (!v14)
  {
    os_log_type_t v4 = __nwlog_obj();
    os_log_type_t v5 = v15;
    if (!os_log_type_enabled(v4, v15)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_masque_options_add_extra_header";
    os_log_type_t v6 = "%{public}s called with null header, backtrace limit exceeded";
    goto LABEL_46;
  }
  char v9 = (char *)__nw_create_backtrace_string();
  os_log_type_t v4 = __nwlog_obj();
  os_log_type_t v5 = v15;
  BOOL v10 = os_log_type_enabled(v4, v15);
  if (!v9)
  {
    if (!v10) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_masque_options_add_extra_header";
    os_log_type_t v6 = "%{public}s called with null header, no backtrace";
    goto LABEL_46;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v17 = "nw_masque_options_add_extra_header";
    __int16 v18 = 2082;
    uint64_t v19 = v9;
    os_log_type_t v11 = "%{public}s called with null header, dumping backtrace:%{public}s";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v11, buf, 0x16u);
  }
LABEL_32:
  free(v9);
  if (v3) {
LABEL_48:
  }
    free(v3);
}

uint64_t __nw_masque_options_add_extra_header_block_invoke(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(xpc_object_t *)(a2 + 8);
  if (!v4)
  {
    xpc_object_t v4 = xpc_array_create(0, 0);
    *(void *)(a2 + 8) = v4;
    if (*(void *)(a2 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    *(void *)(a2 + 16) = xpc_array_create(0, 0);
    xpc_object_t v4 = *(xpc_object_t *)(a2 + 8);
    goto LABEL_3;
  }
  if (!*(void *)(a2 + 16)) {
    goto LABEL_5;
  }
LABEL_3:
  xpc_array_set_string(v4, 0xFFFFFFFFFFFFFFFFLL, *(const char **)(a1 + 32));
  xpc_array_set_string(*(xpc_object_t *)(a2 + 16), 0xFFFFFFFFFFFFFFFFLL, *(const char **)(a1 + 40));
  return 1;
}

void nw_masque_options_set_version(void *a1, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ((a2 - 3) > 0xFFFFFFFD)
    {
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 0x40000000;
      v10[2] = __nw_masque_options_set_version_block_invoke;
      v10[3] = &__block_descriptor_tmp_19_28396;
      int v11 = a2;
      nw_protocol_options_access_handle(a1, v10);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_masque_options_set_version";
    id v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (__nwlog_fault(v2, &v13, &v12))
    {
      if (v13 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = v13;
        if (!os_log_type_enabled(v3, v13)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_masque_options_set_version";
        os_log_type_t v5 = "%{public}s called with null (version == nw_masque_version_draft_03 || version == nw_masque_version_rfc9298)";
        goto LABEL_32;
      }
      if (!v12)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = v13;
        if (!os_log_type_enabled(v3, v13)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_masque_options_set_version";
        os_log_type_t v5 = "%{public}s called with null (version == nw_masque_version_draft_03 || version == nw_masque_version_rfc9298)"
             ", backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v13;
      BOOL v9 = os_log_type_enabled(v3, v13);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_masque_options_set_version";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null (version == nw_masque_version_draft_03 || version == nw_masque_version_rfc9298), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_masque_options_set_version";
        os_log_type_t v5 = "%{public}s called with null (version == nw_masque_version_draft_03 || version == nw_masque_version_rfc9298), no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_masque_options_set_version";
    id v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v2, &v13, &v12)) {
      goto LABEL_33;
    }
    if (v13 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v13;
      if (!os_log_type_enabled(v3, v13)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_masque_options_set_version";
      os_log_type_t v5 = "%{public}s called with null options";
      goto LABEL_32;
    }
    if (!v12)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v13;
      if (!os_log_type_enabled(v3, v13)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_masque_options_set_version";
      os_log_type_t v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_32;
    }
    os_log_type_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = v13;
    BOOL v7 = os_log_type_enabled(v3, v13);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_masque_options_set_version";
      os_log_type_t v5 = "%{public}s called with null options, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v15 = "nw_masque_options_set_version";
      __int16 v16 = 2082;
      uint64_t v17 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

uint64_t __nw_masque_options_set_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 32);
  return 1;
}

NWConcrete_nw_protocol_options *nw_masque_options_copy_listener_options(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (nw_protocol_masque_listener_get_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_207);
    }
    id v2 = (void *)nw_protocol_masque_listener_get_definition(void)::definition;
    if (nw_protocol_masque_listener_get_definition(void)::definition)
    {
      id v2 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
      if (v2) {
        id v2 = os_retain(v2);
      }
    }
    options = nw_proxy_create_options(v2);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    v15[2] = __nw_masque_options_copy_listener_options_block_invoke;
    v15[3] = &__block_descriptor_tmp_22_28402;
    v15[4] = options;
    nw_protocol_options_access_handle(a1, v15);
    os_log_type_t v4 = a1;
    id v5 = v4[3];

    os_log_type_t v6 = v4;
    if (v4[3]) {
      char v7 = *((unsigned char *)v6 + 152) != 0;
    }
    else {
      char v7 = 0;
    }

    nw_protocol_options_set_proxy_endpoint(options, v5, v7);
    return options;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_masque_options_copy_listener_options";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = v17;
      if (os_log_type_enabled(v10, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_masque_options_copy_listener_options";
        char v12 = "%{public}s called with null options";
LABEL_25:
        _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = v17;
      BOOL v14 = os_log_type_enabled(v10, v17);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v19 = "nw_masque_options_copy_listener_options";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_masque_options_copy_listener_options";
        char v12 = "%{public}s called with null options, no backtrace";
        goto LABEL_25;
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = v17;
      if (os_log_type_enabled(v10, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_masque_options_copy_listener_options";
        char v12 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_25;
      }
    }
  }
LABEL_26:
  if (v9) {
    free(v9);
  }
  return 0;
}

uint64_t __nw_masque_options_copy_listener_options_block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __nw_masque_options_copy_listener_options_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_21_28403;
  v4[4] = a2;
  return nw_protocol_options_access_handle(v2, v4);
}

uint64_t __nw_masque_options_copy_listener_options_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  os_log_type_t v4 = *(void **)v3;
  if (*(void *)v3) {
    os_log_type_t v4 = os_retain(v4);
  }
  *(void *)a2 = v4;
  id v5 = *(void **)(v3 + 8);
  if (v5) {
    *(void *)(a2 + 8) = xpc_copy(v5);
  }
  os_log_type_t v6 = *(void **)(v3 + 16);
  if (v6) {
    *(void *)(a2 + 16) = xpc_copy(v6);
  }
  *(void *)(a2 + 24) = *(void *)(v3 + 24);
  *(_WORD *)(a2 + 32) = *(_WORD *)(v3 + 32);
  return 1;
}

void sub_18385923C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183859424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1838595B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18385A838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28559(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28560(uint64_t a1)
{
}

void sub_18385AA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18385AB48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18385AC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18385B558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18385C9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL nw_protocol_http_security_create(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = (char *)malloc_type_calloc(1uLL, 0x278uLL, 0xEAFB8F1AuLL);
  if (!v5)
  {
    uint64_t v12 = __nwlog_obj();
    os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    char v16 = "strict_calloc";
    __int16 v17 = 2048;
    uint64_t v18 = 1;
    __int16 v19 = 2048;
    uint64_t v20 = 632;
    uint64_t v13 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v13);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v13);
  }
  bzero(v5, 0x278uLL);
  if (gLogDatapath)
  {
    BOOL v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      char v16 = "nw_protocol_http_security_create";
      __int16 v17 = 2082;
      uint64_t v18 = (uint64_t)(v5 + 114);
      __int16 v19 = 2080;
      uint64_t v20 = (uint64_t)" ";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (nw_protocol_http_security_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_security_identifier::onceToken, &__block_literal_global_28693);
  }
  *((void *)v5 + 2) = nw_protocol_http_security_identifier::protocol_identifier;
  if (nw_protocol_http_security_get_callbacks(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_http_security_get_callbacks(void)::onceToken, &__block_literal_global_62_28694);
  }
  *((void *)v5 + 3) = &nw_protocol_http_security_get_callbacks(void)::protocol_callbacks;
  *((void *)v5 + 5) = v5;
  id v6 = nw_parameters_copy_context(a4);
  char v7 = v5[616];
  if (v7)
  {
    BOOL v8 = (void *)*((void *)v5 + 76);
    if (v8)
    {
      os_release(v8);
      char v7 = v5[616];
    }
  }
  *((void *)v5 + 76) = v6;
  v5[616] = v7 | 1;
  char server_mode = nw_parameters_get_server_mode(a4);
  *((void *)v5 + 25) = 0;
  v5[624] = v5[624] & 0xFE | server_mode;
  *((void *)v5 + 9) = v5 + 200;
  *((void *)v5 + 26) = v5 + 200;
  *((void *)v5 + 27) = 0;
  *((void *)v5 + 28) = v5 + 216;
  *((void *)v5 + 29) = 0;
  *((void *)v5 + 30) = v5 + 232;
  v5[340] = 2;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  id v10 = (id)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_plugin_metadata_set_callbacks((uint64_t)v5, v10, (uint64_t)nw_protocol_http_security_create::$_0::__invoke, (uint64_t)nw_protocol_http_security_create::$_1::__invoke);
  if (v10) {
    os_release(v10);
  }
  *((void *)v5 + 11) = v5 + 344;
  nw_protocol_plugin_retry_set_callbacks((uint64_t)v5, (uint64_t)nw_protocol_http_security_create::$_2::__invoke, (uint64_t)nw_protocol_http_security_create::$_3::__invoke, (uint64_t)nw_protocol_http_security_create::$_4::__invoke, (uint64_t)nw_protocol_http_security_create::$_5::__invoke);
  *((void *)v5 + 8) = v5 + 104;
  nw_protocol_plugin_name_set_callbacks((uint64_t)v5, (uint64_t)nw_protocol_http_security_create::$_6::__invoke);
  return (BOOL)v5;
}

uint64_t nw_protocol_http_security_create::$_6::__invoke(nw_protocol_http_security_create::$_6 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_security_create::$_5::__invoke(nw_protocol_http_security_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_security_create::$_4::__invoke(nw_protocol_http_security_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_security_create::$_3::__invoke(nw_protocol_http_security_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    __int16 v55 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v111[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v55, type, v111)) {
      goto LABEL_162;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v56 = __nwlog_obj();
      os_log_type_t v57 = type[0];
      if (!os_log_type_enabled(v56, type[0])) {
        goto LABEL_162;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      long long v58 = "%{public}s called with null protocol";
LABEL_161:
      _os_log_impl(&dword_1830D4000, v56, v57, v58, buf, 0xCu);
      goto LABEL_162;
    }
    if (v111[0] == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v56 = __nwlog_obj();
      os_log_type_t v57 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        long long v58 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_161;
      }
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v56 = __nwlog_obj();
    os_log_type_t v57 = type[0];
    BOOL v60 = os_log_type_enabled(v56, type[0]);
    if (!backtrace_string)
    {
      if (v60)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        long long v58 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_161;
      }
      goto LABEL_162;
    }
    if (!v60) {
      goto LABEL_118;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "operator()";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    long long v61 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_117:
    _os_log_impl(&dword_1830D4000, v56, v57, v61, buf, 0x16u);
    goto LABEL_118;
  }
  uint64_t v3 = *((void *)this + 5);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    __int16 v55 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v111[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v55, type, v111)) {
      goto LABEL_162;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v56 = __nwlog_obj();
      os_log_type_t v57 = type[0];
      if (!os_log_type_enabled(v56, type[0])) {
        goto LABEL_162;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      long long v58 = "%{public}s called with null http_security";
      goto LABEL_161;
    }
    if (v111[0] == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v56 = __nwlog_obj();
      os_log_type_t v57 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        long long v58 = "%{public}s called with null http_security, backtrace limit exceeded";
        goto LABEL_161;
      }
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v56 = __nwlog_obj();
    os_log_type_t v57 = type[0];
    BOOL v62 = os_log_type_enabled(v56, type[0]);
    if (!backtrace_string)
    {
      if (v62)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        long long v58 = "%{public}s called with null http_security, no backtrace";
        goto LABEL_161;
      }
      goto LABEL_162;
    }
    if (!v62) {
      goto LABEL_118;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "operator()";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    long long v61 = "%{public}s called with null http_security, dumping backtrace:%{public}s";
    goto LABEL_117;
  }
  if (a2)
  {
    if ((*(unsigned char *)(v3 + 624) & 2) != 0) {
      return 1;
    }
    *(unsigned char *)(v3 + 624) |= 2u;
    parameters = nw_protocol_get_parameters((uint64_t)a2);
    *(void *)os_log_type_t type = 0;
    __int16 v119 = type;
    uint64_t v120 = 0x3802000000;
    __int16 v121 = __Block_byref_object_copy__33;
    os_log_type_t v122 = __Block_byref_object_dispose__34;
    v123 = nw_parameters_copy_url_endpoint(parameters);
    v124 |= 1u;
    id v5 = (void *)*((void *)v119 + 5);
    if (v5)
    {
      CFTypeRef v6 = nw_endpoint_copy_cfurl(v5);
      char v7 = *(unsigned char *)(v3 + 568);
      if (v7)
      {
        BOOL v8 = *(const void **)(v3 + 560);
        if (v8)
        {
          CFRelease(v8);
          char v7 = *(unsigned char *)(v3 + 568);
        }
      }
      *(void *)(v3 + 560) = v6;
      *(unsigned char *)(v3 + 568) = v7 | 1;
      cStr = nw_endpoint_get_hostname(*((nw_endpoint_t *)v119 + 5));
      url_scheme = (const char *)nw_endpoint_get_url_scheme(*((void **)v119 + 5));
      BOOL v11 = 1;
      if (strcasecmp(url_scheme, "https"))
      {
        id v10 = (const char *)nw_endpoint_get_url_scheme(*((void **)v119 + 5));
        if (strcasecmp(v10, "wss")) {
          BOOL v11 = 0;
        }
      }
    }
    else
    {
      BOOL v11 = 0;
      cStr = 0;
    }
    uint64_t v13 = nw_parameters_copy_protocol_options_legacy(parameters, (nw_protocol *)v3);
    if (v13)
    {
      BOOL v14 = v13;
      os_log_type_t v15 = nw_protocol_options_copy_definition(v14);
      if (nw_protocol_copy_http_security_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_44_74704);
      }
      char v16 = &qword_1E8F6A000;
      BOOL is_equal = nw_protocol_definition_is_equal(v15, (nw_protocol_definition_t)nw_protocol_copy_http_security_definition_http_security_definition);

      if (is_equal)
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000;
        v128 = __Block_byref_object_copy__5_73857;
        int v129 = __Block_byref_object_dispose__6_73858;
        v130 = 0;
        *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
        uint64_t v112 = 3221225472;
        uint64_t v113 = (uint64_t)__nw_http_security_options_copy_hsts_storage_block_invoke;
        BOOL v114 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5248E90;
        uint64_t v115 = (void (*)(uint64_t))buf;
        nw_protocol_options_access_handle(v14, v111);
        id v18 = *(id *)(*(void *)&buf[8] + 40);
        _Block_object_dispose(buf, 8);

        goto LABEL_20;
      }
      os_log_type_t v68 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_hsts_storage";
      int v69 = (char *)_os_log_send_and_compose_impl();

      v111[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(iterate_block[0]) = 0;
      if (__nwlog_fault(v69, v111, iterate_block))
      {
        if (v111[0] == OS_LOG_TYPE_FAULT)
        {
          v70 = __nwlog_obj();
          os_log_type_t v71 = v111[0];
          if (os_log_type_enabled(v70, v111[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_hsts_storage";
            _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s protocol options are not http security", buf, 0xCu);
          }
        }
        else
        {
          if (LOBYTE(iterate_block[0]))
          {
            BOOL v78 = (char *)__nw_create_backtrace_string();
            uint64_t v79 = __nwlog_obj();
            os_log_type_t v80 = v111[0];
            BOOL v81 = os_log_type_enabled(v79, v111[0]);
            if (v78)
            {
              if (v81)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_hsts_storage";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v78;
                _os_log_impl(&dword_1830D4000, v79, v80, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
              }

              char v16 = &qword_1E8F6A000;
              free(v78);
            }
            else
            {
              if (v81)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_hsts_storage";
                _os_log_impl(&dword_1830D4000, v79, v80, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
              }

              char v16 = &qword_1E8F6A000;
            }
            goto LABEL_187;
          }
          v70 = __nwlog_obj();
          os_log_type_t v90 = v111[0];
          if (os_log_type_enabled(v70, v111[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_hsts_storage";
            _os_log_impl(&dword_1830D4000, v70, v90, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_187:
      if (v69) {
        free(v69);
      }
      id v18 = 0;
LABEL_20:

      char v19 = *(unsigned char *)(v3 + 584);
      if (v19)
      {
        uint64_t v20 = *(void **)(v3 + 576);
        if (v20)
        {
          os_release(v20);
          char v19 = *(unsigned char *)(v3 + 584);
        }
      }
      *(void *)(v3 + 576) = v18;
      *(unsigned char *)(v3 + 584) = v19 | 1;
      uint64_t v21 = v14;
      uint64_t v22 = nw_protocol_options_copy_definition(v21);
      if (nw_protocol_copy_http_security_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_44_74704);
      }
      BOOL v23 = nw_protocol_definition_is_equal(v22, (nw_protocol_definition_t)v16[53]);

      if (v23)
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000;
        v128 = __Block_byref_object_copy__5_73857;
        int v129 = __Block_byref_object_dispose__6_73858;
        v130 = 0;
        *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
        uint64_t v112 = 3221225472;
        uint64_t v113 = (uint64_t)__nw_http_security_options_copy_alt_svc_storage_block_invoke;
        BOOL v114 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5248E90;
        uint64_t v115 = (void (*)(uint64_t))buf;
        nw_protocol_options_access_handle(v21, v111);
        id v24 = *(id *)(*(void *)&buf[8] + 40);
        _Block_object_dispose(buf, 8);

        goto LABEL_27;
      }
      v72 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_alt_svc_storage";
      uint64_t v73 = (char *)_os_log_send_and_compose_impl();

      v111[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(iterate_block[0]) = 0;
      if (__nwlog_fault(v73, v111, iterate_block))
      {
        if (v111[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v74 = __nwlog_obj();
          os_log_type_t v75 = v111[0];
          if (os_log_type_enabled(v74, v111[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_alt_svc_storage";
            _os_log_impl(&dword_1830D4000, v74, v75, "%{public}s protocol options are not http security", buf, 0xCu);
          }
        }
        else
        {
          if (LOBYTE(iterate_block[0]))
          {
            BOOL v104 = v11;
            BOOL v82 = (char *)__nw_create_backtrace_string();
            uint64_t v83 = __nwlog_obj();
            os_log_type_t v84 = v111[0];
            BOOL v85 = os_log_type_enabled(v83, v111[0]);
            if (v82)
            {
              if (v85)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_alt_svc_storage";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v82;
                _os_log_impl(&dword_1830D4000, v83, v84, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
              }

              BOOL v11 = v104;
              free(v82);
            }
            else
            {
              if (v85)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_alt_svc_storage";
                _os_log_impl(&dword_1830D4000, v83, v84, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
              }

              BOOL v11 = v104;
            }
            goto LABEL_193;
          }
          os_log_type_t v74 = __nwlog_obj();
          os_log_type_t v91 = v111[0];
          if (os_log_type_enabled(v74, v111[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_alt_svc_storage";
            _os_log_impl(&dword_1830D4000, v74, v91, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_193:
      if (v73) {
        free(v73);
      }
      id v24 = 0;
LABEL_27:

      char v25 = *(unsigned char *)(v3 + 600);
      if (v25)
      {
        uint64_t v26 = *(void **)(v3 + 592);
        if (v26)
        {
          os_release(v26);
          char v25 = *(unsigned char *)(v3 + 600);
        }
      }
      *(void *)(v3 + 592) = v24;
      *(unsigned char *)(v3 + 600) = v25 | 1;
      *(void *)uint64_t v111 = 0;
      uint64_t v112 = (uint64_t)v111;
      uint64_t v113 = 0x3802000000;
      BOOL v114 = __Block_byref_object_copy__37;
      uint64_t v115 = __Block_byref_object_dispose__38;
      uint64_t object = 0;
      v117 |= 1u;
      uint64_t v107 = 0;
      uint64_t v108 = &v107;
      uint64_t v109 = 0x2000000000;
      char v110 = 0;
      int v27 = nw_parameters_copy_default_protocol_stack(parameters);
      iterate_block[0] = MEMORY[0x1E4F143A8];
      iterate_block[1] = 0x40000000;
      iterate_block[2] = ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke;
      iterate_block[3] = &unk_1E523F108;
      iterate_block[4] = &v107;
      iterate_block[5] = v111;
      iterate_block[6] = v3;
      nw_protocol_stack_iterate_application_protocols(v27, iterate_block);
      if (!*((unsigned char *)v108 + 24))
      {
LABEL_42:
        char v37 = (void *)sec_protocol_configuration_copy_singleton();
        if (sec_protocol_configuration_tls_required() && cStr)
        {
          int v38 = sec_protocol_configuration_tls_required_for_host();
          if (v11)
          {
            if (*(void *)(v112 + 40)) {
              int v39 = v38;
            }
            else {
              int v39 = 0;
            }
            if (v39 == 1)
            {
              os_log_type_t v40 = (void *)sec_protocol_configuration_copy_transformed_options_for_host();
              if (v40)
              {
                os_release(v40);
                uint64_t v12 = 1;
                if (!v37) {
                  goto LABEL_79;
                }
                goto LABEL_78;
              }
            }
            goto LABEL_223;
          }
          if (v38)
          {
            if ((*(unsigned char *)(v3 + 198) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v41 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http_security_connect";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v3 + 114;
                *(_WORD *)&buf[22] = 2080;
                v128 = (uint64_t (*)(uint64_t, uint64_t))" ";
                _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sATS requires TLS but is not currently enforced", buf, 0x20u);
              }
            }
          }
        }
        else if (v11)
        {
          goto LABEL_223;
        }
        uint64_t v12 = 1;
        if (!*(void *)(v3 + 576) || !cStr) {
          goto LABEL_77;
        }
        uint64_t v42 = v16;
        __int16 v43 = v21;
        BOOL v44 = nw_protocol_options_copy_definition(v43);
        if (nw_protocol_copy_http_security_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_44_74704);
        }
        BOOL v45 = nw_protocol_definition_is_equal(v44, (nw_protocol_definition_t)v42[53]);

        if (v45)
        {
          *(void *)v133 = 0;
          *(void *)&v133[8] = v133;
          *(void *)&v133[16] = 0x2020000000;
          LOBYTE(v134) = 0;
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = __nw_http_security_options_get_skip_hsts_lookup_block_invoke;
          v128 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5248E90;
          int v129 = (void (*)(uint64_t))v133;
          nw_protocol_options_access_handle(v43, buf);
          BOOL v46 = *(unsigned char *)(*(void *)&v133[8] + 24) == 0;
          _Block_object_dispose(v133, 8);

          if (!v46) {
            goto LABEL_223;
          }
LABEL_64:
          __int16 v47 = (id *)*(id *)(v3 + 576);
          if (v47)
          {
            BOOL v48 = v47;
            __int16 v49 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x600u);
            buf[0] = 0;
            int v50 = [v48[1] shouldPromoteHostToHTTPS:v49 isPreload:buf];
            char v51 = buf[0];

            if (v50)
            {
              *(void *)v133 = 0;
              *(void *)&v133[8] = v133;
              *(void *)&v133[16] = 0x3802000000;
              v134 = __Block_byref_object_copy__41;
              v135 = __Block_byref_object_dispose__42;
              BOOL v136 = nw_http_security_options_copy_handler(v43);
              v137 |= 1u;
              char v52 = nw_http_security_options_copy_handler_queue(v43);
              __int16 v53 = v52;
              if (*(void *)(*(void *)&v133[8] + 40))
              {
                if (!v52) {
                  goto LABEL_73;
                }
                nw_protocol_plugin_retry_begin_async(v3 + 344);
                *(void *)buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 0x40000000;
                *(void *)&buf[16] = ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_43;
                v128 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E523F1D0;
                int v129 = (void (*)(uint64_t))v133;
                v130 = type;
                char v132 = v51;
                uint64_t v131 = v3;
                dispatch_async(v53, buf);
              }
              else if (!v52)
              {
                goto LABEL_73;
              }
              dispatch_release(v53);
LABEL_73:
              _Block_object_dispose(v133, 8);
              if ((v137 & 1) != 0 && v136) {
                _Block_release(v136);
              }
              uint64_t v12 = 0;
LABEL_77:
              if (!v37)
              {
LABEL_79:
                if (v27) {
                  os_release(v27);
                }
                _Block_object_dispose(&v107, 8);
                _Block_object_dispose(v111, 8);
                if ((v117 & 1) != 0 && object) {
                  os_release(object);
                }
                os_release(v21);
LABEL_85:
                _Block_object_dispose(type, 8);
                if ((v124 & 1) != 0 && v123) {
                  os_release(v123);
                }
                return v12;
              }
LABEL_78:
              os_release(v37);
              goto LABEL_79;
            }
LABEL_223:
            uint64_t v12 = 1;
            if (!v37) {
              goto LABEL_79;
            }
            goto LABEL_78;
          }
          uint64_t v95 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_hsts_storage_should_upgrade";
          uint64_t v96 = (char *)_os_log_send_and_compose_impl();

          v133[0] = 16;
          os_log_type_t v126 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v96, v133, &v126))
          {
            if (v133[0] == 17)
            {
              os_log_type_t v97 = __nwlog_obj();
              os_log_type_t v98 = v133[0];
              if (os_log_type_enabled(v97, (os_log_type_t)v133[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_hsts_storage_should_upgrade";
                _os_log_impl(&dword_1830D4000, v97, v98, "%{public}s called with null storage", buf, 0xCu);
              }
            }
            else if (v126)
            {
              int v100 = (char *)__nw_create_backtrace_string();
              os_log_type_t v97 = __nwlog_obj();
              os_log_type_t v101 = v133[0];
              BOOL v102 = os_log_type_enabled(v97, (os_log_type_t)v133[0]);
              if (v100)
              {
                if (v102)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_hsts_storage_should_upgrade";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v100;
                  _os_log_impl(&dword_1830D4000, v97, v101, "%{public}s called with null storage, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v100);
                goto LABEL_221;
              }
              if (v102)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_hsts_storage_should_upgrade";
                _os_log_impl(&dword_1830D4000, v97, v101, "%{public}s called with null storage, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              os_log_type_t v97 = __nwlog_obj();
              os_log_type_t v103 = v133[0];
              if (os_log_type_enabled(v97, (os_log_type_t)v133[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_hsts_storage_should_upgrade";
                _os_log_impl(&dword_1830D4000, v97, v103, "%{public}s called with null storage, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_221:
          if (v96) {
            free(v96);
          }
          goto LABEL_223;
        }
        v86 = __nwlog_obj();
        *(_DWORD *)v133 = 136446210;
        *(void *)&v133[4] = "nw_http_security_options_get_skip_hsts_lookup";
        BOOL v87 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v126 = OS_LOG_TYPE_ERROR;
        char v125 = 0;
        if (__nwlog_fault(v87, &v126, &v125))
        {
          if (v126 == OS_LOG_TYPE_FAULT)
          {
            uint64_t v88 = __nwlog_obj();
            os_log_type_t v89 = v126;
            if (os_log_type_enabled(v88, v126))
            {
              *(_DWORD *)v133 = 136446210;
              *(void *)&v133[4] = "nw_http_security_options_get_skip_hsts_lookup";
              _os_log_impl(&dword_1830D4000, v88, v89, "%{public}s protocol options are not http security", v133, 0xCu);
            }
          }
          else if (v125)
          {
            os_log_type_t v92 = (char *)__nw_create_backtrace_string();
            uint64_t v88 = __nwlog_obj();
            os_log_type_t v93 = v126;
            BOOL v94 = os_log_type_enabled(v88, v126);
            if (v92)
            {
              if (v94)
              {
                *(_DWORD *)v133 = 136446466;
                *(void *)&v133[4] = "nw_http_security_options_get_skip_hsts_lookup";
                *(_WORD *)&v133[12] = 2082;
                *(void *)&v133[14] = v92;
                _os_log_impl(&dword_1830D4000, v88, v93, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", v133, 0x16u);
              }

              free(v92);
              goto LABEL_212;
            }
            if (v94)
            {
              *(_DWORD *)v133 = 136446210;
              *(void *)&v133[4] = "nw_http_security_options_get_skip_hsts_lookup";
              _os_log_impl(&dword_1830D4000, v88, v93, "%{public}s protocol options are not http security, no backtrace", v133, 0xCu);
            }
          }
          else
          {
            uint64_t v88 = __nwlog_obj();
            os_log_type_t v99 = v126;
            if (os_log_type_enabled(v88, v126))
            {
              *(_DWORD *)v133 = 136446210;
              *(void *)&v133[4] = "nw_http_security_options_get_skip_hsts_lookup";
              _os_log_impl(&dword_1830D4000, v88, v99, "%{public}s protocol options are not http security, backtrace limit exceeded", v133, 0xCu);
            }
          }
        }
LABEL_212:
        if (v87) {
          free(v87);
        }

        goto LABEL_64;
      }
      nw_protocol_options_t v28 = nw_protocol_stack_copy_transport_protocol(v27);
      if (nw_protocol_options_is_tls(v28))
      {
        BOOL v29 = v11;
        __int16 v30 = v16;
        sec_protocol_options_t v31 = v28;
      }
      else
      {
        if (!nw_protocol_options_is_quic(v28))
        {
          if (!nw_protocol_options_is_tcp(v28))
          {
LABEL_40:
            if (v28) {
              os_release(v28);
            }
            goto LABEL_42;
          }
LABEL_39:
          *((unsigned char *)v108 + 24) = 0;
          goto LABEL_40;
        }
        BOOL v29 = v11;
        __int16 v30 = v16;
        sec_protocol_options_t v31 = nw_quic_copy_sec_protocol_options(v28);
      }
      sec_protocol_options_t v32 = v31;
      uint64_t v33 = v112;
      size_t v35 = (char *)(v112 + 48);
      char v34 = *(unsigned char *)(v112 + 48);
      if (v34)
      {
        int v36 = *(void **)(v112 + 40);
        if (v36)
        {
          os_release(v36);
          char v34 = *v35;
        }
      }
      *(void *)(v33 + 40) = v32;
      char *v35 = v34 | 1;
      char v16 = v30;
      BOOL v11 = v29;
      goto LABEL_39;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_security_connect";
    __int16 v63 = (char *)_os_log_send_and_compose_impl();
    v111[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(iterate_block[0]) = 0;
    if (__nwlog_fault(v63, v111, iterate_block))
    {
      if (v111[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v64 = __nwlog_obj();
        os_log_type_t v65 = v111[0];
        if (os_log_type_enabled(v64, v111[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_connect";
          size_t v66 = "%{public}s called with null protocol_options";
LABEL_180:
          _os_log_impl(&dword_1830D4000, v64, v65, v66, buf, 0xCu);
        }
      }
      else if (LOBYTE(iterate_block[0]))
      {
        uint64_t v76 = (char *)__nw_create_backtrace_string();
        uint64_t v64 = __nwlog_obj();
        os_log_type_t v65 = v111[0];
        BOOL v77 = os_log_type_enabled(v64, v111[0]);
        if (v76)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_security_connect";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v76;
            _os_log_impl(&dword_1830D4000, v64, v65, "%{public}s called with null protocol_options, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v76);
          goto LABEL_181;
        }
        if (v77)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_connect";
          size_t v66 = "%{public}s called with null protocol_options, no backtrace";
          goto LABEL_180;
        }
      }
      else
      {
        uint64_t v64 = __nwlog_obj();
        os_log_type_t v65 = v111[0];
        if (os_log_type_enabled(v64, v111[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_connect";
          size_t v66 = "%{public}s called with null protocol_options, backtrace limit exceeded";
          goto LABEL_180;
        }
      }
    }
LABEL_181:
    if (v63) {
      free(v63);
    }
    uint64_t v12 = 0;
    goto LABEL_85;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "operator()";
  __int16 v55 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v111[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v55, type, v111)) {
    goto LABEL_162;
  }
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (v111[0] == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v56 = __nwlog_obj();
      os_log_type_t v57 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        long long v58 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_161;
      }
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v56 = __nwlog_obj();
    os_log_type_t v57 = type[0];
    BOOL v67 = os_log_type_enabled(v56, type[0]);
    if (!backtrace_string)
    {
      if (v67)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "operator()";
        long long v58 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_161;
      }
      goto LABEL_162;
    }
    if (v67)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      long long v61 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_117;
    }
LABEL_118:
    free(backtrace_string);
    goto LABEL_162;
  }
  BOOL v56 = __nwlog_obj();
  os_log_type_t v57 = type[0];
  if (os_log_type_enabled(v56, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    long long v58 = "%{public}s called with null other_protocol";
    goto LABEL_161;
  }
LABEL_162:
  if (v55) {
    free(v55);
  }
  return 0;
}

void sub_18385EFE8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__38(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke(void *a1, NSObject *a2)
{
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(a2);
  if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24)) {
    goto LABEL_11;
  }
  if (nw_protocol_options_is_tls(a2))
  {
    sec_protocol_options_t v5 = a2;
  }
  else
  {
    if (!nw_protocol_options_is_quic(a2))
    {
      if (!nw_protocol_options_is_tcp(a2) && !nw_protocol_options_is_masque(a2)) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    sec_protocol_options_t v5 = nw_quic_copy_sec_protocol_options(a2);
  }
  sec_protocol_options_t v6 = v5;
  uint64_t v7 = *(void *)(a1[5] + 8);
  uint64_t v9 = (char *)(v7 + 48);
  char v8 = *(unsigned char *)(v7 + 48);
  if (v8)
  {
    id v10 = *(void **)(v7 + 40);
    if (v10)
    {
      os_release(v10);
      char v8 = *v9;
    }
  }
  *(void *)(v7 + 40) = v6;
  char *v9 = v8 | 1;
LABEL_10:
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
LABEL_11:
  if (a1[6] == protocol_handle) {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__42(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v2 = *(const void **)(a1 + 40);
    if (v2) {
      _Block_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_43(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_58_28725;
  v4[4] = *(void *)(a1 + 48);
  return (*(uint64_t (**)(void, void, void, void *))(*(void *)(v1 + 40) + 16))(*(void *)(v1 + 40), *(void *)(v2 + 40), *(unsigned __int8 *)(a1 + 56), v4);
}

void ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  os_log_type_t v4 = *(void **)(v3 + 608);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_3;
  v5[3] = &__block_descriptor_tmp_56;
  v5[4] = v3;
  v5[5] = a2;
  v5[6] = a3;
  nw_queue_context_async_if_needed(v4, v5);
}

void ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_3(uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (nw_protocol_plugin_retry_end_async(a1[4] + 344))
  {
    uint64_t v2 = (void *)a1[5];
    if (v2 && (uint64_t v3 = (void *)a1[6]) != 0)
    {
      uint64_t v4 = a1[4];
      sec_protocol_options_t v5 = *(void **)(v4 + 608);
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 0x40000000;
      v11[2] = ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_3_54;
      v11[3] = &__block_descriptor_tmp_55_28728;
      v11[4] = v4;
      nw_protocol_plugin_retry_reissue_output_frames(v4 + 344, v4, v5, v2, v3, 2, 0, &__block_literal_global_48_28729, &__block_literal_global_53_28730, (uint64_t)v11);
    }
    else
    {
      nw_protocol_error(*(void **)(a1[4] + 48), a1[4]);
      uint64_t v7 = a1[4];
      char v8 = *(void **)(v7 + 48);
      nw_protocol_disconnected(v8, v7);
    }
  }
  else
  {
    uint64_t v6 = a1[4];
    if ((*(unsigned char *)(v6 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v9 = __nwlog_obj();
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
        uint64_t v6 = a1[4];
        if (v10)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v13 = "nw_http_security_connect_block_invoke_3";
          __int16 v14 = 2082;
          uint64_t v15 = v6 + 114;
          __int16 v16 = 2080;
          __int16 v17 = " ";
          _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDeferred destroy when coming back from callout", buf, 0x20u);
          uint64_t v6 = a1[4];
        }
      }
    }
    nw_http_security_destroy(v6);
  }
}

void nw_http_security_destroy(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v10 = __nwlog_obj();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        int v11 = 136446722;
        uint64_t v12 = "nw_http_security_destroy";
        __int16 v13 = 2082;
        uint64_t v14 = a1 + 114;
        __int16 v15 = 2080;
        __int16 v16 = " ";
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v11, 0x20u);
      }
    }
  }
  if (*(_DWORD *)(a1 + 552))
  {
    *(unsigned char *)(a1 + 556) |= 0x40u;
    if ((*(unsigned char *)(a1 + 198) & 1) == 0 && gLogDatapath)
    {
      uint64_t v2 = __nwlog_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        int v11 = 136446722;
        uint64_t v12 = "nw_http_security_destroy";
        __int16 v13 = 2082;
        uint64_t v14 = a1 + 114;
        __int16 v15 = 2080;
        __int16 v16 = " ";
        _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sdeferring destroy because the request is being reissued", (uint8_t *)&v11, 0x20u);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 616))
    {
      uint64_t v3 = *(void **)(a1 + 608);
      if (v3) {
        os_release(v3);
      }
    }
    *(void *)(a1 + 608) = 0;
    if (*(unsigned char *)(a1 + 600))
    {
      uint64_t v4 = *(void **)(a1 + 592);
      if (v4) {
        os_release(v4);
      }
    }
    *(void *)(a1 + 592) = 0;
    if (*(unsigned char *)(a1 + 584))
    {
      sec_protocol_options_t v5 = *(void **)(a1 + 576);
      if (v5) {
        os_release(v5);
      }
    }
    *(void *)(a1 + 576) = 0;
    if (*(unsigned char *)(a1 + 568))
    {
      uint64_t v6 = *(const void **)(a1 + 560);
      if (v6) {
        CFRelease(v6);
      }
    }
    *(void *)(a1 + 560) = 0;
    nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(a1 + 344));
    if (*(unsigned char *)(a1 + 288))
    {
      uint64_t v7 = *(void **)(a1 + 280);
      if (v7) {
        os_release(v7);
      }
    }
    *(void *)(a1 + 280) = 0;
    if (*(unsigned char *)(a1 + 272))
    {
      char v8 = *(void **)(a1 + 264);
      if (v8) {
        os_release(v8);
      }
    }
    *(void *)(a1 + 264) = 0;
    if (*(unsigned char *)(a1 + 256))
    {
      uint64_t v9 = *(void **)(a1 + 248);
      if (v9) {
        os_release(v9);
      }
    }
    free((void *)a1);
  }
}

void ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_3_54(uint64_t a1)
{
}

uint64_t ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_2_49()
{
  return 1;
}

uint64_t ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_44()
{
  return 1;
}

uint64_t nw_protocol_http_security_create::$_2::__invoke(nw_protocol_http_security_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 0;
}

void nw_protocol_http_security_create::$_1::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "operator()";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null protocol";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "operator()";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_61:
        if (!v6) {
          return;
        }
        goto LABEL_62;
      }
      if (!v11) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_60;
  }
  if (!*(void *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "operator()";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17)) {
      goto LABEL_61;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_61;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "operator()";
        uint64_t v9 = "%{public}s called with null http_security, backtrace limit exceeded";
        goto LABEL_60;
      }
      uint64_t v12 = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!v12)
      {
        if (!v13) {
          goto LABEL_61;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "operator()";
        uint64_t v9 = "%{public}s called with null http_security, no backtrace";
        goto LABEL_60;
      }
      if (!v13) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v20 = "operator()";
      __int16 v21 = 2082;
      uint64_t v22 = v12;
      uint64_t v14 = "%{public}s called with null http_security, dumping backtrace:%{public}s";
      goto LABEL_41;
    }
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "operator()";
    uint64_t v9 = "%{public}s called with null http_security";
LABEL_60:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_61;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "operator()";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null metadata";
      goto LABEL_60;
    }
    if (!v17)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_60;
    }
    uint64_t v12 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v15 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v15) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_60;
    }
    if (!v15) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v20 = "operator()";
    __int16 v21 = 2082;
    uint64_t v22 = v12;
    uint64_t v14 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_41:
    _os_log_impl(&dword_1830D4000, v7, v8, v14, buf, 0x16u);
    goto LABEL_42;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "operator()";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null completion";
      goto LABEL_60;
    }
    if (!v17)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_60;
    }
    uint64_t v12 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v16 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v16) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null completion, no backtrace";
      goto LABEL_60;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v20 = "operator()";
      __int16 v21 = 2082;
      uint64_t v22 = v12;
      uint64_t v14 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_41;
    }
LABEL_42:
    free(v12);
    if (!v6) {
      return;
    }
LABEL_62:
    free(v6);
    return;
  }
  sec_protocol_options_t v5 = *(void (**)(uint64_t, uint64_t))(a5 + 16);

  v5(a5, 1);
}

void nw_protocol_http_security_create::$_0::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(void *)&block[4] = "operator()";
    nw_protocol_options_t v28 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v80) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v28, &v80, type)) {
      goto LABEL_119;
    }
    if (v80 != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v29 = __nwlog_obj();
        os_log_type_t v30 = v80;
        if (!os_log_type_enabled(v29, (os_log_type_t)v80)) {
          goto LABEL_119;
        }
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "operator()";
        sec_protocol_options_t v31 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_118;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = v80;
      BOOL v33 = os_log_type_enabled(v29, (os_log_type_t)v80);
      if (!backtrace_string)
      {
        if (!v33) {
          goto LABEL_119;
        }
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "operator()";
        sec_protocol_options_t v31 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_118;
      }
      if (v33)
      {
        *(_DWORD *)block = 136446466;
        *(void *)&block[4] = "operator()";
        *(_WORD *)&block[12] = 2082;
        *(void *)&block[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null protocol, dumping backtrace:%{public}s", block, 0x16u);
      }
      free(backtrace_string);
LABEL_119:
      if (v28) {
        goto LABEL_120;
      }
      return;
    }
    BOOL v29 = __nwlog_obj();
    os_log_type_t v30 = v80;
    if (!os_log_type_enabled(v29, (os_log_type_t)v80)) {
      goto LABEL_119;
    }
    *(_DWORD *)block = 136446210;
    *(void *)&block[4] = "operator()";
    sec_protocol_options_t v31 = "%{public}s called with null protocol";
    goto LABEL_118;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(void *)&block[4] = "operator()";
    nw_protocol_options_t v28 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v80) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v28, &v80, type)) {
      goto LABEL_119;
    }
    if (v80 != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v29 = __nwlog_obj();
        os_log_type_t v30 = v80;
        if (!os_log_type_enabled(v29, (os_log_type_t)v80)) {
          goto LABEL_119;
        }
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "operator()";
        sec_protocol_options_t v31 = "%{public}s called with null http_security, backtrace limit exceeded";
        goto LABEL_118;
      }
      char v34 = (char *)__nw_create_backtrace_string();
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = v80;
      BOOL v35 = os_log_type_enabled(v29, (os_log_type_t)v80);
      if (!v34)
      {
        if (!v35) {
          goto LABEL_119;
        }
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "operator()";
        sec_protocol_options_t v31 = "%{public}s called with null http_security, no backtrace";
        goto LABEL_118;
      }
      if (!v35) {
        goto LABEL_94;
      }
      *(_DWORD *)block = 136446466;
      *(void *)&block[4] = "operator()";
      *(_WORD *)&block[12] = 2082;
      *(void *)&block[14] = v34;
      int v36 = "%{public}s called with null http_security, dumping backtrace:%{public}s";
      goto LABEL_93;
    }
    BOOL v29 = __nwlog_obj();
    os_log_type_t v30 = v80;
    if (!os_log_type_enabled(v29, (os_log_type_t)v80)) {
      goto LABEL_119;
    }
    *(_DWORD *)block = 136446210;
    *(void *)&block[4] = "operator()";
    sec_protocol_options_t v31 = "%{public}s called with null http_security";
LABEL_118:
    _os_log_impl(&dword_1830D4000, v29, v30, v31, block, 0xCu);
    goto LABEL_119;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(void *)&block[4] = "operator()";
    nw_protocol_options_t v28 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v80) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v28, &v80, type)) {
      goto LABEL_119;
    }
    if (v80 != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v29 = __nwlog_obj();
        os_log_type_t v30 = v80;
        if (!os_log_type_enabled(v29, (os_log_type_t)v80)) {
          goto LABEL_119;
        }
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "operator()";
        sec_protocol_options_t v31 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_118;
      }
      char v34 = (char *)__nw_create_backtrace_string();
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = v80;
      BOOL v37 = os_log_type_enabled(v29, (os_log_type_t)v80);
      if (!v34)
      {
        if (!v37) {
          goto LABEL_119;
        }
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "operator()";
        sec_protocol_options_t v31 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_118;
      }
      if (!v37) {
        goto LABEL_94;
      }
      *(_DWORD *)block = 136446466;
      *(void *)&block[4] = "operator()";
      *(_WORD *)&block[12] = 2082;
      *(void *)&block[14] = v34;
      int v36 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_93;
    }
    BOOL v29 = __nwlog_obj();
    os_log_type_t v30 = v80;
    if (!os_log_type_enabled(v29, (os_log_type_t)v80)) {
      goto LABEL_119;
    }
    *(_DWORD *)block = 136446210;
    *(void *)&block[4] = "operator()";
    sec_protocol_options_t v31 = "%{public}s called with null other_protocol";
    goto LABEL_118;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(void *)&block[4] = "operator()";
    nw_protocol_options_t v28 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v80) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v28, &v80, type)) {
      goto LABEL_119;
    }
    if (v80 == 17)
    {
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = v80;
      if (!os_log_type_enabled(v29, (os_log_type_t)v80)) {
        goto LABEL_119;
      }
      *(_DWORD *)block = 136446210;
      *(void *)&block[4] = "operator()";
      sec_protocol_options_t v31 = "%{public}s called with null metadata";
      goto LABEL_118;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v29 = __nwlog_obj();
      os_log_type_t v30 = v80;
      if (!os_log_type_enabled(v29, (os_log_type_t)v80)) {
        goto LABEL_119;
      }
      *(_DWORD *)block = 136446210;
      *(void *)&block[4] = "operator()";
      sec_protocol_options_t v31 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_118;
    }
    char v34 = (char *)__nw_create_backtrace_string();
    BOOL v29 = __nwlog_obj();
    os_log_type_t v30 = v80;
    BOOL v38 = os_log_type_enabled(v29, (os_log_type_t)v80);
    if (!v34)
    {
      if (!v38) {
        goto LABEL_119;
      }
      *(_DWORD *)block = 136446210;
      *(void *)&block[4] = "operator()";
      sec_protocol_options_t v31 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_118;
    }
    if (!v38) {
      goto LABEL_94;
    }
    *(_DWORD *)block = 136446466;
    *(void *)&block[4] = "operator()";
    *(_WORD *)&block[12] = 2082;
    *(void *)&block[14] = v34;
    int v36 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_93:
    _os_log_impl(&dword_1830D4000, v29, v30, v36, block, 0x16u);
    goto LABEL_94;
  }
  if (a5)
  {
    if (*(unsigned char *)(v5 + 624)) {
      goto LABEL_50;
    }
    if ((*(unsigned char *)(v5 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v40 = __nwlog_obj();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)block = 136446722;
          *(void *)&block[4] = "nw_http_security_process_response";
          *(_WORD *)&block[12] = 2082;
          *(void *)&block[14] = v5 + 114;
          *(_WORD *)&block[22] = 2080;
          uint64_t v88 = " ";
          _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", block, 0x20u);
        }
      }
    }
    if (!*(void *)(v5 + 560) || !*(void *)(v5 + 576) || nw_http_metadata_get_type(a3) == 3) {
      goto LABEL_50;
    }
    uint64_t v80 = 0;
    BOOL v81 = &v80;
    uint64_t v82 = 0x3802000000;
    uint64_t v83 = __Block_byref_object_copy__28791;
    os_log_type_t v84 = __Block_byref_object_dispose__28792;
    id v85 = nw_http_metadata_copy_response(a3);
    v86 |= 1u;
    os_log_type_t v8 = (void *)v81[5];
    if (v8)
    {
      id v9 = v8;
      int have_field_with_name = _nw_http_fields_have_field_with_name((uint64_t)v9, (unint64_t)"Strict-Transport-Security");

      if (!have_field_with_name)
      {
LABEL_34:
        BOOL v17 = nw_http_fields_copy_value_by_name((void *)v81[5], (uint64_t)"Alt-Svc");
        if (!v17) {
          goto LABEL_47;
        }
        uint64_t v18 = (const char *)v17;
        if (*(void *)(v5 + 592))
        {
          uint64_t remote_endpoint = (void *)nw_protocol_get_remote_endpoint(v5);
          if (remote_endpoint) {
            uint64_t v20 = os_retain(remote_endpoint);
          }
          else {
            uint64_t v20 = 0;
          }
          hostname = nw_endpoint_get_hostname(v20);
          unsigned int port = nw_endpoint_get_port(v20);
          parameters = (void *)nw_protocol_get_parameters(v5);
          main_document_nw_endpoint_t url = nw_parameters_get_main_document_url(parameters);
          *(void *)BOOL v60 = 0;
          long long v61 = v60;
          uint64_t v62 = 0x2000000000;
          __int16 v63 = 0;
          char v25 = (atomic_uchar *)nw_protocol_copy_info(*(void *)(v5 + 32), 255);
          *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
          uint64_t v74 = 0x40000000;
          uint64_t v75 = (uint64_t)___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_31;
          uint64_t v76 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E523F0E0;
          BOOL v77 = v60;
          nw_array_apply(v25, (uint64_t)type);
          uint64_t v26 = (void *)*((void *)v61 + 3);
          if (v26) {
            nw_http_alt_svc_parse_and_set(*(void **)(v5 + 592), hostname, port, v18, main_document_url, v26);
          }
          if (v25) {
            os_release(v25);
          }
          _Block_object_dispose(v60, 8);
          if (v20) {
            os_release(v20);
          }
        }
        int v27 = (char *)v18;
        goto LABEL_46;
      }
      BOOL v11 = (void *)nw_protocol_get_parameters(v5);
      if (nw_parameters_is_third_party_web_content(v11)) {
        goto LABEL_47;
      }
      uint64_t v12 = (atomic_uchar *)nw_protocol_copy_info(*(void *)(v5 + 32), 255);
      *(void *)os_log_type_t type = 0;
      uint64_t v74 = (uint64_t)type;
      uint64_t v75 = 0x3802000000;
      uint64_t v76 = __Block_byref_object_copy__14_28798;
      BOOL v77 = (os_log_type_t *)__Block_byref_object_dispose__15_28799;
      BOOL v78 = 0;
      v79 |= 1u;
      v72[0] = MEMORY[0x1E4F143A8];
      v72[1] = 0x40000000;
      v72[2] = ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke;
      v72[3] = &unk_1E523F020;
      v72[4] = type;
      nw_array_apply(v12, (uint64_t)v72);
      if (!*(void *)(v74 + 40)) {
        goto LABEL_27;
      }
      BOOL v13 = nw_parameters_copy_protocol_options_legacy(v11, (nw_protocol *)v5);
      if (v13)
      {
        uint64_t v14 = v13;
        v67[0] = MEMORY[0x1E4F143A8];
        v67[1] = 0x40000000;
        os_log_type_t v68 = ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_18;
        int v69 = &unk_1E523F068;
        v70 = &v80;
        uint64_t v71 = v5;
        if (nw_http_security_options_get_save_hsts_with_untrusted_root_cert(v13))
        {
          v68((uint64_t)v67);
        }
        else
        {
          *(void *)BOOL v60 = 0;
          long long v61 = v60;
          uint64_t v62 = 0x3802000000;
          __int16 v63 = __Block_byref_object_copy__22_28807;
          uint64_t v64 = __Block_byref_object_dispose__23_28808;
          os_log_type_t v65 = (void *)sec_protocol_metadata_copy_sec_trust();
          v66 |= 1u;
          if (*((void *)v61 + 5))
          {
            uint64_t v53 = 0;
            id v54 = &v53;
            uint64_t v55 = 0x3802000000;
            BOOL v56 = __Block_byref_object_copy__24;
            os_log_type_t v57 = __Block_byref_object_dispose__25;
            dispatch_object_t object = dispatch_queue_create("http_security", 0);
            v59 |= 1u;
            nw_queue_context_target_dispatch_queue(*(void **)(v5 + 608), (void *)v54[5]);
            nw_protocol_plugin_retry_begin_async(v5 + 344);
            BOOL v15 = v54[5];
            *(void *)block = MEMORY[0x1E4F143A8];
            *(void *)&block[8] = 0x40000000;
            *(void *)&block[16] = ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_26;
            uint64_t v88 = (const char *)&unk_1E523F0B8;
            os_log_type_t v89 = v67;
            os_log_type_t v90 = v60;
            os_log_type_t v91 = &v53;
            uint64_t v92 = v5;
            dispatch_async(v15, block);
            _Block_object_dispose(&v53, 8);
            if (v59)
            {
              if (object) {
                dispatch_release(object);
              }
            }
          }
          _Block_object_dispose(v60, 8);
          if ((v66 & 1) != 0 && v65) {
            os_release(v65);
          }
        }
        os_release(v14);
LABEL_27:
        int v16 = 1;
        goto LABEL_28;
      }
      __nwlog_obj();
      *(_DWORD *)block = 136446210;
      *(void *)&block[4] = "nw_http_security_process_response";
      __int16 v47 = (char *)_os_log_send_and_compose_impl();
      v60[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v53) = 0;
      if (__nwlog_fault(v47, v60, &v53))
      {
        if (v60[0] == OS_LOG_TYPE_FAULT)
        {
          BOOL v48 = __nwlog_obj();
          os_log_type_t v49 = v60[0];
          if (os_log_type_enabled(v48, v60[0]))
          {
            *(_DWORD *)block = 136446210;
            *(void *)&block[4] = "nw_http_security_process_response";
            int v50 = "%{public}s called with null protocol_options";
LABEL_150:
            _os_log_impl(&dword_1830D4000, v48, v49, v50, block, 0xCu);
          }
        }
        else if ((_BYTE)v53)
        {
          char v51 = (char *)__nw_create_backtrace_string();
          BOOL v48 = __nwlog_obj();
          os_log_type_t v49 = v60[0];
          BOOL v52 = os_log_type_enabled(v48, v60[0]);
          if (v51)
          {
            if (v52)
            {
              *(_DWORD *)block = 136446466;
              *(void *)&block[4] = "nw_http_security_process_response";
              *(_WORD *)&block[12] = 2082;
              *(void *)&block[14] = v51;
              _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s called with null protocol_options, dumping backtrace:%{public}s", block, 0x16u);
            }
            free(v51);
            goto LABEL_151;
          }
          if (v52)
          {
            *(_DWORD *)block = 136446210;
            *(void *)&block[4] = "nw_http_security_process_response";
            int v50 = "%{public}s called with null protocol_options, no backtrace";
            goto LABEL_150;
          }
        }
        else
        {
          BOOL v48 = __nwlog_obj();
          os_log_type_t v49 = v60[0];
          if (os_log_type_enabled(v48, v60[0]))
          {
            *(_DWORD *)block = 136446210;
            *(void *)&block[4] = "nw_http_security_process_response";
            int v50 = "%{public}s called with null protocol_options, backtrace limit exceeded";
            goto LABEL_150;
          }
        }
      }
LABEL_151:
      if (v47) {
        free(v47);
      }
      int v16 = 0;
LABEL_28:
      _Block_object_dispose(type, 8);
      if ((v79 & 1) != 0 && v78) {
        os_release(v78);
      }
      if (v12) {
        os_release(v12);
      }
      if (!v16) {
        goto LABEL_47;
      }
      goto LABEL_34;
    }
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(void *)&block[4] = "nw_http_security_process_response";
    int v41 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v60[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v41, type, v60))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v42 = __nwlog_obj();
        os_log_type_t v43 = type[0];
        if (os_log_type_enabled(v42, type[0]))
        {
          *(_DWORD *)block = 136446210;
          *(void *)&block[4] = "nw_http_security_process_response";
          BOOL v44 = "%{public}s called with null response";
LABEL_138:
          _os_log_impl(&dword_1830D4000, v42, v43, v44, block, 0xCu);
        }
      }
      else if (v60[0])
      {
        BOOL v45 = (char *)__nw_create_backtrace_string();
        uint64_t v42 = __nwlog_obj();
        os_log_type_t v43 = type[0];
        BOOL v46 = os_log_type_enabled(v42, type[0]);
        if (v45)
        {
          if (v46)
          {
            *(_DWORD *)block = 136446466;
            *(void *)&block[4] = "nw_http_security_process_response";
            *(_WORD *)&block[12] = 2082;
            *(void *)&block[14] = v45;
            _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null response, dumping backtrace:%{public}s", block, 0x16u);
          }
          free(v45);
          goto LABEL_139;
        }
        if (v46)
        {
          *(_DWORD *)block = 136446210;
          *(void *)&block[4] = "nw_http_security_process_response";
          BOOL v44 = "%{public}s called with null response, no backtrace";
          goto LABEL_138;
        }
      }
      else
      {
        uint64_t v42 = __nwlog_obj();
        os_log_type_t v43 = type[0];
        if (os_log_type_enabled(v42, type[0]))
        {
          *(_DWORD *)block = 136446210;
          *(void *)&block[4] = "nw_http_security_process_response";
          BOOL v44 = "%{public}s called with null response, backtrace limit exceeded";
          goto LABEL_138;
        }
      }
    }
LABEL_139:
    if (!v41)
    {
LABEL_47:
      _Block_object_dispose(&v80, 8);
      if (v86)
      {
        if (v85) {
          os_release(v85);
        }
      }
LABEL_50:
      (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
      return;
    }
    int v27 = (char *)v41;
LABEL_46:
    free(v27);
    goto LABEL_47;
  }
  __nwlog_obj();
  *(_DWORD *)block = 136446210;
  *(void *)&block[4] = "operator()";
  nw_protocol_options_t v28 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(v80) = 16;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v28, &v80, type)) {
    goto LABEL_119;
  }
  if (v80 == 17)
  {
    BOOL v29 = __nwlog_obj();
    os_log_type_t v30 = v80;
    if (!os_log_type_enabled(v29, (os_log_type_t)v80)) {
      goto LABEL_119;
    }
    *(_DWORD *)block = 136446210;
    *(void *)&block[4] = "operator()";
    sec_protocol_options_t v31 = "%{public}s called with null completion";
    goto LABEL_118;
  }
  if (type[0] == OS_LOG_TYPE_DEFAULT)
  {
    BOOL v29 = __nwlog_obj();
    os_log_type_t v30 = v80;
    if (!os_log_type_enabled(v29, (os_log_type_t)v80)) {
      goto LABEL_119;
    }
    *(_DWORD *)block = 136446210;
    *(void *)&block[4] = "operator()";
    sec_protocol_options_t v31 = "%{public}s called with null completion, backtrace limit exceeded";
    goto LABEL_118;
  }
  char v34 = (char *)__nw_create_backtrace_string();
  BOOL v29 = __nwlog_obj();
  os_log_type_t v30 = v80;
  BOOL v39 = os_log_type_enabled(v29, (os_log_type_t)v80);
  if (!v34)
  {
    if (!v39) {
      goto LABEL_119;
    }
    *(_DWORD *)block = 136446210;
    *(void *)&block[4] = "operator()";
    sec_protocol_options_t v31 = "%{public}s called with null completion, no backtrace";
    goto LABEL_118;
  }
  if (v39)
  {
    *(_DWORD *)block = 136446466;
    *(void *)&block[4] = "operator()";
    *(_WORD *)&block[12] = 2082;
    *(void *)&block[14] = v34;
    int v36 = "%{public}s called with null completion, dumping backtrace:%{public}s";
    goto LABEL_93;
  }
LABEL_94:
  free(v34);
  if (v28) {
LABEL_120:
  }
    free(v28);
}

uint64_t __Block_byref_object_copy__28791(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__28792(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t __Block_byref_object_copy__14_28798(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__15_28799(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke(uint64_t a1, int a2, nw_protocol_metadata_t metadata)
{
  BOOL is_tls = nw_protocol_metadata_is_tls(metadata);
  uint64_t v6 = metadata;
  sec_protocol_metadata_t v7 = v6;
  if (!is_tls)
  {
    if (nw_protocol_metadata_is_quic_connection(v6))
    {
    }
    else
    {
      BOOL is_quic_stream = nw_protocol_metadata_is_quic_stream(v7);

      if (!is_quic_stream) {
        return 1;
      }
    }
    sec_protocol_metadata_t v7 = nw_quic_copy_sec_protocol_metadata(v7);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v11 = (char *)(v9 + 48);
  char v10 = *(unsigned char *)(v9 + 48);
  if (v10)
  {
    uint64_t v12 = *(void **)(v9 + 40);
    if (v12)
    {
      os_release(v12);
      char v10 = *v11;
    }
  }
  *(void *)(v9 + 40) = v7;
  uint64_t result = 0;
  *BOOL v11 = v10 | 1;
  return result;
}

void sub_183861150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_18(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_2;
  v3[3] = &__block_descriptor_tmp_20_28815;
  v3[4] = *(void *)(a1 + 40);
  return nw_http_fields_enumerate_by_name(v1, (unint64_t)"Strict-Transport-Security", v3);
}

uint64_t __Block_byref_object_copy__22_28807(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__23_28808(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (v2) {
      dispatch_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_26(void *a1)
{
  uint64_t v2 = sec_trust_copy_ref(*(sec_trust_t *)(*(void *)(a1[5] + 8) + 40));
  uint64_t v3 = *(NSObject **)(*(void *)(a1[6] + 8) + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_2_27;
  v5[3] = &unk_1E523F090;
  uint64_t v4 = a1[7];
  v5[4] = a1[4];
  v5[5] = v4;
  SecTrustEvaluateAsyncWithError(v2, v3, v5);
  if (v2) {
    os_release(v2);
  }
}

BOOL ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_31(uint64_t a1, int a2, nw_protocol_metadata_t metadata)
{
  BOOL is_tls = nw_protocol_metadata_is_tls(metadata);
  if (is_tls) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = metadata;
  }
  return !is_tls;
}

void ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_2_27(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a3) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  if (!nw_protocol_plugin_retry_end_async(*(void *)(a1 + 40) + 344))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if ((*(unsigned char *)(v4 + 198) & 1) == 0 && gLogDatapath)
    {
      uint64_t v5 = __nwlog_obj();
      BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
      uint64_t v4 = *(void *)(a1 + 40);
      if (v6)
      {
        int v7 = 136446722;
        os_log_type_t v8 = "nw_http_security_process_response_block_invoke_2";
        __int16 v9 = 2082;
        uint64_t v10 = v4 + 114;
        __int16 v11 = 2080;
        uint64_t v12 = " ";
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDeferred destroy when coming back from callout", (uint8_t *)&v7, 0x20u);
        uint64_t v4 = *(void *)(a1 + 40);
      }
    }
    nw_http_security_destroy(v4);
  }
}

uint64_t ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 560);
  int v7 = (id *)*(id *)(v5 + 576);
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_hsts_storage_parse_and_set";
    __int16 v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26)) {
      goto LABEL_43;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v29 = "nw_hsts_storage_parse_and_set";
          uint64_t v14 = "%{public}s called with null storage, backtrace limit exceeded";
          goto LABEL_40;
        }
        goto LABEL_42;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = (id)gLogObj;
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v29 = "nw_hsts_storage_parse_and_set";
          __int16 v30 = 2082;
          sec_protocol_options_t v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s called with null storage, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v11) {
          goto LABEL_5;
        }
LABEL_44:
        free(v11);
        goto LABEL_5;
      }
      if (!v19) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v29 = "nw_hsts_storage_parse_and_set";
      uint64_t v14 = "%{public}s called with null storage, no backtrace";
      goto LABEL_51;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v12 = (id)gLogObj;
    os_log_type_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_hsts_storage_parse_and_set";
    uint64_t v14 = "%{public}s called with null storage";
    goto LABEL_40;
  }
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_hsts_storage_parse_and_set";
    __int16 v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26)) {
      goto LABEL_43;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v29 = "nw_hsts_storage_parse_and_set";
          uint64_t v14 = "%{public}s called with null url, backtrace limit exceeded";
          goto LABEL_40;
        }
        goto LABEL_42;
      }
      uint64_t v20 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = (id)gLogObj;
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (v20)
      {
        if (!v21) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446466;
        BOOL v29 = "nw_hsts_storage_parse_and_set";
        __int16 v30 = 2082;
        sec_protocol_options_t v31 = v20;
        uint64_t v22 = "%{public}s called with null url, dumping backtrace:%{public}s";
        goto LABEL_31;
      }
      if (!v21) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v29 = "nw_hsts_storage_parse_and_set";
      uint64_t v14 = "%{public}s called with null url, no backtrace";
LABEL_51:
      id v24 = v12;
      os_log_type_t v25 = v18;
      goto LABEL_41;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v12 = (id)gLogObj;
    os_log_type_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_hsts_storage_parse_and_set";
    uint64_t v14 = "%{public}s called with null url";
LABEL_40:
    id v24 = v12;
    os_log_type_t v25 = v13;
LABEL_41:
    _os_log_impl(&dword_1830D4000, v24, v25, v14, buf, 0xCu);
    goto LABEL_42;
  }
  if (!a4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_hsts_storage_parse_and_set";
    __int16 v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_hsts_storage_parse_and_set";
        uint64_t v14 = "%{public}s called with null sts_header";
        goto LABEL_40;
      }
LABEL_42:

      goto LABEL_43;
    }
    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_hsts_storage_parse_and_set";
        uint64_t v14 = "%{public}s called with null sts_header, backtrace limit exceeded";
        goto LABEL_40;
      }
      goto LABEL_42;
    }
    uint64_t v20 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v12 = (id)gLogObj;
    os_log_type_t v18 = type;
    BOOL v23 = os_log_type_enabled(v12, type);
    if (v20)
    {
      if (!v23) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v29 = "nw_hsts_storage_parse_and_set";
      __int16 v30 = 2082;
      sec_protocol_options_t v31 = v20;
      uint64_t v22 = "%{public}s called with null sts_header, dumping backtrace:%{public}s";
LABEL_31:
      _os_log_impl(&dword_1830D4000, v12, v18, v22, buf, 0x16u);
LABEL_32:

      free(v20);
      if (!v11) {
        goto LABEL_5;
      }
      goto LABEL_44;
    }
    if (!v23) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_hsts_storage_parse_and_set";
    uint64_t v14 = "%{public}s called with null sts_header, no backtrace";
    goto LABEL_51;
  }
  os_log_type_t v8 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4, 0x201u);
  [v7[1] handleSTSHeader:v8 forURL:v6];

LABEL_5:
  return 0;
}

void ___ZL39nw_protocol_http_security_get_callbacksv_block_invoke()
{
  nw_protocol_http_security_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  qword_1E8F6A938 = (uint64_t)nw_protocol_common_replace_input_handler;
  qword_1E8F6A978 = (uint64_t)nw_protocol_common_get_input_frames;
  qword_1E8F6A980 = (uint64_t)nw_protocol_common_get_output_frames;
  qword_1E8F6A988 = (uint64_t)nw_protocol_common_finalize_output_frames;
  qword_1E8F6A998 = (uint64_t)nw_protocol_common_get_parameters;
  qword_1E8F6A9A0 = (uint64_t)nw_protocol_common_get_path;
  qword_1E8F6A9B0 = (uint64_t)nw_protocol_common_get_remote_endpoint;
  qword_1E8F6A9A8 = (uint64_t)nw_protocol_common_get_local_endpoint;
  qword_1E8F6A9F0 = (uint64_t)nw_protocol_common_get_output_local_endpoint;
  qword_1E8F6A9F8 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1E8F6A940 = (uint64_t)nw_protocol_common_connect;
  qword_1E8F6A950 = (uint64_t)nw_protocol_common_connected;
  qword_1E8F6A948 = (uint64_t)nw_protocol_common_disconnect;
  qword_1E8F6A958 = (uint64_t)nw_protocol_common_disconnected;
  qword_1E8F6A968 = (uint64_t)nw_protocol_common_input_available;
  qword_1E8F6A970 = (uint64_t)nw_protocol_common_output_available;
  qword_1E8F6A9E0 = (uint64_t)nw_protocol_common_input_finished;
  qword_1E8F6A9E8 = (uint64_t)nw_protocol_common_output_finished;
  qword_1E8F6AA30 = (uint64_t)nw_protocol_common_input_flush;
  qword_1E8F6A960 = (uint64_t)nw_protocol_common_error;
  qword_1E8F6AA28 = (uint64_t)nw_protocol_common_reset;
  qword_1E8F6AA20 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1E8F6AA08 = (uint64_t)nw_protocol_common_copy_info;
  qword_1E8F6A9D8 = (uint64_t)nw_protocol_common_supports_external_data;
  qword_1E8F6AA00 = (uint64_t)nw_protocol_common_waiting_for_output;
  qword_1E8F6A9B8 = (uint64_t)nw_protocol_common_register_notification;
  qword_1E8F6A9C0 = (uint64_t)nw_protocol_common_unregister_notification;
  qword_1E8F6A9C8 = (uint64_t)nw_protocol_common_notify;
  qword_1E8F6A9D0 = (uint64_t)nw_protocol_common_updated_path;
  qword_1E8F6A990 = (uint64_t)nw_protocol_common_link_state;
  qword_1E8F6A930 = (uint64_t)nw_protocol_http_security_remove_input_handler;
}

uint64_t nw_protocol_http_security_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((handle[198] & 1) == 0 && gLogDatapath)
      {
        uint64_t v12 = __nwlog_obj();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          BOOL v23 = "nw_protocol_http_security_remove_input_handler";
          __int16 v24 = 2082;
          os_log_type_t v25 = handle + 114;
          __int16 v26 = 2080;
          int v27 = " ";
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 0x40000000;
      v19[2] = ___ZL46nw_protocol_http_security_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v19[3] = &__block_descriptor_tmp_63_28835;
      v19[4] = handle;
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 0x40000000;
      void v17[2] = ___ZL46nw_protocol_http_security_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
      v17[3] = &__block_descriptor_tmp_64_28836;
      char v18 = a3;
      v17[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v19, (uint64_t)v17);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_http_security_remove_input_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &v21, &v20)) {
      goto LABEL_36;
    }
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = v21;
      if (os_log_type_enabled(v9, v21))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_http_security_remove_input_handler";
        __int16 v11 = "%{public}s called with null http_security";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v20)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = v21;
      if (os_log_type_enabled(v9, v21))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_http_security_remove_input_handler";
        __int16 v11 = "%{public}s called with null http_security, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v9 = __nwlog_obj();
    os_log_type_t v10 = v21;
    BOOL v16 = os_log_type_enabled(v9, v21);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_http_security_remove_input_handler";
        __int16 v11 = "%{public}s called with null http_security, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v23 = "nw_protocol_http_security_remove_input_handler";
      __int16 v24 = 2082;
      os_log_type_t v25 = backtrace_string;
      id v15 = "%{public}s called with null http_security, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v23 = "nw_protocol_http_security_remove_input_handler";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v8, &v21, &v20)) {
    goto LABEL_36;
  }
  if (v21 != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      __int16 v9 = __nwlog_obj();
      os_log_type_t v10 = v21;
      if (os_log_type_enabled(v9, v21))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_http_security_remove_input_handler";
        __int16 v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v9 = __nwlog_obj();
    os_log_type_t v10 = v21;
    BOOL v14 = os_log_type_enabled(v9, v21);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_http_security_remove_input_handler";
        __int16 v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v23 = "nw_protocol_http_security_remove_input_handler";
      __int16 v24 = 2082;
      os_log_type_t v25 = backtrace_string;
      id v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v9, v10, v15, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    goto LABEL_36;
  }
  __int16 v9 = __nwlog_obj();
  os_log_type_t v10 = v21;
  if (os_log_type_enabled(v9, v21))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_http_security_remove_input_handler";
    __int16 v11 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
  }
LABEL_36:
  if (v8) {
    free(v8);
  }
  return 0;
}

void ___ZL46nw_protocol_http_security_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136446210;
      os_log_type_t v10 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v9, 0xCu);
    }
  }
  nw_protocol_plugin_metadata_reset((uint64_t *)(v2 + 200));
  *(void *)(v2 + 328) = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(v3 + 464);
  if (v4)
  {
    uint64_t v5 = *(const void **)(v3 + 456);
    if (v5)
    {
      _Block_release(v5);
      char v4 = *(unsigned char *)(v3 + 464);
    }
  }
  *(void *)(v3 + 456) = 0;
  *(unsigned char *)(v3 + 464) = v4 | 1;
  char v6 = *(unsigned char *)(v3 + 512);
  if (v6)
  {
    int v7 = *(const void **)(v3 + 504);
    if (v7)
    {
      _Block_release(v7);
      char v6 = *(unsigned char *)(v3 + 512);
    }
  }
  *(void *)(v3 + 504) = 0;
  *(unsigned char *)(v3 + 512) = v6 | 1;
}

void ___ZL46nw_protocol_http_security_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    nw_http_security_destroy(*(void *)(a1 + 32));
  }
}

double __nw_protocol_http_security_identifier_block_invoke()
{
  strcpy((char *)nw_protocol_http_security_identifier::protocol_identifier, "http_security");
  *(void *)&double result = 0x100000005;
  qword_1E8F6A238 = 0x100000005;
  return result;
}

double __nw_protocol_oblivious_http_identifier_block_invoke()
{
  strcpy((char *)&nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier, "ohttp");
  *(void *)&double result = 0x100000004;
  qword_1E8F6B740 = 0x100000004;
  return result;
}

double __nw_protocol_oblivious_http_contexts_identifier_block_invoke()
{
  strcpy((char *)&nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier, "ohttp-contexts");
  *(void *)&double result = 0x200000004;
  qword_1E8F6B1E0 = 0x200000004;
  return result;
}

BOOL nw_protocol_oblivious_http_create(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_oblivious_http_create";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v19 = "nw_protocol_oblivious_http_create";
          uint64_t v11 = "%{public}s called with null parameters";
LABEL_31:
          _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v15 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v19 = "nw_protocol_oblivious_http_create";
            __int16 v20 = 2082;
            uint64_t v21 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_32;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v19 = "nw_protocol_oblivious_http_create";
          uint64_t v11 = "%{public}s called with null parameters, no backtrace";
          goto LABEL_31;
        }
      }
      else
      {
        int v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v19 = "nw_protocol_oblivious_http_create";
          uint64_t v11 = "%{public}s called with null parameters, backtrace limit exceeded";
          goto LABEL_31;
        }
      }
    }
LABEL_32:
    if (v8) {
      free(v8);
    }
    return 0;
  }
  uint64_t v5 = malloc_type_calloc(1uLL, 0x1B8uLL, 0xEAFB8F1AuLL);
  if (v5)
  {
LABEL_3:
    if (nw_protocol_oblivious_http_contexts_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_4_28848);
    }
    if (nw_protocols_are_equal(a1, &nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier))
    {
      if (nw_protocol_oblivious_http_contexts_identifier::onceToken[0] != -1) {
        dispatch_once(nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_4_28848);
      }
      char v6 = &nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier;
    }
    else
    {
      if (nw_protocol_oblivious_http_identifier::onceToken != -1) {
        dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28841);
      }
      char v6 = (uint64_t *)&nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier;
    }
    v5[2] = v6;
    if (nw_protocol_ohttp_get_callbacks(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_ohttp_get_callbacks(void)::onceToken, &__block_literal_global_8_28858);
    }
    v5[3] = &nw_protocol_ohttp_get_callbacks(void)::ohttp_protocol_callbacks;
    v5[41] = 0;
    v5[42] = v5 + 41;
    v5[9] = 0;
    v5[10] = v5 + 9;
    v5[11] = 0;
    v5[5] = v5;
    v5[12] = v5 + 11;
    v5[13] = 0;
    v5[14] = v5 + 13;
    return (BOOL)v5;
  }
  uint64_t v12 = __nwlog_obj();
  os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v19 = "strict_calloc";
  __int16 v20 = 2048;
  uint64_t v21 = 1;
  __int16 v22 = 2048;
  uint64_t v23 = 440;
  os_log_type_t v13 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v13);
  if (!result)
  {
    free(v13);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void ___ZL31nw_protocol_ohttp_get_callbacksv_block_invoke()
{
  qword_1E8F69540 = (uint64_t)nw_protocol_common_replace_input_handler;
  qword_1E8F695A0 = (uint64_t)nw_protocol_common_get_parameters;
  qword_1E8F695A8 = (uint64_t)nw_protocol_common_get_path;
  qword_1E8F695B8 = (uint64_t)nw_protocol_common_get_remote_endpoint;
  qword_1E8F695B0 = (uint64_t)nw_protocol_common_get_local_endpoint;
  qword_1E8F695F8 = (uint64_t)nw_protocol_common_get_output_local_endpoint;
  qword_1E8F69600 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1E8F695F0 = (uint64_t)nw_protocol_common_output_finished;
  qword_1E8F69638 = (uint64_t)nw_protocol_common_input_flush;
  qword_1E8F69630 = (uint64_t)nw_protocol_common_reset;
  qword_1E8F69628 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1E8F695E0 = (uint64_t)nw_protocol_common_supports_external_data;
  qword_1E8F69608 = (uint64_t)nw_protocol_common_waiting_for_output;
  qword_1E8F695C0 = (uint64_t)nw_protocol_common_register_notification;
  qword_1E8F695C8 = (uint64_t)nw_protocol_common_unregister_notification;
  qword_1E8F695D0 = (uint64_t)nw_protocol_common_notify;
  qword_1E8F695D8 = (uint64_t)nw_protocol_common_updated_path;
  qword_1E8F69598 = (uint64_t)nw_protocol_common_link_state;
  nw_protocol_ohttp_get_callbacks(void)::ohttp_protocol_callbacks = (uint64_t)nw_protocol_ohttp_add_input_handler;
  qword_1E8F69538 = (uint64_t)nw_protocol_ohttp_remove_input_handler;
  qword_1E8F69580 = (uint64_t)nw_protocol_ohttp_get_input_frames;
  qword_1E8F69570 = (uint64_t)nw_protocol_ohttp_input_available;
  qword_1E8F695E8 = (uint64_t)nw_protocol_ohttp_input_finished;
  qword_1E8F69588 = (uint64_t)nw_protocol_ohttp_get_output_frames;
  qword_1E8F69590 = (uint64_t)nw_protocol_ohttp_finalize_output_frames;
  qword_1E8F69578 = (uint64_t)nw_protocol_ohttp_output_available;
  qword_1E8F69610 = (uint64_t)nw_protocol_ohttp_copy_info;
  qword_1E8F69548 = (uint64_t)nw_protocol_ohttp_connect;
  qword_1E8F69558 = (uint64_t)nw_protocol_ohttp_connected;
  qword_1E8F69550 = (uint64_t)nw_protocol_ohttp_disconnect;
  qword_1E8F69560 = (uint64_t)nw_protocol_ohttp_disconnected;
  qword_1E8F69568 = (uint64_t)nw_protocol_ohttp_error;
}

void nw_protocol_ohttp_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_ohttp_error";
    int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v7, &v18, &v17)) {
      goto LABEL_34;
    }
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (!os_log_type_enabled(v8, v18)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "nw_protocol_ohttp_error";
      os_log_type_t v10 = "%{public}s called with null protocol";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v20 = "nw_protocol_ohttp_error";
          __int16 v21 = 2082;
          __int16 v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v7) {
          return;
        }
LABEL_35:
        free(v7);
        return;
      }
      if (!v12) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "nw_protocol_ohttp_error";
      os_log_type_t v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (!os_log_type_enabled(v8, v18)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "nw_protocol_ohttp_error";
      os_log_type_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_34;
  }
  handle = a1->handle;
  if (handle)
  {
    nw_protocol_error(a1->default_input_handler->flow_id, (uint64_t)a2);
    char v6 = (char *)*((void *)handle + 37);
    if (v6)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      v15[2] = ___ZL23nw_protocol_ohttp_errorP11nw_protocolS0_i_block_invoke;
      v15[3] = &__block_descriptor_tmp_46_28871;
      v15[4] = a2;
      int v16 = a3;
      nw_hash_table_apply(v6, (uint64_t)v15);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v20 = "nw_protocol_ohttp_error";
  int v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v7, &v18, &v17)) {
    goto LABEL_34;
  }
  if (v18 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = v18;
    if (!os_log_type_enabled(v8, v18)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_ohttp_error";
    os_log_type_t v10 = "%{public}s called with null ohttp";
    goto LABEL_33;
  }
  if (!v17)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = v18;
    if (!os_log_type_enabled(v8, v18)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_ohttp_error";
    os_log_type_t v10 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_33;
  }
  os_log_type_t v13 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v9 = v18;
  BOOL v14 = os_log_type_enabled(v8, v18);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_ohttp_error";
    os_log_type_t v10 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_33;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v20 = "nw_protocol_ohttp_error";
    __int16 v21 = 2082;
    __int16 v22 = v13;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7) {
    goto LABEL_35;
  }
}

uint64_t ___ZL23nw_protocol_ohttp_errorP11nw_protocolS0_i_block_invoke(uint64_t a1, uint64_t a2)
{
  dispatch_object_t object = (void *)nw_hash_node_get_object(a2);
  nw_protocol_error(object, *(void *)(a1 + 32));
  return 1;
}

void nw_protocol_ohttp_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v17 = "nw_protocol_ohttp_disconnected";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v5, &v15, &v14)) {
      goto LABEL_34;
    }
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = v15;
      if (!os_log_type_enabled(v6, v15)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v17 = "nw_protocol_ohttp_disconnected";
      os_log_type_t v8 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v6 = __nwlog_obj();
      os_log_type_t v7 = v15;
      BOOL v10 = os_log_type_enabled(v6, v15);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_protocol_ohttp_disconnected";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v5) {
          return;
        }
LABEL_35:
        free(v5);
        return;
      }
      if (!v10) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v17 = "nw_protocol_ohttp_disconnected";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = v15;
      if (!os_log_type_enabled(v6, v15)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v17 = "nw_protocol_ohttp_disconnected";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_34;
  }
  handle = a1->handle;
  if (handle)
  {
    nw_protocol_disconnected(a1->default_input_handler->flow_id, (uint64_t)a1);
    char v4 = (char *)*((void *)handle + 37);
    if (v4)
    {
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 0x40000000;
      v13[2] = ___ZL30nw_protocol_ohttp_disconnectedP11nw_protocolS0__block_invoke;
      v13[3] = &__block_descriptor_tmp_45_28883;
      v13[4] = a1;
      nw_hash_table_apply(v4, (uint64_t)v13);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_protocol_ohttp_disconnected";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v15 = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v5, &v15, &v14)) {
    goto LABEL_34;
  }
  if (v15 == OS_LOG_TYPE_FAULT)
  {
    char v6 = __nwlog_obj();
    os_log_type_t v7 = v15;
    if (!os_log_type_enabled(v6, v15)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v17 = "nw_protocol_ohttp_disconnected";
    os_log_type_t v8 = "%{public}s called with null ohttp";
    goto LABEL_33;
  }
  if (!v14)
  {
    char v6 = __nwlog_obj();
    os_log_type_t v7 = v15;
    if (!os_log_type_enabled(v6, v15)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v17 = "nw_protocol_ohttp_disconnected";
    os_log_type_t v8 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_33;
  }
  uint64_t v11 = (char *)__nw_create_backtrace_string();
  char v6 = __nwlog_obj();
  os_log_type_t v7 = v15;
  BOOL v12 = os_log_type_enabled(v6, v15);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v17 = "nw_protocol_ohttp_disconnected";
    os_log_type_t v8 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_33;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    char v17 = "nw_protocol_ohttp_disconnected";
    __int16 v18 = 2082;
    BOOL v19 = v11;
    _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5) {
    goto LABEL_35;
  }
}

uint64_t ___ZL30nw_protocol_ohttp_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  dispatch_object_t object = (void *)nw_hash_node_get_object(a2);
  nw_protocol_disconnected(object, *(void *)(a1 + 32));
  return 1;
}

void nw_protocol_ohttp_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_protocol_ohttp_disconnect";
    char v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_protocol_ohttp_disconnect";
      os_log_type_t v7 = "%{public}s called with null protocol";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_protocol_ohttp_disconnect";
          __int16 v16 = 2082;
          char v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v4) {
          return;
        }
LABEL_37:
        free(v4);
        return;
      }
      if (!v9) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_protocol_ohttp_disconnect";
      os_log_type_t v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_protocol_ohttp_disconnect";
      os_log_type_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_36;
  }
  if (a1->handle)
  {
    if (a1->default_input_handler == a2)
    {
      output_handler = a1->output_handler;
      nw_protocol_disconnect(output_handler, (uint64_t)a1);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_protocol_ohttp_disconnect";
  char v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_36;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_protocol_ohttp_disconnect";
    os_log_type_t v7 = "%{public}s called with null ohttp";
    goto LABEL_35;
  }
  if (!v12)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_protocol_ohttp_disconnect";
    os_log_type_t v7 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_35;
  }
  BOOL v10 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_protocol_ohttp_disconnect";
    os_log_type_t v7 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_35;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v15 = "nw_protocol_ohttp_disconnect";
    __int16 v16 = 2082;
    char v17 = v10;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v4) {
    goto LABEL_37;
  }
}

void nw_protocol_ohttp_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_protocol_ohttp_connected";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v16 = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, &v16, &v15)) {
      goto LABEL_36;
    }
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = v16;
      if (!os_log_type_enabled(v7, v16)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_protocol_ohttp_connected";
      BOOL v9 = "%{public}s called with null protocol";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = v16;
      BOOL v11 = os_log_type_enabled(v7, v16);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_protocol_ohttp_connected";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v6) {
          return;
        }
LABEL_37:
        free(v6);
        return;
      }
      if (!v11) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_protocol_ohttp_connected";
      BOOL v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = v16;
      if (!os_log_type_enabled(v7, v16)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_protocol_ohttp_connected";
      BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_36;
  }
  handle = a1->handle;
  if (handle)
  {
    *((unsigned char *)handle + 348) |= 8u;
    nw_protocol_connected(a1->default_input_handler->flow_id, (uint64_t)a2);
    if (a1->output_handler == a2) {
      nw_protocol_connected(a1->default_input_handler->flow_id, (uint64_t)a1);
    }
    uint64_t v5 = (char *)*((void *)handle + 37);
    if (v5)
    {
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 0x40000000;
      v14[2] = ___ZL27nw_protocol_ohttp_connectedP11nw_protocolS0__block_invoke;
      v14[3] = &__block_descriptor_tmp_44_28904;
      v14[4] = a1;
      nw_hash_table_apply(v5, (uint64_t)v14);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_protocol_ohttp_connected";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v6, &v16, &v15)) {
    goto LABEL_36;
  }
  if (v16 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = v16;
    if (!os_log_type_enabled(v7, v16)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_protocol_ohttp_connected";
    BOOL v9 = "%{public}s called with null ohttp";
    goto LABEL_35;
  }
  if (!v15)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = v16;
    if (!os_log_type_enabled(v7, v16)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_protocol_ohttp_connected";
    BOOL v9 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_35;
  }
  char v12 = (char *)__nw_create_backtrace_string();
  os_log_type_t v7 = __nwlog_obj();
  os_log_type_t v8 = v16;
  BOOL v13 = os_log_type_enabled(v7, v16);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_protocol_ohttp_connected";
    BOOL v9 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_35;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v18 = "nw_protocol_ohttp_connected";
    __int16 v19 = 2082;
    uint64_t v20 = v12;
    _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v12);
  if (v6) {
    goto LABEL_37;
  }
}

uint64_t ___ZL27nw_protocol_ohttp_connectedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  dispatch_object_t object = (void *)nw_hash_node_get_object(a2);
  nw_protocol_connected(object, *(void *)(a1 + 32));
  return 1;
}

uint64_t nw_protocol_ohttp_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((handle[348] & 8) != 0)
      {
        nw_protocol_connected(a2, (uint64_t)a1);
        return 1;
      }
      else
      {
        output_handler = a1->output_handler;
        return nw_protocol_connect((uint64_t)output_handler, (uint64_t)a1);
      }
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v17 = "nw_protocol_ohttp_connect";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_protocol_ohttp_connect";
        BOOL v9 = "%{public}s called with null ohttp";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v14)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_protocol_ohttp_connect";
        BOOL v9 = "%{public}s called with null ohttp, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_protocol_ohttp_connect";
        BOOL v9 = "%{public}s called with null ohttp, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      char v17 = "nw_protocol_ohttp_connect";
      __int16 v18 = 2082;
      __int16 v19 = backtrace_string;
      char v12 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_protocol_ohttp_connect";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v6, &type, &v14)) {
    goto LABEL_36;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v14)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_protocol_ohttp_connect";
        BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_protocol_ohttp_connect";
        BOOL v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      char v17 = "nw_protocol_ohttp_connect";
      __int16 v18 = 2082;
      __int16 v19 = backtrace_string;
      char v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v7, v8, v12, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    goto LABEL_36;
  }
  os_log_type_t v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    char v17 = "nw_protocol_ohttp_connect";
    BOOL v9 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
  }
LABEL_36:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t nw_protocol_ohttp_copy_info(uint64_t a1, int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_ohttp_copy_info";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_ohttp_copy_info";
      os_log_type_t v6 = "%{public}s called with null protocol";
      goto LABEL_35;
    }
    if (!v11)
    {
      char v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_ohttp_copy_info";
      os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (!v8) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_ohttp_copy_info";
      os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_35;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      char v14 = "nw_protocol_ohttp_copy_info";
      __int16 v15 = 2082;
      os_log_type_t v16 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_36:
    if (!v3) {
      return 0;
    }
LABEL_37:
    free(v3);
    return 0;
  }
  if (!*(void *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_ohttp_copy_info";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_ohttp_copy_info";
      os_log_type_t v6 = "%{public}s called with null ohttp";
      goto LABEL_35;
    }
    if (!v11)
    {
      char v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_ohttp_copy_info";
      os_log_type_t v6 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_35;
    }
    BOOL v9 = (char *)__nw_create_backtrace_string();
    char v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (v9)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        char v14 = "nw_protocol_ohttp_copy_info";
        __int16 v15 = 2082;
        os_log_type_t v16 = v9;
        _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v9);
      if (!v3) {
        return 0;
      }
      goto LABEL_37;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_ohttp_copy_info";
      os_log_type_t v6 = "%{public}s called with null ohttp, no backtrace";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      goto LABEL_36;
    }
    goto LABEL_36;
  }
  if (a2 == 253) {
    return 0;
  }

  return nw_protocol_common_copy_info(a1, a2);
}

void nw_protocol_ohttp_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_ohttp_output_available";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_ohttp_output_available";
      os_log_type_t v6 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          char v14 = "nw_protocol_ohttp_output_available";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v3) {
          return;
        }
        goto LABEL_35;
      }
      if (!v8) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_ohttp_output_available";
      os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      char v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_ohttp_output_available";
      os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_34;
  }
  handle = a1->handle;
  if (handle)
  {
    nw_protocol_ohttp_send_request((uint64_t)handle);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_protocol_ohttp_output_available";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_34;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_ohttp_output_available";
    os_log_type_t v6 = "%{public}s called with null ohttp";
    goto LABEL_33;
  }
  if (!v11)
  {
    char v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_ohttp_output_available";
    os_log_type_t v6 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_33;
  }
  BOOL v9 = (char *)__nw_create_backtrace_string();
  char v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  BOOL v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_ohttp_output_available";
    os_log_type_t v6 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_33;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    char v14 = "nw_protocol_ohttp_output_available";
    __int16 v15 = 2082;
    os_log_type_t v16 = v9;
    _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v9);
  if (v3) {
LABEL_35:
  }
    free(v3);
}

void nw_protocol_ohttp_send_request(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 320);
  if (!v2)
  {
LABEL_6:
    if (*(_DWORD *)(a1 + 288) != 1 || (nw_protocol_ohttp_context_send_request(a1, a1 + 64), !*(void *)(a1 + 320)))
    {
      os_log_type_t v5 = *(char **)(a1 + 296);
      if (v5)
      {
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 0x40000000;
        v7[2] = ___ZL30nw_protocol_ohttp_send_requestP17nw_protocol_ohttp_block_invoke;
        v7[3] = &__block_descriptor_tmp_40_28937;
        v7[4] = a1;
        nw_hash_table_apply(v5, (uint64_t)v7);
      }
    }
    return;
  }
  if (a1 + 64 == v2)
  {
    if (*(void *)(a1 + 48))
    {
LABEL_5:
      nw_protocol_ohttp_context_send_request(a1, *(void *)(a1 + 320));
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = *(char **)(a1 + 296);
    if (v3)
    {
      uint64_t v8 = 0;
      BOOL v9 = &v8;
      uint64_t v10 = 0x2000000000;
      uint64_t v11 = 0;
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL42nw_protocol_ohttp_get_protocol_for_contextP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke;
      BOOL v13 = (const char *)&unk_1E523F3C0;
      char v14 = &v8;
      uint64_t v15 = v2;
      nw_hash_table_apply(v3, (uint64_t)buf);
      uint64_t v4 = v9[3];
      _Block_object_dispose(&v8, 8);
      if (v4) {
        goto LABEL_5;
      }
    }
  }
  if ((*(unsigned char *)(a1 + 348) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_send_request";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 349;
      *(_WORD *)&buf[22] = 2080;
      BOOL v13 = " ";
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sPending request context is no longer valid", buf, 0x20u);
    }
  }
  nw_ohttp_mark_failed_with_error(a1, 22);
}

void nw_ohttp_mark_failed_with_error(uint64_t a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 344) != 2)
  {
    if ((*(unsigned char *)(a1 + 348) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v17 = "nw_ohttp_mark_failed_with_error";
        __int16 v18 = 2082;
        uint64_t v19 = a1 + 349;
        __int16 v20 = 2080;
        uint64_t v21 = " ";
        __int16 v22 = 1024;
        int v23 = a2;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sFailing connection with error %{darwin.errno}d", buf, 0x26u);
      }
    }
    *(_DWORD *)(a1 + 344) = 2;
    *(_DWORD *)(a1 + 288) = 6;
    os_log_type_t v5 = *(char **)(a1 + 296);
    if (v5)
    {
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 0x40000000;
      v14[2] = ___ZL31nw_ohttp_mark_failed_with_errorP17nw_protocol_ohttpi_block_invoke;
      v14[3] = &__block_descriptor_tmp_30_29212;
      v14[4] = a1;
      int v15 = a2;
      nw_hash_table_apply(v5, (uint64_t)v14);
    }
    path = (void *)nw_protocol_get_path(a1);
    if (path)
    {
      os_log_type_t v7 = path;
      id v8 = v7[2];

      if (v8)
      {
        memset(uu, 0, 16);
        BOOL v9 = (id *)v8;
        id v10 = v9[23];

        if (v10)
        {
          uint64_t v11 = (char *)v10;
          *(_OWORD *)long long uu = *(_OWORD *)(v11 + 56);

          os_release(v11);
        }
        os_release(v9);
        if (uuid_is_null(uu))
        {
          if ((*(unsigned char *)(a1 + 348) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v12 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              uint64_t v17 = "nw_ohttp_report_error_to_proxy_agent";
              __int16 v18 = 2082;
              uint64_t v19 = a1 + 349;
              __int16 v20 = 2080;
              uint64_t v21 = " ";
              __int16 v22 = 1024;
              int v23 = a2;
              _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sCannot report error %d, no proxy agent", buf, 0x26u);
            }
          }
        }
        else
        {
          if ((*(unsigned char *)(a1 + 348) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v13 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136447490;
              uint64_t v17 = "nw_ohttp_report_error_to_proxy_agent";
              __int16 v18 = 2082;
              uint64_t v19 = a1 + 349;
              __int16 v20 = 2080;
              uint64_t v21 = " ";
              __int16 v22 = 1024;
              int v23 = a2;
              __int16 v24 = 1042;
              int v25 = 16;
              __int16 v26 = 2098;
              int v27 = uu;
              _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sReporting error %d to proxy agent %{public, uuid_t}.16P", buf, 0x36u);
            }
          }
          nw_path_report_error_to_agent(v7, uu, a2);
        }
      }
    }
    nw_protocol_error(*(void **)(a1 + 48), a1);
    nw_protocol_disconnected(*(void **)(a1 + 48), a1);
    nw_protocol_disconnect(*(void **)(a1 + 32), a1);
  }
}

void nw_protocol_ohttp_context_send_request(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v51 = "nw_protocol_ohttp_context_send_request";
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v46) = 16;
    LOBYTE(v42) = 0;
    if (!__nwlog_fault(v18, &v46, &v42)) {
      goto LABEL_71;
    }
    if (v46 == 17)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = v46;
      if (!os_log_type_enabled(v19, (os_log_type_t)v46)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446210;
      char v51 = "nw_protocol_ohttp_context_send_request";
      uint64_t v21 = "%{public}s called with null ohttp";
    }
    else if ((_BYTE)v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = v46;
      BOOL v23 = os_log_type_enabled(v19, (os_log_type_t)v46);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          char v51 = "nw_protocol_ohttp_context_send_request";
          __int16 v52 = 2082;
          uint64_t v53 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_71;
      }
      if (!v23)
      {
LABEL_71:
        if (v18) {
          free(v18);
        }
        return;
      }
      *(_DWORD *)buf = 136446210;
      char v51 = "nw_protocol_ohttp_context_send_request";
      uint64_t v21 = "%{public}s called with null ohttp, no backtrace";
    }
    else
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = v46;
      if (!os_log_type_enabled(v19, (os_log_type_t)v46)) {
        goto LABEL_71;
      }
      *(_DWORD *)buf = 136446210;
      char v51 = "nw_protocol_ohttp_context_send_request";
      uint64_t v21 = "%{public}s called with null ohttp, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0xCu);
    goto LABEL_71;
  }
  uint64_t v4 = *(void *)(a1 + 320);
  if (v4) {
    BOOL v5 = v4 == a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (*(void *)(a2 + 136) == *(void *)(a2 + 144))
    {
      if ((*(unsigned char *)(a1 + 348) & 1) == 0)
      {
        if (gLogDatapath)
        {
          os_log_type_t v6 = __nwlog_obj();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            char v51 = "nw_protocol_ohttp_context_send_request";
            __int16 v52 = 2082;
            uint64_t v53 = (char *)(a1 + 349);
            __int16 v54 = 2080;
            uint64_t v55 = " ";
            os_log_type_t v7 = "%{public}s %{public}s%signoring write, no pending bytes";
LABEL_16:
            _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, v7, buf, 0x20u);
          }
        }
      }
    }
    else
    {
      uint64_t v46 = 0;
      __int16 v47 = &v46;
      uint64_t v27 = a1 + 349;
      uint64_t v48 = 0x2000000000;
      char v49 = 0;
      uint64_t v42 = 0;
      os_log_type_t v43 = &v42;
      uint64_t v44 = 0x2000000000;
      char v45 = 0;
      while (1)
      {
        if (*(_DWORD *)(a2 + 224) != 1)
        {
          if ((*(unsigned char *)(a1 + 348) & 1) == 0)
          {
            if (gLogDatapath)
            {
              __int16 v24 = __nwlog_obj();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
              {
                int v25 = *(_DWORD *)(a2 + 224);
                *(_DWORD *)buf = 136446978;
                char v51 = "nw_protocol_ohttp_context_send_request";
                __int16 v52 = 2082;
                uint64_t v53 = (char *)v27;
                __int16 v54 = 2080;
                uint64_t v55 = " ";
                __int16 v56 = 1024;
                int v57 = v25;
                _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sskipping, state %u", buf, 0x26u);
              }
            }
          }
          goto LABEL_55;
        }
        v40[0] = 0;
        v40[1] = v40;
        v40[2] = 0x2000000000;
        int v8 = *(_DWORD *)(a2 + 136);
        int v9 = *(_DWORD *)(a2 + 144);
        int v41 = v8 - v9;
        if (v8 == v9) {
          break;
        }
        v39[0] = 0;
        v39[1] = v39;
        int output_frames = nw_protocol_get_output_frames(*(void *)(a1 + 32), a1, 1, (v8 - v9), 0xFFFFFFFFLL, (uint64_t)v39);
        if ((*(unsigned char *)(a1 + 348) & 1) == 0)
        {
          if (gLogDatapath)
          {
            log = __nwlog_obj();
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              char v51 = "nw_protocol_ohttp_context_send_request";
              __int16 v52 = 2082;
              uint64_t v53 = (char *)v27;
              __int16 v54 = 2080;
              uint64_t v55 = " ";
              __int16 v56 = 1024;
              int v57 = output_frames;
              _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sGot %u output frames", buf, 0x26u);
            }
          }
        }
        if (!output_frames) {
          break;
        }
        v29[0] = MEMORY[0x1E4F143A8];
        v29[1] = 0x40000000;
        __int16 v30 = (uint64_t (*)(void *))___ZL38nw_protocol_ohttp_context_send_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke;
        sec_protocol_options_t v31 = &unk_1E523F528;
        uint64_t v32 = &v46;
        BOOL v33 = v40;
        uint64_t v36 = a1;
        uint64_t v37 = a2;
        uint64_t v38 = a1;
        char v34 = &v42;
        BOOL v35 = v39;
        uint64_t v11 = v39[0];
        do
        {
          if (!v11) {
            break;
          }
          uint64_t v12 = *(void *)(v11 + 32);
          char v13 = v30(v29);
          uint64_t v11 = v12;
        }
        while ((v13 & 1) != 0);
        nw_protocol_finalize_output_frames(*(void *)(a1 + 32), (uint64_t)v39);
        if (*((unsigned char *)v43 + 24) && !*(_DWORD *)(a1 + 344))
        {
          if ((*(unsigned char *)(a1 + 348) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v14 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446722;
              char v51 = "nw_protocol_ohttp_context_send_request";
              __int16 v52 = 2082;
              uint64_t v53 = (char *)v27;
              __int16 v54 = 2080;
              uint64_t v55 = " ";
              _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSent outer request", buf, 0x20u);
            }
          }
          *(_DWORD *)(a1 + 344) = 1;
        }
        _Block_object_dispose(v40, 8);
        if (*((unsigned char *)v47 + 24)) {
          goto LABEL_36;
        }
      }
      _Block_object_dispose(v40, 8);
LABEL_36:
      if (*(void *)(a2 + 136) == *(void *)(a2 + 144))
      {
        *(void *)(a2 + 136) = 0;
        *(void *)(a2 + 144) = 0;
        int v15 = *(void **)(a2 + 128);
        if (v15)
        {
          free(v15);
          *(void *)(a2 + 128) = 0;
        }
      }
      if (*((unsigned char *)v47 + 24))
      {
        if ((*(unsigned char *)(a1 + 348) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v16 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            char v51 = "nw_protocol_ohttp_context_send_request";
            __int16 v52 = 2082;
            uint64_t v53 = (char *)v27;
            __int16 v54 = 2080;
            uint64_t v55 = " ";
            _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSent complete request", buf, 0x20u);
          }
        }
        *(void *)(a1 + 320) = 0;
        if ((*(unsigned char *)(a2 + 228) & 0x82) == 2) {
          *(_DWORD *)(a2 + 224) = 2;
        }
      }
      else
      {
        if (!*((unsigned char *)v43 + 24)) {
          goto LABEL_55;
        }
        *(void *)(a1 + 320) = a2;
      }
      nw_protocol_ohttp_read_response(a1);
      if (*((unsigned char *)v43 + 24))
      {
        if (*(void *)a2)
        {
          if ((*(unsigned char *)(a2 + 228) & 1) == 0 && (*(unsigned char *)(a1 + 348) & 0x20) == 0)
          {
            *(unsigned char *)(a1 + 348) |= 0x20u;
            uint64_t v17 = *(char **)(a1 + 296);
            if (v17)
            {
              v28[0] = MEMORY[0x1E4F143A8];
              v28[1] = 0x40000000;
              v28[2] = ___ZL38nw_protocol_ohttp_context_send_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_42;
              v28[3] = &__block_descriptor_tmp_43;
              v28[4] = a1;
              nw_hash_table_apply(v17, (uint64_t)v28);
            }
          }
        }
      }
LABEL_55:
      _Block_object_dispose(&v42, 8);
      _Block_object_dispose(&v46, 8);
    }
  }
  else if ((*(unsigned char *)(a1 + 348) & 1) == 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        char v51 = "nw_protocol_ohttp_context_send_request";
        __int16 v52 = 2082;
        uint64_t v53 = (char *)(a1 + 349);
        __int16 v54 = 2080;
        uint64_t v55 = " ";
        os_log_type_t v7 = "%{public}s %{public}s%signoring write, pending finishing another context";
        goto LABEL_16;
      }
    }
  }
}

BOOL ___ZL30nw_protocol_ohttp_send_requestP17nw_protocol_ohttp_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  BOOL result = 1;
  if (*(_DWORD *)(extra + 224) == 1)
  {
    nw_protocol_ohttp_context_send_request(*(void *)(a1 + 32), extra);
    if (*(void *)(*(void *)(a1 + 32) + 320)) {
      return 0;
    }
  }
  return result;
}

uint64_t ___ZL38nw_protocol_ohttp_context_send_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    nw_frame_finalize(a2);
    uint64_t v4 = *(void *)(a2 + 32);
    BOOL v5 = *(void **)(a2 + 40);
    if (v4)
    {
      *(void *)(v4 + 40) = v5;
      BOOL v5 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(a1[7] + 8) = v5;
    }
    void *v5 = v4;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    uint64_t v13 = a1[8];
    if (!v13 || (*(unsigned char *)(v13 + 348) & 1) == 0)
    {
      if (gLogDatapath)
      {
        char v14 = __nwlog_obj();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v15 = a1[8];
          uint64_t v16 = "";
          BOOL v17 = v15 == 0;
          if (v15) {
            __int16 v18 = (const char *)(v15 + 349);
          }
          else {
            __int16 v18 = "";
          }
          unsigned int v20 = 136446722;
          uint64_t v21 = "nw_protocol_ohttp_context_send_request_block_invoke";
          if (!v17) {
            uint64_t v16 = " ";
          }
          __int16 v22 = 2082;
          BOOL v23 = v18;
          __int16 v24 = 2080;
          int v25 = v16;
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDropping unneeded output frame", (uint8_t *)&v20, 0x20u);
        }
      }
    }
  }
  else
  {
    unsigned int v20 = 0;
    os_log_type_t v6 = (void *)nw_frame_unclaimed_bytes(a2, &v20);
    unsigned int v7 = *(_DWORD *)(*(void *)(a1[5] + 8) + 24);
    if (v20 >= v7) {
      size_t v8 = v7;
    }
    else {
      size_t v8 = v20;
    }
    memcpy(v6, (const void *)(*(void *)(a1[9] + 128) + *(void *)(a1[9] + 144)), v8);
    nw_frame_claim(a2, v9, v8, 0);
    *(void *)(a1[9] + 144) += v8;
    *(_DWORD *)(*(void *)(a1[5] + 8) + 24) -= v8;
    nw_frame_collapse(a2);
    nw_frame_unclaim(a2, v10, v8, 0);
    BOOL v11 = 0;
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = *(_DWORD *)(*(void *)(a1[5] + 8) + 24) == 0;
    uint64_t v12 = a1[8];
    if ((*(unsigned char *)(v12 + 348) & 4) == 0)
    {
      if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)) {
        BOOL v11 = (*(unsigned char *)(a1[9] + 228) & 0x82) == 2;
      }
      else {
        BOOL v11 = 0;
      }
    }
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    nw_frame_set_metadata(a2, *(NSObject **)(v12 + 304), 0, v11);
  }
  return 1;
}

void nw_protocol_ohttp_read_response(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 349;
  while (*(_DWORD *)(a1 + 344) == 1)
  {
    v15[0] = 0;
    v15[1] = v15;
    int input_frames = nw_protocol_get_input_frames(*(void *)(a1 + 32), a1, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, (uint64_t)v15);
    if ((*(unsigned char *)(a1 + 348) & 1) == 0)
    {
      if (gLogDatapath)
      {
        log = __nwlog_obj();
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          BOOL v17 = "nw_protocol_ohttp_read_response";
          __int16 v18 = 2082;
          uint64_t v19 = v2;
          __int16 v20 = 2080;
          uint64_t v21 = " ";
          __int16 v22 = 1024;
          int v23 = input_frames;
          _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sGot %u input frames", buf, 0x26u);
        }
      }
    }
    if (input_frames)
    {
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 0x40000000;
      BOOL v11 = ___ZL31nw_protocol_ohttp_read_responseP17nw_protocol_ohttp_block_invoke;
      uint64_t v12 = &__block_descriptor_tmp_22_29072;
      uint64_t v13 = v15;
      uint64_t v14 = a1;
      uint64_t v4 = v15[0];
      do
      {
        if (!v4) {
          break;
        }
        uint64_t v5 = *(void *)(v4 + 32);
        char v6 = ((uint64_t (*)(void *))v11)(v10);
        uint64_t v4 = v5;
      }
      while ((v6 & 1) != 0);
      if ((*(unsigned char *)(a1 + 348) & 0x10) == 0) {
        continue;
      }
    }
    if (*(void *)(a1 + 312))
    {
      if ((*(unsigned char *)(a1 + 348) & 0x12) != 0) {
        nw_protocol_ohttp_process_response(a1);
      }
    }
    return;
  }
  if ((*(unsigned char *)(a1 + 348) & 1) == 0)
  {
    if (gLogDatapath)
    {
      unsigned int v7 = __nwlog_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v8 = *(_DWORD *)(a1 + 344);
        *(_DWORD *)buf = 136446978;
        BOOL v17 = "nw_protocol_ohttp_read_response";
        __int16 v18 = 2082;
        uint64_t v19 = v2;
        __int16 v20 = 2080;
        uint64_t v21 = " ";
        __int16 v22 = 1024;
        int v23 = v8;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sskipping, state %u", buf, 0x26u);
      }
    }
  }
}

uint64_t ___ZL38nw_protocol_ohttp_context_send_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_42(uint64_t a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  if (*(char *)(extra + 228) < 0 && *(_DWORD *)(extra + 224) == 1) {
    nw_protocol_ohttp_prepare_request(*(void *)(a1 + 32), extra);
  }
  return 1;
}

void nw_protocol_ohttp_prepare_request(uint64_t a1, uint64_t a2)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_prepare_request";
    char v79 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v139) = 16;
    LOBYTE(v138) = 0;
    if (!__nwlog_fault(v79, &v139, &v138)) {
      goto LABEL_154;
    }
    if (v139 == 17)
    {
      uint64_t v80 = __nwlog_obj();
      os_log_type_t v81 = v139;
      if (!os_log_type_enabled(v80, (os_log_type_t)v139)) {
        goto LABEL_154;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_prepare_request";
      uint64_t v82 = "%{public}s called with null ohttp";
    }
    else if ((_BYTE)v138)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v80 = __nwlog_obj();
      os_log_type_t v81 = v139;
      BOOL v84 = os_log_type_enabled(v80, (os_log_type_t)v139);
      if (backtrace_string)
      {
        if (v84)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_prepare_request";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_154;
      }
      if (!v84)
      {
LABEL_154:
        if (v79) {
          free(v79);
        }
        return;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_prepare_request";
      uint64_t v82 = "%{public}s called with null ohttp, no backtrace";
    }
    else
    {
      uint64_t v80 = __nwlog_obj();
      os_log_type_t v81 = v139;
      if (!os_log_type_enabled(v80, (os_log_type_t)v139)) {
        goto LABEL_154;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_prepare_request";
      uint64_t v82 = "%{public}s called with null ohttp, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v80, v81, v82, buf, 0xCu);
    goto LABEL_154;
  }
  int v4 = *(unsigned __int8 *)(a1 + 348);
  unsigned int v5 = *(_DWORD *)(a2 + 224);
  if ((v4 & 2) != 0)
  {
    if (v5 >= 2) {
      goto LABEL_4;
    }
  }
  else if (v5)
  {
LABEL_4:
    if ((v4 & 1) == 0 && gLogDatapath)
    {
      char v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *(_DWORD *)(a2 + 224);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_prepare_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 349;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v141 = (uint64_t)" ";
        __int16 v142 = 1024;
        LODWORD(v143) = v7;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sskipping, state %u", buf, 0x26u);
      }
    }
    return;
  }
  if (!*(void *)(a2 + 72) && !*(void *)(a2 + 216) && (*(unsigned char *)(a2 + 228) & 1) == 0)
  {
    if (v4) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_prepare_request";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = a1 + 349;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v141 = (uint64_t)" ";
    uint64_t v9 = "%{public}s %{public}s%sskipping, request doesn't have necessary metadata";
    uint64_t v10 = v8;
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
LABEL_15:
    _os_log_impl(&dword_1830D4000, v10, v11, v9, buf, 0x20u);
    return;
  }
  if (((*(unsigned __int8 *)(a2 + 228) | v4) & 2) == 0)
  {
    if (v4) {
      return;
    }
    if (!gLogDatapath) {
      return;
    }
    uint64_t v12 = __nwlog_obj();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_prepare_request";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = a1 + 349;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v141 = (uint64_t)" ";
    uint64_t v9 = "%{public}s %{public}s%sskipping, request not ready";
LABEL_21:
    uint64_t v10 = v12;
    os_log_type_t v11 = OS_LOG_TYPE_DEBUG;
    goto LABEL_15;
  }
  size_t length = xpc_data_get_length(*(xpc_object_t *)(a2 + 88));
  bytes_ptr = (unsigned __int16 *)xpc_data_get_bytes_ptr(*(xpc_object_t *)(a2 + 88));
  uint64_t v15 = (uint64_t *)(a2 + 24);
  *(_DWORD *)buf = 0;
  nw_frame_array_get_frame_count((uint64_t *)(a2 + 24), 0, buf);
  size_t v16 = *(unsigned int *)buf;
  size_t v117 = *(unsigned int *)buf;
  if ((*(unsigned char *)(a2 + 228) & 1) == 0 || (*(unsigned char *)(a1 + 348) & 0x20) != 0)
  {
    *(unsigned char *)(a2 + 228) &= ~0x80u;
  }
  else
  {
    unint64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_ohttp_standalone_aead_threshold, 3000);
    unint64_t v18 = *(void *)(a2 + 152);
    if (v18 + v16 > int64_with_default)
    {
      *(unsigned char *)(a2 + 228) |= 0x80u;
      size_t v16 = int64_with_default - v18;
      if (int64_with_default <= v18)
      {
        if (*(unsigned char *)(a1 + 348)) {
          return;
        }
        if (!gLogDatapath) {
          return;
        }
        uint64_t v12 = __nwlog_obj();
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
          return;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_prepare_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 349;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v141 = (uint64_t)" ";
        uint64_t v9 = "%{public}s %{public}s%sskipping, nothing to send, hit threshold";
        goto LABEL_21;
      }
    }
  }
  uint64_t v19 = *v15;
  if (v16 == nw_frame_unclaimed_length((_DWORD *)*v15))
  {
    __int16 v20 = (const unsigned __int8 *)nw_frame_unclaimed_bytes(v19, 0);
    uint64_t v21 = 0;
  }
  else if (v16)
  {
    __int16 v22 = (const unsigned __int8 *)malloc_type_calloc(1uLL, v16, 0xEAFB8F1AuLL);
    if (!v22)
    {
      os_log_type_t v97 = __nwlog_obj();
      os_log_type_enabled(v97, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "strict_calloc";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = 1;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v141 = v16;
      os_log_type_t v98 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v98)) {
        goto LABEL_220;
      }
      free(v98);
      __int16 v22 = 0;
    }
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    uint64_t v141 = 0;
    v130[0] = MEMORY[0x1E4F143A8];
    v130[1] = 0x40000000;
    uint64_t v131 = (uint64_t (*)(void *))___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke;
    char v132 = &unk_1E523F498;
    v133 = buf;
    size_t v134 = v16;
    __int16 v20 = v22;
    v135 = v22;
    uint64_t v23 = *v15;
    do
    {
      if (!v23) {
        break;
      }
      uint64_t v24 = *(void *)(v23 + 16);
      char v25 = v131(v130);
      uint64_t v23 = v24;
    }
    while ((v25 & 1) != 0);
    _Block_object_dispose(buf, 8);
    uint64_t v21 = (unsigned __int8 *)v20;
  }
  else
  {
    uint64_t v21 = 0;
    __int16 v20 = 0;
  }
  size_t v129 = 0;
  unsigned int v26 = *(unsigned __int8 *)(a2 + 228);
  if (v26)
  {
    if (bytes_ptr)
    {
      if (length)
      {
        uint64_t v115 = v21;
        if (!v16 || v20)
        {
          unint64_t v28 = *(void *)a2;
          unint64_t v139 = 0;
          if (v28 > 0x3F)
          {
            if (v28 >> 14)
            {
              if (v28 >> 30)
              {
                if (v28 >> 62)
                {
                  uint64_t v29 = __nwlog_obj();
                  os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "_http_vle_encode";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v28;
                  __int16 v30 = (void *)_os_log_send_and_compose_impl();
                  if (__nwlog_abort((uint64_t)v30)) {
                    goto LABEL_220;
                  }
                  free(v30);
                  size_t __n = 0;
                }
                else
                {
                  unint64_t v139 = bswap64(v28 | 0xC000000000000000);
                  size_t __n = 8;
                }
              }
              else
              {
                unint64_t v139 = bswap32(v28 | 0x80000000);
                size_t __n = 4;
              }
            }
            else
            {
              unint64_t v139 = bswap32(v28 | 0x4000) >> 16;
              size_t __n = 2;
            }
          }
          else
          {
            unint64_t v139 = v28;
            size_t __n = 1;
          }
          uint64_t v31 = *(void *)(a2 + 184);
          if (!v31)
          {
            cchpke_params_x25519_AESGCM128_HKDF_SHA256();
            size_t v32 = cchpke_params_sizeof_aead_nonce();
            *(void *)(a2 + 192) = v32;
            if (!v32)
            {
              BOOL v114 = __nwlog_obj();
              os_log_type_enabled(v114, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "strict_malloc";
              uint64_t v107 = (void *)_os_log_send_and_compose_impl();
              if (__nwlog_abort((uint64_t)v107)) {
                goto LABEL_220;
              }
              free(v107);
            }
            BOOL v33 = malloc_type_malloc(v32, 0xF2B69DE5uLL);
            if (!v33)
            {
              uint64_t v108 = __nwlog_obj();
              os_log_type_enabled(v108, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "strict_malloc";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v32;
              uint64_t v109 = (void *)_os_log_send_and_compose_impl();
              if (__nwlog_abort((uint64_t)v109)) {
                goto LABEL_220;
              }
              free(v109);
              BOOL v33 = 0;
            }
            *(void *)(a2 + 184) = v33;
            arc4random_buf(v33, *(void *)(a2 + 192));
            *(void *)(a2 + 200) = 0;
          }
          int v34 = v26 & 0x82;
          size_t v138 = 0;
          if (v16)
          {
            BOOL v35 = nw_http_encrypt_standalone_aead_chunk((uint64_t)v20, v16, *(void *)(a2 + 200), v34 == 2, (uint64_t)bytes_ptr, length, *(const void **)(a2 + 184), *(void *)(a2 + 192), &v138);
            if (!v35)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v36 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
                _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s Failed to fill out AEAD chunk", buf, 0xCu);
              }
              uint64_t v27 = 0;
              uint64_t v21 = v115;
              goto LABEL_111;
            }
          }
          else
          {
            BOOL v35 = 0;
          }
          uint64_t v37 = *(void *)(a2 + 200);
          uint64_t v38 = v37 + 1;
          uint64_t v39 = v37 == -1;
          uint64_t v40 = v39 << 63 >> 63;
          *(void *)(a2 + 200) = v38;
          if (v40 == v39 && (v40 & 0x8000000000000000) == 0)
          {
LABEL_85:
            if (v31) {
              uint64_t v52 = 0;
            }
            else {
              uint64_t v52 = *(void *)(a2 + 192) + 2;
            }
            unint64_t v53 = v52 + __n + v138;
            unint64_t __src = 0;
            if (v53 > 0x3F)
            {
              if (v53 >> 14)
              {
                if (v53 >> 30)
                {
                  if (v53 >> 62)
                  {
                    uint64_t v55 = __nwlog_obj();
                    os_log_type_enabled(v55, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "_http_vle_encode";
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v53;
                    __int16 v56 = (void *)_os_log_send_and_compose_impl();
                    if (__nwlog_abort((uint64_t)v56)) {
                      goto LABEL_220;
                    }
                    free(v56);
                    size_t v54 = 0;
                  }
                  else
                  {
                    unint64_t __src = bswap64(v53 | 0xC000000000000000);
                    size_t v54 = 8;
                  }
                }
                else
                {
                  unint64_t __src = bswap32(v53 | 0x80000000);
                  size_t v54 = 4;
                }
              }
              else
              {
                unint64_t __src = bswap32(v53 | 0x4000) >> 16;
                size_t v54 = 2;
              }
            }
            else
            {
              unint64_t __src = v52 + __n + v138;
              size_t v54 = 1;
            }
            if (v34 == 2) {
              unint64_t v57 = v53 + 1;
            }
            else {
              unint64_t v57 = v53;
            }
            size_t v58 = v57 + v54;
            size_t v129 = v57 + v54;
            if (!(v57 + v54))
            {
              uint64_t v93 = __nwlog_obj();
              os_log_type_enabled(v93, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "strict_calloc";
              BOOL v94 = (void *)_os_log_send_and_compose_impl();
              if (__nwlog_abort((uint64_t)v94)) {
                goto LABEL_220;
              }
              free(v94);
            }
            uint64_t v27 = (char *)malloc_type_calloc(1uLL, v58, 0xEAFB8F1AuLL);
            if (!v27)
            {
              uint64_t v95 = __nwlog_obj();
              os_log_type_enabled(v95, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "strict_calloc";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = 1;
              *(_WORD *)&buf[22] = 2048;
              uint64_t v141 = v58;
              uint64_t v96 = (void *)_os_log_send_and_compose_impl();
              if (__nwlog_abort((uint64_t)v96)) {
                goto LABEL_220;
              }
              free(v96);
            }
            char v59 = v27;
            if (v34 == 2)
            {
              char *v27 = 0;
              char v59 = v27 + 1;
            }
            memcpy(v59, &__src, v54);
            BOOL v60 = &v59[v54];
            memcpy(v60, &v139, __n);
            long long v61 = &v60[__n];
            if (!v31)
            {
              *(_WORD *)long long v61 = 256;
              uint64_t v62 = v61 + 2;
              size_t v63 = *(void *)(a2 + 192);
              memcpy(v62, *(const void **)(a2 + 184), v63);
              long long v61 = &v62[v63];
            }
            uint64_t v21 = v115;
            if (v138) {
              memcpy(v61, (const void *)v35, v138);
            }
            if (v35) {
              free((void *)v35);
            }
            goto LABEL_111;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v41 = *(void *)(a2 + 200);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "ohttp_context->aead_chunk_index";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v141 = 1;
          __int16 v142 = 2048;
          uint64_t v143 = v41;
          uint64_t v42 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(__src) = 16;
          char v137 = 0;
          if (__nwlog_fault(v42, &__src, &v137))
          {
            if (__src == 17)
            {
              os_log_type_t v43 = __nwlog_obj();
              os_log_type_t v44 = __src;
              if (os_log_type_enabled(v43, (os_log_type_t)__src))
              {
                uint64_t v45 = *(void *)(a2 + 200);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "ohttp_context->aead_chunk_index";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v141 = 1;
                __int16 v142 = 2048;
                uint64_t v143 = v45;
                uint64_t v46 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_81:
                _os_log_impl(&dword_1830D4000, v43, v44, v46, buf, 0x2Au);
              }
            }
            else if (v137)
            {
              __int16 v47 = (char *)__nw_create_backtrace_string();
              os_log_type_t v43 = __nwlog_obj();
              os_log_type_t v44 = __src;
              BOOL v48 = os_log_type_enabled(v43, (os_log_type_t)__src);
              if (v47)
              {
                if (v48)
                {
                  uint64_t v49 = *(void *)(a2 + 200);
                  *(_DWORD *)buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "ohttp_context->aead_chunk_index";
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v141 = 1;
                  __int16 v142 = 2048;
                  uint64_t v143 = v49;
                  __int16 v144 = 2082;
                  v145 = v47;
                  _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v47);
                goto LABEL_82;
              }
              if (v48)
              {
                uint64_t v51 = *(void *)(a2 + 200);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "ohttp_context->aead_chunk_index";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v141 = 1;
                __int16 v142 = 2048;
                uint64_t v143 = v51;
                uint64_t v46 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_81;
              }
            }
            else
            {
              os_log_type_t v43 = __nwlog_obj();
              os_log_type_t v44 = __src;
              if (os_log_type_enabled(v43, (os_log_type_t)__src))
              {
                uint64_t v50 = *(void *)(a2 + 200);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "ohttp_context->aead_chunk_index";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v141 = 1;
                __int16 v142 = 2048;
                uint64_t v143 = v50;
                uint64_t v46 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_81;
              }
            }
          }
LABEL_82:
          if (v42) {
            free(v42);
          }
          *(void *)(a2 + 200) = -1;
          goto LABEL_85;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
        os_log_type_t v101 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v139) = 16;
        LOBYTE(v138) = 0;
        if (__nwlog_fault(v101, &v139, &v138))
        {
          if (v139 == 17)
          {
            BOOL v102 = __nwlog_obj();
            os_log_type_t v103 = v139;
            if (os_log_type_enabled(v102, (os_log_type_t)v139))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
              BOOL v104 = "%{public}s called with null body_content";
LABEL_216:
              _os_log_impl(&dword_1830D4000, v102, v103, v104, buf, 0xCu);
            }
          }
          else if ((_BYTE)v138)
          {
            uint64_t v112 = (char *)__nw_create_backtrace_string();
            BOOL v102 = __nwlog_obj();
            os_log_type_t v103 = v139;
            BOOL v113 = os_log_type_enabled(v102, (os_log_type_t)v139);
            if (v112)
            {
              if (v113)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v112;
                _os_log_impl(&dword_1830D4000, v102, v103, "%{public}s called with null body_content, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v112);
              goto LABEL_217;
            }
            if (v113)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
              BOOL v104 = "%{public}s called with null body_content, no backtrace";
              goto LABEL_216;
            }
          }
          else
          {
            BOOL v102 = __nwlog_obj();
            os_log_type_t v103 = v139;
            if (os_log_type_enabled(v102, (os_log_type_t)v139))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
              BOOL v104 = "%{public}s called with null body_content, backtrace limit exceeded";
              goto LABEL_216;
            }
          }
        }
LABEL_217:
        if (v101) {
          free(v101);
        }
        uint64_t v27 = 0;
        goto LABEL_111;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
      id v85 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v139) = 16;
      LOBYTE(v138) = 0;
      if (__nwlog_fault(v85, &v139, &v138))
      {
        if (v139 == 17)
        {
          char v86 = __nwlog_obj();
          os_log_type_t v87 = v139;
          if (!os_log_type_enabled(v86, (os_log_type_t)v139)) {
            goto LABEL_209;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
          uint64_t v88 = "%{public}s called with null aead_key_length";
          goto LABEL_208;
        }
        if (!(_BYTE)v138)
        {
          char v86 = __nwlog_obj();
          os_log_type_t v87 = v139;
          if (!os_log_type_enabled(v86, (os_log_type_t)v139)) {
            goto LABEL_209;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
          uint64_t v88 = "%{public}s called with null aead_key_length, backtrace limit exceeded";
          goto LABEL_208;
        }
        os_log_type_t v105 = (char *)__nw_create_backtrace_string();
        char v86 = __nwlog_obj();
        os_log_type_t v87 = v139;
        BOOL v106 = os_log_type_enabled(v86, (os_log_type_t)v139);
        if (v105)
        {
          if (v106)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v105;
            _os_log_impl(&dword_1830D4000, v86, v87, "%{public}s called with null aead_key_length, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v105);
          if (!v85) {
            goto LABEL_211;
          }
          goto LABEL_210;
        }
        if (v106)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
          uint64_t v88 = "%{public}s called with null aead_key_length, no backtrace";
LABEL_208:
          _os_log_impl(&dword_1830D4000, v86, v87, v88, buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
      id v85 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v139) = 16;
      LOBYTE(v138) = 0;
      if (!__nwlog_fault(v85, &v139, &v138)) {
        goto LABEL_209;
      }
      if (v139 == 17)
      {
        char v86 = __nwlog_obj();
        os_log_type_t v87 = v139;
        if (!os_log_type_enabled(v86, (os_log_type_t)v139)) {
          goto LABEL_209;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
        uint64_t v88 = "%{public}s called with null aead_key_buffer";
        goto LABEL_208;
      }
      if (!(_BYTE)v138)
      {
        char v86 = __nwlog_obj();
        os_log_type_t v87 = v139;
        if (!os_log_type_enabled(v86, (os_log_type_t)v139)) {
          goto LABEL_209;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
        uint64_t v88 = "%{public}s called with null aead_key_buffer, backtrace limit exceeded";
        goto LABEL_208;
      }
      os_log_type_t v99 = (char *)__nw_create_backtrace_string();
      char v86 = __nwlog_obj();
      os_log_type_t v87 = v139;
      BOOL v100 = os_log_type_enabled(v86, (os_log_type_t)v139);
      if (!v99)
      {
        if (!v100) {
          goto LABEL_209;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
        uint64_t v88 = "%{public}s called with null aead_key_buffer, no backtrace";
        goto LABEL_208;
      }
      if (v100)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v99;
        _os_log_impl(&dword_1830D4000, v86, v87, "%{public}s called with null aead_key_buffer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v99);
    }
LABEL_209:
    if (!v85)
    {
LABEL_211:
      uint64_t v27 = 0;
      goto LABEL_111;
    }
LABEL_210:
    free(v85);
    goto LABEL_211;
  }
  uint64_t v27 = (char *)nw_http_create_oblivious_request(a2, (*(unsigned __int8 *)(a1 + 348) >> 1) & 1, (*(unsigned __int8 *)(a1 + 348) >> 2) & 1, v20, v16, (v26 >> 1) & 1, bytes_ptr, length, &v129);
LABEL_111:
  if (v21) {
    free(v21);
  }
  if (v27)
  {
    uint64_t v64 = *(void **)(a2 + 128);
    if (!v64)
    {
      size_t v70 = v129;
      *(void *)(a2 + 128) = v27;
      *(void *)(a2 + 136) = v70;
      *(void *)(a2 + 144) = 0;
      goto LABEL_123;
    }
    uint64_t v65 = *(void *)(a2 + 136);
    size_t v67 = v129 + v65;
    BOOL v66 = v129 + v65 == 0;
    *(void *)(a2 + 136) = v129 + v65;
    if (v66)
    {
      os_log_type_t v89 = __nwlog_obj();
      os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "_strict_reallocf";
      os_log_type_t v90 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v90)) {
        goto LABEL_220;
      }
      free(v90);
      uint64_t v64 = *(void **)(a2 + 128);
    }
    os_log_type_t v68 = (char *)reallocf(v64, v67);
    if (v68)
    {
LABEL_117:
      *(void *)(a2 + 128) = v68;
      memcpy(&v68[v65], v27, v129);
LABEL_123:
      if (v16 >= v117)
      {
        v118[0] = MEMORY[0x1E4F143A8];
        v118[1] = 0x40000000;
        __int16 v119 = (uint64_t (*)(void *))___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_2;
        uint64_t v120 = &__block_descriptor_tmp_38_28995;
        uint64_t v121 = a2;
        uint64_t v75 = *(void *)(a2 + 24);
        do
        {
          if (!v75) {
            break;
          }
          uint64_t v76 = *(void *)(v75 + 16);
          char v77 = v119(v118);
          uint64_t v75 = v76;
        }
        while ((v77 & 1) != 0);
      }
      else
      {
        uint64_t v71 = *(void *)(a2 + 152);
        *(void *)(a2 + 152) = v71 + v16;
        if (__CFADD__(v71, v16))
        {
          if (gLogDatapath)
          {
            char v110 = __nwlog_obj();
            if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v111 = *(void *)(a2 + 152);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_prepare_request";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "ohttp_context->cumulative_request_length";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v141 = v16;
              __int16 v142 = 2048;
              uint64_t v143 = v111;
              _os_log_impl(&dword_1830D4000, v110, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
            }
          }
          *(void *)(a2 + 152) = -1;
        }
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        LODWORD(v141) = 0;
        *(void *)&buf[16] = 0x2000000000;
        v122[0] = MEMORY[0x1E4F143A8];
        v122[1] = 0x40000000;
        v123 = (uint64_t (*)(void *))___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_36;
        char v124 = &unk_1E523F4C0;
        char v125 = buf;
        size_t v126 = v16;
        uint64_t v127 = a2;
        uint64_t v128 = a1;
        uint64_t v72 = *(void *)(a2 + 24);
        do
        {
          if (!v72) {
            break;
          }
          uint64_t v73 = *(void *)(v72 + 16);
          char v74 = v123(v122);
          uint64_t v72 = v73;
        }
        while ((v74 & 1) != 0);
        _Block_object_dispose(buf, 8);
      }
      if ((*(unsigned char *)(a1 + 348) & 2) == 0)
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        snprintf(buf, 0x10uLL, "%zu", *(void *)(a2 + 136));
        id v78 = nw_http_metadata_copy_request(*(void **)(a1 + 304));
        nw_http_fields_append(v78, (uint64_t)"Content-Length", (uint64_t)buf);
        if (v78) {
          os_release(v78);
        }
      }
      *(_DWORD *)(a2 + 224) = 1;
      nw_protocol_ohttp_send_request(a1, v75);
      return;
    }
    os_log_type_t v91 = __nwlog_obj();
    os_log_type_enabled(v91, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_strict_reallocf";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v67;
    uint64_t v92 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v92))
    {
      free(v92);
      goto LABEL_117;
    }
LABEL_220:
    __break(1u);
    return;
  }
  if ((*(unsigned char *)(a1 + 348) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v69 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_prepare_request";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 349;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v141 = (uint64_t)" ";
      _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to prepare request", buf, 0x20u);
    }
  }
  nw_ohttp_mark_failed_with_error(a1, 22);
}

BOOL ___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke(void *a1, uint64_t a2)
{
  LODWORD(__n) = 0;
  uint64_t v3 = (const void *)nw_frame_unclaimed_bytes(a2, &__n);
  unint64_t v4 = a1[5];
  uint64_t v5 = *(void *)(*(void *)(a1[4] + 8) + 24);
  unint64_t v6 = v5 + __n;
  if (v6 <= v4)
  {
    memcpy((void *)(a1[6] + v5), v3, __n);
    uint64_t v7 = __n;
LABEL_5:
    *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
    return v6 <= v4;
  }
  uint64_t v7 = v4 - v5;
  if (v4 != v5)
  {
    memcpy((void *)(a1[6] + v5), v3, v4 - v5);
    goto LABEL_5;
  }
  return v6 <= v4;
}

BOOL nw_http_create_oblivious_request(uint64_t a1, int a2, int a3, const unsigned __int8 *a4, unint64_t a5, uint64_t a6, unsigned __int16 *a7, uint64_t a8, size_t *a9)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n)) {
      goto LABEL_312;
    }
    if (v113 != 17)
    {
      if (!(_BYTE)__n)
      {
        uint64_t v65 = __nwlog_obj();
        os_log_type_t v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null ohttp_context, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      BOOL v69 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v69) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null ohttp_context, no backtrace";
        goto LABEL_311;
      }
      if (!v69) {
        goto LABEL_296;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v115 = "nw_http_create_oblivious_request";
      __int16 v116 = 2082;
      uint64_t v117 = (uint64_t)backtrace_string;
      size_t v70 = "%{public}s called with null ohttp_context, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
    uint64_t v65 = __nwlog_obj();
    os_log_type_t v66 = v113;
    if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
      goto LABEL_312;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    size_t v67 = "%{public}s called with null ohttp_context";
LABEL_311:
    _os_log_impl(&dword_1830D4000, v65, v66, v67, buf, 0xCu);
    goto LABEL_312;
  }
  uint64_t v10 = *(nw_protocol_metadata **)(a1 + 72);
  os_log_type_t v11 = *(const char **)(a1 + 216);
  if (!((unint64_t)v11 | (unint64_t)v10))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n)) {
      goto LABEL_312;
    }
    if (v113 != 17)
    {
      if (!(_BYTE)__n)
      {
        uint64_t v65 = __nwlog_obj();
        os_log_type_t v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      BOOL v78 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v78) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_311;
      }
      if (!v78) {
        goto LABEL_296;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v115 = "nw_http_create_oblivious_request";
      __int16 v116 = 2082;
      uint64_t v117 = (uint64_t)backtrace_string;
      size_t v70 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
    uint64_t v65 = __nwlog_obj();
    os_log_type_t v66 = v113;
    if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
      goto LABEL_312;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    size_t v67 = "%{public}s called with null metadata";
    goto LABEL_311;
  }
  uint64_t v12 = a8;
  uint64_t v13 = a7;
  uint64_t v14 = a6;
  size_t v15 = a5;
  size_t v16 = a4;
  size_t v18 = *(void *)a1;
  if ((a2 & 1) == 0 && (a6 & 1) == 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n)) {
      goto LABEL_312;
    }
    if (v113 != 17)
    {
      if (!(_BYTE)__n)
      {
        uint64_t v65 = __nwlog_obj();
        os_log_type_t v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null is_complete, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      BOOL v79 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v79) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null is_complete, no backtrace";
        goto LABEL_311;
      }
      if (!v79) {
        goto LABEL_296;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v115 = "nw_http_create_oblivious_request";
      __int16 v116 = 2082;
      uint64_t v117 = (uint64_t)backtrace_string;
      size_t v70 = "%{public}s called with null is_complete, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
    uint64_t v65 = __nwlog_obj();
    os_log_type_t v66 = v113;
    if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
      goto LABEL_312;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    size_t v67 = "%{public}s called with null is_complete";
    goto LABEL_311;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n)) {
      goto LABEL_312;
    }
    if (v113 != 17)
    {
      if (!(_BYTE)__n)
      {
        uint64_t v65 = __nwlog_obj();
        os_log_type_t v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null oblivious_config_buffer, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      BOOL v71 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v71) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null oblivious_config_buffer, no backtrace";
        goto LABEL_311;
      }
      if (!v71) {
        goto LABEL_296;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v115 = "nw_http_create_oblivious_request";
      __int16 v116 = 2082;
      uint64_t v117 = (uint64_t)backtrace_string;
      size_t v70 = "%{public}s called with null oblivious_config_buffer, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
    uint64_t v65 = __nwlog_obj();
    os_log_type_t v66 = v113;
    if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
      goto LABEL_312;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    size_t v67 = "%{public}s called with null oblivious_config_buffer";
    goto LABEL_311;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n)) {
      goto LABEL_312;
    }
    if (v113 != 17)
    {
      if (!(_BYTE)__n)
      {
        uint64_t v65 = __nwlog_obj();
        os_log_type_t v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null oblivious_config_length, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      BOOL v72 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v72) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null oblivious_config_length, no backtrace";
        goto LABEL_311;
      }
      if (!v72) {
        goto LABEL_296;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v115 = "nw_http_create_oblivious_request";
      __int16 v116 = 2082;
      uint64_t v117 = (uint64_t)backtrace_string;
      size_t v70 = "%{public}s called with null oblivious_config_length, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
    uint64_t v65 = __nwlog_obj();
    os_log_type_t v66 = v113;
    if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
      goto LABEL_312;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    size_t v67 = "%{public}s called with null oblivious_config_length";
    goto LABEL_311;
  }
  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n)) {
      goto LABEL_312;
    }
    if (v113 != 17)
    {
      if (!(_BYTE)__n)
      {
        uint64_t v65 = __nwlog_obj();
        os_log_type_t v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null out_message_length, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      BOOL v73 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v73) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null out_message_length, no backtrace";
        goto LABEL_311;
      }
      if (!v73) {
        goto LABEL_296;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v115 = "nw_http_create_oblivious_request";
      __int16 v116 = 2082;
      uint64_t v117 = (uint64_t)backtrace_string;
      size_t v70 = "%{public}s called with null out_message_length, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
    uint64_t v65 = __nwlog_obj();
    os_log_type_t v66 = v113;
    if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
      goto LABEL_312;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    size_t v67 = "%{public}s called with null out_message_length";
    goto LABEL_311;
  }
  if (!a4 && a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n)) {
      goto LABEL_312;
    }
    if (v113 == 17)
    {
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
        goto LABEL_312;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      size_t v67 = "%{public}s called with null body_content";
      goto LABEL_311;
    }
    if (!(_BYTE)__n)
    {
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
        goto LABEL_312;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      size_t v67 = "%{public}s called with null body_content, backtrace limit exceeded";
      goto LABEL_311;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v65 = __nwlog_obj();
    os_log_type_t v66 = v113;
    BOOL v80 = os_log_type_enabled(v65, (os_log_type_t)v113);
    if (!backtrace_string)
    {
      if (!v80) {
        goto LABEL_312;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      size_t v67 = "%{public}s called with null body_content, no backtrace";
      goto LABEL_311;
    }
    if (!v80) {
      goto LABEL_296;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v115 = "nw_http_create_oblivious_request";
    __int16 v116 = 2082;
    uint64_t v117 = (uint64_t)backtrace_string;
    size_t v70 = "%{public}s called with null body_content, dumping backtrace:%{public}s";
LABEL_295:
    _os_log_impl(&dword_1830D4000, v65, v66, v70, buf, 0x16u);
    goto LABEL_296;
  }
  if (v11)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    if (a5 || (a2 & 1) != 0)
    {
      if (!a2) {
        goto LABEL_55;
      }
      goto LABEL_14;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n))
    {
LABEL_312:
      if (v64) {
        free(v64);
      }
      return 0;
    }
    if (v113 == 17)
    {
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
        goto LABEL_312;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      size_t v67 = "%{public}s called with null body_length";
      goto LABEL_311;
    }
    if (!(_BYTE)__n)
    {
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
        goto LABEL_312;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      size_t v67 = "%{public}s called with null body_length, backtrace limit exceeded";
      goto LABEL_311;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v65 = __nwlog_obj();
    os_log_type_t v66 = v113;
    BOOL v86 = os_log_type_enabled(v65, (os_log_type_t)v113);
    if (!backtrace_string)
    {
      if (!v86) {
        goto LABEL_312;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      size_t v67 = "%{public}s called with null body_length, no backtrace";
      goto LABEL_311;
    }
    if (v86)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v115 = "nw_http_create_oblivious_request";
      __int16 v116 = 2082;
      uint64_t v117 = (uint64_t)backtrace_string;
      size_t v70 = "%{public}s called with null body_length, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
LABEL_296:
    free(backtrace_string);
    goto LABEL_312;
  }
  uint64_t v23 = *(void *)(a1 + 112);
  int v105 = a3;
  if (!v23 && a6)
  {
    unsigned int v104 = a6;
    BOOL binary_message_length_inner = nw_http_get_binary_message_length_inner(v10, 0, a5);
    if (binary_message_length_inner)
    {
      uint64_t v25 = binary_message_length_inner;
      if (gLogDatapath)
      {
        os_log_type_t v81 = __nwlog_obj();
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v115 = "nw_http_create_oblivious_request";
          __int16 v116 = 2048;
          uint64_t v117 = v25;
          _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_DEBUG, "%{public}s Creating binary request with length %zu", buf, 0x16u);
        }
      }
      uint64_t v20 = arc4random_uniform(0x10u);
      if (!(v25 + v20))
      {
        uint64_t v82 = __nwlog_obj();
        os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "strict_calloc";
        uint64_t v83 = (void *)_os_log_send_and_compose_impl();
        BOOL result = __nwlog_abort((uint64_t)v83);
        if (result) {
          goto LABEL_316;
        }
        free(v83);
      }
      unsigned int v26 = (unsigned __int8 *)malloc_type_calloc(1uLL, v25 + v20, 0xEAFB8F1AuLL);
      if (v26)
      {
        uint64_t v19 = v26;
        if (nw_http_fillout_binary_message_inner(v10, 0, v16, v15, v26, v25))
        {
          os_log_type_t v11 = "message/bhttp";
          size_t v16 = v19;
          size_t v15 = v25;
LABEL_37:
          uint64_t v14 = v104;
          goto LABEL_54;
        }
        free(v19);
LABEL_45:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v33 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        int v34 = "%{public}s Failed to fill out binary message";
        goto LABEL_131;
      }
      BOOL v84 = __nwlog_obj();
      os_log_type_enabled(v84, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      uint64_t v115 = "strict_calloc";
      __int16 v116 = 2048;
      uint64_t v117 = 1;
      __int16 v118 = 2048;
      size_t v119 = v25 + v20;
      id v85 = (void *)_os_log_send_and_compose_impl();
      BOOL result = __nwlog_abort((uint64_t)v85);
      if (result) {
        goto LABEL_316;
      }
      free(v85);
      if (!nw_http_fillout_binary_message_inner(v10, 0, v16, v15, 0, v25)) {
        goto LABEL_45;
      }
      uint64_t v19 = 0;
      size_t v16 = 0;
      size_t v15 = v25;
LABEL_36:
      os_log_type_t v11 = "message/bhttp";
      goto LABEL_37;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n)) {
      goto LABEL_312;
    }
    if (v113 == 17)
    {
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
        goto LABEL_312;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      size_t v67 = "%{public}s called with null encoded_body_length";
      goto LABEL_311;
    }
    if (!(_BYTE)__n)
    {
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
        goto LABEL_312;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      size_t v67 = "%{public}s called with null encoded_body_length, backtrace limit exceeded";
      goto LABEL_311;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v65 = __nwlog_obj();
    os_log_type_t v66 = v113;
    BOOL v100 = os_log_type_enabled(v65, (os_log_type_t)v113);
    if (!backtrace_string)
    {
      if (!v100) {
        goto LABEL_312;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      size_t v67 = "%{public}s called with null encoded_body_length, no backtrace";
      goto LABEL_311;
    }
    if (!v100) {
      goto LABEL_296;
    }
LABEL_294:
    *(_DWORD *)buf = 136446466;
    uint64_t v115 = "nw_http_create_oblivious_request";
    __int16 v116 = 2082;
    uint64_t v117 = (uint64_t)backtrace_string;
    size_t v70 = "%{public}s called with null encoded_body_length, dumping backtrace:%{public}s";
    goto LABEL_295;
  }
  if (!v23 && (a6 & 1) == 0)
  {
    unsigned int v104 = a6;
    BOOL v27 = nw_http_get_binary_message_length_inner(v10, 1, 0);
    indeterminate_binary_message_chunk_size_t length = nw_http_get_indeterminate_binary_message_chunk_length(v15, 0, 0);
    size_t v29 = indeterminate_binary_message_chunk_length + v27;
    if (!(indeterminate_binary_message_chunk_length + v27))
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      uint64_t v64 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v113) = 16;
      LOBYTE(__n) = 0;
      if (!__nwlog_fault(v64, &v113, &__n)) {
        goto LABEL_312;
      }
      if (v113 == 17)
      {
        uint64_t v65 = __nwlog_obj();
        os_log_type_t v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null encoded_body_length";
        goto LABEL_311;
      }
      if (!(_BYTE)__n)
      {
        uint64_t v65 = __nwlog_obj();
        os_log_type_t v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null encoded_body_length, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      BOOL v101 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v101) {
          goto LABEL_312;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        size_t v67 = "%{public}s called with null encoded_body_length, no backtrace";
        goto LABEL_311;
      }
      if (!v101) {
        goto LABEL_296;
      }
      goto LABEL_294;
    }
    unint64_t v30 = indeterminate_binary_message_chunk_length;
    unint64_t v103 = indeterminate_binary_message_chunk_length + v27;
    if (gLogDatapath)
    {
      os_log_type_t v91 = __nwlog_obj();
      BOOL v92 = os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG);
      size_t v29 = v103;
      if (v92)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v115 = "nw_http_create_oblivious_request";
        __int16 v116 = 2048;
        uint64_t v117 = v103;
        _os_log_impl(&dword_1830D4000, v91, OS_LOG_TYPE_DEBUG, "%{public}s Creating partial binary request with length %zu", buf, 0x16u);
        size_t v29 = v103;
      }
    }
    uint64_t v19 = (unsigned __int8 *)malloc_type_calloc(1uLL, v29, 0xEAFB8F1AuLL);
    if (v19)
    {
      if (nw_http_fillout_binary_message_inner(v10, 1, 0, 0, v19, v27))
      {
LABEL_33:
        if (v30 && !nw_http_fillout_indeterminate_binary_message_body_chunk(v16, v15, 0, 0, (char *)&v19[v27], v30))
        {
          if (v19) {
            free(v19);
          }
          BOOL v33 = __nwlog_obj();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v115 = "nw_http_create_oblivious_request";
            int v34 = "%{public}s Failed to fill out binary message chunk";
            goto LABEL_131;
          }
          return 0;
        }
        uint64_t v20 = 0;
        size_t v16 = v19;
        size_t v15 = v103;
        goto LABEL_36;
      }
      free(v19);
    }
    else
    {
      uint64_t v93 = __nwlog_obj();
      os_log_type_enabled(v93, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      uint64_t v115 = "strict_calloc";
      __int16 v116 = 2048;
      uint64_t v117 = 1;
      __int16 v118 = 2048;
      size_t v119 = v103;
      BOOL v94 = (void *)_os_log_send_and_compose_impl();
      BOOL result = __nwlog_abort((uint64_t)v94);
      if (result) {
        goto LABEL_316;
      }
      free(v94);
      if (nw_http_fillout_binary_message_inner(v10, 1, 0, 0, 0, v27)) {
        goto LABEL_33;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v33 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    int v34 = "%{public}s Failed to fill out binary message header";
    goto LABEL_131;
  }
  unint64_t v31 = nw_http_get_indeterminate_binary_message_chunk_length(a5, a6, 0);
  if (!v31)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n)) {
      goto LABEL_312;
    }
    if (v113 == 17)
    {
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
        goto LABEL_312;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      size_t v67 = "%{public}s called with null encoded_body_length";
      goto LABEL_311;
    }
    if (!(_BYTE)__n)
    {
      uint64_t v65 = __nwlog_obj();
      os_log_type_t v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113)) {
        goto LABEL_312;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      size_t v67 = "%{public}s called with null encoded_body_length, backtrace limit exceeded";
      goto LABEL_311;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v65 = __nwlog_obj();
    os_log_type_t v66 = v113;
    BOOL v102 = os_log_type_enabled(v65, (os_log_type_t)v113);
    if (!backtrace_string)
    {
      if (!v102) {
        goto LABEL_312;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      size_t v67 = "%{public}s called with null encoded_body_length, no backtrace";
      goto LABEL_311;
    }
    if (!v102) {
      goto LABEL_296;
    }
    goto LABEL_294;
  }
  unint64_t v32 = v31;
  if (gLogDatapath)
  {
    uint64_t v95 = __nwlog_obj();
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v115 = "nw_http_create_oblivious_request";
      __int16 v116 = 2048;
      uint64_t v117 = v32;
      _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_DEBUG, "%{public}s Creating partial binary request with length %zu", buf, 0x16u);
    }
  }
  if (v14) {
    uint64_t v20 = arc4random_uniform(0x10u);
  }
  else {
    uint64_t v20 = 0;
  }
  if (!(v20 + v32))
  {
    uint64_t v96 = __nwlog_obj();
    os_log_type_enabled(v96, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "strict_calloc";
    os_log_type_t v97 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v97);
    if (result) {
      goto LABEL_316;
    }
    free(v97);
  }
  BOOL v35 = (char *)malloc_type_calloc(1uLL, v20 + v32, 0xEAFB8F1AuLL);
  if (v35)
  {
    uint64_t v19 = (unsigned __int8 *)v35;
    if (nw_http_fillout_indeterminate_binary_message_body_chunk(v16, v15, v14, 0, v35, v32))
    {
      os_log_type_t v11 = "message/bhttp";
      size_t v16 = v19;
      size_t v15 = v32;
      goto LABEL_54;
    }
    free(v19);
LABEL_75:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v33 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "nw_http_create_oblivious_request";
    int v34 = "%{public}s Failed to fill out binary message chunk";
    goto LABEL_131;
  }
  os_log_type_t v98 = __nwlog_obj();
  os_log_type_enabled(v98, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  uint64_t v115 = "strict_calloc";
  __int16 v116 = 2048;
  uint64_t v117 = 1;
  __int16 v118 = 2048;
  size_t v119 = v20 + v32;
  os_log_type_t v99 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v99);
  if (result) {
    goto LABEL_316;
  }
  free(v99);
  if (!nw_http_fillout_indeterminate_binary_message_body_chunk(v16, v15, v14, 0, 0, v32)) {
    goto LABEL_75;
  }
  uint64_t v19 = 0;
  size_t v16 = 0;
  size_t v15 = v32;
  os_log_type_t v11 = "message/bhttp";
LABEL_54:
  uint64_t v13 = a7;
  uint64_t v12 = a8;
  a3 = v105;
  if (!a2)
  {
LABEL_55:
    if (!a2)
    {
      uint64_t v40 = (char *)nw_http_encrypt_oblivious_request(v16, v20 + v15, v11, v13, v12, (char **)(a1 + 112), (void *)(a1 + 120), (void *)(a1 + 96), (size_t *)(a1 + 104), a9);
      if (v19)
      {
        uint64_t v41 = v19;
LABEL_147:
        free(v41);
      }
      return (BOOL)v40;
    }
    BOOL v36 = 0;
    size_t v113 = 0;
    if (*(void *)(a1 + 112)
      || (BOOL v36 = nw_http_encrypt_chunked_oblivious_request_header(v11, v13, v12, (char **)(a1 + 112), (void *)(a1 + 120), (void *)(a1 + 96), (size_t *)(a1 + 104), &v113)))
    {
      size_t __n = 0;
      if (!v15)
      {
        size_t v39 = 0;
        uint64_t v38 = 0;
LABEL_64:
        if (v14) {
          size_t v42 = 0;
        }
        else {
          size_t v42 = v39;
        }
        size_t v111 = 0;
        if (v42 > 0x3F)
        {
          if (v42 >> 14)
          {
            if (v42 >> 30)
            {
              if (v42 >> 62)
              {
                long long v61 = __nwlog_obj();
                os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446466;
                uint64_t v115 = "_http_vle_encode";
                __int16 v116 = 2048;
                uint64_t v117 = v42;
                uint64_t v62 = (void *)_os_log_send_and_compose_impl();
                BOOL result = __nwlog_abort((uint64_t)v62);
                if (result) {
                  goto LABEL_316;
                }
                free(v62);
                size_t v43 = 0;
                size_t v39 = __n;
              }
              else
              {
                size_t v111 = bswap64(v42 | 0xC000000000000000);
                size_t v43 = 8;
              }
            }
            else
            {
              size_t v111 = bswap32(v42 | 0x80000000);
              size_t v43 = 4;
            }
          }
          else
          {
            size_t v111 = bswap32(v42 | 0x4000) >> 16;
            size_t v43 = 2;
          }
        }
        else
        {
          size_t v111 = v42;
          size_t v43 = 1;
        }
        size_t v63 = v113 + v43 + v39;
        *a9 = v63;
        if (!v63)
        {
          os_log_type_t v87 = __nwlog_obj();
          os_log_type_enabled(v87, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          uint64_t v115 = "strict_calloc";
          uint64_t v88 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v88);
          if (result) {
            goto LABEL_316;
          }
          free(v88);
        }
        uint64_t v40 = (char *)malloc_type_calloc(1uLL, v63, 0xEAFB8F1AuLL);
        if (v40)
        {
          if (v36) {
LABEL_137:
          }
            memcpy(v40, (const void *)v36, v113);
        }
        else
        {
          os_log_type_t v89 = __nwlog_obj();
          os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446722;
          uint64_t v115 = "strict_calloc";
          __int16 v116 = 2048;
          uint64_t v117 = 1;
          __int16 v118 = 2048;
          size_t v119 = v63;
          os_log_type_t v90 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v90);
          if (result) {
            goto LABEL_316;
          }
          free(v90);
          if (v36) {
            goto LABEL_137;
          }
        }
        memcpy(&v40[v113], &v111, v43);
        size_t v59 = __n;
        if (!__n)
        {
LABEL_141:
          if (v19) {
            free(v19);
          }
          if (v36) {
            free((void *)v36);
          }
          if (!v38) {
            return (BOOL)v40;
          }
          uint64_t v41 = v38;
          goto LABEL_147;
        }
        BOOL v60 = &v40[v113 + v43];
LABEL_140:
        memcpy(v60, v38, v59);
        goto LABEL_141;
      }
      BOOL v37 = nw_http_encrypt_chunked_oblivious_request_chunk(v16, v20 + v15, v14, *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 96), *(void *)(a1 + 104), &__n);
      if (v37)
      {
        uint64_t v38 = (unsigned __int8 *)v37;
        size_t v39 = __n;
        goto LABEL_64;
      }
      if (v19) {
        free(v19);
      }
      if (v36) {
        free((void *)v36);
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v33 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      int v34 = "%{public}s Failed to fill out OHTTP chunk";
    }
    else
    {
      if (v19) {
        free(v19);
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v33 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      int v34 = "%{public}s Failed to fill out OHTTP header";
    }
LABEL_131:
    _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_ERROR, v34, buf, 0xCu);
    return 0;
  }
LABEL_14:
  if (!a3) {
    goto LABEL_55;
  }
  size_t v113 = 0;
  if (v18 > 0x3F)
  {
    if (v18 >> 14)
    {
      if (v18 >> 30)
      {
        if (v18 >> 62)
        {
          uint64_t v107 = v13;
          uint64_t v109 = v12;
          uint64_t v21 = v14;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          uint64_t v115 = "_http_vle_encode";
          __int16 v116 = 2048;
          uint64_t v117 = v18;
          os_log_type_t v44 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v44);
          if (result) {
            goto LABEL_316;
          }
          free(v44);
          size_t v22 = 0;
          uint64_t v13 = v107;
          uint64_t v12 = v109;
        }
        else
        {
          uint64_t v21 = v14;
          size_t v113 = bswap64(v18 | 0xC000000000000000);
          size_t v22 = 8;
        }
      }
      else
      {
        uint64_t v21 = v14;
        size_t v113 = bswap32(v18 | 0x80000000);
        size_t v22 = 4;
      }
    }
    else
    {
      uint64_t v21 = v14;
      size_t v113 = bswap32(v18 | 0x4000) >> 16;
      size_t v22 = 2;
    }
  }
  else
  {
    uint64_t v21 = v14;
    size_t v113 = v18;
    size_t v22 = 1;
  }
  BOOL v36 = 0;
  size_t __n = 0;
  if (!*(void *)(a1 + 112))
  {
    BOOL v36 = nw_http_encrypt_chunked_oblivious_request_header(v11, v13, v12, (char **)(a1 + 112), (void *)(a1 + 120), (void *)(a1 + 96), (size_t *)(a1 + 104), &__n);
    if (!v36)
    {
      if (v19) {
        free(v19);
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v33 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v115 = "nw_http_create_oblivious_request";
        int v34 = "%{public}s Failed to fill out OHTTP header";
        goto LABEL_131;
      }
      return 0;
    }
  }
  size_t v111 = 0;
  if (!v15)
  {
    size_t v47 = 0;
    uint64_t v38 = 0;
    goto LABEL_97;
  }
  BOOL v46 = nw_http_encrypt_chunked_oblivious_request_chunk(v16, v20 + v15, v21, *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 96), *(void *)(a1 + 104), &v111);
  if (!v46)
  {
    if (v19) {
      free(v19);
    }
    if (v36) {
      free((void *)v36);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v33 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v115 = "nw_http_create_oblivious_request";
      int v34 = "%{public}s Failed to fill out OHTTP chunk";
      goto LABEL_131;
    }
    return 0;
  }
  uint64_t v38 = (unsigned __int8 *)v46;
  size_t v47 = v111;
LABEL_97:
  size_t v48 = __n;
  size_t v49 = __n + v22 + v47;
  size_t __src = 0;
  if (v49 > 0x3F)
  {
    if (v49 >> 14)
    {
      if (v49 >> 30)
      {
        if (v49 >> 62)
        {
          uint64_t v51 = __nwlog_obj();
          os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          uint64_t v115 = "_http_vle_encode";
          __int16 v116 = 2048;
          uint64_t v117 = v49;
          uint64_t v52 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v52);
          if (result) {
            goto LABEL_316;
          }
          free(v52);
          size_t v50 = 0;
          size_t v47 = v111;
          size_t v48 = __n;
        }
        else
        {
          size_t __src = bswap64(v49 | 0xC000000000000000);
          size_t v50 = 8;
        }
      }
      else
      {
        size_t __src = bswap32(v49 | 0x80000000);
        size_t v50 = 4;
      }
    }
    else
    {
      size_t __src = bswap32(v49 | 0x4000) >> 16;
      size_t v50 = 2;
    }
  }
  else
  {
    size_t __src = __n + v22 + v47;
    size_t v50 = 1;
  }
  size_t v53 = v22 + v21 + v47 + v50 + v48;
  *a9 = v53;
  if (!v53)
  {
    char v74 = __nwlog_obj();
    os_log_type_enabled(v74, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v115 = "strict_calloc";
    uint64_t v75 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v75);
    if (result) {
      goto LABEL_316;
    }
    free(v75);
  }
  size_t v54 = (char *)malloc_type_calloc(1uLL, v53, 0xEAFB8F1AuLL);
  uint64_t v40 = v54;
  if (v54)
  {
    uint64_t v55 = v54;
    if (!v21)
    {
LABEL_123:
      memcpy(v55, &__src, v50);
      __int16 v56 = &v55[v50];
      memcpy(v56, &v113, v22);
      unint64_t v57 = &v56[v22];
      if (v36)
      {
        size_t v58 = __n;
        memcpy(v57, (const void *)v36, __n);
        v57 += v58;
      }
      size_t v59 = v111;
      if (!v111) {
        goto LABEL_141;
      }
      BOOL v60 = v57;
      goto LABEL_140;
    }
LABEL_122:
    *uint64_t v40 = 0;
    uint64_t v55 = v40 + 1;
    goto LABEL_123;
  }
  uint64_t v76 = __nwlog_obj();
  os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  uint64_t v115 = "strict_calloc";
  __int16 v116 = 2048;
  uint64_t v117 = 1;
  __int16 v118 = 2048;
  size_t v119 = v53;
  char v77 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v77);
  if (!result)
  {
    free(v77);
    uint64_t v55 = 0;
    if (!v21) {
      goto LABEL_123;
    }
    goto LABEL_122;
  }
LABEL_316:
  __break(1u);
  return result;
}

BOOL ___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_36(void *a1, uint64_t a2)
{
  int v4 = nw_frame_unclaimed_length((_DWORD *)a2);
  unint64_t v6 = a1[5];
  int v7 = *(_DWORD *)(*(void *)(a1[4] + 8) + 24);
  unint64_t v8 = (v7 + v4);
  if (v6 < v8)
  {
    int v9 = v6 - v7;
    nw_frame_claim(a2, v5, v6 - v7, 0);
  }
  else
  {
    int v9 = v4;
    uint64_t v10 = *(void *)(a2 + 16);
    os_log_type_t v11 = *(void **)(a2 + 24);
    if (v10)
    {
      *(void *)(v10 + 24) = v11;
      os_log_type_t v11 = *(void **)(a2 + 24);
    }
    else
    {
      *(void *)(a1[6] + 32) = v11;
    }
    *os_log_type_t v11 = v10;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    buffer = (void *)nw_frame_get_buffer(a2, 0);
    if (buffer) {
      free(buffer);
    }
    os_release((void *)a2);
  }
  BOOL result = v6 >= v8;
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) += v9;
  return result;
}

uint64_t ___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[2];
  int v4 = (void *)a2[3];
  if (v3)
  {
    *(void *)(v3 + 24) = v4;
    int v4 = (void *)a2[3];
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 32) = v4;
  }
  void *v4 = v3;
  a2[2] = 0;
  a2[3] = 0;
  buffer = (void *)nw_frame_get_buffer((uint64_t)a2, 0);
  if (buffer) {
    free(buffer);
  }
  os_release(a2);
  return 1;
}

uint64_t ___ZL31nw_protocol_ohttp_read_responseP17nw_protocol_ohttp_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a2 + 40);
  unint64_t v6 = (void *)(a2 + 32);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    uint64_t v5 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v5;
  }
  void *v5 = v4;
  *unint64_t v6 = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v7 = *(void *)(a1 + 40);
  if ((*(unsigned char *)(v7 + 348) & 0x10) == 0)
  {
    if (*(void *)(v7 + 312)) {
      goto LABEL_6;
    }
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    id v23 = (id)nw_protocol_copy_http_definition_http_definition;
    uint64_t v24 = nw_frame_copy_metadata_for_protocol(a2, (uint64_t)v23);
    if (v23) {
      os_release(v23);
    }
    if (v24)
    {
      id v25 = nw_http_metadata_copy_response(v24);
      if (v25)
      {
        id v26 = v25;
        int status_code = _nw_http_response_get_status_code();

        uint64_t v28 = *(void *)(a1 + 40);
        if (!v28 || (*(unsigned char *)(v28 + 348) & 1) == 0)
        {
          if (gLogDatapath)
          {
            size_t v50 = __nwlog_obj();
            BOOL v51 = os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG);
            uint64_t v28 = *(void *)(a1 + 40);
            if (v51)
            {
              BOOL v52 = v28 == 0;
              if (v28) {
                size_t v53 = (const char *)(v28 + 349);
              }
              else {
                size_t v53 = "";
              }
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_read_response_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v53;
              size_t v54 = " ";
              if (v52) {
                size_t v54 = "";
              }
              *(_WORD *)&buf[22] = 2080;
              uint64_t v64 = v54;
              LOWORD(v65) = 1024;
              *(_DWORD *)((char *)&v65 + 2) = status_code;
              _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRecieved status %u", buf, 0x26u);
              uint64_t v28 = *(void *)(a1 + 40);
            }
          }
        }
        if (status_code == 200)
        {
          *(void *)(v28 + 312) = v24;
          os_release(v26);
LABEL_6:
          int is_metadata_complete = nw_frame_is_metadata_complete(a2);
          uint64_t v9 = *(void *)(a1 + 40);
          if (!v9 || (*(unsigned char *)(v9 + 348) & 1) == 0)
          {
            if (gLogDatapath)
            {
              os_log_type_t v44 = __nwlog_obj();
              BOOL v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG);
              uint64_t v9 = *(void *)(a1 + 40);
              if (v45)
              {
                if (v9) {
                  BOOL v46 = (const char *)(v9 + 349);
                }
                else {
                  BOOL v46 = "";
                }
                if (v9) {
                  size_t v47 = " ";
                }
                else {
                  size_t v47 = "";
                }
                int v48 = nw_frame_unclaimed_length((_DWORD *)a2);
                *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_read_response_block_invoke";
                *(_WORD *)&buf[12] = 2082;
                size_t v49 = ", complete";
                *(_DWORD *)buf = 136447234;
                if (!is_metadata_complete) {
                  size_t v49 = "";
                }
                *(void *)&buf[14] = v46;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v64 = v47;
                LOWORD(v65) = 1024;
                *(_DWORD *)((char *)&v65 + 2) = v48;
                HIWORD(v65) = 2080;
                os_log_type_t v66 = v49;
                _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived %u bytes%s", buf, 0x30u);
                uint64_t v9 = *(void *)(a1 + 40);
              }
            }
          }
          *(void *)(a2 + 32) = 0;
          uint64_t v10 = *(uint64_t **)(v9 + 336);
          *(void *)(a2 + 40) = v10;
          *uint64_t v10 = a2;
          *(void *)(v9 + 336) = v6;
          if (is_metadata_complete)
          {
            *(unsigned char *)(*(void *)(a1 + 40) + 348) |= 0x10u;
            uint64_t v11 = *(void *)(a1 + 40);
            if (!v11 || (*(unsigned char *)(v11 + 348) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v12 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v13 = *(void *)(a1 + 40);
                uint64_t v14 = "";
                BOOL v15 = v13 == 0;
                if (v13) {
                  size_t v16 = (const char *)(v13 + 349);
                }
                else {
                  size_t v16 = "";
                }
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_read_response_block_invoke";
                if (!v15) {
                  uint64_t v14 = " ";
                }
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v16;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v64 = v14;
                BOOL v17 = "%{public}s %{public}s%sReceived complete response";
LABEL_19:
                _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, v17, buf, 0x20u);
                return 1;
              }
            }
          }
          return 1;
        }
        *(unsigned char *)(v28 + 348) |= 0x10u;
        uint64_t v41 = *(void *)(a1 + 40);
        if (v41)
        {
          *(void *)(v41 + 144) = os_retain(v24);
          *(unsigned char *)(v41 + 292) |= 4u;
          *(_DWORD *)(v41 + 288) = 4;
          nw_protocol_ohttp_deliver_response(v41, v41 + 64);
          size_t v42 = *(char **)(v41 + 296);
          if (v42)
          {
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 0x40000000;
            *(void *)&buf[16] = ___ZL41nw_protocol_ohttp_deliver_failure_messageP17nw_protocol_ohttpP20nw_protocol_metadata_block_invoke;
            uint64_t v64 = (const char *)&__block_descriptor_tmp_23_29191;
            uint64_t v65 = v41;
            os_log_type_t v66 = (const char *)v24;
            nw_hash_table_apply(v42, (uint64_t)buf);
          }
LABEL_64:
          os_release(v24);
          nw_frame_finalize(a2);
          os_release(v26);
          return 1;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_failure_message";
        uint64_t v55 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v61 = 0;
        if (__nwlog_fault(v55, &type, &v61))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __int16 v56 = __nwlog_obj();
            os_log_type_t v57 = type;
            if (!os_log_type_enabled(v56, type)) {
              goto LABEL_97;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_failure_message";
            size_t v58 = "%{public}s called with null ohttp";
            goto LABEL_96;
          }
          if (!v61)
          {
            __int16 v56 = __nwlog_obj();
            os_log_type_t v57 = type;
            if (!os_log_type_enabled(v56, type)) {
              goto LABEL_97;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_failure_message";
            size_t v58 = "%{public}s called with null ohttp, backtrace limit exceeded";
            goto LABEL_96;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          __int16 v56 = __nwlog_obj();
          os_log_type_t v57 = type;
          BOOL v60 = os_log_type_enabled(v56, type);
          if (backtrace_string)
          {
            if (v60)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_failure_message";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_97;
          }
          if (v60)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_failure_message";
            size_t v58 = "%{public}s called with null ohttp, no backtrace";
LABEL_96:
            _os_log_impl(&dword_1830D4000, v56, v57, v58, buf, 0xCu);
          }
        }
LABEL_97:
        if (v55) {
          free(v55);
        }
        goto LABEL_64;
      }
      uint64_t v36 = *(void *)(a1 + 40);
      if (v36 && (*(unsigned char *)(v36 + 348) & 1) != 0
        || (pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once),
            networkd_settings_init(),
            unint64_t v30 = gLogObj,
            !os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)))
      {
LABEL_60:
        nw_frame_finalize(a2);
        return 1;
      }
      uint64_t v37 = *(void *)(a1 + 40);
      uint64_t v38 = "";
      BOOL v39 = v37 == 0;
      if (v37) {
        uint64_t v40 = (const char *)(v37 + 349);
      }
      else {
        uint64_t v40 = "";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_read_response_block_invoke";
      if (!v39) {
        uint64_t v38 = " ";
      }
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v40;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v64 = v38;
      BOOL v35 = "%{public}s %{public}s%sNo HTTP response in metadata";
    }
    else
    {
      uint64_t v29 = *(void *)(a1 + 40);
      if (v29 && (*(unsigned char *)(v29 + 348) & 1) != 0) {
        goto LABEL_60;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v30 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      uint64_t v31 = *(void *)(a1 + 40);
      unint64_t v32 = "";
      BOOL v33 = v31 == 0;
      if (v31) {
        int v34 = (const char *)(v31 + 349);
      }
      else {
        int v34 = "";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_read_response_block_invoke";
      if (!v33) {
        unint64_t v32 = " ";
      }
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v34;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v64 = v32;
      BOOL v35 = "%{public}s %{public}s%sNo HTTP metadata in input frame";
    }
    _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_ERROR, v35, buf, 0x20u);
    goto LABEL_60;
  }
  nw_frame_finalize(a2);
  uint64_t v18 = *(void *)(a1 + 40);
  if (!v18 || (*(unsigned char *)(v18 + 348) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v19 = *(void *)(a1 + 40);
        uint64_t v20 = "";
        BOOL v21 = v19 == 0;
        if (v19) {
          size_t v22 = (const char *)(v19 + 349);
        }
        else {
          size_t v22 = "";
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_read_response_block_invoke";
        if (!v21) {
          uint64_t v20 = " ";
        }
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v22;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v64 = v20;
        BOOL v17 = "%{public}s %{public}s%sDropping unneeded input frame";
        goto LABEL_19;
      }
    }
  }
  return 1;
}

void nw_protocol_ohttp_process_response(uint64_t a1)
{
  uint64_t v292 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 312) || (*(unsigned char *)(a1 + 348) & 0x12) == 0)
  {
    nw_ohttp_mark_failed_with_error(a1, 94);
    return;
  }
  if (!*(void *)(a1 + 328)) {
    return;
  }
  uint64_t v2 = (uint64_t *)(a1 + 328);
  *(_DWORD *)buf = 0;
  nw_frame_array_get_frame_count((uint64_t *)(a1 + 328), 1, buf);
  size_t v3 = *(unsigned int *)buf;
  uint64_t v4 = *v2;
  if (nw_frame_unclaimed_length((_DWORD *)*v2) == v3)
  {
    uint64_t v5 = (char *)nw_frame_unclaimed_bytes(v4, 0);
    unint64_t v6 = 0;
    if ((*(unsigned char *)(a1 + 348) & 2) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    if (!v3)
    {
      v227 = __nwlog_obj();
      os_log_type_enabled(v227, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "strict_calloc";
      v228 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v228)) {
        goto LABEL_535;
      }
      free(v228);
    }
    unint64_t v6 = (char *)malloc_type_calloc(1uLL, v3, 0xEAFB8F1AuLL);
    if (!v6)
    {
      v229 = __nwlog_obj();
      os_log_type_enabled(v229, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "strict_calloc";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = 1;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v289 = v3;
      v230 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v230)) {
        goto LABEL_535;
      }
      free(v230);
    }
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    uint64_t v289 = 0;
    v276[0] = MEMORY[0x1E4F143A8];
    v276[1] = 0x40000000;
    v277 = ___ZL34nw_protocol_ohttp_process_responseP17nw_protocol_ohttp_block_invoke;
    v278 = &unk_1E523F3E8;
    v279 = buf;
    v280 = v6;
    uint64_t v14 = *v2;
    do
    {
      if (!v14) {
        break;
      }
      uint64_t v15 = *(void *)(v14 + 32);
      char v16 = ((uint64_t (*)(void *))v277)(v276);
      uint64_t v14 = v15;
    }
    while ((v16 & 1) != 0);
    _Block_object_dispose(buf, 8);
    uint64_t v5 = v6;
    if ((*(unsigned char *)(a1 + 348) & 2) == 0)
    {
LABEL_6:
      uint64_t v7 = *(const char **)(a1 + 280);
      if (v7)
      {
        size_t v282 = 0;
        BOOL v8 = nw_http_decrypt_oblivious_response(v5, v3, v7, *(void *)(a1 + 176), *(void *)(a1 + 184), *(const void **)(a1 + 160), *(void *)(a1 + 168), &v282);
        if (v8)
        {
          unint64_t v9 = v282;
          *(void *)(a1 + 224) = v8;
          *(void *)(a1 + 232) = v9;
          goto LABEL_9;
        }
        if ((*(unsigned char *)(a1 + 348) & 1) != 0
          || (pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once),
              networkd_settings_init(),
              v188 = gLogObj,
              !os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)))
        {
LABEL_372:
          nw_ohttp_mark_failed_with_error(a1, 80);
          return;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 349;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v289 = (uint64_t)" ";
        v189 = "%{public}s %{public}s%sFailed to decrypt oblivious response";
LABEL_371:
        _os_log_impl(&dword_1830D4000, v188, OS_LOG_TYPE_ERROR, v189, buf, 0x20u);
        goto LABEL_372;
      }
      if (v5)
      {
        if (v3)
        {
          uint64_t v176 = *(void *)(a1 + 176);
          if (v176)
          {
            uint64_t v177 = *(void *)(a1 + 184);
            if (v177)
            {
              uint64_t v178 = *(const void **)(a1 + 160);
              if (v178)
              {
                size_t v179 = *(void *)(a1 + 168);
                if (v179)
                {
                  size_t v282 = 0;
                  BOOL v180 = nw_http_decrypt_oblivious_response(v5, v3, "message/bhttp", v176, v177, v178, v179, &v282);
                  if (v180)
                  {
                    v181 = (_DWORD *)v180;
                    if (v282)
                    {
                      v281[0] = 0;
                      uint64_t v182 = nw_http_copy_metadata_from_binary_message((_DWORD *)v180, v282, v281, 0);
                      if (!v182)
                      {
                        __int16 v192 = __nwlog_obj();
                        if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                          _os_log_impl(&dword_1830D4000, v192, OS_LOG_TYPE_ERROR, "%{public}s Failed to extract HTTP metadata", buf, 0xCu);
                        }
                        free(v181);
                        goto LABEL_368;
                      }
                      char v183 = v182;
                      size_t v184 = v281[0];
                      if (!v281[0])
                      {
                        free(v181);
                        size_t v187 = 0;
                        v185 = 0;
                        goto LABEL_354;
                      }
                      v185 = (char *)malloc_type_calloc(1uLL, v281[0], 0xEAFB8F1AuLL);
                      if (v185)
                      {
                        BOOL v186 = nw_http_fillout_body_from_binary_message(v181, v282, v185, v281[0], v281);
                        free(v181);
                        if (v186)
                        {
LABEL_323:
                          size_t v187 = v281[0];
LABEL_354:
                          *(void *)(a1 + 224) = v185;
                          *(void *)(a1 + 232) = v187;
                          *(void *)(a1 + 144) = v183;
LABEL_9:
                          if ((*(unsigned char *)(a1 + 348) & 1) == 0)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            uint64_t v10 = gLogObj;
                            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                            {
                              *(_DWORD *)buf = 136446722;
                              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = a1 + 349;
                              *(_WORD *)&buf[22] = 2080;
                              uint64_t v289 = (uint64_t)" ";
                              _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sProcessed response", buf, 0x20u);
                            }
                          }
                          *(unsigned char *)(a1 + 292) |= 4u;
                          *(_DWORD *)(a1 + 288) = 4;
                          *(void *)(a1 + 240) = 0;
                          nw_protocol_ohttp_deliver_response(a1, a1 + 64);
                          if (gLogDatapath)
                          {
                            v233 = __nwlog_obj();
                            if (os_log_type_enabled(v233, OS_LOG_TYPE_DEBUG))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                              _os_log_impl(&dword_1830D4000, v233, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                            }
                          }
                          *(void *)buf = MEMORY[0x1E4F143A8];
                          *(void *)&buf[8] = 0x40000000;
                          *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_29090;
                          uint64_t v289 = (uint64_t)&__block_descriptor_tmp_17_29091;
                          *(void *)v290 = v2;
                          v290[8] = 1;
                          uint64_t v11 = *v2;
                          do
                          {
                            if (!v11) {
                              break;
                            }
                            uint64_t v12 = *(void *)(v11 + 32);
                            char v13 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
                            uint64_t v11 = v12;
                          }
                          while ((v13 & 1) != 0);
                          goto LABEL_461;
                        }
                        free(v185);
                        goto LABEL_365;
                      }
                      v248 = __nwlog_obj();
                      os_log_type_enabled(v248, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "strict_calloc";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = 1;
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v289 = v184;
                      v249 = (void *)_os_log_send_and_compose_impl();
                      if (!__nwlog_abort((uint64_t)v249))
                      {
                        free(v249);
                        BOOL v250 = nw_http_fillout_body_from_binary_message(v181, v282, 0, v281[0], v281);
                        free(v181);
                        if (v250) {
                          goto LABEL_323;
                        }
LABEL_365:
                        os_release(v183);
                        __int16 v190 = __nwlog_obj();
                        if (!os_log_type_enabled(v190, OS_LOG_TYPE_ERROR)) {
                          goto LABEL_368;
                        }
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                        v191 = "%{public}s Failed to fill out body content";
                        goto LABEL_367;
                      }
LABEL_535:
                      __break(1u);
                      return;
                    }
                    free((void *)v180);
                    __int16 v190 = __nwlog_obj();
                    if (!os_log_type_enabled(v190, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_368;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                    v191 = "%{public}s Binary message is empty";
                  }
                  else
                  {
                    __int16 v190 = __nwlog_obj();
                    if (!os_log_type_enabled(v190, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_368;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                    v191 = "%{public}s Failed to decrypt oblivious response";
                  }
LABEL_367:
                  _os_log_impl(&dword_1830D4000, v190, OS_LOG_TYPE_ERROR, v191, buf, 0xCu);
                  goto LABEL_368;
                }
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                v234 = (char *)_os_log_send_and_compose_impl();
                LOBYTE(v282) = 16;
                LOBYTE(v281[0]) = 0;
                if (__nwlog_fault(v234, &v282, v281))
                {
                  if (v282 == 17)
                  {
                    v235 = __nwlog_obj();
                    os_log_type_t v236 = v282;
                    if (!os_log_type_enabled(v235, (os_log_type_t)v282)) {
                      goto LABEL_524;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                    v237 = "%{public}s called with null request_enc_length";
                    goto LABEL_523;
                  }
                  if (!LOBYTE(v281[0]))
                  {
                    v235 = __nwlog_obj();
                    os_log_type_t v236 = v282;
                    if (!os_log_type_enabled(v235, (os_log_type_t)v282)) {
                      goto LABEL_524;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                    v237 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
                    goto LABEL_523;
                  }
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  v235 = __nwlog_obj();
                  os_log_type_t v236 = v282;
                  BOOL v247 = os_log_type_enabled(v235, (os_log_type_t)v282);
                  if (!backtrace_string)
                  {
                    if (!v247) {
                      goto LABEL_524;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                    v237 = "%{public}s called with null request_enc_length, no backtrace";
                    goto LABEL_523;
                  }
                  if (v247)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = backtrace_string;
                    _os_log_impl(&dword_1830D4000, v235, v236, "%{public}s called with null request_enc_length, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(backtrace_string);
                }
LABEL_524:
                if (!v234) {
                  goto LABEL_368;
                }
                goto LABEL_525;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
              v234 = (char *)_os_log_send_and_compose_impl();
              LOBYTE(v282) = 16;
              LOBYTE(v281[0]) = 0;
              if (!__nwlog_fault(v234, &v282, v281)) {
                goto LABEL_524;
              }
              if (v282 == 17)
              {
                v235 = __nwlog_obj();
                os_log_type_t v236 = v282;
                if (!os_log_type_enabled(v235, (os_log_type_t)v282)) {
                  goto LABEL_524;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                v237 = "%{public}s called with null request_enc";
                goto LABEL_523;
              }
              if (!LOBYTE(v281[0]))
              {
                v235 = __nwlog_obj();
                os_log_type_t v236 = v282;
                if (!os_log_type_enabled(v235, (os_log_type_t)v282)) {
                  goto LABEL_524;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                v237 = "%{public}s called with null request_enc, backtrace limit exceeded";
                goto LABEL_523;
              }
              v239 = (char *)__nw_create_backtrace_string();
              v235 = __nwlog_obj();
              os_log_type_t v236 = v282;
              BOOL v245 = os_log_type_enabled(v235, (os_log_type_t)v282);
              if (!v239)
              {
                if (!v245) {
                  goto LABEL_524;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                v237 = "%{public}s called with null request_enc, no backtrace";
                goto LABEL_523;
              }
              if (v245)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v239;
                v241 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
                goto LABEL_484;
              }
LABEL_485:
              free(v239);
              if (!v234) {
                goto LABEL_368;
              }
LABEL_525:
              free(v234);
LABEL_368:
              *(void *)(a1 + 144) = 0;
              if (*(unsigned char *)(a1 + 348)) {
                goto LABEL_372;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v188 = gLogObj;
              if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
                goto LABEL_372;
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = a1 + 349;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v289 = (uint64_t)" ";
              v189 = "%{public}s %{public}s%sFailed to process response";
              goto LABEL_371;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
            v234 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(v282) = 16;
            LOBYTE(v281[0]) = 0;
            if (!__nwlog_fault(v234, &v282, v281)) {
              goto LABEL_524;
            }
            if (v282 == 17)
            {
              v235 = __nwlog_obj();
              os_log_type_t v236 = v282;
              if (!os_log_type_enabled(v235, (os_log_type_t)v282)) {
                goto LABEL_524;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
              v237 = "%{public}s called with null request_context_length";
              goto LABEL_523;
            }
            if (!LOBYTE(v281[0]))
            {
              v235 = __nwlog_obj();
              os_log_type_t v236 = v282;
              if (!os_log_type_enabled(v235, (os_log_type_t)v282)) {
                goto LABEL_524;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
              v237 = "%{public}s called with null request_context_length, backtrace limit exceeded";
              goto LABEL_523;
            }
            v239 = (char *)__nw_create_backtrace_string();
            v235 = __nwlog_obj();
            os_log_type_t v236 = v282;
            BOOL v244 = os_log_type_enabled(v235, (os_log_type_t)v282);
            if (!v239)
            {
              if (!v244) {
                goto LABEL_524;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
              v237 = "%{public}s called with null request_context_length, no backtrace";
              goto LABEL_523;
            }
            if (!v244) {
              goto LABEL_485;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v239;
            v241 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
LABEL_484:
            _os_log_impl(&dword_1830D4000, v235, v236, v241, buf, 0x16u);
            goto LABEL_485;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
          v234 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(v282) = 16;
          LOBYTE(v281[0]) = 0;
          if (!__nwlog_fault(v234, &v282, v281)) {
            goto LABEL_524;
          }
          if (v282 != 17)
          {
            if (!LOBYTE(v281[0]))
            {
              v235 = __nwlog_obj();
              os_log_type_t v236 = v282;
              if (!os_log_type_enabled(v235, (os_log_type_t)v282)) {
                goto LABEL_524;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
              v237 = "%{public}s called with null request_context, backtrace limit exceeded";
              goto LABEL_523;
            }
            v239 = (char *)__nw_create_backtrace_string();
            v235 = __nwlog_obj();
            os_log_type_t v236 = v282;
            BOOL v243 = os_log_type_enabled(v235, (os_log_type_t)v282);
            if (!v239)
            {
              if (!v243) {
                goto LABEL_524;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
              v237 = "%{public}s called with null request_context, no backtrace";
              goto LABEL_523;
            }
            if (!v243) {
              goto LABEL_485;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v239;
            v241 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
            goto LABEL_484;
          }
          v235 = __nwlog_obj();
          os_log_type_t v236 = v282;
          if (!os_log_type_enabled(v235, (os_log_type_t)v282)) {
            goto LABEL_524;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
          v237 = "%{public}s called with null request_context";
        }
        else
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
          v234 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(v282) = 16;
          LOBYTE(v281[0]) = 0;
          if (!__nwlog_fault(v234, &v282, v281)) {
            goto LABEL_524;
          }
          if (v282 != 17)
          {
            if (!LOBYTE(v281[0]))
            {
              v235 = __nwlog_obj();
              os_log_type_t v236 = v282;
              if (!os_log_type_enabled(v235, (os_log_type_t)v282)) {
                goto LABEL_524;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
              v237 = "%{public}s called with null response_length, backtrace limit exceeded";
              goto LABEL_523;
            }
            v239 = (char *)__nw_create_backtrace_string();
            v235 = __nwlog_obj();
            os_log_type_t v236 = v282;
            BOOL v242 = os_log_type_enabled(v235, (os_log_type_t)v282);
            if (!v239)
            {
              if (!v242) {
                goto LABEL_524;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
              v237 = "%{public}s called with null response_length, no backtrace";
              goto LABEL_523;
            }
            if (!v242) {
              goto LABEL_485;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v239;
            v241 = "%{public}s called with null response_length, dumping backtrace:%{public}s";
            goto LABEL_484;
          }
          v235 = __nwlog_obj();
          os_log_type_t v236 = v282;
          if (!os_log_type_enabled(v235, (os_log_type_t)v282)) {
            goto LABEL_524;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
          v237 = "%{public}s called with null response_length";
        }
      }
      else
      {
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
        v234 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v282) = 16;
        LOBYTE(v281[0]) = 0;
        if (!__nwlog_fault(v234, &v282, v281)) {
          goto LABEL_524;
        }
        if (v282 != 17)
        {
          if (!LOBYTE(v281[0]))
          {
            v235 = __nwlog_obj();
            os_log_type_t v236 = v282;
            if (!os_log_type_enabled(v235, (os_log_type_t)v282)) {
              goto LABEL_524;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
            v237 = "%{public}s called with null response_buffer, backtrace limit exceeded";
            goto LABEL_523;
          }
          v239 = (char *)__nw_create_backtrace_string();
          v235 = __nwlog_obj();
          os_log_type_t v236 = v282;
          BOOL v240 = os_log_type_enabled(v235, (os_log_type_t)v282);
          if (!v239)
          {
            if (!v240) {
              goto LABEL_524;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
            v237 = "%{public}s called with null response_buffer, no backtrace";
            goto LABEL_523;
          }
          if (!v240) {
            goto LABEL_485;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v239;
          v241 = "%{public}s called with null response_buffer, dumping backtrace:%{public}s";
          goto LABEL_484;
        }
        v235 = __nwlog_obj();
        os_log_type_t v236 = v282;
        if (!os_log_type_enabled(v235, (os_log_type_t)v282)) {
          goto LABEL_524;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_create_message_from_oblivious_response";
        v237 = "%{public}s called with null response_buffer";
      }
LABEL_523:
      _os_log_impl(&dword_1830D4000, v235, v236, v237, buf, 0xCu);
      goto LABEL_524;
    }
  }
  v267 = v6;
  if (!v5 || !v3) {
    goto LABEL_457;
  }
  dispatch_block_t destructor = (dispatch_block_t)*MEMORY[0x1E4F143F0];
  v268 = (uint64_t *)(a1 + 328);
  while (1)
  {
    char v17 = *(unsigned char *)(a1 + 348);
    if ((v17 & 4) != 0)
    {
      unsigned int v18 = *v5;
      if (v18 >= 0x40) {
        goto LABEL_54;
      }
      goto LABEL_35;
    }
    if (*(void *)(a1 + 248))
    {
      unsigned int v18 = *v5;
      if (v18 < 0x40)
      {
LABEL_33:
        unint64_t v19 = v18;
        unint64_t v20 = 1;
LABEL_77:
        if (v19 > v3 - v20) {
          goto LABEL_452;
        }
        unint64_t v37 = 0;
        BOOL v272 = v19 == 0;
        goto LABEL_98;
      }
LABEL_49:
      unsigned int v31 = v18 >> 6;
      if (v31 == 2)
      {
        if (v3 < 4) {
          goto LABEL_452;
        }
        unint64_t v19 = bswap32(*(_DWORD *)v5 & 0xFFFFFF7F);
        unint64_t v20 = 4;
      }
      else if (v31 == 1)
      {
        if (v3 < 2) {
          goto LABEL_452;
        }
        unint64_t v19 = bswap32(*(_WORD *)v5 & 0xFFBF) >> 16;
        unint64_t v20 = 2;
      }
      else
      {
        if (v3 < 8) {
          goto LABEL_452;
        }
        unint64_t v19 = bswap64(*(void *)v5 & 0xFFFFFFFFFFFFFF3FLL);
        unint64_t v20 = 8;
      }
      goto LABEL_77;
    }
    cchpke_params_x25519_AESGCM128_HKDF_SHA256();
    unint64_t v23 = cchpke_params_sizeof_aead_key();
    unint64_t v24 = cchpke_params_sizeof_aead_nonce();
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    BOOL v26 = v3 >= v25;
    v3 -= v25;
    if (!v26)
    {
      if ((*(unsigned char *)(a1 + 348) & 1) == 0)
      {
        v212 = __nwlog_obj();
        if (os_log_type_enabled(v212, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 349;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v289 = (uint64_t)" ";
          v199 = "%{public}s %{public}s%sNot enough bytes for nonce length";
          v213 = v212;
          os_log_type_t v214 = OS_LOG_TYPE_ERROR;
          goto LABEL_456;
        }
      }
      goto LABEL_457;
    }
    if (!v25)
    {
      char v124 = __nwlog_obj();
      os_log_type_enabled(v124, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "strict_calloc";
      char v125 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v125)) {
        goto LABEL_535;
      }
      free(v125);
    }
    BOOL v27 = malloc_type_calloc(1uLL, v25, 0xEAFB8F1AuLL);
    if (!v27)
    {
      size_t v126 = __nwlog_obj();
      os_log_type_enabled(v126, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "strict_calloc";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = 1;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v289 = v25;
      uint64_t v127 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v127)) {
        goto LABEL_535;
      }
      free(v127);
    }
    *(void *)(a1 + 248) = v27;
    memcpy(v27, v5, v25);
    *(void *)(a1 + 256) = v25;
    size_t v282 = 0;
    v283 = &v282;
    uint64_t v284 = 0x2000000000;
    LODWORD(v285) = v25;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL45nw_protocol_finalize_partial_temp_frame_arrayP16nw_frame_array_sjP11nw_protocolb_block_invoke;
    uint64_t v289 = (uint64_t)&unk_1E523F450;
    *(void *)v290 = &v282;
    *(void *)&v290[8] = v2;
    char v291 = 1;
    *(void *)&v290[16] = a1;
    uint64_t v28 = *(void *)(a1 + 328);
    do
    {
      if (!v28) {
        break;
      }
      uint64_t v29 = *(void *)(v28 + 32);
      char v30 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
      uint64_t v28 = v29;
    }
    while ((v30 & 1) != 0);
    _Block_object_dispose(&v282, 8);
    if (!v3) {
      break;
    }
    char v17 = *(unsigned char *)(a1 + 348);
    v5 += v25;
    unsigned int v18 = *v5;
    if ((v17 & 4) == 0)
    {
      if (v18 <= 0x3F) {
        goto LABEL_33;
      }
      goto LABEL_49;
    }
    if (v18 > 0x3F)
    {
LABEL_54:
      unsigned int v32 = v18 >> 6;
      if (v32 == 2)
      {
        if (v3 < 4) {
          goto LABEL_452;
        }
        unint64_t v21 = bswap32(*(_DWORD *)v5 & 0xFFFFFF7F);
        uint64_t v22 = 4;
      }
      else if (v32 == 1)
      {
        if (v3 < 2) {
          goto LABEL_452;
        }
        unint64_t v21 = bswap32(*(_WORD *)v5 & 0xFFBF) >> 16;
        uint64_t v22 = 2;
      }
      else
      {
        if (v3 < 8) {
          goto LABEL_452;
        }
        unint64_t v21 = bswap64(*(void *)v5 & 0xFFFFFFFFFFFFFF3FLL);
        uint64_t v22 = 8;
      }
      goto LABEL_62;
    }
LABEL_35:
    unint64_t v21 = v18;
    uint64_t v22 = 1;
LABEL_62:
    unint64_t v33 = v3 - v22;
    if (v21 > v3 - v22) {
      goto LABEL_452;
    }
    int v34 = &v5[v22];
    if (v21)
    {
      BOOL v272 = 0;
      if (!v33) {
        goto LABEL_452;
      }
    }
    else
    {
      if (!v33) {
        goto LABEL_452;
      }
      unint64_t v21 = *v34;
      if (v21 > 0x3F)
      {
        unsigned int v36 = v21 >> 6;
        if (v36 == 2)
        {
          if (v33 < 4) {
            goto LABEL_452;
          }
          unint64_t v21 = bswap32(*(_DWORD *)v34 & 0xFFFFFF7F);
          uint64_t v35 = 4;
        }
        else if (v36 == 1)
        {
          if (v33 < 2) {
            goto LABEL_452;
          }
          unint64_t v21 = bswap32(*(_WORD *)v34 & 0xFFBF) >> 16;
          uint64_t v35 = 2;
        }
        else
        {
          if (v33 < 8) {
            goto LABEL_452;
          }
          unint64_t v21 = bswap64(*(void *)v34 & 0xFFFFFFFFFFFFFF3FLL);
          uint64_t v35 = 8;
        }
      }
      else
      {
        uint64_t v35 = 1;
      }
      v33 -= v35;
      if (v21 > v33) {
        goto LABEL_452;
      }
      v34 += v35;
      v22 += v35;
      BOOL v272 = 1;
      if (!v33) {
        goto LABEL_452;
      }
    }
    unint64_t v37 = *v34;
    if (v37 > 0x3F)
    {
      if (v37 >> 6 == 2)
      {
        if (v33 < 4) {
          goto LABEL_452;
        }
        unint64_t v37 = bswap32(*(_DWORD *)v34 & 0xFFFFFF7F);
        unint64_t v38 = 4;
      }
      else if (v37 >> 6 == 1)
      {
        if (v33 < 2) {
          goto LABEL_452;
        }
        unint64_t v37 = bswap32(*(_WORD *)v34 & 0xFFBF) >> 16;
        unint64_t v38 = 2;
      }
      else
      {
        if (v33 < 8) {
          goto LABEL_452;
        }
        unint64_t v37 = bswap64(*(void *)v34 & 0xFFFFFFFFFFFFFF3FLL);
        unint64_t v38 = 8;
      }
    }
    else
    {
      unint64_t v38 = 1;
    }
    unint64_t v19 = v21 - v38;
    if (v21 < v38 || v37 > v33 - v38) {
      goto LABEL_452;
    }
    unint64_t v20 = v38 + v22;
LABEL_98:
    if (v3 < v20)
    {
      if ((v17 & 1) == 0)
      {
        v193 = __nwlog_obj();
        if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 349;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v289 = (uint64_t)" ";
          _os_log_impl(&dword_1830D4000, v193, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to parse chunk (fatal)", buf, 0x20u);
        }
      }
      __int16 v194 = v267;
      if (gLogDatapath)
      {
        v251 = __nwlog_obj();
        if (os_log_type_enabled(v251, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
          _os_log_impl(&dword_1830D4000, v251, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
        }
      }
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_29090;
      uint64_t v289 = (uint64_t)&__block_descriptor_tmp_17_29091;
      *(void *)v290 = v2;
      v290[8] = 1;
      uint64_t v195 = *v2;
      do
      {
        if (!v195) {
          break;
        }
        uint64_t v196 = *(void *)(v195 + 32);
        char v197 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
        uint64_t v195 = v196;
      }
      while ((v197 & 1) != 0);
      goto LABEL_402;
    }
    if ((v17 & 4) == 0 && !v19)
    {
      if ((v17 & 0x10) == 0)
      {
        if ((v17 & 1) == 0)
        {
          v198 = __nwlog_obj();
          if (os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v289 = (uint64_t)" ";
            v199 = "%{public}s %{public}s%sNot enough bytes to parse final chunk";
            goto LABEL_455;
          }
        }
        goto LABEL_457;
      }
      unint64_t v19 = v3 - v20;
    }
    if (v19 + v20 > v3)
    {
      if ((v17 & 1) == 0)
      {
        v198 = __nwlog_obj();
        if (os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 349;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v289 = (uint64_t)" ";
          v199 = "%{public}s %{public}s%sNot enough bytes to parse complete chunk";
          goto LABEL_455;
        }
      }
      goto LABEL_457;
    }
    if ((v17 & 4) != 0)
    {
      uint64_t v39 = a1 + 64;
      if (*(void *)(a1 + 64) != v37)
      {
        uint64_t v40 = *(char **)(a1 + 296);
        if (!v40) {
          goto LABEL_538;
        }
        size_t v282 = 0;
        v283 = &v282;
        uint64_t v284 = 0x2000000000;
        uint64_t v285 = 0;
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZL44nw_protocol_ohttp_get_context_for_context_idP17nw_protocol_ohttpy_block_invoke;
        uint64_t v289 = (uint64_t)&unk_1E523F2B8;
        *(void *)v290 = &v282;
        *(void *)&v290[8] = v37;
        nw_hash_table_apply(v40, (uint64_t)buf);
        uint64_t v39 = v283[3];
        _Block_object_dispose(&v282, 8);
        char v17 = *(unsigned char *)(a1 + 348);
        if (!v39)
        {
LABEL_538:
          if ((v17 & 1) == 0)
          {
            v208 = __nwlog_obj();
            if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = a1 + 349;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v289 = (uint64_t)" ";
              *(_WORD *)v290 = 2048;
              *(void *)&v290[2] = v37;
              _os_log_impl(&dword_1830D4000, v208, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to find context for ID %llu", buf, 0x2Au);
            }
          }
          __int16 v194 = v267;
          if (gLogDatapath)
          {
            v254 = __nwlog_obj();
            if (os_log_type_enabled(v254, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_1830D4000, v254, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 0x40000000;
          *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_29090;
          uint64_t v289 = (uint64_t)&__block_descriptor_tmp_17_29091;
          *(void *)v290 = a1 + 328;
          v290[8] = 1;
          uint64_t v209 = *v268;
          do
          {
            if (!v209) {
              break;
            }
            uint64_t v210 = *(void *)(v209 + 32);
            char v211 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
            uint64_t v209 = v210;
          }
          while ((v211 & 1) != 0);
          goto LABEL_402;
        }
      }
    }
    else
    {
      uint64_t v39 = a1 + 64;
    }
    if (*(unsigned char *)(v39 + 228))
    {
      if ((v17 & 1) == 0)
      {
        v200 = __nwlog_obj();
        if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 349;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v289 = (uint64_t)" ";
          *(_WORD *)v290 = 2048;
          *(void *)&v290[2] = v37;
          _os_log_impl(&dword_1830D4000, v200, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sContext ID %llu is used for standalone AEAD, cannot receive responses", buf, 0x2Au);
        }
      }
      __int16 v194 = v267;
      if (gLogDatapath)
      {
        v252 = __nwlog_obj();
        if (os_log_type_enabled(v252, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
          _os_log_impl(&dword_1830D4000, v252, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
        }
      }
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_29090;
      uint64_t v289 = (uint64_t)&__block_descriptor_tmp_17_29091;
      *(void *)v290 = a1 + 328;
      v290[8] = 1;
      uint64_t v201 = *v268;
      do
      {
        if (!v201) {
          break;
        }
        uint64_t v202 = *(void *)(v201 + 32);
        char v203 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
        uint64_t v201 = v202;
      }
      while ((v203 & 1) != 0);
      goto LABEL_402;
    }
    v269 = v5;
    if ((v17 & 4) != 0 && !*(void *)(v39 + 184))
    {
      if (*(void *)(v39 + 200))
      {
        if ((v17 & 1) == 0)
        {
          v215 = __nwlog_obj();
          if (os_log_type_enabled(v215, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v289 = (uint64_t)" ";
            _os_log_impl(&dword_1830D4000, v215, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo nonce parsed before non-initial chunk", buf, 0x20u);
          }
        }
        __int16 v194 = v267;
        if (gLogDatapath)
        {
          v255 = __nwlog_obj();
          if (os_log_type_enabled(v255, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
            _os_log_impl(&dword_1830D4000, v255, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
          }
        }
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_29090;
        uint64_t v289 = (uint64_t)&__block_descriptor_tmp_17_29091;
        *(void *)v290 = a1 + 328;
        v290[8] = 1;
        uint64_t v216 = *v268;
        do
        {
          if (!v216) {
            break;
          }
          uint64_t v217 = *(void *)(v216 + 32);
          char v218 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
          uint64_t v216 = v217;
        }
        while ((v218 & 1) != 0);
        goto LABEL_402;
      }
      unint64_t v270 = v20;
      cchpke_params_x25519_AESGCM128_HKDF_SHA256();
      size_t v41 = v19;
      unint64_t v42 = cchpke_params_sizeof_aead_key();
      unint64_t v43 = cchpke_params_sizeof_aead_nonce();
      if (v42 <= v43) {
        size_t v44 = v43;
      }
      else {
        size_t v44 = v42;
      }
      BOOL v26 = v41 >= v44;
      unint64_t v45 = v41 - v44;
      if (!v26)
      {
        if ((*(unsigned char *)(a1 + 348) & 1) == 0)
        {
          v219 = __nwlog_obj();
          if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v289 = (uint64_t)" ";
            _os_log_impl(&dword_1830D4000, v219, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sChunk is too small for nonce length", buf, 0x20u);
          }
        }
        __int16 v194 = v267;
        if (gLogDatapath)
        {
          v256 = __nwlog_obj();
          if (os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
            _os_log_impl(&dword_1830D4000, v256, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
          }
        }
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_29090;
        uint64_t v289 = (uint64_t)&__block_descriptor_tmp_17_29091;
        *(void *)v290 = a1 + 328;
        v290[8] = 1;
        uint64_t v220 = *v268;
        do
        {
          if (!v220) {
            break;
          }
          uint64_t v221 = *(void *)(v220 + 32);
          char v222 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
          uint64_t v220 = v221;
        }
        while ((v222 & 1) != 0);
LABEL_402:
        if (v194) {
          free(v194);
        }
        nw_ohttp_mark_failed_with_error(a1, 22);
        return;
      }
      unint64_t v19 = v45;
      if (!v44)
      {
        uint64_t v156 = __nwlog_obj();
        os_log_type_enabled(v156, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "strict_calloc";
        uint64_t v157 = (void *)_os_log_send_and_compose_impl();
        if (__nwlog_abort((uint64_t)v157)) {
          goto LABEL_535;
        }
        free(v157);
      }
      BOOL v46 = malloc_type_calloc(1uLL, v44, 0xEAFB8F1AuLL);
      if (!v46)
      {
        v158 = __nwlog_obj();
        os_log_type_enabled(v158, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "strict_calloc";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = 1;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v289 = v44;
        v159 = (void *)_os_log_send_and_compose_impl();
        if (__nwlog_abort((uint64_t)v159)) {
          goto LABEL_535;
        }
        free(v159);
      }
      *(void *)(v39 + 184) = v46;
      memcpy(v46, &v5[v270], v44);
      *(void *)(v39 + 192) = v44;
      unint64_t v20 = v44 + v270;
    }
    if (v19)
    {
      if ((*(unsigned char *)(a1 + 348) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v123 = __nwlog_obj();
          if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v289 = (uint64_t)" ";
            *(_WORD *)v290 = 2048;
            *(void *)&v290[2] = v19;
            *(_WORD *)&v290[10] = 2048;
            *(void *)&v290[12] = v37;
            _os_log_impl(&dword_1830D4000, v123, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sParsing chunk of length %llu for context %llu", buf, 0x34u);
          }
        }
      }
      if (*(void *)(v39 + 216)) {
        size_t v47 = *(const char **)(v39 + 216);
      }
      else {
        size_t v47 = "message/bhttp";
      }
      size_t size = 0;
      BOOL v48 = nw_http_decrypt_chunked_oblivious_response_chunk((uint64_t)&v5[v20], v19, v47, *(void *)(v39 + 200), v272, *(void *)(v39 + 112), *(void *)(v39 + 120), *(const void **)(v39 + 96), *(void *)(v39 + 104), *(const void **)(v39 + 184), *(void *)(v39 + 192), &size);
      if (!v48)
      {
        if ((*(unsigned char *)(a1 + 348) & 1) == 0)
        {
          v204 = __nwlog_obj();
          if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v289 = (uint64_t)" ";
            _os_log_impl(&dword_1830D4000, v204, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to decrypt oblivious response chunk", buf, 0x20u);
          }
        }
        if (gLogDatapath)
        {
          v253 = __nwlog_obj();
          if (os_log_type_enabled(v253, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
            _os_log_impl(&dword_1830D4000, v253, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
          }
        }
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_29090;
        uint64_t v289 = (uint64_t)&__block_descriptor_tmp_17_29091;
        *(void *)v290 = a1 + 328;
        v290[8] = 1;
        uint64_t v205 = *v268;
        do
        {
          if (!v205) {
            break;
          }
          uint64_t v206 = *(void *)(v205 + 32);
          char v207 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
          uint64_t v205 = v206;
        }
        while ((v207 & 1) != 0);
        if (v267) {
          free(v267);
        }
        goto LABEL_372;
      }
      size_t v49 = v48;
      unint64_t v271 = v20;
      if (size)
      {
        unint64_t v50 = v19;
        BOOL v51 = dispatch_data_create((const void *)v48, size, 0, destructor);
        BOOL v52 = v51;
        size_t v53 = *(NSObject **)(v39 + 208);
        if (v53)
        {
          *(void *)(v39 + 208) = dispatch_data_create_concat(*(dispatch_data_t *)(v39 + 208), v51);
          dispatch_release(v53);
          if (v52) {
            dispatch_release(v52);
          }
          int v54 = 0;
        }
        else
        {
          *(void *)(v39 + 208) = v51;
          int v54 = 1;
        }
        unint64_t v19 = v50;
        unint64_t v20 = v271;
      }
      else
      {
        if ((*(unsigned char *)(a1 + 348) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v55 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v289 = (uint64_t)" ";
            _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSuccessfully read empty chunk", buf, 0x20u);
          }
        }
        free(v49);
        size_t v49 = 0;
        int v54 = 0;
      }
      uint64_t v56 = *(void *)(v39 + 200);
      uint64_t v57 = v56 + 1;
      uint64_t v58 = v56 == -1;
      uint64_t v59 = v58 << 63 >> 63;
      *(void *)(v39 + 200) = v57;
      if (v59 == v58 && (v59 & 0x8000000000000000) == 0)
      {
        if (v54) {
          goto LABEL_142;
        }
LABEL_174:
        os_log_type_t v87 = *(NSObject **)(v39 + 208);
        if (v87)
        {
          size_t v88 = dispatch_data_get_size(v87);
          if (!v88)
          {
            uint64_t v128 = __nwlog_obj();
            os_log_type_enabled(v128, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "strict_malloc";
            size_t v129 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v129)) {
              goto LABEL_535;
            }
            free(v129);
            unint64_t v20 = v271;
            size_t v88 = 0;
          }
          uint64_t v89 = v88;
          os_log_type_t v90 = malloc_type_malloc(v88, 0xF2B69DE5uLL);
          if (v90)
          {
            size_t v49 = v90;
            os_log_type_t v91 = *(NSObject **)(v39 + 208);
            size_t v282 = 0;
            v283 = &v282;
            uint64_t v284 = 0x2000000000;
            uint64_t v285 = 0;
            v281[0] = 0;
            v281[1] = (size_t)v281;
            v281[2] = 0x2000000000;
            v281[3] = (size_t)v49;
            if (v91)
            {
              *(void *)buf = MEMORY[0x1E4F143A8];
              *(void *)&buf[8] = 0x40000000;
              *(void *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
              uint64_t v289 = (uint64_t)&unk_1E5242B60;
              *(void *)&v290[8] = v281;
              *(void *)&v290[16] = v89;
              *(void *)v290 = &v282;
              dispatch_data_apply(v91, buf);
            }
            _Block_object_dispose(v281, 8);
            _Block_object_dispose(&v282, 8);
            BOOL v60 = v49;
            size_t v61 = v89;
            if (!*(void *)(v39 + 216)) {
              goto LABEL_180;
            }
LABEL_143:
            uint64_t v62 = *(void **)(v39 + 160);
            uint64_t v5 = v269;
            if (v62)
            {
              if (v49)
              {
                os_log_t log = v60;
                uint64_t v63 = *(void *)(v39 + 168);
                size_t v64 = v61;
                size_t v65 = v63 + v61;
                *(void *)(v39 + 168) = v63 + v61;
                if (!(v63 + v61))
                {
                  v160 = __nwlog_obj();
                  os_log_type_enabled(v160, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "_strict_reallocf";
                  v161 = (void *)_os_log_send_and_compose_impl();
                  if (__nwlog_abort((uint64_t)v161)) {
                    goto LABEL_535;
                  }
                  free(v161);
                  uint64_t v62 = *(void **)(v39 + 160);
                }
                os_log_type_t v66 = (char *)reallocf(v62, v65);
                if (!v66)
                {
                  v258 = __nwlog_obj();
                  os_log_type_enabled(v258, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "_strict_reallocf";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v65;
                  v162 = (void *)_os_log_send_and_compose_impl();
                  if (__nwlog_abort((uint64_t)v162)) {
                    goto LABEL_535;
                  }
                  free(v162);
                }
                *(void *)(v39 + 160) = v66;
                memcpy(&v66[v63], v49, v64);
                uint64_t v5 = v269;
                unint64_t v20 = v271;
                BOOL v60 = log;
                uint64_t v67 = *(NSObject **)(v39 + 208);
                if (!v67) {
                  goto LABEL_194;
                }
LABEL_193:
                dispatch_release(v67);
                *(void *)(v39 + 208) = 0;
                goto LABEL_194;
              }
LABEL_192:
              uint64_t v67 = *(NSObject **)(v39 + 208);
              if (!v67) {
                goto LABEL_194;
              }
              goto LABEL_193;
            }
            if (v60)
            {
              *(void *)(v39 + 160) = v60;
              *(void *)(v39 + 168) = v61;
            }
            else if (v49)
            {
              *(void *)(v39 + 168) = v61;
              size_t __n = v61;
              if (!v61)
              {
                uint64_t v171 = __nwlog_obj();
                os_log_type_enabled(v171, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "strict_malloc";
                uint64_t v172 = (void *)_os_log_send_and_compose_impl();
                if (__nwlog_abort((uint64_t)v172)) {
                  goto LABEL_535;
                }
                free(v172);
                uint64_t v5 = v269;
                unint64_t v20 = v271;
                size_t v61 = 0;
              }
              id v85 = malloc_type_malloc(v61, 0xF2B69DE5uLL);
              if (!v85)
              {
                unint64_t v173 = v19;
                uint64_t v174 = __nwlog_obj();
                os_log_type_enabled(v174, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "strict_malloc";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = __n;
                int v175 = (void *)_os_log_send_and_compose_impl();
                if (__nwlog_abort((uint64_t)v175)) {
                  goto LABEL_535;
                }
                free(v175);
                unint64_t v19 = v173;
                uint64_t v5 = v269;
                unint64_t v20 = v271;
              }
              *(void *)(v39 + 160) = v85;
              memcpy(v85, v49, __n);
            }
            BOOL v60 = 0;
            uint64_t v67 = *(NSObject **)(v39 + 208);
            if (v67) {
              goto LABEL_193;
            }
LABEL_194:
            *(_DWORD *)(v39 + 224) = 4;
            *(void *)(v39 + 176) = 0;
            char v97 = *(unsigned char *)(v39 + 228);
            *(unsigned char *)(v39 + 228) = v97 | 0x20;
            if (v272) {
              *(unsigned char *)(v39 + 228) = v97 | 0x24;
            }
LABEL_273:
            if (v60) {
              free(v60);
            }
            goto LABEL_275;
          }
          v130 = __nwlog_obj();
          os_log_type_enabled(v130, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "strict_malloc";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v89;
          uint64_t v131 = (void *)_os_log_send_and_compose_impl();
          if (__nwlog_abort((uint64_t)v131)) {
            goto LABEL_535;
          }
          free(v131);
          nw_dispatch_data_copyout(*(NSObject **)(v39 + 208), 0, v89);
          BOOL v60 = 0;
          uint64_t v5 = v269;
          unint64_t v20 = v271;
          if (*(void *)(v39 + 216)) {
            goto LABEL_192;
          }
        }
        else
        {
          BOOL v60 = 0;
          uint64_t v5 = v269;
          if (*(void *)(v39 + 216)) {
            goto LABEL_192;
          }
        }
LABEL_256:
        char v132 = v60;
        unint64_t v133 = v19;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
        size_t v134 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v282) = 16;
        LOBYTE(v281[0]) = 0;
        if (__nwlog_fault(v134, &v282, v281))
        {
          if (v282 != 17)
          {
            if (LOBYTE(v281[0]))
            {
              v140 = (char *)__nw_create_backtrace_string();
              uint64_t v141 = __nwlog_obj();
              os_log_type_t v142 = v282;
              BOOL v143 = os_log_type_enabled(v141, (os_log_type_t)v282);
              if (v140)
              {
                if (v143)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v140;
                  _os_log_impl(&dword_1830D4000, v141, v142, "%{public}s called with null response_bytes, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v140);
                goto LABEL_270;
              }
              if (!v143) {
                goto LABEL_270;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
              char v137 = v141;
              os_log_type_t v138 = v142;
              unint64_t v139 = "%{public}s called with null response_bytes, no backtrace";
            }
            else
            {
              __int16 v144 = __nwlog_obj();
              os_log_type_t v145 = v282;
              if (!os_log_type_enabled(v144, (os_log_type_t)v282)) {
                goto LABEL_270;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
              char v137 = v144;
              os_log_type_t v138 = v145;
              unint64_t v139 = "%{public}s called with null response_bytes, backtrace limit exceeded";
            }
LABEL_269:
            _os_log_impl(&dword_1830D4000, v137, v138, v139, buf, 0xCu);
            goto LABEL_270;
          }
          v135 = __nwlog_obj();
          os_log_type_t v136 = v282;
          if (os_log_type_enabled(v135, (os_log_type_t)v282))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
            char v137 = v135;
            os_log_type_t v138 = v136;
            unint64_t v139 = "%{public}s called with null response_bytes";
            goto LABEL_269;
          }
        }
LABEL_270:
        if (v134) {
          free(v134);
        }
LABEL_272:
        unint64_t v19 = v133;
        unint64_t v20 = v271;
        BOOL v60 = v132;
        goto LABEL_273;
      }
      unint64_t v68 = v19;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v69 = *(void *)(v39 + 200);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "ohttp_context->aead_chunk_index";
      *(_WORD *)&buf[22] = 2048;
      uint64_t v289 = 1;
      *(_WORD *)v290 = 2048;
      *(void *)&v290[2] = v69;
      size_t v70 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v282) = 16;
      LOBYTE(v281[0]) = 0;
      if (__nwlog_fault(v70, &v282, v281))
      {
        if (v282 != 17)
        {
          if (LOBYTE(v281[0]))
          {
            char v77 = (char *)__nw_create_backtrace_string();
            BOOL v78 = __nwlog_obj();
            os_log_type_t v79 = v282;
            loga = v78;
            BOOL v80 = os_log_type_enabled(v78, (os_log_type_t)v282);
            if (v77)
            {
              if (v80)
              {
                uint64_t v81 = *(void *)(v39 + 200);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "ohttp_context->aead_chunk_index";
                *(_WORD *)&buf[22] = 2048;
                uint64_t v289 = 1;
                *(_WORD *)v290 = 2048;
                *(void *)&v290[2] = v81;
                *(_WORD *)&v290[10] = 2082;
                *(void *)&v290[12] = v77;
                _os_log_impl(&dword_1830D4000, loga, v79, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v77);
              goto LABEL_171;
            }
            if (!v80) {
              goto LABEL_171;
            }
            uint64_t v86 = *(void *)(v39 + 200);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "ohttp_context->aead_chunk_index";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v289 = 1;
            *(_WORD *)v290 = 2048;
            *(void *)&v290[2] = v86;
            char v74 = loga;
            os_log_type_t v75 = v79;
            uint64_t v76 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          }
          else
          {
            uint64_t v82 = __nwlog_obj();
            os_log_type_t v83 = v282;
            if (!os_log_type_enabled(v82, (os_log_type_t)v282)) {
              goto LABEL_171;
            }
            uint64_t v84 = *(void *)(v39 + 200);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "ohttp_context->aead_chunk_index";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v289 = 1;
            *(_WORD *)v290 = 2048;
            *(void *)&v290[2] = v84;
            char v74 = v82;
            os_log_type_t v75 = v83;
            uint64_t v76 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          }
LABEL_170:
          _os_log_impl(&dword_1830D4000, v74, v75, v76, buf, 0x2Au);
          goto LABEL_171;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v71 = gLogObj;
        os_log_type_t v72 = v282;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v282))
        {
          uint64_t v73 = *(void *)(v39 + 200);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "ohttp_context->aead_chunk_index";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v289 = 1;
          *(_WORD *)v290 = 2048;
          *(void *)&v290[2] = v73;
          char v74 = v71;
          os_log_type_t v75 = v72;
          uint64_t v76 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
          goto LABEL_170;
        }
      }
LABEL_171:
      if (v70) {
        free(v70);
      }
      *(void *)(v39 + 200) = -1;
      unint64_t v19 = v68;
      unint64_t v20 = v271;
      if (!v54) {
        goto LABEL_174;
      }
LABEL_142:
      BOOL v60 = 0;
      size_t v61 = size;
      if (*(void *)(v39 + 216)) {
        goto LABEL_143;
      }
LABEL_180:
      uint64_t v5 = v269;
      if (!v49) {
        goto LABEL_256;
      }
      if (v61)
      {
        if (*(void *)(v39 + 80))
        {
          char v92 = *(unsigned char *)(v39 + 228);
          if ((v92 & 8) == 0) {
            goto LABEL_184;
          }
LABEL_198:
          if ((v92 & 4) == 0)
          {
            os_log_t logc = v60;
            unint64_t v273 = v19;
            size_t __nb = v61;
            unint64_t v101 = v61;
            do
            {
              char v287 = 0;
              size_t v282 = 0;
              v281[0] = 0;
              unint64_t v286 = 0;
              BOOL v102 = nw_http_access_body_chunk_from_indeterminate_binary_message(v49, v101, (v92 & 0x10) == 0, &v282, &v287, (char **)v281, &v286);
              size_t v49 = v281[0];
              unint64_t v101 = v286;
              if (v287)
              {
                *(unsigned char *)(v39 + 228) |= 4u;
                uint64_t v103 = nw_http_copy_trailer_fields_from_indeterminate_binary_message((const char *)v49, v101);
                if (v103)
                {
                  unsigned int v104 = (void *)v103;
                  if ((*(unsigned char *)(a1 + 348) & 1) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    int v105 = gLogObj;
                    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = a1 + 349;
                      *(_WORD *)&buf[22] = 2080;
                      uint64_t v289 = (uint64_t)" ";
                      _os_log_impl(&dword_1830D4000, v105, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived trailer fields from binary HTTP", buf, 0x20u);
                    }
                  }
                  nw_http_metadata_set_trailer_fields(*(void **)(v39 + 80), v104);
                  os_release(v104);
                }
              }
              size_t v106 = v282;
              if (v287 || v282)
              {
                *(unsigned char *)(v39 + 228) |= 0x10u;
                if (v102)
                {
                  if (v106)
                  {
                    uint64_t v107 = *(void **)(v39 + 160);
                    if (v107)
                    {
                      uint64_t v108 = *(void *)(v39 + 168);
                      size_t v109 = v108 + v106;
                      *(void *)(v39 + 168) = v108 + v106;
                      if (!(v108 + v106))
                      {
                        uint64_t v112 = __nwlog_obj();
                        os_log_type_enabled(v112, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "_strict_reallocf";
                        size_t v113 = (void *)_os_log_send_and_compose_impl();
                        if (__nwlog_abort((uint64_t)v113)) {
                          goto LABEL_535;
                        }
                        free(v113);
                        uint64_t v107 = *(void **)(v39 + 160);
                      }
                      char v110 = (char *)reallocf(v107, v109);
                      if (!v110)
                      {
                        v257 = __nwlog_obj();
                        os_log_type_enabled(v257, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "_strict_reallocf";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v109;
                        BOOL v114 = (void *)_os_log_send_and_compose_impl();
                        if (__nwlog_abort((uint64_t)v114)) {
                          goto LABEL_535;
                        }
                        free(v114);
                      }
                      *(void *)(v39 + 160) = v110;
                      memcpy(&v110[v108], v102, v282);
                      unint64_t v20 = v271;
                    }
                    else
                    {
                      *(void *)(v39 + 168) = v106;
                      size_t v111 = malloc_type_malloc(v106, 0xF2B69DE5uLL);
                      if (!v111)
                      {
                        uint64_t v115 = __nwlog_obj();
                        os_log_type_enabled(v115, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "strict_malloc";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v106;
                        __int16 v116 = (void *)_os_log_send_and_compose_impl();
                        if (__nwlog_abort((uint64_t)v116)) {
                          goto LABEL_535;
                        }
                        free(v116);
                        unint64_t v20 = v271;
                      }
                      *(void *)(v39 + 160) = v111;
                      memcpy(v111, v102, v282);
                    }
                  }
                }
              }
              char v92 = *(unsigned char *)(v39 + 228);
            }
            while ((v92 & 4) == 0 && v49 && v101);
            if ((*(unsigned char *)(v39 + 228) & 4) != 0)
            {
              unint64_t v19 = v273;
              BOOL v60 = logc;
            }
            else
            {
              unint64_t v19 = v273;
              BOOL v60 = logc;
              if (v101)
              {
                if (__nb > v101)
                {
                  dispatch_data_t subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(v39 + 208), __nb - v101, v101);
                  __int16 v118 = *(NSObject **)(v39 + 208);
                  if (v118) {
                    dispatch_release(v118);
                  }
                  *(void *)(v39 + 208) = subrange;
                  char v92 = *(unsigned char *)(v39 + 228) | 0x10;
                  BOOL v60 = logc;
                }
                goto LABEL_245;
              }
            }
          }
          os_log_type_t v122 = *(NSObject **)(v39 + 208);
          if (v122)
          {
            dispatch_release(v122);
            *(void *)(v39 + 208) = 0;
            char v92 = *(unsigned char *)(v39 + 228);
          }
          v92 |= 0x10u;
          goto LABEL_245;
        }
        size_t v282 = 0;
        LOBYTE(v281[0]) = 0;
        size_t v98 = v61;
        os_log_type_t v99 = nw_http_copy_metadata_from_binary_message(v49, v61, &v282, (BOOL *)v281);
        if (!v99)
        {
          size_t v119 = v60;
          if ((*(unsigned char *)(a1 + 348) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v120 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = a1 + 349;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v289 = (uint64_t)" ";
              _os_log_impl(&dword_1830D4000, v120, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sUnable to parse metadata", buf, 0x20u);
            }
          }
          BOOL v60 = v119;
          goto LABEL_273;
        }
        *(void *)(v39 + 80) = v99;
        unint64_t v100 = v282;
        char v92 = *(unsigned char *)(v39 + 228) & 0xF7 | (8 * LOBYTE(v281[0]));
        *(unsigned char *)(v39 + 228) = v92;
        *(_DWORD *)(v39 + 224) = 4;
        *(void *)(v39 + 168) = v100;
        *(void *)(v39 + 176) = 0;
        size_t v61 = v98;
        if ((v92 & 8) != 0) {
          goto LABEL_198;
        }
LABEL_184:
        unint64_t v93 = v19;
        size_t v94 = *(void *)(v39 + 168);
        size_t v282 = v94;
        if (v94)
        {
          size_t __na = v61;
          os_log_t logb = v60;
          uint64_t v95 = (char *)malloc_type_calloc(1uLL, v94, 0xEAFB8F1AuLL);
          if (v95)
          {
            if (nw_http_fillout_body_from_binary_message(v49, __na, v95, v94, &v282)) {
              goto LABEL_187;
            }
            free(v95);
LABEL_237:
            unint64_t v19 = v93;
            if ((*(unsigned char *)(a1 + 348) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v121 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = a1 + 349;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v289 = (uint64_t)" ";
                _os_log_impl(&dword_1830D4000, v121, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to fill out body content", buf, 0x20u);
              }
            }
            unint64_t v20 = v271;
            BOOL v60 = logb;
            goto LABEL_273;
          }
          uint64_t v167 = __nwlog_obj();
          os_log_type_enabled(v167, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "strict_calloc";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = 1;
          *(_WORD *)&buf[22] = 2048;
          uint64_t v289 = v94;
          uint64_t v168 = (void *)_os_log_send_and_compose_impl();
          if (__nwlog_abort((uint64_t)v168)) {
            goto LABEL_535;
          }
          free(v168);
          uint64_t v5 = v269;
          if (!nw_http_fillout_body_from_binary_message(v49, __na, 0, v282, &v282)) {
            goto LABEL_237;
          }
LABEL_187:
          *(void *)(v39 + 160) = v95;
          char v92 = *(unsigned char *)(v39 + 228);
          BOOL v60 = logb;
        }
        v92 |= 4u;
        *(unsigned char *)(v39 + 228) = v92;
        uint64_t v96 = *(NSObject **)(v39 + 208);
        unint64_t v19 = v93;
        if (v96)
        {
          dispatch_release(v96);
          *(void *)(v39 + 208) = 0;
          char v92 = *(unsigned char *)(v39 + 228);
        }
        unint64_t v20 = v271;
LABEL_245:
        *(unsigned char *)(v39 + 228) = v92 | 0x20;
        uint64_t v5 = v269;
        goto LABEL_273;
      }
      char v132 = v60;
      unint64_t v133 = v19;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
      v150 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v282) = 16;
      LOBYTE(v281[0]) = 0;
      if (!__nwlog_fault(v150, &v282, v281)) {
        goto LABEL_308;
      }
      if (v282 == 17)
      {
        v151 = __nwlog_obj();
        os_log_type_t v152 = v282;
        if (os_log_type_enabled(v151, (os_log_type_t)v282))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
          int v153 = v151;
          os_log_type_t v154 = v152;
          v155 = "%{public}s called with null response_length";
          goto LABEL_307;
        }
        goto LABEL_308;
      }
      if (LOBYTE(v281[0]))
      {
        uint64_t v163 = (char *)__nw_create_backtrace_string();
        uint64_t v164 = __nwlog_obj();
        os_log_type_t v165 = v282;
        BOOL v166 = os_log_type_enabled(v164, (os_log_type_t)v282);
        if (v163)
        {
          if (v166)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v163;
            _os_log_impl(&dword_1830D4000, v164, v165, "%{public}s called with null response_length, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v163);
          goto LABEL_308;
        }
        if (!v166)
        {
LABEL_308:
          if (v150) {
            free(v150);
          }
          uint64_t v5 = v269;
          goto LABEL_272;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
        int v153 = v164;
        os_log_type_t v154 = v165;
        v155 = "%{public}s called with null response_length, no backtrace";
      }
      else
      {
        v169 = __nwlog_obj();
        os_log_type_t v170 = v282;
        if (!os_log_type_enabled(v169, (os_log_type_t)v282)) {
          goto LABEL_308;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
        int v153 = v169;
        os_log_type_t v154 = v170;
        v155 = "%{public}s called with null response_length, backtrace limit exceeded";
      }
LABEL_307:
      _os_log_impl(&dword_1830D4000, v153, v154, v155, buf, 0xCu);
      goto LABEL_308;
    }
LABEL_275:
    unint64_t v146 = v20 + v19;
    size_t v282 = 0;
    v283 = &v282;
    uint64_t v284 = 0x2000000000;
    LODWORD(v285) = v20 + v19;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL45nw_protocol_finalize_partial_temp_frame_arrayP16nw_frame_array_sjP11nw_protocolb_block_invoke;
    uint64_t v289 = (uint64_t)&unk_1E523F450;
    uint64_t v2 = (uint64_t *)(a1 + 328);
    *(void *)v290 = &v282;
    *(void *)&v290[8] = a1 + 328;
    char v291 = 1;
    *(void *)&v290[16] = a1;
    uint64_t v147 = *(void *)(a1 + 328);
    do
    {
      if (!v147) {
        break;
      }
      uint64_t v148 = *(void *)(v147 + 32);
      char v149 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
      uint64_t v147 = v148;
    }
    while ((v149 & 1) != 0);
    _Block_object_dispose(&v282, 8);
    v5 += v146;
    v3 -= v146;
    if (!v3) {
      goto LABEL_457;
    }
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_parse_chunk_length";
  v223 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(v282) = 16;
  LOBYTE(v281[0]) = 0;
  if (!__nwlog_fault(v223, &v282, v281)) {
    goto LABEL_449;
  }
  if (v282 == 17)
  {
    v224 = __nwlog_obj();
    os_log_type_t v225 = v282;
    if (os_log_type_enabled(v224, (os_log_type_t)v282))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_parse_chunk_length";
      v226 = "%{public}s called with null response_length";
      goto LABEL_448;
    }
    goto LABEL_449;
  }
  if (!LOBYTE(v281[0]))
  {
    v224 = __nwlog_obj();
    os_log_type_t v225 = v282;
    if (!os_log_type_enabled(v224, (os_log_type_t)v282)) {
      goto LABEL_449;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_parse_chunk_length";
    v226 = "%{public}s called with null response_length, backtrace limit exceeded";
LABEL_448:
    _os_log_impl(&dword_1830D4000, v224, v225, v226, buf, 0xCu);
    goto LABEL_449;
  }
  v231 = (char *)__nw_create_backtrace_string();
  v224 = __nwlog_obj();
  os_log_type_t v225 = v282;
  BOOL v232 = os_log_type_enabled(v224, (os_log_type_t)v282);
  if (v231)
  {
    if (v232)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_parse_chunk_length";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v231;
      _os_log_impl(&dword_1830D4000, v224, v225, "%{public}s called with null response_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v231);
    goto LABEL_449;
  }
  if (v232)
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_parse_chunk_length";
    v226 = "%{public}s called with null response_length, no backtrace";
    goto LABEL_448;
  }
LABEL_449:
  if (v223) {
    free(v223);
  }
  char v17 = *(unsigned char *)(a1 + 348);
LABEL_452:
  if ((v17 & 1) == 0)
  {
    v198 = __nwlog_obj();
    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 349;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v289 = (uint64_t)" ";
      v199 = "%{public}s %{public}s%sFailed to parse chunk";
LABEL_455:
      v213 = v198;
      os_log_type_t v214 = OS_LOG_TYPE_DEBUG;
LABEL_456:
      _os_log_impl(&dword_1830D4000, v213, v214, v199, buf, 0x20u);
    }
  }
LABEL_457:
  if ((*(unsigned char *)(a1 + 292) & 0x20) != 0)
  {
    *(unsigned char *)(a1 + 292) &= ~0x20u;
    nw_protocol_ohttp_deliver_response(a1, a1 + 64);
  }
  v238 = *(char **)(a1 + 296);
  unint64_t v6 = v267;
  if (v238)
  {
    v274[0] = MEMORY[0x1E4F143A8];
    v274[1] = 0x40000000;
    v274[2] = ___ZL34nw_protocol_ohttp_process_responseP17nw_protocol_ohttp_block_invoke_28;
    v274[3] = &__block_descriptor_tmp_29_29106;
    v274[4] = a1;
    nw_hash_table_apply(v238, (uint64_t)v274);
  }
LABEL_461:
  if (v6) {
    free(v6);
  }
}

uint64_t ___ZL34nw_protocol_ohttp_process_responseP17nw_protocol_ohttp_block_invoke(uint64_t a1, uint64_t a2)
{
  LODWORD(__n) = 0;
  size_t v3 = (const void *)nw_frame_unclaimed_bytes(a2, &__n);
  memcpy((void *)(*(void *)(a1 + 40) + *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)), v3, __n);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += __n;
  return 1;
}

BOOL ___ZL45nw_protocol_finalize_partial_temp_frame_arrayP16nw_frame_array_sjP11nw_protocolb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = nw_frame_unclaimed_length((_DWORD *)a2);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v7 = *(_DWORD *)(v6 + 24);
  if (v7 <= v5)
  {
    nw_frame_claim(a2, v4, *(_DWORD *)(v6 + 24), 0);
  }
  else
  {
    *(_DWORD *)(v6 + 24) = v7 - v5;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v9 = *(void **)(a2 + 40);
    if (v8)
    {
      *(void *)(v8 + 40) = v9;
      unint64_t v9 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(*(void *)(a1 + 40) + 8) = v9;
    }
    void *v9 = v8;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    nw_frame_finalize(a2);
  }
  return v7 > v5;
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_29090(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  size_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    size_t v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v3;
  }
  void *v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

void nw_protocol_ohttp_deliver_response(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_response";
    char v13 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v13, type, &v21)) {
      goto LABEL_46;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type[0];
      if (!os_log_type_enabled(v14, type[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_response";
      char v16 = "%{public}s called with null ohttp";
      goto LABEL_45;
    }
    if (!v21)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type[0];
      if (!os_log_type_enabled(v14, type[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_response";
      char v16 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type[0];
    BOOL v18 = os_log_type_enabled(v14, type[0]);
    if (!backtrace_string)
    {
      if (!v18) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_response";
      char v16 = "%{public}s called with null ohttp, no backtrace";
      goto LABEL_45;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_response";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_46:
    if (!v13) {
      return;
    }
    goto LABEL_47;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_response";
    char v13 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v13, type, &v21)) {
      goto LABEL_46;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type[0];
      if (!os_log_type_enabled(v14, type[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_response";
      char v16 = "%{public}s called with null ohttp_context";
      goto LABEL_45;
    }
    if (!v21)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type[0];
      if (!os_log_type_enabled(v14, type[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_response";
      char v16 = "%{public}s called with null ohttp_context, backtrace limit exceeded";
      goto LABEL_45;
    }
    unint64_t v19 = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type[0];
    BOOL v20 = os_log_type_enabled(v14, type[0]);
    if (v19)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_response";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v19;
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null ohttp_context, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v19);
      if (!v13) {
        return;
      }
LABEL_47:
      free(v13);
      return;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_response";
      char v16 = "%{public}s called with null ohttp_context, no backtrace";
LABEL_45:
      _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
      goto LABEL_46;
    }
    goto LABEL_46;
  }
  if (*(_DWORD *)(a2 + 224) == 4)
  {
    if (a1 + 64 == a2)
    {
      unsigned int v5 = *(void **)(a1 + 48);
      if (v5)
      {
LABEL_7:
        nw_protocol_input_available(v5, a1);
        return;
      }
    }
    else
    {
      uint64_t v4 = *(char **)(a1 + 296);
      if (v4)
      {
        *(void *)os_log_type_t type = 0;
        unint64_t v23 = type;
        uint64_t v24 = 0x2000000000;
        uint64_t v25 = 0;
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZL42nw_protocol_ohttp_get_protocol_for_contextP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke;
        BOOL v27 = (const char *)&unk_1E523F3C0;
        uint64_t v28 = type;
        uint64_t v29 = a2;
        nw_hash_table_apply(v4, (uint64_t)buf);
        unsigned int v5 = (void *)*((void *)v23 + 3);
        _Block_object_dispose(type, 8);
        if (v5) {
          goto LABEL_7;
        }
      }
    }
    if ((*(unsigned char *)(a1 + 348) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_response";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 349;
        *(_WORD *)&buf[22] = 2080;
        BOOL v27 = " ";
        uint64_t v8 = "%{public}s %{public}s%sfailed to find protocol for delivering responses";
        unint64_t v9 = v12;
        os_log_type_t v10 = OS_LOG_TYPE_ERROR;
        uint32_t v11 = 32;
        goto LABEL_16;
      }
    }
  }
  else if ((*(unsigned char *)(a1 + 348) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *(_DWORD *)(a2 + 224);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_response";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 349;
        *(_WORD *)&buf[22] = 2080;
        BOOL v27 = " ";
        LOWORD(v28) = 1024;
        *(_DWORD *)((char *)&v28 + 2) = v7;
        uint64_t v8 = "%{public}s %{public}s%sskipping, state %u";
        unint64_t v9 = v6;
        os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
        uint32_t v11 = 38;
LABEL_16:
        _os_log_impl(&dword_1830D4000, v9, v10, v8, buf, v11);
      }
    }
  }
}

uint64_t ___ZL34nw_protocol_ohttp_process_responseP17nw_protocol_ohttp_block_invoke_28(uint64_t a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  if ((*(unsigned char *)(extra + 228) & 0x20) != 0)
  {
    *(unsigned char *)(extra + 228) &= ~0x20u;
    nw_protocol_ohttp_deliver_response(*(void *)(a1 + 32), extra);
  }
  return 1;
}

BOOL ___ZL42nw_protocol_ohttp_get_protocol_for_contextP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5 == extra) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_hash_node_get_object(a2);
  }
  return v5 != extra;
}

BOOL ___ZL44nw_protocol_ohttp_get_context_for_context_idP17nw_protocol_ohttpy_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra = (uint64_t *)nw_hash_node_get_extra(a2);
  uint64_t v4 = *extra;
  uint64_t v5 = *(void *)(a1 + 40);
  if (*extra == v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = extra;
  }
  return v4 != v5;
}

void nw_protocol_ohttp_context_deliver_failure_message(uint64_t a1, uint64_t a2, void *object)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_ohttp_context_deliver_failure_message";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_ohttp_context_deliver_failure_message";
      uint64_t v8 = "%{public}s called with null ohttp_context";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_ohttp_context_deliver_failure_message";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null ohttp_context, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v5) {
          return;
        }
        goto LABEL_35;
      }
      if (!v10) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_ohttp_context_deliver_failure_message";
      uint64_t v8 = "%{public}s called with null ohttp_context, no backtrace";
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_ohttp_context_deliver_failure_message";
      uint64_t v8 = "%{public}s called with null ohttp_context, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_34;
  }
  if (object)
  {
    *(void *)(a2 + 80) = os_retain(object);
    *(unsigned char *)(a2 + 228) |= 4u;
    *(_DWORD *)(a2 + 224) = 4;
    nw_protocol_ohttp_deliver_response(a1, a2);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_ohttp_context_deliver_failure_message";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13)) {
    goto LABEL_34;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_ohttp_context_deliver_failure_message";
    uint64_t v8 = "%{public}s called with null http_metadata";
    goto LABEL_33;
  }
  if (!v13)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_ohttp_context_deliver_failure_message";
    uint64_t v8 = "%{public}s called with null http_metadata, backtrace limit exceeded";
    goto LABEL_33;
  }
  uint32_t v11 = (char *)__nw_create_backtrace_string();
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  BOOL v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_ohttp_context_deliver_failure_message";
    uint64_t v8 = "%{public}s called with null http_metadata, no backtrace";
    goto LABEL_33;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    char v16 = "nw_protocol_ohttp_context_deliver_failure_message";
    __int16 v17 = 2082;
    BOOL v18 = v11;
    _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null http_metadata, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5) {
LABEL_35:
  }
    free(v5);
}

uint64_t ___ZL41nw_protocol_ohttp_deliver_failure_messageP17nw_protocol_ohttpP20nw_protocol_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  nw_protocol_ohttp_context_deliver_failure_message(*(void *)(a1 + 32), extra, *(void **)(a1 + 40));
  return 1;
}

uint64_t ___ZL31nw_ohttp_mark_failed_with_errorP17nw_protocol_ohttpi_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  dispatch_object_t object = (void *)nw_hash_node_get_object(a2);
  *(_DWORD *)(extra + 224) = 6;
  nw_protocol_error(object, *(void *)(a1 + 32));
  nw_protocol_disconnected(object, *(void *)(a1 + 32));
  return 1;
}

uint64_t nw_protocol_ohttp_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      char v16 = (uint64_t (*)(void *))___ZL40nw_protocol_ohttp_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
      __int16 v17 = &__block_descriptor_tmp_33_29240;
      BOOL v18 = a2;
      uint64_t v19 = handle;
      tqh_first = a2->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        uint64_t v4 = (nw_frame *)*((void *)tqh_first + 4);
        char v5 = v16(v15);
        tqh_first = v4;
      }
      while ((v5 & 1) != 0);
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v23 = "nw_protocol_ohttp_finalize_output_frames";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &v21, &v20)) {
      goto LABEL_35;
    }
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_protocol_ohttp_finalize_output_frames";
        BOOL v10 = "%{public}s called with null ohttp";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (!v20)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_protocol_ohttp_finalize_output_frames";
        BOOL v10 = "%{public}s called with null ohttp, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = v21;
    BOOL v14 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_protocol_ohttp_finalize_output_frames";
        BOOL v10 = "%{public}s called with null ohttp, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v23 = "nw_protocol_ohttp_finalize_output_frames";
      __int16 v24 = 2082;
      uint64_t v25 = backtrace_string;
      char v13 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v23 = "nw_protocol_ohttp_finalize_output_frames";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &v21, &v20)) {
    goto LABEL_35;
  }
  if (v21 != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_protocol_ohttp_finalize_output_frames";
        BOOL v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = v21;
    BOOL v12 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v23 = "nw_protocol_ohttp_finalize_output_frames";
        BOOL v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v23 = "nw_protocol_ohttp_finalize_output_frames";
      __int16 v24 = 2082;
      uint64_t v25 = backtrace_string;
      char v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_1830D4000, v8, v9, v13, buf, 0x16u);
    }
LABEL_25:
    free(backtrace_string);
    goto LABEL_35;
  }
  uint64_t v8 = __nwlog_obj();
  os_log_type_t v9 = v21;
  if (os_log_type_enabled(v8, v21))
  {
    *(_DWORD *)buf = 136446210;
    unint64_t v23 = "nw_protocol_ohttp_finalize_output_frames";
    BOOL v10 = "%{public}s called with null protocol";
LABEL_34:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
  }
LABEL_35:
  if (v7) {
    free(v7);
  }
  return 0;
}

uint64_t ___ZL40nw_protocol_ohttp_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2[4];
  uint64_t v4 = (void *)a2[5];
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    uint64_t v4 = (void *)a2[5];
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v4;
  }
  void *v4 = v3;
  a2[4] = 0;
  a2[5] = 0;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = a2[11];
    if (v6)
    {
      if (v5 + 64 == v6)
      {
        if (*(void *)(v5 + 48)) {
          goto LABEL_9;
        }
      }
      else
      {
        os_log_type_t v7 = *(char **)(v5 + 296);
        if (v7)
        {
          *(void *)long long uu = 0;
          *(void *)&uu[8] = uu;
          uint64_t v39 = 0x2000000000;
          uint64_t v40 = 0;
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 0x40000000;
          *(void *)&buf[16] = ___ZL42nw_protocol_ohttp_get_protocol_for_contextP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke;
          uint64_t v35 = (const char *)&unk_1E523F3C0;
          unsigned int v36 = uu;
          uint64_t v37 = v6;
          nw_hash_table_apply(v7, (uint64_t)buf);
          uint64_t v8 = *(void *)(*(void *)&uu[8] + 24);
          _Block_object_dispose(uu, 8);
          if (v8)
          {
LABEL_9:
            unsigned int v9 = *(_DWORD *)(v6 + 224);
            if ((*(unsigned char *)(v5 + 348) & 2) != 0)
            {
              if (v9 >= 2)
              {
LABEL_11:
                if (*(unsigned char *)(v5 + 348)) {
                  goto LABEL_20;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v10 = gLogObj;
                if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_20;
                }
                int v11 = *(_DWORD *)(v6 + 224);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_ohttp_context_finalize_output_frame";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v5 + 349;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v35 = " ";
                LOWORD(v36) = 1024;
                *(_DWORD *)((char *)&v36 + 2) = v11;
                BOOL v12 = "%{public}s %{public}s%sState is not valid for sending: %u";
                char v13 = v10;
                uint32_t v14 = 38;
LABEL_19:
                _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
LABEL_20:
                nw_frame_finalize((uint64_t)a2);
                return 1;
              }
            }
            else if (v9)
            {
              goto LABEL_11;
            }
            char v17 = *(unsigned char *)(v6 + 228);
            if ((v17 & 2) != 0)
            {
              if (*(unsigned char *)(v5 + 348)) {
                goto LABEL_20;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v15 = gLogObj;
              if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
                goto LABEL_20;
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_ohttp_context_finalize_output_frame";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v5 + 349;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v35 = " ";
              BOOL v12 = "%{public}s %{public}s%sRequest is already complete";
            }
            else
            {
              memset(uu, 0, sizeof(uu));
              uint64_t v18 = a2[8];
              if (v18)
              {
                int v19 = (*(unsigned __int8 *)(v18 + 66) >> 6) & 1;
                if (*(void *)(v18 + 48)) {
                  *(_OWORD *)long long uu = *(_OWORD *)(v18 + 16);
                }
              }
              else
              {
                LOBYTE(v19) = 0;
              }
              if (*(void *)(v6 + 216) || (v17 & 1) != 0)
              {
LABEL_50:
                *(unsigned char *)(v6 + 228) = *(unsigned char *)(v6 + 228) & 0xFD | (2 * v19);
                uint64_t v24 = a2[2];
                uint64_t v25 = (void *)a2[3];
                unint64_t v23 = a2 + 2;
                if (v24)
                {
                  *(void *)(v24 + 24) = v25;
                  uint64_t v25 = (void *)a2[3];
                }
                else
                {
                  *(void *)(v6 + 16) = v25;
                }
                *uint64_t v25 = v24;
                void *v23 = 0;
                a2[3] = 0;
                uint64_t v26 = *(void **)(v6 + 32);
                a2[3] = v26;
                *uint64_t v26 = a2;
                *(void *)(v6 + 32) = v23;
                nw_protocol_ohttp_prepare_request(v5, v6);
                return 1;
              }
              if (uuid_is_null(uu))
              {
                if (*(unsigned char *)(v5 + 348)) {
                  goto LABEL_20;
                }
                os_log_type_t v15 = __nwlog_obj();
                if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_20;
                }
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_ohttp_context_finalize_output_frame";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v5 + 349;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v35 = " ";
                BOOL v12 = "%{public}s %{public}s%sNo request UUID in output frame";
                goto LABEL_18;
              }
              id v20 = nw_protocol_copy_http_definition();
              os_log_type_t v21 = nw_frame_copy_metadata_for_protocol((uint64_t)a2, (uint64_t)v20);
              if (v20) {
                os_release(v20);
              }
              if (v21)
              {
                uint64_t v22 = *(void **)(v6 + 72);
                if (v22)
                {
                  os_release(v21);
                  if (v22 != v21 && !uuid_compare((const unsigned __int8 *)(v6 + 56), uu))
                  {
                    if (*(unsigned char *)(v5 + 348)) {
                      goto LABEL_20;
                    }
                    os_log_type_t v15 = __nwlog_obj();
                    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_20;
                    }
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_ohttp_context_finalize_output_frame";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v5 + 349;
                    *(_WORD *)&buf[22] = 2080;
                    uint64_t v35 = " ";
                    BOOL v12 = "%{public}s %{public}s%sInvalid request UUID in output frame";
                    goto LABEL_18;
                  }
                }
                else
                {
                  *(void *)(v6 + 72) = v21;
                  *(_OWORD *)(v6 + 56) = *(_OWORD *)uu;
                }
                goto LABEL_50;
              }
              if (*(unsigned char *)(v5 + 348)) {
                goto LABEL_20;
              }
              os_log_type_t v15 = __nwlog_obj();
              if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
                goto LABEL_20;
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_ohttp_context_finalize_output_frame";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v5 + 349;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v35 = " ";
              BOOL v12 = "%{public}s %{public}s%sNo HTTP request in output frame";
            }
LABEL_18:
            char v13 = v15;
            uint32_t v14 = 32;
            goto LABEL_19;
          }
        }
      }
    }
    if (*(unsigned char *)(v5 + 348)) {
      goto LABEL_20;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v15 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_ohttp_context_finalize_output_frame";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v5 + 349;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v35 = " ";
    BOOL v12 = "%{public}s %{public}s%sReceived invalid output frame";
    goto LABEL_18;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_ohttp_context_finalize_output_frame";
  BOOL v27 = (char *)_os_log_send_and_compose_impl();
  uu[0] = 16;
  char v33 = 0;
  if (__nwlog_fault(v27, uu, &v33))
  {
    if (uu[0] == 17)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = uu[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)uu[0])) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_ohttp_context_finalize_output_frame";
      uint64_t v30 = "%{public}s called with null ohttp";
      goto LABEL_67;
    }
    if (!v33)
    {
      uint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = uu[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)uu[0])) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_ohttp_context_finalize_output_frame";
      uint64_t v30 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v28 = __nwlog_obj();
    os_log_type_t v29 = uu[0];
    BOOL v32 = os_log_type_enabled(v28, (os_log_type_t)uu[0]);
    if (backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_ohttp_context_finalize_output_frame";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_68;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_ohttp_context_finalize_output_frame";
      uint64_t v30 = "%{public}s called with null ohttp, no backtrace";
LABEL_67:
      _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
    }
  }
LABEL_68:
  if (v27) {
    free(v27);
  }
  return 1;
}

uint64_t nw_protocol_ohttp_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
    char v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v17, &type, &v27)) {
      goto LABEL_51;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
      id v20 = "%{public}s called with null protocol";
      goto LABEL_50;
    }
    if (!v27)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
      id v20 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v22 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
      id v20 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_50;
    }
    if (!v22) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
    __int16 v31 = 2082;
    BOOL v32 = backtrace_string;
    unint64_t v23 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_36:
    _os_log_impl(&dword_1830D4000, v18, v19, v23, buf, 0x16u);
    goto LABEL_37;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
    char v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v17, &type, &v27)) {
      goto LABEL_51;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
      id v20 = "%{public}s called with null ohttp";
      goto LABEL_50;
    }
    if (!v27)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
      id v20 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v24 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v24) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
      id v20 = "%{public}s called with null ohttp, no backtrace";
      goto LABEL_50;
    }
    if (!v24) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
    __int16 v31 = 2082;
    BOOL v32 = backtrace_string;
    unint64_t v23 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
    goto LABEL_36;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
    char v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v17, &type, &v27)) {
      goto LABEL_51;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
      id v20 = "%{public}s called with null return_array";
      goto LABEL_50;
    }
    if (!v27)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
      id v20 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v25 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
        __int16 v31 = 2082;
        BOOL v32 = backtrace_string;
        unint64_t v23 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
        goto LABEL_36;
      }
LABEL_37:
      free(backtrace_string);
      goto LABEL_51;
    }
    if (!v25) {
      goto LABEL_51;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_ohttp_get_output_frames";
    id v20 = "%{public}s called with null return_array, no backtrace";
LABEL_50:
    _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
LABEL_51:
    if (v17) {
      free(v17);
    }
    return 0;
  }
  LODWORD(v8) = a4;
  uint64_t context_for_protocol = nw_protocol_ohttp_get_context_for_protocol((uint64_t)handle, (uint64_t)a2);
  if (!context_for_protocol) {
    return 0;
  }
  uint64_t v10 = context_for_protocol;
  if (v8 >= 0xFFFF) {
    size_t v8 = 0xFFFFLL;
  }
  else {
    size_t v8 = v8;
  }
  if (v8)
  {
    BOOL v11 = nw_calloc_type<unsigned char>(v8);
    int v12 = v8;
  }
  else
  {
    BOOL v11 = 0;
    int v12 = 0;
  }
  uint64_t v13 = nw_frame_create(0, v11, v12, (uint64_t)nw_protocol_ohttp_output_frame_finalizer, v10);
  uint64_t v14 = 1;
  nw_frame_set_buffer_used_malloc(v13, 1);
  *(void *)(v13 + 16) = 0;
  os_log_type_t v15 = *(uint64_t **)(v10 + 16);
  *(void *)(v13 + 24) = v15;
  uint64_t *v15 = v13;
  *(void *)(v10 + 16) = v13 + 16;
  *(void *)(v13 + 32) = 0;
  tqh_last = a6->tqh_last;
  *(void *)(v13 + 40) = tqh_last;
  *tqh_last = (nw_frame *)v13;
  a6->tqh_last = (nw_frame **)(v13 + 32);
  return v14;
}

uint64_t nw_protocol_ohttp_get_context_for_protocol(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_ohttp_get_context_for_protocol";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v7, &type, &v13)) {
      goto LABEL_25;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_ohttp_get_context_for_protocol";
      uint64_t v10 = "%{public}s called with null input_protocol";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_ohttp_get_context_for_protocol";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_25;
      }
      if (!v12)
      {
LABEL_25:
        if (v7) {
          free(v7);
        }
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_ohttp_get_context_for_protocol";
      uint64_t v10 = "%{public}s called with null input_protocol, no backtrace";
    }
    else
    {
      size_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_ohttp_get_context_for_protocol";
      uint64_t v10 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_25;
  }
  if (*(void *)(a1 + 48) == a2) {
    return a1 + 64;
  }
  uint64_t result = *(void *)(a1 + 296);
  if (!result) {
    return result;
  }
  uint64_t node = nw_hash_table_get_node(result, a2, 8);
  if (node && *(void *)(a2 + 56) == node) {
    return node + 32;
  }
  if ((*(unsigned char *)(a1 + 348) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      char v16 = "nw_protocol_ohttp_get_context_for_protocol";
      __int16 v17 = 2082;
      uint64_t v18 = (char *)(a1 + 349);
      __int16 v19 = 2080;
      id v20 = " ";
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo valid node found", buf, 0x20u);
      return 0;
    }
  }
  return 0;
}

void nw_protocol_ohttp_output_frame_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = (void *)*((void *)a1 + 3);
  if (v4)
  {
    *(void *)(v4 + 24) = v5;
    uint64_t v5 = (void *)*((void *)a1 + 3);
  }
  else
  {
    a3[2] = v5;
  }
  void *v5 = v4;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0);
  if (buffer) {
    free(buffer);
  }

  os_release(a1);
}

void nw_protocol_ohttp_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_protocol_ohttp_input_finished";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_ohttp_input_finished";
      os_log_type_t v7 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_protocol_ohttp_input_finished";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_41:
        if (!v4) {
          return;
        }
LABEL_42:
        free(v4);
        return;
      }
      if (!v9) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_ohttp_input_finished";
      os_log_type_t v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_ohttp_input_finished";
      os_log_type_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_40:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_41;
  }
  handle = a1->handle;
  if (handle)
  {
    if (*((_DWORD *)handle + 86) == 1)
    {
      if ((handle[348] & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v3 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          __int16 v17 = "nw_protocol_ohttp_input_finished";
          __int16 v18 = 2082;
          __int16 v19 = handle + 349;
          __int16 v20 = 2080;
          uint64_t v21 = " ";
          _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived input finished", buf, 0x20u);
        }
      }
      nw_protocol_ohttp_read_response((uint64_t)handle);
    }
    else if ((handle[348] & 1) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v12 = __nwlog_obj();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          int v13 = *((_DWORD *)handle + 86);
          *(_DWORD *)buf = 136446978;
          __int16 v17 = "nw_protocol_ohttp_input_finished";
          __int16 v18 = 2082;
          __int16 v19 = handle + 349;
          __int16 v20 = 2080;
          uint64_t v21 = " ";
          __int16 v22 = 1024;
          int v23 = v13;
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sskipping, state %u", buf, 0x26u);
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_protocol_ohttp_input_finished";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v4, &type, &v14)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_protocol_ohttp_input_finished";
    os_log_type_t v7 = "%{public}s called with null ohttp";
    goto LABEL_40;
  }
  if (!v14)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_protocol_ohttp_input_finished";
    os_log_type_t v7 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_40;
  }
  uint64_t v10 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_protocol_ohttp_input_finished";
    os_log_type_t v7 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_40;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v17 = "nw_protocol_ohttp_input_finished";
    __int16 v18 = 2082;
    __int16 v19 = v10;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v4) {
    goto LABEL_42;
  }
}

void nw_protocol_ohttp_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_ohttp_input_available";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_ohttp_input_available";
      os_log_type_t v6 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          char v14 = "nw_protocol_ohttp_input_available";
          __int16 v15 = 2082;
          char v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v3) {
          return;
        }
        goto LABEL_35;
      }
      if (!v8) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_ohttp_input_available";
      os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_ohttp_input_available";
      os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_34;
  }
  handle = a1->handle;
  if (handle)
  {
    nw_protocol_ohttp_read_response((uint64_t)handle);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_protocol_ohttp_input_available";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_34;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_ohttp_input_available";
    os_log_type_t v6 = "%{public}s called with null ohttp";
    goto LABEL_33;
  }
  if (!v11)
  {
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_ohttp_input_available";
    os_log_type_t v6 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_33;
  }
  BOOL v9 = (char *)__nw_create_backtrace_string();
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  BOOL v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_ohttp_input_available";
    os_log_type_t v6 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_33;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    char v14 = "nw_protocol_ohttp_input_available";
    __int16 v15 = 2082;
    char v16 = v9;
    _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v9);
  if (v3) {
LABEL_35:
  }
    free(v3);
}

uint64_t nw_protocol_ohttp_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v65 = "nw_protocol_ohttp_get_input_frames";
    BOOL v52 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v52, &type, &v62)) {
      goto LABEL_98;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      size_t v65 = "nw_protocol_ohttp_get_input_frames";
      uint64_t v55 = "%{public}s called with null protocol";
      goto LABEL_97;
    }
    if (!v62)
    {
      size_t v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      size_t v65 = "nw_protocol_ohttp_get_input_frames";
      uint64_t v55 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v53 = __nwlog_obj();
    os_log_type_t v54 = type;
    BOOL v57 = os_log_type_enabled(v53, type);
    if (!backtrace_string)
    {
      if (!v57) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      size_t v65 = "nw_protocol_ohttp_get_input_frames";
      uint64_t v55 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_97;
    }
    if (!v57) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446466;
    size_t v65 = "nw_protocol_ohttp_get_input_frames";
    __int16 v66 = 2082;
    uint64_t v67 = backtrace_string;
    uint64_t v58 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_83:
    _os_log_impl(&dword_1830D4000, v53, v54, v58, buf, 0x16u);
    goto LABEL_84;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v65 = "nw_protocol_ohttp_get_input_frames";
    BOOL v52 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v52, &type, &v62)) {
      goto LABEL_98;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      size_t v65 = "nw_protocol_ohttp_get_input_frames";
      uint64_t v55 = "%{public}s called with null ohttp";
      goto LABEL_97;
    }
    if (!v62)
    {
      size_t v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      size_t v65 = "nw_protocol_ohttp_get_input_frames";
      uint64_t v55 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v53 = __nwlog_obj();
    os_log_type_t v54 = type;
    BOOL v59 = os_log_type_enabled(v53, type);
    if (!backtrace_string)
    {
      if (!v59) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      size_t v65 = "nw_protocol_ohttp_get_input_frames";
      uint64_t v55 = "%{public}s called with null ohttp, no backtrace";
      goto LABEL_97;
    }
    if (!v59) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446466;
    size_t v65 = "nw_protocol_ohttp_get_input_frames";
    __int16 v66 = 2082;
    uint64_t v67 = backtrace_string;
    uint64_t v58 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
    goto LABEL_83;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v65 = "nw_protocol_ohttp_get_input_frames";
    BOOL v52 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v52, &type, &v62)) {
      goto LABEL_98;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      size_t v65 = "nw_protocol_ohttp_get_input_frames";
      uint64_t v55 = "%{public}s called with null return_array";
      goto LABEL_97;
    }
    if (!v62)
    {
      size_t v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      size_t v65 = "nw_protocol_ohttp_get_input_frames";
      uint64_t v55 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v53 = __nwlog_obj();
    os_log_type_t v54 = type;
    BOOL v60 = os_log_type_enabled(v53, type);
    if (backtrace_string)
    {
      if (v60)
      {
        *(_DWORD *)buf = 136446466;
        size_t v65 = "nw_protocol_ohttp_get_input_frames";
        __int16 v66 = 2082;
        uint64_t v67 = backtrace_string;
        uint64_t v58 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
        goto LABEL_83;
      }
LABEL_84:
      free(backtrace_string);
      goto LABEL_98;
    }
    if (!v60) {
      goto LABEL_98;
    }
    *(_DWORD *)buf = 136446210;
    size_t v65 = "nw_protocol_ohttp_get_input_frames";
    uint64_t v55 = "%{public}s called with null return_array, no backtrace";
LABEL_97:
    _os_log_impl(&dword_1830D4000, v53, v54, v55, buf, 0xCu);
LABEL_98:
    if (v52) {
      free(v52);
    }
    return 0;
  }
  uint64_t context_for_protocol = nw_protocol_ohttp_get_context_for_protocol((uint64_t)a1->handle, (uint64_t)a2);
  if (!context_for_protocol)
  {
    if (handle[348]) {
      return 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v20 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136446978;
    size_t v65 = "nw_protocol_ohttp_get_input_frames";
    __int16 v66 = 2082;
    uint64_t v67 = handle + 349;
    __int16 v68 = 2080;
    uint64_t v69 = " ";
    __int16 v70 = 2048;
    uint64_t v71 = a2;
    uint64_t v21 = "%{public}s %{public}s%sfailed to find context for %p";
    __int16 v22 = v20;
    os_log_type_t v23 = OS_LOG_TYPE_ERROR;
    uint32_t v24 = 42;
    goto LABEL_22;
  }
  uint64_t v11 = context_for_protocol;
  if (*(_DWORD *)(context_for_protocol + 224) != 4)
  {
    uint64_t v25 = 0;
    if ((handle[348] & 1) != 0 || !gLogDatapath) {
      return v25;
    }
    uint64_t v26 = __nwlog_obj();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    int v27 = *(_DWORD *)(v11 + 224);
    *(_DWORD *)buf = 136446978;
    size_t v65 = "nw_ohttp_context_get_input_frames";
    __int16 v66 = 2082;
    uint64_t v67 = handle + 349;
    __int16 v68 = 2080;
    uint64_t v69 = " ";
    __int16 v70 = 1024;
    LODWORD(v71) = v27;
    uint64_t v21 = "%{public}s %{public}s%sskipping, state %u";
    __int16 v22 = v26;
    os_log_type_t v23 = OS_LOG_TYPE_DEBUG;
    uint32_t v24 = 38;
LABEL_22:
    _os_log_impl(&dword_1830D4000, v22, v23, v21, buf, v24);
    return 0;
  }
  unint64_t v13 = *(void *)(context_for_protocol + 168);
  uint64_t v12 = *(void *)(context_for_protocol + 176);
  if ((*(unsigned char *)(context_for_protocol + 228) & 0x44) == 0x40 && v13 == v12)
  {
    uint64_t v25 = 0;
    if ((handle[348] & 1) != 0 || !gLogDatapath) {
      return v25;
    }
    uint64_t v28 = __nwlog_obj();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      size_t v65 = "nw_ohttp_context_get_input_frames";
      __int16 v66 = 2082;
      uint64_t v67 = handle + 349;
      __int16 v68 = 2080;
      uint64_t v69 = " ";
      uint64_t v21 = "%{public}s %{public}s%sskipping, no new bytes to read";
      __int16 v22 = v28;
      os_log_type_t v23 = OS_LOG_TYPE_DEBUG;
      uint32_t v24 = 32;
      goto LABEL_22;
    }
    return 0;
  }
  uint64_t v15 = a4;
  if (v12) {
    BOOL v16 = 1;
  }
  else {
    BOOL v16 = v13 > a4;
  }
  if (v16)
  {
    size_t v17 = v13 - v12;
    if (v13 - v12 <= a4)
    {
      if (v13 == v12)
      {
        uint64_t v36 = 0;
      }
      else
      {
        BOOL v41 = nw_calloc_type<unsigned char>(v13 - v12);
        uint64_t v36 = v41;
        if (v41) {
          memcpy((void *)v41, (const void *)(*(void *)(v11 + 160) + *(void *)(v11 + 176)), v17);
        }
      }
      uint64_t v42 = nw_frame_create(0, v36, v17, (uint64_t)nw_protocol_ohttp_input_frame_finalizer, v11);
      nw_frame_set_buffer_used_malloc(v42, 1);
      *(void *)(v11 + 176) += v17;
      nw_frame_set_metadata(v42, *(NSObject **)(v11 + 80), 1, (*(unsigned __int8 *)(v11 + 228) >> 2) & 1);
      *(unsigned char *)(v11 + 228) |= 0x40u;
      *(void *)(v42 + 16) = 0;
      unint64_t v43 = *(uint64_t **)(v11 + 48);
      *(void *)(v42 + 24) = v43;
      uint64_t *v43 = v42;
      *(void *)(v11 + 48) = v42 + 16;
      *(void *)(v42 + 32) = 0;
      tqh_last = a6->tqh_last;
      *(void *)(v42 + 40) = tqh_last;
      *tqh_last = (nw_frame *)v42;
      a6->tqh_last = (nw_frame **)(v42 + 32);
      if ((*(unsigned char *)(v11 + 228) & 4) != 0)
      {
        *(_DWORD *)(v11 + 224) = 5;
        if (handle[348]) {
          return 1;
        }
        BOOL v46 = __nwlog_obj();
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
          return 1;
        }
        *(_DWORD *)buf = 136446722;
        size_t v65 = "nw_ohttp_context_get_input_frames";
        __int16 v66 = 2082;
        uint64_t v67 = handle + 349;
        __int16 v68 = 2080;
        uint64_t v69 = " ";
        unint64_t v38 = "%{public}s %{public}s%sDelivered end of response";
        uint64_t v39 = v46;
        uint32_t v40 = 32;
        goto LABEL_51;
      }
      uint64_t v25 = 1;
      if (handle[348]) {
        return v25;
      }
      if (!gLogDatapath) {
        return v25;
      }
      unint64_t v45 = __nwlog_obj();
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
        return v25;
      }
    }
    else
    {
      if (a4)
      {
        BOOL v18 = nw_calloc_type<unsigned char>(a4);
        uint64_t v19 = v18;
        if (v18) {
          memcpy((void *)v18, (const void *)(*(void *)(v11 + 160) + *(void *)(v11 + 176)), a4);
        }
      }
      else
      {
        uint64_t v19 = 0;
      }
      uint64_t v47 = nw_frame_create(0, v19, a4, (uint64_t)nw_protocol_ohttp_input_frame_finalizer, v11);
      uint64_t v25 = 1;
      nw_frame_set_buffer_used_malloc(v47, 1);
      *(void *)(v11 + 176) += v15;
      nw_frame_set_metadata(v47, *(NSObject **)(v11 + 80), 1, 0);
      *(unsigned char *)(v11 + 228) |= 0x40u;
      *(void *)(v47 + 16) = 0;
      BOOL v48 = *(uint64_t **)(v11 + 48);
      *(void *)(v47 + 24) = v48;
      *BOOL v48 = v47;
      *(void *)(v11 + 48) = v47 + 16;
      *(void *)(v47 + 32) = 0;
      size_t v49 = a6->tqh_last;
      *(void *)(v47 + 40) = v49;
      NSObject *v49 = (nw_frame *)v47;
      a6->tqh_last = (nw_frame **)(v47 + 32);
      if (handle[348]) {
        return v25;
      }
      if (!gLogDatapath) {
        return v25;
      }
      unint64_t v45 = __nwlog_obj();
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
        return v25;
      }
    }
    uint64_t v51 = *(void *)(v11 + 168);
    unint64_t v50 = *(nw_protocol **)(v11 + 176);
    *(_DWORD *)buf = 136447234;
    size_t v65 = "nw_ohttp_context_get_input_frames";
    __int16 v66 = 2082;
    uint64_t v67 = handle + 349;
    __int16 v68 = 2080;
    uint64_t v69 = " ";
    __int16 v70 = 2048;
    uint64_t v71 = v50;
    __int16 v72 = 2048;
    uint64_t v73 = v51;
    uint64_t v33 = "%{public}s %{public}s%sDelivered partial response (%zu/%zu)";
    int v34 = v45;
    uint32_t v35 = 52;
    goto LABEL_58;
  }
  uint64_t v29 = nw_frame_create(0, *(void *)(context_for_protocol + 160), *(void *)(context_for_protocol + 168), (uint64_t)nw_protocol_ohttp_input_frame_finalizer, context_for_protocol);
  nw_frame_set_buffer_used_malloc(v29, 1);
  *(void *)(v11 + 160) = 0;
  *(void *)(v11 + 168) = 0;
  *(void *)(v11 + 176) = 0;
  nw_frame_set_metadata(v29, *(NSObject **)(v11 + 80), 1, (*(unsigned __int8 *)(v11 + 228) >> 2) & 1);
  *(unsigned char *)(v11 + 228) |= 0x40u;
  *(void *)(v29 + 16) = 0;
  uint64_t v30 = *(uint64_t **)(v11 + 48);
  *(void *)(v29 + 24) = v30;
  uint64_t *v30 = v29;
  *(void *)(v11 + 48) = v29 + 16;
  *(void *)(v29 + 32) = 0;
  __int16 v31 = a6->tqh_last;
  *(void *)(v29 + 40) = v31;
  void *v31 = (nw_frame *)v29;
  a6->tqh_last = (nw_frame **)(v29 + 32);
  if ((*(unsigned char *)(v11 + 228) & 4) != 0)
  {
    *(_DWORD *)(v11 + 224) = 5;
    if (handle[348]) {
      return 1;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v37 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
      return 1;
    }
    *(_DWORD *)buf = 136446978;
    size_t v65 = "nw_ohttp_context_get_input_frames";
    __int16 v66 = 2082;
    uint64_t v67 = handle + 349;
    __int16 v68 = 2080;
    uint64_t v69 = " ";
    __int16 v70 = 2048;
    uint64_t v71 = (nw_protocol *)v13;
    unint64_t v38 = "%{public}s %{public}s%sDelivered complete response (%zu)";
    uint64_t v39 = v37;
    uint32_t v40 = 42;
LABEL_51:
    _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, v38, buf, v40);
    return 1;
  }
  uint64_t v25 = 1;
  if ((handle[348] & 1) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v32 = __nwlog_obj();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        size_t v65 = "nw_ohttp_context_get_input_frames";
        __int16 v66 = 2082;
        uint64_t v67 = handle + 349;
        __int16 v68 = 2080;
        uint64_t v69 = " ";
        __int16 v70 = 2048;
        uint64_t v71 = (nw_protocol *)v13;
        uint64_t v33 = "%{public}s %{public}s%sDelivered partial response (%zu)";
        int v34 = v32;
        uint32_t v35 = 42;
LABEL_58:
        _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, v33, buf, v35);
      }
    }
  }
  return v25;
}

void nw_protocol_ohttp_input_frame_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  uint64_t v4 = *((void *)a1 + 2);
  os_log_type_t v5 = (void *)*((void *)a1 + 3);
  if (v4)
  {
    *(void *)(v4 + 24) = v5;
    os_log_type_t v5 = (void *)*((void *)a1 + 3);
  }
  else
  {
    a3[6] = v5;
  }
  void *v5 = v4;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0);
  if (buffer) {
    free(buffer);
  }

  os_release(a1);
}

uint64_t nw_protocol_ohttp_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v15, &type, &v25)) {
      goto LABEL_53;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        BOOL v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (!os_log_type_enabled(v16, type)) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
        BOOL v18 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_52;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (!v20) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
        BOOL v18 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_52;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_40:
        _os_log_impl(&dword_1830D4000, v16, v17, v21, buf, 0x16u);
      }
LABEL_41:
      free(backtrace_string);
      goto LABEL_53;
    }
    BOOL v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    if (!os_log_type_enabled(v16, type)) {
      goto LABEL_53;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
    BOOL v18 = "%{public}s called with null protocol";
LABEL_52:
    _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
LABEL_53:
    if (v15) {
      free(v15);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v15, &type, &v25)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
      BOOL v18 = "%{public}s called with null ohttp";
      goto LABEL_52;
    }
    if (!v25)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
      BOOL v18 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v22 = os_log_type_enabled(v16, type);
    if (backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v21 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    if (!v22) {
      goto LABEL_53;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_remove_input_handler";
    BOOL v18 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_52;
  }
  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  }
  if (a1->default_input_handler == a2)
  {
    nw_protocol_set_input_handler((uint64_t)a1, 0);
    if (gLogDatapath)
    {
      os_log_type_t v23 = __nwlog_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_29090;
    uint64_t v28 = &__block_descriptor_tmp_17_29091;
    uint64_t v29 = handle + 41;
    char v30 = 0;
    uint64_t v9 = handle[41];
    do
    {
      if (!v9) {
        break;
      }
      uint64_t v10 = *(void *)(v9 + 32);
      char v11 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
      uint64_t v9 = v10;
    }
    while ((v11 & 1) != 0);
    nw_protocol_remove_input_handler((uint64_t)a1->output_handler, (uint64_t)a1);
    output_handler = a1->output_handler;
    if (output_handler)
    {
      nw_protocol_remove_input_handler((uint64_t)output_handler, (uint64_t)a1);
      nw_protocol_set_output_handler((uint64_t)a1, 0);
    }
    if (!a3) {
      return 1;
    }
    uint64_t v13 = handle[37];
    if (v13 && *(_DWORD *)(v13 + 40))
    {
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 0x40000000;
      v24[2] = ___ZL38nw_protocol_ohttp_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v24[3] = &__block_descriptor_tmp_15_29338;
      v24[4] = handle;
      nw_hash_table_apply((char *)v13, (uint64_t)v24);
      return 1;
    }
LABEL_22:
    nw_protocol_ohttp_destroy(handle);
    return 1;
  }
  output_handler_context = a2->output_handler_context;
  if (output_handler_context)
  {
    a2->output_handler_context = 0;
    nw_protocol_set_output_handler((uint64_t)a2, 0);
    nw_protocol_ohttp_context_destroy_node((uint64_t)handle, (uint64_t)output_handler_context);
    if (!a3) {
      return 1;
    }
    if (a1->default_input_handler) {
      return 1;
    }
    uint64_t v8 = handle[37];
    if (v8)
    {
      if (*(_DWORD *)(v8 + 40)) {
        return 1;
      }
    }
    goto LABEL_22;
  }
  return 0;
}

void nw_protocol_ohttp_destroy(void *a1)
{
  uint64_t v2 = (void *)a1[38];
  if (v2)
  {
    os_release(v2);
    a1[38] = 0;
  }
  uint64_t v3 = (void *)a1[39];
  if (v3)
  {
    os_release(v3);
    a1[39] = 0;
  }
  uint64_t v4 = (char *)a1[37];
  if (v4)
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    v6[2] = ___ZL25nw_protocol_ohttp_destroyP17nw_protocol_ohttp_block_invoke;
    v6[3] = &__block_descriptor_tmp_18_29368;
    v6[4] = a1;
    nw_hash_table_apply(v4, (uint64_t)v6);
    os_log_type_t v5 = (os_unfair_lock_s *)a1[37];
    if (v5)
    {
      _nw_hash_table_release(v5);
      a1[37] = 0;
    }
  }
  nw_protocol_ohttp_context_destroy(a1 + 8);
  free(a1);
}

uint64_t ___ZL38nw_protocol_ohttp_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  dispatch_object_t object = (void *)nw_hash_node_get_object(a2);
  nw_protocol_disconnected(object, *(void *)(a1 + 32));
  return 1;
}

void nw_protocol_ohttp_context_destroy_node(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_protocol_ohttp_context_destroy_node";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v16 = "nw_protocol_ohttp_context_destroy_node";
      uint64_t v8 = "%{public}s called with null ohttp";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_ohttp_context_destroy_node";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v5) {
          return;
        }
LABEL_37:
        free(v5);
        return;
      }
      if (!v10) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v16 = "nw_protocol_ohttp_context_destroy_node";
      uint64_t v8 = "%{public}s called with null ohttp, no backtrace";
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v16 = "nw_protocol_ohttp_context_destroy_node";
      uint64_t v8 = "%{public}s called with null ohttp, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_36;
  }
  if (a2)
  {
    nw_protocol_ohttp_context_destroy((void *)(a2 + 32));
    if (!nw_hash_table_remove_node(*(void *)(a1 + 296), a2) && (*(unsigned char *)(a1 + 348) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v16 = "nw_protocol_ohttp_context_destroy_node";
        __int16 v17 = 2082;
        BOOL v18 = (char *)(a1 + 349);
        __int16 v19 = 2080;
        BOOL v20 = " ";
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%snw_hash_table_remove_node failed", buf, 0x20u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_ohttp_context_destroy_node";
  os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13)) {
    goto LABEL_36;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_protocol_ohttp_context_destroy_node";
    uint64_t v8 = "%{public}s called with null node";
    goto LABEL_35;
  }
  if (!v13)
  {
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_protocol_ohttp_context_destroy_node";
    uint64_t v8 = "%{public}s called with null node, backtrace limit exceeded";
    goto LABEL_35;
  }
  char v11 = (char *)__nw_create_backtrace_string();
  os_log_type_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  BOOL v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_protocol_ohttp_context_destroy_node";
    uint64_t v8 = "%{public}s called with null node, no backtrace";
    goto LABEL_35;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v16 = "nw_protocol_ohttp_context_destroy_node";
    __int16 v17 = 2082;
    BOOL v18 = v11;
    _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null node, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5) {
    goto LABEL_37;
  }
}

void nw_protocol_ohttp_context_destroy(void *a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = (void *)a1[11];
    if (v2)
    {
      xpc_release(v2);
      a1[11] = 0;
    }
    uint64_t v3 = (void *)a1[16];
    if (v3)
    {
      free(v3);
      a1[16] = 0;
    }
    uint64_t v4 = (void *)a1[20];
    if (v4)
    {
      free(v4);
      a1[20] = 0;
    }
    os_log_type_t v5 = (void *)a1[12];
    if (v5)
    {
      free(v5);
      a1[12] = 0;
    }
    os_log_type_t v6 = (void *)a1[14];
    if (v6)
    {
      free(v6);
      a1[14] = 0;
    }
    os_log_type_t v7 = (void *)a1[23];
    if (v7)
    {
      free(v7);
      a1[23] = 0;
    }
    uint64_t v8 = (void *)a1[9];
    if (v8)
    {
      os_release(v8);
      a1[9] = 0;
    }
    uint64_t v9 = (void *)a1[10];
    if (v9)
    {
      os_release(v9);
      a1[10] = 0;
    }
    BOOL v10 = a1[26];
    if (v10)
    {
      dispatch_release(v10);
      a1[26] = 0;
    }
    char v11 = (void *)a1[27];
    if (v11)
    {
      free(v11);
      a1[27] = 0;
    }
    if (gLogDatapath)
    {
      char v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_master_frame_array";
        _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke;
    BOOL v52 = &__block_descriptor_tmp_20_29356;
    char v53 = 0;
    uint64_t v12 = a1[1];
    do
    {
      if (!v12) {
        break;
      }
      uint64_t v13 = *(void *)(v12 + 16);
      char v14 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
      uint64_t v12 = v13;
    }
    while ((v14 & 1) != 0);
    if (!a1[1])
    {
LABEL_27:
      if (gLogDatapath)
      {
        char v30 = __nwlog_obj();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_finalize_master_frame_array";
          _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
        }
      }
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke;
      BOOL v52 = &__block_descriptor_tmp_20_29356;
      char v53 = 0;
      uint64_t v15 = a1[5];
      do
      {
        if (!v15) {
          break;
        }
        uint64_t v16 = *(void *)(v15 + 16);
        char v17 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
        uint64_t v15 = v16;
      }
      while ((v17 & 1) != 0);
      if (!a1[5]) {
        goto LABEL_32;
      }
      __nwlog_obj();
      *(_DWORD *)os_log_type_t type = 136446210;
      BOOL v48 = "nw_protocol_finalize_master_frame_array";
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v46 = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      if (__nwlog_fault(v31, &v46, &v45))
      {
        if (v46 == OS_LOG_TYPE_FAULT)
        {
          BOOL v32 = __nwlog_obj();
          os_log_type_t v33 = v46;
          if (!os_log_type_enabled(v32, v46)) {
            goto LABEL_86;
          }
          *(_DWORD *)os_log_type_t type = 136446210;
          BOOL v48 = "nw_protocol_finalize_master_frame_array";
          int v34 = "%{public}s frame array is not empty after finalize";
          goto LABEL_85;
        }
        if (!v45)
        {
          BOOL v32 = __nwlog_obj();
          os_log_type_t v33 = v46;
          if (!os_log_type_enabled(v32, v46)) {
            goto LABEL_86;
          }
          *(_DWORD *)os_log_type_t type = 136446210;
          BOOL v48 = "nw_protocol_finalize_master_frame_array";
          int v34 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
          goto LABEL_85;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v32 = __nwlog_obj();
        os_log_type_t v33 = v46;
        BOOL v40 = os_log_type_enabled(v32, v46);
        if (backtrace_string)
        {
          if (v40)
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            BOOL v48 = "nw_protocol_finalize_master_frame_array";
            __int16 v49 = 2082;
            unint64_t v50 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_86;
        }
        if (v40)
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          BOOL v48 = "nw_protocol_finalize_master_frame_array";
          int v34 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_85:
          _os_log_impl(&dword_1830D4000, v32, v33, v34, (uint8_t *)type, 0xCu);
        }
      }
LABEL_86:
      if (v31) {
        free(v31);
      }
LABEL_32:
      v41[0] = MEMORY[0x1E4F143A8];
      v41[1] = 0x40000000;
      uint64_t v42 = (uint64_t (*)(void *))___ZL33nw_protocol_ohttp_context_destroyP16nw_ohttp_context_block_invoke;
      unint64_t v43 = &__block_descriptor_tmp_19_29362;
      size_t v44 = a1;
      uint64_t v18 = a1[3];
      do
      {
        if (!v18) {
          break;
        }
        uint64_t v19 = *(void *)(v18 + 16);
        char v20 = v42(v41);
        uint64_t v18 = v19;
      }
      while ((v20 & 1) != 0);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)os_log_type_t type = 136446210;
    BOOL v48 = "nw_protocol_finalize_master_frame_array";
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v46 = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (__nwlog_fault(v26, &v46, &v45))
    {
      if (v46 == OS_LOG_TYPE_FAULT)
      {
        int v27 = __nwlog_obj();
        os_log_type_t v28 = v46;
        if (!os_log_type_enabled(v27, v46)) {
          goto LABEL_81;
        }
        *(_DWORD *)os_log_type_t type = 136446210;
        BOOL v48 = "nw_protocol_finalize_master_frame_array";
        uint64_t v29 = "%{public}s frame array is not empty after finalize";
        goto LABEL_80;
      }
      if (!v45)
      {
        int v27 = __nwlog_obj();
        os_log_type_t v28 = v46;
        if (!os_log_type_enabled(v27, v46)) {
          goto LABEL_81;
        }
        *(_DWORD *)os_log_type_t type = 136446210;
        BOOL v48 = "nw_protocol_finalize_master_frame_array";
        uint64_t v29 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
        goto LABEL_80;
      }
      uint64_t v37 = (char *)__nw_create_backtrace_string();
      int v27 = __nwlog_obj();
      os_log_type_t v28 = v46;
      BOOL v38 = os_log_type_enabled(v27, v46);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)os_log_type_t type = 136446466;
          BOOL v48 = "nw_protocol_finalize_master_frame_array";
          __int16 v49 = 2082;
          unint64_t v50 = v37;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
        }
        free(v37);
        goto LABEL_81;
      }
      if (v38)
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        BOOL v48 = "nw_protocol_finalize_master_frame_array";
        uint64_t v29 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_80:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, (uint8_t *)type, 0xCu);
      }
    }
LABEL_81:
    if (v26) {
      free(v26);
    }
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_context_destroy";
  uint64_t v21 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v46 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v21, type, &v46))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v22 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_context_destroy";
      uint32_t v24 = "%{public}s called with null ohttp_context";
      goto LABEL_75;
    }
    if (v46 == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v22 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_context_destroy";
      uint32_t v24 = "%{public}s called with null ohttp_context, backtrace limit exceeded";
      goto LABEL_75;
    }
    uint32_t v35 = (char *)__nw_create_backtrace_string();
    BOOL v22 = __nwlog_obj();
    os_log_type_t v23 = type[0];
    BOOL v36 = os_log_type_enabled(v22, type[0]);
    if (v35)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_context_destroy";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v35;
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null ohttp_context, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v35);
      goto LABEL_76;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_context_destroy";
      uint32_t v24 = "%{public}s called with null ohttp_context, no backtrace";
LABEL_75:
      _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
    }
  }
LABEL_76:
  if (v21) {
    free(v21);
  }
}

uint64_t ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t ___ZL33nw_protocol_ohttp_context_destroyP16nw_ohttp_context_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[2];
  uint64_t v4 = (void *)a2[3];
  if (v3)
  {
    *(void *)(v3 + 24) = v4;
    uint64_t v4 = (void *)a2[3];
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 32) = v4;
  }
  void *v4 = v3;
  a2[2] = 0;
  a2[3] = 0;
  buffer = (void *)nw_frame_get_buffer((uint64_t)a2, 0);
  if (buffer) {
    free(buffer);
  }
  os_release(a2);
  return 1;
}

uint64_t ___ZL25nw_protocol_ohttp_destroyP17nw_protocol_ohttp_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

BOOL nw_protocol_ohttp_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
    size_t v44 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v44, type, &v62)) {
      goto LABEL_163;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null protocol";
      goto LABEL_162;
    }
    if (!v62)
    {
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v45 = __nwlog_obj();
    os_log_type_t v46 = type[0];
    BOOL v49 = os_log_type_enabled(v45, type[0]);
    if (!backtrace_string)
    {
      if (!v49) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_162;
    }
    if (!v49) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    unint64_t v50 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_78:
    _os_log_impl(&dword_1830D4000, v45, v46, v50, buf, 0x16u);
    goto LABEL_79;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
    size_t v44 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v44, type, &v62)) {
      goto LABEL_163;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null ohttp";
      goto LABEL_162;
    }
    if (!v62)
    {
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v45 = __nwlog_obj();
    os_log_type_t v46 = type[0];
    BOOL v51 = os_log_type_enabled(v45, type[0]);
    if (!backtrace_string)
    {
      if (!v51) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null ohttp, no backtrace";
      goto LABEL_162;
    }
    if (!v51) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    unint64_t v50 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
    goto LABEL_78;
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    if ((nw_protocol_common_add_input_handler((uint64_t)a1, (uint64_t)a2) & 1) == 0)
    {
      if ((handle[348] & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v33 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = handle + 349;
          *(_WORD *)&buf[22] = 2080;
          __int16 v68 = " ";
          _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sfailed to add input handler", buf, 0x20u);
        }
      }
      return 0;
    }
    *((_DWORD *)handle + 86) = 0;
    *((_DWORD *)handle + 72) = 0;
    uint64_t parameters = nw_protocol_get_parameters((uint64_t)a2);
    if (!parameters)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      size_t v44 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      char v62 = 0;
      if (!__nwlog_fault(v44, type, &v62)) {
        goto LABEL_163;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v45 = __nwlog_obj();
        os_log_type_t v46 = type[0];
        if (!os_log_type_enabled(v45, type[0])) {
          goto LABEL_163;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
        uint64_t v47 = "%{public}s called with null parameters";
        goto LABEL_162;
      }
      if (!v62)
      {
        char v45 = __nwlog_obj();
        os_log_type_t v46 = type[0];
        if (!os_log_type_enabled(v45, type[0])) {
          goto LABEL_163;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
        uint64_t v47 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_162;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      BOOL v56 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (!v56) {
          goto LABEL_163;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
        uint64_t v47 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_162;
      }
      if (!v56) {
        goto LABEL_79;
      }
LABEL_117:
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      unint64_t v50 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_78;
    }
    char v17 = (void *)parameters;
    handle[348] = handle[348] & 0xFE | nw_path_parameters_get_logging_disabled(*(void *)(parameters + 104));
    uint64_t v18 = nw_parameters_copy_protocol_options_legacy(v17, a1);
    if (!v18)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      size_t v44 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      char v62 = 0;
      if (!__nwlog_fault(v44, type, &v62)) {
        goto LABEL_163;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v45 = __nwlog_obj();
        os_log_type_t v46 = type[0];
        if (!os_log_type_enabled(v45, type[0])) {
          goto LABEL_163;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
        uint64_t v47 = "%{public}s called with null ohttp_options";
        goto LABEL_162;
      }
      if (!v62)
      {
        char v45 = __nwlog_obj();
        os_log_type_t v46 = type[0];
        if (!os_log_type_enabled(v45, type[0])) {
          goto LABEL_163;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
        uint64_t v47 = "%{public}s called with null ohttp_options, backtrace limit exceeded";
        goto LABEL_162;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      BOOL v57 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (!v57) {
          goto LABEL_163;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
        uint64_t v47 = "%{public}s called with null ohttp_options, no backtrace";
        goto LABEL_162;
      }
      if (v57)
      {
LABEL_121:
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        unint64_t v50 = "%{public}s called with null ohttp_options, dumping backtrace:%{public}s";
        goto LABEL_78;
      }
LABEL_79:
      free(backtrace_string);
      goto LABEL_163;
    }
    uint64_t v19 = v18;
    char v20 = v19;
    handle[349] = 0;
    unint64_t v21 = 84;
    uint64_t v22 = 349;
    while (1)
    {
      int v23 = v19[v22 - 301];
      handle[v22] = v23;
      if (!v23) {
        break;
      }
      --v21;
      ++v22;
      if (v21 <= 1)
      {
        handle[v22] = 0;
        break;
      }
    }

    if (nw_oblivious_http_get_use_chunks(v20)) {
      char v24 = 2;
    }
    else {
      char v24 = 0;
    }
    handle[348] = handle[348] & 0xFD | v24;
    if (nw_oblivious_http_get_use_context_ids(v20)) {
      char v25 = 4;
    }
    else {
      char v25 = 0;
    }
    handle[348] = handle[348] & 0xFB | v25;
    *((void *)handle + 19) = nw_oblivious_http_copy_config(v20);
    *((void *)handle + 8) = nw_oblivious_http_get_context_id(v20);
    handle[292] = handle[292] & 0xFE | nw_oblivious_http_get_config_is_standalone_aead(v20);
    media_os_log_type_t type = (const char *)nw_oblivious_http_get_media_type(v20);
    if (media_type)
    {
      int v27 = strdup(media_type);
      if (!v27)
      {
        BOOL v52 = __nwlog_obj();
        os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "strict_strdup";
        char v53 = (void *)_os_log_send_and_compose_impl();
        BOOL result = __nwlog_abort((uint64_t)v53);
        if (result) {
          goto LABEL_167;
        }
        free(v53);
      }
      *((void *)handle + 35) = v27;
    }
    uint64_t request_path = nw_oblivious_http_get_request_path(v20);
    uint64_t v29 = (void *)_nw_http_request_create("POST", 0, 0, request_path);
    char v30 = v29;
    if ((handle[348] & 2) != 0) {
      uint64_t v31 = "message/ohttp-chunked-req";
    }
    else {
      uint64_t v31 = "message/ohttp-req";
    }
    nw_http_fields_append(v29, (uint64_t)"Content-Type", (uint64_t)v31);
    *((void *)handle + 38) = nw_http_create_metadata_for_request(v30);
    if (v30) {
      os_release(v30);
    }
    os_release(v20);
    if (!*((void *)handle + 19))
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      size_t v44 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      char v62 = 0;
      if (!__nwlog_fault(v44, type, &v62)) {
        goto LABEL_163;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v45 = __nwlog_obj();
        os_log_type_t v46 = type[0];
        if (!os_log_type_enabled(v45, type[0])) {
          goto LABEL_163;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
        uint64_t v47 = "%{public}s called with null ohttp->default_context.config";
        goto LABEL_162;
      }
      if (!v62)
      {
        char v45 = __nwlog_obj();
        os_log_type_t v46 = type[0];
        if (!os_log_type_enabled(v45, type[0])) {
          goto LABEL_163;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
        uint64_t v47 = "%{public}s called with null ohttp->default_context.config, backtrace limit exceeded";
        goto LABEL_162;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      BOOL v58 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (!v58) {
          goto LABEL_163;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
        uint64_t v47 = "%{public}s called with null ohttp->default_context.config, no backtrace";
        goto LABEL_162;
      }
      if (v58)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        unint64_t v50 = "%{public}s called with null ohttp->default_context.config, dumping backtrace:%{public}s";
        goto LABEL_78;
      }
      goto LABEL_79;
    }
    if (*((void *)handle + 38)) {
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
    size_t v44 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v44, type, &v62)) {
      goto LABEL_163;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null ohttp->oblivious_request_metadata";
      goto LABEL_162;
    }
    if (!v62)
    {
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null ohttp->oblivious_request_metadata, backtrace limit exceeded";
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v45 = __nwlog_obj();
    os_log_type_t v46 = type[0];
    BOOL v59 = os_log_type_enabled(v45, type[0]);
    if (backtrace_string)
    {
      if (!v59) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      unint64_t v50 = "%{public}s called with null ohttp->oblivious_request_metadata, dumping backtrace:%{public}s";
      goto LABEL_78;
    }
    if (!v59) {
      goto LABEL_163;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
    uint64_t v47 = "%{public}s called with null ohttp->oblivious_request_metadata, no backtrace";
LABEL_162:
    _os_log_impl(&dword_1830D4000, v45, v46, v47, buf, 0xCu);
LABEL_163:
    if (v44) {
      free(v44);
    }
    return 0;
  }
  if (default_input_handler == a2 || (~handle[348] & 6) != 0) {
    return 0;
  }
  os_log_type_t v6 = (void *)nw_protocol_get_parameters((uint64_t)a2);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
    size_t v44 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v44, type, &v62)) {
      goto LABEL_163;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null parameters";
      goto LABEL_162;
    }
    if (!v62)
    {
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v45 = __nwlog_obj();
    os_log_type_t v46 = type[0];
    BOOL v54 = os_log_type_enabled(v45, type[0]);
    if (!backtrace_string)
    {
      if (!v54) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null parameters, no backtrace";
      goto LABEL_162;
    }
    if (!v54) {
      goto LABEL_79;
    }
    goto LABEL_117;
  }
  os_log_type_t v7 = nw_parameters_copy_protocol_options_legacy(v6, a1);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
    size_t v44 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v44, type, &v62)) {
      goto LABEL_163;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null ohttp_options";
      goto LABEL_162;
    }
    if (!v62)
    {
      char v45 = __nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null ohttp_options, backtrace limit exceeded";
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v45 = __nwlog_obj();
    os_log_type_t v46 = type[0];
    BOOL v55 = os_log_type_enabled(v45, type[0]);
    if (!backtrace_string)
    {
      if (!v55) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
      uint64_t v47 = "%{public}s called with null ohttp_options, no backtrace";
      goto LABEL_162;
    }
    if (v55) {
      goto LABEL_121;
    }
    goto LABEL_79;
  }
  uint64_t v8 = v7;
  if ((nw_oblivious_http_get_use_context_ids(v7) & 1) == 0)
  {
    if (handle[348]) {
      goto LABEL_46;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v34 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = handle + 349;
    *(_WORD *)&buf[22] = 2080;
    __int16 v68 = " ";
    uint64_t v13 = "%{public}s %{public}s%sOptions do not enable using context IDs";
    char v14 = v34;
    uint32_t v15 = 32;
    goto LABEL_45;
  }
  uint64_t context_id = nw_oblivious_http_get_context_id(v8);
  if (*((void *)handle + 8) == context_id)
  {
LABEL_12:
    if (handle[348]) {
      goto LABEL_46;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v12 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = handle + 349;
    *(_WORD *)&buf[22] = 2080;
    __int16 v68 = " ";
    LOWORD(v69) = 2048;
    *(void *)((char *)&v69 + 2) = context_id;
    uint64_t v13 = "%{public}s %{public}s%sContext already added for ID %llu";
    char v14 = v12;
    uint32_t v15 = 42;
LABEL_45:
    _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
LABEL_46:
    os_release(v8);
    return 0;
  }
  BOOL v10 = (char *)*((void *)handle + 37);
  if (!v10) {
    goto LABEL_50;
  }
  *(void *)os_log_type_t type = 0;
  size_t v64 = type;
  uint64_t v65 = 0x2000000000;
  uint64_t v66 = 0;
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = ___ZL44nw_protocol_ohttp_get_context_for_context_idP17nw_protocol_ohttpy_block_invoke;
  __int16 v68 = (const char *)&unk_1E523F2B8;
  *(void *)&long long v69 = type;
  *((void *)&v69 + 1) = context_id;
  nw_hash_table_apply(v10, (uint64_t)buf);
  uint64_t v11 = *((void *)v64 + 3);
  _Block_object_dispose(type, 8);
  if (v11) {
    goto LABEL_12;
  }
  uint64_t internal = *((void *)handle + 37);
  if (!internal)
  {
LABEL_50:
    uint64_t internal = nw_hash_table_create_internal(5u, 232, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
    if (internal) {
      *(_DWORD *)(internal + 48) &= ~2u;
    }
    *((void *)handle + 37) = internal;
  }
  type[0] = OS_LOG_TYPE_DEFAULT;
  BOOL v37 = nw_hash_table_add_object(internal, (uint64_t)a2, (char *)type);
  BOOL v32 = type[0] != OS_LOG_TYPE_DEFAULT;
  if (type[0] == OS_LOG_TYPE_DEFAULT)
  {
    if ((handle[348] & 1) == 0)
    {
      unint64_t v43 = __nwlog_obj();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 349;
        *(_WORD *)&buf[22] = 2080;
        __int16 v68 = " ";
        LOWORD(v69) = 1042;
        *(_DWORD *)((char *)&v69 + 2) = 16;
        WORD3(v69) = 2098;
        *((void *)&v69 + 1) = a2;
        _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sInput handler already registered for %{public,uuid_t}.16P", buf, 0x30u);
      }
    }
    os_release(v8);
    return v32;
  }
  BOOL v38 = (void *)v37;
  uint64_t extra = nw_hash_node_get_extra(v37);
  *(_DWORD *)(extra + 224) = 0;
  *(void *)(extra + 88) = nw_oblivious_http_copy_config(v8);
  *(unsigned char *)(extra + 228) = *(unsigned char *)(extra + 228) & 0xFE | nw_oblivious_http_get_config_is_standalone_aead(v8);
  *(void *)uint64_t extra = context_id;
  BOOL v40 = (const char *)nw_oblivious_http_get_media_type(v8);
  if (!v40)
  {
LABEL_57:
    *(void *)(extra + 8) = 0;
    uint64_t v42 = (void *)(extra + 8);
    v42[2] = 0;
    v42[1] = v42;
    v42[3] = v42 + 2;
    v42[4] = 0;
    v42[5] = v42 + 4;
    os_release(v8);
    a2->output_handler_context = v38;
    nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
    return v32;
  }
  BOOL v41 = strdup(v40);
  if (v41)
  {
LABEL_56:
    *(void *)(extra + 216) = v41;
    goto LABEL_57;
  }
  BOOL v60 = __nwlog_obj();
  os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "strict_strdup";
  size_t v61 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v61);
  if (!result)
  {
    free(v61);
    goto LABEL_56;
  }
LABEL_167:
  __break(1u);
  return result;
}

void sub_18387422C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NWConcrete_nw_masque_connection_pair;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void nw_masque_connection_pair_cancel_waiting_timer(NWConcrete_nw_masque_connection_pair *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (*((void *)v1 + 36))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = (id)gLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = (char *)*((void *)v2 + 2);
        uint64_t v5 = *((void *)v2 + 6);
        *(_DWORD *)buf = 136446722;
        uint64_t v18 = "nw_masque_connection_pair_cancel_waiting_timer";
        __int16 v19 = 2114;
        char v20 = v4;
        __int16 v21 = 2112;
        uint64_t v22 = v5;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}@ cancelling wait timer for %@", buf, 0x20u);
      }

      dispatch_source_cancel(*((dispatch_source_t *)v2 + 36));
      os_log_type_t v6 = (void *)*((void *)v2 + 36);
      *((void *)v2 + 36) = 0;
    }
    goto LABEL_6;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_masque_connection_pair_cancel_waiting_timer";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_masque_connection_pair_cancel_waiting_timer";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_masque_connection_pair_cancel_waiting_timer";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_masque_connection_pair_cancel_waiting_timer";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_masque_connection_pair_cancel_waiting_timer";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
LABEL_6:
}

void sub_1838746FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NWConcrete_nw_masque_listener_pair;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_183874CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_masque_connection_start_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (nw_connection_t *)*(id *)(a1 + 32);
  nw_connection_t v2 = v1[6];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = ___ZL35nw_masque_connection_start_on_queueP31NWConcrete_nw_masque_connection_block_invoke;
  v11[3] = &unk_1E524BAA8;
  uint64_t v3 = v1;
  os_log_type_t v12 = v3;
  nw_connection_set_read_close_handler(v2, v11);
  uint64_t v4 = v1[6];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZL35nw_masque_connection_start_on_queueP31NWConcrete_nw_masque_connection_block_invoke_199;
  v9[3] = &unk_1E524BA60;
  uint64_t v5 = v3;
  os_log_type_t v10 = v5;
  nw_connection_set_state_changed_handler(v4, v9);
  nw_connection_set_queue(v1[6], v5[4]);
  os_log_type_t v6 = v5;
  nw_connection_t v7 = v1[6];
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke;
  os_log_type_t v14 = &unk_1E52427C0;
  char v15 = v6;
  nw_connection_receive_internal(v7, 0, 0, 0, buf);

  nw_connection_start(v1[6]);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v8 = (id)gLogObj;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_masque_connection_start_on_queue";
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v6;
    _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s %{public}@ started connection", buf, 0x16u);
  }
}

void sub_183874F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void ___ZL35nw_masque_connection_start_on_queueP31NWConcrete_nw_masque_connection_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  nw_connection_t v2 = *(unsigned __int8 **)(a1 + 32);
  int v3 = v2[112];
  if (v3 == 200)
  {
    if (gLogDatapath)
    {
      os_log_type_t v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        int v8 = 136446466;
        uint64_t v9 = "nw_masque_connection_start_on_queue_block_invoke";
        __int16 v10 = 2114;
        uint64_t v11 = v7;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ ignoring in connection read close event", (uint8_t *)&v8, 0x16u);
      }
    }
  }
  else if (v3 != 255)
  {
    if (gLogDatapath)
    {
      uint64_t v4 = __nwlog_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        int v8 = 136446466;
        uint64_t v9 = "nw_masque_connection_start_on_queue_block_invoke";
        __int16 v10 = 2114;
        uint64_t v11 = v5;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ in connection read close before proxy connection ready, cancelling", (uint8_t *)&v8, 0x16u);
      }

      nw_connection_t v2 = *(unsigned __int8 **)(a1 + 32);
    }
    nw_masque_connection_cancel_on_queue(v2, 0);
  }
}

void ___ZL35nw_masque_connection_start_on_queueP31NWConcrete_nw_masque_connection_block_invoke_199(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (*(unsigned __int8 *)(*(void *)(a1 + 32) + 112) != 255)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      if (a2 > 5) {
        uint64_t v7 = "unknown";
      }
      else {
        uint64_t v7 = off_1E523DF08[a2];
      }
      uint64_t v8 = *(void *)(a1 + 32);
      int v12 = 136446722;
      BOOL v13 = "nw_masque_connection_start_on_queue_block_invoke";
      __int16 v14 = 2114;
      uint64_t v15 = v8;
      __int16 v16 = 2082;
      char v17 = v7;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ in connection event %{public}s", (uint8_t *)&v12, 0x20u);
    }

    if (a2 == 3)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v9 + 112) == 1)
      {
        *(unsigned char *)(v9 + 112) = 2;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v10 = (id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          uint64_t v11 = *(void *)(a1 + 32);
          int v12 = 136446466;
          BOOL v13 = "nw_masque_connection_start_on_queue_block_invoke";
          __int16 v14 = 2114;
          uint64_t v15 = v11;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s %{public}@ connection masque connected", (uint8_t *)&v12, 0x16u);
        }
      }
    }
    else if (a2 == 4)
    {
      nw_masque_connection_cancel_on_queue(*(void **)(a1 + 32), v5);
    }
  }
}

void sub_1838752F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_masque_connection_cancel_on_queue(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3[112] != 255)
  {
    if (v4 && !*((void *)v3 + 15)) {
      objc_storeStrong((id *)v3 + 15, a2);
    }
    nw_dictionary_apply(*((void *)v3 + 7), (uint64_t)&__block_literal_global_365);
    nw_dictionary_apply(*((void *)v3 + 8), (uint64_t)&__block_literal_global_367);
    os_log_type_t v6 = *((void *)v3 + 6);
    if (v6)
    {
      nw_connection_cancel(v6);
      uint64_t v7 = (void *)*((void *)v3 + 6);
      *((void *)v3 + 6) = 0;
    }
    if (gLogDatapath)
    {
      uint64_t v11 = __nwlog_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *((void *)v3 + 15);
        int v13 = 136446722;
        __int16 v14 = "nw_masque_connection_cancel_on_queue";
        __int16 v15 = 2114;
        __int16 v16 = v3;
        __int16 v17 = 2114;
        uint64_t v18 = v12;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@, error %{public}@", (uint8_t *)&v13, 0x20u);
      }
    }
    v3[112] = -1;
    uint64_t v8 = (void *)*((void *)v3 + 7);
    *((void *)v3 + 7) = 0;

    uint64_t v9 = (void *)*((void *)v3 + 8);
    *((void *)v3 + 8) = 0;

    __int16 v10 = (void *)*((void *)v3 + 13);
    *((void *)v3 + 13) = 0;

    int v3 = 0;
  }
}

void sub_183875490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_201(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    id v4 = __nwlog_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 136446722;
      uint64_t v7 = "nw_masque_read_inner_request_on_queue_block_invoke";
      __int16 v8 = 2114;
      uint64_t v9 = v5;
      __int16 v10 = 2080;
      uint64_t v11 = a2;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received method %s", (uint8_t *)&v6, 0x20u);
    }
  }
}

uint64_t __Block_byref_object_copy__29668(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__29669(uint64_t a1)
{
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_203(uint64_t a1, char *__s)
{
  if (__s)
  {
    size_t v4 = strlen(__s);
    if (v4 >= 3 && *__s == 58)
    {
      size_t v5 = v4;
      if (__s[v4 - 1] == 58)
      {
        dispatch_data_t v6 = dispatch_data_create(__s, v4, 0, 0);
        uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
        __int16 v8 = *(void **)(v7 + 40);
        *(void *)(v7 + 40) = v6;

        dispatch_data_t v12 = dispatch_data_create(__s + 1, v5 - 2, 0, 0);
        uint64_t v9 = dispatch_data_create_with_transform();
        uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v11 = *(void **)(v10 + 40);
        *(void *)(v10 + 40) = v9;
      }
    }
  }
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_2(uint64_t a1, char *__s)
{
  if (__s)
  {
    size_t v4 = strlen(__s);
    if (v4 >= 3 && *__s == 58)
    {
      size_t v5 = v4;
      if (__s[v4 - 1] == 58)
      {
        dispatch_data_t v6 = dispatch_data_create(__s, v4, 0, 0);
        uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
        __int16 v8 = *(void **)(v7 + 40);
        *(void *)(v7 + 40) = v6;

        dispatch_data_t v12 = dispatch_data_create(__s + 1, v5 - 2, 0, 0);
        uint64_t v9 = dispatch_data_create_with_transform();
        uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v11 = *(void **)(v10 + 40);
        *(void *)(v10 + 40) = v9;
      }
    }
  }
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_3(uint64_t a1, const char *a2)
{
  if (a2)
  {
    nw_endpoint_t url = 0;
    asprintf(&url, "tcp://%s", a2);
    nw_endpoint_t v3 = nw_endpoint_create_url(url);
    BOOL v4 = nw_endpoint_copy_host_port_endpoint_for_url(v3);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    dispatch_data_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    if (url) {
      free(url);
    }
  }
}

void sub_183875808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_4(uint64_t result, char *__s1)
{
  if (__s1)
  {
    uint64_t v3 = result;
    BOOL result = strcmp(__s1, "connect-udp");
    if (result)
    {
      BOOL result = strcmp(__s1, "connect-ip");
      if (result) {
        return result;
      }
      uint64_t v4 = v3 + 40;
    }
    else
    {
      uint64_t v4 = v3 + 32;
    }
    *(unsigned char *)(*(void *)(*(void *)v4 + 8) + 24) = 1;
  }
  return result;
}

void *___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_5(void *result, char *__s)
{
  if (__s)
  {
    uint64_t v3 = (void *)result[4];
    size_t v4 = strlen(__s);
    return memcpy(v3, __s, v4);
  }
  return result;
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_6(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = [NSString stringWithUTF8String:a2];
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

os_unfair_lock_s *nw_masque_connection_pair_create(NWConcrete_nw_masque_connection *a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  nw_connection_t v2 = a1;
  uint64_t v3 = [NWConcrete_nw_masque_connection_pair alloc];
  uint64_t v4 = v2;
  if (!v3) {
    goto LABEL_4;
  }
  v45.os_log_type_t receiver = v3;
  v45.super_class = (Class)NWConcrete_nw_masque_connection_pair;
  uint64_t v3 = [(NWConcrete_nw_masque_connection *)&v45 init];
  if (v3)
  {
    dispatch_group_t v5 = dispatch_group_create();
    dispatch_data_t v6 = (void *)*((void *)v3 + 29);
    *((void *)v3 + 29) = v5;

    objc_storeStrong((id *)v3 + 2, a1);
    nw_endpoint_t v7 = nw_connection_copy_endpoint(v4[6]);
    __int16 v8 = (void *)*((void *)v3 + 28);
    *((void *)v3 + 28) = v7;

    uint64_t v9 = (void *)*((void *)v3 + 6);
    *((void *)v3 + 6) = 0;

    snprintf((char *)v3 + 200, 0x11uLL, "%llx", v3);
    goto LABEL_4;
  }
  __int16 v21 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_connection_pair initWithInnerConnection:]";
  uint64_t v22 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (__nwlog_fault(v22, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_connection_pair initWithInnerConnection:]";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s [super init] failed", buf, 0xCu);
      }
    }
    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_connection_pair initWithInnerConnection:]";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v23, v30, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_connection_pair initWithInnerConnection:]";
        _os_log_impl(&dword_1830D4000, v23, v30, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_connection_pair initWithInnerConnection:]";
        _os_log_impl(&dword_1830D4000, v23, v35, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_36:
  if (v22) {
    free(v22);
  }
  uint64_t v3 = 0;
LABEL_4:

  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL32nw_masque_connection_pair_createP31NWConcrete_nw_masque_connection_block_invoke;
  aBlock[3] = &unk_1E524B9A0;
  uint64_t v10 = v4;
  BOOL v41 = v10;
  uint64_t v11 = v3;
  uint64_t v42 = v11;
  dispatch_data_t v12 = (void (**)(void))_Block_copy(aBlock);
  int v13 = (os_unfair_lock_s *)(v4 + 3);
  os_unfair_lock_lock(v13);
  v12[2](v12);
  os_unfair_lock_unlock(v13);

  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = ___ZL32nw_masque_connection_pair_createP31NWConcrete_nw_masque_connection_block_invoke_2;
  v37[3] = &unk_1E524BB98;
  __int16 v14 = v10;
  BOOL v38 = v14;
  uint64_t v39 = v11;
  __int16 v15 = v39;
  __int16 v16 = v37;
  if (v15)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL51nw_masque_connection_pair_set_state_changed_handlerP36NWConcrete_nw_masque_connection_pairU13block_pointerFv21nw_connection_state_tPU22objcproto11OS_nw_error8NSObjectE_block_invoke;
    uint64_t v47 = &unk_1E524B950;
    BOOL v48 = v15;
    BOOL v49 = v16;
    __int16 v17 = (void (**)(void))_Block_copy(buf);
    os_unfair_lock_lock(v15 + 2);
    v17[2](v17);
    os_unfair_lock_unlock(v15 + 2);

    goto LABEL_6;
  }
  char v25 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
  uint64_t v26 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v45.receiver) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v26, &v45, &type))
  {
    if (LOBYTE(v45.receiver) == 17)
    {
      int v27 = __nwlog_obj();
      os_log_type_t receiver = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v27, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v27, receiver, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (type)
    {
      BOOL v32 = (char *)__nw_create_backtrace_string();
      int v27 = __nwlog_obj();
      os_log_type_t v33 = (os_log_type_t)v45.receiver;
      BOOL v34 = os_log_type_enabled(v27, (os_log_type_t)v45.receiver);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v32;
          _os_log_impl(&dword_1830D4000, v27, v33, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v32);
        goto LABEL_42;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v27, v33, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v27 = __nwlog_obj();
      os_log_type_t v36 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v27, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v27, v36, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_42:
  if (v26) {
    free(v26);
  }
LABEL_6:

  uint64_t v18 = v39;
  uint64_t v19 = v15;

  return v19;
}

void sub_183876030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_218(uint64_t a1)
{
}

os_unfair_lock_s *nw_masque_listener_pair_create(NWConcrete_nw_masque_connection *a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  nw_connection_t v2 = a1;
  uint64_t v3 = [NWConcrete_nw_masque_listener_pair alloc];
  uint64_t v4 = v2;
  if (!v3) {
    goto LABEL_4;
  }
  v45.os_log_type_t receiver = v3;
  v45.super_class = (Class)NWConcrete_nw_masque_listener_pair;
  uint64_t v3 = [(NWConcrete_nw_masque_connection *)&v45 init];
  if (v3)
  {
    dispatch_group_t v5 = dispatch_group_create();
    dispatch_data_t v6 = (void *)*((void *)v3 + 12);
    *((void *)v3 + 12) = v5;

    objc_storeStrong((id *)v3 + 2, a1);
    nw_endpoint_t v7 = nw_connection_copy_endpoint(v4[6]);
    __int16 v8 = (void *)*((void *)v3 + 11);
    *((void *)v3 + 11) = v7;

    uint64_t v9 = (void *)*((void *)v3 + 3);
    *((void *)v3 + 3) = 0;

    snprintf((char *)v3 + 64, 0x11uLL, "%llx", v3);
    goto LABEL_4;
  }
  __int16 v21 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_listener_pair initWithInnerConnection:]";
  uint64_t v22 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (__nwlog_fault(v22, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_listener_pair initWithInnerConnection:]";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s [super init] failed", buf, 0xCu);
      }
    }
    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_listener_pair initWithInnerConnection:]";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v23, v30, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_listener_pair initWithInnerConnection:]";
        _os_log_impl(&dword_1830D4000, v23, v30, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_listener_pair initWithInnerConnection:]";
        _os_log_impl(&dword_1830D4000, v23, v35, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_36:
  if (v22) {
    free(v22);
  }
  uint64_t v3 = 0;
LABEL_4:

  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL30nw_masque_listener_pair_createP31NWConcrete_nw_masque_connection_block_invoke;
  aBlock[3] = &unk_1E524B9A0;
  uint64_t v10 = v4;
  BOOL v41 = v10;
  uint64_t v11 = v3;
  uint64_t v42 = v11;
  dispatch_data_t v12 = (void (**)(void))_Block_copy(aBlock);
  int v13 = (os_unfair_lock_s *)(v4 + 3);
  os_unfair_lock_lock(v13);
  v12[2](v12);
  os_unfair_lock_unlock(v13);

  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = ___ZL30nw_masque_listener_pair_createP31NWConcrete_nw_masque_connection_block_invoke_2;
  v37[3] = &unk_1E524BB98;
  __int16 v14 = v10;
  BOOL v38 = v14;
  uint64_t v39 = v11;
  __int16 v15 = v39;
  __int16 v16 = v37;
  if (v15)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL49nw_masque_listener_pair_set_state_changed_handlerP34NWConcrete_nw_masque_listener_pairU13block_pointerFv21nw_connection_state_tPU22objcproto11OS_nw_error8NSObjectE_block_invoke;
    uint64_t v47 = &unk_1E524B950;
    BOOL v48 = v15;
    BOOL v49 = v16;
    __int16 v17 = (void (**)(void))_Block_copy(buf);
    os_unfair_lock_lock(v15 + 2);
    v17[2](v17);
    os_unfair_lock_unlock(v15 + 2);

    goto LABEL_6;
  }
  char v25 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
  uint64_t v26 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v45.receiver) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v26, &v45, &type))
  {
    if (LOBYTE(v45.receiver) == 17)
    {
      int v27 = __nwlog_obj();
      os_log_type_t receiver = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v27, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v27, receiver, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (type)
    {
      BOOL v32 = (char *)__nw_create_backtrace_string();
      int v27 = __nwlog_obj();
      os_log_type_t v33 = (os_log_type_t)v45.receiver;
      BOOL v34 = os_log_type_enabled(v27, (os_log_type_t)v45.receiver);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v32;
          _os_log_impl(&dword_1830D4000, v27, v33, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v32);
        goto LABEL_42;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v27, v33, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v27 = __nwlog_obj();
      os_log_type_t v36 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v27, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v27, v36, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_42:
  if (v26) {
    free(v26);
  }
LABEL_6:

  uint64_t v18 = v39;
  uint64_t v19 = v15;

  return v19;
}

void sub_1838767AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

void nw_masque_listener_pair_setup_outer_connection_group(void *a1, void *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    id v5 = v3;
    *(void *)char v53 = MEMORY[0x1E4F143A8];
    *(void *)&v53[8] = 3221225472;
    *(void *)&v53[16] = ___ZL38nw_masque_listener_pair_handle_headersP34NWConcrete_nw_masque_listener_pairPU29objcproto18OS_nw_http_request8NSObject_block_invoke;
    BOOL v54 = (void *(*)(uint64_t, uint64_t))&unk_1E5242598;
    BOOL v55 = (void (*)(uint64_t))v5;
    nw_http_fields_enumerate(v4, v53);

    secure_udp = nw_parameters_create_secure_udp(&__block_literal_global_19196, &__block_literal_global_98);
    nw_endpoint_t v7 = secure_udp;
    __int16 v8 = *(NSObject **)(*((void *)v5 + 2) + 80);
    if (v8) {
      nw_parameters_require_interface(secure_udp, v8);
    }
    nw_parameters_set_proxy_applied(v7, 1);
    if (*((void *)v5 + 16)) {
      nw_parameters_set_reuse_local_address(v7, 1);
    }
    uint64_t v9 = *((void *)v5 + 2);
    uint64_t v10 = *(void *)(v9 + 16);
    nw_endpoint_t v11 = nw_connection_copy_endpoint(*(nw_connection_t *)(v9 + 48));
    *(void *)char v53 = 0;
    *(void *)&v53[8] = v53;
    *(void *)&v53[16] = 0x3032000000;
    BOOL v54 = __Block_byref_object_copy__271;
    BOOL v55 = __Block_byref_object_dispose__272;
    id v56 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke;
    aBlock[3] = &unk_1E524B978;
    uint64_t v50 = v53;
    dispatch_data_t v12 = (nw_connection_group_t *)v5;
    BOOL v49 = v12;
    int v13 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v5 + 2);
    v13[2](v13);
    os_unfair_lock_unlock((os_unfair_lock_t)v5 + 2);

    uint64_t v14 = *(void *)(*(void *)&v53[8] + 40);
    if (v14) {
      (*(void (**)(uint64_t, uint64_t, void, NSObject *, nw_endpoint_t, id))(v14 + 16))(v14, v10, 0, v7, v11, v4);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *((void *)v5 + 2);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_setup_outer_connection_group";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v16;
      *(_WORD *)&buf[22] = 2112;
      BOOL v58 = v7;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_INFO, "%{public}s %{public}@ creating new outer connection group with parameters %@", buf, 0x20u);
    }

    __int16 v17 = nw_connection_group_create_with_parameters(v7);
    nw_connection_group_t v18 = v12[3];
    v12[3] = (nw_connection_group_t)v17;

    nw_connection_group_set_queue(v12[3], *(dispatch_queue_t *)(*((void *)v5 + 2) + 32));
    uint64_t v19 = v12[3];
    state_changed_handler[0] = MEMORY[0x1E4F143A8];
    state_changed_handler[1] = 3221225472;
    state_changed_handler[2] = ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke_346;
    state_changed_handler[3] = &unk_1E524BA60;
    char v20 = v12;
    uint64_t v47 = v20;
    nw_connection_group_set_state_changed_handler(v19, state_changed_handler);
    __int16 v21 = v20;
    uint64_t v22 = v21;
    if (*(void *)(*((void *)v5 + 2) + 48))
    {
      uint64_t v23 = v12[3];
      if (v23)
      {
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = ___ZL44nw_masque_listener_pair_read_outer_datagramsP34NWConcrete_nw_masque_listener_pair_block_invoke;
        BOOL v58 = &unk_1E523F7A8;
        BOOL v59 = v21;
        nw_connection_group_set_receive_handler(v23, 0xFFFFFFFF, 0, buf);

LABEL_13:
        nw_connection_group_start(v12[3]);

        _Block_object_dispose(v53, 8);
        goto LABEL_14;
      }
      BOOL v32 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
      objc_super v45 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      uint64_t v29 = (char *)v45;
      if (!__nwlog_fault(v45, &type, &v51))
      {
LABEL_66:
        if (v29) {
          free(v29);
        }
        goto LABEL_13;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
          _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null pair->mlp_outer_connection_group", buf, 0xCu);
        }
LABEL_64:

        goto LABEL_65;
      }
      if (!v51)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
          _os_log_impl(&dword_1830D4000, v30, v42, "%{public}s called with null pair->mlp_outer_connection_group, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_64;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v39 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
          _os_log_impl(&dword_1830D4000, v30, v44, "%{public}s called with null pair->mlp_outer_connection_group, no backtrace", buf, 0xCu);
        }
        goto LABEL_64;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v30, v44, "%{public}s called with null pair->mlp_outer_connection_group, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      os_log_type_t v28 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
      objc_super v45 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      uint64_t v29 = (char *)v45;
      if (!__nwlog_fault(v45, &type, &v51)) {
        goto LABEL_66;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null pair->mlp_parent->mc_in_connection", buf, 0xCu);
        }
        goto LABEL_64;
      }
      if (!v51)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
          _os_log_impl(&dword_1830D4000, v30, v41, "%{public}s called with null pair->mlp_parent->mc_in_connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_64;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v43 = type;
      BOOL v38 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
          _os_log_impl(&dword_1830D4000, v30, v43, "%{public}s called with null pair->mlp_parent->mc_in_connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_64;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v30, v43, "%{public}s called with null pair->mlp_parent->mc_in_connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(backtrace_string);
LABEL_65:
    uint64_t v29 = (char *)v45;
    goto LABEL_66;
  }
  os_log_type_t v24 = __nwlog_obj();
  *(_DWORD *)char v53 = 136446210;
  *(void *)&v53[4] = "nw_masque_listener_pair_setup_outer_connection_group";
  char v25 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v25, buf, &type))
  {
    if (buf[0] == 17)
    {
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v27 = buf[0];
      if (os_log_type_enabled(v26, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)char v53 = 136446210;
        *(void *)&v53[4] = "nw_masque_listener_pair_setup_outer_connection_group";
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null pair", v53, 0xCu);
      }
    }
    else if (type)
    {
      BOOL v34 = (char *)__nw_create_backtrace_string();
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v35 = buf[0];
      BOOL v36 = os_log_type_enabled(v26, (os_log_type_t)buf[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)char v53 = 136446466;
          *(void *)&v53[4] = "nw_masque_listener_pair_setup_outer_connection_group";
          *(_WORD *)&v53[12] = 2082;
          *(void *)&v53[14] = v34;
          _os_log_impl(&dword_1830D4000, v26, v35, "%{public}s called with null pair, dumping backtrace:%{public}s", v53, 0x16u);
        }

        free(v34);
        goto LABEL_57;
      }
      if (v36)
      {
        *(_DWORD *)char v53 = 136446210;
        *(void *)&v53[4] = "nw_masque_listener_pair_setup_outer_connection_group";
        _os_log_impl(&dword_1830D4000, v26, v35, "%{public}s called with null pair, no backtrace", v53, 0xCu);
      }
    }
    else
    {
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v40 = buf[0];
      if (os_log_type_enabled(v26, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)char v53 = 136446210;
        *(void *)&v53[4] = "nw_masque_listener_pair_setup_outer_connection_group";
        _os_log_impl(&dword_1830D4000, v26, v40, "%{public}s called with null pair, backtrace limit exceeded", v53, 0xCu);
      }
    }
  }
LABEL_57:
  if (v25) {
    free(v25);
  }
LABEL_14:
}

void sub_183877288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_masque_listener_pair_read_inner(NWConcrete_nw_masque_listener_pair *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  nw_connection_t v2 = v1;
  if (!v1)
  {
    id v4 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v13, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v5) {
          goto LABEL_5;
        }
LABEL_56:
        free(v5);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_1830D4000, v6, v13, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_1830D4000, v6, v20, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  id v3 = *(void **)(*((void *)v1 + 2) + 48);
  if (!v3)
  {
    __int16 v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null pair->mlp_parent->mc_in_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_1830D4000, v6, v21, "%{public}s called with null pair->mlp_parent->mc_in_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    __int16 v15 = (char *)__nw_create_backtrace_string();
    dispatch_data_t v6 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null pair->mlp_parent->mc_in_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
      __int16 v29 = 2082;
      os_log_type_t v30 = v15;
      _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null pair->mlp_parent->mc_in_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!*((void *)v1 + 3))
  {
    uint64_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null pair->mlp_outer_connection_group", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      dispatch_data_t v6 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_1830D4000, v6, v22, "%{public}s called with null pair->mlp_outer_connection_group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    __int16 v15 = (char *)__nw_create_backtrace_string();
    dispatch_data_t v6 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null pair->mlp_outer_connection_group, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v28 = "nw_masque_listener_pair_read_inner";
      __int16 v29 = 2082;
      os_log_type_t v30 = v15;
      _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null pair->mlp_outer_connection_group, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v15);
    if (!v5) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke;
  v23[3] = &unk_1E52427C0;
  os_log_type_t v24 = v1;
  nw_connection_receive_internal(v3, 0, 1u, 0xFFFFFFFF, v23);

LABEL_5:
}

void sub_183877A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_227(uint64_t a1)
{
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_229(uint64_t a1)
{
}

id nw_masque_copy_matching_connection_pair(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v18 = 0;
  BOOL v19 = &v18;
  uint64_t v20 = 0x3032000000;
  os_log_type_t v21 = __Block_byref_object_copy__29668;
  os_log_type_t v22 = __Block_byref_object_dispose__29669;
  id v23 = 0;
  os_log_type_t v7 = v5 + 6;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = ___ZL39nw_masque_copy_matching_connection_pairP31NWConcrete_nw_masque_connectionPU25objcproto14OS_nw_endpoint8NSObjectPKc_block_invoke;
  v13[3] = &unk_1E5242458;
  __int16 v8 = v5;
  BOOL v14 = v8;
  id v15 = v6;
  os_log_type_t v16 = &v18;
  uint64_t v17 = a3;
  id v9 = v6;
  uint64_t v10 = (void (**)(void))_Block_copy(v13);
  os_unfair_lock_lock(v7);
  v10[2](v10);
  os_unfair_lock_unlock(v7);

  id v11 = (id)v19[5];
  _Block_object_dispose(&v18, 8);

  return v11;
}

void sub_183877BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_230(uint64_t a1)
{
}

uint64_t ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = [NSString stringWithCString:a2 encoding:5];
  os_log_type_t v7 = [NSString stringWithCString:a4 encoding:5];
  [*(id *)(a1 + 32) setValue:v7 forHTTPHeaderField:v6];
  if (![v6 caseInsensitiveCompare:@"content-length"]) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v7 integerValue];
  }

  return 1;
}

void sub_183877CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_259(uint64_t a1)
{
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_2_260(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = v4;
  if (v4) {
    id v6 = v4;
  }

  [v3 setHTTPBody:v5];
  os_log_type_t v7 = [MEMORY[0x1E4F18DC0] sharedSession];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_3_262;
  v10[3] = &unk_1E523F640;
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  id v9 = [v7 dataTaskWithRequest:v8 completionHandler:v10];
  [v9 resume];
}

void sub_183877DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_266(uint64_t a1)
{
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_2_267(uint64_t a1)
{
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_3_262(uint64_t a1, void *a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v25 = a2;
  id v4 = a3;
  if (gLogDatapath)
  {
    os_log_type_t v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446722;
      os_log_type_t v33 = "nw_masque_read_inner_request_on_queue_block_invoke_3";
      __int16 v34 = 2114;
      uint64_t v35 = v22;
      __int16 v36 = 1024;
      LODWORD(v37) = [v4 statusCode];
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %u response to client", buf, 0x1Cu);
    }
  }
  id v5 = (void *)_nw_http_response_create((unsigned __int16)[v4 statusCode], 0);
  [v4 allHeaderFields];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = [v6 countByEnumeratingWithState:&v28 objects:v40 count:16];
  if (v7)
  {
    uint64_t v9 = *(void *)v29;
    *(void *)&long long v8 = 136446978;
    long long v23 = v8;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v29 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v28 + 1) + 8 * v10);
        dispatch_data_t v12 = objc_msgSend(v6, "objectForKeyedSubscript:", v11, v23);
        if (gLogDatapath)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v13 = (id)gLogObj;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v14 = *(void *)(a1 + 32);
            *(_DWORD *)buf = v23;
            os_log_type_t v33 = "nw_masque_read_inner_request_on_queue_block_invoke";
            __int16 v34 = 2114;
            uint64_t v35 = v14;
            __int16 v36 = 2112;
            BOOL v37 = v11;
            __int16 v38 = 2112;
            BOOL v39 = v12;
            _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying response header to client: %@: %@", buf, 0x2Au);
          }
        }
        nw_http_fields_append(v5, [v11 UTF8String], objc_msgSend(v12, "UTF8String"));

        ++v10;
      }
      while (v7 != v10);
      uint64_t v15 = [v6 countByEnumeratingWithState:&v28 objects:v40 count:16];
      uint64_t v7 = v15;
    }
    while (v15);
  }

  metadata_for_response = nw_http_create_metadata_for_response(v5);
  if (v25) {
    uint64_t v17 = [v25 _createDispatchData];
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = nw_content_context_create("response");
  nw_content_context_set_metadata_for_protocol(v18, metadata_for_response);
  BOOL v19 = *(void **)(a1 + 32);
  uint64_t v20 = v19[6];
  completion[0] = MEMORY[0x1E4F143A8];
  completion[1] = 3221225472;
  completion[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_263;
  completion[3] = &unk_1E5248CD0;
  os_log_type_t v27 = v19;
  nw_connection_send(v20, v17, v18, 1, completion);
}

void sub_1838781AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_263(uint64_t a1)
{
}

void ___ZL56nw_masque_connection_pair_setup_inner_direct_connectionsP36NWConcrete_nw_masque_connection_pairPU33objcproto22OS_nw_protocol_options8NSObject_block_invoke(uint64_t a1, unsigned int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5) {
      id v5 = "unknown";
    }
    else {
      id v5 = off_1E523DF08[a2];
    }
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(v6 + 32);
    uint64_t v8 = *(void *)(v6 + 16);
    int v9 = 136446978;
    uint64_t v10 = "nw_masque_connection_pair_setup_inner_direct_connections_block_invoke";
    __int16 v11 = 2114;
    uint64_t v12 = v8;
    __int16 v13 = 2112;
    uint64_t v14 = v7;
    __int16 v15 = 2080;
    os_log_type_t v16 = v5;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}@ inner direct send connection to %@ has transitioned to %s", (uint8_t *)&v9, 0x2Au);
  }
}

void ___ZL56nw_masque_connection_pair_setup_inner_direct_connectionsP36NWConcrete_nw_masque_connection_pairPU33objcproto22OS_nw_protocol_options8NSObject_block_invoke_361(uint64_t a1, unsigned int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5) {
      id v5 = "unknown";
    }
    else {
      id v5 = off_1E523DF08[a2];
    }
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16);
    int v8 = 136446978;
    int v9 = "nw_masque_connection_pair_setup_inner_direct_connections_block_invoke";
    __int16 v10 = 2114;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    __int16 v14 = 2080;
    __int16 v15 = v5;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}@ inner direct receive connection to %@ has transitioned to %s", (uint8_t *)&v8, 0x2Au);
  }
}

void nw_masque_connection_pair_read_inner_direct(NWConcrete_nw_masque_connection_pair *a1, NWConcrete_nw_connection *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    uint64_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    long long v31 = "nw_masque_connection_pair_read_inner_direct";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v29 = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v7, &v29, &v28)) {
      goto LABEL_55;
    }
    if (v29 == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = v29;
      if (os_log_type_enabled(v8, v29))
      {
        *(_DWORD *)buf = 136446210;
        long long v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v15 = v29;
      BOOL v16 = os_log_type_enabled(v8, v29);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          long long v31 = "nw_masque_connection_pair_read_inner_direct";
          __int16 v32 = 2082;
          os_log_type_t v33 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_56:
        free(v7);
        goto LABEL_5;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        long long v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v22 = v29;
      if (os_log_type_enabled(v8, v29))
      {
        *(_DWORD *)buf = 136446210;
        long long v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v8, v22, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    __int16 v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    long long v31 = "nw_masque_connection_pair_read_inner_direct";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v29 = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v7, &v29, &v28)) {
      goto LABEL_55;
    }
    if (v29 == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v11 = v29;
      if (os_log_type_enabled(v8, v29))
      {
        *(_DWORD *)buf = 136446210;
        long long v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null direct_receive_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v28)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v23 = v29;
      if (os_log_type_enabled(v8, v29))
      {
        *(_DWORD *)buf = 136446210;
        long long v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v8, v23, "%{public}s called with null direct_receive_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v17 = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v18 = v29;
    BOOL v19 = os_log_type_enabled(v8, v29);
    if (!v17)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        long long v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null direct_receive_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      long long v31 = "nw_masque_connection_pair_read_inner_direct";
      __int16 v32 = 2082;
      os_log_type_t v33 = v17;
      _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null direct_receive_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!*((void *)v3 + 6))
  {
    __int16 v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    long long v31 = "nw_masque_connection_pair_read_inner_direct";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v29 = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v7, &v29, &v28)) {
      goto LABEL_55;
    }
    if (v29 == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = v29;
      if (os_log_type_enabled(v8, v29))
      {
        *(_DWORD *)buf = 136446210;
        long long v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null pair->mcp_outer_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v28)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v24 = v29;
      if (os_log_type_enabled(v8, v29))
      {
        *(_DWORD *)buf = 136446210;
        long long v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v8, v24, "%{public}s called with null pair->mcp_outer_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v17 = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v20 = v29;
    BOOL v21 = os_log_type_enabled(v8, v29);
    if (!v17)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        long long v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s called with null pair->mcp_outer_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      long long v31 = "nw_masque_connection_pair_read_inner_direct";
      __int16 v32 = 2082;
      os_log_type_t v33 = v17;
      _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s called with null pair->mcp_outer_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v17);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  void v25[2] = ___ZL43nw_masque_connection_pair_read_inner_directP36NWConcrete_nw_masque_connection_pairP24NWConcrete_nw_connection_block_invoke;
  v25[3] = &unk_1E523F820;
  uint64_t v26 = v3;
  os_log_type_t v27 = v5;
  nw_connection_read_multiple(v27, 1u, 0xFFFFFFFF, v25);

LABEL_5:
}

void sub_183878BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void ___ZL43nw_masque_connection_pair_read_inner_directP36NWConcrete_nw_masque_connection_pairP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = v6[6];
  if (v7 && (a4 == 40 || !a4))
  {
    if (gLogDatapath)
    {
      __int16 v14 = __nwlog_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 16);
        *(_DWORD *)buf = 136446722;
        BOOL v21 = "nw_masque_connection_pair_read_inner_direct_block_invoke";
        __int16 v22 = 2114;
        uint64_t v23 = v15;
        __int16 v24 = 1024;
        int v25 = a3;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying batch of %u packets to target", buf, 0x1Cu);
      }

      uint64_t v6 = *(void **)(a1 + 32);
      uint64_t v7 = v6[6];
    }
    batch_block[0] = MEMORY[0x1E4F143A8];
    batch_block[1] = 3221225472;
    batch_block[2] = ___ZL43nw_masque_connection_pair_read_inner_directP36NWConcrete_nw_masque_connection_pairP24NWConcrete_nw_connection_block_invoke_362;
    batch_block[3] = &unk_1E523F708;
    int v19 = a3;
    uint64_t v18 = a2;
    uint64_t v17 = v6;
    nw_connection_batch(v7, batch_block);
    nw_masque_connection_pair_read_inner_direct(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40));
    __int16 v10 = v17;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = *(void *)(v11 + 48);
      *(_DWORD *)buf = 136446978;
      BOOL v21 = "nw_masque_connection_pair_read_inner_direct_block_invoke";
      __int16 v22 = 2114;
      uint64_t v23 = v12;
      __int16 v24 = 1024;
      int v25 = a4;
      __int16 v26 = 2112;
      uint64_t v27 = v13;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Stopping reading, error %d, outer %@", buf, 0x26u);
    }
  }
}

void sub_183878E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL43nw_masque_connection_pair_read_inner_directP36NWConcrete_nw_masque_connection_pairP24NWConcrete_nw_connection_block_invoke_362(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 48))
  {
    unint64_t v2 = 0;
    do
    {
      id v3 = *(id *)(*(void *)(a1 + 40) + 8 * v2);
      if (gLogDatapath)
      {
        uint64_t v6 = __nwlog_obj();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v7 = *(void *)(a1 + 32);
          uint64_t v8 = *(void *)(v7 + 16);
          if (v3)
          {
            uint64_t v10 = *(void *)(v7 + 16);
            size_t size = dispatch_data_get_size(v3);
            uint64_t v8 = v10;
          }
          else
          {
            size_t size = 0;
          }
          *(_DWORD *)buf = 136446722;
          __int16 v14 = "nw_masque_connection_pair_read_inner_direct_block_invoke";
          __int16 v15 = 2114;
          uint64_t v16 = v8;
          __int16 v17 = 2048;
          size_t v18 = size;
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes directly to target", buf, 0x20u);
        }
      }
      id v4 = *(void **)(a1 + 32);
      id v5 = v4[6];
      completion[0] = MEMORY[0x1E4F143A8];
      completion[1] = 3221225472;
      completion[2] = ___ZL43nw_masque_connection_pair_read_inner_directP36NWConcrete_nw_masque_connection_pairP24NWConcrete_nw_connection_block_invoke_363;
      completion[3] = &unk_1E5248CD0;
      uint64_t v12 = v4;
      nw_connection_send(v5, v3, (nw_content_context_t)&__block_literal_global_42249, 1, completion);

      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 48));
  }
}

void sub_183879050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void ___ZL43nw_masque_connection_pair_read_inner_directP36NWConcrete_nw_masque_connection_pairP24NWConcrete_nw_connection_block_invoke_363(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
      int v6 = 136446722;
      uint64_t v7 = "nw_masque_connection_pair_read_inner_direct_block_invoke";
      __int16 v8 = 2114;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to outer connection %@", (uint8_t *)&v6, 0x20u);
    }
  }
}

void ___ZL39nw_masque_copy_matching_connection_pairP31NWConcrete_nw_masque_connectionPU25objcproto14OS_nw_endpoint8NSObjectPKc_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 56);
  if (v1)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZL39nw_masque_copy_matching_connection_pairP31NWConcrete_nw_masque_connectionPU25objcproto14OS_nw_endpoint8NSObjectPKc_block_invoke_2;
    v3[3] = &unk_1E523F7F8;
    id v4 = *(id *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 48);
    nw_dictionary_apply(v1, (uint64_t)v3);
  }
}

uint64_t ___ZL39nw_masque_copy_matching_connection_pairP31NWConcrete_nw_masque_connectionPU25objcproto14OS_nw_endpoint8NSObjectPKc_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (*((unsigned char *)v5 + 219)
    && nw_endpoint_is_equal(*(void **)(a1 + 32), *((void **)v5 + 28), 0)
    && !strcmp(*(const char **)(a1 + 48), (const char *)v5 + 178))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

void sub_1838792AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  __int16 v8 = a2;
  uint64_t v9 = a3;
  __int16 v10 = v8;
  id v11 = v9;
  context = v9;
  id v69 = a5;
  if (!v10)
  {
    if (!v11) {
      goto LABEL_21;
    }
LABEL_6:
    uint64_t v66 = a1;
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    uint64_t v13 = (id)nw_protocol_copy_http_definition_http_definition;
    nw_protocol_metadata_t v14 = nw_content_context_copy_protocol_metadata(context, v13);

    if (!v14 || !nw_http_metadata_is_capsule(v14))
    {

      a1 = v66;
      goto LABEL_21;
    }
    capsule_os_log_type_t type = nw_http_metadata_get_capsule_type(v14);
    data = nw_http_metadata_copy_capsule_data(v14);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(void *)(*(void *)(v66 + 32) + 16);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v17;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v85 = capsule_type;
      LOWORD(v86) = 2112;
      *(void *)((char *)&v86 + 2) = data;
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received capsule type %llx with data %@", buf, 0x2Au);
    }

    if (capsule_type == 16770306)
    {
      if (!*(void *)(*(void *)(v66 + 32) + 40))
      {
        size_t v18 = nw_dictionary_create();
        uint64_t v19 = *(void *)(v66 + 32);
        os_log_type_t v20 = *(void **)(v19 + 40);
        *(void *)(v19 + 40) = v18;
      }
      if (nw_protocol_demux_copy_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
      }
      if (nw_protocol_demux_copy_definition::definition)
      {
        BOOL v21 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
        options = nw_protocol_create_options(v21);
        if (v21) {
          os_release(v21);
        }
      }
      else
      {
        options = nw_protocol_create_options(0);
      }
      *(_WORD *)__int16 v72 = 0;
      size_t size = dispatch_data_get_size(data);
      if (size <= 1)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v39 = (id)gLogObj;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = size;
          *(_WORD *)&buf[22] = 2048;
          uint64_t v85 = 2;
          _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_ERROR, "%{public}s insufficient capsule data bytes %zu < %zu", buf, 0x20u);
        }
        goto LABEL_82;
      }
      uint64_t v63 = v10;
      nw_dispatch_data_copyout_from_offset(data, (uint64_t)v72, 2, 0);
      uint64_t v40 = bswap32(*(unsigned __int16 *)v72) >> 16;
      if (size != v40 + 2)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v39 = (id)gLogObj;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = size;
          *(_WORD *)&buf[22] = 2048;
          uint64_t v85 = 2;
          LOWORD(v86) = 1024;
          *(_DWORD *)((char *)&v86 + 2) = v40;
          _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_ERROR, "%{public}s mismatched capsule data bytes %zu != (%zu + %u)", buf, 0x26u);
        }
        __int16 v10 = v63;
        goto LABEL_82;
      }
      __int16 v10 = v63;
      if (size >= 3)
      {
        endpoint = 0;
        uint64_t v41 = 2;
        while (1)
        {
          char v79 = 0;
          nw_dispatch_data_copyout_from_offset(data, (uint64_t)&v79, 1, v41);
          unsigned __int16 v78 = 0;
          nw_dispatch_data_copyout_from_offset(data, (uint64_t)&v78, 2, v41 + 1);
          uint64_t v42 = v41 + 3;
          int v43 = v78;
          size_t v44 = __rev16(v78);
          size_t v64 = v41 + 3 + v44;
          if (v79 == 2) {
            break;
          }
          if (v79 != 1)
          {
            __int16 v10 = v63;
            goto LABEL_69;
          }
          dispatch_data_t subrange = dispatch_data_create_subrange(data, v41 + 3, v44);
          *(void *)buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2020000000;
          uint64_t v85 = 0;
          if (v43)
          {
            unint64_t v46 = 0;
            do
            {
              unsigned __int16 v77 = 0;
              __int16 v76 = 0;
              nw_dispatch_data_copyout_from_offset(subrange, (uint64_t)&v77, 2, v46);
              uint64_t v49 = *(void *)(*(void *)&buf[8] + 24) + 2;
              *(void *)(*(void *)&buf[8] + 24) = v49;
              nw_dispatch_data_copyout_from_offset(subrange, (uint64_t)&v76, 2, v49);
              *(void *)(*(void *)&buf[8] + 24) += 2;
              uint64_t v88 = 0;
              uint64_t v89 = &v88;
              uint64_t v90 = 0x2020000000;
              uint64_t v91 = 0;
              applier[0] = MEMORY[0x1E4F143A8];
              applier[1] = 3221225472;
              applier[2] = ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke_354;
              applier[3] = &unk_1E523F780;
              applier[4] = buf;
              applier[5] = &v88;
              dispatch_data_apply(subrange, applier);
              uint64_t v50 = *(void *)(*(void *)&buf[8] + 24) + v77;
              *(void *)(*(void *)&buf[8] + 24) = v50;
              char v74 = 0;
              nw_dispatch_data_copyout_from_offset(subrange, (uint64_t)&v74, 1, v50);
              ++*(void *)(*(void *)&buf[8] + 24);
              uint64_t v80 = 0;
              uint64_t v81 = &v80;
              uint64_t v82 = 0x2020000000;
              os_log_type_t v83 = 0;
              if (v74)
              {
                v73[0] = MEMORY[0x1E4F143A8];
                v73[1] = 3221225472;
                v73[2] = ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke_2;
                v73[3] = &unk_1E523F780;
                v73[4] = buf;
                v73[5] = &v80;
                dispatch_data_apply(subrange, v73);
                unsigned int v48 = v77;
                *(void *)(*(void *)&buf[8] + 24) += v77;
                uint64_t v47 = v81[3];
              }
              else
              {
                uint64_t v47 = 0;
                unsigned int v48 = v77;
              }
              nw_demux_options_add_pattern(options, v76, v48, v89[3], v47);
              _Block_object_dispose(&v80, 8);
              _Block_object_dispose(&v88, 8);
              unint64_t v46 = *(void *)(*(void *)&buf[8] + 24);
            }
            while (v46 < v44);
          }
          _Block_object_dispose(buf, 8);

          __int16 v10 = v63;
LABEL_54:
          uint64_t v41 = v64;
          if (v64 >= size)
          {
            char v53 = endpoint;
            if (!endpoint) {
              goto LABEL_83;
            }
            BOOL v54 = nw_endpoint_copy_address_string(endpoint);
            nw_dictionary_set_value(*(void *)(*(void *)(v66 + 32) + 40), v54, options);
            if (v54) {
              free(v54);
            }
            if (gLogDatapath)
            {
              uint64_t v60 = __nwlog_obj();
              if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v61 = *(void *)(*(void *)(v66 + 32) + 16);
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
                *(_WORD *)&buf[12] = 2114;
                *(void *)&buf[14] = v61;
                *(_WORD *)&buf[22] = 2112;
                uint64_t v85 = (uint64_t)endpoint;
                _os_log_impl(&dword_1830D4000, v60, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ received listener demux pattern for %@", buf, 0x20u);
              }

              __int16 v10 = v63;
              char v53 = endpoint;
            }
            nw_masque_listener_pair_setup_inner_direct_connections(*(void **)(v66 + 32), options, v53);
            BOOL v55 = nw_content_context_create("listener ack pattern");
            metadata_for_capsule = nw_http_create_metadata_for_capsule(16770307, data);
            nw_content_context_set_metadata_for_protocol(v55, metadata_for_capsule);
            nw_connection_send(*(nw_connection_t *)(*(void *)(*(void *)(v66 + 32) + 16) + 48), 0, v55, 1, &__block_literal_global_24376);

LABEL_81:
            BOOL v39 = endpoint;
LABEL_82:

            goto LABEL_83;
          }
        }
        uint64_t v88 = 0;
        uint64_t v89 = 0;
        nw_dispatch_data_copyout_from_offset(data, (uint64_t)&v88, 16, v41 + 3);
        if (BYTE1(v88) == 30)
        {
          memset(buf, 0, sizeof(buf));
          LODWORD(v85) = 0;
          nw_dispatch_data_copyout_from_offset(data, (uint64_t)buf, 28, v41 + 3);
          __int16 v10 = v63;
          nw_endpoint_t address = nw_endpoint_create_address((const sockaddr *)buf);

          uint64_t v42 = v41 + 31;
        }
        else
        {
          __int16 v10 = v63;
          if (BYTE1(v88) != 2) {
            goto LABEL_69;
          }
          *(void *)buf = 0;
          *(void *)&buf[8] = 0;
          nw_dispatch_data_copyout_from_offset(data, (uint64_t)buf, 16, v41 + 3);
          nw_endpoint_t address = nw_endpoint_create_address((const sockaddr *)buf);

          uint64_t v42 = v41 + 19;
        }
        endpoint = address;
LABEL_69:
        if (v64 != v42)
        {
          BOOL v52 = __nwlog_obj();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_inner_block_invoke_3";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v64;
            *(_WORD *)&buf[22] = 2048;
            uint64_t v85 = v42;
            _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_ERROR, "%{public}s mismatched end offset %zu != %zu", buf, 0x20u);
          }

          goto LABEL_81;
        }
        goto LABEL_54;
      }
LABEL_83:
    }
    nw_masque_listener_pair_read_inner(*(NWConcrete_nw_masque_listener_pair **)(v66 + 32));

LABEL_85:
    goto LABEL_86;
  }
  size_t v12 = dispatch_data_get_size(v10);
  if (v11 && !v12) {
    goto LABEL_6;
  }
LABEL_21:
  if (!*(void *)(*(void *)(a1 + 32) + 24)
    || v69 && (__int16 v22 = v69, v23 = v22[3], v22, v23 != 40))
  {
    uint64_t v28 = a1;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_protocol_metadata_t v14 = (nw_protocol_metadata_t)(id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = *(void *)(*(void *)(v28 + 32) + 16);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v29;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v85 = (uint64_t)v69;
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Stopping reading, error %@", buf, 0x20u);
    }
    goto LABEL_85;
  }
  if (!v10)
  {
    nw_masque_listener_pair_read_inner(*(NWConcrete_nw_masque_listener_pair **)(a1 + 32));
    goto LABEL_86;
  }
  uint64_t v24 = a1;
  size_t v25 = dispatch_data_get_size(v10);
  if (v25 > 6)
  {
    nw_protocol_metadata_t v14 = v10;
    LOBYTE(v78) = 0;
    uint64_t v88 = 0;
    uint64_t v89 = &v88;
    uint64_t v90 = 0x2000000000;
    uint64_t v91 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = &v80;
    uint64_t v82 = 0x2000000000;
    os_log_type_t v83 = &v78;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
    uint64_t v85 = (uint64_t)&unk_1E5242B60;
    *((void *)&v86 + 1) = &v80;
    uint64_t v87 = 1;
    *(void *)&long long v86 = &v88;
    dispatch_data_apply(v14, buf);
    _Block_object_dispose(&v80, 8);
    _Block_object_dispose(&v88, 8);
    if (v78 == 6)
    {
      memset(v72, 0, sizeof(v72));
      uint64_t v88 = 0;
      uint64_t v89 = &v88;
      uint64_t v90 = 0x2000000000;
      uint64_t v91 = 0;
      uint64_t v80 = 0;
      uint64_t v81 = &v80;
      uint64_t v82 = 0x2000000000;
      os_log_type_t v83 = (unsigned __int16 *)v72;
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
      uint64_t v85 = (uint64_t)&unk_1E5242B60;
      *((void *)&v86 + 1) = &v80;
      uint64_t v87 = 19;
      *(void *)&long long v86 = &v88;
      dispatch_data_apply(v14, buf);
      uint64_t v33 = v89[3];
      _Block_object_dispose(&v80, 8);
      _Block_object_dispose(&v88, 8);
      long long v31 = 0;
      if (v33 == 19)
      {
        *(_DWORD *)&uint8_t buf[4] = 0;
        LODWORD(v85) = 0;
        *(_WORD *)buf = 7708;
        *(_OWORD *)&buf[8] = *(_OWORD *)&v72[1];
        *(_WORD *)&buf[2] = *(_WORD *)&v72[17];
        long long v31 = nw_endpoint_create_address((const sockaddr *)buf);
      }
      dispatch_data_t v32 = dispatch_data_create_subrange(v14, 0x13uLL, v25 - 19);
    }
    else
    {
      if (v78 != 4) {
        goto LABEL_43;
      }
      *(_DWORD *)&v72[3] = 0;
      *(_DWORD *)__int16 v72 = 0;
      uint64_t v88 = 0;
      uint64_t v89 = &v88;
      uint64_t v90 = 0x2000000000;
      uint64_t v91 = 0;
      uint64_t v80 = 0;
      uint64_t v81 = &v80;
      uint64_t v82 = 0x2000000000;
      os_log_type_t v83 = (unsigned __int16 *)v72;
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
      uint64_t v85 = (uint64_t)&unk_1E5242B60;
      *((void *)&v86 + 1) = &v80;
      uint64_t v87 = 7;
      *(void *)&long long v86 = &v88;
      dispatch_data_apply(v14, buf);
      uint64_t v30 = v89[3];
      _Block_object_dispose(&v80, 8);
      _Block_object_dispose(&v88, 8);
      long long v31 = 0;
      if (v30 == 7)
      {
        *(void *)&buf[8] = 0;
        *(_WORD *)buf = 528;
        *(_DWORD *)&uint8_t buf[4] = *(_DWORD *)&v72[1];
        *(_WORD *)&buf[2] = *(_WORD *)&v72[5];
        long long v31 = nw_endpoint_create_address((const sockaddr *)buf);
      }
      dispatch_data_t v32 = dispatch_data_create_subrange(v14, 7uLL, v25 - 7);
    }
    nw_protocol_metadata_t v14 = v32;
    if (v31)
    {
      if (gLogDatapath)
      {
        BOOL v57 = __nwlog_obj();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v58 = *(void *)(*(void *)(v24 + 32) + 16);
          if (v14) {
            size_t v59 = dispatch_data_get_size(v14);
          }
          else {
            size_t v59 = 0;
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v58;
          *(_WORD *)&buf[22] = 2048;
          uint64_t v85 = v59;
          LOWORD(v86) = 2112;
          *(void *)((char *)&v86 + 2) = v31;
          _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes to target %@", buf, 0x2Au);
        }
      }
      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(v24 + 32) + 96));
      uint64_t v34 = *(void **)(v24 + 32);
      uint64_t v35 = v34[3];
      completion[0] = MEMORY[0x1E4F143A8];
      completion[1] = 3221225472;
      completion[2] = ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke_357;
      completion[3] = &unk_1E5248CD0;
      uint64_t v71 = v34;
      nw_connection_group_send_message(v35, v14, v31, (nw_content_context_t)&__block_literal_global_42249, completion);
      nw_masque_listener_pair_read_inner(*(NWConcrete_nw_masque_listener_pair **)(v24 + 32));

      goto LABEL_85;
    }
LABEL_43:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v36 = (id)gLogObj;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)(*(void *)(v24 + 32) + 16);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v37;
      _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Failed to parse remote endpoint from datagram", buf, 0x16u);
    }

    nw_masque_listener_pair_read_inner(*(NWConcrete_nw_masque_listener_pair **)(v24 + 32));
    goto LABEL_85;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v26 = (id)gLogObj;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    uint64_t v27 = *(void *)(*(void *)(v24 + 32) + 16);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v27;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v85 = v25;
    _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Received too short content (%zu bytes)", buf, 0x20u);
  }

  nw_masque_listener_pair_read_inner(*(NWConcrete_nw_masque_listener_pair **)(v24 + 32));
LABEL_86:
}

void sub_18387A214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke_354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (a5 + a3 >= v5) {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a4 + v5 - a3;
  }
  return a5 + a3 < v5;
}

BOOL ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (a5 + a3 >= v5) {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a4 + v5 - a3;
  }
  return a5 + a3 < v5;
}

void nw_masque_listener_pair_setup_inner_direct_connections(void *a1, void *a2, void *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1;
  uint64_t v6 = a2;
  id v35 = a3;
  if (v5)
  {
    nw_parameters_t v7 = nw_connection_copy_parameters(*(nw_connection_t *)(v5[2] + 48));
    nw_parameters_t v8 = v7;
    if (!v5[6])
    {
      uint64_t v9 = v7;
      BOOL v10 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v9, 0, 0);

      id v11 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v10);
      nw_protocol_stack_clear_application_protocols(v11);
      if (nw_protocol_demux_copy_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
      }
      if (nw_protocol_demux_copy_definition::definition)
      {
        size_t v12 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
        options = nw_protocol_create_options(v12);
        if (v12) {
          os_release(v12);
        }
      }
      else
      {
        options = nw_protocol_create_options(0);
      }
      nw_protocol_stack_prepend_application_protocol(v11, &options->super);

      nw_protocol_metadata_t v14 = nw_connection_create_with_connection(*(void **)(v5[2] + 48), (void *)v10);
      nw_connection_set_queue(v14, *(dispatch_queue_t *)(v5[2] + 32));
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = ___ZL54nw_masque_listener_pair_setup_inner_direct_connectionsP34NWConcrete_nw_masque_listener_pairPU33objcproto22OS_nw_protocol_options8NSObjectPU25objcproto14OS_nw_endpointS1__block_invoke;
      handler[3] = &unk_1E524BB98;
      uint64_t v40 = v5;
      __int16 v15 = v14;
      uint64_t v41 = v15;
      nw_connection_set_state_changed_handler(v15, handler);
      nw_connection_start(v15);
      uint64_t v16 = (void *)v5[6];
      void v5[6] = v15;
      uint64_t v17 = v15;
    }
    size_t v18 = v8;
    BOOL v19 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v18, 0, 0);

    os_log_type_t v20 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v19);
    nw_protocol_stack_clear_application_protocols(v20);
    if (v6) {
      nw_protocol_stack_prepend_application_protocol(v20, v6);
    }
    BOOL v21 = nw_connection_create_with_connection(*(void **)(v5[2] + 48), (void *)v19);
    nw_connection_set_queue(v21, *(dispatch_queue_t *)(v5[2] + 32));
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    v36[2] = ___ZL54nw_masque_listener_pair_setup_inner_direct_connectionsP34NWConcrete_nw_masque_listener_pairPU33objcproto22OS_nw_protocol_options8NSObjectPU25objcproto14OS_nw_endpointS1__block_invoke_358;
    v36[3] = &unk_1E524BB98;
    __int16 v22 = v5;
    id v37 = v22;
    int v23 = v21;
    __int16 v38 = v23;
    nw_connection_set_state_changed_handler(v23, v36);
    nw_connection_start(v23);
    uint64_t v24 = v22[7];
    if (!v24)
    {
      BOOL v25 = nw_array_create();
      __int16 v26 = (void *)v22[7];
      v22[7] = v25;

      uint64_t v24 = v22[7];
    }
    nw_array_append(v24, v23);
    nw_masque_listener_pair_read_inner_direct(v22, v23, v35);

    goto LABEL_15;
  }
  uint64_t v27 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  objc_super v45 = "nw_masque_listener_pair_setup_inner_direct_connections";
  uint64_t v28 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v43 = OS_LOG_TYPE_ERROR;
  char v42 = 0;
  if (__nwlog_fault(v28, &v43, &v42))
  {
    if (v43 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v30 = v43;
      if (os_log_type_enabled(v29, v43))
      {
        *(_DWORD *)buf = 136446210;
        objc_super v45 = "nw_masque_listener_pair_setup_inner_direct_connections";
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v32 = v43;
      BOOL v33 = os_log_type_enabled(v29, v43);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          objc_super v45 = "nw_masque_listener_pair_setup_inner_direct_connections";
          __int16 v46 = 2082;
          uint64_t v47 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        objc_super v45 = "nw_masque_listener_pair_setup_inner_direct_connections";
        _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v34 = v43;
      if (os_log_type_enabled(v29, v43))
      {
        *(_DWORD *)buf = 136446210;
        objc_super v45 = "nw_masque_listener_pair_setup_inner_direct_connections";
        _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_32:
  if (v28) {
    free(v28);
  }
LABEL_15:
}

void sub_18387A8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

void ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke_357(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
      int v6 = 136446722;
      nw_parameters_t v7 = "nw_masque_listener_pair_read_inner_block_invoke";
      __int16 v8 = 2114;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to outer connection group %@", (uint8_t *)&v6, 0x20u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 96));
}

void ___ZL54nw_masque_listener_pair_setup_inner_direct_connectionsP34NWConcrete_nw_masque_listener_pairPU33objcproto22OS_nw_protocol_options8NSObjectPU25objcproto14OS_nw_endpointS1__block_invoke(uint64_t a1, unsigned int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5) {
      uint64_t v5 = "unknown";
    }
    else {
      uint64_t v5 = off_1E523DF08[a2];
    }
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16);
    int v8 = 136446978;
    uint64_t v9 = "nw_masque_listener_pair_setup_inner_direct_connections_block_invoke";
    __int16 v10 = 2114;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    __int16 v14 = 2080;
    __int16 v15 = v5;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}@ inner direct send connection to %@ has transitioned to %s", (uint8_t *)&v8, 0x2Au);
  }
}

void ___ZL54nw_masque_listener_pair_setup_inner_direct_connectionsP34NWConcrete_nw_masque_listener_pairPU33objcproto22OS_nw_protocol_options8NSObjectPU25objcproto14OS_nw_endpointS1__block_invoke_358(uint64_t a1, unsigned int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5) {
      uint64_t v5 = "unknown";
    }
    else {
      uint64_t v5 = off_1E523DF08[a2];
    }
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16);
    int v8 = 136446978;
    uint64_t v9 = "nw_masque_listener_pair_setup_inner_direct_connections_block_invoke";
    __int16 v10 = 2114;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    __int16 v14 = 2080;
    __int16 v15 = v5;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}@ inner direct receive connection to %@ has transitioned to %s", (uint8_t *)&v8, 0x2Au);
  }
}

void nw_masque_listener_pair_read_inner_direct(void *a1, void *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    int v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v9, &type, &v31)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
          __int16 v35 = 2082;
          __int16 v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v10 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v10, v24, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v6)
  {
    __int16 v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v9, &type, &v31)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null inner_direct_receive_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v31)
    {
      __int16 v10 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s called with null inner_direct_receive_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    BOOL v19 = (char *)__nw_create_backtrace_string();
    __int16 v10 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null inner_direct_receive_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
      __int16 v35 = 2082;
      __int16 v36 = v19;
      _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null inner_direct_receive_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v5[3])
  {
    __int16 v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v9, &type, &v31)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null pair->mlp_outer_connection_group", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v31)
    {
      __int16 v10 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v10, v26, "%{public}s called with null pair->mlp_outer_connection_group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    BOOL v19 = (char *)__nw_create_backtrace_string();
    __int16 v10 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null pair->mlp_outer_connection_group, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v34 = "nw_masque_listener_pair_read_inner_direct";
      __int16 v35 = 2082;
      __int16 v36 = v19;
      _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null pair->mlp_outer_connection_group, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  v27[2] = ___ZL41nw_masque_listener_pair_read_inner_directP34NWConcrete_nw_masque_listener_pairP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObject_block_invoke;
  v27[3] = &unk_1E523F7D0;
  uint64_t v28 = v5;
  id v29 = v7;
  id v30 = v6;
  nw_connection_read_multiple(v30, 1u, 0xFFFFFFFF, v27);

LABEL_5:
}

void sub_18387B470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void ___ZL41nw_masque_listener_pair_read_inner_directP34NWConcrete_nw_masque_listener_pairP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObject_block_invoke(void *a1, id *a2, unsigned int a3, int a4)
{
  void v29[2] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1[4] + 24) && (a4 == 40 || !a4))
  {
    if (gLogDatapath)
    {
      os_log_type_t v20 = __nwlog_obj();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v21 = *(void *)(a1[4] + 16);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v25 = "nw_masque_listener_pair_read_inner_direct_block_invoke";
        __int16 v26 = 2114;
        uint64_t v27 = v21;
        __int16 v28 = 1024;
        LODWORD(v29[0]) = a3;
        _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying batch of %u packets to target group", buf, 0x1Cu);
      }
    }
    if (a3)
    {
      uint64_t v8 = a3;
      do
      {
        uint64_t v9 = *a2;
        if (gLogDatapath)
        {
          os_log_type_t v13 = __nwlog_obj();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v14 = *(void *)(a1[4] + 16);
            if (v9) {
              size_t size = dispatch_data_get_size(v9);
            }
            else {
              size_t size = 0;
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v25 = "nw_masque_listener_pair_read_inner_direct_block_invoke";
            __int16 v26 = 2114;
            uint64_t v27 = v14;
            __int16 v28 = 2048;
            v29[0] = size;
            _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes directly to target", buf, 0x20u);
          }
        }
        __int16 v10 = (void *)a1[4];
        os_log_type_t v11 = a1[5];
        __int16 v12 = v10[3];
        completion[0] = MEMORY[0x1E4F143A8];
        completion[1] = 3221225472;
        completion[2] = ___ZL41nw_masque_listener_pair_read_inner_directP34NWConcrete_nw_masque_listener_pairP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObject_block_invoke_359;
        completion[3] = &unk_1E5248CD0;
        BOOL v23 = v10;
        nw_connection_group_send_message(v12, v9, v11, (nw_content_context_t)&__block_literal_global_42249, completion);

        ++a2;
        --v8;
      }
      while (v8);
    }
    nw_masque_listener_pair_read_inner_direct(a1[4], a1[6], a1[5]);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = a1[4];
      uint64_t v19 = *(void *)(v17 + 16);
      uint64_t v18 = *(void *)(v17 + 24);
      *(_DWORD *)buf = 136446978;
      os_log_type_t v25 = "nw_masque_listener_pair_read_inner_direct_block_invoke";
      __int16 v26 = 2114;
      uint64_t v27 = v19;
      __int16 v28 = 1024;
      LODWORD(v29[0]) = a4;
      WORD2(v29[0]) = 2112;
      *(void *)((char *)v29 + 6) = v18;
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Stopping reading, error %d, outer %@", buf, 0x26u);
    }
  }
}

void sub_18387B7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void ___ZL41nw_masque_listener_pair_read_inner_directP34NWConcrete_nw_masque_listener_pairP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObject_block_invoke_359(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
      int v6 = 136446722;
      id v7 = "nw_masque_listener_pair_read_inner_direct_block_invoke";
      __int16 v8 = 2114;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to outer connection %@", (uint8_t *)&v6, 0x20u);
    }
  }
}

uint64_t ___ZL38nw_masque_listener_pair_handle_headersP34NWConcrete_nw_masque_listener_pairPU29objcproto18OS_nw_http_request8NSObject_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v6 = [NSString stringWithCString:a2 encoding:5];
  id v7 = [NSString stringWithCString:a4 encoding:5];
  __int16 v8 = (id *)*(id *)(a1 + 32);
  id v9 = v6;
  id v10 = v7;
  id v11 = [NSString stringWithUTF8String:"Listener-Association"];
  if (![v9 caseInsensitiveCompare:v11])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 136446722;
      uint64_t v16 = "nw_masque_listener_pair_handle_listener_association_header";
      __int16 v17 = 2112;
      id v18 = v9;
      __int16 v19 = 2112;
      id v20 = v10;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %@ : %@", (uint8_t *)&v15, 0x20u);
    }

    os_log_type_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v10];
    if (v13) {
      objc_storeStrong(v8 + 16, v7);
    }
  }
  return 1;
}

void sub_18387BABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__271(uint64_t a1, uint64_t a2)
{
  BOOL result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__272(uint64_t a1)
{
}

void ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke(uint64_t a1)
{
  unint64_t v2 = _Block_copy(*(const void **)(*(void *)(*(void *)(a1 + 32) + 16) + 88));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke_346(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    if (a2 > 4) {
      id v7 = "<unknown>";
    }
    else {
      id v7 = off_1E523D0E0[a2];
    }
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 16);
    id v9 = *(void *(**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 24);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_setup_outer_connection_group_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2112;
    uint64_t v61 = v9;
    LOWORD(v62) = 2080;
    *(void *)((char *)&v62 + 2) = v7;
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ outer connection group to %@ has transitioned to %s", buf, 0x2Au);
  }

  if (a2 - 3 < 2) {
    goto LABEL_9;
  }
  if (a2 == 2)
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 81)) {
      goto LABEL_20;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v25 = (id)gLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v27 = *(void *)(v26 + 16);
      __int16 v28 = *(void *(**)(uint64_t, uint64_t))(v26 + 88);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_setup_outer_connection_group_block_invoke_2";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v27;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v61 = v28;
      _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Opened UDP connection group (for %@)", buf, 0x20u);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 81) = 1;
    uint64_t v29 = *(void *)(a1 + 32);
    if (!*(void *)(v29 + 128))
    {
LABEL_29:
      well_known = (void *)_nw_http_response_create_well_known(200);
      metadata_for_response = nw_http_create_metadata_for_response(well_known);
      __int16 v38 = nw_content_context_create("response");
      nw_content_context_set_metadata_for_protocol(v38, metadata_for_response);
      nw_connection_send(*(nw_connection_t *)(*(void *)(*(void *)(a1 + 32) + 16) + 48), 0, v38, 1, &__block_literal_global_24376);

      goto LABEL_20;
    }
    __int16 port = nw_connection_group_get_port(*(void **)(v29 + 24));
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(*(void *)(a1 + 32) + 16) + 40));
    uint64_t v32 = [*(id *)(*(void *)(a1 + 32) + 128) UTF8String];
    BOOL v33 = (os_unfair_lock_s *)WeakRetained;
    os_log_type_t v34 = v33;
    if (v33)
    {
      if (v32)
      {
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __nw_masque_server_set_listener_association_port_block_invoke;
        uint64_t v61 = (void *(*)(uint64_t, uint64_t))&unk_1E524BB20;
        *(void *)&long long v62 = v33;
        *((void *)&v62 + 1) = v32;
        __int16 v63 = port;
        __int16 v35 = (void (**)(void))_Block_copy(buf);
        os_unfair_lock_lock(v34 + 4);
        v35[2](v35);
        os_unfair_lock_unlock(v34 + 4);

LABEL_28:
        goto LABEL_29;
      }
      os_log_type_t v43 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_server_set_listener_association_port";
      uint64_t v40 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v58 = 0;
      if (!__nwlog_fault(v40, &type, &v58)) {
        goto LABEL_63;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v44 = type;
        if (os_log_type_enabled(v41, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_server_set_listener_association_port";
          _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null key", buf, 0xCu);
        }
      }
      else if (v58)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v49 = type;
        BOOL v50 = os_log_type_enabled(v41, type);
        if (backtrace_string)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_masque_server_set_listener_association_port";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v41, v49, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v40) {
            goto LABEL_28;
          }
          goto LABEL_64;
        }
        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_server_set_listener_association_port";
          _os_log_impl(&dword_1830D4000, v41, v49, "%{public}s called with null key, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v52 = type;
        if (os_log_type_enabled(v41, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_server_set_listener_association_port";
          _os_log_impl(&dword_1830D4000, v41, v52, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      BOOL v39 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_server_set_listener_association_port";
      uint64_t v40 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v58 = 0;
      if (!__nwlog_fault(v40, &type, &v58)) {
        goto LABEL_63;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v41, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_server_set_listener_association_port";
          _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null server", buf, 0xCu);
        }
      }
      else if (v58)
      {
        objc_super v45 = (char *)__nw_create_backtrace_string();
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v46 = type;
        BOOL v47 = os_log_type_enabled(v41, type);
        if (v45)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_masque_server_set_listener_association_port";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v45;
            _os_log_impl(&dword_1830D4000, v41, v46, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v45);
LABEL_63:
          if (!v40) {
            goto LABEL_28;
          }
LABEL_64:
          free(v40);
          goto LABEL_28;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_server_set_listener_association_port";
          _os_log_impl(&dword_1830D4000, v41, v46, "%{public}s called with null server, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v51 = type;
        if (os_log_type_enabled(v41, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_server_set_listener_association_port";
          _os_log_impl(&dword_1830D4000, v41, v51, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_63;
  }
  if (a2 != 1) {
    goto LABEL_20;
  }
LABEL_9:
  uint64_t v10 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v10 + 81))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(v16 + 16);
      uint64_t v18 = *(void *)(v16 + 88);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_setup_outer_connection_group_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v17;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v61 = v5;
      LOWORD(v62) = 2112;
      *(void *)((char *)&v62 + 2) = v18;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Failed UDP connection group with error %@ (for %@)", buf, 0x2Au);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 81) = 1;
    id v11 = _nw_http_response_create_well_known(500);
    __int16 v19 = nw_http_create_metadata_for_response(v11);
    id v20 = nw_content_context_create("response");
    nw_content_context_set_metadata_for_protocol(v20, v19);
    uint64_t v21 = *(void **)(a1 + 32);
    os_log_type_t v22 = *(NSObject **)(v21[2] + 48);
    completion[0] = MEMORY[0x1E4F143A8];
    completion[1] = 3221225472;
    completion[2] = ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke_347;
    completion[3] = &unk_1E5248CD0;
    BOOL v57 = v21;
    nw_connection_send(v22, 0, v20, 1, completion);

    goto LABEL_16;
  }
  if (!*(unsigned char *)(v10 + 82))
  {
    *(unsigned char *)(v10 + 82) = 1;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(v12 + 16);
      uint64_t v14 = *(void *(**)(uint64_t, uint64_t))(v12 + 88);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_setup_outer_connection_group_block_invoke_2";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v13;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v61 = v14;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Closed UDP connection group (for %@)", buf, 0x20u);
    }
LABEL_16:

    uint64_t v10 = *(void *)(a1 + 32);
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  uint64_t v61 = __Block_byref_object_copy__271;
  *(void *)&long long v62 = __Block_byref_object_dispose__272;
  *((void *)&v62 + 1) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke_349;
  aBlock[3] = &unk_1E524B978;
  BOOL v55 = buf;
  id v54 = (id)v10;
  BOOL v23 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 8));
  v23[2](v23);
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 8));

  uint64_t v24 = *(void *)(*(void *)&buf[8] + 40);
  if (v24) {
    (*(void (**)(uint64_t, void, void *(*)(uint64_t, uint64_t)))(v24 + 16))(v24, dword_183D5CE10[a2 - 1], v5);
  }

  _Block_object_dispose(buf, 8);
LABEL_20:
}

void sub_18387C614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

void ___ZL44nw_masque_listener_pair_read_outer_datagramsP34NWConcrete_nw_masque_listener_pair_block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v8 = a3;
  if (v7)
  {
    id v9 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    BOOL v10 = !v9 || a4 == 0;
    if (!v10)
    {
      nw_endpoint_t v11 = nw_connection_group_copy_remote_endpoint_for_message(v9, v8);
      nw_endpoint_t v12 = v11;
      if (!v11 || (uint64_t v13 = v11, v14 = [v13 type], v13, v14 != 1))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v27 = (id)gLogObj;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 16);
          *(_DWORD *)buffer = 136446978;
          *(void *)&buffer[4] = "nw_masque_listener_pair_read_outer_datagrams_block_invoke";
          *(_WORD *)&buffer[12] = 2114;
          *(void *)&buffer[14] = v26;
          __int16 v53 = 2048;
          size_t size = dispatch_data_get_size(v7);
          __int16 v55 = 2112;
          id v56 = v12;
          _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Unable to proxy %zu bytes, invalid endpoint %@", buffer, 0x2Au);
        }
        goto LABEL_28;
      }
      nw_endpoint_t address = nw_endpoint_get_address(v13);
      int sa_family = address->sa_family;
      if (sa_family != 2 && sa_family != 30)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v27 = (id)gLogObj;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 16);
          size_t v30 = dispatch_data_get_size(v7);
          int v31 = address->sa_family;
          *(_DWORD *)buffer = 136446978;
          *(void *)&buffer[4] = "nw_masque_listener_pair_read_outer_datagrams_block_invoke";
          *(_WORD *)&buffer[12] = 2114;
          *(void *)&buffer[14] = v29;
          __int16 v53 = 2048;
          size_t size = v30;
          __int16 v55 = 1024;
          LODWORD(v56) = v31;
          _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Unable to proxy %zu bytes, invalid address family %u", buffer, 0x26u);
        }
LABEL_28:

LABEL_37:
        goto LABEL_38;
      }
      uint64_t v48 = 0;
      os_log_type_t v49 = &v48;
      uint64_t v50 = 0x2020000000;
      char v51 = 0;
      uint64_t v18 = *(void *)(a1 + 32);
      __int16 v19 = (void *)&unk_183D5C000;
      if (*(void *)(v18 + 48) && *(void *)(v18 + 40))
      {
        id v20 = nw_endpoint_copy_address_string(v13);
        uint64_t v21 = nw_dictionary_copy_value(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)v20);
        if (v20) {
          free(v20);
        }
        if (gLogDatapath)
        {
          uint64_t v41 = __nwlog_obj();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v42 = *(void *)(*(void *)(a1 + 32) + 16);
            *(_DWORD *)buffer = 136446722;
            *(void *)&buffer[4] = "nw_masque_listener_pair_read_outer_datagrams_block_invoke";
            *(_WORD *)&buffer[12] = 2114;
            *(void *)&buffer[14] = v42;
            __int16 v53 = 2112;
            size_t size = (size_t)v7;
            _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received content %@", buffer, 0x20u);
          }
        }
        if (v21)
        {
          applier[0] = MEMORY[0x1E4F143A8];
          applier[1] = 3221225472;
          applier[2] = ___ZL44nw_masque_listener_pair_read_outer_datagramsP34NWConcrete_nw_masque_listener_pair_block_invoke_350;
          applier[3] = &unk_1E523F6E0;
          id v46 = v21;
          BOOL v47 = &v48;
          dispatch_data_apply(v7, applier);
        }
        __int16 v19 = &unk_183D5C000;
      }
      if (gLogDatapath)
      {
        __int16 v36 = v19;
        uint64_t v37 = __nwlog_obj();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v38 = *(void *)(*(void *)(a1 + 32) + 16);
          size_t v39 = dispatch_data_get_size(v7);
          BOOL v10 = *((unsigned char *)v49 + 24) == 0;
          *(_DWORD *)buffer = 136447234;
          *(void *)&buffer[4] = "nw_masque_listener_pair_read_outer_datagrams_block_invoke_2";
          if (v10) {
            uint64_t v40 = "";
          }
          else {
            uint64_t v40 = " directly";
          }
          *(_WORD *)&buffer[12] = 2114;
          *(void *)&buffer[14] = v38;
          __int16 v53 = 2048;
          size_t size = v39;
          __int16 v55 = 2112;
          id v56 = v13;
          __int16 v57 = 2080;
          char v58 = v40;
          _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes from %@%s to client", buffer, 0x34u);
        }

        __int16 v19 = v36;
      }
      if (!*((unsigned char *)v49 + 24))
      {
        int v22 = address->sa_family;
        if (v22 == 30)
        {
          BOOL v23 = v19;
          buffer[0] = 6;
          *(sockaddr *)&buffer[1] = *(sockaddr *)&address->sa_data[6];
          *(_WORD *)&buffer[17] = *(_WORD *)address->sa_data;
          uint64_t v32 = dispatch_data_create(buffer, 0x13uLL, 0, 0);
          dispatch_data_t concat = dispatch_data_create_concat(v32, v7);

          goto LABEL_33;
        }
        if (v22 == 2)
        {
          BOOL v23 = v19;
          buffer[0] = 4;
          *(_DWORD *)&buffer[1] = *(_DWORD *)&address->sa_data[2];
          *(_WORD *)&buffer[5] = *(_WORD *)address->sa_data;
          uint64_t v24 = dispatch_data_create(buffer, 7uLL, 0, 0);
          dispatch_data_t concat = dispatch_data_create_concat(v24, v7);

LABEL_33:
          id v7 = concat;
          __int16 v19 = v23;
        }
      }
      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 96));
      BOOL v33 = *(void **)(a1 + 32);
      os_log_type_t v34 = v33;
      if (!*((unsigned char *)v49 + 24)) {
        os_log_type_t v34 = (void *)v33[2];
      }
      __int16 v35 = v34[6];
      completion[0] = MEMORY[0x1E4F143A8];
      completion[1] = v19[310];
      completion[2] = ___ZL44nw_masque_listener_pair_read_outer_datagramsP34NWConcrete_nw_masque_listener_pair_block_invoke_352;
      completion[3] = &unk_1E5248CD0;
      os_log_type_t v44 = v33;
      nw_connection_send(v35, v7, (nw_content_context_t)&__block_literal_global_42249, 1, completion);

      _Block_object_dispose(&v48, 8);
      goto LABEL_37;
    }
  }
LABEL_38:
}

void sub_18387CCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL ___ZL44nw_masque_listener_pair_read_outer_datagramsP34NWConcrete_nw_masque_listener_pair_block_invoke_350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL matched = nw_masque_connection_pair_match_demux_pattern(a4, a5, *(void **)(a1 + 32));
  if (matched) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return !matched;
}

void ___ZL44nw_masque_listener_pair_read_outer_datagramsP34NWConcrete_nw_masque_listener_pair_block_invoke_352(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
      int v6 = 136446722;
      id v7 = "nw_masque_listener_pair_read_outer_datagrams_block_invoke";
      __int16 v8 = 2114;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to inner connection %@", (uint8_t *)&v6, 0x20u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 96));
}

BOOL nw_masque_connection_pair_match_demux_pattern(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = v5;
  BOOL v7 = 0;
  if (a1 && a2 && v5)
  {
    uint64_t v10 = 0;
    id v11 = &v10;
    uint64_t v12 = 0x2020000000;
    char v13 = 0;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZL45nw_masque_connection_pair_match_demux_patternPKhmPU33objcproto22OS_nw_protocol_options8NSObject_block_invoke;
    v9[3] = &unk_1E523F758;
    void v9[5] = a2;
    void v9[6] = a1;
    void v9[4] = &v10;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    v14[2] = __nw_demux_options_enumerate_patterns_block_invoke;
    v14[3] = &unk_1E523DFE8;
    v14[4] = v9;
    nw_protocol_options_access_handle(v5, v14);
    BOOL v7 = *((unsigned char *)v11 + 24) != 0;
    _Block_object_dispose(&v10, 8);
  }

  return v7;
}

uint64_t ___ZL45nw_masque_connection_pair_match_demux_patternPKhmPU33objcproto22OS_nw_protocol_options8NSObject_block_invoke(void *a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v5 = a2;
  if (a1[5] < a2 + (unint64_t)a3) {
    return 1;
  }
  if (a2)
  {
    BOOL v7 = (unsigned __int8 *)a1[6];
    if (a5)
    {
      while (1)
      {
        int v9 = *v7++;
        int v8 = v9;
        int v11 = *a5++;
        int v10 = v11;
        int v12 = *a4++;
        int v13 = (v8 ^ v12) & v10;
        BOOL v14 = v13 != 0;
        if (v13) {
          break;
        }
        if (!--v5) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      while (1)
      {
        int v17 = *v7++;
        int v16 = v17;
        int v18 = *a4++;
        BOOL v19 = v16 == v18;
        BOOL v14 = v16 != v18;
        if (!v19) {
          break;
        }
        if (!--v5) {
          goto LABEL_7;
        }
      }
    }
    char v15 = 0;
  }
  else
  {
LABEL_7:
    BOOL v14 = 0;
    char v15 = 1;
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v15;
  return v14;
}

void ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke_347(uint64_t a1)
{
}

void ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke_349(uint64_t a1)
{
  unint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 32));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_masque_listener_pair_createP31NWConcrete_nw_masque_connection_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 40) + 83) = 0;
}

void ___ZL30nw_masque_listener_pair_createP31NWConcrete_nw_masque_connection_block_invoke_2(uint64_t a1, int a2)
{
  if ((a2 & 0xFFFFFFFE) == 4)
  {
    nw_dictionary_set_value(*(void *)(*(void *)(a1 + 32) + 64), (const char *)(*(void *)(a1 + 40) + 64), 0);
    id v4 = *(NWConcrete_nw_masque_listener_pair **)(a1 + 40);
    nw_masque_listener_pair_cancel(v4);
  }
}

void ___ZL49nw_masque_listener_pair_set_state_changed_handlerP34NWConcrete_nw_masque_listener_pairU13block_pointerFv21nw_connection_state_tPU22objcproto11OS_nw_error8NSObjectE_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;
}

void nw_masque_listener_pair_cancel(NWConcrete_nw_masque_listener_pair *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 12);
    id v4 = *(NSObject **)(*((void *)v1 + 2) + 32);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZL30nw_masque_listener_pair_cancelP34NWConcrete_nw_masque_listener_pair_block_invoke;
    block[3] = &unk_1E524BAA8;
    BOOL v14 = v1;
    dispatch_group_notify(v3, v4, block);

    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v18 = "nw_masque_listener_pair_cancel";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v18 = "nw_masque_listener_pair_cancel";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v18 = "nw_masque_listener_pair_cancel";
          __int16 v19 = 2082;
          id v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v18 = "nw_masque_listener_pair_cancel";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v18 = "nw_masque_listener_pair_cancel";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void ___ZL30nw_masque_listener_pair_cancelP34NWConcrete_nw_masque_listener_pair_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2[2] + 48);
  if (v3)
  {
    nw_connection_cancel(v3);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 16);
    uint64_t v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 48) = 0;

    uint64_t v2 = *(void **)(a1 + 32);
  }
  int v6 = v2[3];
  if (v6)
  {
    nw_connection_group_cancel(v6);
    uint64_t v7 = *(void *)(a1 + 32);
    os_log_type_t v8 = *(void **)(v7 + 24);
    *(void *)(v7 + 24) = 0;

    uint64_t v2 = *(void **)(a1 + 32);
  }
  int v9 = v2[6];
  if (v9)
  {
    nw_connection_cancel(v9);
    uint64_t v10 = *(void *)(a1 + 32);
    BOOL v11 = *(void **)(v10 + 48);
    *(void *)(v10 + 48) = 0;

    uint64_t v2 = *(void **)(a1 + 32);
  }
  os_log_type_t v12 = (atomic_uchar *)v2[7];
  if (v12)
  {
    nw_array_apply(v12, (uint64_t)&__block_literal_global_345);
    uint64_t v13 = *(void *)(a1 + 32);
    BOOL v14 = *(void **)(v13 + 56);
    *(void *)(v13 + 56) = 0;

    uint64_t v2 = *(void **)(a1 + 32);
  }
  char v15 = (void *)v2[5];
  v2[5] = 0;
}

uint64_t ___ZL30nw_masque_listener_pair_cancelP34NWConcrete_nw_masque_listener_pair_block_invoke_2(int a1, int a2, nw_connection_t connection)
{
  return 1;
}

uint64_t ___ZL40nw_masque_connection_pair_handle_headersP36NWConcrete_nw_masque_connection_pairPU29objcproto18OS_nw_http_request8NSObject_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t v87 = [NSString stringWithCString:a2 encoding:5];
  int v6 = [NSString stringWithCString:a4 encoding:5];
  uint64_t v7 = (char *)*(id *)(a1 + 32);
  id v8 = v87;
  id v9 = v6;
  uint64_t v88 = v8;
  uint64_t v89 = v9;
  long long v86 = [NSString stringWithUTF8String:"Prohibit-Interface"];
  if (!objc_msgSend(v8, "caseInsensitiveCompare:"))
  {
    uint64_t v84 = v7;
    uint64_t v40 = [v9 componentsSeparatedByString:@","];
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v41 = (id)gLogObj;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)unint64_t v101 = 136446722;
      BOOL v102 = "nw_masque_connection_pair_handle_prohibit_interface_header";
      __int16 v103 = 2112;
      id v104 = v8;
      __int16 v105 = 2112;
      size_t v106 = v40;
      _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %@ : %@", v101, 0x20u);
    }

    long long v94 = 0u;
    long long v95 = 0u;
    *(_OWORD *)os_log_type_t type = 0u;
    long long v93 = 0u;
    id v42 = v40;
    uint64_t v43 = [v42 countByEnumeratingWithState:type objects:buf count:16];
    if (v43)
    {
      uint64_t v90 = v7 + 266;
      uint64_t v91 = v7 + 267;
      os_log_type_t v44 = v7 + 270;
      objc_super v45 = v7 + 269;
      uint64_t v46 = *(void *)v93;
      do
      {
        for (uint64_t i = 0; i != v43; ++i)
        {
          if (*(void *)v93 != v46) {
            objc_enumerationMutation(v42);
          }
          uint64_t v48 = *(void **)(*(void *)&type[8] + 8 * i);
          int v49 = strcmp((const char *)[v48 UTF8String], "wifi");
          uint64_t v50 = v84 + 268;
          if (!v49) {
            goto LABEL_23;
          }
          int v51 = strcmp((const char *)[v48 UTF8String], "cellular");
          uint64_t v50 = v45;
          if (v51)
          {
            int v52 = strcmp((const char *)[v48 UTF8String], "wired");
            uint64_t v50 = v44;
            if (v52)
            {
              int v53 = strcmp((const char *)[v48 UTF8String], "expensive");
              uint64_t v50 = v91;
              if (v53)
              {
                int v54 = strcmp((const char *)[v48 UTF8String], "constrained");
                uint64_t v50 = v90;
                if (v54) {
                  continue;
                }
              }
            }
          }
LABEL_23:
          unsigned char *v50 = 1;
        }
        uint64_t v43 = [v42 countByEnumeratingWithState:type objects:buf count:16];
      }
      while (v43);
    }

    goto LABEL_59;
  }

  uint64_t v10 = *(id *)(a1 + 32);
  id v11 = v8;
  id v12 = v9;
  uint64_t v13 = [NSString stringWithUTF8String:"Require-Interface"];
  if (![v11 caseInsensitiveCompare:v13])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v55 = (id)gLogObj;
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_handle_require_interface_header";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v11;
      *(_WORD *)&buf[22] = 2112;
      char v97 = v12;
      _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %@ : %@", buf, 0x20u);
    }

    if (!strcmp((const char *)[v12 UTF8String], "wifi"))
    {
      int v56 = 1;
    }
    else if (!strcmp((const char *)[v12 UTF8String], "cellular"))
    {
      int v56 = 2;
    }
    else
    {
      if (strcmp((const char *)[v12 UTF8String], "wired"))
      {
LABEL_58:

        goto LABEL_59;
      }
      int v56 = 3;
    }
    v10[64] = v56;
    goto LABEL_58;
  }

  id v14 = *(id *)(a1 + 32);
  id v15 = v11;
  id v16 = v12;
  int v17 = [NSString stringWithUTF8String:"Multipath"];
  if ([v15 caseInsensitiveCompare:v17])
  {

    int v18 = *(id *)(a1 + 32);
    id v19 = v15;
    id v20 = v16;
    uint64_t v21 = [NSString stringWithUTF8String:"Client-Application"];
    if ([v19 caseInsensitiveCompare:v21])
    {

      int v22 = *(id *)(a1 + 32);
      id v23 = v19;
      id v24 = v20;
      os_log_type_t v25 = [NSString stringWithUTF8String:"Priority"];
      if ([v23 caseInsensitiveCompare:v25])
      {

        uint64_t v26 = (unsigned __int16 *)*(id *)(a1 + 32);
        id v27 = v23;
        id v28 = v24;
        os_log_type_t v83 = v26;
        uint64_t v29 = [NSString stringWithUTF8String:"Listener-Association"];
        if ([v27 caseInsensitiveCompare:v29])
        {
LABEL_17:

          goto LABEL_59;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v30 = (id)gLogObj;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_handle_listener_association_header";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v27;
          *(_WORD *)&buf[22] = 2112;
          char v97 = v28;
          _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %@ : %@", buf, 0x20u);
        }

        int v31 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v28];
        if (!v31)
        {
LABEL_16:

          goto LABEL_17;
        }
        id WeakRetained = objc_loadWeakRetained((id *)(*((void *)v83 + 2) + 40));
        uint64_t v33 = [v28 UTF8String];
        os_log_type_t v34 = (os_unfair_lock_s *)WeakRetained;
        __int16 v35 = v34;
        if (v34)
        {
          if (v33)
          {
            *(void *)os_log_type_t type = 0;
            *(void *)&os_log_type_t type[8] = type;
            *(void *)&long long v93 = 0x2020000000;
            WORD4(v93) = 0;
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3221225472;
            *(void *)&buf[16] = __nw_masque_server_get_listener_association_port_block_invoke;
            char v97 = &unk_1E524BAF8;
            size_t v98 = v34;
            os_log_type_t v99 = type;
            uint64_t v100 = v33;
            __int16 v36 = (void (**)(void))_Block_copy(buf);
            os_unfair_lock_lock(v35 + 4);
            v36[2](v36);
            os_unfair_lock_unlock(v35 + 4);

            unsigned __int16 v37 = *(_WORD *)(*(void *)&type[8] + 24);
            _Block_object_dispose(type, 8);
LABEL_13:

            v83[140] = v37;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v38 = (id)gLogObj;
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              int v39 = v83[140];
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_handle_listener_association_header";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v39;
              _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s local port: %u", buf, 0x12u);
            }

            goto LABEL_16;
          }
          __int16 v72 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
          id v69 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          v101[0] = 0;
          if (__nwlog_fault(v69, type, v101))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              uint64_t v70 = __nwlog_obj();
              os_log_type_t v73 = type[0];
              if (os_log_type_enabled(v70, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
                _os_log_impl(&dword_1830D4000, v70, v73, "%{public}s called with null key", buf, 0xCu);
              }
LABEL_113:

              goto LABEL_114;
            }
            if (!v101[0])
            {
              uint64_t v70 = __nwlog_obj();
              os_log_type_t v82 = type[0];
              if (os_log_type_enabled(v70, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
                _os_log_impl(&dword_1830D4000, v70, v82, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_113;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            uint64_t v70 = __nwlog_obj();
            os_log_type_t v79 = type[0];
            BOOL v80 = os_log_type_enabled(v70, type[0]);
            if (!backtrace_string)
            {
              if (v80)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
                _os_log_impl(&dword_1830D4000, v70, v79, "%{public}s called with null key, no backtrace", buf, 0xCu);
              }
              goto LABEL_113;
            }
            if (v80)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v70, v79, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
            }
            goto LABEL_101;
          }
        }
        else
        {
          __int16 v68 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
          id v69 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          v101[0] = 0;
          if (__nwlog_fault(v69, type, v101))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              uint64_t v70 = __nwlog_obj();
              os_log_type_t v71 = type[0];
              if (os_log_type_enabled(v70, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
                _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s called with null server", buf, 0xCu);
              }
              goto LABEL_113;
            }
            if (!v101[0])
            {
              uint64_t v70 = __nwlog_obj();
              os_log_type_t v81 = type[0];
              if (os_log_type_enabled(v70, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
                _os_log_impl(&dword_1830D4000, v70, v81, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_113;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            uint64_t v70 = __nwlog_obj();
            os_log_type_t v77 = type[0];
            BOOL v78 = os_log_type_enabled(v70, type[0]);
            if (!backtrace_string)
            {
              if (v78)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
                _os_log_impl(&dword_1830D4000, v70, v77, "%{public}s called with null server, no backtrace", buf, 0xCu);
              }
              goto LABEL_113;
            }
            if (v78)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v70, v77, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
            }
LABEL_101:

            free(backtrace_string);
          }
        }
LABEL_114:
        if (v69) {
          free(v69);
        }
        unsigned __int16 v37 = 0;
        goto LABEL_13;
      }
      if (strstr((char *)[v24 UTF8String], "tc=video"))
      {
        int v66 = 700;
      }
      else if (strstr((char *)[v24 UTF8String], "tc=voice"))
      {
        int v66 = 800;
      }
      else if (strstr((char *)[v24 UTF8String], "tc=oam"))
      {
        int v66 = 400;
      }
      else if (strstr((char *)[v24 UTF8String], "tc=best-effort"))
      {
        int v66 = 0;
      }
      else if (strstr((char *)[v24 UTF8String], "tc=background-user"))
      {
        int v66 = 200;
      }
      else if (strstr((char *)[v24 UTF8String], "tc=background-system"))
      {
        int v66 = 100;
      }
      else if (strstr((char *)[v24 UTF8String], "tc=responsive-data"))
      {
        int v66 = 300;
      }
      else if (strstr((char *)[v24 UTF8String], "tc=responsive-av"))
      {
        int v66 = 600;
      }
      else if (strstr((char *)[v24 UTF8String], "tc=av-streaming"))
      {
        int v66 = 500;
      }
      else
      {
        if (!strstr((char *)[v24 UTF8String], "tc=network-control"))
        {
LABEL_89:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v74 = (id)gLogObj;
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
          {
            int v75 = v22[63];
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_handle_priority_header";
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v23;
            *(_WORD *)&buf[22] = 2112;
            char v97 = v24;
            LOWORD(v98) = 1024;
            *(_DWORD *)((char *)&v98 + 2) = v75;
            _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %@ : %@  traffic class:%u", buf, 0x26u);
          }

          goto LABEL_59;
        }
        int v66 = 900;
      }
      v22[63] = v66;
      goto LABEL_89;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v64 = (id)gLogObj;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_handle_client_application_header";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v19;
      *(_WORD *)&buf[22] = 2112;
      char v97 = v20;
      _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %@ : %@", buf, 0x20u);
    }

    uint64_t v65 = (void *)v18[34];
    v18[34] = v20;
  }
  else
  {
    uint64_t v85 = v14;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v57 = (id)gLogObj;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_handle_multipath_header";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v15;
      *(_WORD *)&buf[22] = 2112;
      char v97 = v16;
      _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s %@ : %@", buf, 0x20u);
    }

    if (strstr((char *)[v16 UTF8String], "interactive")) {
      v85[65] = 2;
    }
    char v58 = [v16 componentsSeparatedByString:@"port="];
    if ((unint64_t)[v58 count] >= 2)
    {
      uint64_t v59 = [v58 objectAtIndex:1];
      uint64_t v60 = [v59 componentsSeparatedByString:@","];

      uint64_t v61 = [v60 objectAtIndex:0];
      *((_WORD *)v85 + 132) = [v61 integerValue];

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      long long v62 = (id)gLogObj;
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
      {
        int v63 = *((unsigned __int16 *)v85 + 132);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_handle_multipath_header";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v63;
        _os_log_impl(&dword_1830D4000, v62, OS_LOG_TYPE_DEBUG, "%{public}s port: %u", buf, 0x12u);
      }
    }
  }
LABEL_59:

  return 1;
}

void sub_18387E600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void ___ZL48nw_masque_connection_pair_setup_outer_connectionP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU29objcproto18OS_nw_http_requestS1__block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(*(void *)(a1 + 32) + 16) + 88));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL48nw_masque_connection_pair_setup_outer_connectionP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU29objcproto18OS_nw_http_requestS1__block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) + 16))();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZL48nw_masque_connection_pair_setup_outer_connectionP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU29objcproto18OS_nw_http_requestS1__block_invoke_3;
  v3[3] = &unk_1E523F668;
  uint64_t v2 = *(NSObject **)(a1 + 64);
  id v4 = *(id *)(a1 + 72);
  id v5 = *(id *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 96);
  id v6 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

void nw_masque_connection_pair_setup_outer_connection_inner(void *a1, void *a2, int a3, void *a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  char v7 = a1;
  id v8 = a2;
  id v9 = a4;
  uint64_t v10 = v9;
  if (!v7)
  {
    uint64_t v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
    id v27 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v27, &type, &v45)) {
      goto LABEL_69;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
        _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v45)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v28 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v28, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
          __int16 v49 = 2082;
          uint64_t v50 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_69:
        if (!v27) {
          goto LABEL_35;
        }
LABEL_70:
        free(v27);
        goto LABEL_35;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
        _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v28 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
        _os_log_impl(&dword_1830D4000, v28, v38, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_68:

    goto LABEL_69;
  }
  if (v8)
  {
    uint64_t v11 = *((void *)v7 + 2);
    if (*(unsigned __int8 *)(v11 + 112) != 255)
    {
      *((unsigned char *)v7 + 219) = a3 != 6;
      BOOL v12 = a3 != 6 && a3 != 17;
      uint64_t v13 = *(NSObject **)(v11 + 80);
      if (v13) {
        nw_parameters_require_interface(v9, v13);
      }
      nw_parameters_set_proxy_applied(v10, 1);
      if (*((unsigned char *)v7 + 268)) {
        nw_parameters_prohibit_interface_type(v10, nw_interface_type_wifi);
      }
      if (*((unsigned char *)v7 + 270)) {
        nw_parameters_prohibit_interface_type(v10, nw_interface_type_wired);
      }
      if (*((unsigned char *)v7 + 269)) {
        nw_parameters_prohibit_interface_type(v10, nw_interface_type_cellular);
      }
      if (*((unsigned char *)v7 + 267)) {
        nw_parameters_set_prohibit_expensive(v10, 1);
      }
      if (*((unsigned char *)v7 + 266)) {
        nw_parameters_set_prohibit_constrained(v10, 1);
      }
      nw_interface_type_t v14 = *((_DWORD *)v7 + 64);
      if (v14) {
        nw_parameters_set_required_interface_type(v10, v14);
      }
      if (v7[140])
      {
        BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port("::", v7[140]);
        nw_parameters_set_local_endpoint(v10, (nw_endpoint_t)host_with_numeric_port);
        nw_parameters_set_reuse_local_address(v10, 1);
      }
      nw_parameters_set_traffic_class(v10, *((_DWORD *)v7 + 63));
      nw_connection_reset_traffic_class(*(void **)(*((void *)v7 + 2) + 48), *((_DWORD *)v7 + 63));
      id v16 = (void *)*((void *)v7 + 34);
      if (v16) {
        nw_parameters_set_source_application_by_bundle_id_internal(v10, (const char *)[v16 UTF8String]);
      }
      nw_multipath_service_t v17 = *((_DWORD *)v7 + 65);
      if (v17) {
        nw_parameters_set_multipath_service(v10, v17);
      }
      unsigned __int16 v18 = v7[132];
      if (v18)
      {
        id v19 = v8;
        WORD2(v19[28].isa) = v18;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v20 = (id)gLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = (char *)*((void *)v7 + 2);
        *(_DWORD *)buf = 136446978;
        uint64_t v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
        __int16 v49 = 2114;
        uint64_t v50 = v21;
        __int16 v51 = 2112;
        int v52 = v8;
        __int16 v53 = 2112;
        int v54 = v10;
        _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_INFO, "%{public}s %{public}@ creating new outer connection to %@ with parameters %@", buf, 0x2Au);
      }

      nw_connection_t v22 = nw_connection_create(v8, v10);
      id v23 = (void *)*((void *)v7 + 6);
      *((void *)v7 + 6) = v22;

      nw_connection_set_queue(*((nw_connection_t *)v7 + 6), *(dispatch_queue_t *)(*((void *)v7 + 2) + 32));
      id v24 = *((void *)v7 + 6);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke;
      handler[3] = &unk_1E523F6B8;
      os_log_type_t v25 = v7;
      uint64_t v41 = v25;
      char v43 = a3;
      id v42 = v8;
      BOOL v44 = v12;
      nw_connection_set_state_changed_handler(v24, handler);
      if (*((unsigned char *)v7 + 219)) {
        nw_masque_connection_pair_read_outer_datagrams(v25);
      }
      else {
        nw_masque_connection_pair_read_outer(v25);
      }
      nw_connection_start(*((nw_connection_t *)v7 + 6));
      nw_masque_connection_pair_read_inner(v25);
    }
    goto LABEL_35;
  }
  size_t v30 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
  id v27 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v45 = 0;
  if (!__nwlog_fault(v27, &type, &v45)) {
    goto LABEL_69;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v28 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (os_log_type_enabled(v28, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
      _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint", buf, 0xCu);
    }
    goto LABEL_68;
  }
  if (!v45)
  {
    id v28 = __nwlog_obj();
    os_log_type_t v39 = type;
    if (os_log_type_enabled(v28, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
      _os_log_impl(&dword_1830D4000, v28, v39, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_68;
  }
  __int16 v35 = (char *)__nw_create_backtrace_string();
  id v28 = __nwlog_obj();
  os_log_type_t v36 = type;
  BOOL v37 = os_log_type_enabled(v28, type);
  if (!v35)
  {
    if (v37)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
      _os_log_impl(&dword_1830D4000, v28, v36, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_68;
  }
  if (v37)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v48 = "nw_masque_connection_pair_setup_outer_connection_inner";
    __int16 v49 = 2082;
    uint64_t v50 = v35;
    _os_log_impl(&dword_1830D4000, v28, v36, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v35);
  if (v27) {
    goto LABEL_70;
  }
LABEL_35:
}

void sub_18387F014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5) {
      char v7 = "unknown";
    }
    else {
      char v7 = off_1E523DF08[a2];
    }
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void *(**)(uint64_t, uint64_t))(v8 + 48);
    uint64_t v10 = *(void *)(v8 + 16);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_setup_outer_connection_inner_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2112;
    size_t v126 = v9;
    *(_WORD *)uint64_t v127 = 2080;
    *(void *)&v127[2] = v7;
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ outer connection to %@ has transitioned to %s", buf, 0x2Au);
  }

  uint64_t v11 = [MEMORY[0x1E4F28F80] processInfo];
  BOOL v12 = [v11 processName];
  if ((a2 & 0xFFFFFFFE) == 4)
  {
    uint64_t v13 = *(os_unfair_lock_s **)(a1 + 32);
    if (BYTE1(v13[54]._os_unfair_lock_opaque))
    {
      if (BYTE2(v13[54]._os_unfair_lock_opaque))
      {
LABEL_59:
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000;
        size_t v126 = __Block_byref_object_copy__271;
        *(void *)uint64_t v127 = __Block_byref_object_dispose__272;
        *(void *)&v127[8] = 0;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_299;
        aBlock[3] = &unk_1E524B978;
        uint64_t v121 = buf;
        uint64_t v120 = v13;
        uint64_t v60 = (void (**)(void))_Block_copy(aBlock);
        uint64_t v61 = v13 + 2;
        os_unfair_lock_lock(v61);
        v60[2](v60);
        os_unfair_lock_unlock(v61);

        uint64_t v62 = *(void *)(*(void *)&buf[8] + 40);
        if (v62) {
          (*(void (**)(uint64_t, uint64_t, id))(v62 + 16))(v62, a2, v5);
        }

        _Block_object_dispose(buf, 8);
        goto LABEL_62;
      }
      BYTE2(v13[54]._os_unfair_lock_opaque) = 1;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      well_known = (id)gLogObj;
      if (os_log_type_enabled(well_known, OS_LOG_TYPE_INFO))
      {
        id v15 = "IP";
        int v16 = *(unsigned __int8 *)(a1 + 48);
        uint64_t v17 = *(void *)(a1 + 32);
        uint64_t v18 = *(void *)(a1 + 40);
        if (v16 == 6) {
          id v15 = "TCP";
        }
        uint64_t v19 = *(void *)(v17 + 16);
        if (v16 == 17) {
          id v15 = "UDP";
        }
        uint64_t v20 = *(void *)(v17 + 224);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_setup_outer_connection_inner_block_invoke_2";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v19;
        *(_WORD *)&buf[22] = 2080;
        size_t v126 = (void *(*)(uint64_t, uint64_t))v15;
        *(_WORD *)uint64_t v127 = 2112;
        *(void *)&v127[2] = v18;
        *(_WORD *)&v127[10] = 2112;
        *(void *)&v127[12] = v20;
        _os_log_impl(&dword_1830D4000, well_known, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Closed %s connection to %@ (for %@)\n", buf, 0x34u);
      }
LABEL_58:

      uint64_t v13 = *(os_unfair_lock_s **)(a1 + 32);
      goto LABEL_59;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v34 = (id)gLogObj;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      __int16 v35 = "IP";
      int v36 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v37 = *(void *)(a1 + 32);
      uint64_t v38 = *(void *)(a1 + 40);
      if (v36 == 6) {
        __int16 v35 = "TCP";
      }
      uint64_t v39 = *(void *)(v37 + 16);
      uint64_t v40 = *(void *)(v37 + 224);
      if (v36 == 17) {
        __int16 v35 = "UDP";
      }
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_setup_outer_connection_inner_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v39;
      *(_WORD *)&buf[22] = 2080;
      size_t v126 = (void *(*)(uint64_t, uint64_t))v35;
      *(_WORD *)uint64_t v127 = 2112;
      *(void *)&v127[2] = v38;
      *(_WORD *)&v127[10] = 2112;
      *(void *)&v127[12] = v5;
      __int16 v128 = 2112;
      uint64_t v129 = v40;
      _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Failed %s connection to %@ with error %@ (for %@)\n", buf, 0x3Eu);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 217) = 1;
    if (v5)
    {
      uint64_t v41 = v5;
      int v42 = v41[2];

      if (v42 == 2)
      {
        char v43 = v41;
        int v44 = v43[3];

        if (v44 == -65554)
        {
          well_known = _nw_http_response_create_well_known(502);
          if (!*(unsigned char *)(*(void *)(a1 + 32) + 220))
          {
            char v45 = (void *)[v12 mutableCopy];
            [v45 appendString:@"; error=dns_error"];
            nw_http_fields_append(well_known, (uint64_t)"Proxy-Status", [v45 UTF8String]);
LABEL_56:

            goto LABEL_57;
          }
          goto LABEL_57;
        }
      }
      uint64_t v48 = v41;
      int v49 = v41[2];

      if (v49 == 1)
      {
        uint64_t v50 = v48;
        int v51 = v50[3];

        if (v51 == 61)
        {
          well_known = _nw_http_response_create_well_known(502);
          if (!*(unsigned char *)(*(void *)(a1 + 32) + 220))
          {
            char v45 = (void *)[v12 mutableCopy];
            [v45 appendString:@"; error=connection_refused"];
            nw_http_fields_append(well_known, (uint64_t)"Proxy-Status", [v45 UTF8String]);
            goto LABEL_56;
          }
LABEL_57:
          metadata_for_response = nw_http_create_metadata_for_response(well_known);
          __int16 v57 = nw_content_context_create("response");
          nw_content_context_set_metadata_for_protocol(v57, metadata_for_response);
          char v58 = *(void **)(a1 + 32);
          uint64_t v59 = *(NSObject **)(v58[2] + 48);
          completion[0] = MEMORY[0x1E4F143A8];
          completion[1] = 3221225472;
          completion[2] = ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_297;
          completion[3] = &unk_1E5248CD0;
          v123 = v58;
          nw_connection_send(v59, 0, v57, 1, completion);

          goto LABEL_58;
        }
      }
      int v52 = v48;
      int v53 = v41[2];

      if (v53 == 1)
      {
        int v54 = v52;
        int v55 = v54[3];

        if (v55 == 60)
        {
          well_known = _nw_http_response_create_well_known(502);
          if (!*(unsigned char *)(*(void *)(a1 + 32) + 220))
          {
            char v45 = (void *)[v12 mutableCopy];
            [v45 appendString:@"; error=connection_timeout"];
            nw_http_fields_append(well_known, (uint64_t)"Proxy-Status", [v45 UTF8String]);
            goto LABEL_56;
          }
          goto LABEL_57;
        }
      }
    }
    well_known = _nw_http_response_create_well_known(502);
    if (!*(unsigned char *)(*(void *)(a1 + 32) + 220))
    {
      char v45 = (void *)[v12 mutableCopy];
      [v45 appendString:@"; error=destination_unavailable"];
      nw_http_fields_append(well_known, (uint64_t)"Proxy-Status", [v45 UTF8String]);
      goto LABEL_56;
    }
    goto LABEL_57;
  }
  if (a2 != 1)
  {
    if (a2 != 3 || *(unsigned char *)(*(void *)(a1 + 32) + 217)) {
      goto LABEL_62;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v21 = (id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      nw_connection_t v22 = "IP";
      int v23 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v25 = *(void *)(a1 + 40);
      if (v23 == 6) {
        nw_connection_t v22 = "TCP";
      }
      uint64_t v26 = *(void *)(v24 + 16);
      if (v23 == 17) {
        nw_connection_t v22 = "UDP";
      }
      uint64_t v27 = *(void *)(v24 + 224);
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_setup_outer_connection_inner_block_invoke_2";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v26;
      *(_WORD *)&buf[22] = 2080;
      size_t v126 = (void *(*)(uint64_t, uint64_t))v22;
      *(_WORD *)uint64_t v127 = 2112;
      *(void *)&v127[2] = v25;
      *(_WORD *)&v127[10] = 2112;
      *(void *)&v127[12] = v27;
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Opened %s connection to %@ (for %@)\n", buf, 0x34u);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 217) = 1;
    uint64_t v28 = *(void *)(a1 + 32);
    if (*(void *)(v28 + 240))
    {
      if (*(unsigned char *)(v28 + 248))
      {
        os_log_type_t v29 = dispatch_data_create("hello", 5uLL, 0, 0);
        size_t v30 = (void *)_nw_http_response_create_well_known(200);
        nw_http_fields_append(v30, (uint64_t)"Capsule-Protocol", (uint64_t)"?1");
        if (*(unsigned char *)(a1 + 48) == 17)
        {
          uint64_t v31 = *(void *)(a1 + 32);
          if (*(unsigned char *)(v31 + 178))
          {
            nw_http_fields_append(v30, (uint64_t)"Datagram-Flow-Id", v31 + 178);
            uint64_t v31 = *(void *)(a1 + 32);
          }
          int v33 = *(unsigned __int8 *)(v31 + 116);
          uint64_t v32 = v31 + 116;
          if (v33) {
            nw_http_fields_append(v30, (uint64_t)"Client-Connection-Id", v32);
          }
          nw_http_fields_append(v30, (uint64_t)"Proxy-QUIC-Forwarding", (uint64_t)"?1");
        }
LABEL_84:
        protocol_metadata = nw_http_create_metadata_for_response(v30);
        uint64_t v115 = v29;
        long long v86 = nw_content_context_create("response");
        nw_content_context_set_metadata_for_protocol(v86, protocol_metadata);
        nw_connection_send(*(nw_connection_t *)(*(void *)(*(void *)(a1 + 32) + 16) + 48), v29, v86, *(unsigned char *)(*(void *)(a1 + 32) + 219), &__block_literal_global_24376);
        objc_storeStrong((id *)(*(void *)(a1 + 32) + 56), v86);
        uint64_t v87 = *(void *)(a1 + 32);
        if (*(void *)(v87 + 240) && !*(unsigned char *)(v87 + 248))
        {
          uint64_t v88 = *(NSObject **)(*(void *)(v87 + 16) + 48);
          uint64_t v89 = nw_protocol_copy_http_connection_definition();
          nw_protocol_metadata_t v90 = nw_connection_copy_protocol_metadata(v88, v89);

          nw_http_connection_metadata_send_certificate(v90, *(void **)(*(void *)(a1 + 32) + 240));
        }
        if (!*(unsigned char *)(a1 + 49)) {
          goto LABEL_113;
        }
        size_t v113 = nw_connection_copy_connected_local_endpoint(*(void **)(*(void *)(a1 + 32) + 48));
        uint64_t v91 = nw_connection_copy_connected_remote_endpoint(*(void **)(*(void *)(a1 + 32) + 48));
        BOOL v114 = v91;
        nw_endpoint_t address = nw_endpoint_get_address(v113);
        long long v93 = address;
        if (address)
        {
          int sa_family = address->sa_family;
          if (sa_family == 30)
          {
            id v95 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
            buf[0] = 0;
            [v95 appendBytes:buf length:1];
            v130[0] = 6;
            [v95 appendBytes:v130 length:1];
            [v95 appendBytes:&v93->sa_data[6] length:16];
            char v124 = 0x80;
            [v95 appendBytes:&v124 length:1];
            if (v95)
            {
LABEL_95:
              uint64_t v96 = (void *)[v95 _createDispatchData];
LABEL_97:

              uint64_t v91 = v114;
LABEL_98:
              char v97 = nw_endpoint_get_address(v91);
              size_t v98 = (sockaddr *)v97;
              if (v97)
              {
                int v99 = v97->sa_family;
                if (v99 == 30)
                {
                  id v100 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
                  buf[0] = 6;
                  [v100 appendBytes:buf length:1];
                  [v100 appendBytes:&v98->sa_data[6] length:16];
                  [v100 appendBytes:&v98->sa_data[6] length:16];
                  v130[0] = *(unsigned char *)(a1 + 48);
                  [v100 appendBytes:v130 length:1];
                  if (v100)
                  {
LABEL_104:
                    size_t v98 = (sockaddr *)[v100 _createDispatchData];
LABEL_107:

                    goto LABEL_108;
                  }
LABEL_106:
                  size_t v98 = 0;
                  goto LABEL_107;
                }
                if (v99 == 2)
                {
                  id v100 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
                  buf[0] = 4;
                  [v100 appendBytes:buf length:1];
                  [v100 appendBytes:&v98->sa_data[2] length:4];
                  [v100 appendBytes:&v98->sa_data[2] length:4];
                  v130[0] = *(unsigned char *)(a1 + 48);
                  [v100 appendBytes:v130 length:1];
                  if (v100) {
                    goto LABEL_104;
                  }
                  goto LABEL_106;
                }
                size_t v98 = 0;
              }
LABEL_108:
              if (v96)
              {
                unint64_t v101 = nw_content_context_create("assign address");
                metadata_for_capsule = nw_http_create_metadata_for_capsule(1, v96);
                nw_content_context_set_metadata_for_protocol(v101, metadata_for_capsule);
                nw_connection_send(*(nw_connection_t *)(*(void *)(*(void *)(a1 + 32) + 16) + 48), 0, v101, 1, &__block_literal_global_24376);
              }
              if (v98)
              {
                __int16 v103 = nw_content_context_create("advertise route");
                id v104 = nw_http_create_metadata_for_capsule(3, v98);
                nw_content_context_set_metadata_for_protocol(v103, v104);
                nw_connection_send(*(nw_connection_t *)(*(void *)(*(void *)(a1 + 32) + 16) + 48), 0, v103, 1, &__block_literal_global_24376);
              }
LABEL_113:

LABEL_62:
              nw_masque_connection_pair_cancel_waiting_timer(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32));
              goto LABEL_63;
            }
LABEL_96:
            uint64_t v96 = 0;
            goto LABEL_97;
          }
          if (sa_family == 2)
          {
            id v95 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
            buf[0] = 0;
            [v95 appendBytes:buf length:1];
            v130[0] = 4;
            [v95 appendBytes:v130 length:1];
            [v95 appendBytes:&v93->sa_data[2] length:4];
            char v124 = 32;
            [v95 appendBytes:&v124 length:1];
            if (v95) {
              goto LABEL_95;
            }
            goto LABEL_96;
          }
        }
        uint64_t v96 = 0;
        goto LABEL_98;
      }
      uint64_t v85 = (void *)_nw_http_response_create_well_known(405);
      nw_http_fields_append(v85, (uint64_t)"Capsule-Protocol", (uint64_t)"?1");
      id v81 = (id)[v12 mutableCopy];
      [v81 appendString:@"; error=resource_uses_reverse_proxy"];
      nw_http_fields_append(v85, (uint64_t)"Proxy-Status", [v81 UTF8String]);
      size_t v30 = v85;
    }
    else
    {
      __int16 v76 = (void *)_nw_http_response_create_well_known(200);
      size_t v30 = v76;
      if (*(unsigned char *)(a1 + 48) != 6)
      {
        nw_http_fields_append(v76, (uint64_t)"Capsule-Protocol", (uint64_t)"?1");
        if (*(unsigned char *)(a1 + 48) == 17)
        {
          uint64_t v77 = *(void *)(a1 + 32);
          if (*(unsigned char *)(v77 + 178))
          {
            nw_http_fields_append(v30, (uint64_t)"Datagram-Flow-Id", v77 + 178);
            uint64_t v77 = *(void *)(a1 + 32);
          }
          int v79 = *(unsigned __int8 *)(v77 + 116);
          uint64_t v78 = v77 + 116;
          if (v79) {
            nw_http_fields_append(v30, (uint64_t)"Client-Connection-Id", v78);
          }
          nw_http_fields_append(v30, (uint64_t)"Proxy-QUIC-Forwarding", (uint64_t)"?1");
        }
      }
      uint64_t v80 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v80 + 220)) {
        goto LABEL_83;
      }
      id v81 = nw_connection_copy_connected_remote_endpoint(*(void **)(v80 + 48));
      if (v81)
      {
        os_log_type_t v82 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithString:v12];
        [v82 appendFormat:@"; next-hop=%@", v81];
        os_log_type_t v83 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithFormat:&stru_1ECF695B0];
        v117[0] = MEMORY[0x1E4F143A8];
        v117[1] = 3221225472;
        v117[2] = ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_312;
        v117[3] = &unk_1E5248CA0;
        id v84 = v83;
        id v118 = v84;
        nw_endpoint_enumerate_cnames(v81, v117);
        if ([v84 length]) {
          [v82 appendFormat:@"; next-hop-aliases=\"%@\"", v84];
        }
        nw_http_fields_append(v30, (uint64_t)"Proxy-Status", [v82 UTF8String]);
      }
    }

LABEL_83:
    os_log_type_t v29 = 0;
    goto LABEL_84;
  }
  uint64_t v46 = (id *)*(id *)(a1 + 32);
  BOOL v47 = v46;
  if (!v46)
  {
    __int16 v105 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_start_waiting_timer";
    size_t v106 = (char *)_os_log_send_and_compose_impl();

    v130[0] = 16;
    char v124 = 0;
    if (__nwlog_fault(v106, v130, &v124))
    {
      if (v130[0] == 17)
      {
        uint64_t v107 = __nwlog_obj();
        os_log_type_t v108 = v130[0];
        if (os_log_type_enabled(v107, (os_log_type_t)v130[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_start_waiting_timer";
          _os_log_impl(&dword_1830D4000, v107, v108, "%{public}s called with null pair", buf, 0xCu);
        }
      }
      else if (v124)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v107 = __nwlog_obj();
        os_log_type_t v110 = v130[0];
        BOOL v111 = os_log_type_enabled(v107, (os_log_type_t)v130[0]);
        if (backtrace_string)
        {
          if (v111)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_start_waiting_timer";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v107, v110, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_130;
        }
        if (v111)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_start_waiting_timer";
          _os_log_impl(&dword_1830D4000, v107, v110, "%{public}s called with null pair, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v107 = __nwlog_obj();
        os_log_type_t v112 = v130[0];
        if (os_log_type_enabled(v107, (os_log_type_t)v130[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_start_waiting_timer";
          _os_log_impl(&dword_1830D4000, v107, v112, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_130:
    if (v106) {
      free(v106);
    }
    goto LABEL_45;
  }
  if (!*((unsigned char *)v46 + 218) && v46[6] && !v46[36])
  {
    int v63 = v46 + 2;
    dispatch_source_t v64 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *((dispatch_queue_t *)v46[2] + 4));
    id v65 = v47[36];
    v47[36] = v64;

    id v66 = *v63;
    id v67 = v47[6];
    __int16 v68 = v47[36];
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL45nw_masque_connection_pair_start_waiting_timerP36NWConcrete_nw_masque_connection_pair_block_invoke;
    size_t v126 = (void *(*)(uint64_t, uint64_t))&unk_1E524B9A0;
    id v69 = v66;
    *(void *)uint64_t v127 = v69;
    id v70 = v67;
    *(void *)&v127[8] = v70;
    dispatch_source_set_event_handler(v68, buf);
    os_log_type_t v71 = v47[36];
    dispatch_time_t v72 = dispatch_time(0, 15000000000);
    dispatch_source_set_timer(v71, v72, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    dispatch_resume((dispatch_object_t)v47[36]);
    os_log_type_t v73 = __nwlog_obj();
    if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
    {
      id v74 = v47[2];
      id v75 = v47[6];
      *(_DWORD *)v130 = 136446722;
      uint64_t v131 = "nw_masque_connection_pair_start_waiting_timer";
      __int16 v132 = 2114;
      id v133 = v74;
      __int16 v134 = 2112;
      id v135 = v75;
      _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_INFO, "%{public}s %{public}@ starting wait timer for %@", v130, 0x20u);
    }
  }
LABEL_45:

LABEL_63:
}

void sub_1838802FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_masque_connection_pair_read_outer_datagrams(NWConcrete_nw_masque_connection_pair *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    id v4 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
          __int16 v29 = 2082;
          size_t v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v13, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v5) {
          goto LABEL_5;
        }
LABEL_56:
        free(v5);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_1830D4000, v6, v13, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_1830D4000, v6, v20, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!*(void *)(*((void *)v1 + 2) + 48))
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null pair->mcp_parent->mc_in_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_1830D4000, v6, v21, "%{public}s called with null pair->mcp_parent->mc_in_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    id v15 = (char *)__nw_create_backtrace_string();
    id v6 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null pair->mcp_parent->mc_in_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
      __int16 v29 = 2082;
      size_t v30 = v15;
      _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null pair->mcp_parent->mc_in_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  uint64_t v3 = (void *)*((void *)v1 + 6);
  if (!v3)
  {
    uint64_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null pair->mcp_outer_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_1830D4000, v6, v22, "%{public}s called with null pair->mcp_outer_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    id v15 = (char *)__nw_create_backtrace_string();
    id v6 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null pair->mcp_outer_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v28 = "nw_masque_connection_pair_read_outer_datagrams";
      __int16 v29 = 2082;
      size_t v30 = v15;
      _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null pair->mcp_outer_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v15);
    if (!v5) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke;
  v23[3] = &unk_1E523F730;
  uint64_t v24 = v1;
  nw_connection_read_multiple(v3, 1u, 0xFFFFFFFF, v23);

LABEL_5:
}

void sub_183880CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_masque_connection_pair_read_outer(NWConcrete_nw_masque_connection_pair *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    id v4 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_masque_connection_pair_read_outer";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v28 = "nw_masque_connection_pair_read_outer";
          __int16 v29 = 2082;
          size_t v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v13, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v5) {
          goto LABEL_5;
        }
LABEL_56:
        free(v5);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_1830D4000, v6, v13, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_1830D4000, v6, v20, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!*(void *)(*((void *)v1 + 2) + 48))
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_masque_connection_pair_read_outer";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null pair->mcp_parent->mc_in_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_1830D4000, v6, v21, "%{public}s called with null pair->mcp_parent->mc_in_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    id v15 = (char *)__nw_create_backtrace_string();
    id v6 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null pair->mcp_parent->mc_in_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v28 = "nw_masque_connection_pair_read_outer";
      __int16 v29 = 2082;
      size_t v30 = v15;
      _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null pair->mcp_parent->mc_in_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  uint64_t v3 = (void *)*((void *)v1 + 6);
  if (!v3)
  {
    uint64_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_masque_connection_pair_read_outer";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null pair->mcp_outer_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_1830D4000, v6, v22, "%{public}s called with null pair->mcp_outer_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    id v15 = (char *)__nw_create_backtrace_string();
    id v6 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null pair->mcp_outer_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v28 = "nw_masque_connection_pair_read_outer";
      __int16 v29 = 2082;
      size_t v30 = v15;
      _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null pair->mcp_outer_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v15);
    if (!v5) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = ___ZL36nw_masque_connection_pair_read_outerP36NWConcrete_nw_masque_connection_pair_block_invoke;
  v23[3] = &unk_1E52427C0;
  uint64_t v24 = v1;
  nw_connection_receive_internal(v3, 0, 1u, 0xFFFFFFFF, v23);

LABEL_5:
}

void sub_1838813E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke_339(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (a5 + a3 >= v5) {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a4 + v5 - a3;
  }
  return a5 + a3 < v5;
}

BOOL ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (a5 + a3 >= v5) {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a4 + v5 - a3;
  }
  return a5 + a3 < v5;
}

void ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke_342(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
      int v6 = 136446722;
      os_log_type_t v7 = "nw_masque_connection_pair_read_inner_block_invoke";
      __int16 v8 = 2114;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to outer connection %@", (uint8_t *)&v6, 0x20u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 232));
}

void ___ZL36nw_masque_connection_pair_read_outerP36NWConcrete_nw_masque_connection_pair_block_invoke(uint64_t a1, void *a2, void *a3, BOOL a4, void *a5)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a2;
  id v10 = a3;
  id v11 = a5;
  uint64_t v12 = v11;
  os_log_type_t v13 = *(void **)(a1 + 32);
  if (*(void *)(v13[2] + 48))
  {
    if (v13[6])
    {
      if (v13[7])
      {
        if (!v11 || (BOOL v14 = v11, v15 = v14[3], v14, v15 == 40))
        {
          if (v10 && a4)
          {
            os_log_type_t v16 = v10;
            if (v16 != (unsigned char *)&__block_literal_global_42249 && v16 != (unsigned char *)&__block_literal_global_10_42276)
            {
              if (v16 == (unsigned char *)&__block_literal_global_6_42258 || v16 == (unsigned char *)&__block_literal_global_8_42267)
              {

                uint64_t v18 = *(void *)(a1 + 32);
              }
              else
              {
                char v17 = v16[118];

                uint64_t v18 = *(void *)(a1 + 32);
                if ((v17 & 1) == 0)
                {
                  BOOL v19 = 0;
                  if (!*(void *)(v18 + 32)) {
                    goto LABEL_25;
                  }
                  unsigned int v22 = *(unsigned __int16 *)(v18 + 72);
                  if (!v22) {
                    goto LABEL_25;
                  }
LABEL_20:
                  if (gLogDatapath)
                  {
                    uint64_t v38 = __nwlog_obj();
                    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v39 = *(void *)(*(void *)(a1 + 32) + 16);
                      *(_DWORD *)buf = 136446722;
                      int v49 = "nw_masque_connection_pair_read_outer_block_invoke";
                      __int16 v50 = 2114;
                      uint64_t v51 = v39;
                      __int16 v52 = 2112;
                      size_t v53 = (size_t)v9;
                      _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received content %@", buf, 0x20u);
                    }

                    unsigned int v22 = *(unsigned __int16 *)(*(void *)(a1 + 32) + 72);
                  }
                  __s1[0] = 0;
                  __s1[1] = 0;
                  int v61 = 0;
                  size_t v23 = nw_dispatch_data_copyout_from_offset(v9, (uint64_t)__s1, v22, 1);
                  uint64_t v24 = *(unsigned __int16 **)(a1 + 32);
                  if (v23 == v24[36] && (size_t v25 = v23, !memcmp(__s1, v24 + 37, v23)))
                  {
                    if (v25 == v24[47])
                    {
                      size_t size = dispatch_data_get_size(v9);
                      uint64_t v47 = 0;
                      alloc = (void *)dispatch_data_create_alloc();
                      nw_dispatch_data_copyout(v9, 0, size);
                      memcpy((void *)1, (const void *)(*(void *)(a1 + 32) + 96), v25);
                      BOOL v34 = alloc;

                      if (gLogDatapath)
                      {
                        char v43 = __nwlog_obj();
                        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v44 = *(void *)(*(void *)(a1 + 32) + 16);
                          *(_DWORD *)buf = 136446466;
                          int v49 = "nw_masque_connection_pair_read_outer_block_invoke";
                          __int16 v50 = 2114;
                          uint64_t v51 = v44;
                          _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Replaced with Virtual Client CID before proxying", buf, 0x16u);
                        }
                      }
                      int v26 = 1;
                      uint64_t v9 = v34;
                    }
                    else
                    {
                      int v26 = 1;
                    }
                  }
                  else
                  {
LABEL_25:
                    int v26 = 0;
                  }
                  if (gLogDatapath)
                  {
                    __int16 v35 = __nwlog_obj();
                    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v36 = *(void *)(*(void *)(a1 + 32) + 16);
                      if (v9) {
                        size_t v37 = dispatch_data_get_size(v9);
                      }
                      else {
                        size_t v37 = 0;
                      }
                      uint64_t v40 = "";
                      *(_DWORD *)buf = 136447490;
                      uint64_t v41 = " directly";
                      int v49 = "nw_masque_connection_pair_read_outer_block_invoke";
                      if (!v26) {
                        uint64_t v41 = "";
                      }
                      __int16 v50 = 2114;
                      uint64_t v51 = v36;
                      int v42 = ", complete";
                      if (!a4) {
                        int v42 = "";
                      }
                      __int16 v52 = 2048;
                      size_t v53 = v37;
                      __int16 v54 = 2080;
                      int v55 = v41;
                      __int16 v56 = 2080;
                      if (v19) {
                        uint64_t v40 = ", final";
                      }
                      __int16 v57 = v42;
                      __int16 v58 = 2080;
                      uint64_t v59 = v40;
                      _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes%s to client%s%s", buf, 0x3Eu);
                    }
                  }
                  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 232));
                  uint64_t v27 = *(void *)(a1 + 32);
                  if (v26) {
                    uint64_t v28 = (NSObject **)(v27 + 32);
                  }
                  else {
                    uint64_t v28 = (NSObject **)(*(void *)(v27 + 16) + 48);
                  }
                  __int16 v29 = *v28;
                  if (*(unsigned char *)(v27 + 219)) {
                    size_t v30 = &_nw_content_context_default_message;
                  }
                  else {
                    size_t v30 = (const nw_content_context_t *)(v27 + 56);
                  }
                  uint64_t v31 = *v30;
                  v45[0] = MEMORY[0x1E4F143A8];
                  v45[1] = 3221225472;
                  v45[2] = ___ZL36nw_masque_connection_pair_read_outerP36NWConcrete_nw_masque_connection_pair_block_invoke_334;
                  v45[3] = &unk_1E5248CD0;
                  uint64_t v46 = (id)v27;
                  nw_connection_send(v29, v9, v31, a4, v45);
                  if (!v19) {
                    nw_masque_connection_pair_read_outer(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32));
                  }
                  os_log_type_t v20 = v46;
                  goto LABEL_36;
                }
              }
              BOOL v19 = *(unsigned char *)(v18 + 219) == 0;
              goto LABEL_20;
            }
          }
          BOOL v19 = 0;
          uint64_t v18 = *(void *)(a1 + 32);
          goto LABEL_20;
        }
      }
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v20 = (id)gLogObj;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 16);
    *(_DWORD *)buf = 136446722;
    int v49 = "nw_masque_connection_pair_read_outer_block_invoke";
    __int16 v50 = 2114;
    uint64_t v51 = v21;
    __int16 v52 = 2112;
    size_t v53 = (size_t)v12;
    _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Stopping reading, error %@", buf, 0x20u);
  }
LABEL_36:
}

void sub_183881B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_masque_connection_pair_read_outerP36NWConcrete_nw_masque_connection_pair_block_invoke_334(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
      int v6 = 136446722;
      os_log_type_t v7 = "nw_masque_connection_pair_read_outer_block_invoke";
      __int16 v8 = 2114;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to inner connection %@", (uint8_t *)&v6, 0x20u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 232));
}

void ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v6 = *(void **)(a1 + 32);
  os_log_type_t v7 = v6[6];
  if (v7 && (a4 == 40 || !a4))
  {
    if (gLogDatapath)
    {
      BOOL v14 = __nwlog_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 16);
        *(_DWORD *)buf = 136446722;
        uint64_t v21 = "nw_masque_connection_pair_read_outer_datagrams_block_invoke";
        __int16 v22 = 2114;
        uint64_t v23 = v15;
        __int16 v24 = 1024;
        int v25 = a3;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying batch of %u packets to client", buf, 0x1Cu);
      }

      int v6 = *(void **)(a1 + 32);
      os_log_type_t v7 = v6[6];
    }
    batch_block[0] = MEMORY[0x1E4F143A8];
    batch_block[1] = 3221225472;
    batch_block[2] = ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke_325;
    batch_block[3] = &unk_1E523F708;
    int v19 = a3;
    uint64_t v18 = a2;
    char v17 = v6;
    nw_connection_batch(v7, batch_block);
    nw_masque_connection_pair_read_outer_datagrams(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32));
    __int16 v10 = v17;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = *(void *)(v11 + 48);
      *(_DWORD *)buf = 136446978;
      uint64_t v21 = "nw_masque_connection_pair_read_outer_datagrams_block_invoke";
      __int16 v22 = 2114;
      uint64_t v23 = v12;
      __int16 v24 = 1024;
      int v25 = a4;
      __int16 v26 = 2112;
      uint64_t v27 = v13;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Stopping reading, error %d, outer %@", buf, 0x26u);
    }
  }
}

void sub_183881E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke_326(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL matched = nw_masque_connection_pair_match_demux_pattern(a4, a5, *(void **)(*(void *)(a1 + 32) + 192));
  if (matched) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return !matched;
}

void ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke_329(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
      int v6 = 136446722;
      os_log_type_t v7 = "nw_masque_connection_pair_read_outer_datagrams_block_invoke";
      __int16 v8 = 2114;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to inner connection %@", (uint8_t *)&v6, 0x20u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 232));
}

void ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_297(uint64_t a1)
{
}

void ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_299(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 64));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_312(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = [v3 length];
  uint64_t v5 = ",";
  if (!v4) {
    uint64_t v5 = "";
  }
  objc_msgSend(v3, "appendFormat:", @"%s%s", v5, a2);
  return 1;
}

void ___ZL45nw_masque_connection_pair_start_waiting_timerP36NWConcrete_nw_masque_connection_pair_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 136446722;
    int v6 = "nw_masque_connection_pair_start_waiting_timer_block_invoke";
    __int16 v7 = 2114;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_INFO, "%{public}s %{public}@ wait timer fired for outer connection %@", (uint8_t *)&v5, 0x20u);
  }

  nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
}

void ___ZL48nw_masque_connection_pair_setup_outer_connectionP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU29objcproto18OS_nw_http_requestS1__block_invoke_3(uint64_t a1)
{
}

void ___ZL32nw_masque_connection_pair_createP31NWConcrete_nw_masque_connection_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 40) + 220) = 0;
}

void ___ZL32nw_masque_connection_pair_createP31NWConcrete_nw_masque_connection_block_invoke_2(uint64_t a1, int a2)
{
  if ((a2 & 0xFFFFFFFE) == 4)
  {
    nw_dictionary_set_value(*(void *)(*(void *)(a1 + 32) + 56), (const char *)(*(void *)(a1 + 40) + 200), 0);
    uint64_t v4 = *(NWConcrete_nw_masque_connection_pair **)(a1 + 40);
    nw_masque_connection_pair_cancel(v4);
  }
}

void ___ZL51nw_masque_connection_pair_set_state_changed_handlerP36NWConcrete_nw_masque_connection_pairU13block_pointerFv21nw_connection_state_tPU22objcproto11OS_nw_error8NSObjectE_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 64);
  *(void *)(v3 + 64) = v2;
}

void nw_masque_connection_pair_cancel(NWConcrete_nw_masque_connection_pair *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 29);
    uint64_t v4 = *(NSObject **)(*((void *)v1 + 2) + 32);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZL32nw_masque_connection_pair_cancelP36NWConcrete_nw_masque_connection_pair_block_invoke;
    block[3] = &unk_1E524BAA8;
    BOOL v14 = v1;
    dispatch_group_notify(v3, v4, block);

    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_masque_connection_pair_cancel";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_masque_connection_pair_cancel";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_masque_connection_pair_cancel";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_masque_connection_pair_cancel";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_masque_connection_pair_cancel";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void ___ZL32nw_masque_connection_pair_cancelP36NWConcrete_nw_masque_connection_pair_block_invoke(uint64_t a1)
{
  nw_masque_connection_pair_cancel_waiting_timer(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32));
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2[2] + 48);
  if (v3)
  {
    nw_connection_cancel(v3);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 16);
    int v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 48) = 0;

    uint64_t v2 = *(void **)(a1 + 32);
  }
  int v6 = v2[3];
  if (v6)
  {
    nw_connection_cancel(v6);
    uint64_t v7 = *(void *)(a1 + 32);
    os_log_type_t v8 = *(void **)(v7 + 24);
    *(void *)(v7 + 24) = 0;

    uint64_t v2 = *(void **)(a1 + 32);
  }
  __int16 v9 = v2[4];
  if (v9)
  {
    nw_connection_cancel(v9);
    uint64_t v10 = *(void *)(a1 + 32);
    BOOL v11 = *(void **)(v10 + 32);
    *(void *)(v10 + 32) = 0;

    uint64_t v2 = *(void **)(a1 + 32);
  }
  os_log_type_t v12 = (atomic_uchar *)v2[5];
  if (v12)
  {
    nw_array_apply(v12, (uint64_t)&__block_literal_global_270);
    uint64_t v13 = *(void *)(a1 + 32);
    BOOL v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = 0;

    uint64_t v2 = *(void **)(a1 + 32);
  }
  char v15 = v2[6];
  if (v15)
  {
    nw_connection_cancel(v15);
    uint64_t v16 = *(void *)(a1 + 32);
    char v17 = *(void **)(v16 + 48);
    *(void *)(v16 + 48) = 0;

    uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v18 = (void *)v2[24];
  v2[24] = 0;

  uint64_t v19 = *(void *)(a1 + 32);
  os_log_type_t v20 = *(void **)(v19 + 56);
  *(void *)(v19 + 56) = 0;

  uint64_t v21 = *(void *)(a1 + 32);
  __int16 v22 = *(void **)(v21 + 64);
  *(void *)(v21 + 64) = 0;
}

uint64_t ___ZL32nw_masque_connection_pair_cancelP36NWConcrete_nw_masque_connection_pair_block_invoke_2(int a1, int a2, nw_connection_t connection)
{
  return 1;
}

uint64_t ___ZL36nw_masque_connection_cancel_on_queueP31NWConcrete_nw_masque_connectionPU22objcproto11OS_nw_error8NSObject_block_invoke_2(int a1, int a2, NWConcrete_nw_masque_listener_pair *a3)
{
  return 1;
}

uint64_t ___ZL36nw_masque_connection_cancel_on_queueP31NWConcrete_nw_masque_connectionPU22objcproto11OS_nw_error8NSObject_block_invoke(int a1, int a2, NWConcrete_nw_masque_connection_pair *a3)
{
  return 1;
}

void __nw_masque_connection_set_cancel_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 104);
  *(void *)(v3 + 104) = v2;
}

void __nw_masque_connection_cancel_block_invoke(uint64_t a1)
{
}

uint64_t __nw_masque_connection_set_group_identifier_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 16) = *(void *)(result + 40);
  return result;
}

BOOL nw_protocol_http_client_create(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v5 = (char *)malloc_type_calloc(1uLL, 0x250uLL, 0xEAFB8F1AuLL);
  if (v5)
  {
LABEL_2:
    bzero(v5, 0x250uLL);
    if (gLogDatapath)
    {
      char v15 = __nwlog_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v27 = "nw_protocol_http_client_create";
        __int16 v28 = 2082;
        uint64_t v29 = (uint64_t)(v5 + 114);
        __int16 v30 = 2080;
        uint64_t v31 = (uint64_t)" ";
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
    if (nw_protocol_http_client_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_http_client_identifier::onceToken, &__block_literal_global_30012);
    }
    *((void *)v5 + 2) = &nw_protocol_http_client_identifier::protocol_identifier;
    if (nw_protocol_http_client_get_callbacks(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_http_client_get_callbacks(void)::onceToken, &__block_literal_global_6_30013);
    }
    *((void *)v5 + 3) = &nw_protocol_http_client_get_callbacks(void)::protocol_callbacks;
    *((void *)v5 + 5) = v5;
    id v6 = nw_parameters_copy_context(a4);
    char v7 = v5[568];
    if (v7)
    {
      os_log_type_t v8 = (void *)*((void *)v5 + 70);
      if (v8)
      {
        os_release(v8);
        char v7 = v5[568];
      }
    }
    *((void *)v5 + 25) = 0;
    *((void *)v5 + 70) = v6;
    v5[568] = v7 | 1;
    *((void *)v5 + 9) = v5 + 200;
    *((void *)v5 + 26) = v5 + 200;
    *((void *)v5 + 27) = 0;
    *((void *)v5 + 28) = v5 + 216;
    *((void *)v5 + 29) = 0;
    *((void *)v5 + 30) = v5 + 232;
    v5[340] = 2;
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    id v9 = (id)nw_protocol_copy_http_definition_http_definition;
    nw_protocol_plugin_metadata_set_callbacks((uint64_t)v5, v9, (uint64_t)nw_protocol_http_client_create::$_0::__invoke, (uint64_t)nw_protocol_http_client_create::$_1::__invoke);
    if (v9) {
      os_release(v9);
    }
    uint64_t v10 = *((void *)v5 + 5);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 72);
      if (v11)
      {
        *(void *)(v11 + 112) = nw_protocol_http_client_report_transfer_size;
LABEL_17:
        *((void *)v5 + 11) = v5 + 344;
        nw_protocol_plugin_retry_set_callbacks((uint64_t)v5, (uint64_t)nw_protocol_http_client_create::$_2::__invoke, (uint64_t)nw_protocol_http_client_create::$_3::__invoke, (uint64_t)nw_protocol_http_client_create::$_4::__invoke, (uint64_t)nw_protocol_http_client_create::$_5::__invoke);
        *((void *)v5 + 8) = v5 + 104;
        nw_protocol_plugin_name_set_callbacks((uint64_t)v5, (uint64_t)nw_protocol_http_client_create::$_6::__invoke);
        return (BOOL)v5;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_protocol_plugin_metadata_set_size_callback";
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v24 = 0;
      if (!__nwlog_fault(v16, &type, &v24)) {
        goto LABEL_50;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_protocol_plugin_metadata_set_size_callback";
        uint64_t v19 = "%{public}s called with null metadata_plugin";
        goto LABEL_49;
      }
      if (!v24)
      {
        char v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_protocol_plugin_metadata_set_size_callback";
        uint64_t v19 = "%{public}s called with null metadata_plugin, backtrace limit exceeded";
        goto LABEL_49;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v23 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v27 = "nw_protocol_plugin_metadata_set_size_callback";
          __int16 v28 = 2082;
          uint64_t v29 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null metadata_plugin, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v16) {
          goto LABEL_17;
        }
        goto LABEL_51;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_protocol_plugin_metadata_set_size_callback";
        uint64_t v19 = "%{public}s called with null metadata_plugin, no backtrace";
LABEL_49:
        _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_protocol_plugin_metadata_set_size_callback";
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v24 = 0;
      if (!__nwlog_fault(v16, &type, &v24)) {
        goto LABEL_50;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_protocol_plugin_metadata_set_size_callback";
        uint64_t v19 = "%{public}s called with null protocol->handle";
        goto LABEL_49;
      }
      if (!v24)
      {
        char v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_protocol_plugin_metadata_set_size_callback";
        uint64_t v19 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
        goto LABEL_49;
      }
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      char v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!v20)
      {
        if (!v21) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = "nw_protocol_plugin_metadata_set_size_callback";
        uint64_t v19 = "%{public}s called with null protocol->handle, no backtrace";
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v27 = "nw_protocol_plugin_metadata_set_size_callback";
        __int16 v28 = 2082;
        uint64_t v29 = (uint64_t)v20;
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null protocol->handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v20);
    }
LABEL_50:
    if (!v16) {
      goto LABEL_17;
    }
LABEL_51:
    free(v16);
    goto LABEL_17;
  }
  uint64_t v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  uint64_t v27 = "strict_calloc";
  __int16 v28 = 2048;
  uint64_t v29 = 1;
  __int16 v30 = 2048;
  uint64_t v31 = 592;
  BOOL v14 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t nw_protocol_http_client_create::$_6::__invoke(nw_protocol_http_client_create::$_6 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "operator()";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v11, &type, &v20)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "operator()";
      BOOL v14 = "%{public}s called with null protocol";
LABEL_55:
      _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
      goto LABEL_56;
    }
    if (!v20)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "operator()";
        BOOL v14 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v16 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "operator()";
        BOOL v14 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    if (!v16) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v23 = "operator()";
    __int16 v24 = 2082;
    int v25 = backtrace_string;
    char v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_41:
    _os_log_impl(&dword_1830D4000, v12, v13, v17, buf, 0x16u);
    goto LABEL_42;
  }
  uint64_t v3 = *((void *)this + 5);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "operator()";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v11, &type, &v20)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "operator()";
      BOOL v14 = "%{public}s called with null http_client";
      goto LABEL_55;
    }
    if (!v20)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "operator()";
        BOOL v14 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "operator()";
        BOOL v14 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    if (!v18) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v23 = "operator()";
    __int16 v24 = 2082;
    int v25 = backtrace_string;
    char v17 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
    goto LABEL_41;
  }
  if (a2)
  {
    if (!*(void *)(v3 + 576))
    {
      uint64_t parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
      if (parameters) {
        int v5 = os_retain(parameters);
      }
      else {
        int v5 = 0;
      }
      client_metadata_in_uint64_t parameters = nw_http_messaging_options_find_or_create_client_metadata_in_parameters(v5, v3);
      char v7 = *(unsigned char *)(v3 + 584);
      if (v7)
      {
        os_log_type_t v8 = *(void **)(v3 + 576);
        if (v8)
        {
          os_release(v8);
          char v7 = *(unsigned char *)(v3 + 584);
        }
      }
      *(void *)(v3 + 576) = client_metadata_in_parameters;
      *(unsigned char *)(v3 + 584) = v7 | 1;
      if (v5) {
        os_release(v5);
      }
    }
    id v9 = *(void **)(v3 + 48);
    if (v9)
    {
      nw_protocol_error(v9, v3);
      nw_protocol_disconnected(*(void **)(v3 + 48), v3);
      nw_protocol_set_output_handler(*(void *)(v3 + 48), 0);
      nw_protocol_set_input_handler(v3, 0);
    }
    return 1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v23 = "operator()";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v11, &type, &v20)) {
    goto LABEL_56;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "operator()";
        BOOL v14 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v19 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "operator()";
        BOOL v14 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v23 = "operator()";
      __int16 v24 = 2082;
      int v25 = backtrace_string;
      char v17 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_41;
    }
LABEL_42:
    free(backtrace_string);
    goto LABEL_56;
  }
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v13 = type;
  if (os_log_type_enabled(v12, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "operator()";
    BOOL v14 = "%{public}s called with null other_protocol";
    goto LABEL_55;
  }
LABEL_56:
  if (v11) {
    free(v11);
  }
  return 0;
}

uint64_t nw_protocol_http_client_create::$_5::__invoke(nw_protocol_http_client_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_client_create::$_4::__invoke(nw_protocol_http_client_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v37 = "operator()";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v11, &type, &v34)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136446210;
      size_t v37 = "operator()";
      BOOL v14 = "%{public}s called with null protocol";
      goto LABEL_72;
    }
    if (!v34)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136446210;
      size_t v37 = "operator()";
      BOOL v14 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v16 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (!v16) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136446210;
      size_t v37 = "operator()";
      BOOL v14 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_72;
    }
    if (!v16) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446466;
    size_t v37 = "operator()";
    __int16 v38 = 2082;
    uint64_t v39 = backtrace_string;
    char v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
    _os_log_impl(&dword_1830D4000, v12, v13, v17, buf, 0x16u);
    goto LABEL_38;
  }
  uint64_t v3 = *((void *)this + 5);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v37 = "operator()";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v11, &type, &v34)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136446210;
      size_t v37 = "operator()";
      BOOL v14 = "%{public}s called with null http_client";
      goto LABEL_72;
    }
    if (!v34)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136446210;
      size_t v37 = "operator()";
      BOOL v14 = "%{public}s called with null http_client, backtrace limit exceeded";
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (!v18) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136446210;
      size_t v37 = "operator()";
      BOOL v14 = "%{public}s called with null http_client, no backtrace";
      goto LABEL_72;
    }
    if (!v18) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446466;
    size_t v37 = "operator()";
    __int16 v38 = 2082;
    uint64_t v39 = backtrace_string;
    char v17 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
    goto LABEL_37;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v37 = "operator()";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v11, &type, &v34)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136446210;
      size_t v37 = "operator()";
      BOOL v14 = "%{public}s called with null other_protocol";
      goto LABEL_72;
    }
    if (!v34)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136446210;
      size_t v37 = "operator()";
      BOOL v14 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v19 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        size_t v37 = "operator()";
        __int16 v38 = 2082;
        uint64_t v39 = backtrace_string;
        char v17 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_37;
      }
LABEL_38:
      free(backtrace_string);
      goto LABEL_73;
    }
    if (!v19) {
      goto LABEL_73;
    }
    *(_DWORD *)buf = 136446210;
    size_t v37 = "operator()";
    BOOL v14 = "%{public}s called with null other_protocol, no backtrace";
LABEL_72:
    _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
LABEL_73:
    if (v11) {
      free(v11);
    }
    return 0;
  }
  if (*(nw_protocol **)(v3 + 48) != a2) {
    return 0;
  }
  id v5 = *(id *)(v3 + 576);
  id v6 = v5;
  if (!v5)
  {
    char v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v37 = "nw_http_client_metadata_mark_end";
    BOOL v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v21, &type, &v34)) {
      goto LABEL_87;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v34)
    {
      uint64_t v26 = (char *)__nw_create_backtrace_string();
      __int16 v22 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v22, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          size_t v37 = "nw_http_client_metadata_mark_end";
          __int16 v38 = 2082;
          uint64_t v39 = v26;
          _os_log_impl(&dword_1830D4000, v22, v27, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        goto LABEL_87;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        size_t v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_1830D4000, v22, v27, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_1830D4000, v22, v32, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_86:

    goto LABEL_87;
  }
  id v7 = v5;
  id v8 = *((id *)v7 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v8, nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    uint64_t v10 = *((void *)v7 + 4);
    if (v10) {
      __nw_http_client_metadata_mark_end_block_invoke((uint64_t)&__block_literal_global_77, v10);
    }
    goto LABEL_12;
  }
  __int16 v24 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  size_t v37 = "nw_http_client_metadata_mark_end";
  BOOL v21 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  if (__nwlog_fault(v21, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s metadata must be http_client", buf, 0xCu);
      }
    }
    else if (v34)
    {
      uint64_t v29 = (char *)__nw_create_backtrace_string();
      __int16 v22 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v22, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          size_t v37 = "nw_http_client_metadata_mark_end";
          __int16 v38 = 2082;
          uint64_t v39 = v29;
          _os_log_impl(&dword_1830D4000, v22, v30, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
        if (!v21) {
          goto LABEL_12;
        }
        goto LABEL_88;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        size_t v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_1830D4000, v22, v30, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_1830D4000, v22, v33, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_86;
  }
LABEL_87:
  if (v21) {
LABEL_88:
  }
    free(v21);
LABEL_12:

  return 1;
}

uint64_t nw_protocol_http_client_create::$_3::__invoke(nw_protocol_http_client_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "operator()";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v18 = "operator()";
      id v9 = "%{public}s called with null protocol";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      goto LABEL_45;
    }
    if (!v15)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "operator()";
        id v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "operator()";
        id v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (!v11) {
      goto LABEL_31;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v18 = "operator()";
    __int16 v19 = 2082;
    char v20 = backtrace_string;
    os_log_type_t v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_1830D4000, v7, v8, v12, buf, 0x16u);
    goto LABEL_31;
  }
  uint64_t v3 = *((void *)this + 5);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "operator()";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v18 = "operator()";
      id v9 = "%{public}s called with null http_client";
      goto LABEL_44;
    }
    if (!v15)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "operator()";
        id v9 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "operator()";
        id v9 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (!v13) {
      goto LABEL_31;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v18 = "operator()";
    __int16 v19 = 2082;
    char v20 = backtrace_string;
    os_log_type_t v12 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
    goto LABEL_30;
  }
  if (a2)
  {
    uint64_t v4 = 1;
    buf[0] = 1;
    nw_protocol_notify(a2, v3, 23);
    return v4;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "operator()";
  id v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v6, &type, &v15)) {
    goto LABEL_45;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "operator()";
        id v9 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v14 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "operator()";
        id v9 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v18 = "operator()";
      __int16 v19 = 2082;
      char v20 = backtrace_string;
      os_log_type_t v12 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_30;
    }
LABEL_31:
    free(backtrace_string);
    goto LABEL_45;
  }
  id v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "operator()";
    id v9 = "%{public}s called with null other_protocol";
    goto LABEL_44;
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t nw_protocol_http_client_create::$_2::__invoke(nw_protocol_http_client_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    if (*((void *)this + 5)) {
      return 0;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v15 = "operator()";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "operator()";
      id v7 = "%{public}s called with null http_client";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v15 = "operator()";
          __int16 v16 = 2082;
          char v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null http_client, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_32:
        if (!v4) {
          return 0;
        }
LABEL_33:
        free(v4);
        return 0;
      }
      if (!v11) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "operator()";
      id v7 = "%{public}s called with null http_client, no backtrace";
    }
    else
    {
      id v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "operator()";
      id v7 = "%{public}s called with null http_client, backtrace limit exceeded";
    }
LABEL_31:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "operator()";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_32;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_32;
    }
    *(_DWORD *)buf = 136446210;
    char v15 = "operator()";
    id v7 = "%{public}s called with null protocol";
    goto LABEL_31;
  }
  if (!v12)
  {
    id v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_32;
    }
    *(_DWORD *)buf = 136446210;
    char v15 = "operator()";
    id v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    goto LABEL_31;
  }
  os_log_type_t v8 = (char *)__nw_create_backtrace_string();
  id v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v9 = os_log_type_enabled(v5, type);
  if (!v8)
  {
    if (!v9) {
      goto LABEL_32;
    }
    *(_DWORD *)buf = 136446210;
    char v15 = "operator()";
    id v7 = "%{public}s called with null protocol, no backtrace";
    goto LABEL_31;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136446466;
    char v15 = "operator()";
    __int16 v16 = 2082;
    char v17 = v8;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v8);
  if (v4) {
    goto LABEL_33;
  }
  return 0;
}

void nw_protocol_http_client_report_transfer_size(nw_protocol *a1, nw_protocol_metadata *a2, unsigned int a3, int a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (!__nwlog_fault(v21, &type, &v58)) {
      goto LABEL_105;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
      __int16 v24 = "%{public}s called with null protocol";
    }
    else if (v58)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v26 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_105:
        if (!v21) {
          return;
        }
        goto LABEL_106;
      }
      if (!v26) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
      __int16 v24 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
      __int16 v24 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_104;
  }
  handle = (void **)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (!__nwlog_fault(v21, &type, &v58)) {
      goto LABEL_105;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v58)
      {
        __int16 v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
        __int16 v24 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_104;
      }
      os_log_type_t v27 = (char *)__nw_create_backtrace_string();
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v28 = os_log_type_enabled(v22, type);
      if (!v27)
      {
        if (!v28) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
        __int16 v24 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_104;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v27;
        uint64_t v29 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
LABEL_57:
        _os_log_impl(&dword_1830D4000, v22, v23, v29, buf, 0x16u);
      }
LABEL_58:
      free(v27);
      if (!v21) {
        return;
      }
LABEL_106:
      free(v21);
      return;
    }
    __int16 v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_105;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
    __int16 v24 = "%{public}s called with null http_client";
LABEL_104:
    _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
    goto LABEL_105;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (!__nwlog_fault(v21, &type, &v58)) {
      goto LABEL_105;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
      __int16 v24 = "%{public}s called with null size";
      goto LABEL_104;
    }
    if (!v58)
    {
      __int16 v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
      __int16 v24 = "%{public}s called with null size, backtrace limit exceeded";
      goto LABEL_104;
    }
    os_log_type_t v27 = (char *)__nw_create_backtrace_string();
    __int16 v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v37 = os_log_type_enabled(v22, type);
    if (!v27)
    {
      if (!v37) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
      __int16 v24 = "%{public}s called with null size, no backtrace";
      goto LABEL_104;
    }
    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_report_transfer_size";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v27;
      uint64_t v29 = "%{public}s called with null size, dumping backtrace:%{public}s";
      goto LABEL_57;
    }
    goto LABEL_58;
  }
  id v7 = nw_http_client_metadata_copy_current_transaction_metadata(handle[72]);
  os_log_type_t v8 = v7;
  uint64_t v9 = a3;
  if (!a4)
  {
    id v16 = v7;
    BOOL v11 = v16;
    if (v8)
    {
      id v17 = v16;
      id v18 = *((id *)v17 + 1);

      if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
      }
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v18, nw_protocol_copy_http_transaction_definition_definition);

      if (is_equal_unsafe)
      {
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __nw_http_transaction_metadata_increment_outbound_body_size_block_invoke;
        int v61 = &__block_descriptor_40_e9_B16__0_v8l;
        uint64_t v62 = v9;
        uint64_t v20 = *((void *)v17 + 4);
        if (v20) {
          __nw_http_transaction_metadata_increment_outbound_body_size_block_invoke((uint64_t)buf, v20);
        }
        goto LABEL_18;
      }
      uint64_t v40 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
      BOOL v31 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v58 = 0;
      if (__nwlog_fault(v31, &type, &v58))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v35 = __nwlog_obj();
          os_log_type_t v41 = type;
          if (os_log_type_enabled(v35, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
            _os_log_impl(&dword_1830D4000, v35, v41, "%{public}s metadata must be http_transaction", buf, 0xCu);
          }
        }
        else if (v58)
        {
          uint64_t v51 = (char *)__nw_create_backtrace_string();
          __int16 v35 = __nwlog_obj();
          os_log_type_t v52 = type;
          BOOL v53 = os_log_type_enabled(v35, type);
          if (v51)
          {
            if (v53)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v51;
              _os_log_impl(&dword_1830D4000, v35, v52, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v51);
            if (!v31) {
              goto LABEL_18;
            }
            goto LABEL_135;
          }
          if (v53)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
            _os_log_impl(&dword_1830D4000, v35, v52, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __int16 v35 = __nwlog_obj();
          os_log_type_t v57 = type;
          if (os_log_type_enabled(v35, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
            _os_log_impl(&dword_1830D4000, v35, v57, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_133;
      }
LABEL_134:
      if (!v31) {
        goto LABEL_18;
      }
      goto LABEL_135;
    }
    char v34 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
    BOOL v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (!__nwlog_fault(v31, &type, &v58)) {
      goto LABEL_134;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v35 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
        _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v58)
    {
      char v45 = (char *)__nw_create_backtrace_string();
      __int16 v35 = __nwlog_obj();
      os_log_type_t v46 = type;
      BOOL v47 = os_log_type_enabled(v35, type);
      if (v45)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v45;
          _os_log_impl(&dword_1830D4000, v35, v46, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v45);
        goto LABEL_134;
      }
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
        _os_log_impl(&dword_1830D4000, v35, v46, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v35 = __nwlog_obj();
      os_log_type_t v55 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
        _os_log_impl(&dword_1830D4000, v35, v55, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_133:

    goto LABEL_134;
  }
  id v10 = v7;
  BOOL v11 = v10;
  if (!v8)
  {
    os_log_type_t v30 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
    BOOL v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (!__nwlog_fault(v31, &type, &v58)) {
      goto LABEL_129;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
        _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v58)
    {
      int v42 = (char *)__nw_create_backtrace_string();
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v43 = type;
      BOOL v44 = os_log_type_enabled(v32, type);
      if (v42)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v42;
          _os_log_impl(&dword_1830D4000, v32, v43, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v42);
        goto LABEL_129;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
        _os_log_impl(&dword_1830D4000, v32, v43, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
        _os_log_impl(&dword_1830D4000, v32, v54, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_128:

    goto LABEL_129;
  }
  id v12 = v10;
  id v13 = *((id *)v12 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
  }
  BOOL v14 = nw_protocol_definition_is_equal_unsafe((uint64_t)v13, nw_protocol_copy_http_transaction_definition_definition);

  if (v14)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_http_transaction_metadata_increment_inbound_body_size_block_invoke;
    int v61 = &__block_descriptor_40_e9_B16__0_v8l;
    uint64_t v62 = v9;
    uint64_t v15 = *((void *)v12 + 4);
    if (v15) {
      __nw_http_transaction_metadata_increment_inbound_body_size_block_invoke((uint64_t)buf, v15);
    }
    goto LABEL_18;
  }
  __int16 v38 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
  BOOL v31 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v58 = 0;
  if (__nwlog_fault(v31, &type, &v58))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
        _os_log_impl(&dword_1830D4000, v32, v39, "%{public}s metadata must be http_transaction", buf, 0xCu);
      }
    }
    else if (v58)
    {
      uint64_t v48 = (char *)__nw_create_backtrace_string();
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v49 = type;
      BOOL v50 = os_log_type_enabled(v32, type);
      if (v48)
      {
        if (v50)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v48;
          _os_log_impl(&dword_1830D4000, v32, v49, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v48);
        if (!v31) {
          goto LABEL_18;
        }
        goto LABEL_135;
      }
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
        _os_log_impl(&dword_1830D4000, v32, v49, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v56 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
        _os_log_impl(&dword_1830D4000, v32, v56, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_128;
  }
LABEL_129:
  if (v31) {
LABEL_135:
  }
    free(v31);
LABEL_18:

  if (v8)
  {
    os_release(v8);
  }
}

void nw_protocol_http_client_create::$_1::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "operator()";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null protocol";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "operator()";
          __int16 v21 = 2082;
          __int16 v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_61:
        if (!v6) {
          return;
        }
        goto LABEL_62;
      }
      if (!v11) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_60;
  }
  if (!*(void *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "operator()";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17)) {
      goto LABEL_61;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_61;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "operator()";
        uint64_t v9 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_60;
      }
      id v12 = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!v12)
      {
        if (!v13) {
          goto LABEL_61;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "operator()";
        uint64_t v9 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_60;
      }
      if (!v13) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v20 = "operator()";
      __int16 v21 = 2082;
      __int16 v22 = v12;
      BOOL v14 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
      goto LABEL_41;
    }
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "operator()";
    uint64_t v9 = "%{public}s called with null http_client";
LABEL_60:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_61;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "operator()";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null metadata";
      goto LABEL_60;
    }
    if (!v17)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_60;
    }
    id v12 = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v15 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v15) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_60;
    }
    if (!v15) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v20 = "operator()";
    __int16 v21 = 2082;
    __int16 v22 = v12;
    BOOL v14 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_41:
    _os_log_impl(&dword_1830D4000, v7, v8, v14, buf, 0x16u);
    goto LABEL_42;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "operator()";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null completion";
      goto LABEL_60;
    }
    if (!v17)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_60;
    }
    id v12 = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v16 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v16) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "operator()";
      uint64_t v9 = "%{public}s called with null completion, no backtrace";
      goto LABEL_60;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v20 = "operator()";
      __int16 v21 = 2082;
      __int16 v22 = v12;
      BOOL v14 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_41;
    }
LABEL_42:
    free(v12);
    if (!v6) {
      return;
    }
LABEL_62:
    free(v6);
    return;
  }
  id v5 = *(void (**)(uint64_t, uint64_t))(a5 + 16);

  v5(a5, 1);
}

void nw_protocol_http_client_create::$_0::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "operator()";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "operator()";
      id v12 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v15 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v25 = "operator()";
          __int16 v26 = 2082;
          os_log_type_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_78:
        if (!v9) {
          return;
        }
        goto LABEL_79;
      }
      if (!v15) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "operator()";
      id v12 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "operator()";
      id v12 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_77;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "operator()";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_78;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        id v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "operator()";
        id v12 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_77;
      }
      BOOL v16 = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v17 = os_log_type_enabled(v10, type);
      if (!v16)
      {
        if (!v17) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "operator()";
        id v12 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_77;
      }
      if (!v17) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "operator()";
      __int16 v26 = 2082;
      os_log_type_t v27 = v16;
      id v18 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
    id v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_78;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "operator()";
    id v12 = "%{public}s called with null http_client";
LABEL_77:
    _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
    goto LABEL_78;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "operator()";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_78;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        id v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "operator()";
        id v12 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_77;
      }
      BOOL v16 = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v19 = os_log_type_enabled(v10, type);
      if (!v16)
      {
        if (!v19) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "operator()";
        id v12 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_77;
      }
      if (!v19) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "operator()";
      __int16 v26 = 2082;
      os_log_type_t v27 = v16;
      id v18 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
    id v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_78;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "operator()";
    id v12 = "%{public}s called with null other_protocol";
    goto LABEL_77;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "operator()";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "operator()";
      id v12 = "%{public}s called with null metadata";
      goto LABEL_77;
    }
    if (!v22)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "operator()";
      id v12 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_77;
    }
    BOOL v16 = (char *)__nw_create_backtrace_string();
    id v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v20 = os_log_type_enabled(v10, type);
    if (!v16)
    {
      if (!v20) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "operator()";
      id v12 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_77;
    }
    if (!v20) {
      goto LABEL_55;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v25 = "operator()";
    __int16 v26 = 2082;
    os_log_type_t v27 = v16;
    id v18 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_54:
    _os_log_impl(&dword_1830D4000, v10, v11, v18, buf, 0x16u);
    goto LABEL_55;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "operator()";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "operator()";
      id v12 = "%{public}s called with null completion";
      goto LABEL_77;
    }
    if (!v22)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "operator()";
      id v12 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_77;
    }
    BOOL v16 = (char *)__nw_create_backtrace_string();
    id v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v21 = os_log_type_enabled(v10, type);
    if (!v16)
    {
      if (!v21) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "operator()";
      id v12 = "%{public}s called with null completion, no backtrace";
      goto LABEL_77;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "operator()";
      __int16 v26 = 2082;
      os_log_type_t v27 = v16;
      id v18 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
LABEL_55:
    free(v16);
    if (!v9) {
      return;
    }
LABEL_79:
    free(v9);
    return;
  }
  id v8 = nw_http_metadata_copy_response(a3);
  if ((*(unsigned char *)(v5 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v13 = __nwlog_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        os_log_type_t v25 = "operator()";
        __int16 v26 = 2082;
        os_log_type_t v27 = (char *)(v5 + 114);
        __int16 v28 = 2080;
        uint64_t v29 = " ";
        __int16 v30 = 1024;
        BOOL status_code = nw_http_response_get_status_code(v8);
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived http response %d", buf, 0x26u);
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
  if (v8) {
    os_release(v8);
  }
}

void ___ZL37nw_protocol_http_client_get_callbacksv_block_invoke()
{
  nw_protocol_http_client_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  qword_1E8F6A278 = (uint64_t)nw_protocol_common_replace_input_handler;
  qword_1E8F6A2B8 = (uint64_t)nw_protocol_common_get_input_frames;
  qword_1E8F6A2C0 = (uint64_t)nw_protocol_common_get_output_frames;
  qword_1E8F6A2C8 = (uint64_t)nw_protocol_common_finalize_output_frames;
  qword_1E8F6A2D8 = (uint64_t)nw_protocol_common_get_parameters;
  qword_1E8F6A2E0 = (uint64_t)nw_protocol_common_get_path;
  qword_1E8F6A2F0 = (uint64_t)nw_protocol_common_get_remote_endpoint;
  qword_1E8F6A2E8 = (uint64_t)nw_protocol_common_get_local_endpoint;
  qword_1E8F6A330 = (uint64_t)nw_protocol_common_get_output_local_endpoint;
  qword_1E8F6A338 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1E8F6A280 = (uint64_t)nw_protocol_common_connect;
  qword_1E8F6A290 = (uint64_t)nw_protocol_common_connected;
  qword_1E8F6A288 = (uint64_t)nw_protocol_common_disconnect;
  qword_1E8F6A298 = (uint64_t)nw_protocol_common_disconnected;
  qword_1E8F6A2A8 = (uint64_t)nw_protocol_common_input_available;
  qword_1E8F6A2B0 = (uint64_t)nw_protocol_common_output_available;
  qword_1E8F6A320 = (uint64_t)nw_protocol_common_input_finished;
  qword_1E8F6A328 = (uint64_t)nw_protocol_common_output_finished;
  qword_1E8F6A370 = (uint64_t)nw_protocol_common_input_flush;
  qword_1E8F6A2A0 = (uint64_t)nw_protocol_common_error;
  qword_1E8F6A368 = (uint64_t)nw_protocol_common_reset;
  qword_1E8F6A360 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1E8F6A318 = (uint64_t)nw_protocol_common_supports_external_data;
  qword_1E8F6A340 = (uint64_t)nw_protocol_common_waiting_for_output;
  qword_1E8F6A2F8 = (uint64_t)nw_protocol_common_register_notification;
  qword_1E8F6A300 = (uint64_t)nw_protocol_common_unregister_notification;
  qword_1E8F6A308 = (uint64_t)nw_protocol_common_notify;
  qword_1E8F6A310 = (uint64_t)nw_protocol_common_updated_path;
  qword_1E8F6A2D0 = (uint64_t)nw_protocol_common_link_state;
  qword_1E8F6A348 = (uint64_t)nw_protocol_http_client_copy_info;
  qword_1E8F6A270 = (uint64_t)nw_protocol_http_client_remove_input_handler;
}

uint64_t nw_protocol_http_client_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = (nw_protocol *)a1->handle;
    if (handle)
    {
      if (handle->default_input_handler == a2)
      {
        v15[0] = MEMORY[0x1E4F143A8];
        v15[1] = 0x40000000;
        void v15[2] = ___ZL44nw_protocol_http_client_remove_input_handlerP11nw_protocolS0_b_block_invoke;
        v15[3] = &__block_descriptor_tmp_7_30158;
        v15[4] = handle;
        v13[0] = MEMORY[0x1E4F143A8];
        v13[1] = 0x40000000;
        v13[2] = ___ZL44nw_protocol_http_client_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
        v13[3] = &__block_descriptor_tmp_8_30159;
        char v14 = a3;
        void v13[4] = handle;
        return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v15, (uint64_t)v13);
      }
      else
      {
        if (a2->output_handler == handle) {
          a2->output_handler = 0;
        }
        return 1;
      }
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_http_client_remove_input_handler";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v5, &v17, &v16)) {
      goto LABEL_36;
    }
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_protocol_http_client_remove_input_handler";
        id v8 = "%{public}s called with null http_client";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v16)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_protocol_http_client_remove_input_handler";
        id v8 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v12 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_protocol_http_client_remove_input_handler";
        id v8 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v19 = "nw_protocol_http_client_remove_input_handler";
      __int16 v20 = 2082;
      BOOL v21 = backtrace_string;
      os_log_type_t v11 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "nw_protocol_http_client_remove_input_handler";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v5, &v17, &v16)) {
    goto LABEL_36;
  }
  if (v17 != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_protocol_http_client_remove_input_handler";
        id v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v10 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_protocol_http_client_remove_input_handler";
        id v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v19 = "nw_protocol_http_client_remove_input_handler";
      __int16 v20 = 2082;
      BOOL v21 = backtrace_string;
      os_log_type_t v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v6, v7, v11, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    goto LABEL_36;
  }
  os_log_type_t v6 = __nwlog_obj();
  os_log_type_t v7 = v17;
  if (os_log_type_enabled(v6, v17))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_http_client_remove_input_handler";
    id v8 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
  }
LABEL_36:
  if (v5) {
    free(v5);
  }
  return 0;
}

void ___ZL44nw_protocol_http_client_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136446210;
      BOOL v10 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v9, 0xCu);
    }
  }
  nw_protocol_plugin_metadata_reset((uint64_t *)(v2 + 200));
  *(void *)(v2 + 328) = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(v3 + 464);
  if (v4)
  {
    uint64_t v5 = *(const void **)(v3 + 456);
    if (v5)
    {
      _Block_release(v5);
      char v4 = *(unsigned char *)(v3 + 464);
    }
  }
  *(void *)(v3 + 456) = 0;
  *(unsigned char *)(v3 + 464) = v4 | 1;
  char v6 = *(unsigned char *)(v3 + 512);
  if (v6)
  {
    os_log_type_t v7 = *(const void **)(v3 + 504);
    if (v7)
    {
      _Block_release(v7);
      char v6 = *(unsigned char *)(v3 + 512);
    }
  }
  *(void *)(v3 + 504) = 0;
  *(unsigned char *)(v3 + 512) = v6 | 1;
}

void ___ZL44nw_protocol_http_client_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v1 = *(void *)(a1 + 32);
    if ((*(unsigned char *)(v1 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        id v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          int v9 = 136446722;
          BOOL v10 = "nw_http_client_destroy";
          __int16 v11 = 2082;
          uint64_t v12 = v1 + 114;
          __int16 v13 = 2080;
          char v14 = " ";
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v9, 0x20u);
        }
      }
    }
    if (*(_DWORD *)(v1 + 552))
    {
      *(unsigned char *)(v1 + 556) |= 0x40u;
      if ((*(unsigned char *)(v1 + 198) & 1) == 0 && gLogDatapath)
      {
        uint64_t v2 = __nwlog_obj();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          int v9 = 136446722;
          BOOL v10 = "nw_http_client_destroy";
          __int16 v11 = 2082;
          uint64_t v12 = v1 + 114;
          __int16 v13 = 2080;
          char v14 = " ";
          _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sdeferring destroy because the request is being reissued", (uint8_t *)&v9, 0x20u);
        }
      }
    }
    else
    {
      if (*(unsigned char *)(v1 + 584))
      {
        uint64_t v3 = *(void **)(v1 + 576);
        if (v3) {
          os_release(v3);
        }
      }
      *(void *)(v1 + 576) = 0;
      if (*(unsigned char *)(v1 + 568))
      {
        char v4 = *(void **)(v1 + 560);
        if (v4) {
          os_release(v4);
        }
      }
      *(void *)(v1 + 560) = 0;
      nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(v1 + 344));
      if (*(unsigned char *)(v1 + 288))
      {
        uint64_t v5 = *(void **)(v1 + 280);
        if (v5) {
          os_release(v5);
        }
      }
      *(void *)(v1 + 280) = 0;
      if (*(unsigned char *)(v1 + 272))
      {
        char v6 = *(void **)(v1 + 264);
        if (v6) {
          os_release(v6);
        }
      }
      *(void *)(v1 + 264) = 0;
      if (*(unsigned char *)(v1 + 256))
      {
        os_log_type_t v7 = *(void **)(v1 + 248);
        if (v7) {
          os_release(v7);
        }
      }
      free((void *)v1);
    }
  }
}

uint64_t nw_protocol_http_client_copy_info(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_protocol_http_client_copy_info";
    char v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_protocol_http_client_copy_info";
        int v9 = "%{public}s called with null protocol";
LABEL_37:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
LABEL_38:
      if (v6) {
        free(v6);
      }
      return 0;
    }
    if (!v14)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_protocol_http_client_copy_info";
        int v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_protocol_http_client_copy_info";
        int v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v17 = "nw_protocol_http_client_copy_info";
      __int16 v18 = 2082;
      BOOL v19 = backtrace_string;
      uint64_t v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_27:
      _os_log_impl(&dword_1830D4000, v7, v8, v12, buf, 0x16u);
    }
LABEL_28:
    free(backtrace_string);
    goto LABEL_38;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_protocol_http_client_copy_info";
    char v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_protocol_http_client_copy_info";
        int v9 = "%{public}s called with null http_client";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    if (!v14)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_protocol_http_client_copy_info";
        int v9 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_protocol_http_client_copy_info";
        int v9 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v17 = "nw_protocol_http_client_copy_info";
      __int16 v18 = 2082;
      BOOL v19 = backtrace_string;
      uint64_t v12 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2 == 255)
  {
    uint64_t v4 = nw_protocol_copy_info(v3, 255);
    if (!v4) {
      uint64_t v4 = nw_array_create();
    }
    nw_array_append(v4, *(void **)(v2 + 576));
    return v4;
  }

  return nw_protocol_copy_info(v3, a2);
}

double __nw_protocol_http_client_identifier_block_invoke()
{
  strcpy((char *)&nw_protocol_http_client_identifier::protocol_identifier, "http_client");
  *(void *)&double result = 0x200000005;
  qword_1E8F6A208 = 0x200000005;
  return result;
}

void nw_tcp_respond_reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  unsigned int v65 = 0;
  uint64_t v9 = nw_frame_unclaimed_bytes(a1, &v65);
  if (v65 <= 0x13)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    id v67 = "nw_tcp_respond_reset";
    __int16 v68 = 1024;
    *(_DWORD *)id v69 = v65;
    *(_WORD *)&v69[4] = 2048;
    *(void *)&v69[6] = 20;
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v64 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v10, type, &v64)) {
      goto LABEL_39;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = gLogObj;
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446722;
      id v67 = "nw_tcp_respond_reset";
      __int16 v68 = 1024;
      *(_DWORD *)id v69 = v65;
      *(_WORD *)&v69[4] = 2048;
      *(void *)&v69[6] = 20;
      BOOL v13 = "%{public}s Frame is invalid, only has %u bytes, required: %zu";
LABEL_37:
      os_log_type_t v36 = v11;
      os_log_type_t v37 = v12;
      uint32_t v38 = 28;
LABEL_38:
      _os_log_impl(&dword_1830D4000, v36, v37, v13, buf, v38);
      goto LABEL_39;
    }
    if (v64 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = gLogObj;
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446722;
      id v67 = "nw_tcp_respond_reset";
      __int16 v68 = 1024;
      *(_DWORD *)id v69 = v65;
      *(_WORD *)&v69[4] = 2048;
      *(void *)&v69[6] = 20;
      BOOL v13 = "%{public}s Frame is invalid, only has %u bytes, required: %zu, backtrace limit exceeded";
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v11 = gLogObj;
    os_log_type_t v12 = type[0];
    BOOL v22 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446722;
      id v67 = "nw_tcp_respond_reset";
      __int16 v68 = 1024;
      *(_DWORD *)id v69 = v65;
      *(_WORD *)&v69[4] = 2048;
      *(void *)&v69[6] = 20;
      BOOL v13 = "%{public}s Frame is invalid, only has %u bytes, required: %zu, no backtrace";
      goto LABEL_37;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446978;
      id v67 = "nw_tcp_respond_reset";
      __int16 v68 = 1024;
      *(_DWORD *)id v69 = v65;
      *(_WORD *)&v69[4] = 2048;
      *(void *)&v69[6] = 20;
      __int16 v70 = 2082;
      os_log_type_t v71 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s Frame is invalid, only has %u bytes, required: %zu, dumping backtrace:%{public}s", buf, 0x26u);
    }
    free(backtrace_string);
LABEL_39:
    if (!v10) {
      return;
    }
    goto LABEL_40;
  }
  uint64_t v14 = v9;
  if ((*(unsigned char *)(v9 + 13) & 4) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v17 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446210;
    id v67 = "nw_tcp_respond_reset";
    __int16 v18 = "%{public}s Attempting to send a RST in reply to a RST";
    BOOL v19 = v17;
    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    goto LABEL_34;
  }
  uint64_t v15 = 20;
  unsigned int v65 = 20;
  int v16 = *(unsigned __int8 *)(a5 + 1);
  if (v16 == 30)
  {
    uint64_t v15 = 60;
  }
  else
  {
    if (v16 != 2) {
      goto LABEL_21;
    }
    uint64_t v15 = 40;
  }
  unsigned int v65 = v15;
LABEL_21:
  *(void *)os_log_type_t type = 0;
  uint64_t v63 = type;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, os_log_type_t *))(*(void *)(a2 + 24) + 88))(a2, a3, v15, v15, 1, type) != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v35 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)buf = 136446210;
    id v67 = "nw_tcp_respond_reset";
    __int16 v18 = "%{public}s Failed to get output frame to send RST";
    BOOL v19 = v35;
    os_log_type_t v20 = OS_LOG_TYPE_INFO;
LABEL_34:
    _os_log_impl(&dword_1830D4000, v19, v20, v18, buf, 0xCu);
    return;
  }
  uint64_t v23 = *(void *)type;
  if (*(void *)type)
  {
    int v24 = *(unsigned __int8 *)(a5 + 1);
    if (v24 != 30)
    {
      if (v24 != 2)
      {
        __int16 v33 = 0;
LABEL_55:
        if (*(void *)(v23 + 112)
          && ((*(_WORD *)(v23 + 204) & 0x100) == 0
           || !g_channel_check_validity
           || g_channel_check_validity(v23, *(void *)(v23 + 88))))
        {
          int v45 = *(_DWORD *)(v23 + 52);
          if (v45)
          {
            uint64_t v46 = *(void *)(v23 + 112);
            if (v46)
            {
              uint64_t v47 = *(unsigned int *)(v23 + 56);
              if ((v45 - (v47 + *(_DWORD *)(v23 + 60))) > 0x13)
              {
                uint64_t v48 = v46 + v47;
                *(_DWORD *)(v48 + 16) = 0;
                *(void *)uint64_t v48 = 0;
                *(void *)(v48 + 8) = 0;
                *(_WORD *)uint64_t v48 = *(_WORD *)(v14 + 2);
                *(_WORD *)(v48 + 2) = *(_WORD *)v14;
                *(unsigned char *)(v48 + 13) = 4;
                *(unsigned char *)(v48 + 12) = 80;
                *(_WORD *)(v48 + 16) = v33;
                if ((*(unsigned char *)(v14 + 13) & 0x10) != 0)
                {
                  *(_DWORD *)(v48 + 4) = *(_DWORD *)(v14 + 8);
                }
                else
                {
                  unsigned int v49 = bswap32(bswap32(*(_DWORD *)(v14 + 4)) + 1);
                  if ((*(unsigned char *)(v14 + 13) & 2) != 0) {
                    unsigned int v50 = v49;
                  }
                  else {
                    unsigned int v50 = *(_DWORD *)(v14 + 4);
                  }
                  *(_DWORD *)(v48 + 8) = v50;
                  *(unsigned char *)(v48 + 13) = 20;
                }
                unsigned int v54 = 20;
                __int16 v55 = MEMORY[0x185317EE0](v48, 20, 0);
                if (v55 == -1) {
                  __int16 v57 = -1;
                }
                else {
                  __int16 v57 = ~v55;
                }
                *(_WORD *)(v48 + 16) = v57;
                nw_frame_claim(v23, v56, 20, 0);
                nw_frame_collapse(v23);
                nw_frame_unclaim(v23, v58, 0x14u, 0);
                int v60 = *(unsigned __int8 *)(a5 + 1);
                if (v60 != 2)
                {
                  if (v60 != 30)
                  {
LABEL_96:
                    (*(void (**)(uint64_t, os_log_type_t *))(*(void *)(a2 + 24) + 96))(a2, type);
                    return;
                  }
                  unsigned int v54 = 40;
                }
                nw_frame_unclaim(v23, v59, v54, 0);
                goto LABEL_96;
              }
            }
          }
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v51 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          id v67 = "nw_tcp_respond_reset";
          __int16 v68 = 1024;
          *(_DWORD *)id v69 = v65;
          *(_WORD *)&v69[4] = 2048;
          *(void *)&v69[6] = 20;
LABEL_81:
          _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_ERROR, "%{public}s nw_frame_unclaimed_bytes reports %u, need at least %zu", buf, 0x1Cu);
          goto LABEL_82;
        }
        goto LABEL_82;
      }
      if (*(void *)(*(void *)type + 112)
        && ((*(_WORD *)(*(void *)type + 204) & 0x100) == 0
         || !g_channel_check_validity
         || g_channel_check_validity(*(void *)type, *(void *)(*(void *)type + 88)))
        && (int v25 = *(_DWORD *)(v23 + 52)) != 0)
      {
        uint64_t v26 = *(unsigned int *)(v23 + 56);
        unsigned int v27 = v25 - (v26 + *(_DWORD *)(v23 + 60));
        if (v27 > 0x13)
        {
          __int16 v28 = (unsigned __int16 *)(*(void *)(v23 + 112) + v26);
          *(void *)__int16 v28 = 0;
          *((void *)v28 + 1) = 0;
          *((_DWORD *)v28 + 4) = 0;
          *(unsigned char *)__int16 v28 = 69;
          *(_DWORD *)(v28 + 3) = 117375040;
          unsigned int v29 = *(_DWORD *)(a4 + 4);
          *((_DWORD *)v28 + 3) = v29;
          unsigned int v30 = *(_DWORD *)(a5 + 4);
          *((_DWORD *)v28 + 4) = v30;
          v28[1] = 10240;
          unsigned int v31 = *v28 + (unsigned __int16)v29 + HIWORD(v29) + (unsigned __int16)v30 + HIWORD(v30) + 12095;
          void v28[5] = ~(HIWORD(v31) + v31 + ((HIWORD(v31) + (unsigned __int16)v31) >> 16));
          __int16 v33 = in_pseudo(v30, v29, 0x1A000000u);
          int v34 = 20;
LABEL_53:
          nw_frame_claim(v23, v32, v34, 0);
          goto LABEL_55;
        }
      }
      else
      {
        unsigned int v27 = 0;
      }
      uint64_t v51 = __nwlog_obj();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        id v67 = "nw_tcp_respond_reset";
        __int16 v68 = 1024;
        *(_DWORD *)id v69 = v27;
        *(_WORD *)&v69[4] = 2048;
        *(void *)&v69[6] = 20;
        goto LABEL_81;
      }
LABEL_82:
      nw_frame_finalize(v23);
      return;
    }
    if (*(void *)(*(void *)type + 112)
      && ((*(_WORD *)(*(void *)type + 204) & 0x100) == 0
       || !g_channel_check_validity
       || g_channel_check_validity(*(void *)type, *(void *)(*(void *)type + 88)))
      && (int v41 = *(_DWORD *)(v23 + 52)) != 0)
    {
      uint64_t v42 = *(unsigned int *)(v23 + 56);
      unsigned int v43 = v41 - (v42 + *(_DWORD *)(v23 + 60));
      if (v43 > 0x27)
      {
        uint64_t v44 = *(void *)(v23 + 112) + v42;
        *(void *)(v44 + 32) = 0;
        *(_OWORD *)uint64_t v44 = 0u;
        *(_OWORD *)(v44 + 16) = 0u;
        *(_DWORD *)(v44 + 4) = -16378880;
        *(_OWORD *)(v44 + 8) = *(_OWORD *)(a4 + 8);
        *(_OWORD *)(v44 + 24) = *(_OWORD *)(a5 + 8);
        *(unsigned char *)uint64_t v44 = 96;
        __int16 v33 = in6_pseudo((unsigned __int16 *)(a4 + 8), (unsigned __int16 *)(a5 + 8), 436207616);
        int v34 = 40;
        goto LABEL_53;
      }
    }
    else
    {
      unsigned int v43 = 0;
    }
    uint64_t v51 = __nwlog_obj();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      id v67 = "nw_tcp_respond_reset";
      __int16 v68 = 1024;
      *(_DWORD *)id v69 = v43;
      *(_WORD *)&v69[4] = 2048;
      *(void *)&v69[6] = 40;
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  id v67 = "nw_tcp_respond_reset";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v64 = OS_LOG_TYPE_ERROR;
  char v61 = 0;
  if (!__nwlog_fault(v10, &v64, &v61)) {
    goto LABEL_39;
  }
  if (v64 == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v39 = gLogObj;
    os_log_type_t v40 = v64;
    if (!os_log_type_enabled((os_log_t)gLogObj, v64)) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    id v67 = "nw_tcp_respond_reset";
    BOOL v13 = "%{public}s nw_frame_array_first failed";
    goto LABEL_87;
  }
  if (!v61)
  {
    os_log_type_t v39 = __nwlog_obj();
    os_log_type_t v40 = v64;
    if (!os_log_type_enabled(v39, v64)) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    id v67 = "nw_tcp_respond_reset";
    BOOL v13 = "%{public}s nw_frame_array_first failed, backtrace limit exceeded";
    goto LABEL_87;
  }
  os_log_type_t v52 = (char *)__nw_create_backtrace_string();
  os_log_type_t v39 = __nwlog_obj();
  os_log_type_t v40 = v64;
  BOOL v53 = os_log_type_enabled(v39, v64);
  if (!v52)
  {
    if (!v53) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    id v67 = "nw_tcp_respond_reset";
    BOOL v13 = "%{public}s nw_frame_array_first failed, no backtrace";
LABEL_87:
    os_log_type_t v36 = v39;
    os_log_type_t v37 = v40;
    uint32_t v38 = 12;
    goto LABEL_38;
  }
  if (v53)
  {
    *(_DWORD *)buf = 136446466;
    id v67 = "nw_tcp_respond_reset";
    __int16 v68 = 2082;
    *(void *)id v69 = v52;
    _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s nw_frame_array_first failed, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v52);
  if (v10) {
LABEL_40:
  }
    free(v10);
}

BOOL nw_quic_parse_dispatch(NSObject *a1, char a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __nw_quic_parse_dispatch_block_invoke;
  v4[3] = &__block_descriptor_tmp_30275;
  char v5 = a2;
  v4[4] = a3;
  return dispatch_data_apply(a1, v4);
}

uint64_t __nw_quic_parse_dispatch_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, unint64_t a5)
{
  return nw_quic_parse_internal(a4, a5, *(unsigned __int8 *)(a1 + 40), *(dispatch_data_t **)(a1 + 32));
}

uint64_t nw_quic_parse_internal(const unsigned __int8 *a1, unint64_t a2, size_t size, dispatch_data_t *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!size)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_quic_parse_internal";
    char v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v5, &type, &v11)) {
      goto LABEL_19;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_quic_parse_internal";
      os_log_type_t v8 = "%{public}s called with null connection_id_length";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_quic_parse_internal";
          __int16 v15 = 2082;
          int v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null connection_id_length, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_19;
      }
      if (!v10)
      {
LABEL_19:
        if (v5) {
          free(v5);
        }
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_quic_parse_internal";
      os_log_type_t v8 = "%{public}s called with null connection_id_length, no backtrace";
    }
    else
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_quic_parse_internal";
      os_log_type_t v8 = "%{public}s called with null connection_id_length, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_19;
  }
  if ((unint64_t)size + 21 <= a2 && (*(char *)a1 & 0x80000000) == 0)
  {
    *a4 = dispatch_data_create(a1 + 1, size, 0, 0);
    return 1;
  }
  return 0;
}

void sub_183889EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL48nw_endpoint_resolver_update_path_resolver_lockedP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, unsigned __int8 *uu)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  memset(out, 0, 37);
  uuid_unparse(uu, out);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 80);
  if (!v4 || (char v5 = nw_dictionary_copy_value(v4, (uint64_t)out)) == 0)
  {
    id v6 = nw_endpoint_handler_copy_association(*(void **)(a1 + 48), 0);
    flow = nw_association_create_flow((uint64_t)v6, 0, 0, 0, 1, uu, 0);
    nw_dictionary_set_value(*(void *)(a1 + 40), out, flow);
    os_log_type_t v8 = *(void **)(a1 + 48);
    if (flow)
    {
      int minimize_logging = nw_endpoint_handler_get_minimize_logging(v8);
      char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48));
      if (minimize_logging)
      {
        if (logging_disabled) {
          goto LABEL_17;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        char v11 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          unsigned int v27 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          nw_endpoint_t v28 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          logging_description = nw_endpoint_get_logging_description(v28);
          unsigned int v30 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          unsigned int v31 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          id v32 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          int v33 = 136448002;
          int v34 = "nw_endpoint_resolver_update_path_resolver_locked_block_invoke";
          __int16 v35 = 2082;
          os_log_type_t v36 = id_string;
          __int16 v37 = 2082;
          uint32_t v38 = v27;
          __int16 v39 = 2082;
          os_log_type_t v40 = logging_description;
          __int16 v41 = 2082;
          uint64_t v42 = v30;
          __int16 v43 = 2082;
          uint64_t v44 = v31;
          __int16 v45 = 2114;
          id v46 = v32;
          __int16 v47 = 2080;
          uint64_t v48 = out;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Registered resolver flow with agent %s", (uint8_t *)&v33, 0x52u);
        }
        goto LABEL_16;
      }
      if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        char v11 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v12 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          BOOL v13 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          nw_endpoint_t v14 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          __int16 v15 = nw_endpoint_get_logging_description(v14);
          int v16 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          uint64_t v17 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          id v18 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          int v33 = 136448002;
          int v34 = "nw_endpoint_resolver_update_path_resolver_locked_block_invoke";
          __int16 v35 = 2082;
          os_log_type_t v36 = v12;
          __int16 v37 = 2082;
          uint32_t v38 = v13;
          __int16 v39 = 2082;
          os_log_type_t v40 = v15;
          __int16 v41 = 2082;
          uint64_t v42 = v16;
          __int16 v43 = 2082;
          uint64_t v44 = v17;
          __int16 v45 = 2114;
          id v46 = v18;
          __int16 v47 = 2080;
          uint64_t v48 = out;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Registered resolver flow with agent %s", (uint8_t *)&v33, 0x52u);
        }
LABEL_16:
      }
    }
    else if ((nw_endpoint_handler_get_logging_disabled(v8) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        BOOL v19 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
        os_log_type_t v20 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
        nw_endpoint_t v21 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
        BOOL v22 = nw_endpoint_get_logging_description(v21);
        uint64_t v23 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
        int v24 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
        id v25 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
        int v33 = 136448002;
        int v34 = "nw_endpoint_resolver_update_path_resolver_locked_block_invoke";
        __int16 v35 = 2082;
        os_log_type_t v36 = v19;
        __int16 v37 = 2082;
        uint32_t v38 = v20;
        __int16 v39 = 2082;
        os_log_type_t v40 = v22;
        __int16 v41 = 2082;
        uint64_t v42 = v23;
        __int16 v43 = 2082;
        uint64_t v44 = v24;
        __int16 v45 = 2114;
        id v46 = v25;
        __int16 v47 = 2080;
        uint64_t v48 = out;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to register resolver flow with agent %s", (uint8_t *)&v33, 0x52u);
      }
      goto LABEL_16;
    }
LABEL_17:

    goto LABEL_18;
  }
  id v6 = v5;
  nw_dictionary_set_value(*(void *)(a1 + 40), out, v5);
LABEL_18:
}

void sub_18388A368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30367(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30368(uint64_t a1)
{
}

BOOL ___ZL48nw_endpoint_resolver_update_path_resolver_lockedP30NWConcrete_nw_endpoint_handler_block_invoke_100(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = nw_path_flow_copy_error(v4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  os_log_type_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  BOOL v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) == 0;
  return v8;
}

uint64_t ___ZL27nw_endpoint_resolver_updateP30NWConcrete_nw_endpoint_handlerPU25objcproto14OS_nw_resolver8NSObject20nw_resolver_status_t_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  nw_endpoint_t v4 = nw_endpoint_handler_copy_endpoint(a3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v8 = *(char **)(v5 + 24);
  os_log_type_t v7 = (char **)(v5 + 24);
  uint64_t v6 = v8;
  int v9 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  logging_description = nw_endpoint_get_logging_description(v4);
  char v11 = "";
  if (!v9) {
    char v11 = ",";
  }
  asprintf(v7, "%s%s%s", v6, v11, logging_description);
  if (v6) {
    free(v6);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;

  return 1;
}

void sub_18388A56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_resolver_check_desperate_ivan(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = nw_endpoint_handler_copy_resolver(v1);
  uint64_t v3 = v2;
  if ((*((unsigned char *)v2 + 24) & 4) == 0)
  {
    if (*((void *)v2 + 4))
    {
      *((unsigned char *)v2 + 24) |= 4u;
      goto LABEL_8;
    }
    id v4 = nw_endpoint_handler_copy_parameters(v1);
    if (nw_parameters_get_required_address_family(v4)
      || nw_parameters_get_desperate_ivan(v4))
    {
      *((unsigned char *)v3 + 24) |= 4u;
LABEL_7:

      goto LABEL_8;
    }
    id v41 = nw_endpoint_handler_copy_current_path(v1);
    if ((nw_path_is_eligible_for_CrazyIvan46(v41) & 1) == 0)
    {
LABEL_42:

      goto LABEL_7;
    }
    nw_endpoint_t v5 = nw_endpoint_handler_copy_endpoint(v1);
    if (nw_endpoint_get_type(v5) != nw_endpoint_type_host)
    {
LABEL_41:

      goto LABEL_42;
    }
    *((unsigned char *)v3 + 24) |= 0xCu;
    int minimize_logging = nw_endpoint_handler_get_minimize_logging(v1);
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(v1);
    if (minimize_logging)
    {
      if (logging_disabled)
      {
LABEL_18:
        uint64_t v16 = *((void *)v3 + 9);
        if (v16)
        {
          nw_queue_cancel_source(v16);
          *((void *)v3 + 9) = 0;
        }
        id v17 = nw_endpoint_handler_copy_context(v1);
        v44[0] = MEMORY[0x1E4F143A8];
        v44[1] = 3221225472;
        void v44[2] = ___ZL41nw_endpoint_resolver_check_desperate_ivanP30NWConcrete_nw_endpoint_handler_block_invoke;
        v44[3] = &unk_1E524BAA8;
        __int16 v45 = v1;
        *((void *)v3 + 9) = nw_queue_context_create_source(v17, 2, 3, 0, v44, 0);

        uint64_t v18 = *((void *)v3 + 9);
        if (v18)
        {
          dispatch_time_t v19 = dispatch_time(0x8000000000000000, 2000000000);
          nw_queue_set_timer_values(v18, v19, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
          nw_queue_activate_source(*((void *)v3 + 9));
LABEL_40:

          goto LABEL_41;
        }
        os_log_type_t v20 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_endpoint_resolver_check_desperate_ivan";
        nw_endpoint_t v21 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v42 = 0;
        if (__nwlog_fault(v21, &type, &v42))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            BOOL v22 = __nwlog_obj();
            os_log_type_t v23 = type;
            if (os_log_type_enabled(v22, type))
            {
              *(_DWORD *)buf = 136446210;
              __int16 v47 = "nw_endpoint_resolver_check_desperate_ivan";
              _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s nw_queue_context_create_source(timer) failed", buf, 0xCu);
            }
          }
          else
          {
            if (v42)
            {
              int v24 = v5;
              backtrace_string = (char *)__nw_create_backtrace_string();
              uint64_t v26 = __nwlog_obj();
              os_log_type_t v27 = type;
              BOOL v28 = os_log_type_enabled(v26, type);
              if (backtrace_string)
              {
                if (v28)
                {
                  *(_DWORD *)buf = 136446466;
                  __int16 v47 = "nw_endpoint_resolver_check_desperate_ivan";
                  __int16 v48 = 2082;
                  unsigned int v49 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                nw_endpoint_t v5 = v24;
                free(backtrace_string);
              }
              else
              {
                if (v28)
                {
                  *(_DWORD *)buf = 136446210;
                  __int16 v47 = "nw_endpoint_resolver_check_desperate_ivan";
                  _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s nw_queue_context_create_source(timer) failed, no backtrace", buf, 0xCu);
                }

                nw_endpoint_t v5 = v24;
              }
              goto LABEL_38;
            }
            BOOL v22 = __nwlog_obj();
            os_log_type_t v29 = type;
            if (os_log_type_enabled(v22, type))
            {
              *(_DWORD *)buf = 136446210;
              __int16 v47 = "nw_endpoint_resolver_check_desperate_ivan";
              _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
LABEL_38:
        if (v21) {
          free(v21);
        }
        goto LABEL_40;
      }
      os_log_type_t v40 = v5;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      unsigned int v30 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        loga = nw_endpoint_handler_get_id_string(v1);
        os_log_type_t v36 = nw_endpoint_handler_dry_run_string(v1);
        nw_endpoint_t v31 = nw_endpoint_handler_copy_endpoint(v1);
        logging_description = nw_endpoint_get_logging_description(v31);
        int v33 = nw_endpoint_handler_state_string(v1);
        int v34 = nw_endpoint_handler_mode_string(v1);
        id v35 = nw_endpoint_handler_copy_current_path(v1);
        *(_DWORD *)buf = 136447746;
        __int16 v47 = "nw_endpoint_resolver_check_desperate_ivan";
        __int16 v48 = 2082;
        unsigned int v49 = (void *)loga;
        __int16 v50 = 2082;
        uint64_t v51 = v36;
        __int16 v52 = 2082;
        BOOL v53 = logging_description;
        __int16 v54 = 2082;
        __int16 v55 = v33;
        __int16 v56 = 2082;
        __int16 v57 = v34;
        __int16 v58 = 2114;
        id v59 = v35;
        BOOL v8 = v30;
        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connectivity seems slow, starting DesperateIvan timer", buf, 0x48u);

        nw_endpoint_t v5 = v40;
      }
      else
      {
        BOOL v8 = v30;
      }
    }
    else
    {
      if (logging_disabled) {
        goto LABEL_18;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        __int16 v39 = v5;
        id_string = nw_endpoint_handler_get_id_string(v1);
        BOOL v10 = nw_endpoint_handler_dry_run_string(v1);
        os_log_t log = v8;
        nw_endpoint_t v11 = nw_endpoint_handler_copy_endpoint(v1);
        os_log_type_t v12 = nw_endpoint_get_logging_description(v11);
        BOOL v13 = nw_endpoint_handler_state_string(v1);
        nw_endpoint_t v14 = nw_endpoint_handler_mode_string(v1);
        id v15 = nw_endpoint_handler_copy_current_path(v1);
        *(_DWORD *)buf = 136447746;
        __int16 v47 = "nw_endpoint_resolver_check_desperate_ivan";
        __int16 v48 = 2082;
        unsigned int v49 = (void *)id_string;
        __int16 v50 = 2082;
        uint64_t v51 = v10;
        __int16 v52 = 2082;
        BOOL v53 = v12;
        __int16 v54 = 2082;
        __int16 v55 = v13;
        __int16 v56 = 2082;
        __int16 v57 = v14;
        __int16 v58 = 2114;
        id v59 = v15;
        BOOL v8 = log;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connectivity seems slow, starting DesperateIvan timer", buf, 0x48u);

        nw_endpoint_t v5 = v39;
      }
    }

    goto LABEL_18;
  }
LABEL_8:
}

void sub_18388AC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_resolver_setup_trigger_agent_timer(NWConcrete_nw_endpoint_handler *a1, char a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = (uint64_t *)nw_endpoint_handler_copy_resolver(v3);
  uint64_t v5 = v4[8];
  if (v5)
  {
    nw_queue_cancel_source(v5);
    v4[8] = 0;
  }
  id v6 = nw_endpoint_handler_copy_context(v3);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = ___ZL46nw_endpoint_resolver_setup_trigger_agent_timerP30NWConcrete_nw_endpoint_handlerb_block_invoke;
  v21[3] = &unk_1E5248D20;
  os_log_type_t v7 = v3;
  BOOL v22 = v7;
  char v23 = a2;
  v4[8] = nw_queue_context_create_source(v6, 2, 3, 0, v21, 0);

  if (v4[8])
  {
    int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_trigger_agent_delay, 2000);
    uint64_t v9 = v4[8];
    dispatch_time_t v10 = dispatch_time(0x8000000000000000, 1000000 * int64_with_default);
    nw_queue_set_timer_values(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    nw_queue_activate_source(v4[8]);
    goto LABEL_12;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  id v25 = "nw_endpoint_resolver_setup_trigger_agent_timer";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v12, &type, &v19)) {
    goto LABEL_10;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v13 = (id)gLogObj;
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_endpoint_resolver_setup_trigger_agent_timer";
      _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s nw_queue_context_create_source(trigger_agent_timer) failed", buf, 0xCu);
    }
LABEL_9:

LABEL_10:
    if (!v12) {
      goto LABEL_12;
    }
LABEL_11:
    free(v12);
    goto LABEL_12;
  }
  if (!v19)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v13 = (id)gLogObj;
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_endpoint_resolver_setup_trigger_agent_timer";
      _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s nw_queue_context_create_source(trigger_agent_timer) failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_9;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v13 = (id)gLogObj;
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v13, type);
  if (!backtrace_string)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_endpoint_resolver_setup_trigger_agent_timer";
      _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s nw_queue_context_create_source(trigger_agent_timer) failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_9;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    id v25 = "nw_endpoint_resolver_setup_trigger_agent_timer";
    __int16 v26 = 2082;
    os_log_type_t v27 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s nw_queue_context_create_source(trigger_agent_timer) failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v12) {
    goto LABEL_11;
  }
LABEL_12:
}

void sub_18388B108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_endpoint_resolver_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1)
{
  return nw_endpoint_resolver_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
}

void ___ZL46nw_endpoint_resolver_setup_trigger_agent_timerP30NWConcrete_nw_endpoint_handlerb_block_invoke(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (nw_endpoint_handler_trigger_agents(*(void **)(a1 + 32), 1))
  {
    int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    if (!minimize_logging)
    {
      if (logging_disabled) {
        return;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        id v6 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v7 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        logging_description = nw_endpoint_get_logging_description(v7);
        uint64_t v9 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        dispatch_time_t v10 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v11 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        os_log_type_t v12 = v11;
        BOOL v13 = "child flow";
        BOOL v14 = *(unsigned char *)(a1 + 40) == 0;
        int v24 = 136448002;
        id v25 = "nw_endpoint_resolver_setup_trigger_agent_timer_block_invoke";
        __int16 v26 = 2082;
        if (v14) {
          BOOL v13 = "resolution";
        }
        os_log_type_t v27 = id_string;
        __int16 v28 = 2082;
        os_log_type_t v29 = v6;
        __int16 v30 = 2082;
        nw_endpoint_t v31 = logging_description;
        __int16 v32 = 2082;
        int v33 = v9;
        __int16 v34 = 2082;
        id v35 = v10;
        __int16 v36 = 2114;
        id v37 = v11;
        __int16 v38 = 2082;
        __int16 v39 = v13;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] %{public}s timed out, triggering matching agent", (uint8_t *)&v24, 0x52u);
      }
      goto LABEL_10;
    }
    if ((logging_disabled & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        id v15 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        os_log_type_t v16 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v17 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        os_log_type_t v18 = nw_endpoint_get_logging_description(v17);
        char v19 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        os_log_type_t v20 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v21 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        BOOL v22 = v21;
        char v23 = "child flow";
        BOOL v14 = *(unsigned char *)(a1 + 40) == 0;
        int v24 = 136448002;
        id v25 = "nw_endpoint_resolver_setup_trigger_agent_timer_block_invoke";
        __int16 v26 = 2082;
        if (v14) {
          char v23 = "resolution";
        }
        os_log_type_t v27 = v15;
        __int16 v28 = 2082;
        os_log_type_t v29 = v16;
        __int16 v30 = 2082;
        nw_endpoint_t v31 = v18;
        __int16 v32 = 2082;
        int v33 = v19;
        __int16 v34 = 2082;
        id v35 = v20;
        __int16 v36 = 2114;
        id v37 = v21;
        __int16 v38 = 2082;
        __int16 v39 = v23;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] %{public}s timed out, triggering matching agent", (uint8_t *)&v24, 0x52u);
      }
LABEL_10:
    }
  }
}

void sub_18388B46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL41nw_endpoint_resolver_check_desperate_ivanP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1)
  {
    nw_endpoint_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v18, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          id v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v19 = __nwlog_obj();
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            id v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
            __int16 v36 = 2082;
            id v37 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          id v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
          _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v19 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          id v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
          _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_40:
    if (v18) {
      free(v18);
    }
    return;
  }
  uint64_t v3 = v1;
  uint64_t v4 = v3[29];

  if (v4 == 1)
  {
    int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    if (minimize_logging)
    {
      if (logging_disabled)
      {
LABEL_10:
        if (nw_endpoint_resolver_add_desperate_ivan(*(NWConcrete_nw_endpoint_handler **)(a1 + 32))) {
          nw_endpoint_resolver_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
        }
        return;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      nw_endpoint_t v7 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        BOOL v22 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v23 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        logging_description = nw_endpoint_get_logging_description(v23);
        id v25 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        __int16 v26 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v27 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136447746;
        id v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
        __int16 v36 = 2082;
        id v37 = (void *)id_string;
        __int16 v38 = 2082;
        __int16 v39 = v22;
        __int16 v40 = 2082;
        id v41 = logging_description;
        __int16 v42 = 2082;
        __int16 v43 = v25;
        __int16 v44 = 2082;
        __int16 v45 = v26;
        __int16 v46 = 2114;
        id v47 = v27;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connectivity seems very slow, adding DesperateIvan endpoint handler", buf, 0x48u);
      }
    }
    else
    {
      if (logging_disabled) {
        goto LABEL_10;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      nw_endpoint_t v7 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        BOOL v8 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        uint64_t v9 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v10 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        id v11 = nw_endpoint_get_logging_description(v10);
        os_log_type_t v12 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        BOOL v13 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v14 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136447746;
        id v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
        __int16 v36 = 2082;
        id v37 = (void *)v8;
        __int16 v38 = 2082;
        __int16 v39 = v9;
        __int16 v40 = 2082;
        id v41 = v11;
        __int16 v42 = 2082;
        __int16 v43 = v12;
        __int16 v44 = 2082;
        __int16 v45 = v13;
        __int16 v46 = 2114;
        id v47 = v14;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connectivity seems very slow, adding DesperateIvan endpoint handler", buf, 0x48u);
      }
    }

    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v15 = (id)gLogObj;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    if (v4 > 5) {
      os_log_type_t v16 = "unknown-mode";
    }
    else {
      os_log_type_t v16 = off_1E523FB08[v4];
    }
    *(_DWORD *)buf = 136446722;
    id v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
    __int16 v36 = 2082;
    id v37 = (void *)v16;
    __int16 v38 = 2082;
    __int16 v39 = "resolver";
    _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }
}

void sub_18388BA4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_resolver_add_desperate_ivan(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if ((nw_endpoint_handler_get_state(v1) & 0xFFFFFFFE) != 4)
  {
    uint64_t v3 = nw_endpoint_handler_copy_resolver(v1);
    uint64_t v4 = (uint64_t *)v3;
    if ((*((unsigned char *)v3 + 24) & 0xC) != 0)
    {
      if (!*((void *)v3 + 4))
      {
        *((unsigned char *)v3 + 24) &= ~8u;
        uint64_t v15 = *((void *)v3 + 9);
        if (v15)
        {
          nw_queue_cancel_source(v15);
          v4[9] = 0;
        }
        nw_endpoint_t v7 = nw_endpoint_handler_copy_endpoint(v1);
        child_uint64_t parameters = nw_endpoint_resolver_create_child_parameters(v1);
        nw_parameters_set_desperate_ivan((void *)child_parameters, 1);
        inner = nw_endpoint_handler_create_inner(v7, (void *)child_parameters, nw_endpoint_resolver_receive_report, v1, v1, 0, 0);
        BOOL v2 = inner != 0;
        if (inner)
        {
          nw_array_append(v4[5], inner);
        }
        else if ((nw_endpoint_handler_get_logging_disabled(v1) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v18 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            id_string = nw_endpoint_handler_get_id_string(v1);
            char v32 = nw_endpoint_handler_dry_run_string(v1);
            int v33 = id_string;
            nw_endpoint_t v34 = nw_endpoint_handler_copy_endpoint(v1);
            logging_description = nw_endpoint_get_logging_description(v34);
            os_log_type_t v20 = nw_endpoint_handler_state_string(v1);
            id v21 = nw_endpoint_handler_mode_string(v1);
            id v22 = nw_endpoint_handler_copy_current_path(v1);
            *(_DWORD *)buf = 136447746;
            __int16 v36 = "nw_endpoint_resolver_add_desperate_ivan";
            __int16 v37 = 2082;
            __int16 v38 = v33;
            __int16 v39 = 2082;
            __int16 v40 = v32;
            __int16 v41 = 2082;
            __int16 v42 = logging_description;
            __int16 v43 = 2082;
            __int16 v44 = v20;
            __int16 v45 = 2082;
            __int16 v46 = v21;
            __int16 v47 = 2114;
            id v48 = v22;
            _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to create DesperateIvan endpoint handler", buf, 0x48u);
          }
        }

        goto LABEL_23;
      }
      int minimize_logging = nw_endpoint_handler_get_minimize_logging(v1);
      char logging_disabled = nw_endpoint_handler_get_logging_disabled(v1);
      if (minimize_logging)
      {
        if ((logging_disabled & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          nw_endpoint_t v7 = (nw_endpoint_t)(id)gconnectionLogObj;
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          {
            nw_endpoint_t v23 = nw_endpoint_handler_get_id_string(v1);
            int v24 = nw_endpoint_handler_dry_run_string(v1);
            nw_endpoint_t v25 = nw_endpoint_handler_copy_endpoint(v1);
            __int16 v26 = nw_endpoint_get_logging_description(v25);
            id v27 = nw_endpoint_handler_state_string(v1);
            __int16 v28 = nw_endpoint_handler_mode_string(v1);
            id v29 = nw_endpoint_handler_copy_current_path(v1);
            *(_DWORD *)buf = 136447746;
            __int16 v36 = "nw_endpoint_resolver_add_desperate_ivan";
            __int16 v37 = 2082;
            __int16 v38 = v23;
            __int16 v39 = 2082;
            __int16 v40 = v24;
            __int16 v41 = 2082;
            __int16 v42 = v26;
            __int16 v43 = 2082;
            __int16 v44 = v27;
            __int16 v45 = 2082;
            __int16 v46 = v28;
            __int16 v47 = 2114;
            id v48 = v29;
            _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping DesperateIvan because already connected", buf, 0x48u);
          }
          goto LABEL_11;
        }
      }
      else if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        nw_endpoint_t v7 = (nw_endpoint_t)(id)gconnectionLogObj;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          BOOL v8 = nw_endpoint_handler_get_id_string(v1);
          uint64_t v9 = nw_endpoint_handler_dry_run_string(v1);
          nw_endpoint_t v10 = nw_endpoint_handler_copy_endpoint(v1);
          id v11 = nw_endpoint_get_logging_description(v10);
          os_log_type_t v12 = nw_endpoint_handler_state_string(v1);
          BOOL v13 = nw_endpoint_handler_mode_string(v1);
          id v14 = nw_endpoint_handler_copy_current_path(v1);
          *(_DWORD *)buf = 136447746;
          __int16 v36 = "nw_endpoint_resolver_add_desperate_ivan";
          __int16 v37 = 2082;
          __int16 v38 = v8;
          __int16 v39 = 2082;
          __int16 v40 = v9;
          __int16 v41 = 2082;
          __int16 v42 = v11;
          __int16 v43 = 2082;
          __int16 v44 = v12;
          __int16 v45 = 2082;
          __int16 v46 = v13;
          __int16 v47 = 2114;
          id v48 = v14;
          _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping DesperateIvan because already connected", buf, 0x48u);
        }
LABEL_11:
        BOOL v2 = 0;
LABEL_23:

LABEL_30:
        goto LABEL_31;
      }
    }
    BOOL v2 = 0;
    goto LABEL_30;
  }
  BOOL v2 = 0;
LABEL_31:

  return v2;
}

void sub_18388BF50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_113(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (*(id *)(a1 + 32) != v4) {
    nw_endpoint_handler_cancel(v4, 0, 0);
  }

  return 1;
}

void sub_18388C034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_2(uint64_t a1)
{
}

void ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_114(uint64_t a1)
{
}

uint64_t ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_115(uint64_t a1, uint64_t a2, void *a3)
{
  nw_endpoint_t v4 = nw_endpoint_handler_copy_endpoint(a3);
  int is_equal = nw_endpoint_is_equal(v4, *(void **)(a1 + 32), 31);
  if (is_equal) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  uint64_t v6 = is_equal ^ 1u;

  return v6;
}

void sub_18388C0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_resolver_get_details_block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = nw_endpoint_handler_copy_endpoint(v5);
  if (nw_endpoint_get_type(v6) != nw_endpoint_type_address) {
    goto LABEL_9;
  }
  int sa_family = nw_endpoint_get_address(v6)->sa_family;
  if (sa_family == 30)
  {
    BOOL v8 = (_DWORD **)(a1 + 48);
  }
  else
  {
    if (sa_family != 2) {
      goto LABEL_7;
    }
    BOOL v8 = (_DWORD **)(a1 + 40);
  }
  ++**v8;
LABEL_7:
  uint64_t v9 = *(unsigned char **)(a1 + 56);
  if (!*v9) {
    unsigned char *v9 = sa_family;
  }
LABEL_9:
  if (*(id *)(*(void *)(a1 + 32) + 32) == v5) {
    **(_DWORD **)(a1 + 64) = a2;
  }

  return 1;
}

void sub_18388C1F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_endpoint_for_alternatives(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v25 = "nw_endpoint_handler_copy_endpoint_for_alternatives";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v8, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v25 = "nw_endpoint_handler_copy_endpoint_for_alternatives";
          _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v22)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v25 = "nw_endpoint_handler_copy_endpoint_for_alternatives";
          _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v25 = "nw_endpoint_handler_copy_endpoint_for_alternatives";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        nw_endpoint_t v25 = "nw_endpoint_handler_copy_endpoint_for_alternatives";
        __int16 v26 = 2082;
        id v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v8)
    {
LABEL_23:
      id v6 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v8);
    goto LABEL_23;
  }
  uint64_t v3 = (NWConcrete_nw_endpoint_handler *)v1;
  int mode = v3->mode;

  if (mode != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v25 = "nw_endpoint_handler_copy_endpoint_for_alternatives";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v8, &type, &v22)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v25 = "nw_endpoint_handler_copy_endpoint_for_alternatives";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
      }
    }
    else if (v22)
    {
      id v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (v11)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          nw_endpoint_t v25 = "nw_endpoint_handler_copy_endpoint_for_alternatives";
          __int16 v26 = 2082;
          id v27 = v11;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v11);
        if (!v8) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v25 = "nw_endpoint_handler_copy_endpoint_for_alternatives";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (id)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v25 = "nw_endpoint_handler_copy_endpoint_for_alternatives";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  id v5 = (id *)nw_endpoint_handler_copy_resolver(v3);
  id v6 = v5[13];

LABEL_24:
  return v6;
}

void sub_18388C74C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_access_resolver_handler(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_endpoint_t v4 = a2;
  if (!v4)
  {
    nw_endpoint_t v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v36 = "nw_endpoint_handler_access_resolver_handler";
    __int16 v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v26, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v36 = "nw_endpoint_handler_access_resolver_handler";
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null accessor", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v27 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v31 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v36 = "nw_endpoint_handler_access_resolver_handler";
            __int16 v37 = 2082;
            __int16 v38 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s called with null accessor, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_63;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v36 = "nw_endpoint_handler_access_resolver_handler";
          _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s called with null accessor, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v27 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v36 = "nw_endpoint_handler_access_resolver_handler";
          _os_log_impl(&dword_1830D4000, v27, v32, "%{public}s called with null accessor, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_63:
    if (v26) {
      free(v26);
    }
    goto LABEL_9;
  }
  id v5 = v3;
  while (1)
  {
    id v6 = v5;
    if (!v6) {
      break;
    }
    id v5 = v6;
    int v7 = v6[29];

    if (v7 == 1)
    {
      v4[2](v4, v5);
      goto LABEL_8;
    }
    BOOL v8 = (id *)v5;
    id v5 = v8[9];

    if (!v5) {
      goto LABEL_8;
    }
  }
  uint64_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v36 = "nw_endpoint_handler_get_mode";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (__nwlog_fault(v10, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v36 = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null handler", buf, 0xCu);
      }
LABEL_25:

      goto LABEL_26;
    }
    if (!v33)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v36 = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_25;
    }
    BOOL v13 = (char *)__nw_create_backtrace_string();
    id v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v15 = os_log_type_enabled(v11, type);
    if (!v13)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v36 = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_25;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v36 = "nw_endpoint_handler_get_mode";
      __int16 v37 = 2082;
      __int16 v38 = v13;
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v13);
  }
LABEL_26:
  if (v10) {
    free(v10);
  }
  os_log_type_t v17 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v36 = "nw_endpoint_handler_copy_parent";
  os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (__nwlog_fault(v18, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v36 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null handler", buf, 0xCu);
      }
LABEL_43:

      goto LABEL_44;
    }
    if (!v33)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v36 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_43;
    }
    os_log_type_t v21 = (char *)__nw_create_backtrace_string();
    os_log_type_t v19 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v19, type);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v36 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_43;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v36 = "nw_endpoint_handler_copy_parent";
      __int16 v37 = 2082;
      __int16 v38 = v21;
      _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v21);
  }
LABEL_44:
  if (v18) {
    free(v18);
  }
  id v5 = 0;
LABEL_8:

LABEL_9:
}

void sub_18388CE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL32nw_endpoint_handler_create_innerPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS_PFbP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS_ESD_S5_jb_block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (nw_protocol_options_is_quic(v6))
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = nw_parameters_copy_context(*(void **)(a1 + 40));
    BOOL v5 = nw_context_copy_workloop(v4);
    nw_quic_connection_set_trusted_peer_keys(v6, v3, (void *)v5);
  }
}

void sub_18388CF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __nw_endpoint_handler_create_with_existing_block_invoke(uint64_t a1, void *a2)
{
  BOOL v2 = *(void **)(a1 + 32);
  id v3 = nw_protocol_options_copy(a2);
  nw_protocol_stack_append_application_protocol(v2, v3);
}

void sub_18388CFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_endpoint_handler_has_fallback_childrenP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3->mode == 4 || nw_endpoint_handler_has_fallback_children(v3))
  {
    uint64_t v5 = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_18388D0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_copy_connected_socket_wrapper(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 28);
    if (v2[29]._os_unfair_lock_opaque == 2) {
      uint64_t v3 = nw_endpoint_flow_copy_connected_socket_wrapper(*(void *)&v2[62]._os_unfair_lock_opaque);
    }
    else {
      uint64_t v3 = 0;
    }
    os_unfair_lock_unlock(v2 + 28);
    goto LABEL_6;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_handler_copy_connected_socket_wrapper";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_copy_connected_socket_wrapper";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_handler_copy_connected_socket_wrapper";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_copy_connected_socket_wrapper";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_copy_connected_socket_wrapper";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_6:

  return v3;
}

void sub_18388D38C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_handler_fillout_data_transfer_snapshot_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = nw_endpoint_handler_fillout_data_transfer_snapshot(a2, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned int *)(a1 + 64));
  if (v3) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return v3 ^ 1u;
}

uint64_t __nw_endpoint_handler_fillout_tcp_info_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = nw_endpoint_handler_fillout_tcp_info(a2, *(void *)(a1 + 40));
  if (v3) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return v3 ^ 1u;
}

BOOL nw_endpoint_handler_fillout_tcp_connection_info(void *a1, _OWORD *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(void *)os_log_type_t type = 0;
    uint64_t v49 = type;
    uint64_t v50 = 0x2020000000;
    char v51 = 0;
    os_unfair_lock_lock(v3 + 28);
    uint64_t v5 = *(void **)&v4[62]._os_unfair_lock_opaque;
    if (v4[29]._os_unfair_lock_opaque != 2)
    {
      v47[0] = MEMORY[0x1E4F143A8];
      v47[1] = 3221225472;
      v47[2] = __nw_endpoint_handler_fillout_tcp_connection_info_block_invoke;
      v47[3] = &unk_1E523F9C8;
      v47[4] = type;
      v47[5] = a2;
      [v5 applyWithHandler:v4 toChildren:v47];
LABEL_28:
      os_unfair_lock_unlock(v4 + 28);
      BOOL v29 = *((unsigned char *)v49 + 24) != 0;
      _Block_object_dispose(type, 8);
      goto LABEL_29;
    }
    id v6 = v5;
    int v7 = v6;
    if (v6)
    {
      os_unfair_lock_lock(v6 + 220);
      os_log_type_t v8 = *(long long **)&v7[200]._os_unfair_lock_opaque;
      if (v8)
      {
        long long v9 = *v8;
        long long v10 = v8[2];
        a2[1] = v8[1];
        a2[2] = v10;
        *a2 = v9;
        long long v11 = v8[3];
        long long v12 = v8[4];
        long long v13 = v8[6];
        a2[5] = v8[5];
        a2[6] = v13;
        a2[3] = v11;
        a2[4] = v12;
        char fd = 1;
      }
      else
      {
        uint64_t v15 = *(void *)&v7[102]._os_unfair_lock_opaque;
        if (v15 && (v16 = *(void *)(v15 + 24)) != 0 && (__int16 v17 = *(uint64_t (**)(void))(v16 + 224)) != 0)
        {
          *(void *)__int16 v52 = 0;
          os_log_type_t v18 = (long long *)v17();
          if (v18)
          {
            if (*(void *)v52 == 112)
            {
              long long v19 = *v18;
              long long v20 = v18[2];
              a2[1] = v18[1];
              a2[2] = v20;
              *a2 = v19;
              long long v21 = v18[3];
              long long v22 = v18[4];
              long long v23 = v18[6];
              a2[5] = v18[5];
              a2[6] = v23;
              a2[3] = v21;
              a2[4] = v22;
              int v24 = 1;
            }
            else
            {
              int v24 = 0;
            }
            free(v18);
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v28 = (id)gLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_endpoint_flow_fillout_tcp_connection_info";
              _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s copy_info() returned NULL", buf, 0xCu);
            }

            int v24 = 0;
          }
          char fd = v24 != 0;
        }
        else
        {
          id v25 = *(id *)&v7[222]._os_unfair_lock_opaque;
          if ((v7[8]._os_unfair_lock_opaque & 2) == 0)
          {
            __int16 v26 = *(void **)&v7[234]._os_unfair_lock_opaque;
            if (v26)
            {
              uint64_t v27 = nw_endpoint_handler_copy_connected_socket_wrapper(v26);

              id v25 = (id)v27;
            }
          }
          if (v25)
          {
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3221225472;
            *(void *)&buf[16] = __nw_endpoint_flow_fillout_tcp_connection_info_block_invoke;
            __int16 v55 = &__block_descriptor_40_e8_B12__0i8l;
            __int16 v56 = a2;
            char fd = nw_fd_wrapper_get_fd(v25, buf);
          }
          else
          {
            char fd = 0;
          }
        }
      }
      os_unfair_lock_unlock(v7 + 220);
LABEL_27:

      *((unsigned char *)v49 + 24) = fd;
      goto LABEL_28;
    }
    id v35 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_fillout_tcp_connection_info";
    __int16 v36 = (char *)_os_log_send_and_compose_impl();

    v52[0] = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (__nwlog_fault(v36, v52, &v53))
    {
      if (v52[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v37 = __nwlog_obj();
        os_log_type_t v38 = v52[0];
        if (os_log_type_enabled(v37, v52[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_fillout_tcp_connection_info";
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if (v53)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v37 = __nwlog_obj();
        os_log_type_t v43 = v52[0];
        BOOL v44 = os_log_type_enabled(v37, v52[0]);
        if (backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_fillout_tcp_connection_info";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v37, v43, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_65;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_fillout_tcp_connection_info";
          _os_log_impl(&dword_1830D4000, v37, v43, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v37 = __nwlog_obj();
        os_log_type_t v46 = v52[0];
        if (os_log_type_enabled(v37, v52[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_fillout_tcp_connection_info";
          _os_log_impl(&dword_1830D4000, v37, v46, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_65:
    if (v36) {
      free(v36);
    }
    char fd = 0;
    goto LABEL_27;
  }
  BOOL v31 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_handler_fillout_tcp_connection_info";
  os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v52[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v32, type, v52))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v33 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      if (os_log_type_enabled(v33, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_fillout_tcp_connection_info";
        _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v52[0])
    {
      uint64_t v39 = (char *)__nw_create_backtrace_string();
      char v33 = __nwlog_obj();
      os_log_type_t v40 = type[0];
      BOOL v41 = os_log_type_enabled(v33, type[0]);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_fillout_tcp_connection_info";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v39;
          _os_log_impl(&dword_1830D4000, v33, v40, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v39);
        goto LABEL_56;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_fillout_tcp_connection_info";
        _os_log_impl(&dword_1830D4000, v33, v40, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v33 = __nwlog_obj();
      os_log_type_t v45 = type[0];
      if (os_log_type_enabled(v33, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_fillout_tcp_connection_info";
        _os_log_impl(&dword_1830D4000, v33, v45, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_56:
  if (v32) {
    free(v32);
  }
  BOOL v29 = 0;
LABEL_29:

  return v29;
}

void sub_18388DB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_handler_fillout_tcp_connection_info_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = nw_endpoint_handler_fillout_tcp_connection_info(a2, *(void *)(a1 + 40));
  if (v3) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return v3 ^ 1u;
}

BOOL nw_endpoint_handler_fillout_route_stats(void *a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    long long v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_endpoint_handler_fillout_route_stats";
    long long v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      long long v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v23)
    {
      long long v11 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    long long v11 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v26 = "nw_endpoint_handler_fillout_route_stats";
      __int16 v27 = 2082;
      os_log_type_t v28 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    long long v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_endpoint_handler_fillout_route_stats";
    long long v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      long long v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null stats", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v10) {
        free(v10);
      }
      goto LABEL_40;
    }
    if (!v23)
    {
      long long v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null stats, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    long long v11 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null stats, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v26 = "nw_endpoint_handler_fillout_route_stats";
      __int16 v27 = 2082;
      os_log_type_t v28 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null stats, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  nw_endpoint_handler_initialize_association(v3);
  uint64_t v5 = (void *)*((void *)v4 + 7);
  if (!v5 || (id v6 = nw_association_copy_current_path(v5, *((void **)v4 + 4)), (v7 = v6) == 0))
  {
LABEL_40:
    BOOL v8 = 0;
    goto LABEL_41;
  }
  BOOL v8 = nw_path_fillout_route_stats(v6, a2, 0);

LABEL_41:
  return v8;
}

void sub_18388E0D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_triggered_agents_updated(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  p_triggered_agent_uuids = (id *)&v1->triggered_agent_uuids;
  if (v1->triggered_agent_uuids)
  {
    if (v1->inactive_agent_dictionaries)
    {
      id v4 = nw_path_copy_inactive_agent_uuids(v1->current_path, 0);
      uint64_t v5 = v4;
      uint64_t v129 = v4;
      if (v4 && xpc_array_get_count(v4))
      {
        xpc_object_t v6 = xpc_array_create(0, 0);
        if (v6)
        {
          int v7 = v2->inactive_agent_dictionaries;
          current_path = v2->current_path;
          if (current_path && (long long v9 = (void *)*((void *)current_path + 28)) != 0) {
            id v10 = v9;
          }
          else {
            id v10 = 0;
          }
          id v52 = *p_triggered_agent_uuids;
          applier[0] = MEMORY[0x1E4F143A8];
          applier[1] = 3221225472;
          applier[2] = ___ZL44nw_endpoint_handler_triggered_agents_updatedP30NWConcrete_nw_endpoint_handler_block_invoke;
          applier[3] = &unk_1E5248550;
          uint64_t v131 = v7;
          id v126 = v10;
          id v132 = v126;
          os_log_type_t v18 = v6;
          id v133 = v18;
          __int16 v128 = v52;
          char v125 = v131;
          xpc_array_apply(v52, applier);
          size_t count = xpc_array_get_count(v18);
          BOOL v11 = count == 0;
          if (count)
          {
            objc_storeStrong(p_triggered_agent_uuids, v6);
            objc_storeStrong((id *)&v2->inactive_agent_dictionaries, v10);
            if (nw_endpoint_handler_get_minimize_logging(v2))
            {
              if (nw_endpoint_handler_get_logging_disabled(v2)) {
                goto LABEL_98;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              size_t v106 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
              {
                os_log_t logb = nw_endpoint_handler_get_id_string(v2);
                uint64_t v120 = nw_endpoint_handler_dry_run_string(v2);
                nw_endpoint_t v107 = nw_endpoint_handler_copy_endpoint(v2);
                logging_description = nw_endpoint_get_logging_description(v107);
                size_t v109 = nw_endpoint_handler_state_string(v2);
                os_log_type_t v110 = nw_endpoint_handler_mode_string(v2);
                BOOL v111 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v2);
                *(_DWORD *)buf = 136448002;
                char v137 = "nw_endpoint_handler_triggered_agents_updated";
                __int16 v138 = 2082;
                id_str = (void *)logb;
                __int16 v140 = 2082;
                uint64_t v141 = v120;
                __int16 v142 = 2082;
                BOOL v143 = logging_description;
                __int16 v144 = 2082;
                os_log_type_t v145 = v109;
                __int16 v146 = 2082;
                uint64_t v147 = v110;
                __int16 v148 = 2114;
                char v149 = v111;
                __int16 v150 = 2048;
                size_t v151 = count;
                __int16 v56 = v106;
                _os_log_impl(&dword_1830D4000, v106, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] %zu triggered agents not yet updated", buf, 0x52u);
              }
              else
              {
                __int16 v56 = v106;
              }
              goto LABEL_97;
            }
            __int16 v54 = v2;
            BOOL v55 = (*((unsigned char *)v54 + 268) & 0x20) == 0;

            if (v55)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              __int16 v56 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
              {
                uint64_t v57 = v54;

                __int16 v58 = v57;
                BOOL v59 = (*((unsigned char *)v54 + 268) & 1) == 0;

                if (v59) {
                  uint64_t v60 = "";
                }
                else {
                  uint64_t v60 = "dry-run ";
                }
                nw_endpoint_t v61 = nw_endpoint_handler_copy_endpoint(v58);
                os_log_t log = nw_endpoint_get_logging_description(v61);
                uint64_t v62 = v58;
                uint64_t v63 = v62;
                uint64_t v64 = v62[30];
                if (v64 > 5) {
                  unsigned int v65 = "unknown-state";
                }
                else {
                  unsigned int v65 = off_1E523FB38[v64];
                }
                size_t v119 = v65;

                nw_protocol_metadata_t v90 = v63;
                uint64_t v91 = "path";
                switch(*((_DWORD *)v90 + 29))
                {
                  case 0:
                    break;
                  case 1:
                    uint64_t v91 = "resolver";
                    break;
                  case 2:
                    uint64_t v91 = nw_endpoint_flow_mode_string(v90[31]);
                    break;
                  case 3:
                    uint64_t v91 = "proxy";
                    break;
                  case 4:
                    uint64_t v91 = "fallback";
                    break;
                  case 5:
                    uint64_t v91 = "transform";
                    break;
                  default:
                    uint64_t v91 = "unknown-mode";
                    break;
                }
                id v118 = v91;

                long long v93 = v57;
                nw_endpoint_t v94 = v61;
                id v95 = v56;
                uint64_t v96 = v90;
                os_unfair_lock_lock(v96 + 28);
                char v97 = v2->current_path;
                os_unfair_lock_unlock(v96 + 28);

                __int16 v56 = v95;
                *(_DWORD *)buf = 136448002;
                char v137 = "nw_endpoint_handler_triggered_agents_updated";
                __int16 v138 = 2082;
                id_str = v93->id_str;
                __int16 v140 = 2082;
                uint64_t v141 = v60;
                __int16 v142 = 2082;
                BOOL v143 = log;
                __int16 v144 = 2082;
                os_log_type_t v145 = v119;
                __int16 v146 = 2082;
                uint64_t v147 = v118;
                __int16 v148 = 2114;
                char v149 = v97;
                __int16 v150 = 2048;
                size_t v151 = count;
                _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] %zu triggered agents not yet updated", buf, 0x52u);
              }
LABEL_97:
            }
          }
          else
          {
            *((unsigned char *)v2 + 268) &= ~2u;
            inactive_agent_uuids = v2->inactive_agent_uuids;
            v2->inactive_agent_uuids = 0;
            os_log_type_t v71 = v2;

            inactive_agent_dictionaries = v2->inactive_agent_dictionaries;
            v2->inactive_agent_dictionaries = 0;

            triggered_agent_uuids = v2->triggered_agent_uuids;
            v2->triggered_agent_uuids = 0;

            if (nw_endpoint_handler_get_minimize_logging(v71))
            {
              if (nw_endpoint_handler_get_logging_disabled(v71)) {
                goto LABEL_98;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              __int16 v56 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
              {
                id_string = nw_endpoint_handler_get_id_string(v71);
                os_log_t logc = nw_endpoint_handler_dry_run_string(v71);
                nw_endpoint_t v113 = nw_endpoint_handler_copy_endpoint(v71);
                BOOL v114 = nw_endpoint_get_logging_description(v113);
                uint64_t v115 = nw_endpoint_handler_state_string(v71);
                __int16 v116 = nw_endpoint_handler_mode_string(v71);
                uint64_t v117 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v71);
                *(_DWORD *)buf = 136447746;
                char v137 = "nw_endpoint_handler_triggered_agents_updated";
                __int16 v138 = 2082;
                id_str = (void *)id_string;
                __int16 v140 = 2082;
                uint64_t v141 = logc;
                __int16 v142 = 2082;
                BOOL v143 = v114;
                __int16 v144 = 2082;
                os_log_type_t v145 = v115;
                __int16 v146 = 2082;
                uint64_t v147 = v116;
                __int16 v148 = 2114;
                char v149 = v117;
                _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all triggered agents updated", buf, 0x48u);
              }
              goto LABEL_97;
            }
            id v74 = v71;
            BOOL v75 = (*((unsigned char *)v2 + 268) & 0x20) == 0;

            if (v75)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              __int16 v56 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
              {
                __int16 v76 = nw_endpoint_handler_get_id_string(v74);
                uint64_t v77 = nw_endpoint_handler_dry_run_string(v74);
                loga = v56;
                nw_endpoint_t v78 = nw_endpoint_handler_copy_endpoint(v74);
                int v79 = nw_endpoint_get_logging_description(v78);
                uint64_t v80 = nw_endpoint_handler_state_string(v74);
                id v81 = nw_endpoint_handler_mode_string(v74);
                os_log_type_t v82 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v74);
                *(_DWORD *)buf = 136447746;
                char v137 = "nw_endpoint_handler_triggered_agents_updated";
                __int16 v138 = 2082;
                id_str = (void *)v76;
                __int16 v140 = 2082;
                uint64_t v141 = v77;
                __int16 v142 = 2082;
                BOOL v143 = v79;
                __int16 v144 = 2082;
                os_log_type_t v145 = v80;
                __int16 v146 = 2082;
                uint64_t v147 = v81;
                __int16 v148 = 2114;
                char v149 = v82;
                __int16 v56 = loga;
                _os_log_impl(&dword_1830D4000, loga, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all triggered agents updated", buf, 0x48u);
              }
              goto LABEL_97;
            }
          }
LABEL_98:

          goto LABEL_99;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v66 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        char v137 = "nw_endpoint_handler_triggered_agents_updated";
        id v67 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v134 = 0;
        if (__nwlog_fault(v67, &type, &v134))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v68 = (id)gLogObj;
            os_log_type_t v69 = type;
            if (os_log_type_enabled(v68, type))
            {
              *(_DWORD *)buf = 136446210;
              char v137 = "nw_endpoint_handler_triggered_agents_updated";
              _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
          }
          else if (v134)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __int16 v68 = __nwlog_obj();
            os_log_type_t v84 = type;
            BOOL v85 = os_log_type_enabled(v68, type);
            if (backtrace_string)
            {
              if (v85)
              {
                *(_DWORD *)buf = 136446466;
                char v137 = "nw_endpoint_handler_triggered_agents_updated";
                __int16 v138 = 2082;
                id_str = backtrace_string;
                _os_log_impl(&dword_1830D4000, v68, v84, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              if (!v67) {
                goto LABEL_90;
              }
              goto LABEL_89;
            }
            if (v85)
            {
              *(_DWORD *)buf = 136446210;
              char v137 = "nw_endpoint_handler_triggered_agents_updated";
              _os_log_impl(&dword_1830D4000, v68, v84, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __int16 v68 = __nwlog_obj();
            os_log_type_t v92 = type;
            if (os_log_type_enabled(v68, type))
            {
              *(_DWORD *)buf = 136446210;
              char v137 = "nw_endpoint_handler_triggered_agents_updated";
              _os_log_impl(&dword_1830D4000, v68, v92, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
        if (!v67)
        {
LABEL_90:
          os_log_type_t v18 = 0;
          BOOL v11 = 0;
          goto LABEL_99;
        }
LABEL_89:
        free(v67);
        goto LABEL_90;
      }
      *((unsigned char *)v2 + 268) &= ~2u;
      os_log_type_t v12 = v2->inactive_agent_uuids;
      v2->inactive_agent_uuids = 0;
      long long v13 = v2;

      os_log_type_t v14 = v2->inactive_agent_dictionaries;
      v2->inactive_agent_dictionaries = 0;

      uint64_t v15 = v2->triggered_agent_uuids;
      v2->triggered_agent_uuids = 0;

      if (!nw_endpoint_handler_get_minimize_logging(v13))
      {
        os_log_type_t v16 = v13;
        char v17 = *((unsigned char *)v2 + 268);

        if ((v17 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v18 = (id)gconnectionLogObj;
          BOOL v11 = 1;
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
            goto LABEL_99;
          }
          BOOL v19 = v16;

          os_log_type_t v20 = v19;
          char v21 = *((unsigned char *)v2 + 268);

          if (v21) {
            long long v22 = "dry-run ";
          }
          else {
            long long v22 = "";
          }
          uint64_t v127 = v18;
          nw_endpoint_t v23 = nw_endpoint_handler_copy_endpoint(v20);
          int v24 = nw_endpoint_get_logging_description(v23);
          id v25 = v19 + 168;
          __int16 v26 = v20;
          __int16 v27 = v26;
          uint64_t v28 = v26[30];
          if (v28 > 5) {
            uint64_t v29 = "unknown-state";
          }
          else {
            uint64_t v29 = off_1E523FB38[v28];
          }

          os_log_type_t v46 = v27;
          __int16 v47 = v46;
          id v48 = "path";
          switch(*((_DWORD *)v46 + 29))
          {
            case 0:
              break;
            case 1:
              id v48 = "resolver";
              break;
            case 2:
              id v48 = nw_endpoint_flow_mode_string(v46[31]);
              break;
            case 3:
              id v48 = "proxy";
              break;
            case 4:
              id v48 = "fallback";
              break;
            case 5:
              id v48 = "transform";
              break;
            default:
              id v48 = "unknown-mode";
              break;
          }

          long long v86 = v47;
          os_unfair_lock_lock(v86 + 28);
          uint64_t v87 = v2->current_path;
          os_unfair_lock_unlock(v86 + 28);

          *(_DWORD *)buf = 136447746;
          char v137 = "nw_endpoint_handler_triggered_agents_updated";
          __int16 v138 = 2082;
          id_str = v25;
          __int16 v140 = 2082;
          uint64_t v141 = v22;
          __int16 v142 = 2082;
          BOOL v143 = v24;
          __int16 v144 = 2082;
          os_log_type_t v145 = v29;
          __int16 v146 = 2082;
          uint64_t v147 = v48;
          __int16 v148 = 2114;
          char v149 = v87;
          os_log_type_t v18 = v127;
          _os_log_impl(&dword_1830D4000, v127, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no inactive agents remaining", buf, 0x48u);

          goto LABEL_71;
        }
LABEL_29:
        BOOL v11 = 1;
LABEL_101:

        goto LABEL_102;
      }
      if ((nw_endpoint_handler_get_logging_disabled(v13) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v18 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          int v99 = nw_endpoint_handler_get_id_string(v13);
          id v100 = nw_endpoint_handler_dry_run_string(v13);
          nw_endpoint_t v101 = nw_endpoint_handler_copy_endpoint(v13);
          BOOL v102 = nw_endpoint_get_logging_description(v101);
          __int16 v103 = nw_endpoint_handler_state_string(v13);
          id v104 = nw_endpoint_handler_mode_string(v13);
          __int16 v105 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v13);
          *(_DWORD *)buf = 136447746;
          char v137 = "nw_endpoint_handler_triggered_agents_updated";
          __int16 v138 = 2082;
          id_str = (void *)v99;
          __int16 v140 = 2082;
          uint64_t v141 = v100;
          __int16 v142 = 2082;
          BOOL v143 = v102;
          __int16 v144 = 2082;
          os_log_type_t v145 = v103;
          __int16 v146 = 2082;
          uint64_t v147 = v104;
          __int16 v148 = 2114;
          char v149 = v105;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no inactive agents remaining", buf, 0x48u);
        }
LABEL_71:
        BOOL v11 = 1;
LABEL_99:

        goto LABEL_100;
      }
    }
    else
    {
      *((unsigned char *)v1 + 268) &= ~2u;
      os_log_type_t v30 = v1->inactive_agent_uuids;
      v1->inactive_agent_uuids = 0;

      BOOL v31 = v2->inactive_agent_dictionaries;
      v2->inactive_agent_dictionaries = 0;

      os_log_type_t v32 = v2->triggered_agent_uuids;
      v2->triggered_agent_uuids = 0;

      char v33 = v2;
      char v34 = *((unsigned char *)v2 + 268);

      if ((v34 & 0x20) != 0)
      {
        BOOL v11 = 1;
        goto LABEL_102;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v5 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_29;
      }
      uint64_t v129 = v5;
      id v35 = v33;

      __int16 v36 = v35;
      char v37 = *((unsigned char *)v2 + 268);

      if (v37) {
        os_log_type_t v38 = "dry-run ";
      }
      else {
        os_log_type_t v38 = "";
      }
      nw_endpoint_t v39 = nw_endpoint_handler_copy_endpoint(v36);
      os_log_type_t v40 = nw_endpoint_get_logging_description(v39);
      BOOL v41 = v35 + 168;
      __int16 v42 = v36;
      os_log_type_t v43 = v42;
      uint64_t v44 = v42[30];
      if (v44 > 5) {
        os_log_type_t v45 = "unknown-state";
      }
      else {
        os_log_type_t v45 = off_1E523FB38[v44];
      }

      uint64_t v49 = v43;
      uint64_t v50 = v49;
      char v51 = "path";
      switch(*((_DWORD *)v49 + 29))
      {
        case 0:
          break;
        case 1:
          char v51 = "resolver";
          break;
        case 2:
          char v51 = nw_endpoint_flow_mode_string(v49[31]);
          break;
        case 3:
          char v51 = "proxy";
          break;
        case 4:
          char v51 = "fallback";
          break;
        case 5:
          char v51 = "transform";
          break;
        default:
          char v51 = "unknown-mode";
          break;
      }

      uint64_t v88 = v50;
      os_unfair_lock_lock((os_unfair_lock_t)v88 + 28);
      uint64_t v89 = v88[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v88 + 28);

      *(_DWORD *)buf = 136447746;
      char v137 = "nw_endpoint_handler_triggered_agents_updated";
      __int16 v138 = 2082;
      id_str = v41;
      __int16 v140 = 2082;
      uint64_t v141 = v38;
      __int16 v142 = 2082;
      BOOL v143 = v40;
      __int16 v144 = 2082;
      os_log_type_t v145 = v45;
      __int16 v146 = 2082;
      uint64_t v147 = v51;
      __int16 v148 = 2114;
      char v149 = v89;
      _os_log_impl(&dword_1830D4000, v129, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no inactive agent information", buf, 0x48u);
    }
    BOOL v11 = 1;
LABEL_100:
    uint64_t v5 = v129;
    goto LABEL_101;
  }
  BOOL v11 = 0;
LABEL_102:

  return v11;
}

void sub_18388F208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL31nw_endpoint_handler_path_changeP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = nw_path_interface_prohibited_by_parameters(*(void **)(*(void *)(a1 + 32) + 64), v3);
  if (!v4)
  {
    int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    if (minimize_logging)
    {
      if (logging_disabled) {
        goto LABEL_11;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        loga = v8;
        id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        os_log_type_t v18 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v19 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        logging_description = nw_endpoint_get_logging_description(v19);
        char v21 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        long long v22 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v23 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        __int16 v27 = "nw_endpoint_handler_path_change_block_invoke";
        __int16 v28 = 2082;
        uint64_t v29 = id_string;
        __int16 v30 = 2082;
        BOOL v31 = v18;
        __int16 v32 = 2082;
        char v33 = logging_description;
        __int16 v34 = 2082;
        id v35 = v21;
        __int16 v36 = 2082;
        char v37 = v22;
        __int16 v38 = 2114;
        id v39 = v23;
        __int16 v40 = 2114;
        id v41 = v3;
        BOOL v8 = loga;
        _os_log_impl(&dword_1830D4000, loga, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] overriding unsatisfied, eligible interface: %{public}@", buf, 0x52u);
      }
    }
    else
    {
      if (logging_disabled)
      {
LABEL_11:
        uint64_t v5 = a1 + 48;
        goto LABEL_12;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        os_log_t log = v8;
        long long v9 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        id v10 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v11 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        os_log_type_t v12 = nw_endpoint_get_logging_description(v11);
        long long v13 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        os_log_type_t v14 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v15 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        __int16 v27 = "nw_endpoint_handler_path_change_block_invoke";
        __int16 v28 = 2082;
        uint64_t v29 = v9;
        __int16 v30 = 2082;
        BOOL v31 = v10;
        __int16 v32 = 2082;
        char v33 = v12;
        __int16 v34 = 2082;
        id v35 = v13;
        __int16 v36 = 2082;
        char v37 = v14;
        __int16 v38 = 2114;
        id v39 = v15;
        __int16 v40 = 2114;
        id v41 = v3;
        BOOL v8 = log;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] overriding unsatisfied, eligible interface: %{public}@", buf, 0x52u);
      }
    }

    goto LABEL_11;
  }
  if (nw_interface_get_subtype(v3) == 1002)
  {
    uint64_t v5 = a1 + 40;
LABEL_12:
    *(unsigned char *)(*(void *)(*(void *)v5 + 8) + 24) = 1;
  }

  return v4;
}

void sub_18388F6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_should_start_fallback(NWConcrete_nw_endpoint_handler *a1)
{
  id v1 = a1;
  BOOL v2 = v1;
  BOOL v4 = v1->state == 1
    && ((int mode = v1->mode) == 0 || mode == 2 && (nw_endpoint_flow_get_is_leaf_handler(v1->mode_handler) & 1) == 0)
    && (*((unsigned char *)v2 + 268) & 1) == 0
    && nw_path_should_fallback(v2->current_path, 0);

  return v4;
}

void sub_18388F7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_reset_mode(void *a1, int a2)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  BOOL v4 = v3->mode_handler;
  [(NWConcrete_nw_endpoint_mode_handler *)v4 cancelWithHandler:v3 forced:1];

  os_unfair_lock_lock(&v3->lock);
  char v5 = *((unsigned char *)v3 + 268);
  *((unsigned char *)v3 + 268) = v5 & 0xE7;
  if ((v5 & 1) != 0 || v3->parent_handler)
  {
    xpc_object_t v6 = 0;
    v3->int mode = 0;
LABEL_4:
    mode_handler = v3->mode_handler;
    v3->mode_handler = (NWConcrete_nw_endpoint_mode_handler *)v6;

    goto LABEL_5;
  }
  if (v3->mode != 2)
  {
    v3->int mode = 2;
    xpc_object_t v6 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
    *((unsigned char *)v6 + 32) = *((unsigned char *)v6 + 32) & 0xFC | 1;
    goto LABEL_4;
  }
  nw_endpoint_flow_reset_is_leaf_handler(v3->mode_handler, 0);
LABEL_5:
  v3->uint64_t state = 1;
  os_unfair_lock_unlock(&v3->lock);
  int minimize_logging = nw_endpoint_handler_get_minimize_logging(v3);
  if (a2)
  {
    if (minimize_logging)
    {
      if (nw_endpoint_handler_get_logging_disabled(v3)) {
        goto LABEL_45;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      nw_endpoint_t v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v3);
        uint64_t v44 = nw_endpoint_handler_dry_run_string(v3);
        nw_endpoint_t v45 = nw_endpoint_handler_copy_endpoint(v3);
        logging_description = nw_endpoint_get_logging_description(v45);
        __int16 v47 = nw_endpoint_handler_state_string(v3);
        id v48 = nw_endpoint_handler_mode_string(v3);
        id v49 = nw_endpoint_handler_copy_current_path(v3);
        *(_DWORD *)buf = 136447746;
        uint64_t v60 = "nw_endpoint_handler_reset_mode";
        __int16 v61 = 2082;
        uint64_t v62 = id_string;
        __int16 v63 = 2082;
        uint64_t v64 = v44;
        __int16 v65 = 2082;
        id v66 = logging_description;
        __int16 v67 = 2082;
        __int16 v68 = v47;
        __int16 v69 = 2082;
        __int16 v70 = v48;
        __int16 v71 = 2114;
        id v72 = v49;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] reset, restarting path handling", buf, 0x48u);
      }
    }
    else
    {
      long long v9 = v3;
      char v10 = *((unsigned char *)v3 + 268);

      if ((v10 & 0x20) != 0)
      {
LABEL_45:
        nw_endpoint_handler_path_change(v3);
        goto LABEL_50;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      nw_endpoint_t v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v12 = v9;

        long long v13 = v12;
        char v14 = *((unsigned char *)v3 + 268);

        if (v14) {
          id v15 = "dry-run ";
        }
        else {
          id v15 = "";
        }
        nw_endpoint_t v16 = nw_endpoint_handler_copy_endpoint(v13);
        char v17 = nw_endpoint_get_logging_description(v16);
        uint64_t v57 = v12 + 168;
        os_log_type_t v18 = v13;
        nw_endpoint_t v19 = v18;
        uint64_t state = v3->state;
        if (state > 5) {
          char v21 = "unknown-state";
        }
        else {
          char v21 = off_1E523FB38[state];
        }

        id v35 = v19;
        __int16 v36 = "path";
        switch(*((_DWORD *)v35 + 29))
        {
          case 0:
            break;
          case 1:
            __int16 v36 = "resolver";
            break;
          case 2:
            __int16 v36 = nw_endpoint_flow_mode_string(v3->mode_handler);
            break;
          case 3:
            __int16 v36 = "proxy";
            break;
          case 4:
            __int16 v36 = "fallback";
            break;
          case 5:
            __int16 v36 = "transform";
            break;
          default:
            __int16 v36 = "unknown-mode";
            break;
        }

        id v39 = v35;
        os_unfair_lock_lock(&v3->lock);
        id v40 = v39[8];
        os_unfair_lock_unlock(&v3->lock);

        *(_DWORD *)buf = 136447746;
        uint64_t v60 = "nw_endpoint_handler_reset_mode";
        __int16 v61 = 2082;
        uint64_t v62 = v57;
        __int16 v63 = 2082;
        uint64_t v64 = v15;
        __int16 v65 = 2082;
        id v66 = v17;
        __int16 v67 = 2082;
        __int16 v68 = v21;
        __int16 v69 = 2082;
        __int16 v70 = v36;
        __int16 v71 = 2114;
        id v72 = v40;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] reset, restarting path handling", buf, 0x48u);
      }
    }

    goto LABEL_45;
  }
  if (minimize_logging)
  {
    if (nw_endpoint_handler_get_logging_disabled(v3)) {
      goto LABEL_50;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v24 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v50 = nw_endpoint_handler_get_id_string(v3);
      char v51 = nw_endpoint_handler_dry_run_string(v3);
      nw_endpoint_t v52 = nw_endpoint_handler_copy_endpoint(v3);
      char v53 = nw_endpoint_get_logging_description(v52);
      __int16 v54 = nw_endpoint_handler_state_string(v3);
      BOOL v55 = nw_endpoint_handler_mode_string(v3);
      id v56 = nw_endpoint_handler_copy_current_path(v3);
      *(_DWORD *)buf = 136447746;
      uint64_t v60 = "nw_endpoint_handler_reset_mode";
      __int16 v61 = 2082;
      uint64_t v62 = v50;
      __int16 v63 = 2082;
      uint64_t v64 = v51;
      __int16 v65 = 2082;
      id v66 = v53;
      __int16 v67 = 2082;
      __int16 v68 = v54;
      __int16 v69 = 2082;
      __int16 v70 = v55;
      __int16 v71 = 2114;
      id v72 = v56;
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] reset", buf, 0x48u);
    }
    goto LABEL_49;
  }
  long long v22 = v3;
  char v23 = *((unsigned char *)v3 + 268);

  if ((v23 & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v24 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      id v25 = v22;

      __int16 v26 = v25;
      char v27 = *((unsigned char *)v3 + 268);

      if (v27) {
        __int16 v28 = "dry-run ";
      }
      else {
        __int16 v28 = "";
      }
      nw_endpoint_t v29 = nw_endpoint_handler_copy_endpoint(v26);
      __int16 v30 = nw_endpoint_get_logging_description(v29);
      __int16 v58 = v25 + 168;
      BOOL v31 = v26;
      __int16 v32 = v31;
      uint64_t v33 = v3->state;
      if (v33 > 5) {
        __int16 v34 = "unknown-state";
      }
      else {
        __int16 v34 = off_1E523FB38[v33];
      }

      char v37 = v32;
      __int16 v38 = "path";
      switch(*((_DWORD *)v37 + 29))
      {
        case 0:
          break;
        case 1:
          __int16 v38 = "resolver";
          break;
        case 2:
          __int16 v38 = nw_endpoint_flow_mode_string(v3->mode_handler);
          break;
        case 3:
          __int16 v38 = "proxy";
          break;
        case 4:
          __int16 v38 = "fallback";
          break;
        case 5:
          __int16 v38 = "transform";
          break;
        default:
          __int16 v38 = "unknown-mode";
          break;
      }

      id v41 = v37;
      os_unfair_lock_lock(&v3->lock);
      id v42 = v41[8];
      os_unfair_lock_unlock(&v3->lock);

      *(_DWORD *)buf = 136447746;
      uint64_t v60 = "nw_endpoint_handler_reset_mode";
      __int16 v61 = 2082;
      uint64_t v62 = v58;
      __int16 v63 = 2082;
      uint64_t v64 = v28;
      __int16 v65 = 2082;
      id v66 = v30;
      __int16 v67 = 2082;
      __int16 v68 = v34;
      __int16 v69 = 2082;
      __int16 v70 = v38;
      __int16 v71 = 2114;
      id v72 = v42;
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] reset", buf, 0x48u);
    }
LABEL_49:
  }
LABEL_50:
}

void sub_18388FF50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL31nw_endpoint_handler_path_changeP30NWConcrete_nw_endpoint_handler_block_invoke_141(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
  char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
  if (minimize_logging)
  {
    if (logging_disabled) {
      goto LABEL_8;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    BOOL v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      long long v13 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v14 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      logging_description = nw_endpoint_get_logging_description(v14);
      nw_endpoint_t v16 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      char v17 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v18 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      int v19 = 136447746;
      os_log_type_t v20 = "nw_endpoint_handler_path_change_block_invoke";
      __int16 v21 = 2082;
      long long v22 = id_string;
      __int16 v23 = 2082;
      int v24 = v13;
      __int16 v25 = 2082;
      __int16 v26 = logging_description;
      __int16 v27 = 2082;
      __int16 v28 = v16;
      __int16 v29 = 2082;
      __int16 v30 = v17;
      __int16 v31 = 2114;
      id v32 = v18;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback timer fired, resetting", (uint8_t *)&v19, 0x48u);
    }
    goto LABEL_7;
  }
  if ((logging_disabled & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    BOOL v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      char v5 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      xpc_object_t v6 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v7 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      BOOL v8 = nw_endpoint_get_logging_description(v7);
      long long v9 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      char v10 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v11 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      int v19 = 136447746;
      os_log_type_t v20 = "nw_endpoint_handler_path_change_block_invoke";
      __int16 v21 = 2082;
      long long v22 = v5;
      __int16 v23 = 2082;
      int v24 = v6;
      __int16 v25 = 2082;
      __int16 v26 = v8;
      __int16 v27 = 2082;
      __int16 v28 = v9;
      __int16 v29 = 2082;
      __int16 v30 = v10;
      __int16 v31 = 2114;
      id v32 = v11;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback timer fired, resetting", (uint8_t *)&v19, 0x48u);
    }
LABEL_7:
  }
LABEL_8:
  nw_endpoint_handler_reset_mode(*(void **)(a1 + 32), 1);
}

void sub_1838902A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_should_perform_CrazyIvan46(NWConcrete_nw_endpoint_handler *a1)
{
  id v1 = a1;
  BOOL v2 = (nw_endpoint_t *)v1;
  BOOL v4 = v1->state == 1
    && !v1->mode
    && ((parent_handler = v1->parent_handler) == 0
     || parent_handler->mode != 1
     || nw_endpoint_get_type((nw_endpoint_t)parent_handler->endpoint) != nw_endpoint_type_address)
    && nw_endpoint_get_type(v2[3]) == nw_endpoint_type_address
    && nw_endpoint_get_address_family(v2[3]) == 2;

  return v4;
}

void sub_183890354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_should_do_local_only_resolution(NWConcrete_nw_endpoint_handler *a1)
{
  id v1 = a1;
  BOOL v2 = v1;
  BOOL v4 = v1->state == 1
    && !v1->mode
    && nw_path_has_unsatisfied_route(v1->current_path)
    && ((parent_handler = v2->parent_handler) == 0 || parent_handler->mode != 1)
    && nw_endpoint_get_type((nw_endpoint_t)v2->endpoint) == nw_endpoint_type_host;

  return v4;
}

void sub_1838903DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_handler_has_persistent_application_protocols_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return 0;
}

uint64_t ___ZL44nw_endpoint_handler_triggered_agents_updatedP30NWConcrete_nw_endpoint_handler_block_invoke(xpc_object_t *a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  char v5 = v4;
  if (v4 && object_getClass(v4) == (Class)MEMORY[0x1E4F14600])
  {
    memset(v12, 0, sizeof(v12));
    bytes = xpc_uuid_get_bytes(v5);
    uuid_unparse(bytes, v12);
    nw_endpoint_t v7 = xpc_dictionary_get_value(a1[4], v12);
    uint64_t v8 = xpc_dictionary_get_value(a1[5], v12);
    long long v9 = (void *)v8;
    if (v7)
    {
      if (v8)
      {
        int uint64 = xpc_dictionary_get_uint64(v7, "generation");
        if (uint64 == xpc_dictionary_get_uint64(v9, "generation")) {
          xpc_array_append_value(a1[6], v5);
        }
      }
    }
  }
  return 1;
}

void sub_183890520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_has_matching_handler(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (nw_endpoint_is_equal(*((void **)v3 + 3), v4[3], 31))
  {
    BOOL v5 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    os_log_type_t v12 = &v11;
    uint64_t v13 = 0x2020000000;
    char v14 = 0;
    if (objc_opt_respondsToSelector())
    {
      xpc_object_t v6 = (void *)*((void *)v3 + 31);
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      v8[2] = __nw_endpoint_handler_has_matching_handler_block_invoke;
      v8[3] = &unk_1E523FA18;
      long long v9 = v4;
      char v10 = &v11;
      [v6 applyWithHandler:v3 toChildren:v8];
    }
    BOOL v5 = *((unsigned char *)v12 + 24) != 0;
    _Block_object_dispose(&v11, 8);
  }

  return v5;
}

void sub_183890690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_handler_has_matching_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  int has_matching_handler = nw_endpoint_handler_has_matching_handler(a2, *(void *)(a1 + 32));
  if (has_matching_handler) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return has_matching_handler ^ 1u;
}

uint64_t __Block_byref_object_copy__31359(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__31360(uint64_t a1)
{
}

uint64_t __nw_endpoint_handler_copy_metadata_block_invoke(uint64_t a1)
{
  uint64_t v2 = ne_session_copy_app_data_from_flow_divert_socket();
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return 1;
}

uint64_t nw_endpoint_handler_uses_sleep_proxy(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 28);
    if (v2[29]._os_unfair_lock_opaque != 2)
    {
      uint64_t v5 = 0;
LABEL_12:
      os_unfair_lock_unlock(v2 + 28);
      goto LABEL_13;
    }
    uint64_t v3 = (os_unfair_lock_s *)*(id *)&v2[62]._os_unfair_lock_opaque;
    id v4 = v3;
    if (v3)
    {
      os_unfair_lock_lock(v3 + 220);
      if ((v4[8]._os_unfair_lock_opaque & 2) != 0 || (v4[8]._os_unfair_lock_opaque & 0x100) != 0)
      {
        uint64_t v5 = *(void *)&v4[230]._os_unfair_lock_opaque != 0;
      }
      else if (*(void *)&v4[234]._os_unfair_lock_opaque)
      {
        uint64_t v5 = nw_endpoint_handler_uses_sleep_proxy();
      }
      else
      {
        uint64_t v5 = 0;
      }
      os_unfair_lock_unlock(v4 + 220);
LABEL_11:

      goto LABEL_12;
    }
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_endpoint_flow_uses_sleep_proxy";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v12, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_endpoint_flow_uses_sleep_proxy";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v13 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v26 = "nw_endpoint_flow_uses_sleep_proxy";
            __int16 v27 = 2082;
            __int16 v28 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_endpoint_flow_uses_sleep_proxy";
          _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v13 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_endpoint_flow_uses_sleep_proxy";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_50:
    if (v12) {
      free(v12);
    }
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  nw_endpoint_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v26 = "nw_endpoint_handler_uses_sleep_proxy";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      long long v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_endpoint_handler_uses_sleep_proxy";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v23)
    {
      id v15 = (char *)__nw_create_backtrace_string();
      long long v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_endpoint_handler_uses_sleep_proxy";
          __int16 v27 = 2082;
          __int16 v28 = v15;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_endpoint_handler_uses_sleep_proxy";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      long long v9 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_endpoint_handler_uses_sleep_proxy";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_41:
  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0;
LABEL_13:

  return v5;
}

void sub_183890C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_is_multipath(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 28);
    if (v2[29]._os_unfair_lock_opaque == 2) {
      uint64_t is_multipath = nw_endpoint_flow_is_multipath(*(void **)&v2[62]._os_unfair_lock_opaque);
    }
    else {
      uint64_t is_multipath = 0;
    }
    os_unfair_lock_unlock(v2 + 28);
    goto LABEL_6;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_handler_is_multipath";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_is_multipath";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_endpoint_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_handler_is_multipath";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_is_multipath";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_endpoint_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_is_multipath";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v6) {
    free(v6);
  }
  uint64_t is_multipath = 0;
LABEL_6:

  return is_multipath;
}

void sub_183890F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_multipath_tcp_info(void *a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 28);
    if (v2[29]._os_unfair_lock_opaque != 2)
    {
      id v6 = 0;
LABEL_23:
      os_unfair_lock_unlock(v2 + 28);
      goto LABEL_24;
    }
    id v3 = *(id *)&v2[62]._os_unfair_lock_opaque;
    if (v3)
    {
      xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
      if (v4)
      {
        if (nw_endpoint_flow_is_multipath(v3))
        {
          id v5 = nw_endpoint_flow_copy_connected_socket_wrapper(v3);
          if (v5)
          {
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3221225472;
            *(void *)&buf[16] = ___Z40nw_endpoint_flow_copy_multipath_tcp_infoP27NWConcrete_nw_endpoint_flow_block_invoke;
            __int16 v36 = &unk_1E524A220;
            id v37 = v4;
            nw_fd_wrapper_get_fd(v5, buf);
          }
          id v6 = v4;

          goto LABEL_21;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s Called on non-Multipath connection", buf, 0xCu);
        }

LABEL_20:
        id v6 = 0;
LABEL_21:

LABEL_22:
        goto LABEL_23;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
      os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v33 = 0;
      if (__nwlog_fault(v8, &type, &v33))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          long long v9 = (id)gLogObj;
          os_log_type_t v10 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
            _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
          }
        }
        else if (v33)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          long long v9 = (id)gLogObj;
          os_log_type_t v14 = type;
          BOOL v15 = os_log_type_enabled(v9, type);
          if (backtrace_string)
          {
            if (v15)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v8) {
              goto LABEL_20;
            }
            goto LABEL_16;
          }
          if (v15)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
            _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          long long v9 = (id)gLogObj;
          os_log_type_t v16 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
            _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v8) {
        goto LABEL_20;
      }
LABEL_16:
      free(v8);
      goto LABEL_20;
    }
    os_log_type_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v22, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if (v33)
      {
        __int16 v28 = (char *)__nw_create_backtrace_string();
        char v23 = __nwlog_obj();
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v23, type);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v28;
            _os_log_impl(&dword_1830D4000, v23, v29, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v28);
          goto LABEL_72;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
          _os_log_impl(&dword_1830D4000, v23, v29, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v23 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
          _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_72:
    if (v22) {
      free(v22);
    }
    id v6 = 0;
    goto LABEL_22;
  }
  __int16 v17 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
  id v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (__nwlog_fault(v18, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v33)
    {
      __int16 v25 = (char *)__nw_create_backtrace_string();
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v19, type);
      if (v25)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v25;
          _os_log_impl(&dword_1830D4000, v19, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v25);
        goto LABEL_63;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
        _os_log_impl(&dword_1830D4000, v19, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
        _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_63:
  if (v18) {
    free(v18);
  }
  id v6 = 0;
LABEL_24:

  return v6;
}

void sub_18389181C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_parent(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[9];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_handler_copy_parent";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_handler_copy_parent";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_endpoint_handler_get_flow_id(void *a1, _OWORD *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v45 = "nw_endpoint_handler_get_flow_id";
    __int16 v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v25, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v45 = "nw_endpoint_handler_get_flow_id";
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v26 = __nwlog_obj();
        os_log_type_t v33 = type;
        BOOL v34 = os_log_type_enabled(v26, type);
        if (backtrace_string)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v45 = "nw_endpoint_handler_get_flow_id";
            __int16 v46 = 2082;
            __int16 v47 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v26, v33, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_60;
        }
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v45 = "nw_endpoint_handler_get_flow_id";
          _os_log_impl(&dword_1830D4000, v26, v33, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v26 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v45 = "nw_endpoint_handler_get_flow_id";
          _os_log_impl(&dword_1830D4000, v26, v38, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_60:
    if (v25) {
      free(v25);
    }
    goto LABEL_33;
  }
  if (*((_DWORD *)v3 + 29) == 2)
  {
    id v5 = (os_unfair_lock_s *)v3[31];
    id v6 = v5;
    if (v5)
    {
      if ((v5[8]._os_unfair_lock_opaque & 2) == 0 && (v5[8]._os_unfair_lock_opaque & 0x100) == 0)
      {
        os_unfair_lock_lock(v5 + 220);
        uint64_t v7 = *(void *)&v6[234]._os_unfair_lock_opaque;
        if (v7) {
          uint64_t flow_id = nw_endpoint_handler_get_flow_id(v7, a2);
        }
        else {
          uint64_t flow_id = 0;
        }
        os_unfair_lock_unlock(v6 + 220);
        goto LABEL_71;
      }
      BOOL v15 = *(void **)&v5[208]._os_unfair_lock_opaque;
      if (v15)
      {
        os_log_type_t v16 = v15;
        int is_null = uuid_is_null(v16 + 32);
        uint64_t flow_id = is_null == 0;
        if (!is_null) {
          *a2 = *((_OWORD *)v16 + 2);
        }

        goto LABEL_71;
      }
LABEL_70:
      uint64_t flow_id = 0;
LABEL_71:

      goto LABEL_72;
    }
    __int16 v28 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v45 = "nw_endpoint_flow_get_flow_id";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v29, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v45 = "nw_endpoint_flow_get_flow_id";
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if (v42)
      {
        id v35 = (char *)__nw_create_backtrace_string();
        BOOL v30 = __nwlog_obj();
        os_log_type_t v36 = type;
        BOOL v37 = os_log_type_enabled(v30, type);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v45 = "nw_endpoint_flow_get_flow_id";
            __int16 v46 = 2082;
            __int16 v47 = v35;
            _os_log_impl(&dword_1830D4000, v30, v36, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v35);
          goto LABEL_68;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v45 = "nw_endpoint_flow_get_flow_id";
          _os_log_impl(&dword_1830D4000, v30, v36, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v30 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v45 = "nw_endpoint_flow_get_flow_id";
          _os_log_impl(&dword_1830D4000, v30, v39, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_68:
    if (v29) {
      free(v29);
    }
    goto LABEL_70;
  }
  if ((*((unsigned char *)v3 + 268) & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    long long v9 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (*((unsigned char *)v4 + 268)) {
        os_log_type_t v10 = "dry-run ";
      }
      else {
        os_log_type_t v10 = "";
      }
      nw_endpoint_t v11 = nw_endpoint_handler_copy_endpoint(v4);
      logging_description = nw_endpoint_get_logging_description(v11);
      uint64_t v13 = *((unsigned int *)v4 + 30);
      if (v13 > 5) {
        os_log_type_t v14 = "unknown-state";
      }
      else {
        os_log_type_t v14 = off_1E523FB38[v13];
      }
      id v18 = v4;
      uint64_t v19 = (os_unfair_lock_s *)v18;
      nw_endpoint_t v41 = v11;
      os_log_type_t v20 = "path";
      switch(*((_DWORD *)v4 + 29))
      {
        case 0:
          break;
        case 1:
          os_log_type_t v20 = "resolver";
          break;
        case 2:
          os_log_type_t v20 = nw_endpoint_flow_mode_string(v18[31]);
          break;
        case 3:
          os_log_type_t v20 = "proxy";
          break;
        case 4:
          os_log_type_t v20 = "fallback";
          break;
        case 5:
          os_log_type_t v20 = "transform";
          break;
        default:
          os_log_type_t v20 = "unknown-mode";
          break;
      }

      os_log_type_t v21 = v19 + 28;
      os_log_type_t v22 = v19;
      os_unfair_lock_lock(v19 + 28);
      id v23 = v22[8];
      os_unfair_lock_unlock(v21);

      *(_DWORD *)buf = 136447746;
      nw_endpoint_t v45 = "nw_endpoint_handler_get_flow_id";
      __int16 v46 = 2082;
      __int16 v47 = (char *)(v4 + 21);
      __int16 v48 = 2082;
      id v49 = v10;
      __int16 v50 = 2082;
      char v51 = logging_description;
      __int16 v52 = 2082;
      char v53 = v14;
      __int16 v54 = 2082;
      BOOL v55 = v20;
      __int16 v56 = 2114;
      id v57 = v23;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is not flow", buf, 0x48u);
    }
  }
LABEL_33:
  uint64_t flow_id = 0;
LABEL_72:

  return flow_id;
}

void sub_183892278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_used_prefer_fallback(void *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "nw_endpoint_handler_used_prefer_fallback";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v7, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_endpoint_handler_used_prefer_fallback";
          _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_22:

        goto LABEL_23;
      }
      if (!v29)
      {
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_endpoint_handler_used_prefer_fallback";
          _os_log_impl(&dword_1830D4000, v8, v27, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_endpoint_handler_used_prefer_fallback";
          _os_log_impl(&dword_1830D4000, v8, v22, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_22;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v32 = "nw_endpoint_handler_used_prefer_fallback";
        __int16 v33 = 2082;
        BOOL v34 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v22, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_23:
    if (!v7)
    {
LABEL_25:
      uint64_t v5 = 0;
      goto LABEL_26;
    }
LABEL_24:
    free(v7);
    goto LABEL_25;
  }
  if (*((_DWORD *)v1 + 29) != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "nw_endpoint_handler_used_prefer_fallback";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v7, &type, &v29)) {
      goto LABEL_23;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_endpoint_handler_used_prefer_fallback";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s Endpoint handler is not in fallback mode", buf, 0xCu);
      }
    }
    else if (v29)
    {
      os_log_type_t v10 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (v10)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v32 = "nw_endpoint_handler_used_prefer_fallback";
          __int16 v33 = 2082;
          BOOL v34 = v10;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s Endpoint handler is not in fallback mode, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v10);
        if (!v7) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_endpoint_handler_used_prefer_fallback";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s Endpoint handler is not in fallback mode, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_endpoint_handler_used_prefer_fallback";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s Endpoint handler is not in fallback mode, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_22;
  }
  id v3 = (unsigned __int8 *)v1[31];
  xpc_object_t v4 = v3;
  if (!v3)
  {
    __int16 v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "nw_endpoint_fallback_used_prefer_fallback";
    id v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_endpoint_fallback_used_prefer_fallback";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null fallback", buf, 0xCu);
        }
      }
      else if (v29)
      {
        os_log_type_t v24 = (char *)__nw_create_backtrace_string();
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v25 = type;
        BOOL v26 = os_log_type_enabled(v19, type);
        if (v24)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v32 = "nw_endpoint_fallback_used_prefer_fallback";
            __int16 v33 = 2082;
            BOOL v34 = v24;
            _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null fallback, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v24);
          goto LABEL_59;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_endpoint_fallback_used_prefer_fallback";
          _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null fallback, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_endpoint_fallback_used_prefer_fallback";
          _os_log_impl(&dword_1830D4000, v19, v28, "%{public}s called with null fallback, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_59:
    if (v18) {
      free(v18);
    }
    uint64_t v5 = 0;
    goto LABEL_5;
  }
  uint64_t v5 = (v3[108] >> 4) & 1;
LABEL_5:

LABEL_26:
  return v5;
}

void nw_endpoint_handler_reset_expected_progress_target(void *a1, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = v5;
  if (v5)
  {
    int v7 = v5[29];
    if (v7 == 4)
    {
      nw_endpoint_fallback_reset_expected_progress_target(v5, a2);
    }
    else if (v7 == 2)
    {
      nw_endpoint_flow_reset_expected_progress_target(v5, a2, a3);
    }
    goto LABEL_6;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_endpoint_handler_reset_expected_progress_target";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_endpoint_handler_reset_expected_progress_target";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v19 = "nw_endpoint_handler_reset_expected_progress_target";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_endpoint_handler_reset_expected_progress_target";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_endpoint_handler_reset_expected_progress_target";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v9) {
    free(v9);
  }
LABEL_6:
}

void sub_183892CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_mode_handler *nw_endpoint_handler_copy_proxy(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v34 = "nw_endpoint_handler_copy_proxy";
    BOOL v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v23, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v24 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "nw_endpoint_handler_copy_proxy";
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v24 = __nwlog_obj();
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v34 = "nw_endpoint_handler_copy_proxy";
            __int16 v35 = 2082;
            id_str = backtrace_string;
            _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "nw_endpoint_handler_copy_proxy";
          _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v24 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "nw_endpoint_handler_copy_proxy";
          _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_48:
    if (v23) {
      free(v23);
    }
    goto LABEL_30;
  }
  if (v1->mode != 3)
  {
    if ((*((unsigned char *)v1 + 268) & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      xpc_object_t v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        if (*((unsigned char *)v2 + 268)) {
          uint64_t v5 = "dry-run ";
        }
        else {
          uint64_t v5 = "";
        }
        nw_endpoint_t v6 = nw_endpoint_handler_copy_endpoint(v2);
        logging_description = nw_endpoint_get_logging_description(v6);
        uint64_t state = v2->state;
        os_log_type_t v9 = logging_description;
        if (state > 5) {
          os_log_type_t v10 = "unknown-state";
        }
        else {
          os_log_type_t v10 = off_1E523FB38[state];
        }
        BOOL v30 = v10;
        os_log_type_t v11 = v2;
        BOOL v12 = (os_unfair_lock_s *)v11;
        os_log_type_t v13 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            os_log_type_t v13 = "resolver";
            break;
          case 2:
            os_log_type_t v13 = nw_endpoint_flow_mode_string(v11->mode_handler);
            break;
          case 3:
            os_log_type_t v13 = "proxy";
            break;
          case 4:
            os_log_type_t v13 = "fallback";
            break;
          case 5:
            os_log_type_t v13 = "transform";
            break;
          default:
            os_log_type_t v13 = "unknown-mode";
            break;
        }

        BOOL v14 = v12 + 28;
        os_log_type_t v15 = v12;
        os_unfair_lock_lock(v12 + 28);
        id v16 = v15[8];
        os_unfair_lock_unlock(v14);

        id v17 = v16;
        id v18 = v15;
        uint64_t v19 = v18;
        __int16 v20 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            __int16 v20 = "resolver";
            break;
          case 2:
            __int16 v20 = nw_endpoint_flow_mode_string(v18[31]);
            break;
          case 3:
            __int16 v20 = "proxy";
            break;
          case 4:
            __int16 v20 = "fallback";
            break;
          case 5:
            __int16 v20 = "transform";
            break;
          default:
            __int16 v20 = "unknown-mode";
            break;
        }

        *(_DWORD *)buf = 136448002;
        BOOL v34 = "nw_endpoint_handler_copy_proxy";
        __int16 v35 = 2082;
        id_str = v2->id_str;
        __int16 v37 = 2082;
        os_log_type_t v38 = v5;
        __int16 v39 = 2082;
        id v40 = v9;
        __int16 v41 = 2082;
        char v42 = v30;
        __int16 v43 = 2082;
        uint64_t v44 = v13;
        __int16 v45 = 2114;
        id v46 = v17;
        __int16 v47 = 2082;
        __int16 v48 = v20;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is %{public}s, not a proxy", buf, 0x52u);
      }
    }
LABEL_30:
    id v3 = 0;
    goto LABEL_31;
  }
  id v3 = v1->mode_handler;
LABEL_31:

  return v3;
}

void sub_183893260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_mode_handler *nw_endpoint_handler_copy_fallback(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v34 = "nw_endpoint_handler_copy_fallback";
    BOOL v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v23, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v24 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "nw_endpoint_handler_copy_fallback";
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v24 = __nwlog_obj();
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v34 = "nw_endpoint_handler_copy_fallback";
            __int16 v35 = 2082;
            id_str = backtrace_string;
            _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "nw_endpoint_handler_copy_fallback";
          _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v24 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "nw_endpoint_handler_copy_fallback";
          _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_48:
    if (v23) {
      free(v23);
    }
    goto LABEL_30;
  }
  if (v1->mode != 4)
  {
    if ((*((unsigned char *)v1 + 268) & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      xpc_object_t v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        if (*((unsigned char *)v2 + 268)) {
          uint64_t v5 = "dry-run ";
        }
        else {
          uint64_t v5 = "";
        }
        nw_endpoint_t v6 = nw_endpoint_handler_copy_endpoint(v2);
        logging_description = nw_endpoint_get_logging_description(v6);
        uint64_t state = v2->state;
        os_log_type_t v9 = logging_description;
        if (state > 5) {
          os_log_type_t v10 = "unknown-state";
        }
        else {
          os_log_type_t v10 = off_1E523FB38[state];
        }
        BOOL v30 = v10;
        os_log_type_t v11 = v2;
        BOOL v12 = (os_unfair_lock_s *)v11;
        os_log_type_t v13 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            os_log_type_t v13 = "resolver";
            break;
          case 2:
            os_log_type_t v13 = nw_endpoint_flow_mode_string(v11->mode_handler);
            break;
          case 3:
            os_log_type_t v13 = "proxy";
            break;
          case 4:
            os_log_type_t v13 = "fallback";
            break;
          case 5:
            os_log_type_t v13 = "transform";
            break;
          default:
            os_log_type_t v13 = "unknown-mode";
            break;
        }

        BOOL v14 = v12 + 28;
        os_log_type_t v15 = v12;
        os_unfair_lock_lock(v12 + 28);
        id v16 = v15[8];
        os_unfair_lock_unlock(v14);

        id v17 = v16;
        id v18 = v15;
        uint64_t v19 = v18;
        __int16 v20 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            __int16 v20 = "resolver";
            break;
          case 2:
            __int16 v20 = nw_endpoint_flow_mode_string(v18[31]);
            break;
          case 3:
            __int16 v20 = "proxy";
            break;
          case 4:
            __int16 v20 = "fallback";
            break;
          case 5:
            __int16 v20 = "transform";
            break;
          default:
            __int16 v20 = "unknown-mode";
            break;
        }

        *(_DWORD *)buf = 136448002;
        BOOL v34 = "nw_endpoint_handler_copy_fallback";
        __int16 v35 = 2082;
        id_str = v2->id_str;
        __int16 v37 = 2082;
        os_log_type_t v38 = v5;
        __int16 v39 = 2082;
        id v40 = v9;
        __int16 v41 = 2082;
        char v42 = v30;
        __int16 v43 = 2082;
        uint64_t v44 = v13;
        __int16 v45 = 2114;
        id v46 = v17;
        __int16 v47 = 2082;
        __int16 v48 = v20;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is %{public}s, not fallback", buf, 0x52u);
      }
    }
LABEL_30:
    id v3 = 0;
    goto LABEL_31;
  }
  id v3 = v1->mode_handler;
LABEL_31:

  return v3;
}

void sub_1838937DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_apply_to_leaf_children(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if (objc_opt_respondsToSelector())
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v27 = 1;
      *(void *)os_log_type_t type = 0;
      uint64_t v22 = type;
      uint64_t v23 = 0x2020000000;
      char v24 = 0;
      uint64_t v5 = (void *)v3[31];
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      void v17[2] = __nw_endpoint_handler_apply_to_leaf_children_block_invoke;
      v17[3] = &unk_1E523FA68;
      uint64_t v19 = type;
      __int16 v20 = buf;
      id v6 = v4;
      id v18 = v6;
      [v5 applyWithHandler:v3 toChildren:v17];
      if (*((unsigned char *)v22 + 24)) {
        uint64_t v7 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
      }
      else {
        uint64_t v7 = (*((uint64_t (**)(id, void *))v6 + 2))(v6, v3);
      }

      _Block_object_dispose(type, 8);
      _Block_object_dispose(buf, 8);
    }
    else
    {
      uint64_t v7 = (*((uint64_t (**)(id, void *))v4 + 2))(v4, v3);
    }
    goto LABEL_8;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_handler_apply_to_leaf_children";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v10, type, &v25))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_apply_to_leaf_children";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v14 = type[0];
      BOOL v15 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_apply_to_leaf_children";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_apply_to_leaf_children";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_apply_to_leaf_children";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v10) {
    free(v10);
  }
  uint64_t v7 = 0;
LABEL_8:

  return v7;
}

void sub_183893C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_handler_apply_to_leaf_children_block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = nw_endpoint_handler_apply_to_leaf_children(v3, a1[4]);
  }
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[6] + 8) + 24);

  return v5;
}

void sub_183893CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_proxy_privacy_stance(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[66];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_handler_get_proxy_privacy_stance";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_get_proxy_privacy_stance";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_handler_get_proxy_privacy_stance";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_get_proxy_privacy_stance";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_get_proxy_privacy_stance";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void sub_18389403C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.os_log_type_t receiver = v9;
  a9.super_class = (Class)NWConcrete_nw_pac_resolver;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

CFMutableArrayRef ___ZL27nw_get_outstanding_pac_urlsv_block_invoke()
{
  CFMutableArrayRef result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  nw_get_outstanding_pac_urls(void)::gPACURLs = (uint64_t)result;
  return result;
}

NWConcrete_nw_pac_resolver *nw_pac_resolver_create_with_script(const void *a1, const void *a2, void *a3, char a4, int a5, int a6, int a7, uint64_t a8, void *a9)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  id v17 = a3;
  id v18 = a9;
  uint64_t v19 = v18;
  __int16 v71 = v17;
  if (a1)
  {
    if (a2)
    {
      if (v18)
      {
        if (v17)
        {
          if (a8)
          {
            __int16 v20 = objc_alloc_init(NWConcrete_nw_pac_resolver);
            if (v20)
            {
              *((void *)v20 + 3) = CFRetain(a2);
              *((void *)v20 + 5) = CFRetain(a1);
              os_log_type_t v21 = _Block_copy(v19);
              uint64_t v22 = (void *)*((void *)v20 + 1);
              *((void *)v20 + 1) = v21;

              objc_storeStrong((id *)v20 + 2, a3);
              uint64_t v23 = 0;
              if (a5) {
                char v24 = 2;
              }
              else {
                char v24 = 0;
              }
              if (a6) {
                char v25 = 4;
              }
              else {
                char v25 = 0;
              }
              char v26 = v24 | a4;
              if (a7) {
                char v27 = 8;
              }
              else {
                char v27 = 0;
              }
              *((unsigned char *)v20 + 159) = v26 | v25 | v27 | *((unsigned char *)v20 + 159) & 0xF0;
              uint64_t v28 = (char *)v20 + 84;
              unint64_t v29 = 75;
              while (1)
              {
                int v30 = *(unsigned __int8 *)(a8 + v23);
                v28[v23] = v30;
                if (!v30) {
                  break;
                }
                --v29;
                ++v23;
                if (v29 <= 1)
                {
                  v28[v23] = 0;
                  break;
                }
              }
              char v31 = v20;
              goto LABEL_40;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v32 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            BOOL v75 = "nw_pac_resolver_create_with_script";
            __int16 v33 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v72 = 0;
            if (__nwlog_fault(v33, &type, &v72))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                BOOL v34 = (id)gLogObj;
                os_log_type_t v35 = type;
                if (os_log_type_enabled(v34, type))
                {
                  *(_DWORD *)buf = 136446210;
                  BOOL v75 = "nw_pac_resolver_create_with_script";
                  _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s nw_pac_resolver_obj_alloc failed", buf, 0xCu);
                }
LABEL_25:

                goto LABEL_38;
              }
              if (!v72)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                BOOL v34 = (id)gLogObj;
                os_log_type_t v40 = type;
                if (os_log_type_enabled(v34, type))
                {
                  *(_DWORD *)buf = 136446210;
                  BOOL v75 = "nw_pac_resolver_create_with_script";
                  _os_log_impl(&dword_1830D4000, v34, v40, "%{public}s nw_pac_resolver_obj_alloc failed, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_25;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v37 = (id)gLogObj;
              os_log_type_t v38 = type;
              BOOL v39 = os_log_type_enabled(v37, type);
              if (backtrace_string)
              {
                if (v39)
                {
                  *(_DWORD *)buf = 136446466;
                  BOOL v75 = "nw_pac_resolver_create_with_script";
                  __int16 v76 = 2082;
                  uint64_t v77 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s nw_pac_resolver_obj_alloc failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(backtrace_string);
                if (!v33) {
                  goto LABEL_40;
                }
                goto LABEL_39;
              }
              if (v39)
              {
                *(_DWORD *)buf = 136446210;
                BOOL v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s nw_pac_resolver_obj_alloc failed, no backtrace", buf, 0xCu);
              }
            }
LABEL_38:
            if (!v33)
            {
LABEL_40:

              goto LABEL_41;
            }
LABEL_39:
            free(v33);
            goto LABEL_40;
          }
          __int16 v52 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          BOOL v75 = "nw_pac_resolver_create_with_script";
          __int16 v43 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v72 = 0;
          if (__nwlog_fault(v43, &type, &v72))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              uint64_t v44 = __nwlog_obj();
              os_log_type_t v53 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                BOOL v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl(&dword_1830D4000, v44, v53, "%{public}s called with null logging_id_str", buf, 0xCu);
              }
LABEL_109:

              goto LABEL_92;
            }
            if (!v72)
            {
              uint64_t v44 = __nwlog_obj();
              os_log_type_t v70 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                BOOL v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl(&dword_1830D4000, v44, v70, "%{public}s called with null logging_id_str, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_109;
            }
            __int16 v54 = (char *)__nw_create_backtrace_string();
            BOOL v55 = __nwlog_obj();
            os_log_type_t v64 = type;
            BOOL v65 = os_log_type_enabled(v55, type);
            if (v54)
            {
              if (v65)
              {
                *(_DWORD *)buf = 136446466;
                BOOL v75 = "nw_pac_resolver_create_with_script";
                __int16 v76 = 2082;
                uint64_t v77 = v54;
                _os_log_impl(&dword_1830D4000, v55, v64, "%{public}s called with null logging_id_str, dumping backtrace:%{public}s", buf, 0x16u);
              }
LABEL_91:

              free(v54);
              goto LABEL_92;
            }
            if (v65)
            {
              *(_DWORD *)buf = 136446210;
              BOOL v75 = "nw_pac_resolver_create_with_script";
              _os_log_impl(&dword_1830D4000, v55, v64, "%{public}s called with null logging_id_str, no backtrace", buf, 0xCu);
            }
            goto LABEL_124;
          }
        }
        else
        {
          __int16 v50 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          BOOL v75 = "nw_pac_resolver_create_with_script";
          __int16 v43 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v72 = 0;
          if (__nwlog_fault(v43, &type, &v72))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              uint64_t v44 = __nwlog_obj();
              os_log_type_t v51 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                BOOL v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl(&dword_1830D4000, v44, v51, "%{public}s called with null context", buf, 0xCu);
              }
              goto LABEL_109;
            }
            if (!v72)
            {
              uint64_t v44 = __nwlog_obj();
              os_log_type_t v69 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                BOOL v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl(&dword_1830D4000, v44, v69, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_109;
            }
            __int16 v54 = (char *)__nw_create_backtrace_string();
            BOOL v55 = __nwlog_obj();
            os_log_type_t v62 = type;
            BOOL v63 = os_log_type_enabled(v55, type);
            if (v54)
            {
              if (v63)
              {
                *(_DWORD *)buf = 136446466;
                BOOL v75 = "nw_pac_resolver_create_with_script";
                __int16 v76 = 2082;
                uint64_t v77 = v54;
                _os_log_impl(&dword_1830D4000, v55, v62, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
              }
              goto LABEL_91;
            }
            if (v63)
            {
              *(_DWORD *)buf = 136446210;
              BOOL v75 = "nw_pac_resolver_create_with_script";
              _os_log_impl(&dword_1830D4000, v55, v62, "%{public}s called with null context, no backtrace", buf, 0xCu);
            }
LABEL_124:
          }
        }
      }
      else
      {
        __int16 v48 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        BOOL v75 = "nw_pac_resolver_create_with_script";
        __int16 v43 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v72 = 0;
        if (__nwlog_fault(v43, &type, &v72))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v44 = __nwlog_obj();
            os_log_type_t v49 = type;
            if (os_log_type_enabled(v44, type))
            {
              *(_DWORD *)buf = 136446210;
              BOOL v75 = "nw_pac_resolver_create_with_script";
              _os_log_impl(&dword_1830D4000, v44, v49, "%{public}s called with null result_handler", buf, 0xCu);
            }
            goto LABEL_109;
          }
          if (!v72)
          {
            uint64_t v44 = __nwlog_obj();
            os_log_type_t v68 = type;
            if (os_log_type_enabled(v44, type))
            {
              *(_DWORD *)buf = 136446210;
              BOOL v75 = "nw_pac_resolver_create_with_script";
              _os_log_impl(&dword_1830D4000, v44, v68, "%{public}s called with null result_handler, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_109;
          }
          __int16 v54 = (char *)__nw_create_backtrace_string();
          BOOL v55 = __nwlog_obj();
          os_log_type_t v60 = type;
          BOOL v61 = os_log_type_enabled(v55, type);
          if (v54)
          {
            if (v61)
            {
              *(_DWORD *)buf = 136446466;
              BOOL v75 = "nw_pac_resolver_create_with_script";
              __int16 v76 = 2082;
              uint64_t v77 = v54;
              _os_log_impl(&dword_1830D4000, v55, v60, "%{public}s called with null result_handler, dumping backtrace:%{public}s", buf, 0x16u);
            }
            goto LABEL_91;
          }
          if (v61)
          {
            *(_DWORD *)buf = 136446210;
            BOOL v75 = "nw_pac_resolver_create_with_script";
            _os_log_impl(&dword_1830D4000, v55, v60, "%{public}s called with null result_handler, no backtrace", buf, 0xCu);
          }
          goto LABEL_124;
        }
      }
    }
    else
    {
      id v46 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      BOOL v75 = "nw_pac_resolver_create_with_script";
      __int16 v43 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (__nwlog_fault(v43, &type, &v72))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v44 = __nwlog_obj();
          os_log_type_t v47 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v75 = "nw_pac_resolver_create_with_script";
            _os_log_impl(&dword_1830D4000, v44, v47, "%{public}s called with null endpointURL", buf, 0xCu);
          }
          goto LABEL_109;
        }
        if (!v72)
        {
          uint64_t v44 = __nwlog_obj();
          os_log_type_t v67 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v75 = "nw_pac_resolver_create_with_script";
            _os_log_impl(&dword_1830D4000, v44, v67, "%{public}s called with null endpointURL, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_109;
        }
        __int16 v54 = (char *)__nw_create_backtrace_string();
        BOOL v55 = __nwlog_obj();
        os_log_type_t v58 = type;
        BOOL v59 = os_log_type_enabled(v55, type);
        if (v54)
        {
          if (v59)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v75 = "nw_pac_resolver_create_with_script";
            __int16 v76 = 2082;
            uint64_t v77 = v54;
            _os_log_impl(&dword_1830D4000, v55, v58, "%{public}s called with null endpointURL, dumping backtrace:%{public}s", buf, 0x16u);
          }
          goto LABEL_91;
        }
        if (v59)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v75 = "nw_pac_resolver_create_with_script";
          _os_log_impl(&dword_1830D4000, v55, v58, "%{public}s called with null endpointURL, no backtrace", buf, 0xCu);
        }
        goto LABEL_124;
      }
    }
  }
  else
  {
    char v42 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v75 = "nw_pac_resolver_create_with_script";
    __int16 v43 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v72 = 0;
    if (__nwlog_fault(v43, &type, &v72))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v75 = "nw_pac_resolver_create_with_script";
          _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null pacScript", buf, 0xCu);
        }
        goto LABEL_109;
      }
      if (!v72)
      {
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v66 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v75 = "nw_pac_resolver_create_with_script";
          _os_log_impl(&dword_1830D4000, v44, v66, "%{public}s called with null pacScript, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_109;
      }
      __int16 v54 = (char *)__nw_create_backtrace_string();
      BOOL v55 = __nwlog_obj();
      os_log_type_t v56 = type;
      BOOL v57 = os_log_type_enabled(v55, type);
      if (v54)
      {
        if (v57)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v75 = "nw_pac_resolver_create_with_script";
          __int16 v76 = 2082;
          uint64_t v77 = v54;
          _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s called with null pacScript, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_91;
      }
      if (v57)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v75 = "nw_pac_resolver_create_with_script";
        _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s called with null pacScript, no backtrace", buf, 0xCu);
      }
      goto LABEL_124;
    }
  }
LABEL_92:
  if (v43) {
    free(v43);
  }
  __int16 v20 = 0;
LABEL_41:

  return v20;
}

void sub_183895148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_pac_resolver *nw_pac_resolver_create_with_url(const void *a1, const void *a2, const void *a3, const void *a4, void *a5, char a6, int a7, int a8, char a9, uint64_t a10, void *a11)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  id v19 = a5;
  id v20 = a11;
  uint64_t v78 = v19;
  if (a1)
  {
    if (a2)
    {
      if (v20)
      {
        aBlock = v20;
        if (v19)
        {
          if (a10)
          {
            os_log_type_t v21 = objc_alloc_init(NWConcrete_nw_pac_resolver);
            if (v21)
            {
              *((void *)v21 + 3) = CFRetain(a2);
              *((void *)v21 + 4) = CFRetain(a1);
              if (a3) {
                *((void *)v21 + 6) = CFRetain(a3);
              }
              if (a4) {
                *((void *)v21 + 7) = CFRetain(a4);
              }
              uint64_t v22 = _Block_copy(aBlock);
              uint64_t v23 = (void *)*((void *)v21 + 1);
              *((void *)v21 + 1) = v22;

              objc_storeStrong((id *)v21 + 2, a5);
              uint64_t v24 = 0;
              if (a7) {
                char v25 = 2;
              }
              else {
                char v25 = 0;
              }
              if (a8) {
                char v26 = 4;
              }
              else {
                char v26 = 0;
              }
              char v27 = v25 | a6;
              if (a9) {
                char v28 = 8;
              }
              else {
                char v28 = 0;
              }
              *((unsigned char *)v21 + 159) = v27 | v26 | v28 | *((unsigned char *)v21 + 159) & 0xF0;
              unint64_t v29 = (char *)v21 + 84;
              unint64_t v30 = 75;
              while (1)
              {
                int v31 = *(unsigned __int8 *)(a10 + v24);
                v29[v24] = v31;
                if (!v31) {
                  break;
                }
                --v30;
                ++v24;
                if (v30 <= 1)
                {
                  v29[v24] = 0;
                  break;
                }
              }
              id v32 = v21;
              goto LABEL_44;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v33 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            os_log_type_t v83 = "nw_pac_resolver_create_with_url";
            BOOL v34 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v80 = 0;
            if (__nwlog_fault(v34, &type, &v80))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v35 = (id)gLogObj;
                os_log_type_t v36 = type;
                if (os_log_type_enabled(v35, type))
                {
                  *(_DWORD *)buf = 136446210;
                  os_log_type_t v83 = "nw_pac_resolver_create_with_url";
                  _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s nw_pac_resolver_obj_alloc failed", buf, 0xCu);
                }
LABEL_29:

                goto LABEL_42;
              }
              if (!v80)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v35 = (id)gLogObj;
                os_log_type_t v41 = type;
                if (os_log_type_enabled(v35, type))
                {
                  *(_DWORD *)buf = 136446210;
                  os_log_type_t v83 = "nw_pac_resolver_create_with_url";
                  _os_log_impl(&dword_1830D4000, v35, v41, "%{public}s nw_pac_resolver_obj_alloc failed, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_29;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v38 = (id)gLogObj;
              os_log_type_t v39 = type;
              BOOL v40 = os_log_type_enabled(v38, type);
              if (backtrace_string)
              {
                if (v40)
                {
                  *(_DWORD *)buf = 136446466;
                  os_log_type_t v83 = "nw_pac_resolver_create_with_url";
                  __int16 v84 = 2082;
                  BOOL v85 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s nw_pac_resolver_obj_alloc failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(backtrace_string);
                if (!v34) {
                  goto LABEL_44;
                }
                goto LABEL_43;
              }
              if (v40)
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v83 = "nw_pac_resolver_create_with_url";
                _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s nw_pac_resolver_obj_alloc failed, no backtrace", buf, 0xCu);
              }
            }
LABEL_42:
            if (!v34)
            {
LABEL_44:

LABEL_45:
              char v42 = (void *)aBlock;
              goto LABEL_46;
            }
LABEL_43:
            free(v34);
            goto LABEL_44;
          }
          os_log_type_t v56 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "nw_pac_resolver_create_with_url";
          os_log_type_t v53 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v80 = 0;
          if (__nwlog_fault(v53, &type, &v80))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __int16 v54 = __nwlog_obj();
              os_log_type_t v57 = type;
              if (os_log_type_enabled(v54, type))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v83 = "nw_pac_resolver_create_with_url";
                _os_log_impl(&dword_1830D4000, v54, v57, "%{public}s called with null logging_id_str", buf, 0xCu);
              }
LABEL_112:

              goto LABEL_131;
            }
            if (!v80)
            {
              __int16 v54 = __nwlog_obj();
              os_log_type_t v77 = type;
              if (os_log_type_enabled(v54, type))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v83 = "nw_pac_resolver_create_with_url";
                _os_log_impl(&dword_1830D4000, v54, v77, "%{public}s called with null logging_id_str, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_112;
            }
            os_log_type_t v70 = (char *)__nw_create_backtrace_string();
            os_log_type_t v67 = __nwlog_obj();
            os_log_type_t v71 = type;
            BOOL v72 = os_log_type_enabled(v67, type);
            if (v70)
            {
              if (v72)
              {
                *(_DWORD *)buf = 136446466;
                os_log_type_t v83 = "nw_pac_resolver_create_with_url";
                __int16 v84 = 2082;
                BOOL v85 = v70;
                _os_log_impl(&dword_1830D4000, v67, v71, "%{public}s called with null logging_id_str, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v70);
              if (!v53) {
                goto LABEL_133;
              }
              goto LABEL_132;
            }
            if (v72)
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v83 = "nw_pac_resolver_create_with_url";
              _os_log_impl(&dword_1830D4000, v67, v71, "%{public}s called with null logging_id_str, no backtrace", buf, 0xCu);
            }
            goto LABEL_130;
          }
        }
        else
        {
          __int16 v52 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "nw_pac_resolver_create_with_url";
          os_log_type_t v53 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v80 = 0;
          if (!__nwlog_fault(v53, &type, &v80)) {
            goto LABEL_131;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            __int16 v54 = __nwlog_obj();
            os_log_type_t v55 = type;
            if (os_log_type_enabled(v54, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v83 = "nw_pac_resolver_create_with_url";
              _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s called with null context", buf, 0xCu);
            }
            goto LABEL_112;
          }
          if (!v80)
          {
            __int16 v54 = __nwlog_obj();
            os_log_type_t v76 = type;
            if (os_log_type_enabled(v54, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v83 = "nw_pac_resolver_create_with_url";
              _os_log_impl(&dword_1830D4000, v54, v76, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_112;
          }
          os_log_type_t v66 = (char *)__nw_create_backtrace_string();
          os_log_type_t v67 = __nwlog_obj();
          os_log_type_t v68 = type;
          BOOL v69 = os_log_type_enabled(v67, type);
          if (!v66)
          {
            if (v69)
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v83 = "nw_pac_resolver_create_with_url";
              _os_log_impl(&dword_1830D4000, v67, v68, "%{public}s called with null context, no backtrace", buf, 0xCu);
            }
LABEL_130:

            goto LABEL_131;
          }
          if (v69)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v83 = "nw_pac_resolver_create_with_url";
            __int16 v84 = 2082;
            BOOL v85 = v66;
            _os_log_impl(&dword_1830D4000, v67, v68, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v66);
        }
LABEL_131:
        if (!v53)
        {
LABEL_133:
          os_log_type_t v21 = 0;
          goto LABEL_45;
        }
LABEL_132:
        free(v53);
        goto LABEL_133;
      }
      char v42 = 0;
      __int16 v50 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v83 = "nw_pac_resolver_create_with_url";
      os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v80 = 0;
      if (__nwlog_fault(v45, &type, &v80))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v46 = __nwlog_obj();
          os_log_type_t v51 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v83 = "nw_pac_resolver_create_with_url";
            _os_log_impl(&dword_1830D4000, v46, v51, "%{public}s called with null result_handler", buf, 0xCu);
          }
LABEL_106:

          goto LABEL_122;
        }
        if (!v80)
        {
          id v46 = __nwlog_obj();
          os_log_type_t v75 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v83 = "nw_pac_resolver_create_with_url";
            _os_log_impl(&dword_1830D4000, v46, v75, "%{public}s called with null result_handler, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_106;
        }
        os_log_type_t v58 = (char *)__nw_create_backtrace_string();
        BOOL v59 = __nwlog_obj();
        os_log_type_t v64 = type;
        BOOL v65 = os_log_type_enabled(v59, type);
        if (v58)
        {
          if (v65)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v83 = "nw_pac_resolver_create_with_url";
            __int16 v84 = 2082;
            BOOL v85 = v58;
            _os_log_impl(&dword_1830D4000, v59, v64, "%{public}s called with null result_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
LABEL_86:

          free(v58);
          goto LABEL_122;
        }
        if (v65)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "nw_pac_resolver_create_with_url";
          _os_log_impl(&dword_1830D4000, v59, v64, "%{public}s called with null result_handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_121;
      }
    }
    else
    {
      char v42 = v20;
      __int16 v48 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v83 = "nw_pac_resolver_create_with_url";
      os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v80 = 0;
      if (__nwlog_fault(v45, &type, &v80))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v46 = __nwlog_obj();
          os_log_type_t v49 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v83 = "nw_pac_resolver_create_with_url";
            _os_log_impl(&dword_1830D4000, v46, v49, "%{public}s called with null endpointURL", buf, 0xCu);
          }
          goto LABEL_106;
        }
        if (!v80)
        {
          id v46 = __nwlog_obj();
          os_log_type_t v74 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v83 = "nw_pac_resolver_create_with_url";
            _os_log_impl(&dword_1830D4000, v46, v74, "%{public}s called with null endpointURL, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_106;
        }
        os_log_type_t v58 = (char *)__nw_create_backtrace_string();
        BOOL v59 = __nwlog_obj();
        os_log_type_t v62 = type;
        BOOL v63 = os_log_type_enabled(v59, type);
        if (v58)
        {
          if (v63)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v83 = "nw_pac_resolver_create_with_url";
            __int16 v84 = 2082;
            BOOL v85 = v58;
            _os_log_impl(&dword_1830D4000, v59, v62, "%{public}s called with null endpointURL, dumping backtrace:%{public}s", buf, 0x16u);
          }
          goto LABEL_86;
        }
        if (v63)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "nw_pac_resolver_create_with_url";
          _os_log_impl(&dword_1830D4000, v59, v62, "%{public}s called with null endpointURL, no backtrace", buf, 0xCu);
        }
LABEL_121:
      }
    }
  }
  else
  {
    char v42 = v20;
    uint64_t v44 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v83 = "nw_pac_resolver_create_with_url";
    os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v80 = 0;
    if (__nwlog_fault(v45, &type, &v80))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v46 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v46, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "nw_pac_resolver_create_with_url";
          _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null pacURL", buf, 0xCu);
        }
        goto LABEL_106;
      }
      if (!v80)
      {
        id v46 = __nwlog_obj();
        os_log_type_t v73 = type;
        if (os_log_type_enabled(v46, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "nw_pac_resolver_create_with_url";
          _os_log_impl(&dword_1830D4000, v46, v73, "%{public}s called with null pacURL, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_106;
      }
      os_log_type_t v58 = (char *)__nw_create_backtrace_string();
      BOOL v59 = __nwlog_obj();
      os_log_type_t v60 = type;
      BOOL v61 = os_log_type_enabled(v59, type);
      if (v58)
      {
        if (v61)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v83 = "nw_pac_resolver_create_with_url";
          __int16 v84 = 2082;
          BOOL v85 = v58;
          _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s called with null pacURL, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_86;
      }
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v83 = "nw_pac_resolver_create_with_url";
        _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s called with null pacURL, no backtrace", buf, 0xCu);
      }
      goto LABEL_121;
    }
  }
LABEL_122:
  if (v45) {
    free(v45);
  }
  os_log_type_t v21 = 0;
LABEL_46:

  return v21;
}

void sub_183895FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void nw_pac_resolver_start(void *a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v36 = __nwlog_obj();
    LODWORD(clientContext.version) = 136446210;
    *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v9, buf, &type))
    {
      if (buf[0] == 17)
      {
        __int16 v37 = __nwlog_obj();
        os_log_type_t v38 = buf[0];
        if (os_log_type_enabled(v37, (os_log_type_t)buf[0]))
        {
          LODWORD(clientContext.version) = 136446210;
          *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null pac", (uint8_t *)&clientContext, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v37 = __nwlog_obj();
        os_log_type_t v39 = buf[0];
        BOOL v40 = os_log_type_enabled(v37, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v40)
          {
            LODWORD(clientContext.version) = 136446466;
            *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
            WORD2(clientContext.info) = 2082;
            *(void **)((char *)&clientContext.info + 6) = backtrace_string;
            _os_log_impl(&dword_1830D4000, v37, v39, "%{public}s called with null pac, dumping backtrace:%{public}s", (uint8_t *)&clientContext, 0x16u);
          }

LABEL_56:
          free(backtrace_string);
          if (!v9) {
            goto LABEL_82;
          }
          goto LABEL_81;
        }
        if (v40)
        {
          LODWORD(clientContext.version) = 136446210;
          *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
          _os_log_impl(&dword_1830D4000, v37, v39, "%{public}s called with null pac, no backtrace", (uint8_t *)&clientContext, 0xCu);
        }
      }
      else
      {
        __int16 v37 = __nwlog_obj();
        os_log_type_t v41 = buf[0];
        if (os_log_type_enabled(v37, (os_log_type_t)buf[0]))
        {
          LODWORD(clientContext.version) = 136446210;
          *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
          _os_log_impl(&dword_1830D4000, v37, v41, "%{public}s called with null pac, backtrace limit exceeded", (uint8_t *)&clientContext, 0xCu);
        }
      }
    }
LABEL_80:
    if (!v9) {
      goto LABEL_82;
    }
LABEL_81:
    free(v9);
    goto LABEL_82;
  }
  CFURLRef v3 = (const __CFURL *)*((void *)v1 + 4);
  if (v3)
  {
    clientContext.version = 0;
    clientContext.info = v1;
    clientContext.retain = nw_pac_resolver_retain;
    clientContext.release = nw_pac_resolver_release;
    clientContext.copyDescription = 0;
    CFURLRef v4 = (const __CFURL *)*((void *)v1 + 3);
    if (*((_OWORD *)v1 + 3) == 0) {
      CFRunLoopSourceRef v5 = CFNetworkExecuteProxyAutoConfigurationURL(v3, v4, (CFProxyAutoConfigurationResultCallback)nw_pac_resolver_callback, &clientContext);
    }
    else {
      CFRunLoopSourceRef v5 = (CFRunLoopSourceRef)MEMORY[0x185315FD0](v3, v4);
    }
    CFRunLoopSourceRef v7 = v5;
    if (v5)
    {
      pthread_mutex_lock(&sOutstandingPacURLMutex);
      if (nw_get_outstanding_pac_urls(void)::onceToken != -1) {
        dispatch_once(&nw_get_outstanding_pac_urls(void)::onceToken, &__block_literal_global_31787);
      }
      os_log_type_t v12 = (__CFArray *)nw_get_outstanding_pac_urls(void)::gPACURLs;
      if (nw_get_outstanding_pac_urls(void)::gPACURLs)
      {
        v53.size_t length = CFArrayGetCount((CFArrayRef)nw_get_outstanding_pac_urls(void)::gPACURLs);
        v53.location = 0;
        if (!CFArrayContainsValue(v12, v53, v3))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v13 = (id)gLogObj;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v49 = "nw_add_outstanding_pac_url";
            __int16 v50 = 2114;
            os_log_type_t v51 = v3;
            _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s Adding outstanding PAC URL: %{public}@", buf, 0x16u);
          }

          CFArrayAppendValue(v12, v3);
        }
        goto LABEL_72;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_add_outstanding_pac_url";
      id v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      if (__nwlog_fault(v17, &type, &v45))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v18 = (id)gLogObj;
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v49 = "nw_add_outstanding_pac_url";
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s nw_get_outstanding_pac_urls failed", buf, 0xCu);
          }
        }
        else if (v45)
        {
          char v27 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v18 = (id)gLogObj;
          os_log_type_t v28 = type;
          BOOL v29 = os_log_type_enabled(v18, type);
          if (v27)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v49 = "nw_add_outstanding_pac_url";
              __int16 v50 = 2082;
              os_log_type_t v51 = v27;
              _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s nw_get_outstanding_pac_urls failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v27);
            if (!v17) {
              goto LABEL_72;
            }
            goto LABEL_71;
          }
          if (v29)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v49 = "nw_add_outstanding_pac_url";
            _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s nw_get_outstanding_pac_urls failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v18 = (id)gLogObj;
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v49 = "nw_add_outstanding_pac_url";
            _os_log_impl(&dword_1830D4000, v18, v33, "%{public}s nw_get_outstanding_pac_urls failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v17)
      {
LABEL_72:
        pthread_mutex_unlock(&sOutstandingPacURLMutex);
        goto LABEL_73;
      }
LABEL_71:
      free(v17);
      goto LABEL_72;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_pac_resolver_start";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v9, &type, &v45)) {
      goto LABEL_80;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (id)gLogObj;
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_pac_resolver_start";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s CFNetworkExecuteProxyAutoConfigurationURL failed", buf, 0xCu);
      }
LABEL_79:

      goto LABEL_80;
    }
    if (!v45)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (id)gLogObj;
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_pac_resolver_start";
        _os_log_impl(&dword_1830D4000, v10, v32, "%{public}s CFNetworkExecuteProxyAutoConfigurationURL failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_79;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (id)gLogObj;
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_pac_resolver_start";
        _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s CFNetworkExecuteProxyAutoConfigurationURL failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_79;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v49 = "nw_pac_resolver_start";
      __int16 v50 = 2082;
      os_log_type_t v51 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s CFNetworkExecuteProxyAutoConfigurationURL failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_55;
  }
  CFStringRef v6 = (const __CFString *)*((void *)v1 + 5);
  if (v6)
  {
    clientContext.version = 0;
    clientContext.info = v2;
    clientContext.retain = nw_pac_resolver_retain;
    clientContext.release = nw_pac_resolver_release;
    clientContext.copyDescription = 0;
    CFRunLoopSourceRef v7 = CFNetworkExecuteProxyAutoConfigurationScript(v6, *((CFURLRef *)v2 + 3), (CFProxyAutoConfigurationResultCallback)nw_pac_resolver_callback, &clientContext);
    if (v7)
    {
LABEL_73:
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_pac_resolver_start_block_invoke;
      aBlock[3] = &unk_1E52491B0;
      CFRunLoopSourceRef v44 = v7;
      __int16 v43 = v2;
      BOOL v34 = (void (**)(void))_Block_copy(aBlock);
      os_unfair_lock_lock((os_unfair_lock_t)v2 + 20);
      v34[2](v34);
      os_unfair_lock_unlock((os_unfair_lock_t)v2 + 20);

      goto LABEL_82;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_pac_resolver_start";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v9, &type, &v45)) {
      goto LABEL_80;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_pac_resolver_start";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s CFNetworkExecuteProxyAutoConfigurationScript failed", buf, 0xCu);
      }
      goto LABEL_79;
    }
    if (!v45)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_pac_resolver_start";
        _os_log_impl(&dword_1830D4000, v10, v35, "%{public}s CFNetworkExecuteProxyAutoConfigurationScript failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_79;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v30 = type;
    BOOL v31 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_pac_resolver_start";
        _os_log_impl(&dword_1830D4000, v10, v30, "%{public}s CFNetworkExecuteProxyAutoConfigurationScript failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_79;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v49 = "nw_pac_resolver_start";
      __int16 v50 = 2082;
      os_log_type_t v51 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v30, "%{public}s CFNetworkExecuteProxyAutoConfigurationScript failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_55:

    goto LABEL_56;
  }
  uint64_t v20 = *((void *)v2 + 2);
  if (!v20 || *(_DWORD *)(v20 + 124) != 4)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v21 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = " dry-run";
      char v23 = v2[159];
      *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
      LODWORD(clientContext.version) = 136446722;
      WORD2(clientContext.info) = 2082;
      if ((v23 & 8) == 0) {
        uint64_t v22 = "";
      }
      *(void **)((char *)&clientContext.info + 6) = v2 + 84;
      HIWORD(clientContext.retain) = 2082;
      clientContext.release = (void (__cdecl *)(void *))v22;
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Either pacURL or pacScript must be set", (uint8_t *)&clientContext, 0x20u);
    }
  }
LABEL_82:
}

void sub_183896CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __nw_pac_resolver_start_block_invoke(uint64_t a1)
{
  uint64_t v2 = (__CFRunLoop *)[MEMORY[0x1E4F18D80] resourceLoaderRunLoop];
  CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F1D418];
  CFRunLoopAddSource(v2, *(CFRunLoopSourceRef *)(a1 + 40), (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
  *(void *)(*(void *)(a1 + 32) + 64) = *(void *)(a1 + 40);
  CFURLRef v4 = *(void **)(a1 + 32);
  context.version = 0;
  context.info = v4;
  context.retain = (const void *(__cdecl *)(const void *))nw_pac_resolver_const_retain;
  context.release = (void (__cdecl *)(const void *))nw_pac_resolver_const_release;
  context.copyDescription = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(void *)(*(void *)(a1 + 32) + 72) = CFRunLoopTimerCreate(v5, Current + 60.0, 0.0, 0, 0, (CFRunLoopTimerCallBack)nw_pac_timeout_callback, &context);
  CFRunLoopAddTimer((CFRunLoopRef)[MEMORY[0x1E4F18D80] resourceLoaderRunLoop], *(CFRunLoopTimerRef *)(*(void *)(a1 + 32) + 72), v3);
}

void nw_pac_timeout_callback(__CFRunLoopTimer *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"kCFErrorDomainCFNetwork", -1001, 0);
  CFURLRef v4 = a2;
  uint64_t v5 = *((void *)v4 + 2);
  if (!v5 || *(_DWORD *)(v5 + 124) != 4)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    CFStringRef v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if ((v4[159] & 8) != 0) {
        CFRunLoopSourceRef v7 = " dry-run";
      }
      else {
        CFRunLoopSourceRef v7 = "";
      }
      int v8 = 136447234;
      os_log_type_t v9 = "nw_pac_timeout_callback";
      __int16 v10 = 2082;
      os_log_type_t v11 = v4 + 84;
      __int16 v12 = 2082;
      char v13 = v7;
      __int16 v14 = 2114;
      CFErrorDomain Domain = CFErrorGetDomain(v3);
      __int16 v16 = 2048;
      CFIndex Code = CFErrorGetCode(v3);
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Timed out waiting for PAC query: %{public}@: %ld", (uint8_t *)&v8, 0x34u);
    }
  }
  nw_pac_resolver_callback(v4, 0, v3);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_183896F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_pac_resolver_callback(void *a1, const __CFArray *a2, __CFError *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  if (v5)
  {
    CFArrayRef v6 = a2;
    CFRunLoopSourceRef v7 = a3;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL24nw_pac_resolver_callbackPvPK9__CFArrayP9__CFError_block_invoke;
    aBlock[3] = &unk_1E524BAA8;
    int v8 = v5;
    os_log_type_t v38 = v8;
    os_log_type_t v9 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v5 + 20);
    v9[2](v9);
    os_unfair_lock_unlock(v5 + 20);

    __int16 v10 = *(void **)&v8[8]._os_unfair_lock_opaque;
    if (!v10)
    {
LABEL_18:
      uint64_t v18 = *(void **)&v8[4]._os_unfair_lock_opaque;
      v33[0] = MEMORY[0x1E4F143A8];
      v33[1] = 3221225472;
      v33[2] = ___ZL24nw_pac_resolver_callbackPvPK9__CFArrayP9__CFError_block_invoke_2;
      v33[3] = &unk_1E5249868;
      BOOL v34 = v8;
      CFArrayRef v19 = v6;
      CFArrayRef v35 = v19;
      uint64_t v20 = v7;
      os_log_type_t v36 = v20;
      nw_queue_context_async(v18, v33);

      goto LABEL_19;
    }
    pthread_mutex_lock(&sOutstandingPacURLMutex);
    if (nw_get_outstanding_pac_urls(void)::onceToken != -1) {
      dispatch_once(&nw_get_outstanding_pac_urls(void)::onceToken, &__block_literal_global_31787);
    }
    CFArrayRef v11 = (const __CFArray *)nw_get_outstanding_pac_urls(void)::gPACURLs;
    if (nw_get_outstanding_pac_urls(void)::gPACURLs)
    {
      v46.size_t length = CFArrayGetCount((CFArrayRef)nw_get_outstanding_pac_urls(void)::gPACURLs);
      v46.location = 0;
      CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v11, v46, v10);
      if (FirstIndexOfValue != -1)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v13 = (id)gLogObj;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          char v42 = "nw_remove_outstanding_pac_url";
          __int16 v43 = 2114;
          CFRunLoopSourceRef v44 = (char *)v10;
          _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s Removing outstanding PAC URL: %{public}@", buf, 0x16u);
        }

        CFArrayRemoveValueAtIndex(v11, FirstIndexOfValue);
      }
      goto LABEL_17;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v42 = "nw_remove_outstanding_pac_url";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v40 = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v15, &v40, &v39))
    {
      if (v40 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v16 = (id)gLogObj;
        os_log_type_t v17 = v40;
        if (os_log_type_enabled(v16, v40))
        {
          *(_DWORD *)buf = 136446210;
          char v42 = "nw_remove_outstanding_pac_url";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s nw_get_outstanding_pac_urls failed", buf, 0xCu);
        }
      }
      else if (v39)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v16 = (id)gLogObj;
        os_log_type_t v22 = v40;
        BOOL v23 = os_log_type_enabled(v16, v40);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            char v42 = "nw_remove_outstanding_pac_url";
            __int16 v43 = 2082;
            CFRunLoopSourceRef v44 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v16, v22, "%{public}s nw_get_outstanding_pac_urls failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v15) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          char v42 = "nw_remove_outstanding_pac_url";
          _os_log_impl(&dword_1830D4000, v16, v22, "%{public}s nw_get_outstanding_pac_urls failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v16 = (id)gLogObj;
        os_log_type_t v24 = v40;
        if (os_log_type_enabled(v16, v40))
        {
          *(_DWORD *)buf = 136446210;
          char v42 = "nw_remove_outstanding_pac_url";
          _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s nw_get_outstanding_pac_urls failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v15)
    {
LABEL_17:
      pthread_mutex_unlock(&sOutstandingPacURLMutex);
      goto LABEL_18;
    }
LABEL_16:
    free(v15);
    goto LABEL_17;
  }
  os_log_type_t v25 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v42 = "nw_pac_resolver_callback";
  BOOL v26 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v40 = OS_LOG_TYPE_ERROR;
  char v39 = 0;
  if (__nwlog_fault(v26, &v40, &v39))
  {
    if (v40 == OS_LOG_TYPE_FAULT)
    {
      char v27 = __nwlog_obj();
      os_log_type_t v28 = v40;
      if (os_log_type_enabled(v27, v40))
      {
        *(_DWORD *)buf = 136446210;
        char v42 = "nw_pac_resolver_callback";
        _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null pac", buf, 0xCu);
      }
    }
    else if (v39)
    {
      BOOL v29 = (char *)__nw_create_backtrace_string();
      char v27 = __nwlog_obj();
      os_log_type_t v30 = v40;
      BOOL v31 = os_log_type_enabled(v27, v40);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          char v42 = "nw_pac_resolver_callback";
          __int16 v43 = 2082;
          CFRunLoopSourceRef v44 = v29;
          _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s called with null pac, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
        goto LABEL_48;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        char v42 = "nw_pac_resolver_callback";
        _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s called with null pac, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v27 = __nwlog_obj();
      os_log_type_t v32 = v40;
      if (os_log_type_enabled(v27, v40))
      {
        *(_DWORD *)buf = 136446210;
        char v42 = "nw_pac_resolver_callback";
        _os_log_impl(&dword_1830D4000, v27, v32, "%{public}s called with null pac, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_48:
  if (v26) {
    free(v26);
  }
LABEL_19:
}

void sub_183897720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void ___ZL24nw_pac_resolver_callbackPvPK9__CFArrayP9__CFError_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFStringRef v3 = *(__CFRunLoopSource **)(v2 + 64);
  if (v3)
  {
    CFRunLoopSourceInvalidate(v3);
    uint64_t v2 = *(void *)(a1 + 32);
    CFURLRef v4 = *(const void **)(v2 + 64);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(*(void *)(a1 + 32) + 64) = 0;
      uint64_t v2 = *(void *)(a1 + 32);
    }
  }
  uint64_t v5 = *(__CFRunLoopTimer **)(v2 + 72);
  if (v5)
  {
    CFRunLoopTimerInvalidate(v5);
    CFArrayRef v6 = *(const void **)(*(void *)(a1 + 32) + 72);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(*(void *)(a1 + 32) + 72) = 0;
    }
  }
}

void ___ZL24nw_pac_resolver_callbackPvPK9__CFArrayP9__CFError_block_invoke_2(uint64_t a1)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  id v1 = *(void **)(a1 + 32);
  if (v1[1])
  {
    CFArrayRef v4 = *(const __CFArray **)(a1 + 40);
    CFStringRef v3 = *(__CFError **)(a1 + 48);
    uint64_t v5 = v1;
    uint64_t v6 = v5[2];
    if (v3)
    {
      if (!v6 || *(_DWORD *)(v6 + 124) != 4)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        CFRunLoopSourceRef v7 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          if ((*((unsigned char *)v5 + 159) & 8) != 0) {
            int v8 = " dry-run";
          }
          else {
            int v8 = "";
          }
          *(_DWORD *)buf = 136447234;
          os_log_type_t v83 = "nw_proxy_resolver_create_parsed_array";
          __int16 v84 = 2082;
          BOOL v85 = (char *)v5 + 84;
          __int16 v86 = 2082;
          uint64_t v87 = (void *)v8;
          __int16 v88 = 2114;
          CFErrorDomain Domain = CFErrorGetDomain(v3);
          __int16 v90 = 2048;
          CFIndex Code = CFErrorGetCode(v3);
          _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Evaluation error: %{public}@: %ld", buf, 0x34u);
        }
      }
      if (CFErrorGetCode(v3) == -1001)
      {
        CFStringRef v9 = CFErrorGetDomain(v3);
        CFStringCompare(v9, @"kCFErrorDomainCFNetwork", 0);
      }
    }
    else if (!v6 || *(_DWORD *)(v6 + 124) != 4)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v10 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        char v11 = *((unsigned char *)v5 + 159);
        CFIndex Count = CFArrayGetCount(v4);
        char v13 = " dry-run";
        *(_DWORD *)buf = 136446978;
        os_log_type_t v83 = "nw_proxy_resolver_create_parsed_array";
        __int16 v84 = 2082;
        BOOL v85 = (char *)v5 + 84;
        if ((v11 & 8) == 0) {
          char v13 = "";
        }
        __int16 v86 = 2082;
        uint64_t v87 = (void *)v13;
        __int16 v88 = 2048;
        CFErrorDomain Domain = (CFErrorDomain)Count;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s%{public}s proxy pac] Resolver returned %ld proxies", buf, 0x2Au);
      }
    }
    if (v4)
    {
      BOOL v79 = nw_array_create();
      CFIndex v14 = CFArrayGetCount(v4);
      if (v14 >= 1)
      {
        CFIndex v15 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v15);
          CFDictionaryRef v17 = ValueAtIndex;
          if (ValueAtIndex)
          {
            CFTypeID v18 = CFGetTypeID(ValueAtIndex);
            if (v18 == CFDictionaryGetTypeID()) {
              break;
            }
          }
          uint64_t v32 = v5[2];
          if (v32 && *(_DWORD *)(v32 + 124) == 4) {
            goto LABEL_71;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          direct = (NWConcrete_nw_proxy_config *)(id)gconnectionLogObj;
          if (os_log_type_enabled(&direct->super, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v33 = " dry-run";
            if ((*((unsigned char *)v5 + 159) & 8) == 0) {
              os_log_type_t v33 = "";
            }
            *(_DWORD *)buf = 136446978;
            os_log_type_t v83 = "nw_proxy_resolver_create_parsed_array";
            __int16 v84 = 2082;
            BOOL v85 = (char *)v5 + 84;
            __int16 v86 = 2082;
            uint64_t v87 = (void *)v33;
            __int16 v88 = 2114;
            CFErrorDomain Domain = (CFErrorDomain)v17;
            _os_log_impl(&dword_1830D4000, &direct->super, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Unknown item in pac proxy list %{public}@", buf, 0x2Au);
          }
LABEL_70:

LABEL_71:
          if (v14 == ++v15) {
            goto LABEL_149;
          }
        }
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v17, @"kCFProxyTypeKey");
        CFStringRef v20 = Value;
        if (Value && (CFTypeID v21 = CFGetTypeID(Value), v21 == CFStringGetTypeID()))
        {
          if (CFEqual(v20, @"kCFProxyTypeNone"))
          {
            direct = nw_proxy_config_create_direct();
            goto LABEL_141;
          }
          os_log_type_t v22 = (char *)CFDictionaryGetValue(v17, @"kCFProxyHostNameKey");
          BOOL v23 = v22;
          if (v22)
          {
            CFTypeID v24 = CFGetTypeID(v22);
            if (v24 == CFStringGetTypeID())
            {
              os_log_type_t type = (void *)_CFXPCCreateXPCObjectFromCFObject();
              if (type)
              {
                int valuePtr = 0;
                CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(v17, @"kCFProxyPortNumberKey");
                CFNumberRef v26 = v25;
                if (v25)
                {
                  CFTypeID v27 = CFGetTypeID(v25);
                  if (v27 == CFNumberGetTypeID()) {
                    CFNumberGetValue(v26, kCFNumberIntType, &valuePtr);
                  }
                }
                if (CFStringCompare(v20, @"kCFProxyTypeSOCKS", 0))
                {
                  if (!v5[3]) {
                    goto LABEL_100;
                  }
                  if (CFEqual(v20, @"kCFProxyTypeHTTP")) {
                    goto LABEL_101;
                  }
                  if (CFStringCompare(v20, @"kCFProxyTypeHTTPS", 0))
                  {
                    if (CFStringCompare(v20, @"kCFProxyTypeFTP", 0))
                    {
                      uint64_t v28 = v5[2];
                      if (!v28 || *(_DWORD *)(v28 + 124) != 4)
                      {
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                        }
                        BOOL v29 = (id)gconnectionLogObj;
                        nw_protocol_options_t host_with_numeric_port = v29;
                        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                        {
                          os_log_type_t v30 = " dry-run";
                          if ((*((unsigned char *)v5 + 159) & 8) == 0) {
                            os_log_type_t v30 = "";
                          }
                          *(_DWORD *)buf = 136446978;
                          os_log_type_t v83 = "nw_proxy_resolver_create_parsed_array";
                          __int16 v84 = 2082;
                          BOOL v85 = (char *)v5 + 84;
                          __int16 v86 = 2082;
                          uint64_t v87 = (void *)v30;
                          __int16 v88 = 2114;
                          CFErrorDomain Domain = v20;
                          _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Unknown proxy type %{public}@", buf, 0x2Au);
                        }
                        direct = 0;
                        goto LABEL_139;
                      }
LABEL_100:
                      direct = 0;
LABEL_140:

LABEL_141:
                      if (direct) {
                        nw_array_append(v79, direct);
                      }
                      goto LABEL_70;
                    }
LABEL_101:
                    if (!valuePtr) {
                      int valuePtr = 80;
                    }
                    int v47 = 2001;
                  }
                  else
                  {
                    if ((*((unsigned char *)v5 + 159) & 2) != 0) {
                      int v50 = 4002;
                    }
                    else {
                      int v50 = 4001;
                    }
                    if (*((unsigned char *)v5 + 159)) {
                      int v47 = 2002;
                    }
                    else {
                      int v47 = v50;
                    }
                    if (!valuePtr) {
                      int valuePtr = 443;
                    }
                  }
                  string_ptr = xpc_string_get_string_ptr(type);
                  nw_protocol_options_t host_with_numeric_port = (nw_protocol_options_t)nw_endpoint_create_host_with_numeric_port(string_ptr, (unsigned __int16)valuePtr);
                  if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
                    dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_102_35650);
                  }
                  id v52 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
                  options = nw_proxy_create_options(v52);
                  direct = nw_proxy_config_create(host_with_numeric_port, options);

                  nw_proxy_config_set_type(direct, v47);
                  if (v47 == 4002)
                  {
                    *(_DWORD *)buf = 4;
                    nw_protocol_definition_t v54 = nw_protocol_copy_tcp_definition();
                    os_log_type_t v55 = nw_proxy_config_copy_protocol_stack(direct, v54, buf);

                    os_log_type_t v56 = v5;
                    nw_protocol_options_t v57 = nw_tls_create_options();
                    if ((*((unsigned char *)v5 + 159) & 4) != 0 && os_variant_allows_internal_security_policies())
                    {
                      xstringa = v57;
                      sec_protocol_options_set_peer_authentication_required(xstringa, 0);
                    }
                    nw_protocol_stack_append_application_protocol(v55, v57);
                  }
                }
                else
                {
                  CFStringRef v43 = (const __CFString *)CFDictionaryGetValue(v17, @"kCFStreamPropertySOCKSVersion");
                  if (v43 && CFEqual(v43, @"kCFStreamSocketSOCKSVersion4"))
                  {
                    CFRunLoopSourceRef v44 = nw_protocol_socksv4_copy_definition();
                    nw_protocol_options_t host_with_numeric_port = nw_framer_create_options(v44);
                    int v49 = 3001;
                  }
                  else
                  {
                    if (nw_protocol_socksv5_copy_definition::onceToken != -1) {
                      dispatch_once(&nw_protocol_socksv5_copy_definition::onceToken, &__block_literal_global_85297);
                    }
                    if (nw_protocol_socksv5_copy_definition::definition) {
                      CFRunLoopSourceRef v44 = os_retain((void *)nw_protocol_socksv5_copy_definition::definition);
                    }
                    else {
                      CFRunLoopSourceRef v44 = 0;
                    }
                    nw_protocol_options_t host_with_numeric_port = nw_framer_create_options(v44);
                    int v49 = 3002;
                  }
                  int v73 = v49;

                  os_log_type_t v58 = CFDictionaryGetValue(v17, @"kCFStreamPropertySOCKSUser");
                  if (v58 && (CFTypeID v59 = CFGetTypeID(v58), v59 == CFStringGetTypeID())) {
                    xpc_object_t xstring = (xpc_object_t)_CFXPCCreateXPCObjectFromCFObject();
                  }
                  else {
                    xpc_object_t xstring = 0;
                  }
                  os_log_type_t v60 = CFDictionaryGetValue(v17, @"kCFStreamPropertySOCKSPassword");
                  if (v60 && (CFTypeID v61 = CFGetTypeID(v60), v61 == CFStringGetTypeID())) {
                    os_log_type_t v62 = (void *)_CFXPCCreateXPCObjectFromCFObject();
                  }
                  else {
                    os_log_type_t v62 = 0;
                  }
                  BOOL v63 = xpc_string_get_string_ptr(type);
                  BOOL v64 = nw_endpoint_create_host_with_numeric_port(v63, (unsigned __int16)valuePtr);
                  direct = nw_proxy_config_create((void *)v64, host_with_numeric_port);
                  nw_proxy_config_set_type(direct, v73);
                  if (xstring)
                  {
                    BOOL v65 = xpc_string_get_string_ptr(xstring);
                    if (v62) {
                      os_log_type_t v66 = xpc_string_get_string_ptr(v62);
                    }
                    else {
                      os_log_type_t v66 = 0;
                    }
                    nw_proxy_config_set_username_and_password(&direct->super, v65, v66);
                  }
                }
LABEL_139:

                goto LABEL_140;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v39 = (id)gLogObj;
              *(_DWORD *)buf = 136446466;
              os_log_type_t v83 = "nw_proxy_resolver_create_parsed_array";
              __int16 v84 = 2114;
              BOOL v85 = v23;
              os_log_type_t v40 = (char *)_os_log_send_and_compose_impl();

              LOBYTE(valuePtr) = 16;
              char v81 = 0;
              if (__nwlog_fault(v40, &valuePtr, &v81))
              {
                if (valuePtr == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v41 = (id)gLogObj;
                  os_log_type_t v42 = valuePtr;
                  if (os_log_type_enabled(v41, (os_log_type_t)valuePtr))
                  {
                    *(_DWORD *)buf = 136446466;
                    os_log_type_t v83 = "nw_proxy_resolver_create_parsed_array";
                    __int16 v84 = 2114;
                    BOOL v85 = v23;
                    _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s _CFXPCCreateXPCObjectFromCFObject(%{public}@) failed", buf, 0x16u);
                  }
                }
                else if (v81)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  os_log_type_t v41 = __nwlog_obj();
                  os_log_type_t typea = valuePtr;
                  BOOL v46 = os_log_type_enabled(v41, (os_log_type_t)valuePtr);
                  if (backtrace_string)
                  {
                    if (v46)
                    {
                      *(_DWORD *)buf = 136446722;
                      os_log_type_t v83 = "nw_proxy_resolver_create_parsed_array";
                      __int16 v84 = 2114;
                      BOOL v85 = v23;
                      __int16 v86 = 2082;
                      uint64_t v87 = backtrace_string;
                      _os_log_impl(&dword_1830D4000, v41, typea, "%{public}s _CFXPCCreateXPCObjectFromCFObject(%{public}@) failed, dumping backtrace:%{public}s", buf, 0x20u);
                    }

                    free(backtrace_string);
                    if (!v40) {
                      goto LABEL_69;
                    }
                    goto LABEL_147;
                  }
                  if (v46)
                  {
                    *(_DWORD *)buf = 136446466;
                    os_log_type_t v83 = "nw_proxy_resolver_create_parsed_array";
                    __int16 v84 = 2114;
                    BOOL v85 = v23;
                    _os_log_impl(&dword_1830D4000, v41, typea, "%{public}s _CFXPCCreateXPCObjectFromCFObject(%{public}@) failed, no backtrace", buf, 0x16u);
                  }
                }
                else
                {
                  os_log_type_t v41 = __nwlog_obj();
                  os_log_type_t v48 = valuePtr;
                  if (os_log_type_enabled(v41, (os_log_type_t)valuePtr))
                  {
                    *(_DWORD *)buf = 136446466;
                    os_log_type_t v83 = "nw_proxy_resolver_create_parsed_array";
                    __int16 v84 = 2114;
                    BOOL v85 = v23;
                    _os_log_impl(&dword_1830D4000, v41, v48, "%{public}s _CFXPCCreateXPCObjectFromCFObject(%{public}@) failed, backtrace limit exceeded", buf, 0x16u);
                  }
                }
              }
              if (v40) {
LABEL_147:
              }
                free(v40);
LABEL_69:
              direct = 0;
              goto LABEL_70;
            }
          }
          uint64_t v37 = v5[2];
          if (v37 && *(_DWORD *)(v37 + 124) == 4) {
            goto LABEL_69;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          CFArrayRef v35 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v38 = " dry-run";
            if ((*((unsigned char *)v5 + 159) & 8) == 0) {
              os_log_type_t v38 = "";
            }
            *(_DWORD *)buf = 136446978;
            os_log_type_t v83 = "nw_proxy_resolver_create_parsed_array";
            __int16 v84 = 2082;
            BOOL v85 = (char *)v5 + 84;
            __int16 v86 = 2082;
            uint64_t v87 = (void *)v38;
            __int16 v88 = 2114;
            CFErrorDomain Domain = v20;
            _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Bad proxy hostname %{public}@", buf, 0x2Au);
          }
        }
        else
        {
          uint64_t v34 = v5[2];
          if (v34 && *(_DWORD *)(v34 + 124) == 4) {
            goto LABEL_69;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          CFArrayRef v35 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v36 = " dry-run";
            if ((*((unsigned char *)v5 + 159) & 8) == 0) {
              os_log_type_t v36 = "";
            }
            *(_DWORD *)buf = 136446978;
            os_log_type_t v83 = "nw_proxy_resolver_create_parsed_array";
            __int16 v84 = 2082;
            BOOL v85 = (char *)v5 + 84;
            __int16 v86 = 2082;
            uint64_t v87 = (void *)v36;
            __int16 v88 = 2114;
            CFErrorDomain Domain = v20;
            _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Bad proxy type key %{public}@", buf, 0x2Au);
          }
        }

        goto LABEL_69;
      }
    }
    else
    {
      BOOL v79 = 0;
    }
LABEL_149:

    (*(void (**)(void, BOOL))(*(void *)(*(void *)(a1 + 32) + 8) + 16))(*(void *)(*(void *)(a1 + 32) + 8), v79);
    uint64_t v67 = *(void *)(a1 + 32);
    os_log_type_t v68 = *(void **)(v67 + 8);
    *(void *)(v67 + 8) = 0;

    BOOL v69 = *(id *)(a1 + 32);
    os_log_type_t v70 = (const void *)v69[3];
    if (v70)
    {
      CFRelease(v70);
      v69[3] = 0;
    }
    os_log_type_t v71 = (const void *)v69[4];
    if (v71)
    {
      CFRelease(v71);
      v69[4] = 0;
    }
    BOOL v72 = (const void *)v69[5];
    if (v72)
    {
      CFRelease(v72);
      v69[5] = 0;
    }
  }
}

void sub_1838985DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

BOOL __nw_protocol_ethernet_identifier_block_invoke()
{
  unk_1E8F79641 = 0;
  unk_1E8F79639 = 0;
  qword_1E8F79648 = 0;
  strcpy((char *)&g_ethernet_protocol_identifier, "ethernet");
  qword_1E8F79650 = 0x200000001;
  qword_1E8F79668 = (uint64_t)nw_protocol_default_replace_input_handler;
  qword_1E8F79698 = (uint64_t)nw_protocol_default_input_available;
  qword_1E8F796A0 = (uint64_t)nw_protocol_default_output_available;
  qword_1E8F79710 = (uint64_t)nw_protocol_default_input_finished;
  qword_1E8F79718 = (uint64_t)nw_protocol_default_output_finished;
  qword_1E8F79760 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F796C0 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F796C8 = (uint64_t)nw_protocol_default_get_parameters;
  qword_1E8F796D8 = (uint64_t)nw_protocol_default_get_local;
  qword_1E8F796E0 = (uint64_t)nw_protocol_default_get_remote;
  qword_1E8F796D0 = (uint64_t)nw_protocol_default_get_path;
  qword_1E8F79700 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F79720 = (uint64_t)nw_protocol_default_get_output_local;
  qword_1E8F79728 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F79670 = (uint64_t)nw_protocol_default_connect;
  qword_1E8F79678 = (uint64_t)nw_protocol_default_disconnect;
  qword_1E8F79680 = (uint64_t)nw_protocol_default_connected;
  qword_1E8F79688 = (uint64_t)nw_protocol_default_disconnected;
  qword_1E8F79690 = (uint64_t)nw_protocol_default_error;
  qword_1E8F79758 = (uint64_t)nw_protocol_default_reset;
  qword_1E8F79708 = (uint64_t)nw_protocol_default_supports_external_data;
  qword_1E8F79730 = (uint64_t)nw_protocol_default_waiting_for_output;
  qword_1E8F79738 = (uint64_t)nw_protocol_default_copy_info;
  qword_1E8F796E8 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F796F0 = (uint64_t)nw_protocol_default_unregister_notification;
  qword_1E8F796F8 = (uint64_t)nw_protocol_default_notify;
  qword_1E8F79740 = (uint64_t)nw_protocol_default_add_listen_handler;
  qword_1E8F79748 = (uint64_t)nw_protocol_default_remove_listen_handler;
  g_ethernet_protocol_callbacks = (uint64_t)nw_protocol_ethernet_add_input_handler;
  qword_1E8F79660 = (uint64_t)nw_protocol_ethernet_remove_input_handler;
  qword_1E8F796A8 = (uint64_t)nw_protocol_ethernet_get_input_frames;
  qword_1E8F796B0 = (uint64_t)nw_protocol_ethernet_get_output_frames;
  qword_1E8F796B8 = (uint64_t)nw_protocol_ethernet_finalize_output_frames;
  qword_1E8F79750 = (uint64_t)nw_protocol_ethernet_get_message_properties;
  return nw_protocol_register_extended(&g_ethernet_protocol_identifier, (uint64_t)nw_protocol_ethernet_create);
}

uint64_t nw_protocol_ethernet_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 0xA8uLL, 0x68FF3B34uLL))
  {
    uint64_t result = (uint64_t)memptr;
    if (memptr) {
      goto LABEL_3;
    }
  }
  CFArrayRef v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  int v7 = 136446722;
  int v8 = "strict_memalign";
  __int16 v9 = 2048;
  uint64_t v10 = 8;
  __int16 v11 = 2048;
  uint64_t v12 = 168;
  uint64_t v5 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
    uint64_t result = (uint64_t)memptr;
LABEL_3:
    *(void *)(result + 160) = 0;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(void *)(result + 16) = &g_ethernet_protocol_identifier;
    *(void *)(result + 24) = &g_ethernet_protocol_callbacks;
    *(void *)(result + 40) = result;
    return result;
  }
  __break(1u);
  return result;
}

void nw_protocol_ethernet_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    CFIndex v15 = "nw_protocol_ethernet_get_message_properties";
    CFArrayRef v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      CFIndex v15 = "nw_protocol_ethernet_get_message_properties";
      int v7 = "%{public}s called with null protocol";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          CFIndex v15 = "nw_protocol_ethernet_get_message_properties";
          __int16 v16 = 2082;
          CFDictionaryRef v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v4) {
          return;
        }
LABEL_35:
        free(v4);
        return;
      }
      if (!v9) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      CFIndex v15 = "nw_protocol_ethernet_get_message_properties";
      int v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      CFIndex v15 = "nw_protocol_ethernet_get_message_properties";
      int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_34;
  }
  if (*(void *)(a1 + 40))
  {
    if (a3)
    {
      unsigned int v3 = a3[1] & 0xFFFFFFF8 | 1;
      *a3 = 4000;
      a3[1] = v3;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  CFIndex v15 = "nw_protocol_ethernet_get_message_properties";
  CFArrayRef v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_34;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    CFIndex v15 = "nw_protocol_ethernet_get_message_properties";
    int v7 = "%{public}s called with null ethernet";
    goto LABEL_33;
  }
  if (!v12)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    CFIndex v15 = "nw_protocol_ethernet_get_message_properties";
    int v7 = "%{public}s called with null ethernet, backtrace limit exceeded";
    goto LABEL_33;
  }
  uint64_t v10 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    CFIndex v15 = "nw_protocol_ethernet_get_message_properties";
    int v7 = "%{public}s called with null ethernet, no backtrace";
    goto LABEL_33;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    CFIndex v15 = "nw_protocol_ethernet_get_message_properties";
    __int16 v16 = 2082;
    CFDictionaryRef v17 = v10;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null ethernet, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v4) {
    goto LABEL_35;
  }
}

uint64_t nw_protocol_ethernet_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      __int16 v16 = ___ZL43nw_protocol_ethernet_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
      CFDictionaryRef v17 = &__block_descriptor_tmp_19_31963;
      uint64_t v18 = a1;
      CFArrayRef v19 = handle;
      tqh_first = a2->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        CFArrayRef v4 = (nw_frame *)*((void *)tqh_first + 4);
        char v5 = ((uint64_t (*)(void *))v16)(v15);
        tqh_first = v4;
      }
      while ((v5 & 1) != 0);
      return (*(uint64_t (**)(void))(*(void *)(handle[4] + 24) + 96))();
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_ethernet_finalize_output_frames";
    int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &v21, &v20)) {
      goto LABEL_35;
    }
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_ethernet_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null ethernet";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (!v20)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_ethernet_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null ethernet, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v9 = v21;
    BOOL v14 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_ethernet_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null ethernet, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v23 = "nw_protocol_ethernet_finalize_output_frames";
      __int16 v24 = 2082;
      CFNumberRef v25 = backtrace_string;
      uint64_t v13 = "%{public}s called with null ethernet, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v23 = "nw_protocol_ethernet_finalize_output_frames";
  int v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &v21, &v20)) {
    goto LABEL_35;
  }
  if (v21 != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_ethernet_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v9 = v21;
    BOOL v12 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_ethernet_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v23 = "nw_protocol_ethernet_finalize_output_frames";
      __int16 v24 = 2082;
      CFNumberRef v25 = backtrace_string;
      uint64_t v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_1830D4000, v8, v9, v13, buf, 0x16u);
    }
LABEL_25:
    free(backtrace_string);
    goto LABEL_35;
  }
  int v8 = __nwlog_obj();
  os_log_type_t v9 = v21;
  if (os_log_type_enabled(v8, v21))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_ethernet_finalize_output_frames";
    uint64_t v10 = "%{public}s called with null protocol";
LABEL_34:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
  }
LABEL_35:
  if (v7) {
    free(v7);
  }
  return 0;
}

uint64_t ___ZL43nw_protocol_ethernet_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  nw_frame_unclaim(a2, a2, 0xEu, 0);
  int v13 = 0;
  uint64_t v4 = nw_frame_unclaimed_bytes(a2, &v13);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = *(_DWORD *)(v5 + 70);
    *(_WORD *)(v4 + 4) = *(_WORD *)(v5 + 74);
    *(_DWORD *)uint64_t v4 = v6;
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = *(_DWORD *)(v7 + 64);
    *(_WORD *)(v4 + 10) = *(_WORD *)(v7 + 68);
    *(_DWORD *)(v4 + 6) = v8;
    *(_WORD *)(v4 + 12) = bswap32(*(unsigned __int16 *)(*(void *)(a1 + 40) + 76)) >> 16;
  }
  else
  {
    uint64_t v10 = __nwlog_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      if (v11) {
        BOOL v12 = (const char *)(v11 + 78);
      }
      else {
        BOOL v12 = "";
      }
      *(_DWORD *)buf = 136446466;
      CFIndex v15 = "nw_protocol_ethernet_finalize_output_frames_block_invoke";
      __int16 v16 = 2082;
      CFDictionaryRef v17 = v12;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s %{public}s Frame is no longer valid", buf, 0x16u);
    }
  }
  return 1;
}

uint64_t nw_protocol_ethernet_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(handle[4] + 24) + 88))();
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 0x40000000;
      BOOL v23 = ___ZL38nw_protocol_ethernet_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      __int16 v24 = &__block_descriptor_tmp_18_31977;
      CFNumberRef v25 = a1;
      tqh_first = a6->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        uint64_t v11 = (nw_frame *)*((void *)tqh_first + 4);
        char v12 = ((uint64_t (*)(void *))v23)(v22);
        tqh_first = v11;
      }
      while ((v12 & 1) != 0);
      return v9;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_protocol_ethernet_get_output_frames";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v27 = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v14, &v27, &v26)) {
      goto LABEL_34;
    }
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      CFIndex v15 = __nwlog_obj();
      os_log_type_t v16 = v27;
      if (os_log_type_enabled(v15, v27))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_protocol_ethernet_get_output_frames";
        CFDictionaryRef v17 = "%{public}s called with null ethernet";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v26)
    {
      CFIndex v15 = __nwlog_obj();
      os_log_type_t v16 = v27;
      if (os_log_type_enabled(v15, v27))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_protocol_ethernet_get_output_frames";
        CFDictionaryRef v17 = "%{public}s called with null ethernet, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    CFIndex v15 = __nwlog_obj();
    os_log_type_t v16 = v27;
    BOOL v21 = os_log_type_enabled(v15, v27);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_protocol_ethernet_get_output_frames";
        CFDictionaryRef v17 = "%{public}s called with null ethernet, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v29 = "nw_protocol_ethernet_get_output_frames";
      __int16 v30 = 2082;
      BOOL v31 = backtrace_string;
      char v20 = "%{public}s called with null ethernet, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v29 = "nw_protocol_ethernet_get_output_frames";
  BOOL v14 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v27 = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v14, &v27, &v26)) {
    goto LABEL_34;
  }
  if (v27 != OS_LOG_TYPE_FAULT)
  {
    if (!v26)
    {
      CFIndex v15 = __nwlog_obj();
      os_log_type_t v16 = v27;
      if (os_log_type_enabled(v15, v27))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_protocol_ethernet_get_output_frames";
        CFDictionaryRef v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    CFIndex v15 = __nwlog_obj();
    os_log_type_t v16 = v27;
    BOOL v19 = os_log_type_enabled(v15, v27);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_protocol_ethernet_get_output_frames";
        CFDictionaryRef v17 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v29 = "nw_protocol_ethernet_get_output_frames";
      __int16 v30 = 2082;
      BOOL v31 = backtrace_string;
      char v20 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_1830D4000, v15, v16, v20, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  CFIndex v15 = __nwlog_obj();
  os_log_type_t v16 = v27;
  if (os_log_type_enabled(v15, v27))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_protocol_ethernet_get_output_frames";
    CFDictionaryRef v17 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
  }
LABEL_34:
  if (v14) {
    free(v14);
  }
  return 0;
}

uint64_t ___ZL38nw_protocol_ethernet_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_protocol_ethernet_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      uint64_t v9 = handle[4];
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      int v37 = 0;
      *(void *)&buf[16] = 0x2000000000;
      int v37 = (*(uint64_t (**)(void))(*(void *)(v9 + 24) + 80))();
      if (*(_DWORD *)(*(void *)&buf[8] + 24))
      {
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 0x40000000;
        CFNumberRef v25 = (uint64_t (*)(void *))___ZL37nw_protocol_ethernet_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
        char v26 = &unk_1E523FBB0;
        os_log_type_t v27 = buf;
        uint64_t v28 = handle;
        BOOL v29 = a1;
        __int16 v30 = a6;
        tqh_first = a6->tqh_first;
        do
        {
          if (!tqh_first) {
            break;
          }
          uint64_t v11 = (nw_frame *)*((void *)tqh_first + 4);
          char v12 = v25(v24);
          tqh_first = v11;
        }
        while ((v12 & 1) != 0);
      }
      else if (gLogDatapath)
      {
        BOOL v23 = __nwlog_obj();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)os_log_type_t type = 136446466;
          os_log_type_t v33 = "nw_protocol_ethernet_get_input_frames";
          __int16 v34 = 2082;
          CFArrayRef v35 = (char *)handle + 78;
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s No ethernet input frame", (uint8_t *)type, 0x16u);
        }
      }
      uint64_t v13 = *(unsigned int *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      return v13;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ethernet_get_input_frames";
    CFIndex v15 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v15, type, &v31)) {
      goto LABEL_40;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ethernet_get_input_frames";
        uint64_t v18 = "%{public}s called with null ethernet";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (!v31)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ethernet_get_input_frames";
        uint64_t v18 = "%{public}s called with null ethernet, backtrace limit exceeded";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v17 = type[0];
    BOOL v22 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ethernet_get_input_frames";
        uint64_t v18 = "%{public}s called with null ethernet, no backtrace";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_ethernet_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      BOOL v21 = "%{public}s called with null ethernet, dumping backtrace:%{public}s";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_ethernet_get_input_frames";
  CFIndex v15 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (!__nwlog_fault(v15, type, &v31)) {
    goto LABEL_40;
  }
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!v31)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ethernet_get_input_frames";
        uint64_t v18 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v17 = type[0];
    BOOL v20 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ethernet_get_input_frames";
        uint64_t v18 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_ethernet_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      BOOL v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_27:
      _os_log_impl(&dword_1830D4000, v16, v17, v21, buf, 0x16u);
    }
LABEL_28:
    free(backtrace_string);
    goto LABEL_40;
  }
  os_log_type_t v16 = __nwlog_obj();
  os_log_type_t v17 = type[0];
  if (os_log_type_enabled(v16, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ethernet_get_input_frames";
    uint64_t v18 = "%{public}s called with null protocol";
LABEL_39:
    _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
  }
LABEL_40:
  if (v15) {
    free(v15);
  }
  return 0;
}

uint64_t ___ZL37nw_protocol_ethernet_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unsigned int v35 = 0;
  uint64_t v4 = nw_frame_unclaimed_bytes(a2, &v35);
  if (v4)
  {
    if (v35 <= 0xD)
    {
      os_log_type_t v17 = __nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = a1[5];
        BOOL v19 = (const char *)(v18 + 78);
        if (!v18) {
          BOOL v19 = "";
        }
        *(_DWORD *)buf = 136446722;
        int v37 = "nw_protocol_ethernet_get_input_frames_block_invoke";
        __int16 v38 = 2082;
        id v39 = v19;
        __int16 v40 = 1024;
        unsigned int v41 = v35;
        BOOL v14 = "%{public}s %{public}s Received ethernet frame with incorrect length %u";
        CFIndex v15 = v17;
        os_log_type_t v16 = OS_LOG_TYPE_ERROR;
        uint32_t v20 = 28;
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v6 = v4;
      uint64_t v7 = a1[5];
      BOOL v8 = *(_DWORD *)v4 == *(_DWORD *)(v7 + 64) && *(unsigned __int16 *)(v4 + 4) == *(unsigned __int16 *)(v7 + 68);
      if (v8 || (*(_DWORD *)v4 == -1 ? (BOOL v21 = *(__int16 *)(v4 + 4) == -1) : (BOOL v21 = 0), v21))
      {
        if (!*(unsigned char *)(v7 + 162)
          || (*(_DWORD *)(v4 + 6) == *(_DWORD *)(v7 + 70)
            ? (BOOL v9 = *(unsigned __int16 *)(v4 + 10) == *(unsigned __int16 *)(v7 + 74))
            : (BOOL v9 = 0),
              v9))
        {
          if (*(unsigned __int16 *)(v7 + 76) == bswap32(*(unsigned __int16 *)(v4 + 12)) >> 16)
          {
            nw_frame_claim(a2, v5, 14, 0);
            return 1;
          }
          __int16 v24 = __nwlog_obj();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            uint64_t v25 = a1[5];
            char v26 = (const char *)(v25 + 78);
            if (!v25) {
              char v26 = "";
            }
            unsigned int v27 = bswap32(*(unsigned __int16 *)(v6 + 12));
            int v28 = *(unsigned __int16 *)(v25 + 76);
            *(_DWORD *)buf = 136446978;
            int v37 = "nw_protocol_ethernet_get_input_frames_block_invoke";
            __int16 v38 = 2082;
            id v39 = v26;
            __int16 v40 = 1024;
            unsigned int v41 = HIWORD(v27);
            __int16 v42 = 1024;
            int v43 = v28;
            BOOL v14 = "%{public}s %{public}s Mismatched ether type %u != %u";
            CFIndex v15 = v24;
            os_log_type_t v16 = OS_LOG_TYPE_ERROR;
            uint32_t v20 = 34;
            goto LABEL_46;
          }
        }
        else
        {
          BOOL v29 = __nwlog_obj();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            uint64_t v31 = a1[5];
            if (v31) {
              uint64_t v32 = (const char *)(v31 + 78);
            }
            else {
              uint64_t v32 = "";
            }
            *(_DWORD *)buf = 136446466;
            int v37 = "nw_protocol_ethernet_get_input_frames_block_invoke";
            __int16 v38 = 2082;
            id v39 = v32;
            BOOL v14 = "%{public}s %{public}s Received mismatched remote ether address";
            goto LABEL_44;
          }
        }
      }
      else
      {
        BOOL v29 = __nwlog_obj();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = a1[5];
          if (v22) {
            BOOL v23 = (const char *)(v22 + 78);
          }
          else {
            BOOL v23 = "";
          }
          *(_DWORD *)buf = 136446466;
          int v37 = "nw_protocol_ethernet_get_input_frames_block_invoke";
          __int16 v38 = 2082;
          id v39 = v23;
          BOOL v14 = "%{public}s %{public}s Received mismatched local ether address";
LABEL_44:
          CFIndex v15 = v29;
          os_log_type_t v16 = OS_LOG_TYPE_ERROR;
LABEL_45:
          uint32_t v20 = 22;
LABEL_46:
          _os_log_impl(&dword_1830D4000, v15, v16, v14, buf, v20);
        }
      }
    }
  }
  else
  {
    uint64_t v11 = __nwlog_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = a1[5];
      if (v12) {
        uint64_t v13 = (const char *)(v12 + 78);
      }
      else {
        uint64_t v13 = "";
      }
      *(_DWORD *)buf = 136446466;
      int v37 = "nw_protocol_ethernet_get_input_frames_block_invoke";
      __int16 v38 = 2082;
      id v39 = v13;
      BOOL v14 = "%{public}s %{public}s Frame is no longer valid";
      CFIndex v15 = v11;
      os_log_type_t v16 = OS_LOG_TYPE_INFO;
      goto LABEL_45;
    }
  }
  --*(_DWORD *)(*(void *)(a1[4] + 8) + 24);
  uint64_t v33 = *(void *)(a2 + 32);
  __int16 v34 = *(void **)(a2 + 40);
  if (v33)
  {
    *(void *)(v33 + 40) = v34;
    __int16 v34 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(a1[7] + 8) = v34;
  }
  *__int16 v34 = v33;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t nw_protocol_ethernet_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint32_t v20 = "nw_protocol_ethernet_remove_input_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17)) {
      goto LABEL_40;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v20 = "nw_protocol_ethernet_remove_input_handler";
        uint64_t v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (!v14) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        uint32_t v20 = "nw_protocol_ethernet_remove_input_handler";
        uint64_t v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_39;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        uint32_t v20 = "nw_protocol_ethernet_remove_input_handler";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        CFIndex v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_29:
        _os_log_impl(&dword_1830D4000, v10, v11, v15, buf, 0x16u);
      }
LABEL_30:
      free(backtrace_string);
      goto LABEL_40;
    }
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint32_t v20 = "nw_protocol_ethernet_remove_input_handler";
    uint64_t v12 = "%{public}s called with null protocol";
LABEL_39:
    _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
LABEL_40:
    if (v9) {
      free(v9);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint32_t v20 = "nw_protocol_ethernet_remove_input_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v20 = "nw_protocol_ethernet_remove_input_handler";
      uint64_t v12 = "%{public}s called with null ethernet";
      goto LABEL_39;
    }
    if (!v17)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v20 = "nw_protocol_ethernet_remove_input_handler";
      uint64_t v12 = "%{public}s called with null ethernet, backtrace limit exceeded";
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        uint32_t v20 = "nw_protocol_ethernet_remove_input_handler";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        CFIndex v15 = "%{public}s called with null ethernet, dumping backtrace:%{public}s";
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    if (!v16) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint32_t v20 = "nw_protocol_ethernet_remove_input_handler";
    uint64_t v12 = "%{public}s called with null ethernet, no backtrace";
    goto LABEL_39;
  }
  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  }
  if (a1->default_input_handler != a2) {
    return 0;
  }
  output_handler = a1->output_handler;
  if (output_handler) {
    ((void (*)(void))output_handler->callbacks->remove_input_handler)();
  }
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  if (a3)
  {
    a1->handle = 0;
    free(handle);
  }
  return 1;
}

uint64_t nw_protocol_ethernet_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = (char *)a1->handle;
    if (handle)
    {
      nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
      uuid_clear((unsigned __int8 *)handle);
      if (!a2->output_handler) {
        nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)handle);
      }
      uint64_t v4 = (void *)((uint64_t (*)(nw_protocol *))a2->callbacks->get_path)(a2);
      if (v4)
      {
        uint64_t v5 = v4;
        __int16 v6 = v5[192];

        *((_WORD *)handle + 38) = v6;
      }
      uint64_t v7 = ((uint64_t (*)(nw_protocol *))a2->callbacks->get_local_endpoint)(a2);
      if (v7)
      {
        BOOL v8 = v7;
        ethernet_nw_endpoint_t address = nw_endpoint_get_ethernet_address(v7);
        if (ethernet_address)
        {
          int v10 = *(_DWORD *)ethernet_address;
          *((_WORD *)handle + 34) = *((_WORD *)ethernet_address + 2);
          *((_DWORD *)handle + 16) = v10;
        }
        if (!*((_WORD *)handle + 38))
        {
          int sa_family = nw_endpoint_get_address(v8)->sa_family;
          if (sa_family == 2)
          {
            __int16 v12 = 2048;
            goto LABEL_15;
          }
          if (sa_family == 30)
          {
            __int16 v12 = -31011;
LABEL_15:
            *((_WORD *)handle + 38) = v12;
          }
        }
      }
      uint64_t v13 = ((uint64_t (*)(nw_protocol *))a2->callbacks->get_remote_endpoint)(a2);
      if (!v13) {
        return 1;
      }
      BOOL v14 = v13;
      CFIndex v15 = nw_endpoint_get_ethernet_address(v13);
      if (v15)
      {
        int v16 = *(_DWORD *)v15;
        *((_WORD *)handle + 37) = *((_WORD *)v15 + 2);
        *(_DWORD *)(handle + 70) = v16;
      }
      if (*((_WORD *)handle + 38)) {
        return 1;
      }
      int v17 = nw_endpoint_get_address(v14)->sa_family;
      if (v17 == 30)
      {
        __int16 v18 = -31011;
      }
      else
      {
        if (v17 != 2) {
          return 1;
        }
        __int16 v18 = 2048;
      }
      *((_WORD *)handle + 38) = v18;
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v31 = "nw_protocol_ethernet_add_input_handler";
    uint32_t v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v20, &type, &v28)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_ethernet_add_input_handler";
        uint64_t v23 = "%{public}s called with null ethernet";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (!v28)
    {
      __int16 v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_ethernet_add_input_handler";
        uint64_t v23 = "%{public}s called with null ethernet, backtrace limit exceeded";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v21 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v27 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_ethernet_add_input_handler";
        uint64_t v23 = "%{public}s called with null ethernet, no backtrace";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v31 = "nw_protocol_ethernet_add_input_handler";
      __int16 v32 = 2082;
      uint64_t v33 = backtrace_string;
      char v26 = "%{public}s called with null ethernet, dumping backtrace:%{public}s";
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v31 = "nw_protocol_ethernet_add_input_handler";
  uint32_t v20 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (!__nwlog_fault(v20, &type, &v28)) {
    goto LABEL_54;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v28)
    {
      __int16 v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_ethernet_add_input_handler";
        uint64_t v23 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v21 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v25 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_ethernet_add_input_handler";
        uint64_t v23 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v31 = "nw_protocol_ethernet_add_input_handler";
      __int16 v32 = 2082;
      uint64_t v33 = backtrace_string;
      char v26 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_43:
      _os_log_impl(&dword_1830D4000, v21, v22, v26, buf, 0x16u);
    }
LABEL_44:
    free(backtrace_string);
    goto LABEL_54;
  }
  __int16 v21 = __nwlog_obj();
  os_log_type_t v22 = type;
  if (os_log_type_enabled(v21, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v31 = "nw_protocol_ethernet_add_input_handler";
    uint64_t v23 = "%{public}s called with null protocol";
LABEL_53:
    _os_log_impl(&dword_1830D4000, v21, v22, v23, buf, 0xCu);
  }
LABEL_54:
  if (v20) {
    free(v20);
  }
  return 0;
}

unint64_t nw_printf_write(unint64_t result, uint64_t a2, unsigned char *a3, unint64_t a4)
{
  if (!a4) {
    return result;
  }
  unint64_t v20 = a4;
  __int16 v21 = a3;
  char v19 = 0;
  int v4 = *(_DWORD *)(a2 + 32);
  if ((v4 & 9) != 0)
  {
LABEL_3:
    unint64_t v5 = a4;
    unint64_t v18 = 0;
    if ((v4 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_13:
    int v8 = *(unsigned __int8 *)(a2 + 24);
    if (*(unsigned char *)(a2 + 24))
    {
      unint64_t v9 = *(void *)(a2 + 16);
      if (!v9 && v5 == 1)
      {
        if (*a3 == 48)
        {
          unint64_t v5 = 0;
          a4 = 0;
          unint64_t v9 = 0;
          unint64_t v20 = 0;
        }
        else
        {
          unint64_t v9 = 0;
          unint64_t v5 = 1;
        }
      }
    }
    else
    {
      unint64_t v9 = 0;
    }
    BOOL v11 = v9 >= v5;
    unint64_t v6 = v9 - v5;
    if (!v11) {
      unint64_t v6 = 0;
    }
    unint64_t v18 = v6;
    if ((v4 & 0x10000) == 0 || v8) {
      goto LABEL_37;
    }
    goto LABEL_32;
  }
  if (*a3 == 45)
  {
    char v19 = 45;
    unint64_t v5 = a4 - 1;
    ++a3;
    unint64_t v20 = a4 - 1;
    __int16 v21 = a3;
    unint64_t v18 = 0;
    if ((v4 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    if ((v4 & 0x4000) != 0)
    {
      char v10 = 43;
    }
    else
    {
      if ((v4 & 0x8000) == 0) {
        goto LABEL_3;
      }
      char v10 = 32;
    }
    char v19 = v10;
    unint64_t v5 = a4++;
    unint64_t v18 = 0;
    if ((v4 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_4:
  if ((v4 & 4) == 0)
  {
    unint64_t v6 = 0;
    if ((v4 & 8) != 0)
    {
      unint64_t v7 = *(void *)(a2 + 16);
      if (!*(unsigned char *)(a2 + 24)) {
        unint64_t v7 = -1;
      }
      if (v7 < a4) {
        a4 = v7;
      }
      unint64_t v20 = a4;
    }
    goto LABEL_37;
  }
  if ((v4 & 0x10000) != 0)
  {
LABEL_32:
    unint64_t v12 = *(void *)a2;
    if (!*(unsigned char *)(a2 + 8)) {
      unint64_t v12 = 0;
    }
    BOOL v11 = v12 >= a4;
    unint64_t v6 = v12 - a4;
    if (!v11) {
      unint64_t v6 = 0;
    }
    unint64_t v18 = v6;
    goto LABEL_37;
  }
  unint64_t v6 = 0;
LABEL_37:
  unint64_t v13 = v6 + a4;
  v17[0] = &v19;
  v17[1] = result;
  void v17[2] = &v18;
  v17[3] = a2;
  void v17[4] = &v20;
  void v17[5] = &v21;
  BOOL v11 = *(void *)a2 >= v13;
  unint64_t v14 = *(void *)a2 - v13;
  if (v14 == 0 || !v11 || *(unsigned char *)(a2 + 8) == 0) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = v14;
  }
  if ((v4 & 0x2000) != 0)
  {
    for (uint64_t result = nw_printf_write::$_0::operator()((unint64_t)v17); v16; --v16)
      uint64_t result = std::ostream::put();
  }
  else
  {
    for (; v16; --v16)
      std::ostream::put();
    return nw_printf_write::$_0::operator()((unint64_t)v17);
  }
  return result;
}

unint64_t nw_printf_write::$_0::operator()(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (**(unsigned char **)result) {
    uint64_t result = std::ostream::put();
  }
  if (**(void **)(v1 + 16))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t result = std::ostream::put();
      ++v2;
    }
    while (v2 < **(void **)(v1 + 16));
  }
  int v3 = *(_DWORD *)(*(void *)(v1 + 24) + 32);
  if ((v3 & 0x40) != 0 && **(void **)(v1 + 32))
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t result = __toupper(*(char *)(**(void **)(v1 + 40) + v4));
      *(unsigned char *)(**(void **)(v1 + 40) + v4++) = result;
    }
    while (v4 < **(void **)(v1 + 32));
    int v3 = *(_DWORD *)(*(void *)(v1 + 24) + 32);
  }
  if ((v3 & 0x600000) != 0)
  {
    unint64_t v5 = **(unsigned __int8 ***)(v1 + 40);
    uint64_t v6 = **(void **)(v1 + 32);
    unint64_t v7 = &v5[v6];
    if (v6) {
      unsigned int v8 = *v5 == 45;
    }
    else {
      unsigned int v8 = 0;
    }
    unint64_t v9 = &v5[v8];
    if (v6 != v8)
    {
      uint64_t v10 = ~(unint64_t)v8 + v6;
      BOOL v11 = v9;
      while (*v11 == 48)
      {
        ++v11;
        --v10;
        if (v11 == v7) {
          goto LABEL_31;
        }
      }
      if (v11 != v7)
      {
        if (*v11 - 48 < 0xA)
        {
          uint64_t v12 = -9;
          uint64_t v13 = 9;
          while (1)
          {
            int v14 = v11[v12 + 9];
            if ((v14 - 58) < 0xFFFFFFF6) {
              break;
            }
            v37[v13--] = v14 - 48;
            uint64_t v15 = v12 + 1;
            if (v12)
            {
              uint64_t v16 = v10--;
              ++v12;
              if (v16) {
                continue;
              }
            }
            uint64_t result = v13 + 1;
            uint64_t v17 = (uint64_t)&v11[v15 + 9];
            goto LABEL_38;
          }
          uint64_t result = v13 + 1;
          uint64_t v17 = (uint64_t)&v11[v12 + 9];
LABEL_38:
          unint64_t v22 = result << 32;
          int v23 = v37[(int)result];
          if ((int)result > 7) {
            goto LABEL_46;
          }
          unint64_t v24 = (int)result;
          unint64_t v25 = 8 - result;
          if (result > 8)
          {
            unint64_t v27 = v25 & 0xFFFFFFFFFFFFFFF8;
            char v26 = (char *)&std::__itoa::__pow10_32 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8) + 4;
            int32x4_t v28 = (int32x4_t)v37[(int)result];
            int32x4_t v29 = 0uLL;
            __int16 v30 = (int32x4_t *)&v37[result + 5];
            uint64_t result = (unint64_t)&unk_183D5D0D0;
            unint64_t v31 = v25 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              int32x4_t v28 = vmlaq_s32(v28, *(int32x4_t *)(result - 16), v30[-1]);
              int32x4_t v29 = vmlaq_s32(v29, *(int32x4_t *)result, *v30);
              v30 += 2;
              result += 32;
              v31 -= 8;
            }
            while (v31);
            int v23 = vaddvq_s32(vaddq_s32(v29, v28));
            if (v25 == v27) {
              goto LABEL_46;
            }
            v24 += v27;
          }
          else
          {
            char v26 = "\n";
          }
          do
          {
            uint64_t result = v24 + 1;
            int v32 = *(_DWORD *)v26;
            v26 += 4;
            v23 += v32 * v37[v24 + 1];
            unint64_t v24 = result;
          }
          while (result != 8);
LABEL_46:
          unint64_t v33 = v37[9]
              * (unint64_t)*(unsigned int *)((char *)&std::__itoa::__pow10_32
                                                  + ((uint64_t)(0x900000000 - v22) >> 30));
          uint64_t v34 = (unsigned __int8 *)(v17 - ((v33 & 0xFFFFFFFF00000000) != 0));
          if (v34 == v7)
          {
            if (__CFADD__(v23, v33)) {
              return result;
            }
          }
          else
          {
            unsigned int v35 = *v34 - 48;
            BOOL v36 = __CFADD__(v23, v33);
            if (v35 < 0xA || v36) {
              return result;
            }
          }
          unsigned int v18 = v33 + v23;
          if ((v8 & 1) == 0)
          {
            if ((v18 & 0x80000000) != 0) {
              return result;
            }
            goto LABEL_34;
          }
          if (v18 > 0x80000000) {
            return result;
          }
LABEL_33:
          unsigned int v18 = -v18;
LABEL_34:
          std::ostream::put();
          std::ostream::write();
          std::ostream::put();
          std::ostream::put();
          char v19 = *(void **)(v1 + 8);
          unint64_t v20 = strerror(v18);
          size_t v21 = strlen(v20);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
          return std::ostream::put();
        }
        unint64_t v7 = v11;
      }
    }
LABEL_31:
    if (v7 == v9) {
      return result;
    }
    unsigned int v18 = 0;
    if ((v8 & 1) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }

  return std::ostream::write();
}

void *nw_printf_write_data(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a3 || ((v4 = *(void *)(a2 + 16), *(unsigned char *)(a2 + 24)) ? (BOOL v5 = v4 == 0) : (BOOL v5 = 1), v5))
  {
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"<NULL>", 6);
  }
  else
  {
    unint64_t v7 = 0;
    *(void *)unint64_t v24 = 0;
    uint64_t v25 = 0;
    char v26 = 0;
    *(void *)&long long v8 = 0x2020202020202020;
    *((void *)&v8 + 1) = 0x2020202020202020;
    *(_OWORD *)__s = v8;
    *(_OWORD *)int32x4_t v28 = v8;
    *(_OWORD *)&v28[15] = v8;
    char v29 = 0;
    do
    {
      if (v7)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
        unint64_t v9 = std::locale::use_facet(&v23, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v23);
        std::ostream::put();
        std::ostream::flush();
      }
      if (v4 - v7 >= 0x10) {
        uint64_t v10 = 16;
      }
      else {
        uint64_t v10 = v4 - v7;
      }
      if (v10)
      {
        BOOL v11 = &__s[1];
        uint64_t v12 = (unsigned __int8 *)(a3 + v7);
        uint64_t v13 = v24;
        uint64_t v14 = v10;
        do
        {
          unsigned int v16 = *v12++;
          unint64_t v15 = v16;
          if (v16 - 32 >= 0x5F) {
            char v17 = 46;
          }
          else {
            char v17 = v15;
          }
          char *v13 = v17;
          *(v11 - 1) = nw_printf_write_data::hex_chars[v15 >> 4];
          *BOOL v11 = nw_printf_write_data::hex_chars[v15 & 0xF];
          if (v14 == 1) {
            v24[v10] = 0;
          }
          v11 += 3;
          ++v13;
          --v14;
        }
        while (v14);
      }
      if (v4 - v7 < 0x10) {
        memset(&__s[3 * v10], 32, 3 * (16 - v10) - 1);
      }
      *(void *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 4;
      unsigned int v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"   ", 3);
      size_t v19 = strlen(__s);
      unint64_t v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)__s, v19);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"   ", 3);
      size_t v21 = strlen(v24);
      uint64_t result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)v24, v21);
      v7 += v10;
    }
    while (v7 < v4);
  }
  return result;
}

void sub_18389BA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
}

void nw_printf_write_foundation(void *a1, uint64_t a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = v4;
  if (v4)
  {
    uint64_t v6 = [v4 description];
    unint64_t v7 = v6;
    if (v6)
    {
      unint64_t v8 = [v6 lengthOfBytesUsingEncoding:4];
      memset(v23, 0, sizeof(v23));
      if (v8)
      {
        uint64_t v9 = 0;
        do
        {
          if (v8 >= 0x200) {
            uint64_t v10 = 512;
          }
          else {
            uint64_t v10 = v8;
          }
          unint64_t v14 = 0;
          objc_msgSend(v7, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v23, 512, &v14, 4, 0, v9, v10, 0);
          std::ostream::write();
          BOOL v11 = v8 >= v14;
          v8 -= v14;
          if (!v11)
          {
            if (gLogDatapath)
            {
              loga = __nwlog_obj();
              if (os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446978;
                unsigned int v16 = "nw_printf_write_foundation";
                __int16 v17 = 2082;
                unsigned int v18 = "bytes_to_write";
                __int16 v19 = 2048;
                unint64_t v20 = v14;
                __int16 v21 = 2048;
                unint64_t v22 = v8;
                _os_log_impl(&dword_1830D4000, loga, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
              }

              unint64_t v8 = 0;
              BOOL v11 = __CFADD__(v9, v14);
              v9 += v14;
              if (!v11) {
                continue;
              }
LABEL_20:
              if (gLogDatapath)
              {
                os_log_t log = __nwlog_obj();
                if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446978;
                  unsigned int v16 = "nw_printf_write_foundation";
                  __int16 v17 = 2082;
                  unsigned int v18 = "range.location";
                  __int16 v19 = 2048;
                  unint64_t v20 = v14;
                  __int16 v21 = 2048;
                  unint64_t v22 = v9;
                  _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
                }
              }
              uint64_t v9 = 0xFFFFFFFFLL;
              continue;
            }
            unint64_t v8 = 0;
          }
          BOOL v11 = __CFADD__(v9, v14);
          v9 += v14;
          if (v11) {
            goto LABEL_20;
          }
        }
        while (v8);
      }
    }
    else
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"(null)", 6);
    }
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"(null)", 6);
  }
}

void sub_18389BD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_printf_write_uuid()
{
  for (uint64_t i = 0; i != 16; ++i)
  {
    std::ostream::put();
    uint64_t result = std::ostream::put();
    if (i <= 9 && ((1 << i) & 0x2A8) != 0) {
      uint64_t result = std::ostream::put();
    }
  }
  return result;
}

void nw_printf_internal_error(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  __int16 v17 = "nw_printf_internal_error";
  __int16 v18 = 2080;
  uint64_t v19 = a1;
  __int16 v20 = 2080;
  uint64_t v21 = a2;
  BOOL v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v5, &type, &v14)) {
    goto LABEL_10;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (id)gLogObj;
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 136446722;
    __int16 v17 = "nw_printf_internal_error";
    __int16 v18 = 2080;
    uint64_t v19 = a1;
    __int16 v20 = 2080;
    uint64_t v21 = a2;
    unint64_t v8 = "%{public}s %s %s";
LABEL_15:
    uint64_t v12 = v6;
    os_log_type_t v13 = v7;
LABEL_16:
    _os_log_impl(&dword_1830D4000, v12, v13, v8, buf, 0x20u);
    goto LABEL_17;
  }
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (id)gLogObj;
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 136446722;
    __int16 v17 = "nw_printf_internal_error";
    __int16 v18 = 2080;
    uint64_t v19 = a1;
    __int16 v20 = 2080;
    uint64_t v21 = a2;
    unint64_t v8 = "%{public}s %s %s, backtrace limit exceeded";
    goto LABEL_15;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v6 = (id)gLogObj;
  os_log_type_t v10 = type;
  BOOL v11 = os_log_type_enabled(v6, type);
  if (backtrace_string)
  {
    if (v11)
    {
      *(_DWORD *)buf = 136446978;
      __int16 v17 = "nw_printf_internal_error";
      __int16 v18 = 2080;
      uint64_t v19 = a1;
      __int16 v20 = 2080;
      uint64_t v21 = a2;
      __int16 v22 = 2082;
      std::locale v23 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s %s %s, dumping backtrace:%{public}s", buf, 0x2Au);
    }

    free(backtrace_string);
LABEL_10:
    if (!v5) {
      return;
    }
    goto LABEL_11;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446722;
    __int16 v17 = "nw_printf_internal_error";
    __int16 v18 = 2080;
    uint64_t v19 = a1;
    __int16 v20 = 2080;
    uint64_t v21 = a2;
    unint64_t v8 = "%{public}s %s %s, no backtrace";
    uint64_t v12 = v6;
    os_log_type_t v13 = v10;
    goto LABEL_16;
  }
LABEL_17:

  if (v5) {
LABEL_11:
  }
    free(v5);
}

void sub_18389CE04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *tcp_connection_event_to_string(int a1)
{
  if (!v2 & v1)
  {
    int v3 = a1 - 1;
    uint64_t result = "TCP_CONNECTION_EVENT_CONNECTED";
    switch(v3)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "TCP_CONNECTION_EVENT_READ_CLOSE";
        break;
      case 2:
        uint64_t result = "TCP_CONNECTION_EVENT_DISCONNECTED";
        break;
      case 3:
        uint64_t result = "TCP_CONNECTION_EVENT_WRITE_CLOSE";
        break;
      case 4:
        uint64_t result = "TCP_CONNECTION_EVENT_BETTER_ROUTE";
        break;
      case 5:
        uint64_t result = "TCP_CONNECTION_EVENT_VIABILITY_CHANGED";
        break;
      case 6:
        uint64_t result = "TCP_CONNECTION_EVENT_WAITING";
        break;
      case 7:
        uint64_t result = "TCP_CONNECTION_EVENT_TLS_HANDSHAKE_COMPLETE";
        break;
      default:
        uint64_t result = "UNKNOWN";
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 1073741825:
        uint64_t result = "TCP_CONNECTION_EVENT_KEEPALIVE";
        break;
      case 1073741826:
        uint64_t result = "TCP_CONNECTION_EVENT_CONDITIONS_CHANGED";
        break;
      case 1073741827:
        uint64_t result = "TCP_CONNECTION_EVENT_DNSSEC";
        break;
      case 1073741828:
        uint64_t result = "TCP_CONNECTION_EVENT_ADAPTIVE_READ_TIMEOUT";
        break;
      case 1073741829:
        uint64_t result = "TCP_CONNECTION_EVENT_ADAPTIVE_WRITE_TIMEOUT";
        break;
      case 1073741830:
        uint64_t result = "TCP_CONNECTION_EVENT_LOW_THROUGHPUT";
        break;
      case 1073741831:
        uint64_t result = "TCP_CONNECTION_EVENT_BETTER_ROUTE_CHANGED";
        break;
      case 1073741832:
        uint64_t result = "TCP_CONNECTION_EVENT_CONNECTION_ATTEMPT_TIMEOUT";
        break;
      case 1073741833:
        uint64_t result = "TCP_CONNECTION_EVENT_CONNECTION_QUALITY_CHANGED";
        break;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

char *tcp_connection_create_with_endpoint_and_parameters(void *a1, void *a2, void *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  id v8 = a3;
  nw_allow_use_of_dispatch_internal();
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = -[NWConcrete_tcp_connection initWithParameters:]((char *)[NWConcrete_tcp_connection alloc], v7);
      os_log_type_t v10 = v9;
      if (v9)
      {
        objc_storeStrong((id *)v9 + 7, a3);
        *((void *)v10 + 12) = nw_endpoint_handler_get_next_top_id();
        objc_storeStrong((id *)v10 + 5, a1);
        if (nw_parameters_get_allow_socket_access(*((void **)v10 + 6))) {
          char v11 = 0x80;
        }
        else {
          char v11 = 0;
        }
        v10[158] = v11 & 0x80 | v10[158] & 0x7F;
        uint64_t v12 = v6;
        int v13 = [v12 type];

        switch(v13)
        {
          case 1:
            v10[157] = 3;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v14 = (id)gLogObj;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v27 = (char *)*((void *)v10 + 12);
              *(_DWORD *)buf = 136446722;
              int v50 = "tcp_connection_create_with_endpoint_and_parameters";
              __int16 v51 = 2048;
              id v52 = v27;
              __int16 v53 = 2082;
              logging_description = nw_endpoint_get_logging_description(v12);
              _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %llu %{public}s", buf, 0x20u);
            }
            break;
          case 3:
            v10[157] = 1;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v14 = (id)gLogObj;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              int32x4_t v28 = (char *)*((void *)v10 + 12);
              *(_DWORD *)buf = 136447234;
              int v50 = "tcp_connection_create_with_endpoint_and_parameters";
              __int16 v51 = 2048;
              id v52 = v28;
              __int16 v53 = 2082;
              logging_description = nw_endpoint_get_bonjour_service_name(v12);
              __int16 v55 = 2082;
              bonjour_service_os_log_type_t type = nw_endpoint_get_bonjour_service_type(v12);
              __int16 v57 = 2082;
              bonjour_service_domain = nw_endpoint_get_bonjour_service_domain(v12);
              _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %llu %{public}s %{public}s %{public}s", buf, 0x34u);
            }
            break;
          case 2:
            v10[157] = 2;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v14 = (id)gLogObj;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v15 = (char *)*((void *)v10 + 12);
              unsigned int v16 = v12;
              uint64_t v17 = [v16 hostname];

              __int16 v18 = v16;
              unsigned int v19 = __rev16([v18 port]);

              *(_DWORD *)buf = 136446978;
              int v50 = "tcp_connection_create_with_endpoint_and_parameters";
              __int16 v51 = 2048;
              id v52 = v15;
              __int16 v53 = 2082;
              logging_description = (const char *)v17;
              __int16 v55 = 1024;
              LODWORD(bonjour_service_type) = v19;
              _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %llu %{public}s %d", buf, 0x26u);
            }
            break;
          default:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v29 = (id)gLogObj;
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v30 = (char *)*((void *)v10 + 12);
              *(_DWORD *)buf = 136446722;
              int v50 = "tcp_connection_create_with_endpoint_and_parameters";
              __int16 v51 = 2048;
              id v52 = v30;
              __int16 v53 = 1024;
              LODWORD(logging_description) = v13;
              _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %llu Custom endpoint type: %u", buf, 0x1Cu);
            }

            v10[157] = 0;
            goto LABEL_33;
        }

LABEL_33:
        unint64_t v31 = v10;
LABEL_42:

        goto LABEL_43;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v20 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      int v50 = "tcp_connection_create_with_endpoint_and_parameters";
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v47 = 0;
      if (__nwlog_fault(v21, &type, &v47))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v22 = (id)gLogObj;
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)buf = 136446210;
            int v50 = "tcp_connection_create_with_endpoint_and_parameters";
            _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s [tcp_connection initWithParameters:] failed", buf, 0xCu);
          }
        }
        else if (v47)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v22 = (id)gLogObj;
          os_log_type_t v25 = type;
          BOOL v26 = os_log_type_enabled(v22, type);
          if (backtrace_string)
          {
            if (v26)
            {
              *(_DWORD *)buf = 136446466;
              int v50 = "tcp_connection_create_with_endpoint_and_parameters";
              __int16 v51 = 2082;
              id v52 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s [tcp_connection initWithParameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v21) {
              goto LABEL_42;
            }
            goto LABEL_41;
          }
          if (v26)
          {
            *(_DWORD *)buf = 136446210;
            int v50 = "tcp_connection_create_with_endpoint_and_parameters";
            _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s [tcp_connection initWithParameters:] failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v22 = (id)gLogObj;
          os_log_type_t v32 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)buf = 136446210;
            int v50 = "tcp_connection_create_with_endpoint_and_parameters";
            _os_log_impl(&dword_1830D4000, v22, v32, "%{public}s [tcp_connection initWithParameters:] failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v21) {
        goto LABEL_42;
      }
LABEL_41:
      free(v21);
      goto LABEL_42;
    }
    uint64_t v38 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v50 = "tcp_connection_create_with_endpoint_and_parameters";
    unsigned int v35 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (__nwlog_fault(v35, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v36 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          int v50 = "tcp_connection_create_with_endpoint_and_parameters";
          _os_log_impl(&dword_1830D4000, v36, v39, "%{public}s called with null queue", buf, 0xCu);
        }
LABEL_75:

        goto LABEL_76;
      }
      if (!v47)
      {
        BOOL v36 = __nwlog_obj();
        os_log_type_t v46 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          int v50 = "tcp_connection_create_with_endpoint_and_parameters";
          _os_log_impl(&dword_1830D4000, v36, v46, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_75;
      }
      __int16 v40 = (char *)__nw_create_backtrace_string();
      BOOL v36 = __nwlog_obj();
      os_log_type_t v43 = type;
      BOOL v44 = os_log_type_enabled(v36, type);
      if (!v40)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          int v50 = "tcp_connection_create_with_endpoint_and_parameters";
          _os_log_impl(&dword_1830D4000, v36, v43, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }
        goto LABEL_75;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        int v50 = "tcp_connection_create_with_endpoint_and_parameters";
        __int16 v51 = 2082;
        id v52 = v40;
        _os_log_impl(&dword_1830D4000, v36, v43, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_63;
    }
  }
  else
  {
    uint64_t v34 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v50 = "tcp_connection_create_with_endpoint_and_parameters";
    unsigned int v35 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (__nwlog_fault(v35, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          int v50 = "tcp_connection_create_with_endpoint_and_parameters";
          _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s called with null endpoint", buf, 0xCu);
        }
        goto LABEL_75;
      }
      if (!v47)
      {
        BOOL v36 = __nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          int v50 = "tcp_connection_create_with_endpoint_and_parameters";
          _os_log_impl(&dword_1830D4000, v36, v45, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_75;
      }
      __int16 v40 = (char *)__nw_create_backtrace_string();
      BOOL v36 = __nwlog_obj();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v36, type);
      if (!v40)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          int v50 = "tcp_connection_create_with_endpoint_and_parameters";
          _os_log_impl(&dword_1830D4000, v36, v41, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_75;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        int v50 = "tcp_connection_create_with_endpoint_and_parameters";
        __int16 v51 = 2082;
        id v52 = v40;
        _os_log_impl(&dword_1830D4000, v36, v41, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_63:

      free(v40);
    }
  }
LABEL_76:
  if (v35) {
    free(v35);
  }
  os_log_type_t v10 = 0;
LABEL_43:

  return v10;
}

void sub_18389DA58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id tcp_connection_copy_endpoint(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  char v1 = a1;
  char v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "tcp_connection_copy_endpoint";
    BOOL v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "tcp_connection_copy_endpoint";
        id v8 = "%{public}s called with null connection";
LABEL_18:
        int v13 = v6;
        os_log_type_t v14 = v7;
        goto LABEL_19;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "tcp_connection_copy_endpoint";
        id v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_18;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_20:

          if (!v5) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "tcp_connection_copy_endpoint";
        id v8 = "%{public}s called with null connection, no backtrace";
        int v13 = v6;
        os_log_type_t v14 = v10;
LABEL_19:
        _os_log_impl(&dword_1830D4000, v13, v14, v8, buf, 0xCu);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v18 = "tcp_connection_copy_endpoint";
        __int16 v19 = 2082;
        id v20 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5)
    {
LABEL_14:
      id v3 = 0;
      goto LABEL_15;
    }
LABEL_13:
    free(v5);
    goto LABEL_14;
  }
  os_unfair_lock_lock(v1 + 30);
  id v3 = *(id *)&v2[10]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 30);
LABEL_15:

  return v3;
}

id tcp_connection_copy_parameters(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  char v1 = a1;
  char v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "tcp_connection_copy_parameters";
    BOOL v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "tcp_connection_copy_parameters";
        id v8 = "%{public}s called with null connection";
LABEL_18:
        int v13 = v6;
        os_log_type_t v14 = v7;
        goto LABEL_19;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "tcp_connection_copy_parameters";
        id v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_18;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_20:

          if (!v5) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "tcp_connection_copy_parameters";
        id v8 = "%{public}s called with null connection, no backtrace";
        int v13 = v6;
        os_log_type_t v14 = v10;
LABEL_19:
        _os_log_impl(&dword_1830D4000, v13, v14, v8, buf, 0xCu);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v18 = "tcp_connection_copy_parameters";
        __int16 v19 = 2082;
        id v20 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5)
    {
LABEL_14:
      id v3 = 0;
      goto LABEL_15;
    }
LABEL_13:
    free(v5);
    goto LABEL_14;
  }
  os_unfair_lock_lock(v1 + 30);
  id v3 = *(id *)&v2[12]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 30);
LABEL_15:

  return v3;
}

uint64_t tcp_connection_are_proxies_supported()
{
  return 1;
}

char *tcp_connection_create_with_sockaddr(const sockaddr *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  nw_allow_use_of_dispatch_internal();
  if (v3)
  {
    if (a1)
    {
      nw_endpoint_t address = nw_endpoint_create_address(a1);
      nw_endpoint_t v5 = address;
      if (address) {
        id v6 = tcp_connection_create_with_endpoint_and_parameters(address, 0, v3);
      }
      else {
        id v6 = 0;
      }

      goto LABEL_7;
    }
    int v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "tcp_connection_create_with_sockaddr";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "tcp_connection_create_with_sockaddr";
          uint64_t v12 = "%{public}s called with null sa";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (!v18)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "tcp_connection_create_with_sockaddr";
          uint64_t v12 = "%{public}s called with null sa, backtrace limit exceeded";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v17 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "tcp_connection_create_with_sockaddr";
          uint64_t v12 = "%{public}s called with null sa, no backtrace";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (!v17) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v21 = "tcp_connection_create_with_sockaddr";
      __int16 v22 = 2082;
      os_log_type_t v23 = backtrace_string;
      unsigned int v16 = "%{public}s called with null sa, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_1830D4000, v10, v11, v16, buf, 0x16u);
LABEL_25:

      free(backtrace_string);
    }
  }
  else
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "tcp_connection_create_with_sockaddr";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "tcp_connection_create_with_sockaddr";
          uint64_t v12 = "%{public}s called with null queue";
LABEL_34:
          _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
        }
LABEL_35:

        goto LABEL_36;
      }
      if (!v18)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "tcp_connection_create_with_sockaddr";
          uint64_t v12 = "%{public}s called with null queue, backtrace limit exceeded";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v15 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "tcp_connection_create_with_sockaddr";
          uint64_t v12 = "%{public}s called with null queue, no backtrace";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (!v15) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v21 = "tcp_connection_create_with_sockaddr";
      __int16 v22 = 2082;
      os_log_type_t v23 = backtrace_string;
      unsigned int v16 = "%{public}s called with null queue, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
  }
LABEL_36:
  if (v9) {
    free(v9);
  }
  id v6 = 0;
LABEL_7:

  return v6;
}

char *tcp_connection_create_with_connected_fd(int a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  nw_allow_use_of_dispatch_internal();
  if (!v4)
  {
    id v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "tcp_connection_create_with_connected_fd";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v9, &type, &v26)) {
      goto LABEL_16;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "tcp_connection_create_with_connected_fd";
        os_log_type_t v23 = "%{public}s called with null queue";
LABEL_41:
        _os_log_impl(&dword_1830D4000, v21, v22, v23, buf, 0xCu);
      }
    }
    else
    {
      if (v26)
      {
        backtrace_string = __nw_create_backtrace_string();
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = type;
        BOOL v25 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            char v29 = "tcp_connection_create_with_connected_fd";
            __int16 v30 = 2082;
            unint64_t v31 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
          }

          unsigned int v16 = (char *)backtrace_string;
LABEL_15:
          free(v16);
          goto LABEL_16;
        }
        if (!v25) {
          goto LABEL_42;
        }
        *(_DWORD *)buf = 136446210;
        char v29 = "tcp_connection_create_with_connected_fd";
        os_log_type_t v23 = "%{public}s called with null queue, no backtrace";
        goto LABEL_41;
      }
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "tcp_connection_create_with_connected_fd";
        os_log_type_t v23 = "%{public}s called with null queue, backtrace limit exceeded";
        goto LABEL_41;
      }
    }
LABEL_42:

LABEL_16:
    if (!v9)
    {
LABEL_18:
      id v6 = 0;
      goto LABEL_19;
    }
LABEL_17:
    free(v9);
    goto LABEL_18;
  }
  if (a1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v29 = "tcp_connection_create_with_connected_fd";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v9, &type, &v26)) {
      goto LABEL_16;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      char v29 = "tcp_connection_create_with_connected_fd";
      uint64_t v12 = "%{public}s called with null fd";
LABEL_22:
      char v18 = v10;
      os_log_type_t v19 = v11;
      goto LABEL_23;
    }
    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      char v29 = "tcp_connection_create_with_connected_fd";
      uint64_t v12 = "%{public}s called with null fd, backtrace limit exceeded";
      goto LABEL_22;
    }
    int v13 = __nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (id)gLogObj;
    os_log_type_t v14 = type;
    BOOL v15 = os_log_type_enabled(v10, type);
    if (!v13)
    {
      if (!v15)
      {
LABEL_24:

        if (!v9) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      *(_DWORD *)buf = 136446210;
      char v29 = "tcp_connection_create_with_connected_fd";
      uint64_t v12 = "%{public}s called with null fd, no backtrace";
      char v18 = v10;
      os_log_type_t v19 = v14;
LABEL_23:
      _os_log_impl(&dword_1830D4000, v18, v19, v12, buf, 0xCu);
      goto LABEL_24;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      char v29 = "tcp_connection_create_with_connected_fd";
      __int16 v30 = 2082;
      unint64_t v31 = v13;
      _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s called with null fd, dumping backtrace:%{public}s", buf, 0x16u);
    }

    unsigned int v16 = (char *)v13;
    goto LABEL_15;
  }
  nw_endpoint_t v5 = tcp_connection_create_with_connected_fd_inner(a1, 0);
  id v6 = v5;
  if (v5)
  {
    objc_storeStrong((id *)v5 + 7, a2);
    nw_connection_set_queue(*((nw_connection_t *)v6 + 2), *((dispatch_queue_t *)v6 + 7));
    v6[157] = 6;
    os_log_type_t v7 = v6;
  }

LABEL_19:
  return v6;
}

char *tcp_connection_create_with_connected_fd_inner(int a1, char a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = -[NWConcrete_tcp_connection initWithParameters:]((char *)[NWConcrete_tcp_connection alloc], 0);
  nw_endpoint_t v5 = v4;
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    unint64_t v27 = "tcp_connection_create_with_connected_fd_inner";
    unsigned int v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v16, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v17 = (id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v27 = "tcp_connection_create_with_connected_fd_inner";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s [tcp_connection initWithParameters:] failed", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v17 = (id)gLogObj;
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v27 = "tcp_connection_create_with_connected_fd_inner";
            __int16 v28 = 2082;
            char v29 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v17, v21, "%{public}s [tcp_connection initWithParameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v16) {
            goto LABEL_11;
          }
          goto LABEL_10;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v27 = "tcp_connection_create_with_connected_fd_inner";
          _os_log_impl(&dword_1830D4000, v17, v21, "%{public}s [tcp_connection initWithParameters:] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v17 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v27 = "tcp_connection_create_with_connected_fd_inner";
          _os_log_impl(&dword_1830D4000, v17, v23, "%{public}s [tcp_connection initWithParameters:] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v16)
    {
LABEL_11:
      os_log_type_t v14 = 0;
      goto LABEL_14;
    }
LABEL_10:
    free(v16);
    goto LABEL_11;
  }
  v4[157] = 4;
  nw_parameters_t v6 = nw_parameters_create();
  nw_parameters_set_data_mode(v6, 2u);
  nw_parameters_set_server_mode(v6, a2);
  nw_parameters_set_allow_socket_access(v6, 1);
  os_log_type_t v7 = nw_connection_create_with_connected_socket_and_parameters(a1, v6);
  id v8 = (void *)*((void *)v5 + 2);
  *((void *)v5 + 2) = v7;

  uint64_t v9 = (void *)*((void *)v5 + 2);
  if (v9)
  {
    os_log_type_t v10 = v9;
    uint64_t v11 = v10[112];

    *((void *)v5 + 12) = v11;
    nw_endpoint_t v12 = nw_connection_copy_endpoint(*((nw_connection_t *)v5 + 2));
    int v13 = (void *)*((void *)v5 + 5);
    *((void *)v5 + 5) = v12;

    os_log_type_t v14 = v5;
  }
  else
  {
    os_log_type_t v14 = 0;
  }

LABEL_14:
  return v14;
}

char *tcp_connection_create_inbound(int a1)
{
  return tcp_connection_create_with_connected_fd_inner(a1, 1);
}

void tcp_connection_set_cellular_service(void *a1, char *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    unint64_t v33 = "tcp_connection_set_cellular_service";
    uint64_t v9 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t v31 = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault((const char *)v9, &v31, &v30))
    {
      if (v31 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v11 = v31;
        if (!os_log_type_enabled(v10, v31)) {
          goto LABEL_36;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v33 = "tcp_connection_set_cellular_service";
        nw_endpoint_t v12 = "%{public}s called with null connection";
LABEL_34:
        char v24 = v10;
        os_log_type_t v25 = v11;
        goto LABEL_35;
      }
      if (!v30)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v11 = v31;
        if (!os_log_type_enabled(v10, v31)) {
          goto LABEL_36;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v33 = "tcp_connection_set_cellular_service";
        nw_endpoint_t v12 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_34;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (id)gLogObj;
      os_log_type_t v20 = v31;
      BOOL v21 = os_log_type_enabled(v10, v31);
      if (!backtrace_string)
      {
        if (!v21)
        {
LABEL_36:

          if (!v9) {
            goto LABEL_38;
          }
LABEL_37:
          free(v9);
          goto LABEL_38;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v33 = "tcp_connection_set_cellular_service";
        nw_endpoint_t v12 = "%{public}s called with null connection, no backtrace";
        char v24 = v10;
        os_log_type_t v25 = v20;
LABEL_35:
        _os_log_impl(&dword_1830D4000, v24, v25, v12, buf, 0xCu);
        goto LABEL_36;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v33 = "tcp_connection_set_cellular_service";
        __int16 v34 = 2082;
        unsigned int v35 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v9) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  id v5 = nw_parameters_copy_required_netagent_domains(v3[6]);
  id v6 = nw_parameters_copy_required_netagent_types(v4[6]);
  xpc_object_t v7 = v6;
  if (!a2)
  {
    if (v5) {
      BOOL v13 = v6 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13 && xpc_array_get_count(v5))
    {
      xpc_object_t v14 = xpc_array_create(0, 0);
      xpc_object_t v15 = xpc_array_create(0, 0);
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __tcp_connection_set_cellular_service_block_invoke;
      applier[3] = &unk_1E5248550;
      id v16 = v14;
      id v27 = v16;
      id v28 = v7;
      id v17 = v15;
      id v29 = v17;
      xpc_array_apply(v5, applier);
      id v18 = v16;

      xpc_object_t v7 = v17;
      id v5 = v18;
    }
    goto LABEL_31;
  }
  if (v5)
  {
    if (v6) {
      goto LABEL_5;
    }
  }
  else
  {
    id v5 = xpc_array_create(0, 0);
    if (v7)
    {
LABEL_5:
      if (!v5) {
        goto LABEL_31;
      }
LABEL_26:
      if (v7)
      {
        xpc_array_set_string(v5, 0xFFFFFFFFFFFFFFFFLL, "Cellular");
        if (strstr(a2, "kCTDataConnectionServiceType"))
        {
          BOOL v22 = a2 + 28;
          os_log_type_t v23 = v7;
        }
        else
        {
          os_log_type_t v23 = v7;
          BOOL v22 = a2;
        }
        xpc_array_set_string(v23, 0xFFFFFFFFFFFFFFFFLL, v22);
      }
      goto LABEL_31;
    }
  }
  xpc_object_t v7 = xpc_array_create(0, 0);
  if (v5) {
    goto LABEL_26;
  }
LABEL_31:
  nw_parameters_set_required_netagent_classes(v4[6], v5, v7);

LABEL_38:
}

uint64_t __tcp_connection_set_cellular_service_block_invoke(xpc_object_t *a1, size_t a2, void *a3)
{
  id v5 = a3;
  if (object_getClass(v5) == (Class)MEMORY[0x1E4F145F0])
  {
    string_ptr = xpc_string_get_string_ptr(v5);
    if (strncmp(string_ptr, "Cellular", 0x20uLL))
    {
      xpc_array_append_value(a1[4], v5);
      xpc_object_t v7 = xpc_array_get_value(a1[5], a2);
      if (v7) {
        xpc_array_append_value(a1[6], v7);
      }
    }
  }

  return 1;
}

void tcp_connection_set_no_cellular(void *a1, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v24 = "tcp_connection_set_no_cellular";
    id v8 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault((const char *)v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_26;
        }
        *(_DWORD *)buf = 136446210;
        char v24 = "tcp_connection_set_no_cellular";
        os_log_type_t v11 = "%{public}s called with null connection";
LABEL_24:
        id v17 = v9;
        os_log_type_t v18 = v10;
        goto LABEL_25;
      }
      if (!v21)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_26;
        }
        *(_DWORD *)buf = 136446210;
        char v24 = "tcp_connection_set_no_cellular";
        os_log_type_t v11 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_24;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (id)gLogObj;
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v14)
        {
LABEL_26:

          if (!v8) {
            goto LABEL_28;
          }
LABEL_27:
          free(v8);
          goto LABEL_28;
        }
        *(_DWORD *)buf = 136446210;
        char v24 = "tcp_connection_set_no_cellular";
        os_log_type_t v11 = "%{public}s called with null connection, no backtrace";
        id v17 = v9;
        os_log_type_t v18 = v13;
LABEL_25:
        _os_log_impl(&dword_1830D4000, v17, v18, v11, buf, 0xCu);
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        char v24 = "tcp_connection_set_no_cellular";
        __int16 v25 = 2082;
        char v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v8) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (nw_parameters_get_prohibit_cellular(v3[6]) != a2)
  {
    id v5 = nw_parameters_copy_prohibited_interface_types(v4[6]);
    xpc_object_t v6 = v5;
    if (!a2)
    {
      if (v5)
      {
        xpc_object_t v15 = xpc_array_create(0, 0);
        if (v15)
        {
          applier[0] = MEMORY[0x1E4F143A8];
          applier[1] = 3221225472;
          applier[2] = __tcp_connection_set_no_cellular_block_invoke;
          applier[3] = &unk_1E524B4A0;
          id v20 = v15;
          id v16 = v15;
          xpc_array_apply(v6, applier);

          nw_parameters_set_prohibited_interface_types(v4[6], v16);
        }
      }
      goto LABEL_21;
    }
    if (v5 || (xpc_object_t v6 = xpc_array_create(0, 0)) != 0)
    {
      xpc_array_set_uint64(v6, 0xFFFFFFFFFFFFFFFFLL, 2uLL);
      nw_parameters_set_prohibited_interface_types(v4[6], v6);
LABEL_21:
    }
  }
LABEL_28:
}

uint64_t __tcp_connection_set_no_cellular_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F8] && xpc_uint64_get_value(v4) != 2) {
    xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v4);
  }

  return 1;
}

void tcp_connection_set_no_expensive(uint64_t a1, BOOL a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    id v16 = "tcp_connection_set_no_expensive";
    id v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        id v16 = "tcp_connection_set_no_expensive";
        id v7 = "%{public}s called with null connection";
LABEL_19:
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        id v16 = "tcp_connection_set_no_expensive";
        id v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        id v16 = "tcp_connection_set_no_expensive";
        id v7 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        id v16 = "tcp_connection_set_no_expensive";
        __int16 v17 = 2082;
        os_log_type_t v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  char v2 = *(NSObject **)(a1 + 48);

  nw_parameters_set_prohibit_expensive(v2, a2);
}

void tcp_connection_set_url(uint64_t a1, const char *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    id v16 = "tcp_connection_set_url";
    id v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        id v16 = "tcp_connection_set_url";
        id v7 = "%{public}s called with null connection";
LABEL_19:
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        id v16 = "tcp_connection_set_url";
        id v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        id v16 = "tcp_connection_set_url";
        id v7 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        id v16 = "tcp_connection_set_url";
        __int16 v17 = 2082;
        os_log_type_t v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  char v2 = *(void **)(a1 + 48);

  nw_parameters_set_url(v2, a2);
}

void tcp_connection_set_proxies(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v21 = "tcp_connection_set_proxies";
    os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault((const char *)v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        char v21 = "tcp_connection_set_proxies";
        os_log_type_t v12 = "%{public}s called with null connection";
LABEL_21:
        id v16 = v10;
        os_log_type_t v17 = v11;
        goto LABEL_22;
      }
      if (!v18)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        char v21 = "tcp_connection_set_proxies";
        os_log_type_t v12 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = (id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_23:

          if (!v9) {
            goto LABEL_25;
          }
LABEL_24:
          free(v9);
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        char v21 = "tcp_connection_set_proxies";
        os_log_type_t v12 = "%{public}s called with null connection, no backtrace";
        id v16 = v10;
        os_log_type_t v17 = v14;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v16, v17, v12, buf, 0xCu);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        char v21 = "tcp_connection_set_proxies";
        __int16 v22 = 2082;
        os_log_type_t v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v9) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v4)
  {
    if (object_getClass(v4) == (Class)MEMORY[0x1E4F14590] && !xpc_dictionary_get_count(v5))
    {
      nw_parameters_set_no_proxy(v3[6], 1);
      goto LABEL_25;
    }
    os_log_type_t v6 = v3[6];
    id v7 = v5;
  }
  else
  {
    nw_parameters_set_no_proxy(v3[6], 0);
    os_log_type_t v6 = v3[6];
    id v7 = 0;
  }
  nw_parameters_set_proxy_configuration(v6, v7);
LABEL_25:
}

void tcp_connection_set_persistent(void *a1, int a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    xpc_object_t v5 = nw_parameters_copy_preferred_netagent_domains(v3[6]);
    xpc_object_t v6 = nw_parameters_copy_preferred_netagent_types(v4[6]);
    xpc_object_t v7 = v6;
    if (!a2)
    {
      if (v5) {
        BOOL v13 = v6 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13 && xpc_array_get_count(v5))
      {
        xpc_object_t v14 = xpc_array_create(0, 0);
        xpc_object_t v15 = xpc_array_create(0, 0);
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = __tcp_connection_set_persistent_block_invoke;
        applier[3] = &unk_1E5248550;
        id v35 = v7;
        id v16 = v14;
        id v36 = v16;
        id v17 = v15;
        id v37 = v17;
        xpc_array_apply(v5, applier);
        id v18 = v16;

        xpc_object_t v7 = v17;
        xpc_object_t v5 = v18;
      }
      goto LABEL_52;
    }
    if (v5)
    {
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      xpc_object_t v5 = xpc_array_create(0, 0);
      if (v7)
      {
LABEL_5:
        if (!v5) {
          goto LABEL_28;
        }
        goto LABEL_26;
      }
    }
    xpc_object_t v7 = xpc_array_create(0, 0);
    if (!v5) {
      goto LABEL_28;
    }
LABEL_26:
    if (v7)
    {
      xpc_array_set_string(v5, 0xFFFFFFFFFFFFFFFFLL, "Persistent");
      xpc_array_set_string(v7, 0xFFFFFFFFFFFFFFFFLL, "Persistent");
LABEL_52:
      nw_parameters_set_preferred_netagent_classes(v4[6], v5, v7);

      goto LABEL_53;
    }
LABEL_28:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v22 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v41 = "tcp_connection_set_persistent";
    os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (!__nwlog_fault(v23, &type, &v38)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v24 = (id)gLogObj;
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v41 = "tcp_connection_set_persistent";
        char v26 = "%{public}s xpc_array_create failed";
LABEL_47:
        uint64_t v32 = v24;
        os_log_type_t v33 = v25;
LABEL_48:
        _os_log_impl(&dword_1830D4000, v32, v33, v26, buf, 0xCu);
      }
    }
    else
    {
      if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v24 = (id)gLogObj;
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v41 = "tcp_connection_set_persistent";
            __int16 v42 = 2082;
            os_log_type_t v43 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v24, v28, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (!v29) {
          goto LABEL_49;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v41 = "tcp_connection_set_persistent";
        char v26 = "%{public}s xpc_array_create failed, no backtrace";
        uint64_t v32 = v24;
        os_log_type_t v33 = v28;
        goto LABEL_48;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v24 = (id)gLogObj;
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v41 = "tcp_connection_set_persistent";
        char v26 = "%{public}s xpc_array_create failed, backtrace limit exceeded";
        goto LABEL_47;
      }
    }
LABEL_49:

LABEL_50:
    if (v23) {
      free(v23);
    }
    goto LABEL_52;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v8 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v41 = "tcp_connection_set_persistent";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v38 = 0;
  if (!__nwlog_fault(v9, &type, &v38)) {
    goto LABEL_22;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v10 = (id)gLogObj;
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v41 = "tcp_connection_set_persistent";
    os_log_type_t v12 = "%{public}s called with null connection";
LABEL_39:
    char v30 = v10;
    os_log_type_t v31 = v11;
LABEL_40:
    _os_log_impl(&dword_1830D4000, v30, v31, v12, buf, 0xCu);
    goto LABEL_41;
  }
  if (!v38)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v10 = (id)gLogObj;
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v41 = "tcp_connection_set_persistent";
    os_log_type_t v12 = "%{public}s called with null connection, backtrace limit exceeded";
    goto LABEL_39;
  }
  uint64_t v19 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v10 = (id)gLogObj;
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v10, type);
  if (v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v41 = "tcp_connection_set_persistent";
      __int16 v42 = 2082;
      os_log_type_t v43 = v19;
      _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v19);
LABEL_22:
    if (!v9) {
      goto LABEL_53;
    }
    goto LABEL_42;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v41 = "tcp_connection_set_persistent";
    os_log_type_t v12 = "%{public}s called with null connection, no backtrace";
    char v30 = v10;
    os_log_type_t v31 = v20;
    goto LABEL_40;
  }
LABEL_41:

  if (v9) {
LABEL_42:
  }
    free(v9);
LABEL_53:
}

uint64_t __tcp_connection_set_persistent_block_invoke(xpc_object_t *a1, size_t a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_array_get_value(a1[4], a2);
  Class Class = object_getClass(v5);
  id v8 = (objc_class *)MEMORY[0x1E4F145F0];
  if (Class == (Class)MEMORY[0x1E4F145F0] && object_getClass(v6) == v8)
  {
    string_ptr = xpc_string_get_string_ptr(v5);
    if (strncmp(string_ptr, "Persistent", 0x20uLL)
      || (BOOL v10 = xpc_string_get_string_ptr(v5), strncmp(v10, "Persistent", 0x20uLL)))
    {
      xpc_array_append_value(a1[5], v5);
      xpc_array_append_value(a1[6], v6);
    }
  }

  return 1;
}

void tcp_connection_set_opportunistic(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    id v16 = "tcp_connection_set_opportunistic";
    id v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        id v16 = "tcp_connection_set_opportunistic";
        xpc_object_t v7 = "%{public}s called with null connection";
LABEL_22:
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_23;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        id v16 = "tcp_connection_set_opportunistic";
        xpc_object_t v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_24:

          if (!v4) {
            return;
          }
LABEL_18:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        id v16 = "tcp_connection_set_opportunistic";
        xpc_object_t v7 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v9;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_24;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        id v16 = "tcp_connection_set_opportunistic";
        __int16 v17 = 2082;
        id v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_18;
  }
  if (a2) {
    int v2 = 100;
  }
  else {
    int v2 = 0;
  }

  tcp_connection_set_traffic_class(a1, v2);
}

void tcp_connection_set_traffic_class(void *a1, int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "tcp_connection_set_traffic_class";
    xpc_object_t v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault((const char *)v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "tcp_connection_set_traffic_class";
        BOOL v10 = "%{public}s called with null connection";
LABEL_21:
        xpc_object_t v14 = v8;
        os_log_type_t v15 = v9;
        goto LABEL_22;
      }
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "tcp_connection_set_traffic_class";
        BOOL v10 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_23:

          if (!v7) {
            goto LABEL_25;
          }
LABEL_24:
          free(v7);
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "tcp_connection_set_traffic_class";
        BOOL v10 = "%{public}s called with null connection, no backtrace";
        xpc_object_t v14 = v8;
        os_log_type_t v15 = v12;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v14, v15, v10, buf, 0xCu);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v19 = "tcp_connection_set_traffic_class";
        __int16 v20 = 2082;
        BOOL v21 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v7) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  os_unfair_lock_lock(v3 + 30);
  if (nw_parameters_get_traffic_class(*(void **)&v4[12]._os_unfair_lock_opaque) != a2)
  {
    id v5 = *(void **)&v4[4]._os_unfair_lock_opaque;
    if (v5)
    {
      nw_connection_reset_traffic_class(v5, a2);
    }
    else if (LOBYTE(v4[39]._os_unfair_lock_opaque) - 1 >= 2)
    {
      nw_parameters_set_traffic_class(*(void **)&v4[12]._os_unfair_lock_opaque, a2);
    }
  }
  os_unfair_lock_unlock(v4 + 30);
LABEL_25:
}

void tcp_connection_set_no_fallback(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v16 = "tcp_connection_set_no_fallback";
    id v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        char v16 = "tcp_connection_set_no_fallback";
        xpc_object_t v7 = "%{public}s called with null connection";
LABEL_19:
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        char v16 = "tcp_connection_set_no_fallback";
        xpc_object_t v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        char v16 = "tcp_connection_set_no_fallback";
        xpc_object_t v7 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        char v16 = "tcp_connection_set_no_fallback";
        __int16 v17 = 2082;
        id v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  int v2 = *(void **)(a1 + 48);

  nw_parameters_set_no_fallback(v2, a2);
}

void tcp_connection_set_fallback_fast()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    int v1 = 136446210;
    int v2 = "tcp_connection_set_fallback_fast";
    _os_log_impl(&dword_1830D4000, v0, OS_LOG_TYPE_ERROR, "%{public}s tcp_connection_set_fallback_fast is deprecated", (uint8_t *)&v1, 0xCu);
  }
}

void tcp_connection_set_usage_model(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "tcp_connection_set_usage_model";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "tcp_connection_set_usage_model";
        os_log_type_t v11 = "%{public}s called with null connection";
LABEL_23:
        os_log_type_t v15 = v9;
        os_log_type_t v16 = v10;
        goto LABEL_24;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "tcp_connection_set_usage_model";
        os_log_type_t v11 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_23;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v14)
        {
LABEL_25:

          if (!v8) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "tcp_connection_set_usage_model";
        os_log_type_t v11 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v15 = v9;
        os_log_type_t v16 = v13;
LABEL_24:
        _os_log_impl(&dword_1830D4000, v15, v16, v11, buf, 0xCu);
        goto LABEL_25;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v20 = "tcp_connection_set_usage_model";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v8) {
      goto LABEL_20;
    }
LABEL_19:
    free(v8);
    goto LABEL_20;
  }
  v3[31] = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    os_log_type_t v6 = (char *)*((void *)v4 + 12);
    *(_DWORD *)buf = 136446722;
    __int16 v20 = "tcp_connection_set_usage_model";
    __int16 v21 = 2048;
    uint64_t v22 = v6;
    __int16 v23 = 1024;
    int v24 = a2;
    _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %llu setting usage model to %d", buf, 0x1Cu);
  }

  if (*((_DWORD *)v4 + 31) == 1)
  {
    if (tcp_connection_is_first_party_onceToken != -1) {
      dispatch_once(&tcp_connection_is_first_party_onceToken, &__block_literal_global_32320);
    }
    if ((tcp_connection_is_first_party_is_first_party & 1) == 0) {
      nw_parameters_set_no_fallback(*((void **)v4 + 6), 1);
    }
  }
LABEL_20:
}

__CFBundle *__tcp_connection_is_first_party_block_invoke()
{
  uint64_t result = CFBundleGetMainBundle();
  if (!result
    || (uint64_t result = (__CFBundle *)CFBundleGetValueForInfoDictionaryKey(result, (CFStringRef)*MEMORY[0x1E4F1CFF8])) == 0
    || (uint64_t result = (__CFBundle *)CFStringHasPrefix((CFStringRef)result, @"com.apple."), result))
  {
    tcp_connection_is_first_party_is_first_party = 1;
  }
  return result;
}

void tcp_connection_add_event_excessive_keepalives(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    id v18 = "tcp_connection_add_event_excessive_keepalives";
    os_log_type_t v6 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault((const char *)v6, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        id v18 = "tcp_connection_add_event_excessive_keepalives";
        os_log_type_t v9 = "%{public}s called with null connection";
LABEL_22:
        os_log_type_t v13 = v7;
        os_log_type_t v14 = v8;
        goto LABEL_23;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        id v18 = "tcp_connection_add_event_excessive_keepalives";
        os_log_type_t v9 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v12)
        {
LABEL_24:

          if (!v6) {
            return;
          }
LABEL_18:
          free(v6);
          return;
        }
        *(_DWORD *)buf = 136446210;
        id v18 = "tcp_connection_add_event_excessive_keepalives";
        os_log_type_t v9 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v13 = v7;
        os_log_type_t v14 = v11;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v13, v14, v9, buf, 0xCu);
        goto LABEL_24;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        id v18 = "tcp_connection_add_event_excessive_keepalives";
        __int16 v19 = 2082;
        __int16 v20 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v11, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v6) {
      return;
    }
    goto LABEL_18;
  }
  if (a2) {
    char v4 = 32;
  }
  else {
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 159) = *(unsigned char *)(a1 + 159) & 0xDF | v4;
  *(_DWORD *)(a1 + 136) = a4;
  *(_DWORD *)(a1 + 140) = a3;

  tcp_connection_set_keepalive_handler_on_nw_connection((void *)a1);
}

void tcp_connection_set_keepalive_handler_on_nw_connection(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  uint64_t v3 = (void *)*((void *)v1 + 2);
  if (v3)
  {
    int v5 = *((_DWORD *)v1 + 34);
    int v4 = *((_DWORD *)v1 + 35);
    if ((*((unsigned char *)v1 + 159) & 0x20) != 0)
    {
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      v6[2] = __tcp_connection_set_keepalive_handler_on_nw_connection_block_invoke;
      v6[3] = &unk_1E524BAA8;
      id v7 = v1;
      nw_connection_set_excessive_keepalive_handler(v3, v4, v5, v6);
    }
    else
    {
      nw_connection_set_excessive_keepalive_handler(*((void **)v1 + 2), *((_DWORD *)v1 + 35), *((_DWORD *)v1 + 34), 0);
    }
  }
}

void __tcp_connection_set_keepalive_handler_on_nw_connection_block_invoke(uint64_t a1)
{
}

void tcp_connection_send_event_unlocked(void *a1, int a2, const void *a3, size_t a4, uint64_t a5)
{
  char v15 = a1;
  os_log_type_t v16 = 0;
  uint64_t v17 = 0;
  os_log_type_t v9 = (os_unfair_lock_s *)(v15 + 120);
  os_unfair_lock_lock((os_unfair_lock_t)v15 + 30);
  if ((tcp_connection_fillout_event_locked(v15, (uint64_t)&v16, a2, a3, a4, a5) & 1) == 0)
  {
    os_unfair_lock_unlock(v9);
    goto LABEL_10;
  }
  os_log_type_t v10 = _Block_copy(*((const void **)v15 + 8));
  os_unfair_lock_unlock(v9);
  os_log_type_t v11 = v15;
  id v12 = v10;
  os_log_type_t v13 = v12;
  if (v12 && v11[156] != 255)
  {
    os_log_type_t v14 = v16;
    (*((void (**)(id, void, void *))v12 + 2))(v12, v17, v16);
    if (!v14) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  os_log_type_t v14 = v16;
  if (v16) {
LABEL_8:
  }
    free(v14);
LABEL_9:

LABEL_10:
}

void tcp_connection_add_event_adaptive_read_timeout(uint64_t a1, int a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "tcp_connection_add_event_adaptive_read_timeout";
    int v5 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault((const char *)v5, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "tcp_connection_add_event_adaptive_read_timeout";
        os_log_type_t v8 = "%{public}s called with null connection";
LABEL_22:
        id v12 = v6;
        os_log_type_t v13 = v7;
        goto LABEL_23;
      }
      if (!v14)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "tcp_connection_add_event_adaptive_read_timeout";
        os_log_type_t v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_24:

          if (!v5) {
            return;
          }
LABEL_18:
          free(v5);
          return;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "tcp_connection_add_event_adaptive_read_timeout";
        os_log_type_t v8 = "%{public}s called with null connection, no backtrace";
        id v12 = v6;
        os_log_type_t v13 = v10;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v12, v13, v8, buf, 0xCu);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v17 = "tcp_connection_add_event_adaptive_read_timeout";
        __int16 v18 = 2082;
        __int16 v19 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5) {
      return;
    }
    goto LABEL_18;
  }
  if (a2) {
    char v3 = 64;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 159) = *(unsigned char *)(a1 + 159) & 0xBF | v3;
  *(_DWORD *)(a1 + 144) = a3;

  tcp_connection_set_adaptive_read_handler_on_nw_connection((void *)a1);
}

void tcp_connection_set_adaptive_read_handler_on_nw_connection(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  char v3 = (void *)*((void *)v1 + 2);
  if (v3)
  {
    int v4 = *((_DWORD *)v1 + 36);
    if ((*((unsigned char *)v1 + 159) & 0x40) != 0)
    {
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 3221225472;
      v5[2] = __tcp_connection_set_adaptive_read_handler_on_nw_connection_block_invoke;
      v5[3] = &unk_1E524BAA8;
      id v6 = v1;
      nw_connection_set_adaptive_read_handler(v3, v4, v5);
    }
    else
    {
      nw_connection_set_adaptive_read_handler(*((void **)v1 + 2), *((_DWORD *)v1 + 36), 0);
    }
  }
}

void __tcp_connection_set_adaptive_read_handler_on_nw_connection_block_invoke(uint64_t a1)
{
}

void tcp_connection_add_event_adaptive_write_timeout(uint64_t a1, int a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "tcp_connection_add_event_adaptive_write_timeout";
    int v5 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault((const char *)v5, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "tcp_connection_add_event_adaptive_write_timeout";
        os_log_type_t v8 = "%{public}s called with null connection";
LABEL_22:
        id v12 = v6;
        os_log_type_t v13 = v7;
        goto LABEL_23;
      }
      if (!v14)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "tcp_connection_add_event_adaptive_write_timeout";
        os_log_type_t v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_24:

          if (!v5) {
            return;
          }
LABEL_18:
          free(v5);
          return;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "tcp_connection_add_event_adaptive_write_timeout";
        os_log_type_t v8 = "%{public}s called with null connection, no backtrace";
        id v12 = v6;
        os_log_type_t v13 = v10;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v12, v13, v8, buf, 0xCu);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v17 = "tcp_connection_add_event_adaptive_write_timeout";
        __int16 v18 = 2082;
        __int16 v19 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5) {
      return;
    }
    goto LABEL_18;
  }
  if (a2) {
    char v3 = 0x80;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 159) = v3 & 0x80 | *(unsigned char *)(a1 + 159) & 0x7F;
  *(_DWORD *)(a1 + 148) = a3;

  tcp_connection_set_adaptive_write_handler_on_nw_connection((void *)a1);
}

void tcp_connection_set_adaptive_write_handler_on_nw_connection(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  char v3 = (void *)*((void *)v1 + 2);
  if (v3)
  {
    int v4 = *((_DWORD *)v1 + 37);
    if (v1[159] < 0)
    {
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 3221225472;
      v5[2] = __tcp_connection_set_adaptive_write_handler_on_nw_connection_block_invoke;
      v5[3] = &unk_1E524BAA8;
      id v6 = v1;
      nw_connection_set_adaptive_write_handler(v3, v4, v5);
    }
    else
    {
      nw_connection_set_adaptive_write_handler(*((void **)v1 + 2), *((_DWORD *)v1 + 37), 0);
    }
  }
}

void __tcp_connection_set_adaptive_write_handler_on_nw_connection_block_invoke(uint64_t a1)
{
}

BOOL tcp_connection_did_fallback(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "tcp_connection_did_fallback";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v6, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "tcp_connection_did_fallback";
        os_log_type_t v9 = "%{public}s called with null connection";
LABEL_22:
        char v15 = v7;
        os_log_type_t v16 = v8;
        goto LABEL_23;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "tcp_connection_did_fallback";
        os_log_type_t v9 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_24:

          if (!v6) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "tcp_connection_did_fallback";
        os_log_type_t v9 = "%{public}s called with null connection, no backtrace";
        char v15 = v7;
        os_log_type_t v16 = v12;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v15, v16, v9, buf, 0xCu);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "tcp_connection_did_fallback";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v6)
    {
LABEL_18:
      BOOL v4 = 0;
      goto LABEL_19;
    }
LABEL_17:
    free(v6);
    goto LABEL_18;
  }
  char v3 = (void *)*((void *)v1 + 2);
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "tcp_connection_did_fallback";
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    goto LABEL_18;
  }
  BOOL v4 = nw_connection_used_fallback(v3);
LABEL_19:

  return v4;
}

void tcp_connection_set_source_application(uint64_t a1, _OWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = *(void **)(a1 + 48);
    long long v3 = a2[1];
    *(_OWORD *)buf = *a2;
    *(_OWORD *)&buf[16] = v3;
    nw_parameters_set_source_application(v2, (long long *)buf);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "tcp_connection_set_source_application";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v5, &type, &v14))
  {
LABEL_12:
    if (!v5) {
      return;
    }
    goto LABEL_13;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_19;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_connection_set_source_application";
    os_log_type_t v8 = "%{public}s called with null connection";
LABEL_17:
    os_log_type_t v12 = v6;
    os_log_type_t v13 = v7;
LABEL_18:
    _os_log_impl(&dword_1830D4000, v12, v13, v8, buf, 0xCu);
    goto LABEL_19;
  }
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_19;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_connection_set_source_application";
    os_log_type_t v8 = "%{public}s called with null connection, backtrace limit exceeded";
    goto LABEL_17;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  os_log_type_t v10 = type;
  BOOL v11 = os_log_type_enabled(v6, type);
  if (backtrace_string)
  {
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "tcp_connection_set_source_application";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
    goto LABEL_12;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_connection_set_source_application";
    os_log_type_t v8 = "%{public}s called with null connection, no backtrace";
    os_log_type_t v12 = v6;
    os_log_type_t v13 = v10;
    goto LABEL_18;
  }
LABEL_19:

  if (v5) {
LABEL_13:
  }
    free(v5);
}

void tcp_connection_set_source_application_by_bundle(uint64_t a1, const char *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = *(void **)(a1 + 48);
    nw_parameters_set_source_application_by_bundle_id_internal(v2, a2);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  char v14 = "tcp_connection_set_source_application_by_bundle";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v4, &type, &v11)) {
    goto LABEL_10;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    os_log_type_t v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      char v14 = "tcp_connection_set_source_application_by_bundle";
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null connection", buf, 0xCu);
    }
LABEL_9:

LABEL_10:
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  if (!v11)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      char v14 = "tcp_connection_set_source_application_by_bundle";
      _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_9;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  os_log_type_t v8 = type;
  BOOL v9 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      char v14 = "tcp_connection_set_source_application_by_bundle";
      _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_9;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136446466;
    char v14 = "tcp_connection_set_source_application_by_bundle";
    __int16 v15 = 2082;
    os_log_type_t v16 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v4) {
LABEL_11:
  }
    free(v4);
}

void tcp_connection_set_account_identifier(uint64_t a1, const char *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "tcp_connection_set_account_identifier";
    id v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_account_identifier";
        os_log_type_t v7 = "%{public}s called with null connection";
LABEL_19:
        char v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_account_identifier";
        os_log_type_t v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_account_identifier";
        os_log_type_t v7 = "%{public}s called with null connection, no backtrace";
        char v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v16 = "tcp_connection_set_account_identifier";
        __int16 v17 = 2082;
        __int16 v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  int v2 = *(void **)(a1 + 48);

  nw_parameters_set_account_id(v2, a2);
}

void tcp_connection_set_no_delay(uint64_t a1, BOOL a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "tcp_connection_set_no_delay";
    id v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_no_delay";
        os_log_type_t v7 = "%{public}s called with null connection";
LABEL_19:
        char v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_no_delay";
        os_log_type_t v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_no_delay";
        os_log_type_t v7 = "%{public}s called with null connection, no backtrace";
        char v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v16 = "tcp_connection_set_no_delay";
        __int16 v17 = 2082;
        __int16 v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  int v2 = *(void **)(a1 + 48);

  nw_parameters_set_no_delay(v2, a2);
}

BOOL tcp_connection_is_sleep_proxied(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "tcp_connection_is_sleep_proxied";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v6, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "tcp_connection_is_sleep_proxied";
        os_log_type_t v9 = "%{public}s called with null connection";
LABEL_22:
        __int16 v15 = v7;
        os_log_type_t v16 = v8;
        goto LABEL_23;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "tcp_connection_is_sleep_proxied";
        os_log_type_t v9 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_24:

          if (!v6) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "tcp_connection_is_sleep_proxied";
        os_log_type_t v9 = "%{public}s called with null connection, no backtrace";
        __int16 v15 = v7;
        os_log_type_t v16 = v12;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v15, v16, v9, buf, 0xCu);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "tcp_connection_is_sleep_proxied";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v6)
    {
LABEL_18:
      BOOL v4 = 0;
      goto LABEL_19;
    }
LABEL_17:
    free(v6);
    goto LABEL_18;
  }
  id v3 = (void *)*((void *)v1 + 2);
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "tcp_connection_is_sleep_proxied";
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    goto LABEL_18;
  }
  BOOL v4 = nw_connection_uses_sleep_proxy(v3);
LABEL_19:

  return v4;
}

void tcp_connection_set_sleep_idle_interval(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "tcp_connection_set_sleep_idle_interval";
    BOOL v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_sleep_idle_interval";
        os_log_type_t v7 = "%{public}s called with null connection";
LABEL_19:
        char v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_sleep_idle_interval";
        os_log_type_t v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_sleep_idle_interval";
        os_log_type_t v7 = "%{public}s called with null connection, no backtrace";
        char v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v16 = "tcp_connection_set_sleep_idle_interval";
        __int16 v17 = 2082;
        __int16 v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  int v2 = *(void **)(a1 + 48);

  nw_parameters_set_sleep_keepalive_interval(v2, a2);
}

void tcp_connection_set_keepalive(void *a1, BOOL a2, uint32_t a3, uint32_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  os_log_type_t v7 = a1;
  os_log_type_t v8 = v7;
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "tcp_connection_set_keepalive";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_set_keepalive";
        char v13 = "%{public}s called with null connection";
LABEL_17:
        __int16 v17 = v11;
        os_log_type_t v18 = v12;
        goto LABEL_18;
      }
      if (!v19)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_set_keepalive";
        char v13 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_17;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v11 = (id)gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (!v16)
        {
LABEL_19:

          if (!v10) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_set_keepalive";
        char v13 = "%{public}s called with null connection, no backtrace";
        __int16 v17 = v11;
        os_log_type_t v18 = v15;
LABEL_18:
        _os_log_impl(&dword_1830D4000, v17, v18, v13, buf, 0xCu);
        goto LABEL_19;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v22 = "tcp_connection_set_keepalive";
        __int16 v23 = 2082;
        int v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v10) {
      goto LABEL_14;
    }
LABEL_13:
    free(v10);
    goto LABEL_14;
  }
  nw_parameters_set_keepalive_enabled(v7[6], a2);
  nw_parameters_set_keepalive_idle_time(v8[6], a3);
  nw_parameters_set_keepalive_interval(v8[6], a4);
LABEL_14:
}

void tcp_connection_set_keepalive_offload(uint64_t a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "tcp_connection_set_keepalive_offload";
    BOOL v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "tcp_connection_set_keepalive_offload";
        os_log_type_t v7 = "%{public}s called with null connection";
LABEL_19:
        char v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "tcp_connection_set_keepalive_offload";
        os_log_type_t v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "tcp_connection_set_keepalive_offload";
        os_log_type_t v7 = "%{public}s called with null connection, no backtrace";
        char v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v16 = "tcp_connection_set_keepalive_offload";
        __int16 v17 = 2082;
        os_log_type_t v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  int v2 = *(void **)(a1 + 48);

  nw_parameters_set_keepalive_offload(v2, a2);
}

BOOL tcp_connection_conditions_met(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "tcp_connection_conditions_met";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v18 = "tcp_connection_conditions_met";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v18 = "tcp_connection_conditions_met";
            __int16 v19 = 2082;
            uint64_t v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v7) {
            goto LABEL_11;
          }
          goto LABEL_10;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v18 = "tcp_connection_conditions_met";
          _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v18 = "tcp_connection_conditions_met";
          _os_log_impl(&dword_1830D4000, v8, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v7)
    {
LABEL_11:
      BOOL v5 = 0;
      goto LABEL_14;
    }
LABEL_10:
    free(v7);
    goto LABEL_11;
  }
  os_unfair_lock_lock(v1 + 30);
  id v3 = *(void **)&v2[8]._os_unfair_lock_opaque;
  if (v3)
  {
    BOOL v4 = v3;
    BOOL v5 = v4[94] == 1;
  }
  else
  {
    BOOL v5 = 0;
  }
  os_unfair_lock_unlock(v2 + 30);
LABEL_14:

  return v5;
}

uint64_t tcp_connection_conditions_get_unmet_reason(void *a1)
{
  *(void *)&v32[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 30);
    unsigned int reason = nw_path_get_reason(*(void **)&v2[8]._os_unfair_lock_opaque);
    unsigned int v4 = reason;
    if (reason < 0x20 && ((0xFFBFFFFF >> reason) & 1) != 0)
    {
      uint64_t v18 = qword_183D5D0E8[reason];
      goto LABEL_29;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    char v30 = "tcp_connection_reason_code_from_path";
    __int16 v31 = 1024;
    *(_DWORD *)uint64_t v32 = v4;
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v6, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_35;
        }
        *(_DWORD *)buf = 136446466;
        char v30 = "tcp_connection_reason_code_from_path";
        __int16 v31 = 1024;
        *(_DWORD *)uint64_t v32 = v4;
        os_log_type_t v9 = "%{public}s Unknown nw_path_reason_t %u";
LABEL_33:
        __int16 v23 = v7;
        os_log_type_t v24 = v8;
        goto LABEL_34;
      }
      if (!v27)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_35;
        }
        *(_DWORD *)buf = 136446466;
        char v30 = "tcp_connection_reason_code_from_path";
        __int16 v31 = 1024;
        *(_DWORD *)uint64_t v32 = v4;
        os_log_type_t v9 = "%{public}s Unknown nw_path_reason_t %u, backtrace limit exceeded";
        goto LABEL_33;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (id)gLogObj;
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v17)
        {
LABEL_35:

          if (!v6) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446466;
        char v30 = "tcp_connection_reason_code_from_path";
        __int16 v31 = 1024;
        *(_DWORD *)uint64_t v32 = v4;
        os_log_type_t v9 = "%{public}s Unknown nw_path_reason_t %u, no backtrace";
        __int16 v23 = v7;
        os_log_type_t v24 = v16;
LABEL_34:
        _os_log_impl(&dword_1830D4000, v23, v24, v9, buf, 0x12u);
        goto LABEL_35;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446722;
        char v30 = "tcp_connection_reason_code_from_path";
        __int16 v31 = 1024;
        *(_DWORD *)uint64_t v32 = v4;
        v32[2] = 2082;
        *(void *)&v32[3] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s Unknown nw_path_reason_t %u, dumping backtrace:%{public}s", buf, 0x1Cu);
      }

      free(backtrace_string);
    }
    if (!v6)
    {
LABEL_19:
      uint64_t v18 = 10000;
LABEL_29:
      os_unfair_lock_unlock(v2 + 30);
      goto LABEL_30;
    }
LABEL_18:
    free(v6);
    goto LABEL_19;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  char v30 = "tcp_connection_conditions_get_unmet_reason";
  char v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v11, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      char v30 = "tcp_connection_conditions_get_unmet_reason";
      os_log_type_t v14 = "%{public}s called with null connection";
LABEL_39:
      uint64_t v25 = v12;
      os_log_type_t v26 = v13;
      goto LABEL_40;
    }
    if (!v27)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      char v30 = "tcp_connection_conditions_get_unmet_reason";
      os_log_type_t v14 = "%{public}s called with null connection, backtrace limit exceeded";
      goto LABEL_39;
    }
    __int16 v19 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (id)gLogObj;
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v12, type);
    if (!v19)
    {
      if (!v21)
      {
LABEL_41:

        if (!v11) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136446210;
      char v30 = "tcp_connection_conditions_get_unmet_reason";
      os_log_type_t v14 = "%{public}s called with null connection, no backtrace";
      uint64_t v25 = v12;
      os_log_type_t v26 = v20;
LABEL_40:
      _os_log_impl(&dword_1830D4000, v25, v26, v14, buf, 0xCu);
      goto LABEL_41;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      char v30 = "tcp_connection_conditions_get_unmet_reason";
      __int16 v31 = 2082;
      *(void *)uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v19);
  }
  if (v11) {
LABEL_26:
  }
    free(v11);
LABEL_27:
  uint64_t v18 = 0;
LABEL_30:

  return v18;
}

void tcp_connection_set_queue(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "tcp_connection_set_queue";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v8, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_set_queue";
        char v11 = "%{public}s called with null connection";
LABEL_23:
        BOOL v17 = v9;
        os_log_type_t v18 = v10;
        goto LABEL_24;
      }
      if (!v19)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_set_queue";
        char v11 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_23;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v16)
        {
LABEL_25:

          if (!v8) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_set_queue";
        char v11 = "%{public}s called with null connection, no backtrace";
        BOOL v17 = v9;
        os_log_type_t v18 = v15;
LABEL_24:
        _os_log_impl(&dword_1830D4000, v17, v18, v11, buf, 0xCu);
        goto LABEL_25;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v22 = "tcp_connection_set_queue";
        __int16 v23 = 2082;
        os_log_type_t v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v8) {
      goto LABEL_20;
    }
LABEL_19:
    free(v8);
    goto LABEL_20;
  }
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 30);
    objc_storeStrong((id *)v3 + 7, a2);
    id v6 = *((void *)v3 + 2);
    if (v6) {
      nw_connection_set_queue(v6, *((dispatch_queue_t *)v3 + 7));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 30);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v13 = (char *)*((void *)v3 + 12);
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "tcp_connection_set_queue";
      __int16 v23 = 2048;
      os_log_type_t v24 = v13;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s %llu client specified nil dispatch queue - not supported", buf, 0x16u);
    }
  }
LABEL_20:
}

uint64_t tcp_connection_id(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "tcp_connection_id";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v18 = "tcp_connection_id";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v18 = "tcp_connection_id";
            __int16 v19 = 2082;
            os_log_type_t v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v7) {
            goto LABEL_11;
          }
          goto LABEL_10;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v18 = "tcp_connection_id";
          _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v18 = "tcp_connection_id";
          _os_log_impl(&dword_1830D4000, v8, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v7)
    {
LABEL_11:
      uint64_t v5 = 0;
      goto LABEL_13;
    }
LABEL_10:
    free(v7);
    goto LABEL_11;
  }
  id v3 = (void *)*((void *)v1 + 2);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = v4[112];
  }
  else
  {
    uint64_t v5 = *((void *)v1 + 12);
  }
LABEL_13:

  return v5;
}

void tcp_connection_set_minimum_throughput(void *a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_connection_set_minimum_throughput";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "tcp_connection_set_minimum_throughput";
        BOOL v13 = "%{public}s called with null connection";
LABEL_19:
        BOOL v17 = v11;
        os_log_type_t v18 = v12;
        goto LABEL_20;
      }
      if (!v19)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "tcp_connection_set_minimum_throughput";
        BOOL v13 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v11 = (id)gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (!v16)
        {
LABEL_21:

          if (!v10) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "tcp_connection_set_minimum_throughput";
        BOOL v13 = "%{public}s called with null connection, no backtrace";
        BOOL v17 = v11;
        os_log_type_t v18 = v15;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v17, v18, v13, buf, 0xCu);
        goto LABEL_21;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_connection_set_minimum_throughput";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v10) {
      goto LABEL_16;
    }
LABEL_15:
    free(v10);
    goto LABEL_16;
  }
  v3[38] = a2;
  uint64_t v5 = v3;
  id v6 = v5;
  id v7 = (void *)v5[2];
  if (v7)
  {
    int v8 = v4[38];
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __tcp_connection_set_minimum_throughput_on_nw_connection_block_invoke;
    uint64_t v22 = &unk_1E523FC88;
    __int16 v23 = v5;
    nw_connection_set_low_throughput_handler(v7, v8, buf);
  }
LABEL_16:
}

void __tcp_connection_set_minimum_throughput_on_nw_connection_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  tcp_connection_send_event_unlocked(*(void **)(a1 + 32), 1073741830, &v2, 8uLL, (uint64_t)"low throughput");
}

void tcp_connection_override_obscure(void *a1, int a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = v5;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "tcp_connection_override_obscure";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "tcp_connection_override_obscure";
        char v11 = "%{public}s called with null connection";
LABEL_17:
        os_log_type_t v15 = v9;
        os_log_type_t v16 = v10;
        goto LABEL_18;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "tcp_connection_override_obscure";
        char v11 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_17;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (id)gLogObj;
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v14)
        {
LABEL_19:

          if (!v8) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "tcp_connection_override_obscure";
        char v11 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v15 = v9;
        os_log_type_t v16 = v13;
LABEL_18:
        _os_log_impl(&dword_1830D4000, v15, v16, v11, buf, 0xCu);
        goto LABEL_19;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v20 = "tcp_connection_override_obscure";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v8) {
      goto LABEL_14;
    }
LABEL_13:
    free(v8);
    goto LABEL_14;
  }
  nw_parameters_set_use_awdl(v5[6], a2);
  nw_parameters_set_use_p2p(v6[6], a3);
LABEL_14:
}

BOOL tcp_connection_is_viable(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "tcp_connection_is_viable";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "tcp_connection_is_viable";
        int v8 = "%{public}s called with null connection";
LABEL_21:
        os_log_type_t v13 = v6;
        os_log_type_t v14 = v7;
        goto LABEL_22;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "tcp_connection_is_viable";
        int v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_23:

          if (!v5) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "tcp_connection_is_viable";
        int v8 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v13 = v6;
        os_log_type_t v14 = v10;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v13, v14, v8, buf, 0xCu);
        goto LABEL_23;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v18 = "tcp_connection_is_viable";
        __int16 v19 = 2082;
        os_log_type_t v20 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5)
    {
LABEL_17:
      BOOL v3 = 0;
      goto LABEL_18;
    }
LABEL_16:
    free(v5);
    goto LABEL_17;
  }
  os_unfair_lock_lock(v1 + 30);
  BOOL v3 = (v2[39]._os_unfair_lock_opaque & 0x1000000) != 0 && (v2[39]._os_unfair_lock_opaque & 0x200000) == 0;
  os_unfair_lock_unlock(v2 + 30);
LABEL_18:

  return v3;
}

BOOL tcp_connection_has_better_route(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "tcp_connection_has_better_route";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "tcp_connection_has_better_route";
        int v8 = "%{public}s called with null connection";
LABEL_21:
        os_log_type_t v13 = v6;
        os_log_type_t v14 = v7;
        goto LABEL_22;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "tcp_connection_has_better_route";
        int v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_23:

          if (!v5) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "tcp_connection_has_better_route";
        int v8 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v13 = v6;
        os_log_type_t v14 = v10;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v13, v14, v8, buf, 0xCu);
        goto LABEL_23;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v18 = "tcp_connection_has_better_route";
        __int16 v19 = 2082;
        os_log_type_t v20 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5)
    {
LABEL_17:
      BOOL v3 = 0;
      goto LABEL_18;
    }
LABEL_16:
    free(v5);
    goto LABEL_17;
  }
  os_unfair_lock_lock(v1 + 30);
  BOOL v3 = (v2[39]._os_unfair_lock_opaque & 0x1000000) == 0
    || nw_connection_better_path_available(*(void **)&v2[4]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v2 + 30);
LABEL_18:

  return v3;
}

uint64_t tcp_connection_get_connection_quality(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "tcp_connection_get_connection_quality";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "tcp_connection_get_connection_quality";
        int v8 = "%{public}s called with null connection";
LABEL_21:
        os_log_type_t v13 = v6;
        os_log_type_t v14 = v7;
        goto LABEL_22;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "tcp_connection_get_connection_quality";
        int v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_23:

          if (!v5) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "tcp_connection_get_connection_quality";
        int v8 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v13 = v6;
        os_log_type_t v14 = v10;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v13, v14, v8, buf, 0xCu);
        goto LABEL_23;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v18 = "tcp_connection_get_connection_quality";
        __int16 v19 = 2082;
        os_log_type_t v20 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5)
    {
LABEL_17:
      uint64_t v3 = 0;
      goto LABEL_18;
    }
LABEL_16:
    free(v5);
    goto LABEL_17;
  }
  os_unfair_lock_lock(v1 + 30);
  if (*(void *)&v2[8]._os_unfair_lock_opaque) {
    uint64_t v3 = *(void *)&v2[32]._os_unfair_lock_opaque;
  }
  else {
    uint64_t v3 = 0;
  }
  os_unfair_lock_unlock(v2 + 30);
LABEL_18:

  return v3;
}

id tcp_connection_copy_proxy(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "tcp_connection_copy_proxy";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v8, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_28;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_copy_proxy";
        BOOL v11 = "%{public}s called with null connection";
LABEL_26:
        char v17 = v9;
        os_log_type_t v18 = v10;
        goto LABEL_27;
      }
      if (!v19)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_28;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_copy_proxy";
        BOOL v11 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_26;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_28:

          if (!v8) {
            goto LABEL_22;
          }
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_copy_proxy";
        BOOL v11 = "%{public}s called with null connection, no backtrace";
        char v17 = v9;
        os_log_type_t v18 = v14;
LABEL_27:
        _os_log_impl(&dword_1830D4000, v17, v18, v11, buf, 0xCu);
        goto LABEL_28;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v22 = "tcp_connection_copy_proxy";
        __int16 v23 = 2082;
        uint64_t v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v8)
    {
LABEL_22:
      id v6 = 0;
      goto LABEL_23;
    }
LABEL_21:
    free(v8);
    goto LABEL_22;
  }
  uint64_t v3 = (void *)*((void *)v1 + 2);
  if (v3)
  {
    id v4 = nw_connection_copy_proxy_settings(v3);
    uint64_t v5 = v4;
    if (v4 && network_proxy_get_type(v4)) {
      id v6 = v5;
    }
    else {
      id v6 = 0;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "tcp_connection_copy_proxy";
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    id v6 = 0;
  }
LABEL_23:

  return v6;
}

void tcp_connection_set_connection_pool()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    int v1 = 136446210;
    uint64_t v2 = "tcp_connection_set_connection_pool";
    _os_log_impl(&dword_1830D4000, v0, OS_LOG_TYPE_ERROR, "%{public}s tcp_connection_set_connection_pool is deprecated", (uint8_t *)&v1, 0xCu);
  }
}

void tcp_connection_set_multipath_service(uint64_t a1, nw_multipath_service_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "tcp_connection_set_multipath_service";
    id v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_multipath_service";
        id v7 = "%{public}s called with null connection";
LABEL_19:
        BOOL v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_multipath_service";
        id v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_multipath_service";
        id v7 = "%{public}s called with null connection, no backtrace";
        BOOL v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v16 = "tcp_connection_set_multipath_service";
        __int16 v17 = 2082;
        os_log_type_t v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  uint64_t v2 = *(NSObject **)(a1 + 48);

  nw_parameters_set_multipath_service(v2, a2);
}

BOOL tcp_connection_is_multipath(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "tcp_connection_is_multipath";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v6, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "tcp_connection_is_multipath";
        os_log_type_t v9 = "%{public}s called with null connection";
LABEL_22:
        BOOL v15 = v7;
        os_log_type_t v16 = v8;
        goto LABEL_23;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "tcp_connection_is_multipath";
        os_log_type_t v9 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_24:

          if (!v6) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "tcp_connection_is_multipath";
        os_log_type_t v9 = "%{public}s called with null connection, no backtrace";
        BOOL v15 = v7;
        os_log_type_t v16 = v12;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v15, v16, v9, buf, 0xCu);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v20 = "tcp_connection_is_multipath";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v6)
    {
LABEL_18:
      BOOL v4 = 0;
      goto LABEL_19;
    }
LABEL_17:
    free(v6);
    goto LABEL_18;
  }
  id v3 = (void *)*((void *)v1 + 2);
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v20 = "tcp_connection_is_multipath";
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    goto LABEL_18;
  }
  BOOL v4 = nw_connection_uses_multipath(v3);
LABEL_19:

  return v4;
}

uint64_t tcp_connection_multipath_get_primary_subflow_ifindex(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "tcp_connection_multipath_get_primary_subflow_ifindex";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v5, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "tcp_connection_multipath_get_primary_subflow_ifindex";
        os_log_type_t v8 = "%{public}s called with null connection";
LABEL_22:
        os_log_type_t v14 = v6;
        os_log_type_t v15 = v7;
        goto LABEL_23;
      }
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "tcp_connection_multipath_get_primary_subflow_ifindex";
        os_log_type_t v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v12)
        {
LABEL_24:

          if (!v5) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "tcp_connection_multipath_get_primary_subflow_ifindex";
        os_log_type_t v8 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v14 = v6;
        os_log_type_t v15 = v11;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v14, v15, v8, buf, 0xCu);
        goto LABEL_24;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v19 = "tcp_connection_multipath_get_primary_subflow_ifindex";
        __int16 v20 = 2082;
        __int16 v21 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5)
    {
LABEL_18:
      uint64_t interface = 0;
      goto LABEL_19;
    }
LABEL_17:
    free(v5);
    goto LABEL_18;
  }
  if (!v1[2])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "tcp_connection_multipath_get_primary_subflow_ifindex";
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    goto LABEL_18;
  }
  uint64_t interface = tcp_connection_get_interface(v1);
LABEL_19:

  return interface;
}

uint64_t tcp_connection_get_interface(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "tcp_connection_get_interface";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v9, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "tcp_connection_get_interface";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v22 = "tcp_connection_get_interface";
            __int16 v23 = 2082;
            uint64_t v24 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v9) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "tcp_connection_get_interface";
          _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "tcp_connection_get_interface";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v9)
    {
LABEL_34:
      uint64_t routed_interface_index = 0;
      goto LABEL_35;
    }
LABEL_33:
    free(v9);
    goto LABEL_34;
  }
  id v3 = (void *)*((void *)v1 + 2);
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "tcp_connection_get_interface";
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    goto LABEL_34;
  }
  id v4 = nw_connection_copy_connected_path(v3);
  id v5 = v4;
  if (v4)
  {
    os_log_type_t v6 = (NWConcrete_nw_path *)v4;
    if (nw_path_network_is_satisfied_update_reason(v6, 0)) {
      uint64_t routed_interface_index = v6->policy_result.routed_interface_index;
    }
    else {
      uint64_t routed_interface_index = 0;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "tcp_connection_get_interface";
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s No connected path", buf, 0xCu);
    }

    uint64_t routed_interface_index = 0;
  }

LABEL_35:
  return routed_interface_index;
}

void sub_1838A7258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id tcp_connection_multipath_copy_subflow_switch_counts(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "tcp_connection_multipath_copy_subflow_switch_counts";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v6, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "tcp_connection_multipath_copy_subflow_switch_counts";
        os_log_type_t v9 = "%{public}s called with null connection";
LABEL_22:
        BOOL v15 = v7;
        os_log_type_t v16 = v8;
        goto LABEL_23;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "tcp_connection_multipath_copy_subflow_switch_counts";
        os_log_type_t v9 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_24:

          if (!v6) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "tcp_connection_multipath_copy_subflow_switch_counts";
        os_log_type_t v9 = "%{public}s called with null connection, no backtrace";
        BOOL v15 = v7;
        os_log_type_t v16 = v12;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v15, v16, v9, buf, 0xCu);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v20 = "tcp_connection_multipath_copy_subflow_switch_counts";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v6)
    {
LABEL_18:
      id v4 = 0;
      goto LABEL_19;
    }
LABEL_17:
    free(v6);
    goto LABEL_18;
  }
  id v3 = (void *)*((void *)v1 + 2);
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "tcp_connection_multipath_copy_subflow_switch_counts";
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    goto LABEL_18;
  }
  id v4 = nw_connection_multipath_copy_subflow_counts(v3);
LABEL_19:

  return v4;
}

id tcp_connection_copy_tcp_info(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "tcp_connection_copy_tcp_info";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v6, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "tcp_connection_copy_tcp_info";
        os_log_type_t v9 = "%{public}s called with null connection";
LABEL_22:
        BOOL v15 = v7;
        os_log_type_t v16 = v8;
        goto LABEL_23;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "tcp_connection_copy_tcp_info";
        os_log_type_t v9 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_24:

          if (!v6) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "tcp_connection_copy_tcp_info";
        os_log_type_t v9 = "%{public}s called with null connection, no backtrace";
        BOOL v15 = v7;
        os_log_type_t v16 = v12;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v15, v16, v9, buf, 0xCu);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v20 = "tcp_connection_copy_tcp_info";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v6)
    {
LABEL_18:
      id v4 = 0;
      goto LABEL_19;
    }
LABEL_17:
    free(v6);
    goto LABEL_18;
  }
  id v3 = (void *)*((void *)v1 + 2);
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "tcp_connection_copy_tcp_info";
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    goto LABEL_18;
  }
  id v4 = nw_connection_copy_tcp_info(v3);
LABEL_19:

  return v4;
}

void tcp_connection_set_tls(void *a1, int a2, size_t *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  os_log_type_t v6 = v5;
  if (v5)
  {
    nw_parameters_set_tls(v5[6], a2);
    if (!a2) {
      goto LABEL_48;
    }
    if (!a3) {
      goto LABEL_45;
    }
    os_log_type_t v7 = (const void *)a3[1];
    if (!v7 || !*a3) {
      goto LABEL_44;
    }
    a3 = (size_t *)xpc_data_create(v7, *a3);
    if (a3)
    {
LABEL_45:
      nw_parameters_set_tls_session_id(v6[6], a3);
      uint64_t v24 = v6[2];
      if (v24)
      {
        id v25 = v24;
        os_log_type_t v26 = a3;
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __nw_connection_start_tls_block_invoke;
        uint64_t v32 = &unk_1E524B9A0;
        id v27 = v25;
        id v33 = v27;
        os_log_type_t v28 = v26;
        __int16 v34 = v28;
        nw_connection_async_if_needed(v27, buf);
      }
      goto LABEL_48;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_connection_set_tls";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v9, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "tcp_connection_set_tls";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s xpc_data_create failed", buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v10 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "tcp_connection_set_tls";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s xpc_data_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "tcp_connection_set_tls";
          _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s xpc_data_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "tcp_connection_set_tls";
          _os_log_impl(&dword_1830D4000, v10, v23, "%{public}s xpc_data_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (v9) {
      free(v9);
    }
LABEL_44:
    a3 = 0;
    goto LABEL_45;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v12 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "tcp_connection_set_tls";
  BOOL v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (!__nwlog_fault(v13, &type, &v29)) {
    goto LABEL_17;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (id)gLogObj;
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_connection_set_tls";
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null connection", buf, 0xCu);
    }
LABEL_16:

LABEL_17:
    if (!v13) {
      goto LABEL_48;
    }
LABEL_18:
    free(v13);
    goto LABEL_48;
  }
  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (id)gLogObj;
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_connection_set_tls";
      _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_16;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v14 = (id)gLogObj;
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v14, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "tcp_connection_set_tls";
      _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_16;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "tcp_connection_set_tls";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v16;
    _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v13) {
    goto LABEL_18;
  }
LABEL_48:
}

void sub_1838A7F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void tcp_connection_set_tls_prepare()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v0 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  BOOL v13 = "tcp_connection_set_tls_prepare";
  id v1 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (!__nwlog_fault(v1, &type, &v10)) {
    goto LABEL_10;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (id)gLogObj;
    os_log_type_t v3 = type;
    if (!os_log_type_enabled(v2, type)) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "tcp_connection_set_tls_prepare";
    id v4 = "%{public}s tcp_connection_set_tls_prepare is deprecated";
LABEL_15:
    id v8 = v2;
    os_log_type_t v9 = v3;
LABEL_16:
    _os_log_impl(&dword_1830D4000, v8, v9, v4, buf, 0xCu);
    goto LABEL_17;
  }
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (id)gLogObj;
    os_log_type_t v3 = type;
    if (!os_log_type_enabled(v2, type)) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "tcp_connection_set_tls_prepare";
    id v4 = "%{public}s tcp_connection_set_tls_prepare is deprecated, backtrace limit exceeded";
    goto LABEL_15;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (id)gLogObj;
  os_log_type_t v6 = type;
  BOOL v7 = os_log_type_enabled(v2, type);
  if (backtrace_string)
  {
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v13 = "tcp_connection_set_tls_prepare";
      __int16 v14 = 2082;
      os_log_type_t v15 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v2, v6, "%{public}s tcp_connection_set_tls_prepare is deprecated, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
LABEL_10:
    if (!v1) {
      return;
    }
    goto LABEL_11;
  }
  if (v7)
  {
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "tcp_connection_set_tls_prepare";
    id v4 = "%{public}s tcp_connection_set_tls_prepare is deprecated, no backtrace";
    id v8 = v2;
    os_log_type_t v9 = v6;
    goto LABEL_16;
  }
LABEL_17:

  if (v1) {
LABEL_11:
  }
    free(v1);
}

void tcp_connection_set_tls_handshake_message_handler()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v0 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  BOOL v13 = "tcp_connection_set_tls_handshake_message_handler";
  id v1 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (!__nwlog_fault(v1, &type, &v10)) {
    goto LABEL_10;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (id)gLogObj;
    os_log_type_t v3 = type;
    if (!os_log_type_enabled(v2, type)) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "tcp_connection_set_tls_handshake_message_handler";
    id v4 = "%{public}s tcp_connection_set_tls_handshake_message_handler is deprecated";
LABEL_15:
    id v8 = v2;
    os_log_type_t v9 = v3;
LABEL_16:
    _os_log_impl(&dword_1830D4000, v8, v9, v4, buf, 0xCu);
    goto LABEL_17;
  }
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (id)gLogObj;
    os_log_type_t v3 = type;
    if (!os_log_type_enabled(v2, type)) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "tcp_connection_set_tls_handshake_message_handler";
    id v4 = "%{public}s tcp_connection_set_tls_handshake_message_handler is deprecated, backtrace limit exceeded";
    goto LABEL_15;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (id)gLogObj;
  os_log_type_t v6 = type;
  BOOL v7 = os_log_type_enabled(v2, type);
  if (backtrace_string)
  {
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v13 = "tcp_connection_set_tls_handshake_message_handler";
      __int16 v14 = 2082;
      os_log_type_t v15 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v2, v6, "%{public}s tcp_connection_set_tls_handshake_message_handler is deprecated, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
LABEL_10:
    if (!v1) {
      return;
    }
    goto LABEL_11;
  }
  if (v7)
  {
    *(_DWORD *)buf = 136446210;
    BOOL v13 = "tcp_connection_set_tls_handshake_message_handler";
    id v4 = "%{public}s tcp_connection_set_tls_handshake_message_handler is deprecated, no backtrace";
    id v8 = v2;
    os_log_type_t v9 = v6;
    goto LABEL_16;
  }
LABEL_17:

  if (v1) {
LABEL_11:
  }
    free(v1);
}

char *tcp_connection_create(const char *a1, unsigned int a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  os_log_type_t v6 = v5;
  if (a1)
  {
    if (v5)
    {
      BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(a1, __rev16(a2));
      id v8 = (void *)host_with_numeric_port;
      if (host_with_numeric_port) {
        os_log_type_t v9 = tcp_connection_create_with_endpoint_and_parameters((void *)host_with_numeric_port, 0, v6);
      }
      else {
        os_log_type_t v9 = 0;
      }

      goto LABEL_7;
    }
    uint64_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "tcp_connection_create";
    id v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v12, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "tcp_connection_create";
          os_log_type_t v15 = "%{public}s called with null queue";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (!v21)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "tcp_connection_create";
          os_log_type_t v15 = "%{public}s called with null queue, backtrace limit exceeded";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v20 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "tcp_connection_create";
          os_log_type_t v15 = "%{public}s called with null queue, no backtrace";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (!v20) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v24 = "tcp_connection_create";
      __int16 v25 = 2082;
      os_log_type_t v26 = backtrace_string;
      os_log_type_t v19 = "%{public}s called with null queue, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_1830D4000, v13, v14, v19, buf, 0x16u);
LABEL_25:

      free(backtrace_string);
    }
  }
  else
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "tcp_connection_create";
    id v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v12, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "tcp_connection_create";
          os_log_type_t v15 = "%{public}s called with null hostname";
LABEL_34:
          _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
        }
LABEL_35:

        goto LABEL_36;
      }
      if (!v21)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "tcp_connection_create";
          os_log_type_t v15 = "%{public}s called with null hostname, backtrace limit exceeded";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v18 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "tcp_connection_create";
          os_log_type_t v15 = "%{public}s called with null hostname, no backtrace";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (!v18) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v24 = "tcp_connection_create";
      __int16 v25 = 2082;
      os_log_type_t v26 = backtrace_string;
      os_log_type_t v19 = "%{public}s called with null hostname, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
  }
LABEL_36:
  if (v12) {
    free(v12);
  }
  os_log_type_t v9 = 0;
LABEL_7:

  return v9;
}

char *tcp_connection_create_with_service(const char *a1, const char *a2, const char *a3, void *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  nw_allow_use_of_dispatch_internal();
  if (!a1)
  {
    id v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "tcp_connection_create_with_service";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_62;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          char v29 = "tcp_connection_create_with_service";
          uint64_t v16 = "%{public}s called with null name, backtrace limit exceeded";
          goto LABEL_60;
        }
        goto LABEL_61;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v21 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          char v29 = "tcp_connection_create_with_service";
          uint64_t v16 = "%{public}s called with null name, no backtrace";
          goto LABEL_60;
        }
        goto LABEL_61;
      }
      if (!v21) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446466;
      char v29 = "tcp_connection_create_with_service";
      __int16 v30 = 2082;
      __int16 v31 = backtrace_string;
      BOOL v22 = "%{public}s called with null name, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446210;
    char v29 = "tcp_connection_create_with_service";
    uint64_t v16 = "%{public}s called with null name";
LABEL_60:
    _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
    goto LABEL_61;
  }
  if (!a2)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "tcp_connection_create_with_service";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_62;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          char v29 = "tcp_connection_create_with_service";
          uint64_t v16 = "%{public}s called with null type, backtrace limit exceeded";
          goto LABEL_60;
        }
        goto LABEL_61;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v23 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          char v29 = "tcp_connection_create_with_service";
          uint64_t v16 = "%{public}s called with null type, no backtrace";
          goto LABEL_60;
        }
        goto LABEL_61;
      }
      if (!v23) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446466;
      char v29 = "tcp_connection_create_with_service";
      __int16 v30 = 2082;
      __int16 v31 = backtrace_string;
      BOOL v22 = "%{public}s called with null type, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446210;
    char v29 = "tcp_connection_create_with_service";
    uint64_t v16 = "%{public}s called with null type";
    goto LABEL_60;
  }
  if (!a3)
  {
    BOOL v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v29 = "tcp_connection_create_with_service";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      char v29 = "tcp_connection_create_with_service";
      uint64_t v16 = "%{public}s called with null domain";
      goto LABEL_60;
    }
    if (!v26)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "tcp_connection_create_with_service";
        uint64_t v16 = "%{public}s called with null domain, backtrace limit exceeded";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "tcp_connection_create_with_service";
        uint64_t v16 = "%{public}s called with null domain, no backtrace";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    if (!v24) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446466;
    char v29 = "tcp_connection_create_with_service";
    __int16 v30 = 2082;
    __int16 v31 = backtrace_string;
    BOOL v22 = "%{public}s called with null domain, dumping backtrace:%{public}s";
LABEL_42:
    _os_log_impl(&dword_1830D4000, v14, v15, v22, buf, 0x16u);
LABEL_43:

    free(backtrace_string);
    goto LABEL_62;
  }
  if (v7)
  {
    nw_endpoint_t bonjour_service = nw_endpoint_create_bonjour_service(a1, a2, a3);
    nw_endpoint_t v9 = bonjour_service;
    if (bonjour_service) {
      char v10 = tcp_connection_create_with_endpoint_and_parameters(bonjour_service, 0, v7);
    }
    else {
      char v10 = 0;
    }

    goto LABEL_9;
  }
  os_log_type_t v19 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v29 = "tcp_connection_create_with_service";
  BOOL v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v13, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "tcp_connection_create_with_service";
        uint64_t v16 = "%{public}s called with null queue";
        goto LABEL_60;
      }
LABEL_61:

      goto LABEL_62;
    }
    if (!v26)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "tcp_connection_create_with_service";
        uint64_t v16 = "%{public}s called with null queue, backtrace limit exceeded";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v25 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        char v29 = "tcp_connection_create_with_service";
        uint64_t v16 = "%{public}s called with null queue, no backtrace";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    if (!v25) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446466;
    char v29 = "tcp_connection_create_with_service";
    __int16 v30 = 2082;
    __int16 v31 = backtrace_string;
    BOOL v22 = "%{public}s called with null queue, dumping backtrace:%{public}s";
    goto LABEL_42;
  }
LABEL_62:
  if (v13) {
    free(v13);
  }
  char v10 = 0;
LABEL_9:

  return v10;
}

void tcp_connection_set_event_handler(void *a1, const void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  os_log_type_t v3 = a1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v19 = "tcp_connection_set_event_handler";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "tcp_connection_set_event_handler";
        char v10 = "%{public}s called with null connection";
LABEL_17:
        os_log_type_t v14 = v8;
        os_log_type_t v15 = v9;
        goto LABEL_18;
      }
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "tcp_connection_set_event_handler";
        char v10 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_17;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_19:

          if (!v7) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "tcp_connection_set_event_handler";
        char v10 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v14 = v8;
        os_log_type_t v15 = v12;
LABEL_18:
        _os_log_impl(&dword_1830D4000, v14, v15, v10, buf, 0xCu);
        goto LABEL_19;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v19 = "tcp_connection_set_event_handler";
        __int16 v20 = 2082;
        BOOL v21 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v7) {
      goto LABEL_14;
    }
LABEL_13:
    free(v7);
    goto LABEL_14;
  }
  id v4 = _Block_copy(a2);
  id v5 = (void *)v3[8];
  v3[8] = v4;

LABEL_14:
}

void tcp_connection_set_cancel_handler(void *a1, const void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  os_log_type_t v3 = a1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v19 = "tcp_connection_set_cancel_handler";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "tcp_connection_set_cancel_handler";
        char v10 = "%{public}s called with null connection";
LABEL_17:
        os_log_type_t v14 = v8;
        os_log_type_t v15 = v9;
        goto LABEL_18;
      }
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "tcp_connection_set_cancel_handler";
        char v10 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_17;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_19:

          if (!v7) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "tcp_connection_set_cancel_handler";
        char v10 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v14 = v8;
        os_log_type_t v15 = v12;
LABEL_18:
        _os_log_impl(&dword_1830D4000, v14, v15, v10, buf, 0xCu);
        goto LABEL_19;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v19 = "tcp_connection_set_cancel_handler";
        __int16 v20 = 2082;
        BOOL v21 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v7) {
      goto LABEL_14;
    }
LABEL_13:
    free(v7);
    goto LABEL_14;
  }
  id v4 = _Block_copy(a2);
  id v5 = (void *)v3[9];
  v3[9] = v4;

LABEL_14:
}

void tcp_connection_set_event_handler_f(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "tcp_connection_set_event_handler_f";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v9, &v20, &v19))
    {
      if (v20 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v10 = (id)gLogObj;
        os_log_type_t v11 = v20;
        if (!os_log_type_enabled(v10, v20)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_set_event_handler_f";
        os_log_type_t v12 = "%{public}s called with null connection";
LABEL_17:
        char v16 = v10;
        os_log_type_t v17 = v11;
        goto LABEL_18;
      }
      if (!v19)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v10 = (id)gLogObj;
        os_log_type_t v11 = v20;
        if (!os_log_type_enabled(v10, v20)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_set_event_handler_f";
        os_log_type_t v12 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_17;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v10 = (id)gLogObj;
      os_log_type_t v14 = v20;
      BOOL v15 = os_log_type_enabled(v10, v20);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_19:

          if (!v9) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_set_event_handler_f";
        os_log_type_t v12 = "%{public}s called with null connection, no backtrace";
        char v16 = v10;
        os_log_type_t v17 = v14;
LABEL_18:
        _os_log_impl(&dword_1830D4000, v16, v17, v12, buf, 0xCu);
        goto LABEL_19;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v22 = "tcp_connection_set_event_handler_f";
        __int16 v23 = 2082;
        BOOL v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v9) {
      goto LABEL_14;
    }
LABEL_13:
    free(v9);
    goto LABEL_14;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __tcp_connection_set_event_handler_f_block_invoke;
  aBlock[3] = &__block_descriptor_48_e13_v20__0I8r_v12l;
  void aBlock[4] = a3;
  aBlock[5] = a2;
  id v6 = _Block_copy(aBlock);
  id v7 = (void *)v5[8];
  v5[8] = v6;

LABEL_14:
}

uint64_t __tcp_connection_set_event_handler_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void tcp_connection_set_interface_by_index(void *a1, unsigned int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  os_log_type_t v3 = a1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "tcp_connection_set_interface_by_index";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v6, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "tcp_connection_set_interface_by_index";
        os_log_type_t v9 = "%{public}s called with null connection";
LABEL_23:
        BOOL v15 = v7;
        os_log_type_t v16 = v8;
        goto LABEL_24;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "tcp_connection_set_interface_by_index";
        os_log_type_t v9 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_23;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v14)
        {
LABEL_25:

          if (!v6) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "tcp_connection_set_interface_by_index";
        os_log_type_t v9 = "%{public}s called with null connection, no backtrace";
        BOOL v15 = v7;
        os_log_type_t v16 = v13;
LABEL_24:
        _os_log_impl(&dword_1830D4000, v15, v16, v9, buf, 0xCu);
        goto LABEL_25;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v20 = "tcp_connection_set_interface_by_index";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v6) {
      goto LABEL_20;
    }
LABEL_19:
    free(v6);
    goto LABEL_20;
  }
  id v4 = nw_interface_create_with_index(a2);
  if (v4)
  {
    nw_parameters_require_interface(v3[6], &v4->super);
    if (!strcasecmp("awdl0", v4->name)) {
      nw_parameters_set_use_awdl(v3[6], 1);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v11 = (char *)v3[12];
      *(_DWORD *)buf = 136446722;
      os_log_type_t v20 = "tcp_connection_set_interface_by_index";
      __int16 v21 = 2048;
      uint64_t v22 = v11;
      __int16 v23 = 1024;
      unsigned int v24 = a2;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s %llu could not set interface with index %d", buf, 0x1Cu);
    }
  }
LABEL_20:
}

BOOL tcp_connection_set_interface_by_name(void *a1, char *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  os_log_type_t v3 = a1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "tcp_connection_set_interface_by_name";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v7, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_set_interface_by_name";
        char v10 = "%{public}s called with null connection";
LABEL_23:
        char v17 = v8;
        os_log_type_t v18 = v9;
        goto LABEL_24;
      }
      if (!v19)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_set_interface_by_name";
        char v10 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_23;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_25:

          if (!v7) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_set_interface_by_name";
        char v10 = "%{public}s called with null connection, no backtrace";
        char v17 = v8;
        os_log_type_t v18 = v14;
LABEL_24:
        _os_log_impl(&dword_1830D4000, v17, v18, v10, buf, 0xCu);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v22 = "tcp_connection_set_interface_by_name";
        __int16 v23 = 2082;
        unsigned int v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v7)
    {
LABEL_19:
      BOOL v5 = 0;
      goto LABEL_20;
    }
LABEL_18:
    free(v7);
    goto LABEL_19;
  }
  id v4 = nw_interface_create_with_name(a2);
  BOOL v5 = v4 != 0;
  if (v4)
  {
    nw_parameters_require_interface(v3[6], &v4->super);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v12 = (char *)v3[12];
      *(_DWORD *)buf = 136446722;
      uint64_t v22 = "tcp_connection_set_interface_by_name";
      __int16 v23 = 2048;
      unsigned int v24 = v12;
      __int16 v25 = 2082;
      char v26 = a2;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s %llu could not set interface with name %{public}s", buf, 0x20u);
    }
  }
LABEL_20:

  return v5;
}

void tcp_connection_set_indefinite(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "tcp_connection_set_indefinite";
    id v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_indefinite";
        id v7 = "%{public}s called with null connection";
LABEL_19:
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_indefinite";
        id v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_indefinite";
        id v7 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v16 = "tcp_connection_set_indefinite";
        __int16 v17 = 2082;
        os_log_type_t v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  uint64_t v2 = *(void **)(a1 + 48);

  nw_parameters_set_indefinite(v2, a2);
}

uint64_t tcp_connection_set_context(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  BOOL v5 = v4;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    unsigned int v24 = "tcp_connection_set_context";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v10, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v24 = "tcp_connection_set_context";
        char v13 = "%{public}s called with null connection";
LABEL_22:
        uint64_t v19 = v11;
        os_log_type_t v20 = v12;
        goto LABEL_23;
      }
      if (!v21)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v24 = "tcp_connection_set_context";
        char v13 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v11 = (id)gLogObj;
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (!v17)
        {
LABEL_24:

          if (!v10) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v24 = "tcp_connection_set_context";
        char v13 = "%{public}s called with null connection, no backtrace";
        uint64_t v19 = v11;
        os_log_type_t v20 = v16;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v19, v20, v13, buf, 0xCu);
        goto LABEL_24;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        unsigned int v24 = "tcp_connection_set_context";
        __int16 v25 = 2082;
        char v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v10)
    {
LABEL_18:
      uint64_t v6 = 0;
      goto LABEL_19;
    }
LABEL_17:
    free(v10);
    goto LABEL_18;
  }
  if (!v4)
  {
    os_unfair_lock_lock(v3 + 30);
    os_log_type_t v14 = *(void **)&v3[2]._os_unfair_lock_opaque;
    *(void *)&v3[2]._os_unfair_lock_opaque = 0;

    os_log_type_t v8 = v3 + 30;
    goto LABEL_10;
  }
  uint64_t v6 = (uint64_t)xpc_copy(v4);
  if (v6)
  {
    os_unfair_lock_lock(v3 + 30);
    id v7 = *(void **)&v3[2]._os_unfair_lock_opaque;
    *(void *)&v3[2]._os_unfair_lock_opaque = v6;

    os_log_type_t v8 = v3 + 30;
LABEL_10:
    os_unfair_lock_unlock(v8);
    uint64_t v6 = 1;
  }
LABEL_19:

  return v6;
}

void tcp_connection_set_low_latency(uint64_t a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "tcp_connection_set_low_latency";
    id v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_low_latency";
        id v7 = "%{public}s called with null connection";
LABEL_19:
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_low_latency";
        id v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "tcp_connection_set_low_latency";
        id v7 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v16 = "tcp_connection_set_low_latency";
        __int16 v17 = 2082;
        os_log_type_t v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  uint64_t v2 = *(void **)(a1 + 48);

  nw_parameters_set_reduce_buffering(v2, a2);
}

xpc_object_t tcp_connection_copy_context(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "tcp_connection_copy_context";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v6, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "tcp_connection_copy_context";
        os_log_type_t v9 = "%{public}s called with null connection";
LABEL_21:
        os_log_type_t v14 = v7;
        os_log_type_t v15 = v8;
        goto LABEL_22;
      }
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "tcp_connection_copy_context";
        os_log_type_t v9 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v12)
        {
LABEL_23:

          if (!v6) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "tcp_connection_copy_context";
        os_log_type_t v9 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v14 = v7;
        os_log_type_t v15 = v11;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v14, v15, v9, buf, 0xCu);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v19 = "tcp_connection_copy_context";
        __int16 v20 = 2082;
        char v21 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v11, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v6)
    {
LABEL_17:
      xpc_object_t v4 = 0;
      goto LABEL_18;
    }
LABEL_16:
    free(v6);
    goto LABEL_17;
  }
  os_unfair_lock_lock(v1 + 30);
  id v3 = *(void **)&v2[2]._os_unfair_lock_opaque;
  if (v3) {
    xpc_object_t v4 = xpc_copy(v3);
  }
  else {
    xpc_object_t v4 = 0;
  }
  os_unfair_lock_unlock(v2 + 30);
LABEL_18:

  return v4;
}

uint64_t tcp_connection_get_error(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(unsigned int *)(a1 + 112);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v2 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "tcp_connection_get_error";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v3, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      xpc_object_t v4 = (id)gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "tcp_connection_get_error";
      os_log_type_t v6 = "%{public}s called with null connection";
LABEL_17:
      BOOL v10 = v4;
      os_log_type_t v11 = v5;
      goto LABEL_18;
    }
    if (!v12)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      xpc_object_t v4 = (id)gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "tcp_connection_get_error";
      os_log_type_t v6 = "%{public}s called with null connection, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    xpc_object_t v4 = (id)gLogObj;
    os_log_type_t v8 = type;
    BOOL v9 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (!v9)
      {
LABEL_19:

        if (!v3) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_13;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "tcp_connection_get_error";
      os_log_type_t v6 = "%{public}s called with null connection, no backtrace";
      BOOL v10 = v4;
      os_log_type_t v11 = v8;
LABEL_18:
      _os_log_impl(&dword_1830D4000, v10, v11, v6, buf, 0xCu);
      goto LABEL_19;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v15 = "tcp_connection_get_error";
      __int16 v16 = 2082;
      __int16 v17 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v4, v8, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
  }
  if (v3) {
LABEL_13:
  }
    free(v3);
  return 0xFFFFFFFFLL;
}

CFErrorRef nw_tcp_connection_copy_error(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_tcp_connection_copy_error";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v6, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_tcp_connection_copy_error";
        BOOL v9 = "%{public}s called with null connection";
LABEL_21:
        os_log_type_t v14 = v7;
        os_log_type_t v15 = v8;
        goto LABEL_22;
      }
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_tcp_connection_copy_error";
        BOOL v9 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v12)
        {
LABEL_23:

          if (!v6) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_tcp_connection_copy_error";
        BOOL v9 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v14 = v7;
        os_log_type_t v15 = v11;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v14, v15, v9, buf, 0xCu);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v19 = "nw_tcp_connection_copy_error";
        __int16 v20 = 2082;
        char v21 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v11, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v6)
    {
LABEL_17:
      CFErrorRef v4 = 0;
      goto LABEL_18;
    }
LABEL_16:
    free(v6);
    goto LABEL_17;
  }
  os_unfair_lock_lock(v1 + 30);
  id v3 = *(id *)&v2[6]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 30);
  if (v3) {
    CFErrorRef v4 = nw_error_copy_cf_error(v3);
  }
  else {
    CFErrorRef v4 = 0;
  }

LABEL_18:
  return v4;
}

uint64_t tcp_connection_get_socket(void *a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  CFErrorRef v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v26 = "tcp_connection_get_socket";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v8, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446210;
        char v26 = "tcp_connection_get_socket";
        os_log_type_t v11 = "%{public}s called with null connection";
LABEL_25:
        char v16 = v9;
        os_log_type_t v17 = v10;
        goto LABEL_26;
      }
      if (!v23)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446210;
        char v26 = "tcp_connection_get_socket";
        os_log_type_t v11 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_25;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v9 = (id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_27:

          if (!v8) {
            goto LABEL_22;
          }
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        char v26 = "tcp_connection_get_socket";
        os_log_type_t v11 = "%{public}s called with null connection, no backtrace";
        char v16 = v9;
        os_log_type_t v17 = v14;
LABEL_26:
        _os_log_impl(&dword_1830D4000, v16, v17, v11, buf, 0xCu);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        char v26 = "tcp_connection_get_socket";
        __int16 v27 = 2082;
        os_log_type_t v28 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v8)
    {
LABEL_22:
      uint64_t os_unfair_lock_opaque = 0xFFFFFFFFLL;
      goto LABEL_37;
    }
LABEL_21:
    free(v8);
    goto LABEL_22;
  }
  if (*(void *)&v3[4]._os_unfair_lock_opaque)
  {
    os_unfair_lock_lock(v3 + 30);
    uint64_t os_unfair_lock_opaque = v4[29]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque == -1)
    {
      if (SBYTE2(v4[39]._os_unfair_lock_opaque) < 0)
      {
        int connected_socket = nw_connection_get_connected_socket(*(void **)&v4[4]._os_unfair_lock_opaque);
        if (connected_socket >= -1)
        {
          uint64_t os_unfair_lock_opaque = dup(connected_socket);
          v4[29]._uint64_t os_unfair_lock_opaque = os_unfair_lock_opaque;
          goto LABEL_31;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v6 = (id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          char v26 = "tcp_connection_get_socket";
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s Cannot get socket on a connection for which client socket access is disallowed.", buf, 0xCu);
        }
      }
      uint64_t os_unfair_lock_opaque = 0xFFFFFFFFLL;
    }
LABEL_31:
    if (a2) {
      char v19 = 8;
    }
    else {
      char v19 = 0;
    }
    HIBYTE(v4[39]._os_unfair_lock_opaque) = HIBYTE(v4[39]._os_unfair_lock_opaque) & 0xF7 | v19;
    os_unfair_lock_unlock(v4 + 30);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v20 = (id)gLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      char v21 = *(char **)&v4[24]._os_unfair_lock_opaque;
      *(_DWORD *)buf = 136446978;
      char v26 = "tcp_connection_get_socket";
      __int16 v27 = 2048;
      os_log_type_t v28 = v21;
      __int16 v29 = 1024;
      int v30 = os_unfair_lock_opaque;
      __int16 v31 = 1024;
      int v32 = a2;
      _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %llu dupfd: %d, takeownership: %{BOOL}d", buf, 0x22u);
    }

    goto LABEL_37;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v12 = (id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    char v26 = "tcp_connection_get_socket";
    _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
  }

  uint64_t os_unfair_lock_opaque = 0xFFFFFFFFLL;
LABEL_37:

  return os_unfair_lock_opaque;
}

void tcp_connection_allow_client_socket_access(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  CFErrorRef v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "tcp_connection_allow_client_socket_access";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v7, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_26;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "tcp_connection_allow_client_socket_access";
        os_log_type_t v10 = "%{public}s called with null connection";
LABEL_24:
        BOOL v15 = v8;
        os_log_type_t v16 = v9;
        goto LABEL_25;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_26;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "tcp_connection_allow_client_socket_access";
        os_log_type_t v10 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_24;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (!v14)
        {
LABEL_26:

          if (!v7) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "tcp_connection_allow_client_socket_access";
        os_log_type_t v10 = "%{public}s called with null connection, no backtrace";
        BOOL v15 = v8;
        os_log_type_t v16 = v13;
LABEL_25:
        _os_log_impl(&dword_1830D4000, v15, v16, v10, buf, 0xCu);
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v20 = "tcp_connection_allow_client_socket_access";
        __int16 v21 = 2082;
        uint64_t v22 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v7) {
      goto LABEL_21;
    }
LABEL_20:
    free(v7);
    goto LABEL_21;
  }
  if ((v3[39]._os_unfair_lock_opaque & 0x10000000) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "tcp_connection_allow_client_socket_access";
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called before tcp_connection_start", buf, 0xCu);
    }
  }
  else
  {
    os_unfair_lock_lock(v3 + 30);
    if (a2) {
      char v5 = 0x80;
    }
    else {
      char v5 = 0;
    }
    BYTE2(v4[39]._os_unfair_lock_opaque) = v5 & 0x80 | BYTE2(v4[39]._os_unfair_lock_opaque) & 0x7F;
    nw_parameters_set_allow_socket_access(*(void **)&v4[12]._os_unfair_lock_opaque, a2);
    os_unfair_lock_unlock(v4 + 30);
  }
LABEL_21:
}

uint64_t tcp_connection_copy_socket(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "tcp_connection_copy_socket";
    id v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault((const char *)v7, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_copy_socket";
        os_log_type_t v10 = "%{public}s called with null connection";
LABEL_25:
        os_log_type_t v16 = v8;
        os_log_type_t v17 = v9;
        goto LABEL_26;
      }
      if (!v19)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_copy_socket";
        os_log_type_t v10 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_25;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_27:

          if (!v7) {
            goto LABEL_29;
          }
LABEL_28:
          free(v7);
          goto LABEL_29;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "tcp_connection_copy_socket";
        os_log_type_t v10 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v16 = v8;
        os_log_type_t v17 = v12;
LABEL_26:
        _os_log_impl(&dword_1830D4000, v16, v17, v10, buf, 0xCu);
        goto LABEL_27;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v22 = "tcp_connection_copy_socket";
        __int16 v23 = 2082;
        unsigned int v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v7) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  id v3 = (void *)*((void *)v1 + 2);
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    CFErrorRef v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "tcp_connection_copy_socket";
      char v5 = "%{public}s API Misuse: Function must be called after tcp_connection_start";
      goto LABEL_12;
    }
LABEL_13:

LABEL_29:
    uint64_t v15 = 0xFFFFFFFFLL;
    goto LABEL_30;
  }
  if ((v2[158] & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    CFErrorRef v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "tcp_connection_copy_socket";
      char v5 = "%{public}s Cannot get socket on a connection for which client socket access is disallowed.";
LABEL_12:
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, v5, buf, 0xCu);
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  int connected_socket = nw_connection_get_connected_socket(v3);
  if (connected_socket < 0) {
    goto LABEL_29;
  }
  uint64_t v15 = dup(connected_socket);
LABEL_30:

  return v15;
}

BOOL tcp_connection_get_hostname(void *a1, unsigned char *a2, unint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  char v5 = a1;
  id v6 = v5;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "tcp_connection_get_hostname";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v17, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "tcp_connection_get_hostname";
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (id)gLogObj;
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v33 = "tcp_connection_get_hostname";
            __int16 v34 = 2082;
            uint64_t v35 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v18, v24, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v17) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "tcp_connection_get_hostname";
          _os_log_impl(&dword_1830D4000, v18, v24, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "tcp_connection_get_hostname";
          _os_log_impl(&dword_1830D4000, v18, v26, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v17)
    {
LABEL_25:
      unint64_t v10 = 0;
LABEL_49:

      return v10;
    }
LABEL_24:
    free(v17);
    goto LABEL_25;
  }
  if (a2 && a3) {
    *a2 = 0;
  }
  id v7 = v5[2];
  if (v7)
  {
    id v8 = nw_connection_copy_host_endpoint(v7);
  }
  else
  {
    id v20 = v6[5];
    if (!v20 || (v21 = v20, int v22 = [v21 type], v21, v22 != 2))
    {
      id v9 = 0;
      unint64_t v10 = 0;
LABEL_48:

      goto LABEL_49;
    }
    id v8 = v6[5];
  }
  id v9 = v8;
  unint64_t v10 = 0;
  if (!a2 || !v8) {
    goto LABEL_48;
  }
  id v9 = v8;
  os_log_type_t v11 = (const char *)[v9 hostname];

  size_t v12 = strlen(v11);
  if (v12 >= a3) {
    unint64_t v10 = a3;
  }
  else {
    unint64_t v10 = v12;
  }
  if (v11)
  {
    if (a3 >= 2) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
  __int16 v27 = __nwlog_obj();
  os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v33 = "_strict_strlcpy";
  os_log_type_t v28 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v28);
  if (!result)
  {
    free(v28);
    if (a3 >= 2)
    {
LABEL_14:
      uint64_t v13 = 1;
      unint64_t v14 = a3;
      while (1)
      {
        int v15 = *(unsigned __int8 *)v11;
        *a2 = v15;
        if (!v15) {
          goto LABEL_48;
        }
        ++a2;
        ++v11;
        if (--v14 <= 1) {
          goto LABEL_45;
        }
      }
    }
LABEL_44:
    uint64_t v13 = a3;
LABEL_45:
    if (a3)
    {
      if (v13) {
        *a2 = 0;
      }
    }
    goto LABEL_48;
  }
  __break(1u);
  return result;
}

void sub_1838AC51C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void tcp_connection_start(void *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v2 = a1;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  CFErrorRef v4 = v3;
  if (!v2)
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_connection_start";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v18, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v19 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (!os_log_type_enabled(v19, type)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "tcp_connection_start";
        id v21 = "%{public}s called with null connection";
LABEL_38:
        __int16 v29 = v19;
        os_log_type_t v30 = v20;
        goto LABEL_39;
      }
      if (!v35)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v19 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (!os_log_type_enabled(v19, type)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "tcp_connection_start";
        id v21 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v19 = (id)gLogObj;
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v19, type);
      if (!backtrace_string)
      {
        if (!v28)
        {
LABEL_40:

          if (!v18) {
            goto LABEL_35;
          }
          goto LABEL_34;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "tcp_connection_start";
        id v21 = "%{public}s called with null connection, no backtrace";
        __int16 v29 = v19;
        os_log_type_t v30 = v27;
LABEL_39:
        _os_log_impl(&dword_1830D4000, v29, v30, v21, buf, 0xCu);
        goto LABEL_40;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "tcp_connection_start";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v18) {
      goto LABEL_35;
    }
LABEL_34:
    free(v18);
    goto LABEL_35;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *((void *)v2 + 12);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "tcp_connection_start";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v5;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %llu starting", buf, 0x16u);
  }

  if (!*((void *)v2 + 2))
  {
    id v6 = nw_connection_create_with_id(*((void **)v2 + 5), *((void **)v2 + 6), *((void *)v2 + 12));
    id v7 = (void *)*((void *)v2 + 2);
    *((void *)v2 + 2) = v6;

    nw_connection_set_queue(*((nw_connection_t *)v2 + 2), *((dispatch_queue_t *)v2 + 7));
    *((void *)v2 + 12) = nw_connection_get_id(*((void **)v2 + 2));
  }
  *((unsigned char *)v2 + 159) |= 0x10u;
  objc_storeStrong((id *)v2 + 11, a1);
  id v8 = *((void *)v2 + 2);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = __tcp_connection_start_block_invoke;
  handler[3] = &unk_1E524BA60;
  id v9 = v2;
  id v34 = v9;
  nw_connection_set_state_changed_handler(v8, handler);
  unint64_t v10 = *((void *)v2 + 2);
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = __tcp_connection_start_block_invoke_29;
  v31[3] = &unk_1E524AEE0;
  os_log_type_t v11 = (int *)v9;
  int v32 = v11;
  nw_connection_set_path_changed_handler(v10, v31);
  char v12 = *((unsigned char *)v2 + 159);
  if ((v12 & 0x20) != 0)
  {
    tcp_connection_set_keepalive_handler_on_nw_connection(v11);
    char v12 = *((unsigned char *)v2 + 159);
    if ((v12 & 0x40) == 0)
    {
LABEL_8:
      if ((v12 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }
  else if ((*((unsigned char *)v2 + 159) & 0x40) == 0)
  {
    goto LABEL_8;
  }
  tcp_connection_set_adaptive_read_handler_on_nw_connection(v11);
  if ((*((unsigned char *)v2 + 159) & 0x80) == 0)
  {
LABEL_9:
    if (!v11[38]) {
      goto LABEL_10;
    }
LABEL_24:
    int v22 = v11;
    __int16 v23 = v22;
    os_log_type_t v24 = (void *)*((void *)v2 + 2);
    if (v24)
    {
      int v25 = v11[38];
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __tcp_connection_set_minimum_throughput_on_nw_connection_block_invoke;
      char v38 = &unk_1E523FC88;
      os_log_type_t v39 = v22;
      nw_connection_set_low_throughput_handler(v24, v25, buf);
    }
    uint64_t v13 = (void *)*((void *)v11 + 9);
    if (!v13) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  tcp_connection_set_adaptive_write_handler_on_nw_connection(v11);
  if (v11[38]) {
    goto LABEL_24;
  }
LABEL_10:
  uint64_t v13 = (void *)*((void *)v11 + 9);
  if (v13)
  {
LABEL_11:
    nw_connection_set_cancel_handler(*((void **)v2 + 2), v13);
    unint64_t v14 = (void *)*((void *)v11 + 9);
    *((void *)v11 + 9) = 0;
  }
LABEL_12:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v15 = (id)gLogObj;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *((void *)v2 + 2);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "tcp_connection_start";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v16;
    _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s starting tc_nwconn=%p", buf, 0x16u);
  }

  os_log_type_t v17 = *((void *)v2 + 2);
  if (v17) {
    nw_connection_start(v17);
  }

LABEL_35:
}

void __tcp_connection_start_block_invoke_29(uint64_t a1, void *a2)
{
  id v26 = a2;
  os_log_type_t v27 = 0;
  __int16 v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 120));
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 156) == 255)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 120));
    char v12 = 0;
    goto LABEL_42;
  }
  uint64_t v5 = *(void **)(v4 + 32);
  if (v5)
  {
    id v6 = v5;
    int v7 = v6[94];

    int v8 = v7 == 1;
    id v9 = v26;
    if (v26)
    {
LABEL_4:
      unint64_t v10 = v9;
      int v11 = v10[94] == 1;

      goto LABEL_8;
    }
  }
  else
  {
    int v8 = 0;
    id v9 = v26;
    if (v26) {
      goto LABEL_4;
    }
  }
  int v11 = 0;
LABEL_8:
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), a2);
  uint64_t v13 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v13 + 159))
  {
    uint64_t v16 = tcp_connection_quality_from_path(*(void **)(a1 + 32), v26);
    if (*(void *)(v13 + 128) == v16)
    {
      char v14 = 0;
    }
    else
    {
      os_log_type_t v17 = "connection quality changed";
      if (v16 == 2) {
        os_log_type_t v17 = "connection quality changed to normal";
      }
      if (v16 == 1) {
        uint64_t v18 = "connection quality changed to bad";
      }
      else {
        uint64_t v18 = v17;
      }
      *(void *)(v13 + 128) = v16;
      char v14 = tcp_connection_fillout_event_locked((void *)v13, (uint64_t)&v29, 1073741833, 0, 0, (uint64_t)v18);
    }
    uint64_t v13 = *(void *)(a1 + 32);
    if (v8 == v11)
    {
      int v15 = 0;
      if (v14) {
        goto LABEL_27;
      }
    }
    else
    {
      if (v11) {
        os_log_type_t v19 = "conditions satisfied";
      }
      else {
        os_log_type_t v19 = "conditions not satisfied";
      }
      int v15 = tcp_connection_fillout_event_locked(*(void **)(a1 + 32), (uint64_t)&v27, 1073741826, 0, 0, (uint64_t)v19);
      uint64_t v13 = *(void *)(a1 + 32);
      if (v14) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    char v14 = 0;
    int v15 = 0;
  }
  if (!v15)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 120));
    char v12 = 0;
    goto LABEL_35;
  }
LABEL_27:
  char v12 = _Block_copy(*(const void **)(v13 + 64));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 120));
  if ((v14 & 1) == 0)
  {
LABEL_35:
    if (!v15) {
      goto LABEL_42;
    }
    goto LABEL_36;
  }
  os_log_type_t v20 = (unsigned __int8 *)*(id *)(a1 + 32);
  id v21 = v12;
  char v12 = v21;
  int v22 = v29;
  if (v21 && v20[156] != 255) {
    (*((void (**)(id, void, void *))v21 + 2))(v21, v30, v29);
  }
  if (v22) {
    free(v22);
  }

  if (v15)
  {
LABEL_36:
    __int16 v23 = (unsigned __int8 *)*(id *)(a1 + 32);
    id v24 = v12;
    char v12 = v24;
    int v25 = v27;
    if (v24 && v23[156] != 255) {
      (*((void (**)(id, void, void *))v24 + 2))(v24, v28, v27);
    }
    if (v25) {
      free(v25);
    }
  }
LABEL_42:
}

uint64_t tcp_connection_quality_from_path(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  if (v4)
  {
    uint64_t v5 = (void **)v3;
    id v6 = v5;
    uint64_t v7 = v4[14];
    if (v7
      && *(_DWORD *)(v7 + 8)
      && (nw_parameters_get_pid(v5[6]),
          nw_parameters_get_effective_bundle_id(v6[6]),
          (_symptoms_is_daemon_fallback_blacklisted() & 1) == 0))
    {
      if (*((_DWORD *)v6 + 31) != 1) {
        goto LABEL_12;
      }
      if (tcp_connection_is_first_party_onceToken != -1) {
        dispatch_once(&tcp_connection_is_first_party_onceToken, &__block_literal_global_32320);
      }
      if (tcp_connection_is_first_party_is_first_party == 1)
      {
LABEL_12:

        uint64_t v8 = 1;
        goto LABEL_7;
      }
      BOOL v10 = nw_parameters_multipath_fallback_allowed(v6[6]);

      if (v10)
      {
        uint64_t v8 = 1;
        goto LABEL_7;
      }
    }
    else
    {
    }
  }
  uint64_t v8 = 2;
LABEL_7:

  return v8;
}

void __tcp_connection_start_attempt_timer_locked_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = *(id *)(a1 + 32);
  char v14 = 0;
  uint64_t v15 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)v1 + 30);
  uint64_t v2 = *((void *)v1 + 6);
  if (!v2 || !nw_path_parameters_get_logging_disabled(*(void *)(v2 + 104)))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *((void *)v1 + 12);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v17 = "tcp_connection_attempt_timer_fired_on_client_queue";
      __int16 v18 = 2048;
      uint64_t v19 = v4;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s %llu connection took too long to connect, cleaning up current attempt", buf, 0x16u);
    }
  }
  *((_DWORD *)v1 + 28) = 60;
  if ((*((unsigned char *)v1 + 158) & 0x40) != 0
    && tcp_connection_fillout_event_locked(v1, (uint64_t)&v14, 1073741832, 0, 0, (uint64_t)"connection attempt timed out"))
  {
    uint64_t v5 = _Block_copy(*((const void **)v1 + 8));
    int v6 = 1;
    uint64_t v7 = *((void *)v1 + 2);
    if (!v7) {
      goto LABEL_9;
    }
LABEL_12:
    nw_connection_cancel(v7);
    goto LABEL_13;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = *((void *)v1 + 2);
  if (v7) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v8 = *((void *)v1 + 10);
  if (v8)
  {
    dispatch_source_cancel(v8);
    id v9 = (void *)*((void *)v1 + 10);
    *((void *)v1 + 10) = 0;
  }
LABEL_13:
  os_unfair_lock_unlock((os_unfair_lock_t)v1 + 30);
  if (v6)
  {
    BOOL v10 = (unsigned __int8 *)v1;
    id v11 = v5;
    char v12 = v11;
    if (!v11 || v10[156] == 255)
    {
      uint64_t v13 = v14;
      if (!v14) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v13 = v14;
      (*((void (**)(id, void, void *))v11 + 2))(v11, v15, v14);
      if (!v13)
      {
LABEL_18:

        goto LABEL_19;
      }
    }
    free(v13);
    goto LABEL_18;
  }
LABEL_19:
}

void __tcp_connection_set_nw_connection_callbacks_on_connected_block_invoke(uint64_t a1)
{
}

void __tcp_connection_set_nw_connection_callbacks_on_connected_block_invoke_2(uint64_t a1)
{
}

void __tcp_connection_set_nw_connection_callbacks_on_connected_block_invoke_3(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = (char *)*(id *)(a1 + 32);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 120);
  os_unfair_lock_lock((os_unfair_lock_t)v3 + 30);
  char v5 = v3[158];
  if ((v5 & 0x20) != 0 || (a2 & 1) == 0)
  {
    if (a2) {
      char v6 = 0;
    }
    else {
      char v6 = 32;
    }
    v3[158] = v5 & 0xDF | v6;
    if (((((v5 & 0x20) == 0) ^ a2) & 1) == 0 && v3[156] != 255)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *((void *)v3 + 12);
        *(_DWORD *)buf = 136446466;
        __int16 v18 = "tcp_connection_send_viability_event_unlocked";
        __int16 v19 = 2048;
        uint64_t v20 = v8;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %llu notifying of connection non-viability event again", buf, 0x16u);
      }
    }
    id v9 = a2 ? "viable" : "no longer viable";
    if (tcp_connection_fillout_event_locked(v3, (uint64_t)&v15, 6, 0, 0, (uint64_t)v9))
    {
      BOOL v10 = _Block_copy(*((const void **)v3 + 8));
      os_unfair_lock_unlock(v4);
      id v11 = v3;
      id v12 = v10;
      uint64_t v13 = v12;
      if (!v12 || v11[156] == 255)
      {
        char v14 = v15;
        if (!v15)
        {
LABEL_22:

          goto LABEL_23;
        }
      }
      else
      {
        char v14 = v15;
        (*((void (**)(id, void, void *))v12 + 2))(v12, v16, v15);
        if (!v14) {
          goto LABEL_22;
        }
      }
      free(v14);
      goto LABEL_22;
    }
  }
  os_unfair_lock_unlock(v4);
LABEL_23:
}

void __tcp_connection_set_nw_connection_callbacks_on_connected_block_invoke_4(uint64_t a1, int a2)
{
  __int16 v18 = (char *)*(id *)(a1 + 32);
  __int16 v19 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  id v3 = (os_unfair_lock_s *)(v18 + 120);
  os_unfair_lock_lock((os_unfair_lock_t)v18 + 30);
  uint64_t v4 = v18;
  char v5 = v18[158];
  if (((v5 & 0x10) == 0) != a2)
  {
    os_unfair_lock_unlock(v3);
    char v6 = 0;
    goto LABEL_27;
  }
  if (a2) {
    char v7 = 16;
  }
  else {
    char v7 = 0;
  }
  v18[158] = v5 & 0xEF | v7;
  if (a2)
  {
    uint64_t v8 = "better route";
    char v9 = tcp_connection_fillout_event_locked(v18, (uint64_t)&v21, 5, 0, 0, (uint64_t)"better route");
    uint64_t v4 = v18;
  }
  else
  {
    char v9 = 0;
    uint64_t v8 = "no better route";
  }
  int v10 = tcp_connection_fillout_event_locked(v4, (uint64_t)&v19, 1073741831, 0, 0, (uint64_t)v8);
  int v11 = v10;
  if ((v9 & 1) == 0 && !v10)
  {
    os_unfair_lock_unlock(v3);
    char v6 = 0;
    goto LABEL_20;
  }
  char v6 = _Block_copy(*((const void **)v18 + 8));
  os_unfair_lock_unlock(v3);
  if ((v9 & 1) == 0)
  {
LABEL_20:
    if (!v11) {
      goto LABEL_27;
    }
    goto LABEL_21;
  }
  id v12 = v18;
  id v13 = v6;
  char v6 = v13;
  char v14 = v21;
  if (v13 && v12[156] != 255) {
    (*((void (**)(id, void, void *))v13 + 2))(v13, v22, v21);
  }
  if (v14) {
    free(v14);
  }

  if (v11)
  {
LABEL_21:
    uint64_t v15 = v18;
    id v16 = v6;
    char v6 = v16;
    os_log_type_t v17 = v19;
    if (v16 && v15[156] != 255) {
      (*((void (**)(id, void, void *))v16 + 2))(v16, v20, v19);
    }
    if (v17) {
      free(v17);
    }
  }
LABEL_27:
}

uint64_t __tcp_connection_cancel_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t tcp_connection_get_local(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    id v34 = "tcp_connection_get_local";
    id v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v16, &type, &v31)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v17 = (id)gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        id v34 = "tcp_connection_get_local";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v17 = (id)gLogObj;
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          id v34 = "tcp_connection_get_local";
          __int16 v35 = 2082;
          uint64_t v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v21, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v16) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        id v34 = "tcp_connection_get_local";
        _os_log_impl(&dword_1830D4000, v17, v21, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v17 = (id)gLogObj;
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        id v34 = "tcp_connection_get_local";
        _os_log_impl(&dword_1830D4000, v17, v23, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_32;
  }
  if (!v3[2])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      id v34 = "tcp_connection_get_local";
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    goto LABEL_35;
  }
  if (!a2)
  {
    int v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v34 = "tcp_connection_get_local";
    id v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v16, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v17 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          id v34 = "tcp_connection_get_local";
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null outlocal", buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v31)
      {
        os_log_type_t v17 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          id v34 = "tcp_connection_get_local";
          _os_log_impl(&dword_1830D4000, v17, v30, "%{public}s called with null outlocal, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_32;
      }
      os_log_type_t v27 = (char *)__nw_create_backtrace_string();
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v17, type);
      if (!v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          id v34 = "tcp_connection_get_local";
          _os_log_impl(&dword_1830D4000, v17, v28, "%{public}s called with null outlocal, no backtrace", buf, 0xCu);
        }
        goto LABEL_32;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446466;
        id v34 = "tcp_connection_get_local";
        __int16 v35 = 2082;
        uint64_t v36 = v27;
        _os_log_impl(&dword_1830D4000, v17, v28, "%{public}s called with null outlocal, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v27);
    }
LABEL_33:
    if (!v16)
    {
LABEL_35:
      uint64_t v14 = 0;
      goto LABEL_36;
    }
LABEL_34:
    free(v16);
    goto LABEL_35;
  }
  *a2 = 0;
  a2[1] = 0;
  *((_DWORD *)a2 + 6) = 0;
  a2[2] = 0;
  id v5 = nw_connection_copy_connected_local_endpoint(v3[2]);
  char v6 = v5;
  if (v5)
  {
    char v7 = v5;
    int v8 = [v7 type];

    if (v8 == 1)
    {
      nw_endpoint_t address = nw_endpoint_get_address(v7);
      if (address)
      {
        int v10 = address;
        size_t sa_len = address->sa_len;
        if (sa_len < 0x1D)
        {
          memcpy(a2, address, sa_len);
          uint64_t v14 = 1;
          goto LABEL_12;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          int v13 = v10->sa_len;
          *(_DWORD *)buf = 136446466;
          id v34 = "tcp_connection_get_local";
          __int16 v35 = 1024;
          LODWORD(v36) = v13;
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s Local address length (%u) too long", buf, 0x12u);
        }
      }
    }
  }
  uint64_t v14 = 0;
LABEL_12:

LABEL_36:
  return v14;
}

void sub_1838ADBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void tcp_connection_read(void *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  char v7 = a1;
  id v8 = a4;
  char v9 = v8;
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v31 = "tcp_connection_read";
    id v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28)) {
      goto LABEL_25;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v13 = (id)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v31 = "tcp_connection_read";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null connection", buf, 0xCu);
      }
      goto LABEL_24;
    }
    if (!v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v13 = (id)gLogObj;
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v31 = "tcp_connection_read";
        _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_24;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v13 = (id)gLogObj;
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        char v31 = "tcp_connection_read";
        _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_24;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      char v31 = "tcp_connection_read";
      __int16 v32 = 2082;
      uint64_t v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_17;
  }
  int v10 = (void *)v7[2];
  if (v10)
  {
    if (v8)
    {
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      void v25[2] = __tcp_connection_read_block_invoke;
      v25[3] = &unk_1E5248DC0;
      os_log_type_t v26 = v7;
      id v27 = v9;
      nw_connection_receive_internal(v10, 0, a2, a3, v25);

      goto LABEL_27;
    }
    uint64_t v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v31 = "tcp_connection_read";
    id v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28)) {
      goto LABEL_25;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v31 = "tcp_connection_read";
        _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null handler", buf, 0xCu);
      }
LABEL_24:

LABEL_25:
      if (!v12) {
        goto LABEL_27;
      }
LABEL_26:
      free(v12);
      goto LABEL_27;
    }
    if (!v28)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v31 = "tcp_connection_read";
        _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_24;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v13 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        char v31 = "tcp_connection_read";
        _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_24;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      char v31 = "tcp_connection_read";
      __int16 v32 = 2082;
      uint64_t v33 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_17:

    free(backtrace_string);
    if (!v12) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v15 = (id)gLogObj;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    char v31 = "tcp_connection_read";
    _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
  }

LABEL_27:
}

void __tcp_connection_read_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v11 = a2;
  id v8 = a3;
  id v9 = a5;
  int v10 = v9;
  if (*(unsigned __int8 *)(*(void *)(a1 + 32) + 156) != 255)
  {
    if (v9) {

    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void tcp_connection_read_buffer(void *a1, char *a2, unint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a5;
  id v11 = v10;
  if (!v9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v13 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v36 = "tcp_connection_read_buffer";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v14, &type, &v33)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v15 = (id)gLogObj;
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "tcp_connection_read_buffer";
      os_log_type_t v17 = "%{public}s called with null connection";
    }
    else
    {
      if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v15 = (id)gLogObj;
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v36 = "tcp_connection_read_buffer";
            __int16 v37 = 2082;
            char v38 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_17:
          if (!v14) {
            goto LABEL_19;
          }
LABEL_18:
          free(v14);
          goto LABEL_19;
        }
        if (!v21)
        {
LABEL_24:

          if (!v14) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v36 = "tcp_connection_read_buffer";
        os_log_type_t v17 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v22 = v15;
        os_log_type_t v23 = v20;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v22, v23, v17, buf, 0xCu);
        goto LABEL_24;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v15 = (id)gLogObj;
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "tcp_connection_read_buffer";
      os_log_type_t v17 = "%{public}s called with null connection, backtrace limit exceeded";
    }
    os_log_type_t v22 = v15;
    os_log_type_t v23 = v16;
    goto LABEL_23;
  }
  id v12 = (void *)v9[2];
  if (v12)
  {
    if (v10)
    {
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 3221225472;
      v30[2] = __tcp_connection_read_buffer_block_invoke;
      v30[3] = &unk_1E523FC38;
      char v31 = v9;
      id v32 = v11;
      nw_connection_read_buffer(v12, a2, a3, a4, v30);

      goto LABEL_19;
    }
    os_log_type_t v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v36 = "tcp_connection_read_buffer";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v14, &type, &v33)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v36 = "tcp_connection_read_buffer";
        id v27 = "%{public}s called with null handler";
LABEL_42:
        _os_log_impl(&dword_1830D4000, v25, v26, v27, buf, 0xCu);
        goto LABEL_43;
      }
      goto LABEL_43;
    }
    if (!v33)
    {
      int v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v36 = "tcp_connection_read_buffer";
        id v27 = "%{public}s called with null handler, backtrace limit exceeded";
        goto LABEL_42;
      }
LABEL_43:

      goto LABEL_17;
    }
    char v28 = (char *)__nw_create_backtrace_string();
    int v25 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v29 = os_log_type_enabled(v25, type);
    if (!v28)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v36 = "tcp_connection_read_buffer";
        id v27 = "%{public}s called with null handler, no backtrace";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v36 = "tcp_connection_read_buffer";
      __int16 v37 = 2082;
      char v38 = v28;
      _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v28);
    if (v14) {
      goto LABEL_18;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "tcp_connection_read_buffer";
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }
  }
LABEL_19:
}

uint64_t __tcp_connection_read_buffer_block_invoke(uint64_t result)
{
  if (*(unsigned __int8 *)(*(void *)(result + 32) + 156) != 255) {
    return (*(uint64_t (**)(void))(*(void *)(result + 40) + 16))();
  }
  return result;
}

void tcp_connection_write(void *a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  char v6 = a2;
  id v7 = a3;
  id v8 = v7;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v33 = "tcp_connection_write";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v11, &type, &v30)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      char v33 = "tcp_connection_write";
      os_log_type_t v14 = "%{public}s called with null connection";
    }
    else
    {
      if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (id)gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            char v33 = "tcp_connection_write";
            __int16 v34 = 2082;
            __int16 v35 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_17:
          if (!v11) {
            goto LABEL_19;
          }
LABEL_18:
          free(v11);
          goto LABEL_19;
        }
        if (!v18)
        {
LABEL_24:

          if (!v11) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v33 = "tcp_connection_write";
        os_log_type_t v14 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v19 = v12;
        os_log_type_t v20 = v17;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v19, v20, v14, buf, 0xCu);
        goto LABEL_24;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      char v33 = "tcp_connection_write";
      os_log_type_t v14 = "%{public}s called with null connection, backtrace limit exceeded";
    }
    os_log_type_t v19 = v12;
    os_log_type_t v20 = v13;
    goto LABEL_23;
  }
  id v9 = v5[2];
  if (v9)
  {
    if (v7)
    {
      completion[0] = MEMORY[0x1E4F143A8];
      completion[1] = 3221225472;
      completion[2] = __tcp_connection_write_block_invoke;
      completion[3] = &unk_1E5242798;
      char v28 = v5;
      id v29 = v8;
      nw_connection_send(v9, v6, (nw_content_context_t)&__block_literal_global_42249, 1, completion);

      goto LABEL_19;
    }
    BOOL v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "tcp_connection_write";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v11, &type, &v30)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "tcp_connection_write";
        os_log_type_t v24 = "%{public}s called with null handler";
LABEL_42:
        _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
        goto LABEL_43;
      }
      goto LABEL_43;
    }
    if (!v30)
    {
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "tcp_connection_write";
        os_log_type_t v24 = "%{public}s called with null handler, backtrace limit exceeded";
        goto LABEL_42;
      }
LABEL_43:

      goto LABEL_17;
    }
    int v25 = (char *)__nw_create_backtrace_string();
    os_log_type_t v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v26 = os_log_type_enabled(v22, type);
    if (!v25)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "tcp_connection_write";
        os_log_type_t v24 = "%{public}s called with null handler, no backtrace";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      char v33 = "tcp_connection_write";
      __int16 v34 = 2082;
      __int16 v35 = v25;
      _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v25);
    if (v11) {
      goto LABEL_18;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      char v33 = "tcp_connection_write";
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }
  }
LABEL_19:
}

void __tcp_connection_write_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned __int8 *)(*(void *)(a1 + 32) + 156) != 255)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    id v7 = v3;
    if (v3)
    {
      id v5 = (unsigned int *)v3;
      uint64_t v6 = v5[3];
    }
    else
    {
      uint64_t v6 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, v6);
    id v3 = v7;
  }
}

void tcp_connection_write_eof(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "tcp_connection_write_eof";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "tcp_connection_write_eof";
        id v8 = "%{public}s called with null connection";
LABEL_21:
        os_log_type_t v13 = v6;
        os_log_type_t v14 = v7;
        goto LABEL_22;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "tcp_connection_write_eof";
        id v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v12)
        {
LABEL_23:

          if (!v5) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "tcp_connection_write_eof";
        id v8 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v13 = v6;
        os_log_type_t v14 = v11;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v13, v14, v8, buf, 0xCu);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v18 = "tcp_connection_write_eof";
        __int16 v19 = 2082;
        os_log_type_t v20 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5) {
      goto LABEL_18;
    }
LABEL_17:
    free(v5);
    goto LABEL_18;
  }
  id v3 = v1[2];
  if (v3)
  {
    nw_connection_send(v3, 0, (nw_content_context_t)&__block_literal_global_6_42258, 1, &__block_literal_global_24376);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v18 = "tcp_connection_write_eof";
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }
  }
LABEL_18:
}

uint64_t tcp_connection_get_unsent_length(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "tcp_connection_get_unsent_length";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v6, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "tcp_connection_get_unsent_length";
        id v9 = "%{public}s called with null connection";
LABEL_22:
        char v15 = v7;
        os_log_type_t v16 = v8;
        goto LABEL_23;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "tcp_connection_get_unsent_length";
        id v9 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_24:

          if (!v6) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "tcp_connection_get_unsent_length";
        id v9 = "%{public}s called with null connection, no backtrace";
        char v15 = v7;
        os_log_type_t v16 = v12;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v15, v16, v9, buf, 0xCu);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v20 = "tcp_connection_get_unsent_length";
        __int16 v21 = 2082;
        os_log_type_t v22 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v6)
    {
LABEL_18:
      unsent_byte_size_t count = 0;
      goto LABEL_19;
    }
LABEL_17:
    free(v6);
    goto LABEL_18;
  }
  id v3 = (void *)*((void *)v1 + 2);
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v20 = "tcp_connection_get_unsent_length";
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    goto LABEL_18;
  }
  unsent_byte_size_t count = nw_connection_get_unsent_byte_count(v3);
LABEL_19:

  return unsent_byte_count;
}

void tcp_connection_accept(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v26 = "tcp_connection_accept";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v7, &type, &v23)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "tcp_connection_accept";
      id v10 = "%{public}s called with null connection";
    }
    else
    {
      if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v26 = "tcp_connection_accept";
            __int16 v27 = 2082;
            char v28 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_17:
          if (!v7) {
            goto LABEL_19;
          }
LABEL_18:
          free(v7);
          goto LABEL_19;
        }
        if (!v14)
        {
LABEL_24:

          if (!v7) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "tcp_connection_accept";
        id v10 = "%{public}s called with null connection, no backtrace";
        char v15 = v8;
        os_log_type_t v16 = v13;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v15, v16, v10, buf, 0xCu);
        goto LABEL_24;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "tcp_connection_accept";
      id v10 = "%{public}s called with null connection, backtrace limit exceeded";
    }
    char v15 = v8;
    os_log_type_t v16 = v9;
    goto LABEL_23;
  }
  if (v4)
  {
    if (v3[157] == 4)
    {
      tcp_connection_set_queue(v3, v4);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "tcp_connection_accept";
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s Connection is not applicable for accept", buf, 0xCu);
      }
    }
    goto LABEL_19;
  }
  char v17 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v26 = "tcp_connection_accept";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v7, &type, &v23)) {
    goto LABEL_17;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v18, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "tcp_connection_accept";
      os_log_type_t v20 = "%{public}s called with null queue";
LABEL_42:
      _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
      goto LABEL_43;
    }
    goto LABEL_43;
  }
  if (!v23)
  {
    BOOL v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v18, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "tcp_connection_accept";
      os_log_type_t v20 = "%{public}s called with null queue, backtrace limit exceeded";
      goto LABEL_42;
    }
LABEL_43:

    goto LABEL_17;
  }
  __int16 v21 = (char *)__nw_create_backtrace_string();
  BOOL v18 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v22 = os_log_type_enabled(v18, type);
  if (!v21)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v26 = "tcp_connection_accept";
      os_log_type_t v20 = "%{public}s called with null queue, no backtrace";
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v26 = "tcp_connection_accept";
    __int16 v27 = 2082;
    char v28 = v21;
    _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v21);
  if (v7) {
    goto LABEL_18;
  }
LABEL_19:
}

BOOL tcp_connection_is_cellular(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v23 = "tcp_connection_is_cellular";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_29;
        }
        *(_DWORD *)buf = 136446210;
        char v23 = "tcp_connection_is_cellular";
        os_log_type_t v11 = "%{public}s called with null connection";
LABEL_27:
        BOOL v18 = v9;
        os_log_type_t v19 = v10;
        goto LABEL_28;
      }
      if (!v20)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_29;
        }
        *(_DWORD *)buf = 136446210;
        char v23 = "tcp_connection_is_cellular";
        os_log_type_t v11 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_27;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_29:

          if (!v8) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v23 = "tcp_connection_is_cellular";
        os_log_type_t v11 = "%{public}s called with null connection, no backtrace";
        BOOL v18 = v9;
        os_log_type_t v19 = v14;
LABEL_28:
        _os_log_impl(&dword_1830D4000, v18, v19, v11, buf, 0xCu);
        goto LABEL_29;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        char v23 = "tcp_connection_is_cellular";
        __int16 v24 = 2082;
        int v25 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v8)
    {
LABEL_19:
      BOOL v6 = 0;
      goto LABEL_24;
    }
LABEL_18:
    free(v8);
    goto LABEL_19;
  }
  id v3 = (void *)*((void *)v1 + 2);
  if (v3)
  {
    id v4 = nw_connection_copy_connected_path(v3);
    id v5 = v4;
    if (v4)
    {
      BOOL v6 = nw_path_uses_interface_type(v4, nw_interface_type_cellular);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v16 = (id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        char v23 = "tcp_connection_is_cellular";
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s No connected path", buf, 0xCu);
      }

      BOOL v6 = 0;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      char v23 = "tcp_connection_is_cellular";
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    BOOL v6 = 0;
  }
LABEL_24:

  return v6;
}

BOOL tcp_connection_is_expensive(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v23 = "tcp_connection_is_expensive";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_29;
        }
        *(_DWORD *)buf = 136446210;
        char v23 = "tcp_connection_is_expensive";
        os_log_type_t v11 = "%{public}s called with null connection";
LABEL_27:
        BOOL v18 = v9;
        os_log_type_t v19 = v10;
        goto LABEL_28;
      }
      if (!v20)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_29;
        }
        *(_DWORD *)buf = 136446210;
        char v23 = "tcp_connection_is_expensive";
        os_log_type_t v11 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_27;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_29:

          if (!v8) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        char v23 = "tcp_connection_is_expensive";
        os_log_type_t v11 = "%{public}s called with null connection, no backtrace";
        BOOL v18 = v9;
        os_log_type_t v19 = v14;
LABEL_28:
        _os_log_impl(&dword_1830D4000, v18, v19, v11, buf, 0xCu);
        goto LABEL_29;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        char v23 = "tcp_connection_is_expensive";
        __int16 v24 = 2082;
        int v25 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v8)
    {
LABEL_19:
      BOOL is_expensive = 0;
      goto LABEL_24;
    }
LABEL_18:
    free(v8);
    goto LABEL_19;
  }
  id v3 = (void *)*((void *)v1 + 2);
  if (v3)
  {
    id v4 = nw_connection_copy_connected_path(v3);
    id v5 = v4;
    if (v4)
    {
      BOOL is_expensive = nw_path_is_expensive(v4);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v16 = (id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        char v23 = "tcp_connection_is_expensive";
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s No connected path", buf, 0xCu);
      }

      BOOL is_expensive = 0;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      char v23 = "tcp_connection_is_expensive";
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    BOOL is_expensive = 0;
  }
LABEL_24:

  return is_expensive;
}

char *tcp_connection_copy_description(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v19 = "tcp_connection_copy_description";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "tcp_connection_copy_description";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v19 = "tcp_connection_copy_description";
            __int16 v20 = 2082;
            __int16 v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v7) {
            goto LABEL_26;
          }
          goto LABEL_25;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "tcp_connection_copy_description";
          _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "tcp_connection_copy_description";
          _os_log_impl(&dword_1830D4000, v8, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v7)
    {
LABEL_26:
      id v5 = 0;
      goto LABEL_27;
    }
LABEL_25:
    free(v7);
    goto LABEL_26;
  }
  id v3 = (void *)*((void *)v1 + 2);
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v19 = "tcp_connection_copy_description";
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    goto LABEL_26;
  }
  id v4 = v3;
  id v5 = nw_connection_copy_description_level(v4, 1);

LABEL_27:
  return v5;
}

void sub_1838B0738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void tcp_connection_get_counts(void *a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_connection_get_counts";
    os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v33[0] = 0;
    if (__nwlog_fault((const char *)v9, type, v33))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v11 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "tcp_connection_get_counts";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v33[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v14 = type[0];
        BOOL v15 = os_log_type_enabled(v10, type[0]);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "tcp_connection_get_counts";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v9) {
            goto LABEL_28;
          }
LABEL_13:
          free(v9);
          goto LABEL_28;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "tcp_connection_get_counts";
          _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v17 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "tcp_connection_get_counts";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v9) {
      goto LABEL_28;
    }
    goto LABEL_13;
  }
  if (v3[2])
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x1B810000000;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    char v38 = &unk_18405C45D;
    uint64_t v64 = 0;
    *(void *)os_log_type_t type = 0;
    char v30 = type;
    uint64_t v31 = 0x2020000000;
    char v32 = 0;
    if (a2)
    {
      *(_OWORD *)(a2 + 80) = 0uLL;
      *(_OWORD *)(a2 + 96) = 0uLL;
      *(_OWORD *)(a2 + 48) = 0uLL;
      *(_OWORD *)(a2 + 64) = 0uLL;
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      id v5 = nw_connection_copy_tcp_info(v3[2]);
      id v6 = v5;
      if (v5)
      {
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = __tcp_connection_get_counts_block_invoke;
        applier[3] = &unk_1E523FC60;
        void applier[4] = buf;
        applier[5] = type;
        xpc_dictionary_apply(v5, applier);
        if (*((unsigned char *)v30 + 24))
        {
          id v7 = *(void **)&buf[8];
          *(void *)(a2 + 8) = *(void *)(*(void *)&buf[8] + 140);
          *(void *)(a2 + 24) = *(void *)((char *)v7 + 108);
          *(_DWORD *)(a2 + 80) = *(void *)((char *)v7 + 148);
          *(_DWORD *)(a2 + 88) = *(void *)((char *)v7 + 116);
          *(void *)(a2 + 92) = 0x100000001;
          *(void *)(a2 + 104) = v7[7];
          *(void *)(a2 + 48) = v7[27];
          *(void *)(a2 + 56) = v7[29];
          *(void *)(a2 + 32) = v7[23];
          *(void *)(a2 + 40) = v7[25];
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v16 = (id)gLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v33 = 136446210;
          __int16 v34 = "tcp_connection_get_counts";
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s Could not retreive TCP info", v33, 0xCu);
        }
      }
LABEL_27:
      _Block_object_dispose(type, 8);
      _Block_object_dispose(buf, 8);
      goto LABEL_28;
    }
    BOOL v18 = __nwlog_obj();
    *(_DWORD *)char v33 = 136446210;
    __int16 v34 = "tcp_connection_get_counts";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v28 = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v19, &v28, &v27))
    {
      if (v28 == OS_LOG_TYPE_FAULT)
      {
        __int16 v20 = __nwlog_obj();
        os_log_type_t v21 = v28;
        if (os_log_type_enabled(v20, v28))
        {
          *(_DWORD *)char v33 = 136446210;
          __int16 v34 = "tcp_connection_get_counts";
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null counts", v33, 0xCu);
        }
      }
      else if (v27)
      {
        uint64_t v22 = (char *)__nw_create_backtrace_string();
        __int16 v20 = __nwlog_obj();
        os_log_type_t v23 = v28;
        BOOL v24 = os_log_type_enabled(v20, v28);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)char v33 = 136446466;
            __int16 v34 = "tcp_connection_get_counts";
            __int16 v35 = 2082;
            uint64_t v36 = v22;
            _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null counts, dumping backtrace:%{public}s", v33, 0x16u);
          }

          free(v22);
          goto LABEL_51;
        }
        if (v24)
        {
          *(_DWORD *)char v33 = 136446210;
          __int16 v34 = "tcp_connection_get_counts";
          _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null counts, no backtrace", v33, 0xCu);
        }
      }
      else
      {
        __int16 v20 = __nwlog_obj();
        os_log_type_t v25 = v28;
        if (os_log_type_enabled(v20, v28))
        {
          *(_DWORD *)char v33 = 136446210;
          __int16 v34 = "tcp_connection_get_counts";
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null counts, backtrace limit exceeded", v33, 0xCu);
        }
      }
    }
LABEL_51:
    if (v19) {
      free(v19);
    }
    goto LABEL_27;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v12 = (id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "tcp_connection_get_counts";
    _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
  }

LABEL_28:
}

void sub_1838B0ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t __tcp_connection_get_counts_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F14580] && xpc_data_get_length(v4) == 408 && xpc_data_get_bytes_ptr(v4))
  {
    id v5 = (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 32);
    bytes_ptr = xpc_data_get_bytes_ptr(v4);
    memcpy(v5, bytes_ptr, 0x198uLL);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136446210;
      os_log_type_t v10 = "tcp_connection_get_counts_block_invoke";
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s TCP info has invalid data", (uint8_t *)&v9, 0xCu);
    }
  }
  return 0;
}

void tcp_connection_retry(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "tcp_connection_retry";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "tcp_connection_retry";
        id v8 = "%{public}s called with null connection";
LABEL_21:
        BOOL v13 = v6;
        os_log_type_t v14 = v7;
        goto LABEL_22;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "tcp_connection_retry";
        id v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v12)
        {
LABEL_23:

          if (!v5) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "tcp_connection_retry";
        id v8 = "%{public}s called with null connection, no backtrace";
        BOOL v13 = v6;
        os_log_type_t v14 = v11;
LABEL_22:
        _os_log_impl(&dword_1830D4000, v13, v14, v8, buf, 0xCu);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v18 = "tcp_connection_retry";
        __int16 v19 = 2082;
        __int16 v20 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5) {
      goto LABEL_18;
    }
LABEL_17:
    free(v5);
    goto LABEL_18;
  }
  id v3 = v1[2];
  if (v3)
  {
    nw_connection_restart(v3);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v18 = "tcp_connection_retry";
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }
  }
LABEL_18:
}

void tcp_connection_set_connection_attempt_timeout(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)(a1 + 104) = a2;
    *(unsigned char *)(a1 + 158) |= 0x40u;
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v2 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  char v15 = "tcp_connection_set_connection_attempt_timeout";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v3, &type, &v12))
  {
LABEL_12:
    if (!v3) {
      return;
    }
    goto LABEL_13;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_19;
    }
    *(_DWORD *)buf = 136446210;
    char v15 = "tcp_connection_set_connection_attempt_timeout";
    id v6 = "%{public}s called with null connection";
LABEL_17:
    os_log_type_t v10 = v4;
    os_log_type_t v11 = v5;
LABEL_18:
    _os_log_impl(&dword_1830D4000, v10, v11, v6, buf, 0xCu);
    goto LABEL_19;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_19;
    }
    *(_DWORD *)buf = 136446210;
    char v15 = "tcp_connection_set_connection_attempt_timeout";
    id v6 = "%{public}s called with null connection, backtrace limit exceeded";
    goto LABEL_17;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  os_log_type_t v8 = type;
  BOOL v9 = os_log_type_enabled(v4, type);
  if (backtrace_string)
  {
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      char v15 = "tcp_connection_set_connection_attempt_timeout";
      __int16 v16 = 2082;
      os_log_type_t v17 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v4, v8, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
    goto LABEL_12;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136446210;
    char v15 = "tcp_connection_set_connection_attempt_timeout";
    id v6 = "%{public}s called with null connection, no backtrace";
    os_log_type_t v10 = v4;
    os_log_type_t v11 = v8;
    goto LABEL_18;
  }
LABEL_19:

  if (v3) {
LABEL_13:
  }
    free(v3);
}

void tcp_connection_set_tfo(uint64_t a1, BOOL a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "tcp_connection_set_tfo";
    id v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "tcp_connection_set_tfo";
        os_log_type_t v7 = "%{public}s called with null connection";
LABEL_19:
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "tcp_connection_set_tfo";
        os_log_type_t v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "tcp_connection_set_tfo";
        os_log_type_t v7 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v16 = "tcp_connection_set_tfo";
        __int16 v17 = 2082;
        uint64_t v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  id v2 = *(void **)(a1 + 48);

  nw_parameters_set_tfo(v2, a2);
}

void tcp_connection_set_extended_background_idle(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v2 = (id)gLogObj;
  id v3 = v2;
  if (!a1)
  {
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "tcp_connection_set_extended_background_idle";
    id v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "tcp_connection_set_extended_background_idle";
        os_log_type_t v7 = "%{public}s called with null connection";
LABEL_19:
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "tcp_connection_set_extended_background_idle";
        os_log_type_t v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "tcp_connection_set_extended_background_idle";
        os_log_type_t v7 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v16 = "tcp_connection_set_extended_background_idle";
        __int16 v17 = 2082;
        uint64_t v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "tcp_connection_set_extended_background_idle";
    _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s Extended background idle not supported", buf, 0xCu);
  }
}

void tcp_connection_set_receive_any_interface(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "tcp_connection_set_receive_any_interface";
    id v4 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "tcp_connection_set_receive_any_interface";
        os_log_type_t v7 = "%{public}s called with null connection";
LABEL_19:
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_20;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v5 = (id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "tcp_connection_set_receive_any_interface";
        os_log_type_t v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_19;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v5 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_21:

          if (!v4) {
            return;
          }
LABEL_15:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "tcp_connection_set_receive_any_interface";
        os_log_type_t v7 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v9;
LABEL_20:
        _os_log_impl(&dword_1830D4000, v11, v12, v7, buf, 0xCu);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v16 = "tcp_connection_set_receive_any_interface";
        __int16 v17 = 2082;
        uint64_t v18 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4) {
      return;
    }
    goto LABEL_15;
  }
  id v2 = *(void **)(a1 + 48);

  nw_parameters_set_receive_any_interface(v2, a2);
}

void tcp_connection_set_ecn_enabled(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "tcp_connection_set_ecn_enabled";
    os_log_type_t v5 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault((const char *)v5, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "tcp_connection_set_ecn_enabled";
        os_log_type_t v8 = "%{public}s called with null connection";
LABEL_22:
        os_log_type_t v12 = v6;
        os_log_type_t v13 = v7;
        goto LABEL_23;
      }
      if (!v14)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "tcp_connection_set_ecn_enabled";
        os_log_type_t v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_24:

          if (!v5) {
            return;
          }
LABEL_18:
          free(v5);
          return;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "tcp_connection_set_ecn_enabled";
        os_log_type_t v8 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v12 = v6;
        os_log_type_t v13 = v10;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v12, v13, v8, buf, 0xCu);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v17 = "tcp_connection_set_ecn_enabled";
        __int16 v18 = 2082;
        uint64_t v19 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5) {
      return;
    }
    goto LABEL_18;
  }
  id v2 = *(void **)(a1 + 48);
  if (a2) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = 2;
  }

  nw_parameters_set_ecn_mode(v2, v3);
}

uint64_t tcp_connection_get_statistics(void *a1, uint64_t a2, int *a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  os_log_type_t v5 = v4;
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v17 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    long long v39 = "tcp_connection_get_statistics";
    __int16 v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v18, &type, &v36)) {
      goto LABEL_24;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = (id)gLogObj;
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      long long v39 = "tcp_connection_get_statistics";
      uint64_t v21 = "%{public}s called with null connection";
    }
    else
    {
      if (v36)
      {
        backtrace_string = __nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = (id)gLogObj;
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            long long v39 = "tcp_connection_get_statistics";
            __int16 v40 = 2082;
            *(void *)long long v41 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          uint64_t v26 = (char *)backtrace_string;
          goto LABEL_23;
        }
        if (!v25)
        {
LABEL_32:

          if (!v18) {
            goto LABEL_26;
          }
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        long long v39 = "tcp_connection_get_statistics";
        uint64_t v21 = "%{public}s called with null connection, no backtrace";
        os_log_type_t v28 = v19;
        os_log_type_t v29 = v24;
LABEL_31:
        _os_log_impl(&dword_1830D4000, v28, v29, v21, buf, 0xCu);
        goto LABEL_32;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = (id)gLogObj;
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      long long v39 = "tcp_connection_get_statistics";
      uint64_t v21 = "%{public}s called with null connection, backtrace limit exceeded";
    }
    os_log_type_t v28 = v19;
    os_log_type_t v29 = v20;
    goto LABEL_31;
  }
  os_log_type_t v6 = (void *)*((void *)v4 + 2);
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      long long v39 = "tcp_connection_get_statistics";
      uint64_t v22 = "%{public}s API Misuse: Function must be called after tcp_connection_start";
LABEL_16:
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, v22, buf, 0xCu);
    }
LABEL_17:

LABEL_26:
    uint64_t v16 = 0;
    goto LABEL_27;
  }
  if (!a3)
  {
    char v30 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    long long v39 = "tcp_connection_get_statistics";
    __int16 v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v18, &type, &v36)) {
      goto LABEL_24;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v31 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        long long v39 = "tcp_connection_get_statistics";
        char v33 = "%{public}s called with null statistics";
LABEL_49:
        _os_log_impl(&dword_1830D4000, v31, v32, v33, buf, 0xCu);
        goto LABEL_50;
      }
      goto LABEL_50;
    }
    if (!v36)
    {
      uint64_t v31 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        long long v39 = "tcp_connection_get_statistics";
        char v33 = "%{public}s called with null statistics, backtrace limit exceeded";
        goto LABEL_49;
      }
LABEL_50:

LABEL_24:
      if (!v18) {
        goto LABEL_26;
      }
LABEL_25:
      free(v18);
      goto LABEL_26;
    }
    __int16 v34 = __nw_create_backtrace_string();
    uint64_t v31 = __nwlog_obj();
    os_log_type_t v32 = type;
    BOOL v35 = os_log_type_enabled(v31, type);
    if (!v34)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        long long v39 = "tcp_connection_get_statistics";
        char v33 = "%{public}s called with null statistics, no backtrace";
        goto LABEL_49;
      }
      goto LABEL_50;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      long long v39 = "tcp_connection_get_statistics";
      __int16 v40 = 2082;
      *(void *)long long v41 = v34;
      _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null statistics, dumping backtrace:%{public}s", buf, 0x16u);
    }

    uint64_t v26 = (char *)v34;
LABEL_23:
    free(v26);
    goto LABEL_24;
  }
  BOOL v7 = nw_connection_fillout_tcp_statistics(v6, (uint64_t)a3);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v8 = (id)gLogObj;
  os_log_type_t v9 = v8;
  if (!v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      long long v39 = "tcp_connection_get_statistics";
      uint64_t v22 = "%{public}s Failed to get statistics from connection";
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *a3;
    int v11 = a3[1];
    int v12 = a3[2];
    int v13 = a3[3];
    int v14 = a3[4];
    int v15 = a3[5];
    *(_DWORD *)buf = 136447746;
    long long v39 = "tcp_connection_get_statistics";
    __int16 v40 = 1024;
    *(_DWORD *)long long v41 = v10;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = v11;
    __int16 v42 = 1024;
    int v43 = v12;
    __int16 v44 = 1024;
    int v45 = v13;
    __int16 v46 = 1024;
    int v47 = v14;
    __int16 v48 = 1024;
    int v49 = v15;
    _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s DNS: %ums/%ums since start, TCP: %ums/%ums since start, TLS: %ums/%ums since start", buf, 0x30u);
  }

  uint64_t v16 = 1;
LABEL_27:

  return v16;
}

void tcp_connection_log_event(void *a1, char *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  os_log_type_t v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "tcp_connection_log_event";
    int v10 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault((const char *)v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "tcp_connection_log_event";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v11 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v22 = "tcp_connection_log_event";
            __int16 v23 = 2082;
            os_log_type_t v24 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v10) {
            goto LABEL_27;
          }
LABEL_12:
          free(v10);
          goto LABEL_27;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "tcp_connection_log_event";
          _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v11 = (id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "tcp_connection_log_event";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v10) {
      goto LABEL_27;
    }
    goto LABEL_12;
  }
  BOOL v7 = (void *)v5[2];
  if (v7)
  {
    if (a2 == (char *)1)
    {
      int v8 = 2;
      goto LABEL_23;
    }
    if (!a2)
    {
      int v8 = 1;
LABEL_23:
      nw_connection_add_client_event_internal(v7, v8, v6, 0);
      goto LABEL_27;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "tcp_connection_log_event";
      __int16 v23 = 2048;
      os_log_type_t v24 = a2;
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, "%{public}s Invalid log event %lld", buf, 0x16u);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v13 = (id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "tcp_connection_log_event";
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }
  }
LABEL_27:
}

void __nw_write_request_create_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
  (*(void (**)(uint64_t))(v1 + 16))(v1);
}

void sub_1838B4E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_33176()
{
  BOOL result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

NWConcrete_nw_write_request *nw_write_request_create_clone(void *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if (((_BYTE)v1[16] & 4) != 0)
  {
    id v6 = objc_alloc_init(NWConcrete_nw_write_request);
    BOOL v7 = v6;
    if (v6)
    {
      p_data = (dispatch_data_t *)&v6->data;
      objc_storeStrong((id *)&v6->data, v1[7]);
      objc_storeStrong((id *)&v7->context, v1[8]);
      char v9 = (_BYTE)v1[16] & 1 | *((unsigned char *)v7 + 128) & 0xFE | 4;
      *((unsigned char *)v7 + 128) = v9;
      *(void *)&v7->relative_priority = v1[15];
      *((unsigned char *)v7 + 128) = (_BYTE)v1[16] & 8 | v9 & 0xF7;
      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_33173);
      }
      if (_nw_signposts_enabled && kdebug_is_enabled())
      {
        if (*p_data) {
          dispatch_data_get_size(*p_data);
        }
        CFRunLoopTimerContext context = v7->context;
        if (context) {
          nw_content_context_get_is_final(context);
        }
        kdebug_trace();
      }
      int v10 = v7;
      goto LABEL_47;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_write_request_create_clone";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v15, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = (id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v28 = "nw_write_request_create_clone";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed", buf, 0xCu);
        }
      }
      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = (id)gLogObj;
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v28 = "nw_write_request_create_clone";
            __int16 v29 = 2082;
            char v30 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v16, v20, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v15) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v28 = "nw_write_request_create_clone";
          _os_log_impl(&dword_1830D4000, v16, v20, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = (id)gLogObj;
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v28 = "nw_write_request_create_clone";
          _os_log_impl(&dword_1830D4000, v16, v22, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v15)
    {
LABEL_47:

      goto LABEL_48;
    }
LABEL_46:
    free(v15);
    goto LABEL_47;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v2 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v28 = "nw_write_request_create_clone";
  unsigned int v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v3, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v4 = (id)gLogObj;
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_write_request_create_clone";
        _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s Only idempotent write requests may be cloned", buf, 0xCu);
      }
    }
    else if (v25)
    {
      int v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v4 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v4, type);
      if (v11)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_write_request_create_clone";
          __int16 v29 = 2082;
          char v30 = v11;
          _os_log_impl(&dword_1830D4000, v4, v12, "%{public}s Only idempotent write requests may be cloned, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v11);
        if (!v3) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_write_request_create_clone";
        _os_log_impl(&dword_1830D4000, v4, v12, "%{public}s Only idempotent write requests may be cloned, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v4 = (id)gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_write_request_create_clone";
        _os_log_impl(&dword_1830D4000, v4, v18, "%{public}s Only idempotent write requests may be cloned, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v3) {
LABEL_37:
  }
    free(v3);
LABEL_38:
  BOOL v7 = 0;
LABEL_48:

  return v7;
}

void sub_1838B54F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_write_request_create_with_file_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
  (*(void (**)(uint64_t, void, void))(v1 + 16))(v1, 0, 0);
}

void sub_1838B5588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

size_t nw_write_request_remaining_bytes(void *a1)
{
  uint64_t v1 = a1;
  id v2 = v1[7];
  uint64_t v3 = v1[9];
  if (!v2)
  {
    if (!v3)
    {
      size_t v6 = 0;
      goto LABEL_9;
    }
    goto LABEL_5;
  }
  if (v3)
  {
LABEL_5:
    size_t size = v1[12];
    goto LABEL_6;
  }
  size_t size = dispatch_data_get_size(v2);
LABEL_6:
  size_t v5 = v1[14];
  if (size <= v5) {
    size_t v5 = 0;
  }
  size_t v6 = size - v5;
LABEL_9:

  return v6;
}

void ___ZL35nw_write_request_start_file_updatesP27NWConcrete_nw_write_request_block_invoke(uint64_t a1)
{
  id WeakRetained = (const void **)objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = _Block_copy(WeakRetained[4]);
    id v4 = v3;
    if (v3)
    {
      size_t v5 = (void *)v2[5];
      dispatch_qos_class_t v6 = *((_DWORD *)v2 + 12);
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      v7[2] = ___ZL35nw_write_request_start_file_updatesP27NWConcrete_nw_write_request_block_invoke_2;
      v7[3] = &unk_1E524B950;
      id v9 = v3;
      int v8 = v2;
      nw_connection_async_client_if_needed_with_override(v5, 0, v6, v7);
    }
  }
}

void sub_1838B56E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL35nw_write_request_start_file_updatesP27NWConcrete_nw_write_request_block_invoke_2(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))() & 1) == 0)
  {
    id v2 = *(void **)(a1 + 32);
    uint64_t v3 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
    nw_write_request_report_error_with_override(v2, 0, v3);
  }
}

void sub_1838B57A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL23nw_write_request_reportP27NWConcrete_nw_write_requestPU28objcproto17OS_dispatch_queue8NSObjectPU22objcproto11OS_nw_errorS1__block_invoke_96(void *a1)
{
  return (*(uint64_t (**)(void, void, BOOL))(a1[6] + 16))(a1[6], *(void *)(a1[4] + 112), a1[5] == 0);
}

void nw_write_request_fail(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (v3)
  {
    if (a2) {
      posix_error = nw_error_create_posix_error(a2);
    }
    else {
      posix_error = 0;
    }
    nw_write_request_report(v3, 0, posix_error);

    goto LABEL_6;
  }
  size_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_write_request_fail";
  dispatch_qos_class_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_write_request_fail";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null request", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_write_request_fail";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_write_request_fail";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null request, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_write_request_fail";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v6) {
    free(v6);
  }
LABEL_6:
}

void sub_1838B5A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t nw_write_request_remaining_datagram_count(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = (uint64_t *)v1;
    if (*((void *)v1 + 7)) {
      unint64_t v3 = !nw_content_context_is_blocked_by_antecedents(*((void **)v1 + 8));
    }
    else {
      unint64_t v3 = 0;
    }
    size_t v5 = v2 + 1;
    uint64_t v4 = v2[1];
    if (v4)
    {
      do
      {
        uint64_t v6 = *(void *)(v4 + 56);
        if (v6)
        {
          uint64_t v6 = !nw_content_context_is_blocked_by_antecedents(*(void **)(v4 + 64));
          uint64_t v4 = *v5;
        }
        v3 += v6;
        BOOL v7 = (uint64_t *)(id)v4;

        size_t v5 = v7 + 1;
        uint64_t v4 = v7[1];
        if (!v4) {
          break;
        }
        id v2 = v7;
      }
      while (v3 < 0x100);
    }
    else
    {
      BOOL v7 = v2;
    }
    goto LABEL_12;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v20 = "nw_write_request_remaining_datagram_count";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_write_request_remaining_datagram_count";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null request", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v20 = "nw_write_request_remaining_datagram_count";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_write_request_remaining_datagram_count";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null request, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_write_request_remaining_datagram_count";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_29:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
  unint64_t v3 = 0;
LABEL_12:

  return v3;
}

uint64_t __nw_write_request_copy_data_from_fd_block_invoke(uint64_t a1, int a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = read(a2, *(void **)(a1 + 40), *(void *)(a1 + 48));
  return 1;
}

void ___ZL35nw_write_request_coalesce_with_nextP27NWConcrete_nw_write_requestS0__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1838B5E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

char **nw_protocol_http_encoding_create(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char **)malloc_type_calloc(1uLL, 0x290uLL, 0xEAFB8F1AuLL);
  if (!v6)
  {
    __int16 v21 = __nwlog_obj();
    os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    char v33 = "strict_calloc";
    __int16 v34 = 2048;
    uint64_t v35 = 1;
    __int16 v36 = 2048;
    uint64_t v37 = 656;
    os_log_type_t v22 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v22))
    {
LABEL_54:
      __break(1u);
      JUMPOUT(0x1838B6758);
    }
    free(v22);
  }
  bzero(v6, 0x290uLL);
  if (gLogDatapath)
  {
    uint64_t v23 = __nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      char v33 = "nw_protocol_http_encoding_create";
      __int16 v34 = 2082;
      uint64_t v35 = (uint64_t)v6 + 114;
      __int16 v36 = 2080;
      uint64_t v37 = (uint64_t)" ";
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (nw_protocol_http_encoding_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_encoding_identifier::onceToken, &__block_literal_global_33402);
  }
  v6[2] = (char *)nw_protocol_http_encoding_identifier::protocol_identifier;
  if (nw_protocol_http_encoding_get_callbacks(void)::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_encoding_get_callbacks(void)::onceToken, &__block_literal_global_20_33403);
  }
  v6[3] = (char *)&nw_protocol_http_encoding_get_callbacks(void)::protocol_callbacks;
  void v6[5] = (char *)v6;
  if (a3) {
    a3 = os_retain(a3);
  }
  char v7 = *((unsigned char *)v6 + 520);
  if (v7)
  {
    os_log_type_t v8 = v6[64];
    if (v8)
    {
      os_release(v8);
      char v7 = *((unsigned char *)v6 + 520);
    }
  }
  v6[64] = (char *)a3;
  *((unsigned char *)v6 + 520) = v7 | 1;
  if (a4)
  {
    id v9 = (char *)os_retain(a4);
    char v10 = *((unsigned char *)v6 + 536);
    if ((v10 & 1) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    id v9 = 0;
    char v10 = *((unsigned char *)v6 + 536);
    if ((v10 & 1) == 0) {
      goto LABEL_18;
    }
  }
  BOOL v11 = v6[66];
  if (v11)
  {
    os_release(v11);
    char v10 = *((unsigned char *)v6 + 536);
  }
LABEL_18:
  v6[66] = v9;
  *((unsigned char *)v6 + 536) = v10 | 1;
  *((_WORD *)v6 + 324) = (_WORD)v6[81] & 0xFFFE | nw_parameters_get_server_mode(a4);
  v6[70] = 0;
  v6[71] = (char *)(v6 + 70);
  v6[72] = 0;
  v6[73] = (char *)(v6 + 72);
  v6[74] = 0;
  v6[75] = (char *)(v6 + 74);
  v6[76] = 0;
  v6[77] = (char *)(v6 + 76);
  v6[78] = 0;
  v6[79] = (char *)(v6 + 78);
  nw_frame_cache_init((uint64_t)(v6 + 54), (uint64_t)v6, 256, 0x40000, 0);
  if (nw_protocol_copy_http_encoding_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_38);
  }
  id v12 = (id)nw_protocol_copy_http_encoding_definition_http_encoding_definition;
  char v13 = nw_parameters_copy_protocol_options_for_definition(a4, v12);
  int type = nw_http_encoding_options_get_type(v13);
  *((_DWORD *)v6 + 160) = type;
  switch(type)
  {
    case 2:
      BOOL v15 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0xEAFB8F1AuLL);
      if (v15) {
        goto LABEL_22;
      }
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      char v33 = "strict_calloc";
      __int16 v34 = 2048;
      uint64_t v35 = 1;
      __int16 v36 = 2048;
      uint64_t v37 = 128;
      char v25 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v25)) {
        goto LABEL_54;
      }
      free(v25);
LABEL_22:
      *(void *)BOOL v15 = &unk_1ECF609F0;
      *((_DWORD *)v15 + 30) = 31;
      os_log_type_t v16 = (z_stream *)(v15 + 8);
      int v17 = 31;
      goto LABEL_27;
    case 3:
      BOOL v15 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0xEAFB8F1AuLL);
      if (v15) {
        goto LABEL_26;
      }
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      char v33 = "strict_calloc";
      __int16 v34 = 2048;
      uint64_t v35 = 1;
      __int16 v36 = 2048;
      uint64_t v37 = 128;
      __int16 v29 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v29)) {
        goto LABEL_54;
      }
      free(v29);
LABEL_26:
      *(void *)BOOL v15 = &unk_1ECF609F0;
      *((_DWORD *)v15 + 30) = 15;
      os_log_type_t v16 = (z_stream *)(v15 + 8);
      int v17 = 15;
      goto LABEL_27;
    case 4:
      BOOL v15 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0xEAFB8F1AuLL);
      if (v15) {
        goto LABEL_24;
      }
      uint64_t v26 = __nwlog_obj();
      os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      char v33 = "strict_calloc";
      __int16 v34 = 2048;
      uint64_t v35 = 1;
      __int16 v36 = 2048;
      uint64_t v37 = 128;
      char v27 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v27)) {
        goto LABEL_54;
      }
      free(v27);
LABEL_24:
      *(void *)BOOL v15 = &unk_1ECF609F0;
      *((_DWORD *)v15 + 30) = -15;
      os_log_type_t v16 = (z_stream *)(v15 + 8);
      int v17 = -15;
LABEL_27:
      deflateInit2_(v16, -1, 8, v17, 8, 0, "1.2.12", 112);
      break;
    case 5:
      BOOL v15 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL);
      if (v15) {
        goto LABEL_29;
      }
      char v30 = __nwlog_obj();
      os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      char v33 = "strict_calloc";
      __int16 v34 = 2048;
      uint64_t v35 = 1;
      __int16 v36 = 2048;
      uint64_t v37 = 48;
      uint64_t v31 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v31)) {
        goto LABEL_54;
      }
      free(v31);
LABEL_29:
      *(void *)BOOL v15 = &unk_1ECF60A40;
      if (compression_stream_init((compression_stream *)(v15 + 8), COMPRESSION_STREAM_ENCODE, COMPRESSION_BROTLI))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          char v33 = "brotli_encoder";
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s init failed", buf, 0xCu);
        }
      }
      break;
    default:
      BOOL v15 = 0;
      break;
  }
  uint64_t v19 = v6[69];
  if (v19 != v15)
  {
    if (v19)
    {
      (**(void (***)(char *))v19)(v6[69]);
      free(v19);
    }
    v6[69] = v15;
  }
  v6[8] = (char *)(v6 + 13);
  nw_protocol_plugin_name_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_encoding_create::$_0::__invoke);
  v6[10] = (char *)(v6 + 25);
  nw_protocol_plugin_reset_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_encoding_create::$_1::__invoke);
  v6[11] = (char *)(v6 + 27);
  nw_protocol_plugin_retry_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_encoding_create::$_2::__invoke, (uint64_t)nw_protocol_http_encoding_create::$_3::__invoke, (uint64_t)nw_protocol_http_encoding_create::$_4::__invoke, (uint64_t)nw_protocol_http_encoding_create::$_5::__invoke);
  if (v13) {
    os_release(v13);
  }
  if (v12) {
    os_release(v12);
  }
  return v6;
}

uint64_t nw_protocol_http_encoding_create::$_5::__invoke(nw_protocol_http_encoding_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    char v7 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, type, &v20)) {
      goto LABEL_46;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type[0];
      if (!os_log_type_enabled(v8, type[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      char v10 = "%{public}s called with null protocol";
      goto LABEL_45;
    }
    if (!v20)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type[0];
      if (!os_log_type_enabled(v8, type[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      char v10 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = type[0];
    BOOL v12 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (!v12) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      char v10 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_45;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_46:
    if (!v7) {
      return 1;
    }
LABEL_47:
    free(v7);
    return 1;
  }
  uint64_t v3 = *((void *)this + 5);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    char v7 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, type, &v20)) {
      goto LABEL_46;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type[0];
      if (!os_log_type_enabled(v8, type[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      char v10 = "%{public}s called with null http_encoding";
      goto LABEL_45;
    }
    if (!v20)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type[0];
      if (!os_log_type_enabled(v8, type[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      char v10 = "%{public}s called with null http_encoding, backtrace limit exceeded";
      goto LABEL_45;
    }
    char v13 = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = type[0];
    BOOL v14 = os_log_type_enabled(v8, type[0]);
    if (v13)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "operator()";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v13;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null http_encoding, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v13);
      if (!v7) {
        return 1;
      }
      goto LABEL_47;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "operator()";
      char v10 = "%{public}s called with null http_encoding, no backtrace";
LABEL_45:
      _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      goto LABEL_46;
    }
    goto LABEL_46;
  }
  if (a3 != 96) {
    return 1;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3802000000;
  os_log_type_t v22 = __Block_byref_object_copy__33414;
  uint64_t v23 = __Block_byref_object_dispose__33415;
  dispatch_object_t object = 0;
  char v25 = -1;
  uint64_t v4 = (atomic_uchar *)nw_protocol_copy_info(*(void *)(v3 + 32), 255);
  *(void *)int type = MEMORY[0x1E4F143A8];
  uint64_t v16 = 0x40000000;
  int v17 = ___ZZ32nw_protocol_http_encoding_createENK3__5clEP11nw_protocolS1_i_block_invoke;
  os_log_type_t v18 = &unk_1E523FE10;
  uint64_t v19 = buf;
  nw_array_apply(v4, (uint64_t)type);
  size_t v5 = *(void **)(*(void *)&buf[8] + 40);
  if (!v5 || nw_http_connection_metadata_get_version(v5) != 3)
  {
    if (v4) {
      os_release(v4);
    }
    _Block_object_dispose(buf, 8);
    if ((v25 & 1) != 0 && object) {
      os_release(object);
    }
    return 1;
  }
  *(_WORD *)(v3 + 648) |= 0x100u;
  nw_http_encoding_check_http1_content_length(v3);
  if (v4) {
    os_release(v4);
  }
  _Block_object_dispose(buf, 8);
  if (v25)
  {
    if (object) {
      os_release(object);
    }
  }
  return 0;
}

uint64_t __Block_byref_object_copy__33414(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__33415(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

BOOL ___ZZ32nw_protocol_http_encoding_createENK3__5clEP11nw_protocolS1_i_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3;
  BOOL is_http_connection = nw_protocol_metadata_is_http_connection(a3);
  if (is_http_connection)
  {
    if (v3) {
      uint64_t v3 = os_retain(v3);
    }
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    char v7 = *(unsigned char *)(v6 + 48);
    if (v7)
    {
      os_log_type_t v8 = *(void **)(v6 + 40);
      if (v8)
      {
        os_release(v8);
        char v7 = *(unsigned char *)(v6 + 48);
      }
    }
    *(void *)(v6 + 40) = v3;
    *(unsigned char *)(v6 + 48) = v7 | 1;
  }
  return !is_http_connection;
}

void nw_http_encoding_check_http1_content_length(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((~*(unsigned __int16 *)(a1 + 648) & 0x180) == 0)
  {
    id v2 = *(void **)(a1 + 496);
    if (!v2) {
      goto LABEL_13;
    }
    id v3 = nw_http_metadata_copy_response(v2);
    uint64_t v8 = 0;
    os_log_type_t v9 = &v8;
    uint64_t v10 = 0x2000000000;
    uint64_t v11 = -1;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    v7[2] = ___ZL43nw_http_encoding_check_http1_content_lengthP25nw_protocol_http_encoding_block_invoke;
    v7[3] = &unk_1E523FE38;
    void v7[4] = &v8;
    nw_http_fields_access_value_by_name(v3, (unint64_t)"Content-Length", v7);
    uint64_t v4 = v9[3];
    if (v4 == -1 || v4 != *(void *)(a1 + 472))
    {
      int v6 = 1;
    }
    else
    {
      if ((*(unsigned char *)(a1 + 198) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v5 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          char v13 = "nw_http_encoding_check_http1_content_length";
          __int16 v14 = 2082;
          uint64_t v15 = a1 + 114;
          __int16 v16 = 2080;
          int v17 = " ";
          _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%saccepting invalid Content-Length matching decompressed body", buf, 0x20u);
        }
      }
      int v6 = 0;
    }
    _Block_object_dispose(&v8, 8);
    if (v3) {
      os_release(v3);
    }
    if (v6) {
LABEL_13:
    }
      nw_protocol_error(*(void **)(a1 + 48), a1);
  }
}

void ___ZL43nw_http_encoding_check_http1_content_lengthP25nw_protocol_http_encoding_block_invoke(uint64_t a1, char *__s)
{
  if (__s)
  {
    size_t v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v7 = v4 | 7;
      }
      uint64_t v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_10:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = std::stoull(&__dst, 0, 10);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    memcpy(p_dst, __s, v5);
    goto LABEL_10;
  }
}

uint64_t nw_protocol_http_encoding_create::$_4::__invoke(nw_protocol_http_encoding_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_encoding_create::$_3::__invoke(nw_protocol_http_encoding_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_encoding_create::$_2::__invoke(nw_protocol_http_encoding_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    uint64_t v3 = *((void *)this + 5);
    if (v3)
    {
      uint64_t result = 0;
      *(_WORD *)(v3 + 648) |= 0x40u;
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "operator()";
    std::string::size_type v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "operator()";
        uint64_t v8 = "%{public}s called with null http_encoding";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v13)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "operator()";
        uint64_t v8 = "%{public}s called with null http_encoding, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "operator()";
        uint64_t v8 = "%{public}s called with null http_encoding, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v16 = "operator()";
      __int16 v17 = 2082;
      uint64_t v18 = backtrace_string;
      uint64_t v11 = "%{public}s called with null http_encoding, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "operator()";
  std::string::size_type v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v13)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "operator()";
        uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "operator()";
        uint64_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v16 = "operator()";
      __int16 v17 = 2082;
      uint64_t v18 = backtrace_string;
      uint64_t v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v6, v7, v11, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  int v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "operator()";
    uint64_t v8 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
  }
LABEL_32:
  if (v5) {
    free(v5);
  }
  return 1;
}

void nw_protocol_http_encoding_create::$_1::__invoke(nw_protocol_http_encoding_create::$_1 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "operator()";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "operator()";
      char v13 = "%{public}s called with null protocol";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v21 = "operator()";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_42:
        if (!v10) {
          return;
        }
LABEL_43:
        free(v10);
        return;
      }
      if (!v15) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "operator()";
      char v13 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "operator()";
      char v13 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_41:
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    goto LABEL_42;
  }
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    char v4 = *(unsigned char *)(v3 + 488);
    if (v4)
    {
      std::string::size_type v5 = *(void **)(v3 + 480);
      if (v5)
      {
        os_release(v5);
        char v4 = *(unsigned char *)(v3 + 488);
      }
    }
    *(void *)(v3 + 480) = 0;
    *(unsigned char *)(v3 + 488) = v4 | 1;
    char v6 = *(unsigned char *)(v3 + 504);
    if (v6)
    {
      os_log_type_t v7 = *(void **)(v3 + 496);
      if (v7)
      {
        os_release(v7);
        char v6 = *(unsigned char *)(v3 + 504);
      }
    }
    *(void *)(v3 + 496) = 0;
    *(unsigned char *)(v3 + 504) = v6 | 1;
    uint64_t v8 = *(void (****)(void, nw_protocol *, nw_protocol *))(v3 + 544);
    if (v8)
    {
      (**v8)(*(void *)(v3 + 544), a2, a3);
      free(v8);
      *(void *)(v3 + 544) = 0;
    }
    os_log_type_t v9 = *(void (****)(void, nw_protocol *, nw_protocol *))(v3 + 552);
    if (v9)
    {
      (**v9)(*(void *)(v3 + 552), a2, a3);
      free(v9);
      *(void *)(v3 + 552) = 0;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v21 = "operator()";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (!__nwlog_fault(v10, &type, &v18)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "operator()";
    char v13 = "%{public}s called with null http_encoding";
    goto LABEL_41;
  }
  if (!v18)
  {
    uint64_t v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "operator()";
    char v13 = "%{public}s called with null http_encoding, backtrace limit exceeded";
    goto LABEL_41;
  }
  __int16 v16 = (char *)__nw_create_backtrace_string();
  uint64_t v11 = __nwlog_obj();
  os_log_type_t v12 = type;
  BOOL v17 = os_log_type_enabled(v11, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "operator()";
    char v13 = "%{public}s called with null http_encoding, no backtrace";
    goto LABEL_41;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v21 = "operator()";
    __int16 v22 = 2082;
    uint64_t v23 = v16;
    _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null http_encoding, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v16);
  if (v10) {
    goto LABEL_43;
  }
}

uint64_t nw_protocol_http_encoding_create::$_0::__invoke(nw_protocol_http_encoding_create::$_0 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

void ___ZL39nw_protocol_http_encoding_get_callbacksv_block_invoke()
{
  nw_protocol_http_encoding_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  qword_1E8F6AAC8 = (uint64_t)nw_protocol_common_replace_input_handler;
  qword_1E8F6AB10 = (uint64_t)nw_protocol_common_get_output_frames;
  qword_1E8F6AB28 = (uint64_t)nw_protocol_common_get_parameters;
  qword_1E8F6AB30 = (uint64_t)nw_protocol_common_get_path;
  qword_1E8F6AB40 = (uint64_t)nw_protocol_common_get_remote_endpoint;
  qword_1E8F6AB38 = (uint64_t)nw_protocol_common_get_local_endpoint;
  qword_1E8F6AB80 = (uint64_t)nw_protocol_common_get_output_local_endpoint;
  qword_1E8F6AB88 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1E8F6AAD0 = (uint64_t)nw_protocol_common_connect;
  qword_1E8F6AAE0 = (uint64_t)nw_protocol_common_connected;
  qword_1E8F6AAD8 = (uint64_t)nw_protocol_common_disconnect;
  qword_1E8F6AAE8 = (uint64_t)nw_protocol_common_disconnected;
  qword_1E8F6AAF8 = (uint64_t)nw_protocol_common_input_available;
  qword_1E8F6AB00 = (uint64_t)nw_protocol_common_output_available;
  qword_1E8F6AB70 = (uint64_t)nw_protocol_common_input_finished;
  qword_1E8F6AB78 = (uint64_t)nw_protocol_common_output_finished;
  qword_1E8F6ABC0 = (uint64_t)nw_protocol_common_input_flush;
  qword_1E8F6AAF0 = (uint64_t)nw_protocol_common_error;
  qword_1E8F6ABB8 = (uint64_t)nw_protocol_common_reset;
  qword_1E8F6ABB0 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1E8F6AB98 = (uint64_t)nw_protocol_common_copy_info;
  qword_1E8F6AB68 = (uint64_t)nw_protocol_common_supports_external_data;
  qword_1E8F6AB90 = (uint64_t)nw_protocol_common_waiting_for_output;
  qword_1E8F6AB48 = (uint64_t)nw_protocol_common_register_notification;
  qword_1E8F6AB50 = (uint64_t)nw_protocol_common_unregister_notification;
  qword_1E8F6AB58 = (uint64_t)nw_protocol_common_notify;
  qword_1E8F6AB60 = (uint64_t)nw_protocol_common_updated_path;
  qword_1E8F6AB20 = (uint64_t)nw_protocol_common_link_state;
  qword_1E8F6AB08 = (uint64_t)nw_protocol_http_encoding_get_input_frames;
  qword_1E8F6AB18 = (uint64_t)nw_protocol_http_encoding_finalize_output_frames;
  qword_1E8F6AAC0 = (uint64_t)nw_protocol_http_encoding_remove_input_handler;
}

uint64_t nw_protocol_http_encoding_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      void v15[2] = ___ZL46nw_protocol_http_encoding_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v15[3] = &__block_descriptor_tmp_57_33469;
      v15[4] = handle;
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 0x40000000;
      v13[2] = ___ZL46nw_protocol_http_encoding_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
      v13[3] = &__block_descriptor_tmp_58_33470;
      char v14 = a3;
      void v13[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v15, (uint64_t)v13);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_http_encoding_remove_input_handler";
    std::string::size_type v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v5, &v17, &v16)) {
      goto LABEL_32;
    }
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_encoding_remove_input_handler";
        uint64_t v8 = "%{public}s called with null http_encoding";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v16)
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_encoding_remove_input_handler";
        uint64_t v8 = "%{public}s called with null http_encoding, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v6 = __nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v12 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_encoding_remove_input_handler";
        uint64_t v8 = "%{public}s called with null http_encoding, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_http_encoding_remove_input_handler";
      __int16 v20 = 2082;
      __int16 v21 = backtrace_string;
      uint64_t v11 = "%{public}s called with null http_encoding, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_protocol_http_encoding_remove_input_handler";
  std::string::size_type v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v5, &v17, &v16)) {
    goto LABEL_32;
  }
  if (v17 != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_encoding_remove_input_handler";
        uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v6 = __nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v10 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_encoding_remove_input_handler";
        uint64_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_http_encoding_remove_input_handler";
      __int16 v20 = 2082;
      __int16 v21 = backtrace_string;
      uint64_t v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v6, v7, v11, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  char v6 = __nwlog_obj();
  os_log_type_t v7 = v17;
  if (os_log_type_enabled(v6, v17))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_http_encoding_remove_input_handler";
    uint64_t v8 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
  }
LABEL_32:
  if (v5) {
    free(v5);
  }
  return 0;
}

void ___ZL46nw_protocol_http_encoding_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)(*(void *)(a1 + 32) + 608);
  if (gLogDatapath)
  {
    BOOL v10 = __nwlog_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_33485;
  char v18 = (const char *)&__block_descriptor_tmp_41_33486;
  uint64_t v19 = v2;
  char v20 = 0;
  uint64_t v3 = *v2;
  do
  {
    if (!v3) {
      break;
    }
    uint64_t v4 = *(void *)(v3 + 32);
    char v5 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
    uint64_t v3 = v4;
  }
  while ((v5 & 1) != 0);
  uint64_t v6 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v6 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v11 = __nwlog_obj();
      BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
      uint64_t v6 = *(void *)(a1 + 32);
      if (v12)
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_remove_input_handler_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v6 + 114;
        *(_WORD *)&buf[22] = 2080;
        char v18 = " ";
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sremoving finalized_output_frames", buf, 0x20u);
        uint64_t v6 = *(void *)(a1 + 32);
      }
    }
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  char v14 = (uint64_t (*)(void *))___ZL46nw_protocol_http_encoding_remove_input_handlerP11nw_protocolS0_b_block_invoke_55;
  BOOL v15 = &__block_descriptor_tmp_56_33488;
  uint64_t v16 = v6;
  uint64_t v7 = *(void *)(v6 + 592);
  do
  {
    if (!v7) {
      break;
    }
    uint64_t v8 = *(void *)(v7 + 32);
    char v9 = v14(v13);
    uint64_t v7 = v8;
  }
  while ((v9 & 1) != 0);
  nw_frame_cache_remove_all((uint64_t *)(*(void *)(a1 + 32) + 432));
}

void ___ZL46nw_protocol_http_encoding_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 40)) {
    return;
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v1 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v31 = __nwlog_obj();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_encoding_destroy";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v1 + 114;
        *(_WORD *)&buf[22] = 2080;
        int v47 = " ";
        _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
  }
  if ((*(unsigned char *)(v1 + 198) & 1) == 0)
  {
    if (!gLogDatapath) {
      goto LABEL_6;
    }
    os_log_type_t v32 = __nwlog_obj();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_http_encoding_destroy";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v1 + 114;
      *(_WORD *)&buf[22] = 2080;
      int v47 = " ";
      _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sfinalizing frame arrays", buf, 0x20u);
    }
  }
  if (gLogDatapath)
  {
    char v33 = __nwlog_obj();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int16 v42 = 136446210;
      int v43 = "nw_protocol_finalize_master_frame_array";
      _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s called", v42, 0xCu);
    }
  }
LABEL_6:
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_33475;
  int v47 = (const char *)&__block_descriptor_tmp_59_33476;
  char v48 = 0;
  uint64_t v2 = *(void *)(v1 + 560);
  do
  {
    if (!v2) {
      break;
    }
    uint64_t v3 = *(void *)(v2 + 16);
    char v4 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
    uint64_t v2 = v3;
  }
  while ((v4 & 1) != 0);
  if (!*(void *)(v1 + 560)) {
    goto LABEL_10;
  }
  __nwlog_obj();
  *(_DWORD *)__int16 v42 = 136446210;
  int v43 = "nw_protocol_finalize_master_frame_array";
  os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v40 = 0;
  if (__nwlog_fault(v17, &type, &v40))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_85;
      }
      *(_DWORD *)__int16 v42 = 136446210;
      int v43 = "nw_protocol_finalize_master_frame_array";
      char v20 = "%{public}s frame array is not empty after finalize";
      goto LABEL_84;
    }
    if (!v40)
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_85;
      }
      *(_DWORD *)__int16 v42 = 136446210;
      int v43 = "nw_protocol_finalize_master_frame_array";
      char v20 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
      goto LABEL_84;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v35 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)__int16 v42 = 136446466;
        int v43 = "nw_protocol_finalize_master_frame_array";
        __int16 v44 = 2082;
        int v45 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", v42, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_85;
    }
    if (v35)
    {
      *(_DWORD *)__int16 v42 = 136446210;
      int v43 = "nw_protocol_finalize_master_frame_array";
      char v20 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_84:
      _os_log_impl(&dword_1830D4000, v18, v19, v20, v42, 0xCu);
    }
  }
LABEL_85:
  if (v17) {
    free(v17);
  }
LABEL_10:
  if (gLogDatapath)
  {
    uint64_t v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_finalize_master_frame_array";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_33475;
  int v47 = (const char *)&__block_descriptor_tmp_59_33476;
  char v48 = 0;
  uint64_t v5 = *(void *)(v1 + 576);
  do
  {
    if (!v5) {
      break;
    }
    uint64_t v6 = *(void *)(v5 + 16);
    char v7 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
    uint64_t v5 = v6;
  }
  while ((v7 & 1) != 0);
  if (*(void *)(v1 + 576))
  {
    __nwlog_obj();
    *(_DWORD *)__int16 v42 = 136446210;
    int v43 = "nw_protocol_finalize_master_frame_array";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v22, &type, &v40)) {
      goto LABEL_90;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_90;
      }
      *(_DWORD *)__int16 v42 = 136446210;
      int v43 = "nw_protocol_finalize_master_frame_array";
      char v25 = "%{public}s frame array is not empty after finalize";
    }
    else if (v40)
    {
      __int16 v36 = (char *)__nw_create_backtrace_string();
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v37 = os_log_type_enabled(v23, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)__int16 v42 = 136446466;
          int v43 = "nw_protocol_finalize_master_frame_array";
          __int16 v44 = 2082;
          int v45 = v36;
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", v42, 0x16u);
        }
        free(v36);
        goto LABEL_90;
      }
      if (!v37)
      {
LABEL_90:
        if (v22) {
          free(v22);
        }
        goto LABEL_15;
      }
      *(_DWORD *)__int16 v42 = 136446210;
      int v43 = "nw_protocol_finalize_master_frame_array";
      char v25 = "%{public}s frame array is not empty after finalize, no backtrace";
    }
    else
    {
      uint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_90;
      }
      *(_DWORD *)__int16 v42 = 136446210;
      int v43 = "nw_protocol_finalize_master_frame_array";
      char v25 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v23, v24, v25, v42, 0xCu);
    goto LABEL_90;
  }
LABEL_15:
  if (gLogDatapath)
  {
    uint64_t v26 = __nwlog_obj();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_finalize_master_frame_array";
      _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_33475;
  int v47 = (const char *)&__block_descriptor_tmp_59_33476;
  char v48 = 0;
  uint64_t v8 = *(void *)(v1 + 624);
  do
  {
    if (!v8) {
      break;
    }
    uint64_t v9 = *(void *)(v8 + 16);
    char v10 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
    uint64_t v8 = v9;
  }
  while ((v10 & 1) != 0);
  if (!*(void *)(v1 + 624)) {
    goto LABEL_20;
  }
  __nwlog_obj();
  *(_DWORD *)__int16 v42 = 136446210;
  int v43 = "nw_protocol_finalize_master_frame_array";
  char v27 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v40 = 0;
  if (__nwlog_fault(v27, &type, &v40))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)__int16 v42 = 136446210;
      int v43 = "nw_protocol_finalize_master_frame_array";
      char v30 = "%{public}s frame array is not empty after finalize";
      goto LABEL_94;
    }
    if (!v40)
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)__int16 v42 = 136446210;
      int v43 = "nw_protocol_finalize_master_frame_array";
      char v30 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
      goto LABEL_94;
    }
    uint64_t v38 = (char *)__nw_create_backtrace_string();
    os_log_type_t v28 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v39 = os_log_type_enabled(v28, type);
    if (v38)
    {
      if (v39)
      {
        *(_DWORD *)__int16 v42 = 136446466;
        int v43 = "nw_protocol_finalize_master_frame_array";
        __int16 v44 = 2082;
        int v45 = v38;
        _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", v42, 0x16u);
      }
      free(v38);
      goto LABEL_95;
    }
    if (v39)
    {
      *(_DWORD *)__int16 v42 = 136446210;
      int v43 = "nw_protocol_finalize_master_frame_array";
      char v30 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_94:
      _os_log_impl(&dword_1830D4000, v28, v29, v30, v42, 0xCu);
    }
  }
LABEL_95:
  if (v27) {
    free(v27);
  }
LABEL_20:
  nw_frame_cache_destroy((uint64_t *)(v1 + 432));
  uint64_t v11 = *(void (****)(void))(v1 + 552);
  if (v11)
  {
    (**v11)(*(void *)(v1 + 552));
    free(v11);
    *(void *)(v1 + 552) = 0;
  }
  BOOL v12 = *(void (****)(void))(v1 + 544);
  if (v12)
  {
    (**v12)(*(void *)(v1 + 544));
    free(v12);
    *(void *)(v1 + 544) = 0;
  }
  if (*(unsigned char *)(v1 + 536))
  {
    char v13 = *(void **)(v1 + 528);
    if (v13) {
      os_release(v13);
    }
  }
  *(void *)(v1 + 528) = 0;
  if (*(unsigned char *)(v1 + 520))
  {
    char v14 = *(void **)(v1 + 512);
    if (v14) {
      os_release(v14);
    }
  }
  *(void *)(v1 + 512) = 0;
  if (*(unsigned char *)(v1 + 504))
  {
    BOOL v15 = *(void **)(v1 + 496);
    if (v15) {
      os_release(v15);
    }
  }
  *(void *)(v1 + 496) = 0;
  if (*(unsigned char *)(v1 + 488))
  {
    uint64_t v16 = *(void **)(v1 + 480);
    if (v16) {
      os_release(v16);
    }
  }
  *(void *)(v1 + 480) = 0;
  nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(v1 + 216));
  free((void *)v1);
}

uint64_t ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_33475(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_33485(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v3;
  }
  void *v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t ___ZL46nw_protocol_http_encoding_remove_input_handlerP11nw_protocolS0_b_block_invoke_55(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2[4];
  char v4 = (void *)a2[5];
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    char v4 = (void *)a2[5];
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 600) = v4;
  }
  void *v4 = v3;
  a2[4] = 0;
  a2[5] = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    if ((*(unsigned char *)(v5 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v11 = __nwlog_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v17 = "nw_http_encoding_outbound_frame_return_to_cache";
          __int16 v18 = 2082;
          os_log_type_t v19 = (char *)(v5 + 114);
          __int16 v20 = 2080;
          uint64_t v21 = " ";
          __int16 v22 = 2048;
          uint64_t v23 = a2;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreturning frame %p to cache", buf, 0x2Au);
        }
      }
    }
    a2[10] = 0;
    a2[11] = 0;
    nw_frame_cache_return_frame(v5 + 432, (uint64_t)a2);
    return 1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_http_encoding_outbound_frame_return_to_cache";
  char v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v17 = "nw_http_encoding_outbound_frame_return_to_cache";
      char v10 = "%{public}s called with null http_encoding";
      goto LABEL_24;
    }
    if (!v14)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v17 = "nw_http_encoding_outbound_frame_return_to_cache";
      char v10 = "%{public}s called with null http_encoding, backtrace limit exceeded";
      goto LABEL_24;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v13 = os_log_type_enabled(v8, type);
    if (backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v17 = "nw_http_encoding_outbound_frame_return_to_cache";
        __int16 v18 = 2082;
        os_log_type_t v19 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null http_encoding, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_25;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v17 = "nw_http_encoding_outbound_frame_return_to_cache";
      char v10 = "%{public}s called with null http_encoding, no backtrace";
LABEL_24:
      _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    }
  }
LABEL_25:
  if (v7) {
    free(v7);
  }
  return 1;
}

uint64_t nw_protocol_http_encoding_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v15, &type, &v25)) {
      goto LABEL_66;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
      __int16 v18 = "%{public}s called with null protocol";
LABEL_65:
      _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
      goto LABEL_66;
    }
    if (!v25)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
        __int16 v18 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v21 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
        __int16 v18 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    if (!v21) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
    __int16 v29 = 2082;
    char v30 = backtrace_string;
    __int16 v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_51:
    _os_log_impl(&dword_1830D4000, v16, v17, v22, buf, 0x16u);
    goto LABEL_52;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v15, &type, &v25)) {
      goto LABEL_66;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
      __int16 v18 = "%{public}s called with null http_encoding";
      goto LABEL_65;
    }
    if (!v25)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
        __int16 v18 = "%{public}s called with null http_encoding, backtrace limit exceeded";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v23 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
        __int16 v18 = "%{public}s called with null http_encoding, no backtrace";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    if (!v23) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
    __int16 v29 = 2082;
    char v30 = backtrace_string;
    __int16 v22 = "%{public}s called with null http_encoding, dumping backtrace:%{public}s";
    goto LABEL_51;
  }
  if (a2)
  {
    if ((handle[198] & 1) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v19 = __nwlog_obj();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
          __int16 v29 = 2082;
          char v30 = handle + 114;
          __int16 v31 = 2080;
          os_log_type_t v32 = " ";
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    __int16 v4 = *((_WORD *)handle + 324);
    if ((v4 & 0x11) == 0)
    {
      *((_WORD *)handle + 324) = v4 | 0x10;
      tqh_first = a2->tqh_first;
      if (nw_protocol_copy_http_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
      }
      id v6 = (id)nw_protocol_copy_http_definition_http_definition;
      char v7 = nw_frame_copy_metadata_for_protocol((uint64_t)tqh_first, (uint64_t)v6);
      id v8 = nw_http_metadata_copy_request(v7);
      if (nw_http_request_has_method(v8, (uint64_t)"HEAD")) {
        __int16 v9 = 2;
      }
      else {
        __int16 v9 = 0;
      }
      *((_WORD *)handle + 324) = *((_WORD *)handle + 324) & 0xFFFD | v9;
      if (!nw_http_fields_have_field_with_name(v8, (unint64_t)"Accept-Encoding"))
      {
        uint64_t parameters = (void *)nw_protocol_get_parameters((uint64_t)handle);
        id v11 = nw_parameters_copy_url_endpoint(parameters);
        url_scheme = (const char *)nw_endpoint_get_url_scheme(v11);
        BOOL v13 = "gzip, deflate, br";
        if (strcasecmp(url_scheme, "https") && strcasecmp(url_scheme, "wss")) {
          BOOL v13 = "gzip, deflate";
        }
        nw_http_fields_append(v8, (uint64_t)"Accept-Encoding", (uint64_t)v13);
        if (v11) {
          os_release(v11);
        }
      }
      if (v8) {
        os_release(v8);
      }
      if (v7) {
        os_release(v7);
      }
      if (v6) {
        os_release(v6);
      }
    }
    return nw_protocol_finalize_output_frames(*((void *)handle + 4), (uint64_t)a2);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
  BOOL v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v15, &type, &v25)) {
    goto LABEL_66;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v25)
    {
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
        __int16 v18 = "%{public}s called with null frames, backtrace limit exceeded";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v24 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
        __int16 v18 = "%{public}s called with null frames, no backtrace";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
      __int16 v29 = 2082;
      char v30 = backtrace_string;
      __int16 v22 = "%{public}s called with null frames, dumping backtrace:%{public}s";
      goto LABEL_51;
    }
LABEL_52:
    free(backtrace_string);
    goto LABEL_66;
  }
  uint64_t v16 = __nwlog_obj();
  os_log_type_t v17 = type;
  if (os_log_type_enabled(v16, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_http_encoding_finalize_output_frames";
    __int16 v18 = "%{public}s called with null frames";
    goto LABEL_65;
  }
LABEL_66:
  if (v15) {
    free(v15);
  }
  return 0;
}

uint64_t nw_protocol_http_encoding_get_input_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
    BOOL v24 = (char *)_os_log_send_and_compose_impl();
    v56[0] = 16;
    LOBYTE(v52) = 0;
    if (!__nwlog_fault(v24, v56, &v52)) {
      goto LABEL_73;
    }
    if (v56[0] != 17)
    {
      if (!(_BYTE)v52)
      {
        char v25 = __nwlog_obj();
        os_log_type_t v26 = v56[0];
        if (!os_log_type_enabled(v25, (os_log_type_t)v56[0])) {
          goto LABEL_73;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
        char v27 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_72;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v25 = __nwlog_obj();
      os_log_type_t v26 = v56[0];
      BOOL v30 = os_log_type_enabled(v25, (os_log_type_t)v56[0]);
      if (!backtrace_string)
      {
        if (!v30) {
          goto LABEL_73;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
        char v27 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_72;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        __int16 v31 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_60:
        _os_log_impl(&dword_1830D4000, v25, v26, v31, buf, 0x16u);
      }
LABEL_61:
      free(backtrace_string);
      goto LABEL_73;
    }
    char v25 = __nwlog_obj();
    os_log_type_t v26 = v56[0];
    if (!os_log_type_enabled(v25, (os_log_type_t)v56[0])) {
      goto LABEL_73;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
    char v27 = "%{public}s called with null protocol";
LABEL_72:
    _os_log_impl(&dword_1830D4000, v25, v26, v27, buf, 0xCu);
LABEL_73:
    if (v24) {
      free(v24);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
    BOOL v24 = (char *)_os_log_send_and_compose_impl();
    v56[0] = 16;
    LOBYTE(v52) = 0;
    if (!__nwlog_fault(v24, v56, &v52)) {
      goto LABEL_73;
    }
    if (v56[0] == 17)
    {
      char v25 = __nwlog_obj();
      os_log_type_t v26 = v56[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)v56[0])) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
      char v27 = "%{public}s called with null http_encoding";
      goto LABEL_72;
    }
    if (!(_BYTE)v52)
    {
      char v25 = __nwlog_obj();
      os_log_type_t v26 = v56[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)v56[0])) {
        goto LABEL_73;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
      char v27 = "%{public}s called with null http_encoding, backtrace limit exceeded";
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v25 = __nwlog_obj();
    os_log_type_t v26 = v56[0];
    BOOL v36 = os_log_type_enabled(v25, (os_log_type_t)v56[0]);
    if (backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        __int16 v31 = "%{public}s called with null http_encoding, dumping backtrace:%{public}s";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    if (!v36) {
      goto LABEL_73;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
    char v27 = "%{public}s called with null http_encoding, no backtrace";
    goto LABEL_72;
  }
  if ((handle[198] & 1) == 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v28 = __nwlog_obj();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 114;
        *(_WORD *)&buf[22] = 2080;
        long long v62 = (__n128 (*)(uint64_t, uint64_t))" ";
        LOWORD(v63) = 1024;
        *(_DWORD *)((char *)&v63 + 2) = a3;
        HIWORD(v63) = 1024;
        LODWORD(v64) = a4;
        WORD2(v64) = 1024;
        *(_DWORD *)((char *)&v64 + 6) = a5;
        _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sminimum bytes %u, maximum bytes %u, maximum frame count %u", buf, 0x32u);
      }
    }
  }
  if (handle[428])
  {
    uint64_t v15 = 0;
    if ((handle[198] & 1) != 0 || !gLogDatapath) {
      return v15;
    }
    uint64_t v16 = __nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = handle + 114;
      *(_WORD *)&buf[22] = 2080;
      long long v62 = (__n128 (*)(uint64_t, uint64_t))" ";
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%salready getting input frames, returning 0", buf, 0x20u);
      return 0;
    }
    return 0;
  }
  handle[428] |= 1u;
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3802000000;
  long long v62 = __Block_byref_object_copy__21;
  long long v63 = __Block_byref_object_dispose__22;
  *(void *)&long long v64 = 0;
  *((void *)&v64 + 1) = &v64;
  uint64_t v52 = 0;
  long long v53 = &v52;
  int v55 = 0;
  uint64_t v54 = 0x2000000000;
  if (nw_protocol_get_input_frames((uint64_t)a1->output_handler, (uint64_t)a1, a3, a4, a5, (uint64_t)&v64)
    && *(void *)(*(void *)&buf[8] + 40))
  {
    *(void *)long long v56 = 0;
    *(void *)&v56[8] = v56;
    *(void *)&v56[16] = 0x3802000000;
    long long v57 = __Block_byref_object_copy__23;
    long long v58 = __Block_byref_object_dispose__24;
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    dispatch_object_t object = (id)nw_protocol_copy_http_definition_http_definition;
    v60 |= 1u;
    v43[0] = MEMORY[0x1E4F143A8];
    v43[1] = 0x40000000;
    __int16 v44 = (uint64_t (*)(void *))___ZL42nw_protocol_http_encoding_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
    int v45 = &unk_1E523FED0;
    uint64_t v50 = a1;
    long long v51 = a6;
    __int16 v46 = v56;
    int v47 = &v52;
    char v48 = buf;
    uint64_t v49 = handle;
    uint64_t v12 = *(void *)(*(void *)&buf[8] + 40);
    do
    {
      if (!v12) {
        break;
      }
      uint64_t v13 = *(void *)(v12 + 32);
      char v14 = v44(v43);
      uint64_t v12 = v13;
    }
    while ((v14 & 1) != 0);
    _Block_object_dispose(v56, 8);
    if ((v60 & 1) != 0 && object) {
      os_release(object);
    }
  }
  else
  {
    __int16 v17 = *((_WORD *)handle + 324);
    if ((v17 & 0x40) != 0)
    {
      if ((v17 & 0x24) == 4)
      {
        if (*((void *)handle + 68))
        {
          if ((handle[198] & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v18 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long v56 = 136446722;
              *(void *)&v56[4] = "nw_protocol_http_encoding_get_input_frames";
              *(_WORD *)&v56[12] = 2082;
              *(void *)&v56[14] = handle + 114;
              *(_WORD *)&v56[22] = 2080;
              long long v57 = (uint64_t (*)(uint64_t, uint64_t))" ";
              _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sinput finished before decoder completed", v56, 0x20u);
            }
          }
        }
      }
      *((_WORD *)handle + 324) |= 0x80u;
      nw_http_encoding_check_http1_content_length((uint64_t)handle);
    }
  }
  os_log_type_t v19 = (void (*)(uint64_t))(*(void *)&buf[8] + 40);
  if (gLogDatapath)
  {
    os_log_type_t v32 = __nwlog_obj();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long v56 = 136446210;
      *(void *)&v56[4] = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s called", v56, 0xCu);
    }
  }
  *(void *)long long v56 = MEMORY[0x1E4F143A8];
  *(void *)&v56[8] = 0x40000000;
  *(void *)&v56[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_33485;
  long long v57 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_41_33486;
  long long v58 = v19;
  LOBYTE(object) = 1;
  uint64_t v20 = *(void *)v19;
  do
  {
    if (!v20) {
      break;
    }
    uint64_t v21 = *(void *)(v20 + 32);
    char v22 = (*(uint64_t (**)(unsigned char *))&v56[16])(v56);
    uint64_t v20 = v21;
  }
  while ((v22 & 1) != 0);
  if (gLogDatapath)
  {
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 0x40000000;
    char v40 = (uint64_t (*)(void *))___ZL42nw_protocol_http_encoding_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_34;
    long long v41 = &__block_descriptor_tmp_35_33534;
    __int16 v42 = handle;
    tqh_first = a6->tqh_first;
    do
    {
      if (!tqh_first) {
        break;
      }
      __int16 v34 = (nw_frame *)*((void *)tqh_first + 4);
      char v35 = v40(v39);
      tqh_first = v34;
    }
    while ((v35 & 1) != 0);
  }
  if ((handle[198] & 1) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v37 = __nwlog_obj();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        int v38 = *((_DWORD *)v53 + 6);
        *(_DWORD *)long long v56 = 136446978;
        *(void *)&v56[4] = "nw_protocol_http_encoding_get_input_frames";
        *(_WORD *)&v56[12] = 2082;
        *(void *)&v56[14] = handle + 114;
        *(_WORD *)&v56[22] = 2080;
        long long v57 = (uint64_t (*)(uint64_t, uint64_t))" ";
        LOWORD(v58) = 1024;
        *(_DWORD *)((char *)&v58 + 2) = v38;
        _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreturning %u frames", v56, 0x26u);
      }
    }
  }
  nw_protocol_plugin_retry_set_getting_input_frames((uint64_t)(handle + 216), (uint64_t)a1, 0);
  uint64_t v15 = *((unsigned int *)v53 + 6);
  _Block_object_dispose(&v52, 8);
  _Block_object_dispose(buf, 8);
  return v15;
}

__n128 __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

BOOL ___ZL42nw_protocol_http_encoding_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
    __int16 v34 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    LOBYTE(v230[0]) = 0;
    if (__nwlog_fault(v34, type, v230))
    {
      if (type[0] == 17)
      {
        char v35 = __nwlog_obj();
        os_log_type_t v36 = type[0];
        if (os_log_type_enabled(v35, (os_log_type_t)type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
          BOOL v37 = "%{public}s called with null frame";
LABEL_256:
          _os_log_impl(&dword_1830D4000, v35, v36, v37, buf, 0xCu);
        }
      }
      else if (LOBYTE(v230[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v35 = __nwlog_obj();
        os_log_type_t v36 = type[0];
        BOOL v39 = os_log_type_enabled(v35, (os_log_type_t)type[0]);
        if (backtrace_string)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_257;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
          BOOL v37 = "%{public}s called with null frame, no backtrace";
          goto LABEL_256;
        }
      }
      else
      {
        char v35 = __nwlog_obj();
        os_log_type_t v36 = type[0];
        if (os_log_type_enabled(v35, (os_log_type_t)type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
          BOOL v37 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_256;
        }
      }
    }
LABEL_257:
    if (v34) {
      free(v34);
    }
    return 0;
  }
  uint64_t v3 = a1;
  __int16 v4 = nw_frame_copy_metadata_for_protocol(a2, *(void *)(*(void *)(a1[4] + 8) + 40));
  uint64_t v5 = v4;
  if (v4 && *(void **)(v3[7] + 496) != v4)
  {
    id v6 = nw_http_metadata_copy_response(v4);
    uint64_t v7 = v3[7];
    char v8 = *(unsigned char *)(v7 + 504);
    if (v8)
    {
      __int16 v9 = *(void **)(v7 + 496);
      if (v9)
      {
        os_release(v9);
        char v8 = *(unsigned char *)(v7 + 504);
      }
    }
    *(void *)(v7 + 496) = v5;
    *(unsigned char *)(v7 + 504) = v8 | 1;
    if (!v6) {
      goto LABEL_27;
    }
    id v10 = v6;
    int status_code = _nw_http_response_get_status_code();

    if (status_code == 304
      || (status_code - 200) > 0xFFFFFF9B
      || (uint64_t v12 = v3[7], (*(_WORD *)(v12 + 648) & 2) != 0))
    {
LABEL_26:
      os_release(v10);
LABEL_27:
      uint64_t v5 = 0;
      goto LABEL_28;
    }
    uint64_t v13 = *(void **)(v12 + 496);
    if (v13)
    {
      id v14 = nw_http_metadata_copy_header_fields(v13);
      if (v14)
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        LODWORD(v237) = 1;
        *(void *)&buf[16] = 0x2000000000;
        v230[0] = MEMORY[0x1E4F143A8];
        v230[1] = 0x40000000;
        v230[2] = ___ZL33nw_http_encoding_get_content_typeP25nw_protocol_http_encodingP20nw_protocol_metadata_block_invoke;
        v230[3] = &unk_1E523FF18;
        v230[4] = buf;
        v230[5] = v12;
        id v15 = v14;
        uint64_t v16 = v230;
        _nw_http_fields_access_value_by_name((uint64_t)v15, (unint64_t)"Content-Encoding", v16);

        unsigned int v17 = *(_DWORD *)(*(void *)&buf[8] + 24);
        _Block_object_dispose(buf, 8);
        os_release(v15);
        uint64_t v18 = v3[7];
        *(_DWORD *)(v18 + 644) = 1;
        switch(v17)
        {
          case 2u:
            unsigned int v17 = 2;
            gzip = (char *)nw_decoder_create_gzip();
            goto LABEL_19;
          case 3u:
            *(_DWORD *)(v18 + 644) = 4;
            unsigned int v17 = 3;
            gzip = (char *)nw_decoder_create_deflate();
            goto LABEL_19;
          case 4u:
            unsigned int v17 = 4;
            gzip = (char *)nw_decoder_create_raw_deflate();
            goto LABEL_19;
          case 5u:
            unsigned int v17 = 5;
            gzip = nw_decoder_create_brotli();
LABEL_19:
            uint64_t v20 = gzip;
            break;
          default:
            uint64_t v20 = 0;
            break;
        }
        goto LABEL_20;
      }
      v189 = v3;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
      __int16 v190 = (char *)_os_log_send_and_compose_impl();
      type[0] = 16;
      LOBYTE(v230[0]) = 0;
      if (__nwlog_fault(v190, type, v230))
      {
        if (type[0] == 17)
        {
          v191 = __nwlog_obj();
          os_log_type_t v192 = type[0];
          if (!os_log_type_enabled(v191, (os_log_type_t)type[0])) {
            goto LABEL_300;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
          v193 = "%{public}s called with null header_fields";
          goto LABEL_298;
        }
        if (!LOBYTE(v230[0]))
        {
          v191 = __nwlog_obj();
          os_log_type_t v192 = type[0];
          if (!os_log_type_enabled(v191, (os_log_type_t)type[0])) {
            goto LABEL_300;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
          v193 = "%{public}s called with null header_fields, backtrace limit exceeded";
          goto LABEL_298;
        }
        uint64_t v202 = (char *)__nw_create_backtrace_string();
        v199 = __nwlog_obj();
        os_log_type_t v200 = type[0];
        BOOL v203 = os_log_type_enabled(v199, (os_log_type_t)type[0]);
        if (v202)
        {
          if (v203)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v202;
            _os_log_impl(&dword_1830D4000, v199, v200, "%{public}s called with null header_fields, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v202);
          goto LABEL_300;
        }
        if (!v203) {
          goto LABEL_300;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
        v193 = "%{public}s called with null header_fields, no backtrace";
LABEL_307:
        uint64_t v206 = v199;
        os_log_type_t v207 = v200;
        goto LABEL_299;
      }
    }
    else
    {
      v189 = v3;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
      __int16 v190 = (char *)_os_log_send_and_compose_impl();
      type[0] = 16;
      LOBYTE(v230[0]) = 0;
      if (!__nwlog_fault(v190, type, v230)) {
        goto LABEL_300;
      }
      if (type[0] == 17)
      {
        v191 = __nwlog_obj();
        os_log_type_t v192 = type[0];
        if (!os_log_type_enabled(v191, (os_log_type_t)type[0])) {
          goto LABEL_300;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
        v193 = "%{public}s called with null http_metadata";
LABEL_298:
        uint64_t v206 = v191;
        os_log_type_t v207 = v192;
LABEL_299:
        _os_log_impl(&dword_1830D4000, v206, v207, v193, buf, 0xCu);
        goto LABEL_300;
      }
      if (!LOBYTE(v230[0]))
      {
        v191 = __nwlog_obj();
        os_log_type_t v192 = type[0];
        if (!os_log_type_enabled(v191, (os_log_type_t)type[0])) {
          goto LABEL_300;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
        v193 = "%{public}s called with null http_metadata, backtrace limit exceeded";
        goto LABEL_298;
      }
      v198 = (char *)__nw_create_backtrace_string();
      v199 = __nwlog_obj();
      os_log_type_t v200 = type[0];
      BOOL v201 = os_log_type_enabled(v199, (os_log_type_t)type[0]);
      if (v198)
      {
        if (v201)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v198;
          _os_log_impl(&dword_1830D4000, v199, v200, "%{public}s called with null http_metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v198);
        if (!v190) {
          goto LABEL_302;
        }
        goto LABEL_301;
      }
      if (v201)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
        v193 = "%{public}s called with null http_metadata, no backtrace";
        goto LABEL_307;
      }
    }
LABEL_300:
    if (!v190)
    {
LABEL_302:
      unsigned int v17 = 0;
      uint64_t v20 = 0;
      uint64_t v3 = v189;
      *(_DWORD *)(v189[7] + 644) = 1;
LABEL_20:
      uint64_t v21 = v3[7];
      char v22 = *(char **)(v21 + 544);
      if (v22 != v20)
      {
        if (v22)
        {
          (**(void (***)(void))v22)(*(void *)(v21 + 544));
          free(v22);
        }
        *(void *)(v21 + 544) = v20;
        uint64_t v21 = v3[7];
      }
      if ((*(unsigned char *)(v21 + 198) & 1) == 0)
      {
        if (gLogDatapath)
        {
          __int16 v194 = __nwlog_obj();
          if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v195 = v3[7];
            uint64_t v196 = v195 + 114;
            if (v17 > 5) {
              char v197 = "<unknown>";
            }
            else {
              char v197 = off_1E5249290[v17];
            }
            uint64_t v204 = *(unsigned int *)(v195 + 644);
            if (v204 > 5) {
              uint64_t v205 = "<unknown>";
            }
            else {
              uint64_t v205 = off_1E5249290[v204];
            }
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v196;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v237 = (uint64_t)" ";
            *(_WORD *)v238 = 2080;
            *(void *)&v238[2] = v197;
            *(_WORD *)&v238[10] = 2080;
            *(void *)&v238[12] = v205;
            _os_log_impl(&dword_1830D4000, v194, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sfound encoding %s, alternative encoding %s", buf, 0x34u);
          }
        }
      }
      goto LABEL_26;
    }
LABEL_301:
    free(v190);
    goto LABEL_302;
  }
LABEL_28:
  uint64_t v23 = *(void *)(a2 + 112);
  if (!v23) {
    goto LABEL_57;
  }
  if ((*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
  {
    LODWORD(v23) = 0;
LABEL_57:
    uint64_t v25 = 0;
    uint64_t v26 = *(void *)(a2 + 64);
    if (v26) {
      goto LABEL_35;
    }
LABEL_58:
    __int16 v29 = v3 + 7;
    uint64_t v28 = v3[7];
    if (*(void *)(v28 + 544)) {
      BOOL v40 = v23 == 0;
    }
    else {
      BOOL v40 = 1;
    }
    if (!v40)
    {
      v212 = v3;
      v213 = v5;
      unsigned int v214 = 0;
      goto LABEL_65;
    }
LABEL_63:
    uint64_t v42 = *(void *)(a2 + 32);
    int v43 = *(void **)(a2 + 40);
    long long v41 = (void *)(a2 + 32);
    if (v42)
    {
      *(void *)(v42 + 40) = v43;
      int v43 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(*(void *)(v3[6] + 8) + 48) = v43;
    }
    void *v43 = v42;
    void *v41 = 0;
    *(void *)(a2 + 40) = 0;
    uint64_t v133 = v3[9];
    char v134 = *(uint64_t **)(v133 + 8);
    *(void *)(a2 + 40) = v134;
    uint64_t *v134 = a2;
    *(void *)(v133 + 8) = v41;
    uint64_t v135 = *(void *)(v3[5] + 8);
    uint64_t v136 = *(unsigned int *)(v135 + 24) + 1;
    uint64_t v137 = v136 << 31 >> 31;
    *(_DWORD *)(v135 + 24) = v136;
    if (v137 == v136 && (v137 & 0x8000000000000000) == 0) {
      goto LABEL_208;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v138 = *(unsigned int *)(*(void *)(v3[5] + 8) + 24);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "count";
    *(_WORD *)&buf[22] = 2048;
    uint64_t v237 = 1;
    *(_WORD *)v238 = 2048;
    *(void *)&v238[2] = v138;
    unint64_t v139 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    LOBYTE(v225) = 0;
    if (__nwlog_fault(v139, type, &v225))
    {
      if (type[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v140 = gLogObj;
        os_log_type_t v141 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type[0]))
        {
          uint64_t v142 = *(unsigned int *)(*(void *)(v3[5] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v237 = 1;
          *(_WORD *)v238 = 2048;
          *(void *)&v238[2] = v142;
          BOOL v143 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_203:
          uint64_t v157 = v140;
          os_log_type_t v158 = v141;
LABEL_204:
          _os_log_impl(&dword_1830D4000, v157, v158, v143, buf, 0x2Au);
        }
      }
      else if ((_BYTE)v225)
      {
        os_log_type_t v145 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v146 = gLogObj;
        os_log_type_t v147 = type[0];
        BOOL v148 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type[0]);
        if (v145)
        {
          if (v148)
          {
            uint64_t v149 = *(unsigned int *)(*(void *)(v3[5] + 8) + 24);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "count";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v237 = 1;
            *(_WORD *)v238 = 2048;
            *(void *)&v238[2] = v149;
            *(_WORD *)&v238[10] = 2082;
            *(void *)&v238[12] = v145;
            _os_log_impl(&dword_1830D4000, v146, v147, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v145);
          goto LABEL_205;
        }
        if (v148)
        {
          uint64_t v160 = *(unsigned int *)(*(void *)(v3[5] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v237 = 1;
          *(_WORD *)v238 = 2048;
          *(void *)&v238[2] = v160;
          BOOL v143 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          uint64_t v157 = v146;
          os_log_type_t v158 = v147;
          goto LABEL_204;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v140 = gLogObj;
        os_log_type_t v141 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type[0]))
        {
          uint64_t v156 = *(unsigned int *)(*(void *)(v3[5] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "count";
          *(_WORD *)&buf[22] = 2048;
          uint64_t v237 = 1;
          *(_WORD *)v238 = 2048;
          *(void *)&v238[2] = v156;
          BOOL v143 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_203;
        }
      }
    }
LABEL_205:
    if (v139) {
      free(v139);
    }
    *(_DWORD *)(*(void *)(v3[5] + 8) + 24) = -1;
LABEL_208:
    BOOL v159 = 1;
    if (v5) {
      goto LABEL_233;
    }
    return v159;
  }
  LODWORD(v23) = *(_DWORD *)(a2 + 52);
  uint64_t v24 = *(unsigned int *)(a2 + 56);
  if (v23) {
    LODWORD(v23) = v23 - (v24 + *(_DWORD *)(a2 + 60));
  }
  uint64_t v25 = *(void *)(a2 + 112) + v24;
  uint64_t v26 = *(void *)(a2 + 64);
  if (!v26) {
    goto LABEL_58;
  }
LABEL_35:
  unsigned int v27 = *(unsigned __int8 *)(v26 + 66);
  __int16 v29 = v3 + 7;
  uint64_t v28 = v3[7];
  uint64_t v30 = *(void *)(v28 + 544);
  if (v30) {
    BOOL v31 = v23 == 0;
  }
  else {
    BOOL v31 = 1;
  }
  if (v31)
  {
    if ((v27 & 0x40) != 0)
    {
      if (v30)
      {
        if ((*(_WORD *)(v28 + 648) & 0x24) == 4 && (*(unsigned char *)(v28 + 198) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v32 = gLogObj;
          BOOL v33 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          uint64_t v28 = *v29;
          if (v33)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v28 + 114;
            *(_WORD *)&buf[22] = 2080;
            uint64_t v237 = (uint64_t)" ";
            _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%smetadata completed before decoder completed", buf, 0x20u);
            uint64_t v28 = *v29;
          }
        }
      }
      *(_WORD *)(v28 + 648) |= 0x80u;
      nw_http_encoding_check_http1_content_length(*v29);
    }
    goto LABEL_63;
  }
  v212 = v3;
  v213 = v5;
  unsigned int v214 = (v27 >> 6) & 1;
LABEL_65:
  *(_WORD *)(v28 + 648) |= 4u;
  uint64_t v215 = v23;
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3802000000;
  uint64_t v237 = (uint64_t)__Block_byref_object_copy__21;
  BOOL v44 = (*(unsigned char *)(*v29 + 648) & 0x20) != 0;
  *(void *)v238 = __Block_byref_object_dispose__22;
  *(void *)&v238[8] = 0;
  *(void *)&v238[16] = &v238[8];
  BOOL v229 = v44;
  uint64_t v225 = 0;
  v226 = &v225;
  uint64_t v227 = 0x2000000000;
  uint64_t v228 = 0;
  uint64_t v45 = MEMORY[0x1E4F143A8];
  while (1)
  {
    uint64_t v46 = *v29;
    uint64_t v47 = *(void *)(*v29 + 544);
    v224[0] = v45;
    v224[1] = 0x40000000;
    v224[2] = ___ZL42nw_protocol_http_encoding_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_25;
    v224[3] = &unk_1E523FE80;
    v224[5] = v46;
    v224[6] = a2;
    v224[4] = buf;
    if (v47)
    {
      if (v25)
      {
        if (v229)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v48 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_log_type_t type = 136446210;
            *(void *)&os_log_type_t type[4] = "nw_decoder_decode";
            _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_ERROR, "%{public}s extra data", type, 0xCu);
          }
          uint64_t v49 = 0;
        }
        else
        {
          uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, BOOL *, void *))(*(void *)v47 + 16))(v47, v25, v215, v214, &v229, v224);
        }
        goto LABEL_74;
      }
      __nwlog_obj();
      *(_DWORD *)os_log_type_t type = 136446210;
      *(void *)&os_log_type_t type[4] = "nw_decoder_decode";
      BOOL v72 = (char *)_os_log_send_and_compose_impl();
      v239[0] = 16;
      char v231 = 0;
      if (!__nwlog_fault(v72, v239, &v231)) {
        goto LABEL_150;
      }
      if (v239[0] != 17)
      {
        if (!v231)
        {
          size_t v106 = __nwlog_obj();
          uint8_t v107 = v239[0];
          if (os_log_type_enabled(v106, (os_log_type_t)v239[0]))
          {
            *(_DWORD *)os_log_type_t type = 136446210;
            *(void *)&os_log_type_t type[4] = "nw_decoder_decode";
            os_log_type_t v75 = v106;
            os_log_type_t v76 = v107;
            os_log_type_t v77 = "%{public}s called with null in_bytes, backtrace limit exceeded";
            goto LABEL_149;
          }
          goto LABEL_150;
        }
        BOOL v85 = (char *)__nw_create_backtrace_string();
        uint64_t v92 = __nwlog_obj();
        uint8_t v93 = v239[0];
        os_log_t loga = v92;
        BOOL v94 = os_log_type_enabled(v92, (os_log_type_t)v239[0]);
        if (!v85)
        {
          if (v94)
          {
            *(_DWORD *)os_log_type_t type = 136446210;
            *(void *)&os_log_type_t type[4] = "nw_decoder_decode";
            os_log_type_t v75 = loga;
            os_log_type_t v76 = v93;
            os_log_type_t v77 = "%{public}s called with null in_bytes, no backtrace";
            goto LABEL_149;
          }
          goto LABEL_150;
        }
        if (v94)
        {
          *(_DWORD *)os_log_type_t type = 136446466;
          *(void *)&os_log_type_t type[4] = "nw_decoder_decode";
          *(_WORD *)&type[12] = 2082;
          *(void *)&type[14] = v85;
          uint64_t v89 = loga;
          os_log_type_t v90 = v93;
          uint64_t v91 = "%{public}s called with null in_bytes, dumping backtrace:%{public}s";
LABEL_125:
          _os_log_impl(&dword_1830D4000, v89, v90, v91, type, 0x16u);
        }
        goto LABEL_126;
      }
      uint64_t v78 = __nwlog_obj();
      uint8_t v79 = v239[0];
      if (os_log_type_enabled(v78, (os_log_type_t)v239[0]))
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&os_log_type_t type[4] = "nw_decoder_decode";
        os_log_type_t v75 = v78;
        os_log_type_t v76 = v79;
        os_log_type_t v77 = "%{public}s called with null in_bytes";
        goto LABEL_149;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)os_log_type_t type = 136446210;
      *(void *)&os_log_type_t type[4] = "nw_decoder_decode";
      BOOL v72 = (char *)_os_log_send_and_compose_impl();
      v239[0] = 16;
      char v231 = 0;
      if (!__nwlog_fault(v72, v239, &v231)) {
        goto LABEL_150;
      }
      if (v239[0] == 17)
      {
        int v73 = __nwlog_obj();
        uint8_t v74 = v239[0];
        if (os_log_type_enabled(v73, (os_log_type_t)v239[0]))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&os_log_type_t type[4] = "nw_decoder_decode";
          os_log_type_t v75 = v73;
          os_log_type_t v76 = v74;
          os_log_type_t v77 = "%{public}s called with null decoder";
LABEL_149:
          _os_log_impl(&dword_1830D4000, v75, v76, v77, type, 0xCu);
        }
      }
      else
      {
        if (v231)
        {
          BOOL v85 = (char *)__nw_create_backtrace_string();
          __int16 v86 = __nwlog_obj();
          uint8_t v87 = v239[0];
          os_log_t log = v86;
          BOOL v88 = os_log_type_enabled(v86, (os_log_type_t)v239[0]);
          if (!v85)
          {
            if (v88)
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&os_log_type_t type[4] = "nw_decoder_decode";
              os_log_type_t v75 = log;
              os_log_type_t v76 = v87;
              os_log_type_t v77 = "%{public}s called with null decoder, no backtrace";
              goto LABEL_149;
            }
            goto LABEL_150;
          }
          if (v88)
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            *(void *)&os_log_type_t type[4] = "nw_decoder_decode";
            *(_WORD *)&type[12] = 2082;
            *(void *)&type[14] = v85;
            uint64_t v89 = log;
            os_log_type_t v90 = v87;
            uint64_t v91 = "%{public}s called with null decoder, dumping backtrace:%{public}s";
            goto LABEL_125;
          }
LABEL_126:
          free(v85);
          goto LABEL_150;
        }
        id v104 = __nwlog_obj();
        uint8_t v105 = v239[0];
        if (os_log_type_enabled(v104, (os_log_type_t)v239[0]))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&os_log_type_t type[4] = "nw_decoder_decode";
          os_log_type_t v75 = v104;
          os_log_type_t v76 = v105;
          os_log_type_t v77 = "%{public}s called with null decoder, backtrace limit exceeded";
          goto LABEL_149;
        }
      }
    }
LABEL_150:
    if (v72) {
      free(v72);
    }
    uint64_t v49 = -1;
LABEL_74:
    v226[3] = v49;
    BOOL v50 = v229;
    *(_WORD *)(*v29 + 648) = *(_WORD *)(*v29 + 648) & 0xFFDF | (32 * v229);
    if ((*(unsigned char *)(*v29 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        char v80 = __nwlog_obj();
        BOOL v81 = os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG);
        BOOL v50 = v229;
        if (v81)
        {
          uint64_t v82 = *v29 + 114;
          uint64_t v83 = v226[3];
          *(_DWORD *)os_log_type_t type = 136447234;
          *(void *)&os_log_type_t type[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
          *(_WORD *)&type[12] = 2082;
          *(void *)&type[14] = v82;
          *(_WORD *)&type[22] = 2080;
          v233 = " ";
          *(_WORD *)v234 = 2048;
          *(void *)&v234[2] = v83;
          *(_WORD *)&v234[10] = 1024;
          LODWORD(v235) = v229;
          _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sdecoder decoded %zd bytes, complete %{BOOL}d", type, 0x30u);
          BOOL v50 = v229;
        }
      }
    }
    if (v50 && !*(void *)(*(void *)&buf[8] + 40))
    {
      uint64_t v51 = *v29;
      if (*v29)
      {
        if ((*(unsigned char *)(v51 + 198) & 1) == 0)
        {
          if (gLogDatapath)
          {
            __int16 v103 = __nwlog_obj();
            if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)os_log_type_t type = 136446978;
              *(void *)&os_log_type_t type[4] = "nw_http_encoding_create_inbound_frame";
              *(_WORD *)&type[12] = 2082;
              *(void *)&type[14] = v51 + 114;
              *(_WORD *)&type[22] = 2080;
              v233 = " ";
              *(_WORD *)v234 = 1024;
              *(_DWORD *)&v234[2] = 0;
              _os_log_impl(&dword_1830D4000, v103, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled for size %u", type, 0x26u);
            }
          }
        }
        BOOL frame = nw_frame_cache_create_frame((uint64_t *)(v51 + 432), 0);
        if (frame)
        {
          uint64_t v53 = frame;
          *(void *)(frame + 16) = 0;
          uint64_t v54 = *(BOOL **)(v51 + 568);
          *(void *)(frame + 24) = v54;
          *uint64_t v54 = frame;
          *(void *)(v51 + 568) = frame + 16;
          *(void *)(frame + 80) = nw_http_encoding_inbound_frame_finalizer;
          *(void *)(frame + 88) = v51;
LABEL_83:
          nw_frame_inherit_metadata(a2, v53, 1);
          *(unsigned char *)(v53 + 186) |= 0x80u;
          uint64_t v55 = *(void *)&buf[8];
          *(void *)(v53 + 32) = 0;
          long long v56 = *(uint64_t **)(v55 + 48);
          *(void *)(v53 + 40) = v56;
          uint64_t *v56 = v53;
          *(void *)(v55 + 48) = v53 + 32;
          goto LABEL_84;
        }
        __nwlog_obj();
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&os_log_type_t type[4] = "nw_http_encoding_create_inbound_frame";
        id v95 = (char *)_os_log_send_and_compose_impl();
        v239[0] = 16;
        char v231 = 0;
        if (!__nwlog_fault(v95, v239, &v231)) {
          goto LABEL_168;
        }
        if (v239[0] == 17)
        {
          nw_endpoint_t v101 = __nwlog_obj();
          uint8_t v102 = v239[0];
          if (os_log_type_enabled(v101, (os_log_type_t)v239[0]))
          {
            *(_DWORD *)os_log_type_t type = 136446210;
            *(void *)&os_log_type_t type[4] = "nw_http_encoding_create_inbound_frame";
            size_t v98 = v101;
            os_log_type_t v99 = v102;
            id v100 = "%{public}s called with null frame";
            goto LABEL_167;
          }
LABEL_168:
          if (v95) {
            free(v95);
          }
          uint64_t v53 = 0;
          goto LABEL_83;
        }
        if (v231)
        {
          os_log_type_t v108 = (char *)__nw_create_backtrace_string();
          uint64_t v115 = __nwlog_obj();
          uint8_t v116 = v239[0];
          os_log_t logc = v115;
          BOOL v117 = os_log_type_enabled(v115, (os_log_type_t)v239[0]);
          if (v108)
          {
            if (v117)
            {
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&os_log_type_t type[4] = "nw_http_encoding_create_inbound_frame";
              *(_WORD *)&type[12] = 2082;
              *(void *)&type[14] = v108;
              os_log_type_t v112 = logc;
              os_log_type_t v113 = v116;
              BOOL v114 = "%{public}s called with null frame, dumping backtrace:%{public}s";
LABEL_157:
              _os_log_impl(&dword_1830D4000, v112, v113, v114, type, 0x16u);
            }
            goto LABEL_158;
          }
          if (!v117) {
            goto LABEL_168;
          }
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&os_log_type_t type[4] = "nw_http_encoding_create_inbound_frame";
          size_t v98 = logc;
          os_log_type_t v99 = v116;
          id v100 = "%{public}s called with null frame, no backtrace";
        }
        else
        {
          uint64_t v120 = __nwlog_obj();
          uint8_t v121 = v239[0];
          if (!os_log_type_enabled(v120, (os_log_type_t)v239[0])) {
            goto LABEL_168;
          }
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&os_log_type_t type[4] = "nw_http_encoding_create_inbound_frame";
          size_t v98 = v120;
          os_log_type_t v99 = v121;
          id v100 = "%{public}s called with null frame, backtrace limit exceeded";
        }
      }
      else
      {
        __nwlog_obj();
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&os_log_type_t type[4] = "nw_http_encoding_create_inbound_frame";
        id v95 = (char *)_os_log_send_and_compose_impl();
        v239[0] = 16;
        char v231 = 0;
        if (!__nwlog_fault(v95, v239, &v231)) {
          goto LABEL_168;
        }
        if (v239[0] == 17)
        {
          uint64_t v96 = __nwlog_obj();
          uint8_t v97 = v239[0];
          if (os_log_type_enabled(v96, (os_log_type_t)v239[0]))
          {
            *(_DWORD *)os_log_type_t type = 136446210;
            *(void *)&os_log_type_t type[4] = "nw_http_encoding_create_inbound_frame";
            size_t v98 = v96;
            os_log_type_t v99 = v97;
            id v100 = "%{public}s called with null http_encoding";
            goto LABEL_167;
          }
          goto LABEL_168;
        }
        if (v231)
        {
          os_log_type_t v108 = (char *)__nw_create_backtrace_string();
          size_t v109 = __nwlog_obj();
          uint8_t v110 = v239[0];
          os_log_t logb = v109;
          BOOL v111 = os_log_type_enabled(v109, (os_log_type_t)v239[0]);
          if (v108)
          {
            if (v111)
            {
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&os_log_type_t type[4] = "nw_http_encoding_create_inbound_frame";
              *(_WORD *)&type[12] = 2082;
              *(void *)&type[14] = v108;
              os_log_type_t v112 = logb;
              os_log_type_t v113 = v110;
              BOOL v114 = "%{public}s called with null http_encoding, dumping backtrace:%{public}s";
              goto LABEL_157;
            }
LABEL_158:
            free(v108);
            goto LABEL_168;
          }
          if (!v111) {
            goto LABEL_168;
          }
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&os_log_type_t type[4] = "nw_http_encoding_create_inbound_frame";
          size_t v98 = logb;
          os_log_type_t v99 = v110;
          id v100 = "%{public}s called with null http_encoding, no backtrace";
        }
        else
        {
          id v118 = __nwlog_obj();
          uint8_t v119 = v239[0];
          if (!os_log_type_enabled(v118, (os_log_type_t)v239[0])) {
            goto LABEL_168;
          }
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&os_log_type_t type[4] = "nw_http_encoding_create_inbound_frame";
          size_t v98 = v118;
          os_log_type_t v99 = v119;
          id v100 = "%{public}s called with null http_encoding, backtrace limit exceeded";
        }
      }
LABEL_167:
      _os_log_impl(&dword_1830D4000, v98, v99, v100, type, 0xCu);
      goto LABEL_168;
    }
LABEL_84:
    uint64_t v57 = v226[3];
    if ((v57 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v58 = *(void *)&buf[8];
    if (gLogDatapath)
    {
      __int16 v84 = __nwlog_obj();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v239 = 136446210;
        BOOL v240 = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_1830D4000, v84, OS_LOG_TYPE_DEBUG, "%{public}s called", v239, 0xCu);
      }
    }
    *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
    *(void *)&os_log_type_t type[8] = 0x40000000;
    *(void *)&os_log_type_t type[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_33485;
    v233 = (const char *)&__block_descriptor_tmp_41_33486;
    *(void *)v234 = v58 + 40;
    v234[8] = 0;
    uint64_t v59 = *(void *)(v58 + 40);
    do
    {
      if (!v59) {
        break;
      }
      uint64_t v60 = *(void *)(v59 + 32);
      char v61 = (*(uint64_t (**)(unsigned char *))&type[16])(type);
      uint64_t v59 = v60;
    }
    while ((v61 & 1) != 0);
    uint64_t v62 = *v29;
    if (*(_DWORD *)(*v29 + 644) == 1)
    {
      uint64_t v5 = v213;
      if (*(unsigned char *)(*v29 + 198)) {
        goto LABEL_181;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v131 = gLogObj;
      BOOL v132 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      uint64_t v62 = *v29;
      if (v132)
      {
        *(_DWORD *)os_log_type_t type = 136446722;
        *(void *)&os_log_type_t type[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
        *(_WORD *)&type[12] = 2082;
        *(void *)&type[14] = v62 + 114;
        *(_WORD *)&type[22] = 2080;
        v233 = " ";
        _os_log_impl(&dword_1830D4000, v131, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sdecoding failed", type, 0x20u);
        uint64_t v62 = *v29;
      }
      if (v62)
      {
LABEL_181:
        nw_protocol_error(*(void **)(v62 + 48), v62);
        nw_protocol_disconnect(*(void **)(v62 + 32), v62);
        goto LABEL_232;
      }
      __nwlog_obj();
      *(_DWORD *)os_log_type_t type = 136446210;
      *(void *)&os_log_type_t type[4] = "nw_http_encoding_close";
      char v183 = (char *)_os_log_send_and_compose_impl();
      v239[0] = 16;
      char v231 = 0;
      if (!__nwlog_fault(v183, v239, &v231)) {
        goto LABEL_287;
      }
      if (v239[0] == 17)
      {
        size_t v184 = __nwlog_obj();
        os_log_type_t v185 = v239[0];
        if (os_log_type_enabled(v184, (os_log_type_t)v239[0]))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&os_log_type_t type[4] = "nw_http_encoding_close";
          BOOL v186 = "%{public}s called with null http_encoding";
          goto LABEL_286;
        }
        goto LABEL_287;
      }
      if (v231)
      {
        size_t v187 = (char *)__nw_create_backtrace_string();
        size_t v184 = __nwlog_obj();
        os_log_type_t v185 = v239[0];
        BOOL v188 = os_log_type_enabled(v184, (os_log_type_t)v239[0]);
        if (v187)
        {
          if (v188)
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            *(void *)&os_log_type_t type[4] = "nw_http_encoding_close";
            *(_WORD *)&type[12] = 2082;
            *(void *)&type[14] = v187;
            _os_log_impl(&dword_1830D4000, v184, v185, "%{public}s called with null http_encoding, dumping backtrace:%{public}s", type, 0x16u);
          }
          free(v187);
          goto LABEL_287;
        }
        if (!v188)
        {
LABEL_287:
          if (v183) {
            free(v183);
          }
          goto LABEL_232;
        }
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&os_log_type_t type[4] = "nw_http_encoding_close";
        BOOL v186 = "%{public}s called with null http_encoding, no backtrace";
      }
      else
      {
        size_t v184 = __nwlog_obj();
        os_log_type_t v185 = v239[0];
        if (!os_log_type_enabled(v184, (os_log_type_t)v239[0])) {
          goto LABEL_287;
        }
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&os_log_type_t type[4] = "nw_http_encoding_close";
        BOOL v186 = "%{public}s called with null http_encoding, backtrace limit exceeded";
      }
LABEL_286:
      _os_log_impl(&dword_1830D4000, v184, v185, v186, type, 0xCu);
      goto LABEL_287;
    }
    if ((*(unsigned char *)(*v29 + 198) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      long long v63 = gLogObj;
      BOOL v64 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      uint64_t v62 = *v29;
      if (v64)
      {
        uint64_t v65 = *(unsigned int *)(v62 + 644);
        os_log_type_t v66 = "<unknown>";
        if (v65 <= 5) {
          os_log_type_t v66 = off_1E5249290[v65];
        }
        *(_DWORD *)os_log_type_t type = 136446978;
        *(void *)&os_log_type_t type[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
        *(_WORD *)&type[12] = 2082;
        *(void *)&type[14] = v62 + 114;
        *(_WORD *)&type[22] = 2080;
        v233 = " ";
        *(_WORD *)v234 = 2080;
        *(void *)&v234[2] = v66;
        _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sdecoding failed, trying alternative encoding %s", type, 0x2Au);
        uint64_t v62 = *v29;
      }
    }
    int v67 = *(_DWORD *)(v62 + 644);
    *(_DWORD *)(v62 + 644) = 1;
    switch(v67)
    {
      case 2:
        deflate = (char *)nw_decoder_create_gzip();
        goto LABEL_101;
      case 3:
        *(_DWORD *)(v62 + 644) = 4;
        deflate = (char *)nw_decoder_create_deflate();
        goto LABEL_101;
      case 4:
        deflate = (char *)nw_decoder_create_raw_deflate();
        goto LABEL_101;
      case 5:
        deflate = nw_decoder_create_brotli();
LABEL_101:
        BOOL v69 = deflate;
        break;
      default:
        BOOL v69 = 0;
        break;
    }
    uint64_t v70 = *v29;
    os_log_type_t v71 = *(char **)(*v29 + 544);
    if (v71 != v69)
    {
      if (v71)
      {
        (**(void (***)(void, uint64_t))v71)(*(void *)(*v29 + 544), v59);
        free(v71);
      }
      *(void *)(v70 + 544) = v69;
    }
  }
  uint64_t v122 = *(void *)(*v29 + 472);
  *(void *)(*v29 + 472) = v122 + v57;
  if (__OFADD__(v122, v57))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v123 = (const char *)v226[3];
    uint64_t v124 = *(void *)(*v29 + 472);
    *(_DWORD *)os_log_type_t type = 136446978;
    *(void *)&os_log_type_t type[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
    *(_WORD *)&type[12] = 2082;
    *(void *)&type[14] = "http_encoding->decoded_length";
    *(_WORD *)&type[22] = 2048;
    v233 = v123;
    *(_WORD *)v234 = 2048;
    *(void *)&v234[2] = v124;
    char v125 = (char *)_os_log_send_and_compose_impl();
    v239[0] = 16;
    char v231 = 0;
    uint64_t v5 = v213;
    if (!__nwlog_fault(v125, v239, &v231)) {
      goto LABEL_216;
    }
    if (v239[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v126 = gLogObj;
      uint8_t v127 = v239[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v239[0])) {
        goto LABEL_216;
      }
      __int16 v128 = (const char *)v226[3];
      uint64_t v129 = *(void *)(*v29 + 472);
      *(_DWORD *)os_log_type_t type = 136446978;
      *(void *)&os_log_type_t type[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
      *(_WORD *)&type[12] = 2082;
      *(void *)&type[14] = "http_encoding->decoded_length";
      *(_WORD *)&type[22] = 2048;
      v233 = v128;
      *(_WORD *)v234 = 2048;
      *(void *)&v234[2] = v129;
      v130 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
    }
    else
    {
      if (v231)
      {
        __int16 v150 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v151 = gLogObj;
        os_log_type_t v152 = v239[0];
        BOOL v153 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v239[0]);
        if (v150)
        {
          if (v153)
          {
            os_log_type_t v154 = (const char *)v226[3];
            uint64_t v155 = *(void *)(*v29 + 472);
            *(_DWORD *)os_log_type_t type = 136447234;
            *(void *)&os_log_type_t type[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
            *(_WORD *)&type[12] = 2082;
            *(void *)&type[14] = "http_encoding->decoded_length";
            *(_WORD *)&type[22] = 2048;
            v233 = v154;
            *(_WORD *)v234 = 2048;
            *(void *)&v234[2] = v155;
            *(_WORD *)&v234[10] = 2082;
            v235 = v150;
            _os_log_impl(&dword_1830D4000, v151, v152, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", type, 0x34u);
          }
          free(v150);
        }
        else if (v153)
        {
          uint64_t v176 = (const char *)v226[3];
          uint64_t v177 = *(void *)(*v29 + 472);
          *(_DWORD *)os_log_type_t type = 136446978;
          *(void *)&os_log_type_t type[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
          *(_WORD *)&type[12] = 2082;
          *(void *)&type[14] = "http_encoding->decoded_length";
          *(_WORD *)&type[22] = 2048;
          v233 = v176;
          *(_WORD *)v234 = 2048;
          *(void *)&v234[2] = v177;
          v130 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          uint64_t v163 = v151;
          os_log_type_t v164 = v152;
          goto LABEL_215;
        }
LABEL_216:
        __int16 v144 = v212;
        if (v125) {
          free(v125);
        }
        uint64_t v165 = *v29;
        *(void *)(v165 + 472) = 0x7FFFFFFFFFFFFFFFLL;
        if (*(unsigned char *)(v165 + 198)) {
          goto LABEL_220;
        }
        goto LABEL_219;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v126 = gLogObj;
      uint8_t v127 = v239[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v239[0])) {
        goto LABEL_216;
      }
      v161 = (const char *)v226[3];
      uint64_t v162 = *(void *)(*v29 + 472);
      *(_DWORD *)os_log_type_t type = 136446978;
      *(void *)&os_log_type_t type[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
      *(_WORD *)&type[12] = 2082;
      *(void *)&type[14] = "http_encoding->decoded_length";
      *(_WORD *)&type[22] = 2048;
      v233 = v161;
      *(_WORD *)v234 = 2048;
      *(void *)&v234[2] = v162;
      v130 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
    }
    uint64_t v163 = v126;
    os_log_type_t v164 = v127;
LABEL_215:
    _os_log_impl(&dword_1830D4000, v163, v164, v130, type, 0x2Au);
    goto LABEL_216;
  }
  __int16 v144 = v212;
  uint64_t v5 = v213;
  if ((*(unsigned char *)(*v29 + 198) & 1) == 0)
  {
LABEL_219:
    if (gLogDatapath)
    {
      size_t v179 = __nwlog_obj();
      if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v180 = *v29 + 114;
        uint64_t v181 = *(void *)(a2 + 64);
        if (v181) {
          LODWORD(v181) = (*(unsigned __int8 *)(v181 + 66) >> 6) & 1;
        }
        int v182 = *(unsigned __int8 *)(a2 + 186) >> 7;
        *(_DWORD *)os_log_type_t type = 136447234;
        *(void *)&os_log_type_t type[4] = "nw_protocol_http_encoding_get_input_frames_block_invoke";
        *(_WORD *)&type[12] = 2082;
        *(void *)&type[14] = v180;
        *(_WORD *)&type[22] = 2080;
        v233 = " ";
        *(_WORD *)v234 = 1024;
        *(_DWORD *)&v234[2] = v181;
        *(_WORD *)&v234[6] = 1024;
        *(_DWORD *)&v234[8] = v182;
        _os_log_impl(&dword_1830D4000, v179, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%smetadata complete %{BOOL}d, connection complete %{BOOL}d", type, 0x2Cu);
      }
    }
  }
LABEL_220:
  uint64_t v166 = *(void *)(a2 + 64);
  if (v166 && (*(unsigned char *)(v166 + 66) & 0x40) != 0)
  {
    uint64_t v167 = **(void **)(*(void *)(*(void *)&buf[8] + 48) + 8);
    if (v167) {
      nw_frame_inherit_metadata(a2, v167, 1);
    }
    *(_WORD *)(*v29 + 648) |= 0x80u;
    nw_http_encoding_check_http1_content_length(*v29);
  }
  v216[0] = MEMORY[0x1E4F143A8];
  v216[1] = 0x40000000;
  uint64_t v217 = (uint64_t (*)(void *))___ZL42nw_protocol_http_encoding_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_29;
  char v218 = &unk_1E523FEA8;
  long long v222 = *(_OWORD *)(v144 + 7);
  v219 = &v225;
  uint64_t v220 = buf;
  uint64_t v223 = v144[9];
  uint64_t v221 = v144[5];
  uint64_t v168 = *(void *)(*(void *)&buf[8] + 40);
  do
  {
    if (!v168) {
      break;
    }
    uint64_t v169 = *(void *)(v168 + 32);
    char v170 = v217(v216);
    uint64_t v168 = v169;
  }
  while ((v170 & 1) != 0);
  uint64_t v171 = (uint64_t *)(*(void *)&buf[8] + 40);
  if (gLogDatapath)
  {
    uint64_t v178 = __nwlog_obj();
    if (os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)os_log_type_t type = 136446210;
      *(void *)&os_log_type_t type[4] = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_1830D4000, v178, OS_LOG_TYPE_DEBUG, "%{public}s called", type, 0xCu);
    }
  }
  *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
  *(void *)&os_log_type_t type[8] = 0x40000000;
  *(void *)&os_log_type_t type[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_33485;
  v233 = (const char *)&__block_descriptor_tmp_41_33486;
  *(void *)v234 = v171;
  v234[8] = 0;
  uint64_t v172 = *v171;
  do
  {
    if (!v172) {
      break;
    }
    uint64_t v173 = *(void *)(v172 + 32);
    char v174 = (*(uint64_t (**)(unsigned char *))&type[16])(type);
    uint64_t v172 = v173;
  }
  while ((v174 & 1) != 0);
LABEL_232:
  BOOL v159 = v57 >= 0;
  _Block_object_dispose(&v225, 8);
  _Block_object_dispose(buf, 8);
  if (v5) {
LABEL_233:
  }
    os_release(v5);
  return v159;
}

uint64_t ___ZL42nw_protocol_http_encoding_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_34(uint64_t a1, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(*(void *)(a1 + 32) + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v5 = __nwlog_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a1 + 32) + 114;
        int v7 = 136447234;
        char v8 = "nw_protocol_http_encoding_get_input_frames_block_invoke";
        __int16 v9 = 2082;
        uint64_t v10 = v6;
        __int16 v11 = 2080;
        uint64_t v12 = " ";
        __int16 v13 = 2048;
        id v14 = a2;
        __int16 v15 = 1024;
        int v16 = nw_frame_unclaimed_length(a2);
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sframe %p unclaimed length %u", (uint8_t *)&v7, 0x30u);
      }
    }
  }
  return 1;
}

void ___ZL33nw_http_encoding_get_content_typeP25nw_protocol_http_encodingP20nw_protocol_metadata_block_invoke(uint64_t a1, char *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (!strcasecmp(a2, "gzip") || !strcasecmp(a2, "x-gzip"))
    {
      int v6 = 2;
    }
    else if (!strcasecmp(a2, "deflate"))
    {
      int v6 = 3;
    }
    else if (!strcasecmp(a2, "br"))
    {
      int v6 = 5;
    }
    else
    {
      if ((*(unsigned char *)(*(void *)(a1 + 40) + 198) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v4 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          uint64_t v5 = *(void *)(a1 + 40) + 114;
          int v7 = 136446978;
          char v8 = "nw_http_encoding_get_content_type_block_invoke";
          __int16 v9 = 2082;
          uint64_t v10 = v5;
          __int16 v11 = 2080;
          uint64_t v12 = " ";
          __int16 v13 = 2080;
          id v14 = a2;
          _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sunknown encoding type %s, ignoring", (uint8_t *)&v7, 0x2Au);
        }
      }
      int v6 = 0;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
  }
}

uint64_t ___ZL42nw_protocol_http_encoding_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_25(void *a1, size_t size)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[5];
  char v5 = *(unsigned char *)(v4 + 198);
  if ((v5 & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v12 = __nwlog_obj();
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
      uint64_t v4 = a1[5];
      if (v13)
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v26 = "nw_protocol_http_encoding_get_input_frames_block_invoke";
        __int16 v27 = 2082;
        uint64_t v28 = (char *)(v4 + 114);
        __int16 v29 = 2080;
        uint64_t v30 = " ";
        __int16 v31 = 2048;
        size_t v32 = size;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sdecoder asking for frame of size %zu", buf, 0x2Au);
        uint64_t v4 = a1[5];
      }
      if (!v4)
      {
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_encoding_create_inbound_frame";
        id v14 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v23 = 0;
        if (!__nwlog_fault(v14, &type, &v23)) {
          goto LABEL_41;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v26 = "nw_http_encoding_create_inbound_frame";
            uint64_t v17 = "%{public}s called with null http_encoding";
LABEL_40:
            _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
            goto LABEL_41;
          }
          goto LABEL_41;
        }
        if (!v23)
        {
          uint64_t v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v26 = "nw_http_encoding_create_inbound_frame";
            uint64_t v17 = "%{public}s called with null http_encoding, backtrace limit exceeded";
            goto LABEL_40;
          }
          goto LABEL_41;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v22 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v26 = "nw_http_encoding_create_inbound_frame";
            uint64_t v17 = "%{public}s called with null http_encoding, no backtrace";
            goto LABEL_40;
          }
          goto LABEL_41;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_http_encoding_create_inbound_frame";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          uint64_t v21 = "%{public}s called with null http_encoding, dumping backtrace:%{public}s";
          goto LABEL_30;
        }
        goto LABEL_31;
      }
    }
    char v5 = *(unsigned char *)(v4 + 198);
  }
  if ((v5 & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v18 = __nwlog_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v26 = "nw_http_encoding_create_inbound_frame";
        __int16 v27 = 2082;
        uint64_t v28 = (char *)(v4 + 114);
        __int16 v29 = 2080;
        uint64_t v30 = " ";
        __int16 v31 = 1024;
        LODWORD(v32) = size;
        _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled for size %u", buf, 0x26u);
      }
    }
  }
  BOOL frame = nw_frame_cache_create_frame((uint64_t *)(v4 + 432), size);
  if (frame)
  {
    uint64_t v7 = frame;
    *(void *)(frame + 16) = 0;
    char v8 = *(BOOL **)(v4 + 568);
    *(void *)(frame + 24) = v8;
    BOOL *v8 = frame;
    *(void *)(v4 + 568) = frame + 16;
    *(void *)(frame + 80) = nw_http_encoding_inbound_frame_finalizer;
    *(void *)(frame + 88) = v4;
    goto LABEL_8;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v26 = "nw_http_encoding_create_inbound_frame";
  id v14 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v14, &type, &v23)) {
    goto LABEL_41;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v23)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_encoding_create_inbound_frame";
        uint64_t v17 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v20 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_http_encoding_create_inbound_frame";
        uint64_t v17 = "%{public}s called with null frame, no backtrace";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v26 = "nw_http_encoding_create_inbound_frame";
      __int16 v27 = 2082;
      uint64_t v28 = backtrace_string;
      uint64_t v21 = "%{public}s called with null frame, dumping backtrace:%{public}s";
LABEL_30:
      _os_log_impl(&dword_1830D4000, v15, v16, v21, buf, 0x16u);
    }
LABEL_31:
    free(backtrace_string);
    goto LABEL_41;
  }
  uint64_t v15 = __nwlog_obj();
  os_log_type_t v16 = type;
  if (os_log_type_enabled(v15, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_http_encoding_create_inbound_frame";
    uint64_t v17 = "%{public}s called with null frame";
    goto LABEL_40;
  }
LABEL_41:
  if (v14) {
    free(v14);
  }
  uint64_t v7 = 0;
LABEL_8:
  nw_frame_inherit_metadata(a1[6], v7, 0);
  uint64_t v9 = *(void *)(a1[4] + 8);
  *(void *)(v7 + 32) = 0;
  uint64_t v10 = *(uint64_t **)(v9 + 48);
  *(void *)(v7 + 40) = v10;
  *uint64_t v10 = v7;
  *(void *)(v9 + 48) = v7 + 32;
  return nw_frame_unclaimed_bytes(v7, 0);
}

uint64_t ___ZL42nw_protocol_http_encoding_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_29(void *a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = nw_frame_unclaimed_length((_DWORD *)a2);
  uint64_t v6 = a1[7];
  if ((*(unsigned char *)(v6 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v28 = __nwlog_obj();
      BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG);
      uint64_t v6 = a1[7];
      if (v29)
      {
        *(_DWORD *)buf = 136446978;
        int v38 = "nw_protocol_http_encoding_get_input_frames_block_invoke";
        __int16 v39 = 2082;
        BOOL v40 = (const char *)(v6 + 114);
        __int16 v41 = 2080;
        uint64_t v42 = (uint64_t)" ";
        __int16 v43 = 1024;
        LODWORD(v44) = v5;
        _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sunclaimed length %u", buf, 0x26u);
        uint64_t v6 = a1[7];
      }
    }
  }
  if (v5 >= *(_DWORD *)(*(void *)(a1[4] + 8) + 24)) {
    unsigned int v5 = *(_DWORD *)(*(void *)(a1[4] + 8) + 24);
  }
  if ((*(unsigned char *)(v6 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v31 = a1[7] + 114;
        *(_DWORD *)buf = 136446978;
        int v38 = "nw_protocol_http_encoding_get_input_frames_block_invoke";
        __int16 v39 = 2082;
        BOOL v40 = (const char *)v31;
        __int16 v41 = 2080;
        uint64_t v42 = (uint64_t)" ";
        __int16 v43 = 1024;
        LODWORD(v44) = v5;
        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%u bytes to claim", buf, 0x26u);
      }
    }
  }
  nw_frame_claim(a2, v4, v5, 0);
  nw_frame_collapse(a2);
  nw_frame_unclaim(a2, v7, v5, 0);
  *(void *)(*(void *)(a1[4] + 8) + 24) -= v5;
  if ((*(unsigned char *)(a1[7] + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      size_t v32 = __nwlog_obj();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v33 = a1[7] + 114;
        uint64_t v34 = *(void *)(*(void *)(a1[4] + 8) + 24);
        *(_DWORD *)buf = 136446978;
        int v38 = "nw_protocol_http_encoding_get_input_frames_block_invoke";
        __int16 v39 = 2082;
        BOOL v40 = (const char *)v33;
        __int16 v41 = 2080;
        uint64_t v42 = (uint64_t)" ";
        __int16 v43 = 2048;
        uint64_t v44 = v34;
        _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%zu bytes decoded", buf, 0x2Au);
      }
    }
  }
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void **)(a2 + 40);
  char v8 = (void *)(a2 + 32);
  if (v9)
  {
    *(void *)(v9 + 40) = v10;
    uint64_t v10 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1[5] + 8) + 48) = v10;
  }
  *uint64_t v10 = v9;
  void *v8 = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v11 = a1[9];
  uint64_t v12 = *(uint64_t **)(v11 + 8);
  *(void *)(a2 + 40) = v12;
  uint64_t *v12 = a2;
  *(void *)(v11 + 8) = v8;
  uint64_t v13 = *(void *)(a1[6] + 8);
  uint64_t v14 = *(unsigned int *)(v13 + 24) + 1;
  uint64_t v15 = v14 << 31 >> 31;
  *(_DWORD *)(v13 + 24) = v14;
  if (v15 != v14 || v15 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v16 = *(unsigned int *)(*(void *)(a1[6] + 8) + 24);
    *(_DWORD *)buf = 136446978;
    int v38 = "nw_protocol_http_encoding_get_input_frames_block_invoke";
    __int16 v39 = 2082;
    BOOL v40 = "count";
    __int16 v41 = 2048;
    uint64_t v42 = 1;
    __int16 v43 = 2048;
    uint64_t v44 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v17, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v20 = *(unsigned int *)(*(void *)(a1[6] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          int v38 = "nw_protocol_http_encoding_get_input_frames_block_invoke";
          __int16 v39 = 2082;
          BOOL v40 = "count";
          __int16 v41 = 2048;
          uint64_t v42 = 1;
          __int16 v43 = 2048;
          uint64_t v44 = v20;
          uint64_t v21 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_27:
          _os_log_impl(&dword_1830D4000, v18, v19, v21, buf, 0x2Au);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = gLogObj;
        os_log_type_t v19 = type;
        BOOL v23 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v23)
          {
            uint64_t v24 = *(unsigned int *)(*(void *)(a1[6] + 8) + 24);
            *(_DWORD *)buf = 136447234;
            int v38 = "nw_protocol_http_encoding_get_input_frames_block_invoke";
            __int16 v39 = 2082;
            BOOL v40 = "count";
            __int16 v41 = 2048;
            uint64_t v42 = 1;
            __int16 v43 = 2048;
            uint64_t v44 = v24;
            __int16 v45 = 2082;
            uint64_t v46 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(backtrace_string);
          goto LABEL_28;
        }
        if (v23)
        {
          uint64_t v26 = *(unsigned int *)(*(void *)(a1[6] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          int v38 = "nw_protocol_http_encoding_get_input_frames_block_invoke";
          __int16 v39 = 2082;
          BOOL v40 = "count";
          __int16 v41 = 2048;
          uint64_t v42 = 1;
          __int16 v43 = 2048;
          uint64_t v44 = v26;
          uint64_t v21 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_27;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v25 = *(unsigned int *)(*(void *)(a1[6] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          int v38 = "nw_protocol_http_encoding_get_input_frames_block_invoke";
          __int16 v39 = 2082;
          BOOL v40 = "count";
          __int16 v41 = 2048;
          uint64_t v42 = 1;
          __int16 v43 = 2048;
          uint64_t v44 = v25;
          uint64_t v21 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_27;
        }
      }
    }
LABEL_28:
    if (v17) {
      free(v17);
    }
    *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = -1;
  }
  return 1;
}

double __nw_protocol_http_encoding_identifier_block_invoke()
{
  strcpy((char *)nw_protocol_http_encoding_identifier::protocol_identifier, "http_encoding");
  *(void *)&double result = 0x100000005;
  qword_1E8F6AA98 = 0x100000005;
  return result;
}

BOOL nw_link_set_flow_control_status(void *a1, int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    int v5 = *((_DWORD *)v3 + 2);
    *((_DWORD *)v3 + 2) = a2;
    BOOL v6 = v5 != a2;
    goto LABEL_3;
  }
  char v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v19 = "nw_link_set_flow_control_status";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_link_set_flow_control_status";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null link_info", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v19 = "nw_link_set_flow_control_status";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null link_info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_link_set_flow_control_status";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null link_info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_link_set_flow_control_status";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null link_info, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
  BOOL v6 = 0;
LABEL_3:

  return v6;
}

void nw_link_set_local_congestion_info(_DWORD *a1, int a2, int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *a1 = a2;
    a1[1] = a3;
    return;
  }
  id v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v13 = "nw_link_set_local_congestion_info";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v13 = "nw_link_set_local_congestion_info";
        uint64_t v7 = "%{public}s called with null link_congestion_info";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v13 = "nw_link_set_local_congestion_info";
            __int16 v14 = 2082;
            os_log_type_t v15 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null link_congestion_info, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v9) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v13 = "nw_link_set_local_congestion_info";
        uint64_t v7 = "%{public}s called with null link_congestion_info, no backtrace";
        goto LABEL_17;
      }
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v13 = "nw_link_set_local_congestion_info";
        uint64_t v7 = "%{public}s called with null link_congestion_info, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v4) {
    free(v4);
  }
}

double __nw_protocol_webtransport_identifier_block_invoke()
{
  unk_1E8F79795 = 0;
  unk_1E8F7978D = 0;
  dword_1E8F7979C = 0;
  strcpy((char *)nw_protocol_webtransport_identifier::protocol_identifier, "webtransport");
  *(void *)&double result = 0x200000004;
  qword_1E8F797A0 = 0x200000004;
  return result;
}

BOOL nw_protocol_webtransport_create(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (char *)malloc_type_calloc(1uLL, 0x228uLL, 0xEAFB8F1AuLL);
  if (!v7)
  {
    uint64_t v12 = __nwlog_obj();
    os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "strict_calloc";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = 1;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v21 = 552;
    os_log_type_t v13 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v13);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v13);
  }
  bzero(v7, 0x228uLL);
  *((void *)v7 + 2) = a1;
  if (nw_protocol_webtransport_session_callbacks(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_webtransport_session_callbacks(void)::onceToken, &__block_literal_global_18_33808);
  }
  *((void *)v7 + 3) = &nw_protocol_webtransport_session_callbacks(void)::protocol_callbacks;
  *((void *)v7 + 5) = v7;
  if (nw_protocol_webtransport_session_get_listen_callbacks(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_webtransport_session_get_listen_callbacks(void)::onceToken, &__block_literal_global_68);
  }
  *((void *)v7 + 8) = &nw_protocol_webtransport_session_get_listen_callbacks(void)::listen_protocol_callbacks;
  *((void *)v7 + 11) = v7;
  *((void *)v7 + 12) = 0;
  *((void *)v7 + 13) = v7 + 96;
  *((void *)v7 + 14) = 0;
  *((void *)v7 + 17) = 0;
  *((void *)v7 + 18) = -1;
  *((void *)v7 + 15) = v7 + 112;
  *((void *)v7 + 16) = 0;
  *((void *)v7 + 19) = 0;
  *((void *)v7 + 20) = 0;
  *((_WORD *)v7 + 84) = 0;
  if (a3) {
    a3 = os_retain(a3);
  }
  char v8 = v7[368];
  if (v8)
  {
    BOOL v9 = (void *)*((void *)v7 + 45);
    if (v9)
    {
      os_release(v9);
      char v8 = v7[368];
    }
  }
  *((void *)v7 + 45) = a3;
  v7[368] = v8 | 1;
  *((_DWORD *)v7 + 112) = 2;
  *((void *)v7 + 55) = 0;
  *((void *)v7 + 22) = -1;
  v7[548] = v7[548] & 0xFE | nw_parameters_get_server_mode(a4);
  *((void *)v7 + 23) = 0;
  *((void *)v7 + 24) = 0;
  *((void *)v7 + 41) = 0;
  *((void *)v7 + 42) = v7 + 328;
  *((_DWORD *)v7 + 114) = 0;
  if (nw_parameters_get_logging_disabled((uint64_t)a4)) {
    char v10 = 2;
  }
  else {
    char v10 = 0;
  }
  v7[548] = v7[548] & 0xFD | v10;
  *((void *)v7 + 49) = nw_parameters_copy_context(a4);
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000;
  uint64_t v21 = (uint64_t)v7;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = __nw_protocol_webtransport_create_block_invoke;
  aBlock[3] = &unk_1E52401D8;
  void aBlock[4] = buf;
  *((void *)v7 + 54) = _Block_copy(aBlock);
  _Block_object_dispose(buf, 8);
  if ((v7[548] & 2) == 0)
  {
    if (gLogDatapath)
    {
      __int16 v14 = __nwlog_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v15 = v7 + 464;
        int v16 = *((_DWORD *)v7 + 115);
        uint64_t v17 = " ";
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_create";
        *(_WORD *)&buf[12] = 2082;
        char v18 = v7[548];
        if (!v7) {
          uint64_t v17 = "";
        }
        *(_DWORD *)buf = 136447234;
        if (!v7) {
          os_log_type_t v15 = "";
        }
        *(void *)&buf[14] = v15;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v21 = (uint64_t)v17;
        __int16 v22 = 1024;
        int v23 = v16;
        __int16 v24 = 1024;
        int v25 = v18 & 1;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Created webtransport, server mode: %d", buf, 0x2Cu);
      }
    }
  }
  return (BOOL)v7;
}

uint64_t __nw_protocol_webtransport_create_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

void ___ZL53nw_protocol_webtransport_session_get_listen_callbacksv_block_invoke()
{
  nw_protocol_webtransport_session_get_listen_callbacks(void)::listen_protocol_callbacks = (uint64_t)nw_protocol_webtransport_session_listen_protocol_new_flow;
  qword_1E8F79C18 = (uint64_t)nw_protocol_webtransport_session_listen_protocol_disconnected;
}

uint64_t ___ZL33nw_webtransport_session_terminateP23nw_webtransport_sessioni_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v4 = object;
    int v5 = *(_DWORD *)(a1 + 32);
    os_log_type_t v6 = *(void **)(object + 48);
    if (v5) {
      nw_protocol_error(*(void **)(object + 48), object);
    }
    nw_protocol_disconnected(v6, v4);
    return 1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_webtransport_stream_terminate";
  char v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v8, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_webtransport_stream_terminate";
      os_log_type_t v11 = "%{public}s called with null webtransport_stream";
      goto LABEL_19;
    }
    if (!v14)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_webtransport_stream_terminate";
      os_log_type_t v11 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v17 = "nw_webtransport_stream_terminate";
        __int16 v18 = 2082;
        os_log_type_t v19 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_20;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_webtransport_stream_terminate";
      os_log_type_t v11 = "%{public}s called with null webtransport_stream, no backtrace";
LABEL_19:
      _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  return 1;
}

uint64_t __Block_byref_object_copy__33867(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__33868(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t ___ZL57nw_protocol_webtransport_session_listen_protocol_new_flowP18nw_listen_protocolP11nw_endpointP13nw_parameters_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 32);
    return nw_protocol_connect(v3, v2);
  }
  return result;
}

void ___ZL42nw_protocol_webtransport_session_callbacksv_block_invoke()
{
  qword_1E8F797C0 = (uint64_t)nw_protocol_default_replace_input_handler;
  qword_1E8F798B8 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F798A8 = (uint64_t)nw_protocol_default_get_message_properties;
  qword_1E8F79818 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F79830 = (uint64_t)nw_protocol_default_get_local;
  qword_1E8F79828 = (uint64_t)nw_protocol_default_get_path;
  qword_1E8F79858 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F79878 = (uint64_t)nw_protocol_default_get_output_local;
  qword_1E8F79880 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F798B0 = (uint64_t)nw_protocol_default_reset;
  qword_1E8F79860 = (uint64_t)nw_protocol_default_supports_external_data;
  qword_1E8F79888 = (uint64_t)nw_protocol_default_waiting_for_output;
  qword_1E8F79840 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F79848 = (uint64_t)nw_protocol_default_unregister_notification;
  nw_protocol_webtransport_session_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_webtransport_session_add_input_handler;
  qword_1E8F797B8 = (uint64_t)nw_protocol_webtransport_session_remove_input_handler;
  qword_1E8F797C8 = (uint64_t)nw_protocol_webtransport_session_connect;
  qword_1E8F797D0 = (uint64_t)nw_protocol_webtransport_session_disconnect;
  qword_1E8F797D8 = (uint64_t)nw_protocol_webtransport_session_connected;
  qword_1E8F797E0 = (uint64_t)nw_protocol_webtransport_session_disconnected;
  qword_1E8F797E8 = (uint64_t)nw_protocol_webtransport_session_error;
  qword_1E8F797F0 = (uint64_t)nw_protocol_webtransport_session_input_available;
  qword_1E8F797F8 = (uint64_t)nw_protocol_webtransport_session_output_available;
  qword_1E8F79800 = (uint64_t)nw_protocol_webtransport_session_get_input_frames;
  qword_1E8F79808 = (uint64_t)nw_protocol_webtransport_session_get_output_frames;
  qword_1E8F79810 = (uint64_t)nw_protocol_webtransport_session_finalize_output_frames;
  qword_1E8F79820 = (uint64_t)nw_protocol_webtransport_session_get_parameters;
  qword_1E8F79838 = (uint64_t)nw_protocol_webtransport_session_get_remote_endpoint;
  qword_1E8F79850 = (uint64_t)nw_protocol_webtransport_session_notify;
  qword_1E8F79868 = (uint64_t)nw_protocol_webtransport_session_input_finished;
  qword_1E8F79870 = (uint64_t)nw_protocol_webtransport_session_output_finished;
  qword_1E8F79890 = (uint64_t)nw_protocol_webtransport_session_copy_info;
  qword_1E8F79898 = (uint64_t)nw_protocol_webtransport_session_add_listen_handler;
  qword_1E8F798A0 = (uint64_t)nw_protocol_webtransport_session_remove_listen_handler;
}

BOOL nw_protocol_webtransport_session_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2, char a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v9, &type, &v21)) {
      goto LABEL_46;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
        uint64_t v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (!v16) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
        uint64_t v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
        __int16 v25 = 2082;
        uint64_t v26 = backtrace_string;
        uint64_t v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v10, v11, v17, buf, 0x16u);
      }
LABEL_33:
      free(backtrace_string);
      goto LABEL_46;
    }
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
    uint64_t v12 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
LABEL_46:
    if (v9) {
      free(v9);
    }
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v9, &type, &v21)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
      uint64_t v12 = "%{public}s called with null webtransport_session";
      goto LABEL_45;
    }
    if (!v21)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
      uint64_t v12 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
        __int16 v25 = 2082;
        uint64_t v26 = backtrace_string;
        uint64_t v17 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (!v18) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
    uint64_t v12 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_45;
  }
  if ((handle[137] & 2) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v13 = __nwlog_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        int v14 = handle[115];
        *(_DWORD *)buf = 136446978;
        __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
        __int16 v25 = 2082;
        uint64_t v26 = (char *)(handle + 116);
        __int16 v27 = 2080;
        uint64_t v28 = " ";
        __int16 v29 = 1024;
        int v30 = v14;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }
  }
  if (*((void *)handle + 50))
  {
    if ((handle[137] & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = gLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v8 = handle[115];
        *(_DWORD *)buf = 136446978;
        __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
        __int16 v25 = 2082;
        uint64_t v26 = (char *)(handle + 116);
        __int16 v27 = 2080;
        uint64_t v28 = " ";
        __int16 v29 = 1024;
        int v30 = v8;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Already have a listen handler, ignoring add", buf, 0x26u);
        return 0;
      }
      return result;
    }
    return 0;
  }
  *((void *)handle + 50) = a2;
  a2->protocol_handler = (nw_protocol *)handle;
  if (a3)
  {
    *((unsigned char *)handle + 548) |= 8u;
    nw_protocol_remove_instance((uint64_t)handle);
  }
  BOOL result = 1;
  if ((handle[137] & 2) == 0 && gLogDatapath)
  {
    os_log_type_t v19 = __nwlog_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      int v20 = handle[115];
      *(_DWORD *)buf = 136447234;
      __int16 v24 = "nw_protocol_webtransport_session_add_listen_handler";
      __int16 v25 = 2082;
      uint64_t v26 = (char *)(handle + 116);
      __int16 v27 = 2080;
      uint64_t v28 = " ";
      __int16 v29 = 1024;
      int v30 = v20;
      __int16 v31 = 2048;
      size_t v32 = a2;
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> added protocol listen handler %p", buf, 0x30u);
    }
    return 1;
  }
  return result;
}

uint64_t nw_protocol_webtransport_session_copy_info(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3)
    {
      if ((*(unsigned char *)(v3 + 548) & 2) == 0 && gLogDatapath)
      {
        os_log_type_t v10 = __nwlog_obj();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          int v11 = *(_DWORD *)(v3 + 460);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v19 = "nw_protocol_webtransport_session_copy_info";
          __int16 v20 = 2082;
          char v21 = (char *)(v3 + 464);
          __int16 v22 = 2080;
          int v23 = " ";
          __int16 v24 = 1024;
          int v25 = v11;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
      return nw_protocol_common_copy_info(a1, a2);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v19 = "nw_protocol_webtransport_session_copy_info";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v6, &type, &v16)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_protocol_webtransport_session_copy_info";
        BOOL v9 = "%{public}s called with null webtransport_session";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v16)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_protocol_webtransport_session_copy_info";
        BOOL v9 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v15 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_protocol_webtransport_session_copy_info";
        BOOL v9 = "%{public}s called with null webtransport_session, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v19 = "nw_protocol_webtransport_session_copy_info";
      __int16 v20 = 2082;
      char v21 = backtrace_string;
      int v14 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v19 = "nw_protocol_webtransport_session_copy_info";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v6, &type, &v16)) {
    goto LABEL_36;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_protocol_webtransport_session_copy_info";
        BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_protocol_webtransport_session_copy_info";
        BOOL v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v19 = "nw_protocol_webtransport_session_copy_info";
      __int16 v20 = 2082;
      char v21 = backtrace_string;
      int v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v7, v8, v14, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    goto LABEL_36;
  }
  uint64_t v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v19 = "nw_protocol_webtransport_session_copy_info";
    BOOL v9 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
  }
LABEL_36:
  if (v6) {
    free(v6);
  }
  return 0;
}

void nw_protocol_webtransport_session_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_webtransport_session_output_finished";
    int v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_webtransport_session_output_finished";
      os_log_type_t v8 = "%{public}s called with null protocol";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_webtransport_session_output_finished";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_35:
        if (!v5) {
          return;
        }
LABEL_36:
        free(v5);
        return;
      }
      if (!v10) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_webtransport_session_output_finished";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_webtransport_session_output_finished";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_34:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_35;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((handle[137] & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v4 = handle[115];
        *(_DWORD *)buf = 136446978;
        char v16 = "nw_protocol_webtransport_session_output_finished";
        __int16 v17 = 2082;
        BOOL v18 = (char *)(handle + 116);
        __int16 v19 = 2080;
        __int16 v20 = " ";
        __int16 v21 = 1024;
        int v22 = v4;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_webtransport_session_output_finished";
  int v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13)) {
    goto LABEL_35;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_webtransport_session_output_finished";
    os_log_type_t v8 = "%{public}s called with null webtransport_session";
    goto LABEL_34;
  }
  if (!v13)
  {
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_webtransport_session_output_finished";
    os_log_type_t v8 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_34;
  }
  int v11 = (char *)__nw_create_backtrace_string();
  os_log_type_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  BOOL v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_webtransport_session_output_finished";
    os_log_type_t v8 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_34;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    char v16 = "nw_protocol_webtransport_session_output_finished";
    __int16 v17 = 2082;
    BOOL v18 = v11;
    _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5) {
    goto LABEL_36;
  }
}

void nw_protocol_webtransport_session_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_webtransport_session_input_finished";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v3, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_webtransport_session_input_finished";
      os_log_type_t v6 = "%{public}s called with null protocol";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_webtransport_session_input_finished";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v3) {
          return;
        }
LABEL_37:
        free(v3);
        return;
      }
      if (!v10) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_webtransport_session_input_finished";
      os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      char v16 = "nw_protocol_webtransport_session_input_finished";
      os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_36;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((handle[137] & 2) == 0 && gLogDatapath)
    {
      os_log_type_t v7 = __nwlog_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v8 = handle[115];
        *(_DWORD *)buf = 136446978;
        char v16 = "nw_protocol_webtransport_session_input_finished";
        __int16 v17 = 2082;
        BOOL v18 = (char *)(handle + 116);
        __int16 v19 = 2080;
        __int16 v20 = " ";
        __int16 v21 = 1024;
        int v22 = v8;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_webtransport_session_input_finished";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (!__nwlog_fault(v3, &type, &v13)) {
    goto LABEL_36;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_webtransport_session_input_finished";
    os_log_type_t v6 = "%{public}s called with null webtransport_session";
    goto LABEL_35;
  }
  if (!v13)
  {
    int v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_webtransport_session_input_finished";
    os_log_type_t v6 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_35;
  }
  int v11 = (char *)__nw_create_backtrace_string();
  int v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  BOOL v12 = os_log_type_enabled(v4, type);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    char v16 = "nw_protocol_webtransport_session_input_finished";
    os_log_type_t v6 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_35;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    char v16 = "nw_protocol_webtransport_session_input_finished";
    __int16 v17 = 2082;
    BOOL v18 = v11;
    _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v3) {
    goto LABEL_37;
  }
}

void nw_protocol_webtransport_session_notify(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_webtransport_session_notify";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v7, &type, &v17)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "nw_protocol_webtransport_session_notify";
      BOOL v10 = "%{public}s called with null protocol";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v20 = "nw_protocol_webtransport_session_notify";
          __int16 v21 = 2082;
          int v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_37:
        if (!v7) {
          return;
        }
LABEL_38:
        free(v7);
        return;
      }
      if (!v14) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "nw_protocol_webtransport_session_notify";
      BOOL v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "nw_protocol_webtransport_session_notify";
      BOOL v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_36:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_37;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    if ((*(unsigned char *)(v4 + 548) & 2) == 0 && gLogDatapath)
    {
      int v11 = __nwlog_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *(_DWORD *)(v4 + 460);
        *(_DWORD *)buf = 136446978;
        __int16 v20 = "nw_protocol_webtransport_session_notify";
        __int16 v21 = 2082;
        int v22 = (char *)(v4 + 464);
        __int16 v23 = 2080;
        __int16 v24 = " ";
        __int16 v25 = 1024;
        int v26 = v12;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }
    nw_protocol_common_notify(a1, a2, a3);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v20 = "nw_protocol_webtransport_session_notify";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v7, &type, &v17)) {
    goto LABEL_37;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_webtransport_session_notify";
    BOOL v10 = "%{public}s called with null webtransport_session";
    goto LABEL_36;
  }
  if (!v17)
  {
    int v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_webtransport_session_notify";
    BOOL v10 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_36;
  }
  BOOL v15 = (char *)__nw_create_backtrace_string();
  int v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  BOOL v16 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (!v16) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_webtransport_session_notify";
    BOOL v10 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_36;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v20 = "nw_protocol_webtransport_session_notify";
    __int16 v21 = 2082;
    int v22 = v15;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v15);
  if (v7) {
    goto LABEL_38;
  }
}

uint64_t nw_protocol_webtransport_session_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[45];
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_webtransport_session_get_remote_endpoint";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_webtransport_session_get_remote_endpoint";
        os_log_type_t v6 = "%{public}s called with null webtransport_session";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_webtransport_session_get_remote_endpoint";
        os_log_type_t v6 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_webtransport_session_get_remote_endpoint";
        os_log_type_t v6 = "%{public}s called with null webtransport_session, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_webtransport_session_get_remote_endpoint";
      __int16 v15 = 2082;
      BOOL v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_protocol_webtransport_session_get_remote_endpoint";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_webtransport_session_get_remote_endpoint";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_webtransport_session_get_remote_endpoint";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_webtransport_session_get_remote_endpoint";
      __int16 v15 = 2082;
      BOOL v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_webtransport_session_get_remote_endpoint";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_webtransport_session_get_parameters(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[43];
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_webtransport_session_get_parameters";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_webtransport_session_get_parameters";
        os_log_type_t v6 = "%{public}s called with null webtransport_session";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_webtransport_session_get_parameters";
        os_log_type_t v6 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_webtransport_session_get_parameters";
        os_log_type_t v6 = "%{public}s called with null webtransport_session, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_webtransport_session_get_parameters";
      __int16 v15 = 2082;
      BOOL v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_protocol_webtransport_session_get_parameters";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_webtransport_session_get_parameters";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_webtransport_session_get_parameters";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_webtransport_session_get_parameters";
      __int16 v15 = 2082;
      BOOL v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_webtransport_session_get_parameters";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_webtransport_session_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_webtransport_session_finalize_output_frames";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_webtransport_session_finalize_output_frames";
      os_log_type_t v9 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_protocol_webtransport_session_finalize_output_frames";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_35:
        if (!v6) {
          return 0;
        }
LABEL_36:
        free(v6);
        return 0;
      }
      if (!v11) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_webtransport_session_finalize_output_frames";
      os_log_type_t v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_protocol_webtransport_session_finalize_output_frames";
      os_log_type_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_34:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_35;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((handle[137] & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v4 = handle[115];
        *(_DWORD *)buf = 136446978;
        uint64_t v17 = "nw_protocol_webtransport_session_finalize_output_frames";
        __int16 v18 = 2082;
        __int16 v19 = (char *)(handle + 116);
        __int16 v20 = 2080;
        __int16 v21 = " ";
        __int16 v22 = 1024;
        int v23 = v4;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> called, ignoring", buf, 0x26u);
      }
    }
    return 0;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_protocol_webtransport_session_finalize_output_frames";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v6, &type, &v14)) {
    goto LABEL_35;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_webtransport_session_finalize_output_frames";
    os_log_type_t v9 = "%{public}s called with null webtransport_session";
    goto LABEL_34;
  }
  if (!v14)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_webtransport_session_finalize_output_frames";
    os_log_type_t v9 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_34;
  }
  int v12 = (char *)__nw_create_backtrace_string();
  os_log_type_t v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  BOOL v13 = os_log_type_enabled(v7, type);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_protocol_webtransport_session_finalize_output_frames";
    os_log_type_t v9 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_34;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v17 = "nw_protocol_webtransport_session_finalize_output_frames";
    __int16 v18 = 2082;
    __int16 v19 = v12;
    _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v12);
  if (v6) {
    goto LABEL_36;
  }
  return 0;
}

uint64_t nw_protocol_webtransport_session_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_protocol_webtransport_session_get_output_frames";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "nw_protocol_webtransport_session_get_output_frames";
      BOOL v13 = "%{public}s called with null protocol";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v21 = "nw_protocol_webtransport_session_get_output_frames";
          __int16 v22 = 2082;
          int v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_35:
        if (!v10) {
          return 0;
        }
LABEL_36:
        free(v10);
        return 0;
      }
      if (!v15) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "nw_protocol_webtransport_session_get_output_frames";
      BOOL v13 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "nw_protocol_webtransport_session_get_output_frames";
      BOOL v13 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_34:
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    goto LABEL_35;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((handle[137] & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v8 = handle[115];
        *(_DWORD *)buf = 136446978;
        __int16 v21 = "nw_protocol_webtransport_session_get_output_frames";
        __int16 v22 = 2082;
        int v23 = (char *)(handle + 116);
        __int16 v24 = 2080;
        __int16 v25 = " ";
        __int16 v26 = 1024;
        int v27 = v8;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> called, ignoring", buf, 0x26u);
      }
    }
    return 0;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v21 = "nw_protocol_webtransport_session_get_output_frames";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (!__nwlog_fault(v10, &type, &v18)) {
    goto LABEL_35;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_protocol_webtransport_session_get_output_frames";
    BOOL v13 = "%{public}s called with null webtransport_session";
    goto LABEL_34;
  }
  if (!v18)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_protocol_webtransport_session_get_output_frames";
    BOOL v13 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_34;
  }
  BOOL v16 = (char *)__nw_create_backtrace_string();
  BOOL v11 = __nwlog_obj();
  os_log_type_t v12 = type;
  BOOL v17 = os_log_type_enabled(v11, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_protocol_webtransport_session_get_output_frames";
    BOOL v13 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_34;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v21 = "nw_protocol_webtransport_session_get_output_frames";
    __int16 v22 = 2082;
    int v23 = v16;
    _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v16);
  if (v10) {
    goto LABEL_36;
  }
  return 0;
}

uint64_t nw_protocol_webtransport_session_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_protocol_webtransport_session_get_input_frames";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "nw_protocol_webtransport_session_get_input_frames";
      BOOL v13 = "%{public}s called with null protocol";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v21 = "nw_protocol_webtransport_session_get_input_frames";
          __int16 v22 = 2082;
          int v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_35:
        if (!v10) {
          return 0;
        }
LABEL_36:
        free(v10);
        return 0;
      }
      if (!v15) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "nw_protocol_webtransport_session_get_input_frames";
      BOOL v13 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v21 = "nw_protocol_webtransport_session_get_input_frames";
      BOOL v13 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_34:
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    goto LABEL_35;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((handle[137] & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v8 = handle[115];
        *(_DWORD *)buf = 136446978;
        __int16 v21 = "nw_protocol_webtransport_session_get_input_frames";
        __int16 v22 = 2082;
        int v23 = (char *)(handle + 116);
        __int16 v24 = 2080;
        __int16 v25 = " ";
        __int16 v26 = 1024;
        int v27 = v8;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> called, ignoring", buf, 0x26u);
      }
    }
    return 0;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v21 = "nw_protocol_webtransport_session_get_input_frames";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (!__nwlog_fault(v10, &type, &v18)) {
    goto LABEL_35;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_protocol_webtransport_session_get_input_frames";
    BOOL v13 = "%{public}s called with null webtransport_session";
    goto LABEL_34;
  }
  if (!v18)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_protocol_webtransport_session_get_input_frames";
    BOOL v13 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_34;
  }
  BOOL v16 = (char *)__nw_create_backtrace_string();
  BOOL v11 = __nwlog_obj();
  os_log_type_t v12 = type;
  BOOL v17 = os_log_type_enabled(v11, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_protocol_webtransport_session_get_input_frames";
    BOOL v13 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_34;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v21 = "nw_protocol_webtransport_session_get_input_frames";
    __int16 v22 = 2082;
    int v23 = v16;
    _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v16);
  if (v10) {
    goto LABEL_36;
  }
  return 0;
}

void nw_protocol_webtransport_session_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_output_available";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v12, type, &v23)) {
      goto LABEL_49;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type[0];
      if (!os_log_type_enabled(v13, type[0])) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_output_available";
      BOOL v15 = "%{public}s called with null protocol";
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type[0];
      BOOL v19 = os_log_type_enabled(v13, type[0]);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_output_available";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_49:
        if (!v12) {
          return;
        }
LABEL_50:
        free(v12);
        return;
      }
      if (!v19) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_output_available";
      BOOL v15 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type[0];
      if (!os_log_type_enabled(v13, type[0])) {
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_output_available";
      BOOL v15 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_48:
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_49;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    if ((handle[548] & 2) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v16 = __nwlog_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          int v17 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_output_available";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = handle + 464;
          *(_WORD *)&buf[22] = 2080;
          int v30 = " ";
          LOWORD(v31) = 1024;
          *(_DWORD *)((char *)&v31 + 2) = v17;
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }
    if (*((_DWORD *)handle + 111) != 4 && (handle[548] & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v4 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v5 = *((_DWORD *)handle + 115);
        int v6 = *((_DWORD *)handle + 111);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_output_available";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 464;
        *(_WORD *)&buf[22] = 2080;
        int v30 = " ";
        LOWORD(v31) = 1024;
        *(_DWORD *)((char *)&v31 + 2) = v5;
        HIWORD(v31) = 1024;
        LODWORD(v32) = v6;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> output_available called in state %d", buf, 0x2Cu);
      }
    }
    if (!*((_DWORD *)handle + 112))
    {
      uint64_t v7 = *((void *)handle + 24);
      if (v7)
      {
        if (*(void *)(v7 + 16) != *(void *)(v7 + 24))
        {
          BOOL v8 = nw_array_create();
          os_log_type_t v9 = (atomic_uchar *)*((void *)handle + 24);
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 0x40000000;
          *(void *)&buf[16] = ___ZL51nw_webtransport_http2_send_pending_control_capsulesP23nw_webtransport_session_block_invoke;
          int v30 = (const char *)&__block_descriptor_tmp_43_34021;
          __int16 v31 = handle;
          BOOL v32 = v8;
          nw_array_apply(v9, (uint64_t)buf);
          *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
          uint64_t v25 = 0x40000000;
          __int16 v26 = ___ZL51nw_webtransport_http2_send_pending_control_capsulesP23nw_webtransport_session_block_invoke_44;
          int v27 = &__block_descriptor_tmp_45_34022;
          uint64_t v28 = handle;
          nw_array_apply((atomic_uchar *)v8, (uint64_t)type);
          if (v8) {
            os_release((void *)v8);
          }
        }
      }
      BOOL v10 = (char *)*((void *)handle + 23);
      if (v10)
      {
        v22[0] = MEMORY[0x1E4F143A8];
        v22[1] = 0x40000000;
        void v22[2] = ___ZL49nw_protocol_webtransport_session_output_availableP11nw_protocolS0__block_invoke;
        v22[3] = &__block_descriptor_tmp_65;
        v22[4] = a1;
        nw_hash_table_apply(v10, (uint64_t)v22);
      }
      BOOL v11 = (void *)*((void *)handle + 53);
      if (v11) {
        nw_protocol_output_available(v11, (uint64_t)a1);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_output_available";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v12, type, &v23)) {
    goto LABEL_49;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type[0];
    if (!os_log_type_enabled(v13, type[0])) {
      goto LABEL_49;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_output_available";
    BOOL v15 = "%{public}s called with null webtransport_session";
    goto LABEL_48;
  }
  if (!v23)
  {
    BOOL v13 = __nwlog_obj();
    os_log_type_t v14 = type[0];
    if (!os_log_type_enabled(v13, type[0])) {
      goto LABEL_49;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_output_available";
    BOOL v15 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_48;
  }
  __int16 v20 = (char *)__nw_create_backtrace_string();
  BOOL v13 = __nwlog_obj();
  os_log_type_t v14 = type[0];
  BOOL v21 = os_log_type_enabled(v13, type[0]);
  if (!v20)
  {
    if (!v21) {
      goto LABEL_49;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_output_available";
    BOOL v15 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_48;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_output_available";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v20;
    _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v20);
  if (v12) {
    goto LABEL_50;
  }
}

BOOL ___ZL51nw_webtransport_http2_send_pending_control_capsulesP23nw_webtransport_session_block_invoke(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  v56[0] = 0;
  v56[1] = v56;
  v56[2] = 0x2000000000;
  unint64_t v57 = 0;
  v54[0] = 0;
  v54[1] = v54;
  v54[2] = 0x2000000000;
  unint64_t v5 = a3[1];
  if (v5 >> 62)
  {
    int v15 = 0;
  }
  else
  {
    unint64_t v6 = v5 >> 14;
    unint64_t v7 = bswap64(v5 | 0xC000000000000000);
    unint64_t v8 = bswap32(v5 | 0x80000000);
    if (v5 >> 30) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v5 >> 30) {
      int v10 = 8;
    }
    else {
      int v10 = 4;
    }
    unint64_t v11 = bswap32(v5 | 0x4000) >> 16;
    BOOL v12 = v6 == 0;
    if (v6) {
      unint64_t v13 = v9;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v12) {
      int v14 = 2;
    }
    else {
      int v14 = v10;
    }
    if (v5 >= 0x40)
    {
      int v15 = v14;
    }
    else
    {
      unint64_t v13 = a3[1];
      int v15 = 1;
    }
    unint64_t v57 = v13;
  }
  char v55 = v15;
  v52[0] = 0;
  v52[1] = v52;
  v52[2] = 0x2000000000;
  unint64_t v53 = 0;
  v50[0] = 0;
  v50[1] = v50;
  v50[2] = 0x2000000000;
  unint64_t v16 = a3[2];
  if (v16 >> 62)
  {
    int v26 = 0;
  }
  else
  {
    unint64_t v17 = v16 >> 14;
    unint64_t v18 = bswap64(v16 | 0xC000000000000000);
    unint64_t v19 = bswap32(v16 | 0x80000000);
    if (v16 >> 30) {
      unint64_t v20 = v18;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v16 >> 30) {
      int v21 = 8;
    }
    else {
      int v21 = 4;
    }
    unint64_t v22 = bswap32(v16 | 0x4000) >> 16;
    BOOL v23 = v17 == 0;
    if (v17) {
      unint64_t v24 = v20;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v23) {
      int v25 = 2;
    }
    else {
      int v25 = v21;
    }
    if (v16 >= 0x40)
    {
      int v26 = v25;
    }
    else
    {
      unint64_t v24 = a3[2];
      int v26 = 1;
    }
    unint64_t v53 = v24;
  }
  char v51 = v26;
  v49[0] = 0;
  v49[1] = (uint64_t)v49;
  BOOL output_frames = nw_http_capsule_framer_get_output_frames(*(void *)(a1 + 32) + 96, *(void *)(a1 + 32), *a3, v26 + v15, v26 + v15, 1, v49);
  if (output_frames)
  {
    v47[0] = 0;
    v47[1] = v47;
    v47[2] = 0x2000000000;
    char v48 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = &v43;
    uint64_t v45 = 0x2000000000;
    uint64_t v46 = v49;
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 0x40000000;
    uint64_t v34 = (uint64_t (*)(void *))___ZL51nw_webtransport_http2_send_pending_control_capsulesP23nw_webtransport_session_block_invoke_2;
    char v35 = &unk_1E5240380;
    os_log_type_t v36 = v47;
    BOOL v37 = &v43;
    uint64_t v28 = *(void *)(a1 + 32);
    int v38 = v56;
    __int16 v39 = v54;
    BOOL v40 = v52;
    __int16 v41 = v50;
    uint64_t v42 = v28;
    uint64_t v29 = v49[0];
    do
    {
      if (!v29) {
        break;
      }
      uint64_t v30 = *(void *)(v29 + 32);
      char v31 = v34(v33);
      uint64_t v29 = v30;
    }
    while ((v31 & 1) != 0);
    nw_http_capsule_framer_finalize_output_frames(*(void *)(a1 + 32) + 96, *(void *)(a1 + 32), *a3, (uint64_t *)v44[3]);
    nw_array_append(*(void *)(a1 + 40), a3);
    _Block_object_dispose(&v43, 8);
    _Block_object_dispose(v47, 8);
  }
  _Block_object_dispose(v50, 8);
  _Block_object_dispose(v52, 8);
  _Block_object_dispose(v54, 8);
  _Block_object_dispose(v56, 8);
  return output_frames;
}

uint64_t ___ZL51nw_webtransport_http2_send_pending_control_capsulesP23nw_webtransport_session_block_invoke_44(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3) {
    free(a3);
  }
  return 1;
}

uint64_t ___ZL49nw_protocol_webtransport_session_output_availableP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = (void *)nw_hash_node_get_object(a2);
  nw_protocol_output_available(object, *(void *)(a1 + 32));
  return 1;
}

uint64_t ___ZL51nw_webtransport_http2_send_pending_control_capsulesP23nw_webtransport_session_block_invoke_2(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    nw_frame_finalize(a2);
    uint64_t v4 = *(void *)(a2 + 32);
    unint64_t v5 = *(void **)(a2 + 40);
    if (v4)
    {
      *(void *)(v4 + 40) = v5;
      unint64_t v5 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 8) = v5;
    }
    void *v5 = v4;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    uint64_t v7 = a1[10];
    if (!v7 || (*(unsigned char *)(v7 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v9 = __nwlog_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = a1[10];
          unint64_t v11 = (const char *)(v10 + 464);
          BOOL v12 = "";
          BOOL v13 = v10 == 0;
          int v14 = *(_DWORD *)(v10 + 460);
          if (v13) {
            unint64_t v11 = "";
          }
          unint64_t v16 = "nw_webtransport_http2_send_pending_control_capsules_block_invoke_2";
          __int16 v17 = 2082;
          int v15 = 136446978;
          if (!v13) {
            BOOL v12 = " ";
          }
          unint64_t v18 = v11;
          __int16 v19 = 2080;
          unint64_t v20 = v12;
          __int16 v21 = 1024;
          int v22 = v14;
          _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Dropping unneeded output frame", (uint8_t *)&v15, 0x26u);
        }
      }
    }
  }
  else
  {
    int v15 = 0;
    unint64_t v6 = (char *)nw_frame_unclaimed_bytes(a2, &v15);
    memcpy(v6, (const void *)(*(void *)(a1[6] + 8) + 24), *(unsigned __int8 *)(*(void *)(a1[7] + 8) + 24));
    memcpy(&v6[*(unsigned __int8 *)(*(void *)(a1[7] + 8) + 24)], (const void *)(*(void *)(a1[8] + 8) + 24), *(unsigned __int8 *)(*(void *)(a1[9] + 8) + 24));
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  return 1;
}

void nw_protocol_webtransport_session_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_input_available";
    os_log_type_t v75 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v108[0]) = 0;
    if (!__nwlog_fault(v75, type, v108)) {
      goto LABEL_204;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!LOBYTE(v108[0]))
      {
        os_log_type_t v76 = __nwlog_obj();
        os_log_type_t v77 = type[0];
        if (!os_log_type_enabled(v76, type[0])) {
          goto LABEL_204;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_input_available";
        uint64_t v78 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_203;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v76 = __nwlog_obj();
      os_log_type_t v77 = type[0];
      BOOL v84 = os_log_type_enabled(v76, type[0]);
      if (!backtrace_string)
      {
        if (!v84) {
          goto LABEL_204;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_input_available";
        uint64_t v78 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_203;
      }
      if (v84)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_input_available";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v76, v77, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_204;
    }
    os_log_type_t v76 = __nwlog_obj();
    os_log_type_t v77 = type[0];
    if (!os_log_type_enabled(v76, type[0])) {
      goto LABEL_204;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_input_available";
    uint64_t v78 = "%{public}s called with null protocol";
LABEL_203:
    _os_log_impl(&dword_1830D4000, v76, v77, v78, buf, 0xCu);
    goto LABEL_204;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_input_available";
    os_log_type_t v75 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v108[0]) = 0;
    if (!__nwlog_fault(v75, type, v108)) {
      goto LABEL_204;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!LOBYTE(v108[0]))
      {
        os_log_type_t v76 = __nwlog_obj();
        os_log_type_t v77 = type[0];
        if (!os_log_type_enabled(v76, type[0])) {
          goto LABEL_204;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_input_available";
        uint64_t v78 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
        goto LABEL_203;
      }
      BOOL v85 = (char *)__nw_create_backtrace_string();
      os_log_type_t v76 = __nwlog_obj();
      os_log_type_t v77 = type[0];
      BOOL v86 = os_log_type_enabled(v76, type[0]);
      if (!v85)
      {
        if (!v86) {
          goto LABEL_204;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_input_available";
        uint64_t v78 = "%{public}s called with null webtransport_session, no backtrace";
        goto LABEL_203;
      }
      if (v86)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_input_available";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v85;
        uint8_t v87 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
LABEL_182:
        _os_log_impl(&dword_1830D4000, v76, v77, v87, buf, 0x16u);
      }
LABEL_183:
      free(v85);
      if (!v75) {
        return;
      }
LABEL_205:
      free(v75);
      return;
    }
    os_log_type_t v76 = __nwlog_obj();
    os_log_type_t v77 = type[0];
    if (!os_log_type_enabled(v76, type[0])) {
      goto LABEL_204;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_input_available";
    uint64_t v78 = "%{public}s called with null webtransport_session";
    goto LABEL_203;
  }
  if ((handle[548] & 2) == 0)
  {
    if (gLogDatapath)
    {
      uint8_t v79 = __nwlog_obj();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
      {
        int v80 = *((_DWORD *)handle + 115);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_input_available";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 464;
        *(_WORD *)&buf[22] = 2080;
        os_log_type_t v152 = (uint64_t (*)(uint64_t, uint64_t))" ";
        LOWORD(v153) = 1024;
        *(_DWORD *)((char *)&v153 + 2) = v80;
        _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }
  }
  if (*((_DWORD *)handle + 112) > 1u) {
    return;
  }
  uint64_t v3 = *((void *)handle + 4);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_http_get_input";
    os_log_type_t v75 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v108[0]) = 0;
    if (!__nwlog_fault(v75, type, v108)) {
      goto LABEL_204;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v76 = __nwlog_obj();
      os_log_type_t v77 = type[0];
      if (!os_log_type_enabled(v76, type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_http_get_input";
      uint64_t v78 = "%{public}s called with null output_handler";
      goto LABEL_203;
    }
    if (!LOBYTE(v108[0]))
    {
      os_log_type_t v76 = __nwlog_obj();
      os_log_type_t v77 = type[0];
      if (!os_log_type_enabled(v76, type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_http_get_input";
      uint64_t v78 = "%{public}s called with null output_handler, backtrace limit exceeded";
      goto LABEL_203;
    }
    BOOL v85 = (char *)__nw_create_backtrace_string();
    os_log_type_t v76 = __nwlog_obj();
    os_log_type_t v77 = type[0];
    BOOL v89 = os_log_type_enabled(v76, type[0]);
    if (!v85)
    {
      if (!v89) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_http_get_input";
      uint64_t v78 = "%{public}s called with null output_handler, no backtrace";
      goto LABEL_203;
    }
    if (v89)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_http_get_input";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v85;
      uint8_t v87 = "%{public}s called with null output_handler, dumping backtrace:%{public}s";
      goto LABEL_182;
    }
    goto LABEL_183;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4 || !*(void *)(v4 + 80))
  {
    if ((handle[548] & 2) == 0)
    {
      BOOL v81 = __nwlog_obj();
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        int v82 = *((_DWORD *)handle + 115);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_http_get_input";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 464;
        *(_WORD *)&buf[22] = 2080;
        os_log_type_t v152 = (uint64_t (*)(uint64_t, uint64_t))" ";
        LOWORD(v153) = 1024;
        *(_DWORD *)((char *)&v153 + 2) = v82;
        _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> output handler has no get_input_frames callback", buf, 0x26u);
      }
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_http_get_input";
    os_log_type_t v75 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v108[0]) = 0;
    if (__nwlog_fault(v75, type, v108))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v76 = __nwlog_obj();
        os_log_type_t v77 = type[0];
        if (!os_log_type_enabled(v76, type[0])) {
          goto LABEL_204;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_http_get_input";
        uint64_t v78 = "%{public}s output handler has no get_input_frames callback";
        goto LABEL_203;
      }
      if (!LOBYTE(v108[0]))
      {
        os_log_type_t v76 = __nwlog_obj();
        os_log_type_t v77 = type[0];
        if (!os_log_type_enabled(v76, type[0])) {
          goto LABEL_204;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_http_get_input";
        uint64_t v78 = "%{public}s output handler has no get_input_frames callback, backtrace limit exceeded";
        goto LABEL_203;
      }
      BOOL v85 = (char *)__nw_create_backtrace_string();
      os_log_type_t v76 = __nwlog_obj();
      os_log_type_t v77 = type[0];
      BOOL v88 = os_log_type_enabled(v76, type[0]);
      if (!v85)
      {
        if (!v88) {
          goto LABEL_204;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_http_get_input";
        uint64_t v78 = "%{public}s output handler has no get_input_frames callback, no backtrace";
        goto LABEL_203;
      }
      if (v88)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_http_get_input";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v85;
        uint8_t v87 = "%{public}s output handler has no get_input_frames callback, dumping backtrace:%{public}s";
        goto LABEL_182;
      }
      goto LABEL_183;
    }
LABEL_204:
    if (!v75) {
      return;
    }
    goto LABEL_205;
  }
  uint64_t v93 = (uint64_t)handle;
  while ((*((_DWORD *)handle + 111) | 2) == 3)
  {
    *(void *)os_log_type_t type = 0;
    uint64_t v121 = (uint64_t)type;
    if (!nw_protocol_get_input_frames(v3, (uint64_t)handle, 0, 0, 0xFFFFFFFFLL, (uint64_t)type)) {
      return;
    }
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3802000000;
    os_log_type_t v152 = __Block_byref_object_copy__57;
    BOOL v153 = __Block_byref_object_dispose__58;
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    os_log_type_t v154 = (uint64_t *)(id)nw_protocol_copy_http_definition_http_definition;
    v155[0] |= 1u;
    v94[0] = MEMORY[0x1E4F143A8];
    v94[1] = 0x40000000;
    id v95 = (uint64_t (*)(void *))___ZL38nw_webtransport_session_http_get_inputP23nw_webtransport_session_block_invoke;
    uint64_t v96 = &unk_1E52404A0;
    uint8_t v97 = buf;
    size_t v98 = handle;
    uint64_t v5 = *(void *)type;
    do
    {
      if (!v5) {
        break;
      }
      uint64_t v6 = *(void *)(v5 + 32);
      char v7 = v95(v94);
      uint64_t v5 = v6;
    }
    while ((v7 & 1) != 0);
    _Block_object_dispose(buf, 8);
    if (v155[0])
    {
      if (v154) {
        os_release(v154);
      }
    }
    handle = (char *)v93;
  }
  if (!*((_DWORD *)handle + 112))
  {
    if ((handle[548] & 2) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v90 = __nwlog_obj();
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
        {
          int v91 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http2_handle_capsules";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = handle + 464;
          *(_WORD *)&buf[22] = 2080;
          os_log_type_t v152 = (uint64_t (*)(uint64_t, uint64_t))" ";
          LOWORD(v153) = 1024;
          *(_DWORD *)((char *)&v153 + 2) = v91;
          _os_log_impl(&dword_1830D4000, v90, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }
    if (*((_DWORD *)handle + 111) == 4)
    {
      unint64_t v8 = (uint64_t *)(handle + 96);
      unint64_t v9 = handle;
LABEL_26:
      int v118 = 0;
      uint64_t v128 = 0;
      uint64_t v129 = &v128;
      uint64_t v130 = 0x2000000000;
      uint64_t v10 = *((void *)v9 + 17);
      BOOL v131 = v10 != 0;
      if (!v10)
      {
        do
        {
          uint64_t v23 = *v8;
          if (!*v8)
          {
            uint64_t v24 = *(void *)(v93 + 32);
            *(void *)buf = 0;
            *(void *)&buf[8] = buf;
            if (!nw_protocol_get_input_frames(v24, v93, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, (uint64_t)buf)) {
              goto LABEL_142;
            }
            if (*(void *)buf)
            {
              **(void **)(v93 + 104) = *(void *)buf;
              uint64_t v25 = *(void *)&buf[8];
              *(void *)(*(void *)buf + 40) = *(void *)(v93 + 104);
              *(void *)(v93 + 104) = v25;
            }
            uint64_t v23 = *v8;
          }
          *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
          uint64_t v121 = 0x40000000;
          uint64_t v122 = (uint64_t (*)(os_log_type_t *))__nw_http_capsule_framer_read_capsule_block_invoke;
          v123 = &unk_1E5243120;
          uint64_t v124 = &v128;
          char v125 = handle + 96;
          uint64_t v126 = v93;
          uint8_t v127 = &v118;
          do
          {
            if (!v23) {
              break;
            }
            uint64_t v26 = *(void *)(v23 + 32);
            char v27 = v122(type);
            uint64_t v23 = v26;
          }
          while ((v27 & 1) != 0);
        }
        while (!*((unsigned char *)v129 + 24));
      }
      char v119 = 0;
      uint64_t v11 = MEMORY[0x1E4F143A8];
      while (1)
      {
        uint64_t v147 = 0;
        BOOL v148 = &v147;
        int v150 = 0;
        uint64_t v149 = 0x2000000000;
        v145[0] = 0;
        v145[1] = v145;
        int v146 = 0;
        v145[2] = 0x2000000000;
        v140[0] = v11;
        v140[1] = 0x40000000;
        os_log_type_t v141 = (uint64_t (*)(void *))___ZL43nw_http_capsule_framer_process_capsule_bodyP22nw_http_capsule_framerP11nw_protocolPb_block_invoke;
        uint64_t v142 = &unk_1E52431D8;
        BOOL v143 = &v147;
        __int16 v144 = v145;
        uint64_t v12 = *v8;
        do
        {
          if (!v12) {
            break;
          }
          uint64_t v13 = *(void *)(v12 + 32);
          char v14 = v141(v140);
          uint64_t v12 = v13;
        }
        while ((v14 & 1) != 0);
        uint64_t v15 = *(void *)(v93 + 32);
        if (*(void *)(v93 + 136) > (unint64_t)*((unsigned int *)v148 + 6) && v15 != 0)
        {
          uint64_t v17 = *(void *)(v15 + 24);
          if (v17)
          {
            if (*(void *)(v17 + 80))
            {
              uint64_t v136 = 0;
              uint64_t v137 = &v136;
              if (!nw_protocol_get_input_frames(v15, v93, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, (uint64_t)&v136))
              {
                int v22 = 0;
                goto LABEL_44;
              }
              if (v136)
              {
                **(void **)(v93 + 104) = v136;
                unint64_t v18 = v137;
                *(void *)(v136 + 40) = *(void *)(v93 + 104);
                *(void *)(v93 + 104) = v18;
              }
            }
          }
        }
        char v119 = 0;
        uint64_t v136 = 0;
        uint64_t v137 = &v136;
        int v139 = 0;
        uint64_t v138 = 0x2000000000;
        uint64_t v132 = 0;
        uint64_t v133 = &v132;
        int v135 = 0;
        uint64_t v134 = 0x2000000000;
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZL43nw_http_capsule_framer_process_capsule_bodyP22nw_http_capsule_framerP11nw_protocolPb_block_invoke_2;
        os_log_type_t v152 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5243200;
        BOOL v153 = (void (*)(uint64_t))&v136;
        os_log_type_t v154 = &v132;
        *(void *)uint64_t v155 = handle + 96;
        *(void *)&v155[8] = &v119;
        uint64_t v19 = *v8;
        do
        {
          if (!v19) {
            break;
          }
          uint64_t v20 = *(void *)(v19 + 32);
          char v21 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
          uint64_t v19 = v20;
        }
        while ((v21 & 1) != 0);
        int v22 = *((_DWORD *)v133 + 6);
        _Block_object_dispose(&v132, 8);
        _Block_object_dispose(&v136, 8);
LABEL_44:
        _Block_object_dispose(v145, 8);
        _Block_object_dispose(&v147, 8);
        if (!v22)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v72 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint8_t v74 = *(uint64_t (**)(uint64_t, uint64_t))(v93 + 136);
            uint64_t v73 = *(void *)(v93 + 144);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_read_capsule";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v73;
            *(_WORD *)&buf[22] = 2048;
            os_log_type_t v152 = v74;
            _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_DEBUG, "%{public}s Could not find all capsule data for type %llx. Remaining length: %lld", buf, 0x20u);
          }
LABEL_142:
          _Block_object_dispose(&v128, 8);
          return;
        }
        if (v119)
        {
          _Block_object_dispose(&v128, 8);
          uint64_t v28 = *(void *)(v93 + 144);
          if ((*(unsigned char *)(v93 + 548) & 2) == 0)
          {
            if (gLogDatapath)
            {
              BOOL v69 = __nwlog_obj();
              if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
              {
                int v70 = *(_DWORD *)(v93 + 460);
                uint64_t v71 = *(void *)(v93 + 128);
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_webtransport_http2_handle_capsules";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = handle + 464;
                *(_WORD *)&buf[22] = 2080;
                os_log_type_t v152 = (uint64_t (*)(uint64_t, uint64_t))" ";
                LOWORD(v153) = 1024;
                *(_DWORD *)((char *)&v153 + 2) = v70;
                HIWORD(v153) = 2048;
                os_log_type_t v154 = (uint64_t *)v28;
                *(_WORD *)uint64_t v155 = 2048;
                *(void *)&v155[2] = v71;
                _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Webtransport session received capsule type 0x%llx length %llu", buf, 0x3Au);
              }
            }
          }
          if (v28 <= 16770303)
          {
            if (v28 > 16770047)
            {
              if ((unint64_t)(v28 - 16770048) >= 6) {
                goto LABEL_83;
              }
LABEL_80:
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v36 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_webtransport_http2_handle_capsules";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v28;
                BOOL v37 = v36;
                int v38 = "%{public}s Unexpected capsule type %llu received";
                uint32_t v39 = 22;
                goto LABEL_82;
              }
LABEL_83:
              unint64_t v9 = (char *)v93;
              goto LABEL_26;
            }
            if ((unint64_t)(v28 - 1) < 3 || v28 == -1) {
              goto LABEL_80;
            }
            if (v28) {
              goto LABEL_83;
            }
            uint64_t v32 = *(void *)(v93 + 424);
            if (!v32 || *(_DWORD *)(v32 + 184) == 3)
            {
              v104[0] = MEMORY[0x1E4F143A8];
              v104[1] = 0x40000000;
              uint8_t v105 = ___ZL37nw_webtransport_http2_handle_capsulesP23nw_webtransport_session_block_invoke_2;
              size_t v106 = &__block_descriptor_tmp_63_34060;
              uint8_t v107 = handle + 96;
              uint64_t v33 = *(void *)(v93 + 112);
              do
              {
                if (!v33) {
                  break;
                }
                uint64_t v34 = *(void *)(v33 + 32);
                char v35 = ((uint64_t (*)(void *))v105)(v104);
                uint64_t v33 = v34;
              }
              while ((v35 & 1) != 0);
              goto LABEL_83;
            }
            v99[0] = MEMORY[0x1E4F143A8];
            v99[1] = 0x40000000;
            id v100 = ___ZL37nw_webtransport_http2_handle_capsulesP23nw_webtransport_session_block_invoke_3;
            nw_endpoint_t v101 = &__block_descriptor_tmp_64_34061;
            uint8_t v102 = handle + 96;
            uint64_t v103 = v32;
            uint64_t v55 = *(void *)(v93 + 112);
            do
            {
              if (!v55) {
                break;
              }
              uint64_t v56 = *(void *)(v55 + 32);
              char v57 = ((uint64_t (*)(void *))v100)(v99);
              uint64_t v55 = v56;
            }
            while ((v57 & 1) != 0);
            uint64_t v54 = (void *)v32;
LABEL_116:
            nw_protocol_input_available(v54, v93);
            goto LABEL_83;
          }
          if (v28 <= 420171064)
          {
            if ((unint64_t)(v28 - 16770304) >= 4)
            {
              if (v28 == 420171064)
              {
                v114[0] = MEMORY[0x1E4F143A8];
                v114[1] = 0x40000000;
                uint64_t v115 = ___ZL37nw_webtransport_http2_handle_capsulesP23nw_webtransport_session_block_invoke;
                uint8_t v116 = &__block_descriptor_tmp_60_34052;
                BOOL v117 = handle + 96;
                uint64_t v29 = *(void *)(v93 + 112);
                do
                {
                  if (!v29) {
                    break;
                  }
                  uint64_t v30 = *(void *)(v29 + 32);
                  char v31 = ((uint64_t (*)(void *))v115)(v114);
                  uint64_t v29 = v30;
                }
                while ((v31 & 1) != 0);
              }
              goto LABEL_83;
            }
            goto LABEL_80;
          }
          if ((unint64_t)(v28 - 420171065) < 2)
          {
            *(void *)os_log_type_t type = -1;
            if (nw_http_capsule_framer_parse_vle_value((uint64_t)v8, v93, (uint64_t)type))
            {
              uint64_t stream = nw_webtransport_session_get_stream(v93, *(uint64_t *)type);
              if (!stream) {
                goto LABEL_83;
              }
              uint64_t v44 = stream;
              v140[0] = -1;
              if (nw_http_capsule_framer_parse_vle_value((uint64_t)v8, v93, (uint64_t)v140))
              {
                if ((*(unsigned char *)(v44 + 276) & 0x10) == 0)
                {
                  uint64_t v45 = __nwlog_obj();
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v46 = *(void *)(v44 + 88);
                    if (v46) {
                      int v47 = *(_DWORD *)(v46 + 460);
                    }
                    else {
                      int v47 = -1;
                    }
                    uint64_t v65 = *(uint64_t **)(v44 + 64);
                    *(_DWORD *)buf = 136448002;
                    *(void *)&uint8_t buf[4] = "nw_webtransport_http2_handle_capsules";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v44 + 192;
                    *(_WORD *)&buf[22] = 2080;
                    os_log_type_t v152 = (uint64_t (*)(uint64_t, uint64_t))" ";
                    LOWORD(v153) = 1024;
                    *(_DWORD *)((char *)&v153 + 2) = v47;
                    HIWORD(v153) = 2048;
                    os_log_type_t v154 = v65;
                    *(_WORD *)uint64_t v155 = 2048;
                    *(void *)&v155[2] = v28;
                    *(_WORD *)&v155[10] = 2048;
                    *(void *)&v155[12] = v65;
                    __int16 v156 = 2048;
                    uint64_t v157 = v140[0];
                    _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> Received 0x%llx capsule for stream ID %llu with error code %llu", buf, 0x4Eu);
                  }
                }
                nw_protocol_webtransport_stream_error((nw_protocol *)v44, (nw_protocol *)v93);
                nw_protocol_webtransport_stream_disconnect((nw_protocol *)v44, v66);
                goto LABEL_83;
              }
              if ((*(unsigned char *)(v93 + 548) & 2) != 0) {
                goto LABEL_83;
              }
              uint64_t v58 = __nwlog_obj();
              if (!os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
                goto LABEL_83;
              }
              int v59 = *(_DWORD *)(v93 + 460);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_webtransport_http2_handle_capsules";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = handle + 464;
              *(_WORD *)&buf[22] = 2080;
              os_log_type_t v152 = (uint64_t (*)(uint64_t, uint64_t))" ";
              LOWORD(v153) = 1024;
              *(_DWORD *)((char *)&v153 + 2) = v59;
              HIWORD(v153) = 2048;
              os_log_type_t v154 = (uint64_t *)v28;
              BOOL v37 = v58;
              int v38 = "%{public}s %{public}s%s<i%u> Failed to parse error code from capsule 0x%llx correctly";
              uint32_t v39 = 48;
              goto LABEL_82;
            }
            if ((*(unsigned char *)(v93 + 548) & 2) != 0) {
              goto LABEL_83;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v48 = gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_83;
            }
          }
          else
          {
            if ((unint64_t)(v28 - 420171067) >= 2) {
              goto LABEL_83;
            }
            *(void *)os_log_type_t type = -1;
            if (nw_http_capsule_framer_parse_vle_value((uint64_t)v8, v93, (uint64_t)type))
            {
              if (*(void *)type >> 60)
              {
                LOBYTE(v40) = *(unsigned char *)(v93 + 548);
                goto LABEL_89;
              }
              uint64_t v50 = nw_webtransport_session_get_stream(v93, *(uint64_t *)type);
              if (v50)
              {
LABEL_106:
                if (*(_DWORD *)(v50 + 184) == 3) {
                  goto LABEL_83;
                }
                v108[0] = MEMORY[0x1E4F143A8];
                v108[1] = 0x40000000;
                size_t v109 = ___ZL37nw_webtransport_http2_handle_capsulesP23nw_webtransport_session_block_invoke_61;
                uint8_t v110 = &__block_descriptor_tmp_62_34059;
                BOOL v113 = v28 == 420171068;
                BOOL v111 = handle + 96;
                uint64_t v112 = v50;
                uint64_t v51 = *(void *)(v93 + 112);
                do
                {
                  if (!v51) {
                    break;
                  }
                  uint64_t v52 = *(void *)(v51 + 32);
                  char v53 = ((uint64_t (*)(void *))v109)(v108);
                  uint64_t v51 = v52;
                }
                while ((v53 & 1) != 0);
                uint64_t v54 = (void *)v50;
                if (v28 == 420171068)
                {
                  nw_protocol_input_finished((void *)v50, v93);
                  goto LABEL_83;
                }
                goto LABEL_116;
              }
              uint64_t v60 = *(void *)type;
              int v40 = *(unsigned __int8 *)(v93 + 548);
              if (*(void *)type >> 60 || ((*(_DWORD *)type ^ v40) & 1) == 0)
              {
LABEL_89:
                if ((v40 & 2) != 0) {
                  goto LABEL_83;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v41 = gLogObj;
                if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_83;
                }
                int v42 = *(_DWORD *)(v93 + 460);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_webtransport_session_create_incoming_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = handle + 464;
                *(_WORD *)&buf[22] = 2080;
                os_log_type_t v152 = (uint64_t (*)(uint64_t, uint64_t))" ";
                LOWORD(v153) = 1024;
                *(_DWORD *)((char *)&v153 + 2) = v42;
                BOOL v37 = v41;
                int v38 = "%{public}s %{public}s%s<i%u> Invalid incoming stream ID";
                uint32_t v39 = 38;
              }
              else
              {
                char v61 = *(void ***)(v93 + 400);
                if (v61)
                {
                  uint64_t v62 = *v61;
                  if (v62)
                  {
                    if (*v62)
                    {
                      nw_parameters_t v63 = nw_parameters_copy(*(nw_parameters_t *)(v93 + 344));
                      *(unsigned char *)(v93 + 548) |= 0x20u;
                      *(void *)(v93 + 176) = v60;
                      nw_parameters_t object = v63;
                      int v64 = (***(uint64_t (****)(void, void))(v93 + 400))(*(void *)(v93 + 400), *(void *)(v93 + 360));
                      *(void *)(v93 + 176) = -1;
                      *(unsigned char *)(v93 + 548) &= ~0x20u;
                      if (v64) {
                        uint64_t v50 = nw_webtransport_session_get_stream(v93, v60);
                      }
                      else {
                        uint64_t v50 = 0;
                      }
                      if (object) {
                        os_release(object);
                      }
                      if (!v50) {
                        goto LABEL_83;
                      }
                      goto LABEL_106;
                    }
                  }
                }
                if ((v40 & 2) != 0) {
                  goto LABEL_83;
                }
                int v67 = __nwlog_obj();
                if (!os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_83;
                }
                int v68 = *(_DWORD *)(v93 + 460);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_webtransport_session_create_incoming_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = handle + 464;
                *(_WORD *)&buf[22] = 2080;
                os_log_type_t v152 = (uint64_t (*)(uint64_t, uint64_t))" ";
                LOWORD(v153) = 1024;
                *(_DWORD *)((char *)&v153 + 2) = v68;
                BOOL v37 = v67;
                int v38 = "%{public}s %{public}s%s<i%u> Listen handler not setup to accept inbound stream";
                uint32_t v39 = 38;
              }
LABEL_82:
              _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_ERROR, v38, buf, v39);
              goto LABEL_83;
            }
            if ((*(unsigned char *)(v93 + 548) & 2) != 0) {
              goto LABEL_83;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v48 = gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_83;
            }
          }
          int v49 = *(_DWORD *)(v93 + 460);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http2_handle_capsules";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = handle + 464;
          *(_WORD *)&buf[22] = 2080;
          os_log_type_t v152 = (uint64_t (*)(uint64_t, uint64_t))" ";
          LOWORD(v153) = 1024;
          *(_DWORD *)((char *)&v153 + 2) = v49;
          HIWORD(v153) = 2048;
          os_log_type_t v154 = (uint64_t *)v28;
          BOOL v37 = v48;
          int v38 = "%{public}s %{public}s%s<i%u> Failed to parse stream ID from capsule 0x%llx correctly.";
          uint32_t v39 = 48;
          goto LABEL_82;
        }
      }
    }
  }
}

uint64_t __Block_byref_object_copy__57(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__58(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t ___ZL37nw_webtransport_http2_handle_capsulesP23nw_webtransport_session_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 24) = v3;
  }
  void *v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t nw_webtransport_session_get_stream(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t result = *(void *)(a1 + 184);
  if (result)
  {
    uint64_t result = nw_hash_table_get_node(result, (uint64_t)&v3, 8);
    if (result) {
      return *(void *)(result + 16);
    }
  }
  return result;
}

void nw_protocol_webtransport_stream_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v22 = "nw_protocol_webtransport_stream_error";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      int v22 = "nw_protocol_webtransport_stream_error";
      unint64_t v8 = "%{public}s called with null protocol";
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v13 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          int v22 = "nw_protocol_webtransport_stream_error";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_54:
        if (!v5) {
          return;
        }
        goto LABEL_55;
      }
      if (!v13) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      int v22 = "nw_protocol_webtransport_stream_error";
      unint64_t v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      int v22 = "nw_protocol_webtransport_stream_error";
      unint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_53;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v22 = "nw_protocol_webtransport_stream_error";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19)) {
      goto LABEL_54;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v19)
      {
        uint64_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_54;
        }
        *(_DWORD *)buf = 136446210;
        int v22 = "nw_protocol_webtransport_stream_error";
        unint64_t v8 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_53;
      }
      char v14 = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v15 = os_log_type_enabled(v6, type);
      if (!v14)
      {
        if (!v15) {
          goto LABEL_54;
        }
        *(_DWORD *)buf = 136446210;
        int v22 = "nw_protocol_webtransport_stream_error";
        unint64_t v8 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_53;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        int v22 = "nw_protocol_webtransport_stream_error";
        __int16 v23 = 2082;
        uint64_t v24 = v14;
        unint64_t v16 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v6, v7, v16, buf, 0x16u);
      }
LABEL_37:
      free(v14);
      if (!v5) {
        return;
      }
LABEL_55:
      free(v5);
      return;
    }
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_54;
    }
    *(_DWORD *)buf = 136446210;
    int v22 = "nw_protocol_webtransport_stream_error";
    unint64_t v8 = "%{public}s called with null webtransport_stream";
LABEL_53:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_54;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v22 = "nw_protocol_webtransport_stream_error";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      int v22 = "nw_protocol_webtransport_stream_error";
      unint64_t v8 = "%{public}s called with null other_protocol";
      goto LABEL_53;
    }
    if (!v19)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      int v22 = "nw_protocol_webtransport_stream_error";
      unint64_t v8 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_53;
    }
    char v14 = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v17 = os_log_type_enabled(v6, type);
    if (!v14)
    {
      if (!v17) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      int v22 = "nw_protocol_webtransport_stream_error";
      unint64_t v8 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_53;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      int v22 = "nw_protocol_webtransport_stream_error";
      __int16 v23 = 2082;
      uint64_t v24 = v14;
      unint64_t v16 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if ((*((unsigned char *)handle + 276) & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      unint64_t v9 = __nwlog_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = handle[11];
        if (v10) {
          int v11 = *(_DWORD *)(v10 + 460);
        }
        else {
          int v11 = -1;
        }
        uint64_t v18 = handle[8];
        *(_DWORD *)buf = 136447234;
        int v22 = "nw_protocol_webtransport_stream_error";
        __int16 v23 = 2082;
        uint64_t v24 = (char *)(handle + 24);
        __int16 v25 = 2080;
        uint64_t v26 = " ";
        __int16 v27 = 1024;
        int v28 = v11;
        __int16 v29 = 2048;
        uint64_t v30 = v18;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }
  nw_protocol_error(a1->default_input_handler->flow_id, (uint64_t)a2);
}

void nw_protocol_webtransport_stream_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_disconnect";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v4, &type, &v16)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_stream_disconnect";
      os_log_type_t v7 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v12 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v19 = "nw_protocol_webtransport_stream_disconnect";
          __int16 v20 = 2082;
          char v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_43:
        if (!v4) {
          return;
        }
LABEL_44:
        free(v4);
        return;
      }
      if (!v12) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_stream_disconnect";
      os_log_type_t v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_stream_disconnect";
      os_log_type_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_42:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_43;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = handle[11];
          if (v9) {
            int v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            int v10 = -1;
          }
          uint64_t v15 = handle[8];
          *(_DWORD *)buf = 136447234;
          char v19 = "nw_protocol_webtransport_stream_disconnect";
          __int16 v20 = 2082;
          char v21 = (char *)(handle + 24);
          __int16 v22 = 2080;
          __int16 v23 = " ";
          __int16 v24 = 1024;
          int v25 = v10;
          __int16 v26 = 2048;
          uint64_t v27 = v15;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }
    if (*((_DWORD *)handle + 46) != 3 || *((_DWORD *)handle + 47) != 3) {
      handle[23] = 0x300000003;
    }
    nw_protocol_disconnected(a1->default_input_handler->flow_id, (uint64_t)a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_protocol_webtransport_stream_disconnect";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v4, &type, &v16)) {
    goto LABEL_43;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_disconnect";
    os_log_type_t v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_42;
  }
  if (!v16)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_disconnect";
    os_log_type_t v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_42;
  }
  BOOL v13 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_disconnect";
    os_log_type_t v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_42;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    char v19 = "nw_protocol_webtransport_stream_disconnect";
    __int16 v20 = 2082;
    char v21 = v13;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v4) {
    goto LABEL_44;
  }
}

uint64_t ___ZL37nw_webtransport_http2_handle_capsulesP23nw_webtransport_session_block_invoke_61(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a2 + 40);
  os_log_type_t v6 = (void *)(a2 + 32);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    uint64_t v5 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 24) = v5;
  }
  void *v5 = v4;
  *os_log_type_t v6 = 0;
  *(void *)(a2 + 40) = 0;
  int is_metadata_complete = nw_frame_is_metadata_complete(a2);
  int v8 = is_metadata_complete;
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(void *)(*(void *)(a1 + 32) + 16)) {
      int v8 = is_metadata_complete;
    }
    else {
      int v8 = 1;
    }
  }
  int v9 = *(_WORD *)(a2 + 204) & 0xFFC7 | (*(unsigned __int8 *)(a2 + 206) << 16);
  *(_WORD *)(a2 + 204) &= 0xFFC7u;
  *(unsigned char *)(a2 + 206) = BYTE2(v9);
  int v10 = *(void **)(a2 + 64);
  if (v10)
  {
    do
    {
      int v11 = (void *)*v10;
      BOOL v12 = (void *)v10[6];
      BOOL v13 = (void *)*v10;
      if (v12)
      {
        os_release(v12);
        v10[6] = 0;
        BOOL v13 = (void *)*v10;
      }
      BOOL v14 = (void *)v10[1];
      if (v13)
      {
        v13[1] = v14;
        BOOL v14 = (void *)v10[1];
      }
      else
      {
        *(void *)(a2 + 72) = v14;
      }
      *BOOL v14 = v13;
      if (v10 != (void *)(a2 + 120)) {
        free(v10);
      }
      int v10 = v11;
    }
    while (v11);
  }
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = a2 + 64;
  uint64_t v15 = *(void **)(a2 + 168);
  if (v15) {
    os_release(v15);
  }
  *(void *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  nw_frame_set_metadata(a2, *(NSObject **)(*(void *)(a1 + 40) + 160), 1, v8);
  uint64_t v16 = *(void *)(a1 + 40);
  BOOL v17 = *(uint64_t **)(v16 + 80);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v17;
  uint64_t *v17 = a2;
  *(void *)(v16 + 80) = v6;
  return 1;
}

uint64_t ___ZL37nw_webtransport_http2_handle_capsulesP23nw_webtransport_session_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 24) = v3;
  }
  void *v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t ___ZL37nw_webtransport_http2_handle_capsulesP23nw_webtransport_session_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a2 + 40);
  os_log_type_t v6 = (void *)(a2 + 32);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    uint64_t v5 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 24) = v5;
  }
  void *v5 = v4;
  *os_log_type_t v6 = 0;
  *(void *)(a2 + 40) = 0;
  int is_metadata_complete = nw_frame_is_metadata_complete(a2);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 16);
  int v9 = *(_WORD *)(a2 + 204) & 0xFFC7 | (*(unsigned __int8 *)(a2 + 206) << 16);
  *(_WORD *)(a2 + 204) &= 0xFFC7u;
  *(unsigned char *)(a2 + 206) = BYTE2(v9);
  int v10 = *(void **)(a2 + 64);
  if (v10)
  {
    do
    {
      int v11 = (void *)*v10;
      BOOL v12 = (void *)v10[6];
      BOOL v13 = (void *)*v10;
      if (v12)
      {
        os_release(v12);
        v10[6] = 0;
        BOOL v13 = (void *)*v10;
      }
      BOOL v14 = (void *)v10[1];
      if (v13)
      {
        v13[1] = v14;
        BOOL v14 = (void *)v10[1];
      }
      else
      {
        *(void *)(a2 + 72) = v14;
      }
      *BOOL v14 = v13;
      if (v10 != (void *)(a2 + 120)) {
        free(v10);
      }
      int v10 = v11;
    }
    while (v11);
  }
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = a2 + 64;
  uint64_t v15 = *(void **)(a2 + 168);
  if (v15) {
    os_release(v15);
  }
  if (v8) {
    int v16 = is_metadata_complete;
  }
  else {
    int v16 = 1;
  }
  *(void *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  nw_frame_set_metadata(a2, *(NSObject **)(*(void *)(a1 + 40) + 160), 1, v16);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(uint64_t **)(v17 + 80);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v18;
  uint64_t *v18 = a2;
  *(void *)(v17 + 80) = v6;
  return 1;
}

void nw_webtransport_http3_stream_fix_http_parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v15, &type, &v29)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
      uint64_t v18 = "%{public}s called with null webtransport_session";
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
          __int16 v33 = 2082;
          uint64_t v34 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_61:
        if (!v15) {
          return;
        }
LABEL_62:
        free(v15);
        return;
      }
      if (!v20) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
      uint64_t v18 = "%{public}s called with null webtransport_session, no backtrace";
    }
    else
    {
      int v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
      uint64_t v18 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    }
LABEL_60:
    _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
    goto LABEL_61;
  }
  if (a2)
  {
    uint64_t v4 = *(void **)(a2 + 144);
    uint64_t v5 = *(nw_protocol **)(a1 + 32);
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      if ((*(unsigned char *)(a1 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *(_DWORD *)(a1 + 460);
          *(_DWORD *)buf = 136446978;
          uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
          __int16 v33 = 2082;
          uint64_t v34 = (char *)(a1 + 464);
          __int16 v35 = 2080;
          uint64_t v36 = " ";
          __int16 v37 = 1024;
          int v38 = v8;
          _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u> webtransport stream not fully setup, cannot fix parameters", buf, 0x26u);
        }
      }
    }
    else
    {
      int v9 = nw_parameters_copy_protocol_options_legacy(v4, v5);
      if (v9)
      {
        int v10 = v9;
        if ((*(unsigned char *)(a2 + 276) & 4) != 0) {
          int v11 = 1;
        }
        else {
          int v11 = 2;
        }
        if ((*(unsigned char *)(a2 + 276) & 8) != 0) {
          unsigned int v12 = 3;
        }
        else {
          unsigned int v12 = v11;
        }
        if (*(unsigned char *)(a2 + 276)) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        if ((*(unsigned char *)(a2 + 276) & 0x10) == 0)
        {
          if (gLogDatapath)
          {
            __int16 v23 = __nwlog_obj();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v24 = *(void *)(a2 + 88);
              if (v24) {
                int v25 = *(_DWORD *)(v24 + 460);
              }
              else {
                int v25 = -1;
              }
              uint64_t v28 = *(void *)(a2 + 64);
              *(_DWORD *)buf = 136447746;
              uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
              __int16 v33 = 2082;
              uint64_t v34 = (char *)(a2 + 192);
              __int16 v35 = 2080;
              uint64_t v36 = " ";
              __int16 v37 = 1024;
              int v38 = v25;
              __int16 v39 = 2048;
              uint64_t v40 = v28;
              __int16 v41 = 2048;
              int v42 = v10;
              __int16 v43 = 1024;
              int v44 = v13;
              _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> Adjusting HTTP options for webtransport: %p with mode: %u", buf, 0x40u);
            }
          }
        }
        nw_http3_set_stream_mode(v10, v13);
        *(unsigned char *)(a2 + 276) |= 0x40u;
        os_release(v10);
      }
      else
      {
        if ((*(unsigned char *)(a1 + 548) & 2) == 0)
        {
          if (gLogDatapath)
          {
            __int16 v26 = __nwlog_obj();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
              int v27 = *(_DWORD *)(a1 + 460);
              *(_DWORD *)buf = 136446978;
              uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
              __int16 v33 = 2082;
              uint64_t v34 = (char *)(a1 + 464);
              __int16 v35 = 2080;
              uint64_t v36 = " ";
              __int16 v37 = 1024;
              int v38 = v27;
              _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Received HTTP options are NULL, failing", buf, 0x26u);
            }
          }
        }
        BOOL v14 = *(void **)(a2 + 48);
        nw_protocol_error(v14, a2);
        nw_protocol_disconnected(v14, a2);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (!__nwlog_fault(v15, &type, &v29)) {
    goto LABEL_61;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    if (!os_log_type_enabled(v16, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
    uint64_t v18 = "%{public}s called with null webtransport_stream";
    goto LABEL_60;
  }
  if (!v29)
  {
    int v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    if (!os_log_type_enabled(v16, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
    uint64_t v18 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_60;
  }
  char v21 = (char *)__nw_create_backtrace_string();
  int v16 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v22 = os_log_type_enabled(v16, type);
  if (!v21)
  {
    if (!v22) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
    uint64_t v18 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_60;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v32 = "nw_webtransport_http3_stream_fix_http_parameters";
    __int16 v33 = 2082;
    uint64_t v34 = v21;
    _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v21);
  if (v15) {
    goto LABEL_62;
  }
}

uint64_t ___ZL50nw_webtransport_http3_stream_reconfigure_and_startP22nw_webtransport_streamb_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 32);
    return nw_protocol_connect(v3, v2);
  }
  return result;
}

uint64_t ___ZL37nw_webtransport_session_send_metadataP23nw_webtransport_sessionP20nw_protocol_metadataP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    nw_frame_finalize(a2);
    uint64_t v4 = *(void *)(a2 + 32);
    uint64_t v5 = *(void **)(a2 + 40);
    if (v4)
    {
      *(void *)(v4 + 40) = v5;
      uint64_t v5 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(*(void *)(a1 + 40) + 8) = v5;
    }
    void *v5 = v4;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    uint64_t v6 = *(void *)(a1 + 48);
    if (!v6 || (*(unsigned char *)(v6 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        int v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = *(void *)(a1 + 48);
          int v10 = (const char *)(v9 + 464);
          int v11 = "";
          BOOL v12 = v9 == 0;
          int v13 = *(_DWORD *)(v9 + 460);
          if (v12) {
            int v10 = "";
          }
          uint64_t v15 = "nw_webtransport_session_send_metadata_block_invoke";
          __int16 v16 = 2082;
          int v14 = 136446978;
          if (!v12) {
            int v11 = " ";
          }
          os_log_type_t v17 = v10;
          __int16 v18 = 2080;
          char v19 = v11;
          __int16 v20 = 1024;
          int v21 = v13;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Dropping unneeded output frame", (uint8_t *)&v14, 0x26u);
        }
      }
    }
  }
  else
  {
    nw_frame_collapse(a2);
    nw_frame_set_metadata(a2, *(NSObject **)(a1 + 56), 0, 0);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return 1;
}

void ___ZL47nw_protocol_webtransport_http3_stream_callbacksv_block_invoke()
{
  qword_1E8F79B08 = (uint64_t)nw_protocol_default_replace_input_handler;
  qword_1E8F79C00 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F79B60 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F79B78 = (uint64_t)nw_protocol_default_get_local;
  qword_1E8F79B70 = (uint64_t)nw_protocol_default_get_path;
  qword_1E8F79BA0 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F79BC0 = (uint64_t)nw_protocol_default_get_output_local;
  qword_1E8F79BC8 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F79BF8 = (uint64_t)nw_protocol_default_reset;
  qword_1E8F79BA8 = (uint64_t)nw_protocol_default_supports_external_data;
  qword_1E8F79BD0 = (uint64_t)nw_protocol_default_waiting_for_output;
  qword_1E8F79B88 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F79B90 = (uint64_t)nw_protocol_default_unregister_notification;
  nw_protocol_webtransport_http3_stream_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_webtransport_stream_add_input_handler;
  qword_1E8F79B68 = (uint64_t)nw_protocol_webtransport_stream_get_parameters;
  qword_1E8F79B80 = (uint64_t)nw_protocol_webtransport_stream_get_remote_endpoint;
  qword_1E8F79B18 = (uint64_t)nw_protocol_webtransport_stream_disconnect;
  qword_1E8F79B28 = (uint64_t)nw_protocol_webtransport_stream_disconnected;
  qword_1E8F79B30 = (uint64_t)nw_protocol_webtransport_stream_error;
  qword_1E8F79B38 = (uint64_t)nw_protocol_webtransport_stream_input_available;
  qword_1E8F79B40 = (uint64_t)nw_protocol_webtransport_stream_output_available;
  qword_1E8F79B98 = (uint64_t)nw_protocol_webtransport_stream_notify;
  qword_1E8F79BD8 = (uint64_t)nw_protocol_webtransport_stream_copy_info;
  qword_1E8F79BE0 = (uint64_t)nw_protocol_webtransport_stream_add_listen_handler;
  qword_1E8F79BE8 = (uint64_t)nw_protocol_webtransport_stream_remove_listen_handler;
  qword_1E8F79BF0 = (uint64_t)nw_protocol_webtransport_stream_get_message_properties;
  qword_1E8F79B00 = (uint64_t)nw_protocol_webtransport_http3_stream_remove_input_handler;
  qword_1E8F79B10 = (uint64_t)nw_protocol_webtransport_http3_stream_connect;
  qword_1E8F79B20 = (uint64_t)nw_protocol_webtransport_http3_stream_connected;
  qword_1E8F79B48 = (uint64_t)nw_protocol_webtransport_http3_stream_get_input_frames;
  qword_1E8F79B50 = (uint64_t)nw_protocol_webtransport_http3_stream_get_output_frames;
  qword_1E8F79B58 = (uint64_t)nw_protocol_webtransport_http3_stream_finalize_output_frames;
  qword_1E8F79BB0 = (uint64_t)nw_protocol_webtransport_http3_stream_input_finished;
  qword_1E8F79BB8 = (uint64_t)nw_protocol_webtransport_http3_stream_output_finished;
}

void nw_protocol_webtransport_http3_stream_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http3_stream_output_finished";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v4, &type, &v16)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_http3_stream_output_finished";
      os_log_type_t v7 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v12 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v19 = "nw_protocol_webtransport_http3_stream_output_finished";
          __int16 v20 = 2082;
          int v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_42:
        if (!v4) {
          return;
        }
LABEL_43:
        free(v4);
        return;
      }
      if (!v12) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_http3_stream_output_finished";
      os_log_type_t v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_http3_stream_output_finished";
      os_log_type_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_41:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_42;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        int v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = handle[11];
          if (v9) {
            int v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            int v10 = -1;
          }
          uint64_t v15 = handle[8];
          *(_DWORD *)buf = 136447234;
          char v19 = "nw_protocol_webtransport_http3_stream_output_finished";
          __int16 v20 = 2082;
          int v21 = (char *)(handle + 24);
          __int16 v22 = 2080;
          __int16 v23 = " ";
          __int16 v24 = 1024;
          int v25 = v10;
          __int16 v26 = 2048;
          uint64_t v27 = v15;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }
    if (*((_DWORD *)handle + 47) == 2 && (*((unsigned char *)handle + 276) & 8) == 0) {
      nw_protocol_output_finished((void *)handle[4], (uint64_t)a1);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_protocol_webtransport_http3_stream_output_finished";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v4, &type, &v16)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http3_stream_output_finished";
    os_log_type_t v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_41;
  }
  if (!v16)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http3_stream_output_finished";
    os_log_type_t v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_41;
  }
  int v13 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http3_stream_output_finished";
    os_log_type_t v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_41;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    char v19 = "nw_protocol_webtransport_http3_stream_output_finished";
    __int16 v20 = 2082;
    int v21 = v13;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v4) {
    goto LABEL_43;
  }
}

void nw_protocol_webtransport_http3_stream_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v4, &type, &v16)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
      os_log_type_t v7 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v12 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
          __int16 v20 = 2082;
          int v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_41:
        if (!v4) {
          return;
        }
LABEL_42:
        free(v4);
        return;
      }
      if (!v12) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
      os_log_type_t v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
      os_log_type_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_40:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_41;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        int v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = handle[11];
          if (v9) {
            int v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            int v10 = -1;
          }
          uint64_t v15 = handle[8];
          *(_DWORD *)buf = 136447234;
          char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
          __int16 v20 = 2082;
          int v21 = (char *)(handle + 24);
          __int16 v22 = 2080;
          __int16 v23 = " ";
          __int16 v24 = 1024;
          int v25 = v10;
          __int16 v26 = 2048;
          uint64_t v27 = v15;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }
    if (*((_DWORD *)handle + 46) == 2) {
      nw_protocol_input_finished((void *)handle[6], (uint64_t)a1);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v4, &type, &v16)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
    os_log_type_t v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_40;
  }
  if (!v16)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
    os_log_type_t v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_40;
  }
  int v13 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
    os_log_type_t v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_40;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
    __int16 v20 = 2082;
    int v21 = v13;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v4) {
    goto LABEL_42;
  }
}

uint64_t nw_protocol_webtransport_http3_stream_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((*((unsigned char *)handle + 276) & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          int v11 = __nwlog_obj();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v12 = handle[11];
            if (v12) {
              int v13 = *(_DWORD *)(v12 + 460);
            }
            else {
              int v13 = -1;
            }
            uint64_t v18 = handle[8];
            *(_DWORD *)buf = 136447234;
            __int16 v22 = "nw_protocol_webtransport_http3_stream_finalize_output_frames";
            __int16 v23 = 2082;
            __int16 v24 = (char *)(handle + 24);
            __int16 v25 = 2080;
            __int16 v26 = " ";
            __int16 v27 = 1024;
            int v28 = v13;
            __int16 v29 = 2048;
            uint64_t v30 = v18;
            _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
          }
        }
      }
      uint64_t v5 = nw_protocol_common_finalize_output_frames((uint64_t)a1, (uint64_t)a2);
      nw_protocol_output_finished(a1->output_handler->flow_id, (uint64_t)a1);
      return v5;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_protocol_webtransport_http3_stream_finalize_output_frames";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v7, &type, &v19)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_protocol_webtransport_http3_stream_finalize_output_frames";
        int v10 = "%{public}s called with null webtransport_stream";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (!v19)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_protocol_webtransport_http3_stream_finalize_output_frames";
        int v10 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v17 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_protocol_webtransport_http3_stream_finalize_output_frames";
        int v10 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v22 = "nw_protocol_webtransport_http3_stream_finalize_output_frames";
      __int16 v23 = 2082;
      __int16 v24 = backtrace_string;
      char v16 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v22 = "nw_protocol_webtransport_http3_stream_finalize_output_frames";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v7, &type, &v19)) {
    goto LABEL_39;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v19)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_protocol_webtransport_http3_stream_finalize_output_frames";
        int v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v15 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_protocol_webtransport_http3_stream_finalize_output_frames";
        int v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v22 = "nw_protocol_webtransport_http3_stream_finalize_output_frames";
      __int16 v23 = 2082;
      __int16 v24 = backtrace_string;
      char v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_1830D4000, v8, v9, v16, buf, 0x16u);
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_39;
  }
  int v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_protocol_webtransport_http3_stream_finalize_output_frames";
    int v10 = "%{public}s called with null protocol";
LABEL_38:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
  }
LABEL_39:
  if (v7) {
    free(v7);
  }
  return 0;
}

uint64_t nw_protocol_webtransport_http3_stream_get_output_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
    int v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v13, &type, &v27)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
      char v16 = "%{public}s called with null protocol";
LABEL_51:
      _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
      goto LABEL_52;
    }
    if (!v27)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
        char v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
        char v16 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v22) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
    __int16 v31 = 2082;
    uint64_t v32 = backtrace_string;
    __int16 v23 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_35:
    _os_log_impl(&dword_1830D4000, v14, v15, v23, buf, 0x16u);
    goto LABEL_36;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
    int v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v13, &type, &v27)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
      char v16 = "%{public}s called with null webtransport_stream";
      goto LABEL_51;
    }
    if (!v27)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
        char v16 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
        char v16 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v24) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
    __int16 v31 = 2082;
    uint64_t v32 = backtrace_string;
    __int16 v23 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
    goto LABEL_35;
  }
  if (a6)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v18 = __nwlog_obj();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v19 = handle[11];
          if (v19) {
            int v20 = *(_DWORD *)(v19 + 460);
          }
          else {
            int v20 = -1;
          }
          uint64_t v26 = handle[8];
          *(_DWORD *)buf = 136447746;
          uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
          __int16 v31 = 2082;
          uint64_t v32 = (char *)(handle + 24);
          __int16 v33 = 2080;
          uint64_t v34 = " ";
          __int16 v35 = 1024;
          int v36 = v20;
          __int16 v37 = 2048;
          uint64_t v38 = v26;
          __int16 v39 = 2048;
          uint64_t v40 = a1;
          __int16 v41 = 2048;
          int v42 = a2;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called with protocol %p and input protocol %p", buf, 0x44u);
        }
      }
    }
    return nw_protocol_common_get_output_frames((uint64_t)a1, (uint64_t)a1, a3, a4, a5, (uint64_t)a6);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
  int v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (!__nwlog_fault(v13, &type, &v27)) {
    goto LABEL_52;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v27)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
        char v16 = "%{public}s called with null return_array, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v25 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
        char v16 = "%{public}s called with null return_array, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
      __int16 v31 = 2082;
      uint64_t v32 = backtrace_string;
      __int16 v23 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
      goto LABEL_35;
    }
LABEL_36:
    free(backtrace_string);
    goto LABEL_52;
  }
  BOOL v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  if (os_log_type_enabled(v14, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
    char v16 = "%{public}s called with null return_array";
    goto LABEL_51;
  }
LABEL_52:
  if (v13) {
    free(v13);
  }
  return 0;
}

BOOL nw_webtransport_stream_matches_key(void *a1, void *a2)
{
  return a1[8] == *a2;
}

uint64_t nw_webtransport_stream_key_hash(_DWORD *a1)
{
  return (a1[1] + *a1);
}

uint64_t nw_webtransport_stream_get_key(const void *a1, unsigned int *a2)
{
  *a2 = 8;
  return (uint64_t)a1 + 64;
}

uint64_t nw_protocol_webtransport_http3_stream_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((*((unsigned char *)handle + 276) & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          os_log_type_t v9 = __nwlog_obj();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v10 = handle[11];
            if (v10) {
              int v11 = *(_DWORD *)(v10 + 460);
            }
            else {
              int v11 = -1;
            }
            uint64_t v16 = handle[8];
            *(_DWORD *)buf = 136447234;
            int v20 = "nw_protocol_webtransport_http3_stream_connect";
            __int16 v21 = 2082;
            BOOL v22 = (char *)(handle + 24);
            __int16 v23 = 2080;
            BOOL v24 = " ";
            __int16 v25 = 1024;
            int v26 = v11;
            __int16 v27 = 2048;
            uint64_t v28 = v16;
            _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
          }
        }
      }
      return nw_protocol_connect((uint64_t)a1->output_handler, (uint64_t)a1);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v20 = "nw_protocol_webtransport_http3_stream_connect";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v5, &type, &v17)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        int v20 = "nw_protocol_webtransport_http3_stream_connect";
        int v8 = "%{public}s called with null webtransport_stream";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (!v17)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        int v20 = "nw_protocol_webtransport_http3_stream_connect";
        int v8 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v15 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        int v20 = "nw_protocol_webtransport_http3_stream_connect";
        int v8 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      int v20 = "nw_protocol_webtransport_http3_stream_connect";
      __int16 v21 = 2082;
      BOOL v22 = backtrace_string;
      BOOL v14 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v20 = "nw_protocol_webtransport_http3_stream_connect";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v5, &type, &v17)) {
    goto LABEL_39;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v17)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        int v20 = "nw_protocol_webtransport_http3_stream_connect";
        int v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v13 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        int v20 = "nw_protocol_webtransport_http3_stream_connect";
        int v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      int v20 = "nw_protocol_webtransport_http3_stream_connect";
      __int16 v21 = 2082;
      BOOL v22 = backtrace_string;
      BOOL v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_1830D4000, v6, v7, v14, buf, 0x16u);
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_39;
  }
  os_log_type_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    int v20 = "nw_protocol_webtransport_http3_stream_connect";
    int v8 = "%{public}s called with null protocol";
LABEL_38:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
  }
LABEL_39:
  if (v5) {
    free(v5);
  }
  return 0;
}

uint64_t nw_protocol_webtransport_http3_stream_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
    uint8_t v127 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v163[0]) = 0;
    if (!__nwlog_fault(v127, type, v163)) {
      goto LABEL_278;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type[0];
      if (!os_log_type_enabled(v128, type[0])) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null protocol";
      goto LABEL_277;
    }
    if (!LOBYTE(v163[0]))
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type[0];
      if (!os_log_type_enabled(v128, type[0])) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_277;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v128 = __nwlog_obj();
    os_log_type_t v129 = type[0];
    BOOL v135 = os_log_type_enabled(v128, type[0]);
    if (!backtrace_string)
    {
      if (!v135) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_277;
    }
    if (!v135) {
      goto LABEL_251;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
    __int16 v177 = 2082;
    uint64_t v178 = backtrace_string;
    uint64_t v136 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_250:
    _os_log_impl(&dword_1830D4000, v128, v129, v136, buf, 0x16u);
    goto LABEL_251;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
    uint8_t v127 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v163[0]) = 0;
    if (!__nwlog_fault(v127, type, v163)) {
      goto LABEL_278;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type[0];
      if (!os_log_type_enabled(v128, type[0])) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null webtransport_stream";
      goto LABEL_277;
    }
    if (!LOBYTE(v163[0]))
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type[0];
      if (!os_log_type_enabled(v128, type[0])) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
      goto LABEL_277;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v128 = __nwlog_obj();
    os_log_type_t v129 = type[0];
    BOOL v137 = os_log_type_enabled(v128, type[0]);
    if (!backtrace_string)
    {
      if (!v137) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null webtransport_stream, no backtrace";
      goto LABEL_277;
    }
    if (!v137) {
      goto LABEL_251;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
    __int16 v177 = 2082;
    uint64_t v178 = backtrace_string;
    uint64_t v136 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
    goto LABEL_250;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
    uint8_t v127 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v163[0]) = 0;
    if (!__nwlog_fault(v127, type, v163)) {
      goto LABEL_278;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type[0];
      if (!os_log_type_enabled(v128, type[0])) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null input_protocol";
      goto LABEL_277;
    }
    if (!LOBYTE(v163[0]))
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type[0];
      if (!os_log_type_enabled(v128, type[0])) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_277;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v128 = __nwlog_obj();
    os_log_type_t v129 = type[0];
    BOOL v138 = os_log_type_enabled(v128, type[0]);
    if (backtrace_string)
    {
      if (v138)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
        __int16 v177 = 2082;
        uint64_t v178 = backtrace_string;
        uint64_t v136 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
        goto LABEL_250;
      }
LABEL_251:
      free(backtrace_string);
      goto LABEL_278;
    }
    if (!v138) {
      goto LABEL_278;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
    uint64_t v130 = "%{public}s called with null input_protocol, no backtrace";
LABEL_277:
    _os_log_impl(&dword_1830D4000, v128, v129, v130, buf, 0xCu);
LABEL_278:
    if (v127) {
      free(v127);
    }
    return 0;
  }
  if ((handle[276] & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v131 = __nwlog_obj();
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v132 = *((void *)handle + 11);
        if (v132) {
          int v133 = *(_DWORD *)(v132 + 460);
        }
        else {
          int v133 = -1;
        }
        uint64_t v145 = *((void *)handle + 8);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
        __int16 v177 = 2082;
        uint64_t v178 = handle + 192;
        __int16 v179 = 2080;
        uint64_t v180 = (uint64_t)" ";
        __int16 v181 = 1024;
        *(_DWORD *)int v182 = v133;
        *(_WORD *)&v182[4] = 2048;
        *(void *)&v182[6] = v145;
        _os_log_impl(&dword_1830D4000, v131, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }
  uint64_t v5 = &unk_1EB267000;
  if ((handle[276] & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *((void *)handle + 11);
      if (v7) {
        int v8 = *(_DWORD *)(v7 + 460);
      }
      else {
        int v8 = -1;
      }
      uint64_t v9 = *((void *)handle + 8);
      default_input_handler = a1->default_input_handler;
      *(_DWORD *)buf = 136448002;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http3_stream_remove_input_handler";
      __int16 v177 = 2082;
      uint64_t v178 = handle + 192;
      __int16 v179 = 2080;
      uint64_t v180 = (uint64_t)" ";
      __int16 v181 = 1024;
      *(_DWORD *)int v182 = v8;
      *(_WORD *)&v182[4] = 2048;
      *(void *)&v182[6] = v9;
      *(_WORD *)&v182[14] = 2048;
      *(void *)&v182[16] = a1;
      __int16 v183 = 2048;
      size_t v184 = default_input_handler;
      __int16 v185 = 2048;
      BOOL v186 = a2;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:s%lld> protocol %p, default_input_handler %p, input protocol %p", buf, 0x4Eu);
    }
  }
  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  }
  if (a1->default_input_handler != a2) {
    return 0;
  }
  nw_protocol_remove_input_handler(*((void *)handle + 4), (uint64_t)a1);
  uint64_t v12 = *((void *)handle + 11);
  if (!v12)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
    int v139 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v163[0]) = 0;
    if (__nwlog_fault(v139, type, v163))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v140 = __nwlog_obj();
        os_log_type_t v141 = type[0];
        if (os_log_type_enabled(v140, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          uint64_t v142 = "%{public}s called with null webtransport_session";
LABEL_291:
          _os_log_impl(&dword_1830D4000, v140, v141, v142, buf, 0xCu);
        }
      }
      else if (LOBYTE(v163[0]))
      {
        int v146 = (char *)__nw_create_backtrace_string();
        uint64_t v140 = __nwlog_obj();
        os_log_type_t v141 = type[0];
        BOOL v147 = os_log_type_enabled(v140, type[0]);
        if (v146)
        {
          if (v147)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
            __int16 v177 = 2082;
            uint64_t v178 = v146;
            _os_log_impl(&dword_1830D4000, v140, v141, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v146);
          goto LABEL_292;
        }
        if (v147)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          uint64_t v142 = "%{public}s called with null webtransport_session, no backtrace";
          goto LABEL_291;
        }
      }
      else
      {
        uint64_t v140 = __nwlog_obj();
        os_log_type_t v141 = type[0];
        if (os_log_type_enabled(v140, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          uint64_t v142 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
          goto LABEL_291;
        }
      }
    }
LABEL_292:
    if (v139) {
      free(v139);
    }
    uint64_t v5 = &unk_1EB267000;
    goto LABEL_85;
  }
  uint64_t v162 = *((void *)handle + 11);
  if ((handle[276] & 0x20) != 0)
  {
    if ((*(unsigned char *)(v12 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v143 = __nwlog_obj();
        if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
        {
          int v144 = *(_DWORD *)(v12 + 460);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v177 = 2082;
          uint64_t v178 = (const char *)(v12 + 464);
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v144;
          *(_WORD *)&v182[4] = 2048;
          *(void *)&v182[6] = handle;
          _os_log_impl(&dword_1830D4000, v143, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream (%p)", buf, 0x30u);
        }
      }
    }
    if ((handle[276] & 0x20) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
      __int16 v177 = 2048;
      uint64_t v178 = handle;
      char v17 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v163[0]) = 0;
      if (!__nwlog_fault(v17, type, v163)) {
        goto LABEL_66;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = gLogObj;
        os_log_type_t v19 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_66;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
        __int16 v177 = 2048;
        uint64_t v178 = handle;
        int v20 = "%{public}s stream %p not in pending list, cannot remove";
      }
      else if (LOBYTE(v163[0]))
      {
        __int16 v23 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = gLogObj;
        os_log_type_t v19 = type[0];
        BOOL v24 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v23)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            __int16 v177 = 2048;
            uint64_t v178 = handle;
            __int16 v179 = 2082;
            uint64_t v180 = (uint64_t)v23;
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v23);
          uint64_t v5 = &unk_1EB267000;
          goto LABEL_66;
        }
        uint64_t v5 = &unk_1EB267000;
        if (!v24)
        {
LABEL_66:
          if (v17) {
            free(v17);
          }
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
        __int16 v177 = 2048;
        uint64_t v178 = handle;
        int v20 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
      }
      else
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v19 = type[0];
        if (!os_log_type_enabled(v18, type[0])) {
          goto LABEL_66;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
        __int16 v177 = 2048;
        uint64_t v178 = handle;
        int v20 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0x16u);
      goto LABEL_66;
    }
    uint64_t v21 = *((void *)handle + 14);
    BOOL v22 = (void *)*((void *)handle + 15);
    if (v21)
    {
      *(void *)(v21 + 120) = v22;
      BOOL v22 = (void *)*((void *)handle + 15);
    }
    else
    {
      *(void *)(v12 + 336) = v22;
    }
    *BOOL v22 = v21;
    *((void *)handle + 14) = 0;
    *((void *)handle + 15) = 0;
    int v25 = *(_DWORD *)(v12 + 456);
    *(_DWORD *)(v12 + 456) = v25 - 1;
    if (v25)
    {
LABEL_76:
      char v41 = handle[276];
      handle[276] = v41 & 0xDF;
      if ((v41 & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          BOOL v148 = __nwlog_obj();
          if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v149 = *((void *)handle + 11);
            if (v149) {
              int v150 = *(_DWORD *)(v149 + 460);
            }
            else {
              int v150 = -1;
            }
            uint64_t v155 = *((void *)handle + 8);
            uint64_t v12 = v162;
            int v156 = *(_DWORD *)(v162 + 456);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            __int16 v177 = 2082;
            uint64_t v178 = handle + 192;
            __int16 v179 = 2080;
            uint64_t v180 = (uint64_t)" ";
            __int16 v181 = 1024;
            *(_DWORD *)int v182 = v150;
            *(_WORD *)&v182[4] = 2048;
            *(void *)&v182[6] = v155;
            *(_WORD *)&v182[14] = 2048;
            *(void *)&v182[16] = handle;
            __int16 v183 = 1024;
            LODWORD(v184) = v156;
            uint64_t v16 = "%{public}s %{public}s%s<i%u:s%lld> removed pending stream (%p), now have %u pending streams";
            __int16 v33 = v148;
            os_log_type_t v34 = OS_LOG_TYPE_DEBUG;
            uint32_t v35 = 64;
            goto LABEL_55;
          }
        }
      }
      goto LABEL_78;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v26 = *(unsigned int *)(v12 + 456);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
    __int16 v177 = 2082;
    uint64_t v178 = "webtransport_session->pending_stream_count";
    __int16 v179 = 2048;
    uint64_t v180 = 1;
    __int16 v181 = 2048;
    *(void *)int v182 = v26;
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v163[0]) = 0;
    if (__nwlog_fault(v27, type, v163))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type[0];
        if (os_log_type_enabled(v28, type[0]))
        {
          uint64_t v30 = *(unsigned int *)(v162 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v177 = 2082;
          uint64_t v178 = "webtransport_session->pending_stream_count";
          __int16 v179 = 2048;
          uint64_t v180 = 1;
          __int16 v181 = 2048;
          *(void *)int v182 = v30;
          __int16 v31 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_72:
          _os_log_impl(&dword_1830D4000, v28, v29, v31, buf, 0x2Au);
        }
      }
      else if (LOBYTE(v163[0]))
      {
        int v36 = (char *)__nw_create_backtrace_string();
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type[0];
        BOOL v37 = os_log_type_enabled(v28, type[0]);
        if (v36)
        {
          if (v37)
          {
            uint64_t v38 = *(unsigned int *)(v162 + 456);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            __int16 v177 = 2082;
            uint64_t v178 = "webtransport_session->pending_stream_count";
            __int16 v179 = 2048;
            uint64_t v180 = 1;
            __int16 v181 = 2048;
            *(void *)int v182 = v38;
            *(_WORD *)&v182[8] = 2082;
            *(void *)&v182[10] = v36;
            _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v36);
          uint64_t v5 = &unk_1EB267000;
          goto LABEL_73;
        }
        uint64_t v5 = &unk_1EB267000;
        if (v37)
        {
          uint64_t v40 = *(unsigned int *)(v162 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v177 = 2082;
          uint64_t v178 = "webtransport_session->pending_stream_count";
          __int16 v179 = 2048;
          uint64_t v180 = 1;
          __int16 v181 = 2048;
          *(void *)int v182 = v40;
          __int16 v31 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type[0];
        if (os_log_type_enabled(v28, type[0]))
        {
          uint64_t v39 = *(unsigned int *)(v162 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v177 = 2082;
          uint64_t v178 = "webtransport_session->pending_stream_count";
          __int16 v179 = 2048;
          uint64_t v180 = 1;
          __int16 v181 = 2048;
          *(void *)int v182 = v39;
          __int16 v31 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_72;
        }
      }
    }
LABEL_73:
    if (v27) {
      free(v27);
    }
    uint64_t v12 = v162;
    *(_DWORD *)(v162 + 456) = 0;
    goto LABEL_76;
  }
  if (*(char **)(v12 + 416) == handle)
  {
    if ((*(unsigned char *)(v12 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        size_t v151 = __nwlog_obj();
        if (os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG))
        {
          int v152 = *(_DWORD *)(v12 + 460);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          __int16 v177 = 2082;
          uint64_t v178 = (const char *)(v12 + 464);
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v152;
          _os_log_impl(&dword_1830D4000, v151, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Removing placeholder stream for session", buf, 0x26u);
        }
      }
    }
    *(void *)(v12 + 416) = 0;
  }
  else if (*(char **)(v12 + 424) == handle)
  {
    if ((*(unsigned char *)(v12 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v153 = __nwlog_obj();
        if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG))
        {
          int v154 = *(_DWORD *)(v12 + 460);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          __int16 v177 = 2082;
          uint64_t v178 = (const char *)(v12 + 464);
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v154;
          _os_log_impl(&dword_1830D4000, v153, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Removing datagram stream for session", buf, 0x26u);
        }
      }
    }
    *(void *)(v12 + 424) = 0;
  }
  else
  {
    *(void *)os_log_type_t type = *((void *)handle + 8);
    BOOL node = nw_hash_table_get_node(*(void *)(v12 + 184), (uint64_t)type, 8);
    if (node)
    {
      if (!nw_hash_table_remove_node(*(void *)(v12 + 184), node) && (*(unsigned char *)(v12 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          int v15 = *(_DWORD *)(v12 + 460);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          __int16 v177 = 2082;
          uint64_t v178 = (const char *)(v12 + 464);
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v15;
          *(_WORD *)&v182[4] = 2048;
          *(void *)&v182[6] = *(void *)type;
          uint64_t v16 = "%{public}s %{public}s%s<i%u> Failed to remove stream %lld from hash table";
LABEL_54:
          __int16 v33 = v14;
          os_log_type_t v34 = OS_LOG_TYPE_ERROR;
          uint32_t v35 = 48;
LABEL_55:
          _os_log_impl(&dword_1830D4000, v33, v34, v16, buf, v35);
        }
      }
    }
    else if ((*(unsigned char *)(v12 + 548) & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v32 = *(_DWORD *)(v12 + 460);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        __int16 v177 = 2082;
        uint64_t v178 = (const char *)(v12 + 464);
        __int16 v179 = 2080;
        uint64_t v180 = (uint64_t)" ";
        __int16 v181 = 1024;
        *(_DWORD *)int v182 = v32;
        *(_WORD *)&v182[4] = 2048;
        *(void *)&v182[6] = *(void *)type;
        uint64_t v16 = "%{public}s %{public}s%s<i%u> called remove_input_handler with stream id %lld, but no stream found";
        goto LABEL_54;
      }
    }
  }
LABEL_78:
  *((void *)handle + 11) = 0;
  if (*(char **)(v12 + 48) != handle) {
    goto LABEL_85;
  }
  if (*(_DWORD *)(v12 + 444))
  {
    uint64_t v42 = *(void *)(v12 + 424);
    if (v42)
    {
LABEL_81:
      nw_protocol_set_input_handler(v12, v42);
      if ((*(unsigned char *)(v12 + 548) & 2) != 0) {
        goto LABEL_85;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v43 = *((void *)v5 + 237);
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO)) {
        goto LABEL_85;
      }
      int v44 = *(_DWORD *)(v12 + 460);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
      __int16 v177 = 2082;
      uint64_t v178 = (const char *)(v12 + 464);
      __int16 v179 = 2080;
      uint64_t v180 = (uint64_t)" ";
      __int16 v181 = 1024;
      *(_DWORD *)int v182 = v44;
      uint64_t v45 = "%{public}s %{public}s%s<i%u> not destroying, still have datagram stream";
      goto LABEL_84;
    }
  }
  else
  {
    if ((*(unsigned char *)(v12 + 548) & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v53 = *((void *)v5 + 237);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        int v54 = *(_DWORD *)(v12 + 460);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        __int16 v177 = 2082;
        uint64_t v178 = (const char *)(v12 + 464);
        __int16 v179 = 2080;
        uint64_t v180 = (uint64_t)" ";
        __int16 v181 = 1024;
        *(_DWORD *)int v182 = v54;
        _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> first input handler bailed, closing", buf, 0x26u);
      }
    }
    uint64_t v55 = *(void *)(v12 + 432);
    uint64_t v56 = *(void **)(v12 + 392);
    v163[0] = MEMORY[0x1E4F143A8];
    v163[1] = 0x40000000;
    v163[2] = ___ZL37nw_webtransport_session_remove_streamP23nw_webtransport_sessionP22nw_webtransport_stream_block_invoke;
    v163[3] = &unk_1E5240268;
    v163[4] = v55;
    nw_queue_context_async(v56, v163);
    uint64_t v42 = *(void *)(v12 + 424);
    if (v42) {
      goto LABEL_81;
    }
  }
  char v57 = *(os_unfair_lock_s **)(v12 + 184);
  if (v57 && v57[10]._os_unfair_lock_opaque)
  {
    some_BOOL node = nw_hash_table_get_some_node(v57);
    uint64_t object = nw_hash_node_get_object(some_node);
    nw_protocol_set_input_handler(v12, object);
    if ((*(unsigned char *)(v12 + 548) & 2) != 0) {
      goto LABEL_85;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v43 = *((void *)v5 + 237);
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO)) {
      goto LABEL_85;
    }
    int v60 = *(_DWORD *)(v12 + 460);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
    __int16 v177 = 2082;
    uint64_t v178 = (const char *)(v12 + 464);
    __int16 v179 = 2080;
    uint64_t v180 = (uint64_t)" ";
    __int16 v181 = 1024;
    *(_DWORD *)int v182 = v60;
    uint64_t v45 = "%{public}s %{public}s%s<i%u> not destroying, still have active streams";
    goto LABEL_84;
  }
  if (!*(_DWORD *)(v12 + 456))
  {
    uint64_t v71 = *(void *)(v12 + 416);
    if (v71)
    {
      nw_protocol_set_input_handler(v12, v71);
      if ((*(unsigned char *)(v12 + 548) & 2) != 0) {
        goto LABEL_85;
      }
      uint64_t v43 = __nwlog_obj();
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO)) {
        goto LABEL_85;
      }
      int v72 = *(_DWORD *)(v12 + 460);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
      __int16 v177 = 2082;
      uint64_t v178 = (const char *)(v12 + 464);
      __int16 v179 = 2080;
      uint64_t v180 = (uint64_t)" ";
      __int16 v181 = 1024;
      *(_DWORD *)int v182 = v72;
      uint64_t v45 = "%{public}s %{public}s%s<i%u> not destroying, still have placeholder stream";
      goto LABEL_84;
    }
    nw_protocol_set_input_handler(v12, 0);
    if ((*(unsigned char *)(v12 + 548) & 2) == 0)
    {
      uint64_t v73 = __nwlog_obj();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        int v74 = *(_DWORD *)(v12 + 460);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
        __int16 v177 = 2082;
        uint64_t v178 = (const char *)(v12 + 464);
        __int16 v179 = 2080;
        uint64_t v180 = (uint64_t)" ";
        __int16 v181 = 1024;
        *(_DWORD *)int v182 = v74;
        _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> called, destroying session", buf, 0x26u);
      }
    }
    *(void *)buf = 0;
    nw::retained_ptr<nw_endpoint *>::operator=(v12 + 344, buf);
    *(void *)buf = 0;
    nw::retained_ptr<nw_endpoint *>::operator=(v12 + 360, buf);
    *(void *)buf = 0;
    nw::retained_ptr<nw_endpoint *>::operator=(v12 + 376, buf);
    nw_http_capsule_framer_cleanup((void *)(v12 + 96));
    uint64_t v75 = *(void *)(v12 + 400);
    if (v75) {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v75 + 8))(v75, v12, 0);
    }
    if ((*(unsigned char *)(v12 + 548) & 4) != 0)
    {
      if ((nw_protocol_remove_listen_handler(*(void *)(v12 + 408), v12 + 64) & 1) == 0
        && (*(unsigned char *)(v12 + 548) & 2) == 0)
      {
        os_log_type_t v76 = __nwlog_obj();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          int v77 = *(_DWORD *)(v12 + 460);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          __int16 v177 = 2082;
          uint64_t v178 = (const char *)(v12 + 464);
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v77;
          _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> failed to remove listen handler", buf, 0x26u);
        }
      }
      *(void *)(v12 + 408) = 0;
    }
    uint64_t v78 = *(void *)(v12 + 32);
    if (v78) {
      nw_protocol_remove_input_handler(v78, v12);
    }
    uint64_t v170 = 0;
    uint64_t v171 = &v170;
    uint64_t v172 = 0x2000000000;
    uint64_t v173 = 0;
    uint8_t v79 = *(char **)(v12 + 184);
    if (v79)
    {
      *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
      uint64_t v165 = 0x40000000;
      uint64_t v166 = ___ZL31nw_webtransport_session_destroyP23nw_webtransport_session_block_invoke;
      uint64_t v167 = &unk_1E52402B0;
      uint64_t v168 = &v170;
      uint64_t v169 = v12;
      nw_hash_table_apply(v79, (uint64_t)type);
      int v80 = *(os_unfair_lock_s **)(v12 + 184);
      if (v80)
      {
        _nw_hash_table_release(v80);
        *(void *)(v12 + 184) = 0;
      }
    }
    uint64_t v81 = *(void *)(v12 + 328);
    v171[3] = v81;
    if (!v81)
    {
      (*(void (**)(void, void))(*(void *)(v12 + 432) + 16))(*(void *)(v12 + 432), 0);
      uint64_t v126 = *(const void **)(v12 + 432);
      if (v126)
      {
        _Block_release(v126);
        *(void *)(v12 + 432) = 0;
      }
      std::destroy_at[abi:nn180100]<nw_webtransport_session,0>(v12);
      free((void *)v12);
      _Block_object_dispose(&v170, 8);
      goto LABEL_85;
    }
    v161 = (const char *)(v12 + 464);
    while (1)
    {
      uint64_t v81 = *(void *)(v81 + 112);
      if ((*(unsigned char *)(v12 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v82 = *((void *)v5 + 237);
        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          int v83 = *(_DWORD *)(v12 + 460);
          uint64_t v84 = v171[3];
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          __int16 v177 = 2082;
          uint64_t v178 = v161;
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v83;
          *(_WORD *)&v182[4] = 2048;
          *(void *)&v182[6] = v84;
          _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> should not have stream %p left, destroying anyways", buf, 0x30u);
        }
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
      BOOL v85 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v175 = OS_LOG_TYPE_ERROR;
      char v174 = 0;
      if (__nwlog_fault(v85, &v175, &v174))
      {
        if (v175 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v86 = gLogObj;
          os_log_type_t v87 = v175;
          if (!os_log_type_enabled((os_log_t)gLogObj, v175)) {
            goto LABEL_168;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          BOOL v88 = v86;
          os_log_type_t v89 = v87;
          os_log_type_t v90 = "%{public}s should not have streams left when destroying";
LABEL_167:
          _os_log_impl(&dword_1830D4000, v88, v89, v90, buf, 0xCu);
          goto LABEL_168;
        }
        if (!v174)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v95 = gLogObj;
          os_log_type_t v96 = v175;
          if (!os_log_type_enabled((os_log_t)gLogObj, v175)) {
            goto LABEL_168;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          BOOL v88 = v95;
          os_log_type_t v89 = v96;
          os_log_type_t v90 = "%{public}s should not have streams left when destroying, backtrace limit exceeded";
          goto LABEL_167;
        }
        int v91 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v92 = gLogObj;
        os_log_type_t v93 = v175;
        BOOL v94 = os_log_type_enabled((os_log_t)gLogObj, v175);
        if (!v91)
        {
          if (!v94) {
            goto LABEL_168;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          BOOL v88 = v92;
          os_log_type_t v89 = v93;
          os_log_type_t v90 = "%{public}s should not have streams left when destroying, no backtrace";
          goto LABEL_167;
        }
        if (v94)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          __int16 v177 = 2082;
          uint64_t v178 = v91;
          _os_log_impl(&dword_1830D4000, v92, v93, "%{public}s should not have streams left when destroying, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v91);
      }
LABEL_168:
      if (v85) {
        free(v85);
      }
      uint64_t v97 = *(void *)(v81 + 112);
      size_t v98 = *(void **)(v81 + 120);
      if (v97)
      {
        *(void *)(v97 + 120) = v98;
        size_t v98 = *(void **)(v81 + 120);
      }
      else
      {
        *(void *)(v162 + 336) = v98;
      }
      *size_t v98 = v97;
      *(void *)(v81 + 112) = 0;
      *(void *)(v81 + 120) = 0;
      uint64_t v99 = v171[3];
      uint64_t v5 = &unk_1EB267000;
      if (v99)
      {
        if ((*(unsigned char *)(v99 + 276) & 0x10) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v100 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v101 = *(void *)(v99 + 88);
            if (v101) {
              int v102 = *(_DWORD *)(v101 + 460);
            }
            else {
              int v102 = -1;
            }
            uint64_t v103 = *(void *)(v99 + 64);
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
            __int16 v177 = 2082;
            uint64_t v178 = (const char *)(v99 + 192);
            __int16 v179 = 2080;
            uint64_t v180 = (uint64_t)" ";
            __int16 v181 = 1024;
            *(_DWORD *)int v182 = v102;
            *(_WORD *)&v182[4] = 2048;
            *(void *)&v182[6] = v103;
            *(_WORD *)&v182[14] = 2048;
            *(void *)&v182[16] = v99;
            _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> destroying stream %p", buf, 0x3Au);
          }
        }
        if (*(void *)(v99 + 72))
        {
          if ((*(unsigned char *)(v99 + 276) & 0x10) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v104 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              uint64_t v105 = *(void *)(v99 + 88);
              if (v105) {
                int v106 = *(_DWORD *)(v105 + 460);
              }
              else {
                int v106 = -1;
              }
              uint64_t v107 = *(void *)(v99 + 64);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
              __int16 v177 = 2082;
              uint64_t v178 = (const char *)(v99 + 192);
              __int16 v179 = 2080;
              uint64_t v180 = (uint64_t)" ";
              __int16 v181 = 1024;
              *(_DWORD *)int v182 = v106;
              *(_WORD *)&v182[4] = 2048;
              *(void *)&v182[6] = v107;
              _os_log_impl(&dword_1830D4000, v104, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> input_frames has unread frames before destroying", buf, 0x30u);
            }
          }
        }
        uint64_t v108 = *(void *)(v99 + 72);
        do
        {
          if (!v108) {
            break;
          }
          uint64_t v109 = *(void *)(v108 + 32);
          char v110 = ___ZL30nw_webtransport_stream_destroyP22nw_webtransport_stream_block_invoke((uint64_t)&__block_literal_global_31, v108);
          uint64_t v108 = v109;
        }
        while ((v110 & 1) != 0);
        (*(void (**)(void, void))(*(void *)(v99 + 176) + 16))(*(void *)(v99 + 176), 0);
        BOOL v111 = *(const void **)(v99 + 176);
        if (v111)
        {
          _Block_release(v111);
          *(void *)(v99 + 176) = 0;
        }
        if (*(unsigned char *)(v99 + 168))
        {
          uint64_t v112 = *(void **)(v99 + 160);
          if (v112) {
            os_release(v112);
          }
        }
        *(void *)(v99 + 160) = 0;
        if (*(unsigned char *)(v99 + 152))
        {
          BOOL v113 = *(void **)(v99 + 144);
          if (v113) {
            os_release(v113);
          }
        }
        *(void *)(v99 + 144) = 0;
        if (*(unsigned char *)(v99 + 136))
        {
          BOOL v114 = *(void **)(v99 + 128);
          if (v114) {
            os_release(v114);
          }
        }
LABEL_201:
        free((void *)v99);
        goto LABEL_202;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
      uint64_t v99 = _os_log_send_and_compose_impl();
      os_log_type_t v175 = OS_LOG_TYPE_ERROR;
      char v174 = 0;
      if (!__nwlog_fault((const char *)v99, &v175, &v174)) {
        goto LABEL_218;
      }
      if (v175 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v115 = __nwlog_obj();
        os_log_type_t v116 = v175;
        if (os_log_type_enabled(v115, v175))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
          BOOL v117 = v115;
          os_log_type_t v118 = v116;
          char v119 = "%{public}s called with null webtransport_stream";
          goto LABEL_217;
        }
LABEL_218:
        if (v99) {
          goto LABEL_201;
        }
        goto LABEL_202;
      }
      if (!v174)
      {
        uint64_t v124 = __nwlog_obj();
        os_log_type_t v125 = v175;
        if (!os_log_type_enabled(v124, v175)) {
          goto LABEL_218;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        BOOL v117 = v124;
        os_log_type_t v118 = v125;
        char v119 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
LABEL_217:
        _os_log_impl(&dword_1830D4000, v117, v118, v119, buf, 0xCu);
        goto LABEL_218;
      }
      uint64_t v120 = (char *)__nw_create_backtrace_string();
      uint64_t v121 = __nwlog_obj();
      os_log_type_t v122 = v175;
      BOOL v123 = os_log_type_enabled(v121, v175);
      if (!v120)
      {
        uint64_t v5 = &unk_1EB267000;
        if (!v123) {
          goto LABEL_218;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        BOOL v117 = v121;
        os_log_type_t v118 = v122;
        char v119 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_217;
      }
      if (v123)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        __int16 v177 = 2082;
        uint64_t v178 = v120;
        _os_log_impl(&dword_1830D4000, v121, v122, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v120);
      uint64_t v5 = &unk_1EB267000;
      if (v99) {
        goto LABEL_201;
      }
LABEL_202:
      v171[3] = v81;
      uint64_t v12 = v162;
    }
  }
  uint64_t v69 = *(void *)(v12 + 328);
  if (v69)
  {
    if ((*(unsigned char *)(v69 + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v157 = __nwlog_obj();
        if (os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v158 = *(void *)(v69 + 88);
          if (v158) {
            int v159 = *(_DWORD *)(v158 + 460);
          }
          else {
            int v159 = -1;
          }
          uint64_t v160 = *(void *)(v69 + 64);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_get_next_pending_stream";
          __int16 v177 = 2082;
          uint64_t v178 = (const char *)(v69 + 192);
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v159;
          *(_WORD *)&v182[4] = 2048;
          *(void *)&v182[6] = v160;
          *(_WORD *)&v182[14] = 2048;
          *(void *)&v182[16] = v69;
          _os_log_impl(&dword_1830D4000, v157, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> found stream (%p)", buf, 0x3Au);
          uint64_t v12 = v162;
        }
      }
    }
  }
  nw_protocol_set_input_handler(v12, v69);
  if ((*(unsigned char *)(v12 + 548) & 2) != 0) {
    goto LABEL_85;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v43 = *((void *)v5 + 237);
  if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO)) {
    goto LABEL_85;
  }
  int v70 = *(_DWORD *)(v12 + 460);
  *(_DWORD *)buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
  __int16 v177 = 2082;
  uint64_t v178 = (const char *)(v12 + 464);
  __int16 v179 = 2080;
  uint64_t v180 = (uint64_t)" ";
  __int16 v181 = 1024;
  *(_DWORD *)int v182 = v70;
  uint64_t v45 = "%{public}s %{public}s%s<i%u> not destroying, still have pending streams";
LABEL_84:
  _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_INFO, v45, buf, 0x26u);
LABEL_85:
  nw_protocol_set_output_handler((uint64_t)a1, 0);
  if ((handle[276] & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v46 = *((void *)v5 + 237);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      uint64_t v47 = *((void *)handle + 11);
      if (v47) {
        int v48 = *(_DWORD *)(v47 + 460);
      }
      else {
        int v48 = -1;
      }
      uint64_t v49 = *((void *)handle + 8);
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
      __int16 v177 = 2082;
      uint64_t v178 = handle + 192;
      __int16 v179 = 2080;
      uint64_t v180 = (uint64_t)" ";
      __int16 v181 = 1024;
      *(_DWORD *)int v182 = v48;
      *(_WORD *)&v182[4] = 2048;
      *(void *)&v182[6] = v49;
      *(_WORD *)&v182[14] = 2048;
      *(void *)&v182[16] = handle;
      _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> destroying stream %p", buf, 0x3Au);
    }
  }
  if (*((void *)handle + 9))
  {
    if ((handle[276] & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v50 = *((void *)v5 + 237);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        uint64_t v51 = *((void *)handle + 11);
        if (v51) {
          int v52 = *(_DWORD *)(v51 + 460);
        }
        else {
          int v52 = -1;
        }
        uint64_t v61 = *((void *)handle + 8);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        __int16 v177 = 2082;
        uint64_t v178 = handle + 192;
        __int16 v179 = 2080;
        uint64_t v180 = (uint64_t)" ";
        __int16 v181 = 1024;
        *(_DWORD *)int v182 = v52;
        *(_WORD *)&v182[4] = 2048;
        *(void *)&v182[6] = v61;
        _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> input_frames has unread frames before destroying", buf, 0x30u);
      }
    }
  }
  uint64_t v62 = *((void *)handle + 9);
  do
  {
    if (!v62) {
      break;
    }
    uint64_t v63 = *(void *)(v62 + 32);
    char v64 = ___ZL30nw_webtransport_stream_destroyP22nw_webtransport_stream_block_invoke((uint64_t)&__block_literal_global_31, v62);
    uint64_t v62 = v63;
  }
  while ((v64 & 1) != 0);
  (*(void (**)(void, void))(*((void *)handle + 22) + 16))(*((void *)handle + 22), 0);
  uint64_t v65 = (const void *)*((void *)handle + 22);
  if (v65)
  {
    _Block_release(v65);
    *((void *)handle + 22) = 0;
  }
  if (handle[168])
  {
    os_log_type_t v66 = (void *)*((void *)handle + 20);
    if (v66) {
      os_release(v66);
    }
  }
  *((void *)handle + 20) = 0;
  if (handle[152])
  {
    int v67 = (void *)*((void *)handle + 18);
    if (v67) {
      os_release(v67);
    }
  }
  *((void *)handle + 18) = 0;
  if (handle[136])
  {
    int v68 = (void *)*((void *)handle + 16);
    if (v68) {
      os_release(v68);
    }
  }
  free(handle);
  return 1;
}

void ___ZL37nw_webtransport_session_remove_streamP23nw_webtransport_sessionP22nw_webtransport_stream_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v1)
  {
    uint64_t v2 = v1;
    if (*(_DWORD *)(v1 + 444) == 5)
    {
      if ((*(unsigned char *)(v1 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v3 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          int v4 = *(_DWORD *)(v2 + 460);
          *(_DWORD *)int v15 = 136446978;
          *(void *)&v15[4] = "nw_webtransport_session_terminate";
          *(_WORD *)&v15[12] = 2082;
          *(void *)&v15[14] = v2 + 464;
          *(_WORD *)&v15[22] = 2080;
          uint64_t v16 = " ";
          *(_WORD *)char v17 = 1024;
          *(_DWORD *)&void v17[2] = v4;
          _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Session already terminated, ignoring", v15, 0x26u);
        }
      }
    }
    else
    {
      if ((*(unsigned char *)(v1 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          int v6 = *(_DWORD *)(v2 + 460);
          *(_DWORD *)int v15 = 136447234;
          *(void *)&v15[4] = "nw_webtransport_session_terminate";
          *(_WORD *)&v15[12] = 2082;
          *(void *)&v15[14] = v2 + 464;
          *(_WORD *)&v15[22] = 2080;
          uint64_t v16 = " ";
          *(_WORD *)char v17 = 1024;
          *(_DWORD *)&void v17[2] = v6;
          __int16 v18 = 1024;
          int v19 = 57;
          _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Closing webtransport session with error %{darwin.errno}d", v15, 0x2Cu);
        }
      }
      *(_DWORD *)(v2 + 444) = 5;
      uint64_t v7 = *(char **)(v2 + 184);
      if (v7)
      {
        *(void *)int v15 = MEMORY[0x1E4F143A8];
        *(void *)&v15[8] = 0x40000000;
        *(void *)&v15[16] = ___ZL33nw_webtransport_session_terminateP23nw_webtransport_sessioni_block_invoke;
        uint64_t v16 = (const char *)&__block_descriptor_tmp_26_33833;
        *(_DWORD *)char v17 = 57;
        nw_hash_table_apply(v7, (uint64_t)v15);
      }
      uint64_t v8 = *(void *)(v2 + 424);
      if (v8)
      {
        uint64_t v9 = *(void **)(v8 + 48);
        nw_protocol_error(v9, *(void *)(v2 + 424));
        nw_protocol_disconnected(v9, v8);
      }
      uint64_t v10 = *(void *)(v2 + 328);
      if (v10)
      {
        do
        {
          uint64_t v11 = *(void *)(v10 + 112);
          uint64_t v12 = *(void **)(v10 + 48);
          nw_protocol_error(v12, v10);
          nw_protocol_disconnected(v12, v10);
          uint64_t v10 = v11;
        }
        while (v11);
      }
      uint64_t v13 = *(void *)(v2 + 416);
      if (v13)
      {
        uint64_t v14 = *(void **)(v13 + 48);
        nw_protocol_error(v14, *(void *)(v2 + 416));
        nw_protocol_disconnected(v14, v13);
      }
      if (*(void *)(v2 + 32))
      {
        nw_protocol_remove_instance(v2);
        nw_protocol_disconnect(*(void **)(v2 + 32), v2);
      }
    }
  }
}

uint64_t ___ZL31nw_webtransport_session_destroyP23nw_webtransport_session_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_hash_node_get_object(a2);
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4 || (*(unsigned char *)(v4 + 548) & 2) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = (const char *)(v6 + 464);
      uint64_t v8 = "";
      BOOL v9 = v6 == 0;
      if (!v6) {
        uint64_t v7 = "";
      }
      int v10 = *(_DWORD *)(v6 + 460);
      if (!v9) {
        uint64_t v8 = " ";
      }
      uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      *(_DWORD *)buf = 136447234;
      int v54 = "nw_webtransport_session_destroy_block_invoke";
      __int16 v55 = 2082;
      uint64_t v56 = (void *)v7;
      __int16 v57 = 2080;
      uint64_t v58 = v8;
      __int16 v59 = 1024;
      int v60 = v10;
      __int16 v61 = 2048;
      uint64_t v62 = v11;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> should not have stream %p left, destroying anyways", buf, 0x30u);
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  int v54 = "nw_webtransport_session_destroy_block_invoke";
  uint64_t v12 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v51 = 0;
  if (__nwlog_fault(v12, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = gLogObj;
      os_log_type_t v14 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      int v54 = "nw_webtransport_session_destroy_block_invoke";
      int v15 = "%{public}s should not have streams left when destroying";
LABEL_20:
      uint64_t v20 = v13;
      os_log_type_t v21 = v14;
LABEL_21:
      _os_log_impl(&dword_1830D4000, v20, v21, v15, buf, 0xCu);
      goto LABEL_22;
    }
    if (!v51)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = gLogObj;
      os_log_type_t v14 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      int v54 = "nw_webtransport_session_destroy_block_invoke";
      int v15 = "%{public}s should not have streams left when destroying, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v17 = gLogObj;
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        int v54 = "nw_webtransport_session_destroy_block_invoke";
        __int16 v55 = 2082;
        uint64_t v56 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s should not have streams left when destroying, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v19)
    {
      *(_DWORD *)buf = 136446210;
      int v54 = "nw_webtransport_session_destroy_block_invoke";
      int v15 = "%{public}s should not have streams left when destroying, no backtrace";
      uint64_t v20 = v17;
      os_log_type_t v21 = v18;
      goto LABEL_21;
    }
  }
LABEL_22:
  if (v12) {
    free(v12);
  }
  if (!nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 40) + 184), a2))
  {
    uint64_t v22 = *(void *)(a1 + 40);
    if (!v22 || (*(unsigned char *)(v22 + 548) & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v23 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = *(void *)(a1 + 40);
        int v25 = (const char *)(v24 + 464);
        uint64_t v26 = "";
        if (v24) {
          uint64_t v26 = " ";
        }
        else {
          int v25 = "";
        }
        int v27 = *(_DWORD *)(v24 + 460);
        uint64_t v28 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 64);
        *(_DWORD *)buf = 136447234;
        int v54 = "nw_webtransport_session_destroy_block_invoke";
        __int16 v55 = 2082;
        uint64_t v56 = (void *)v25;
        __int16 v57 = 2080;
        uint64_t v58 = v26;
        __int16 v59 = 1024;
        int v60 = v27;
        __int16 v61 = 2048;
        uint64_t v62 = v28;
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Failed to remove stream %lld from hash table", buf, 0x30u);
      }
    }
  }
  uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v29)
  {
    if ((*(unsigned char *)(v29 + 276) & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v30 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = *(void *)(v29 + 88);
        if (v31) {
          int v32 = *(_DWORD *)(v31 + 460);
        }
        else {
          int v32 = -1;
        }
        uint64_t v33 = *(void *)(v29 + 64);
        *(_DWORD *)buf = 136447490;
        int v54 = "nw_webtransport_stream_destroy";
        __int16 v55 = 2082;
        uint64_t v56 = (void *)(v29 + 192);
        __int16 v57 = 2080;
        uint64_t v58 = " ";
        __int16 v59 = 1024;
        int v60 = v32;
        __int16 v61 = 2048;
        uint64_t v62 = v33;
        __int16 v63 = 2048;
        uint64_t v64 = v29;
        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> destroying stream %p", buf, 0x3Au);
      }
    }
    if (*(void *)(v29 + 72))
    {
      if ((*(unsigned char *)(v29 + 276) & 0x10) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v34 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          uint64_t v35 = *(void *)(v29 + 88);
          if (v35) {
            int v36 = *(_DWORD *)(v35 + 460);
          }
          else {
            int v36 = -1;
          }
          uint64_t v37 = *(void *)(v29 + 64);
          *(_DWORD *)buf = 136447234;
          int v54 = "nw_webtransport_stream_destroy";
          __int16 v55 = 2082;
          uint64_t v56 = (void *)(v29 + 192);
          __int16 v57 = 2080;
          uint64_t v58 = " ";
          __int16 v59 = 1024;
          int v60 = v36;
          __int16 v61 = 2048;
          uint64_t v62 = v37;
          _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> input_frames has unread frames before destroying", buf, 0x30u);
        }
      }
    }
    uint64_t v38 = *(void *)(v29 + 72);
    do
    {
      if (!v38) {
        break;
      }
      uint64_t v39 = *(void *)(v38 + 32);
      char v40 = ___ZL30nw_webtransport_stream_destroyP22nw_webtransport_stream_block_invoke((uint64_t)&__block_literal_global_31, v38);
      uint64_t v38 = v39;
    }
    while ((v40 & 1) != 0);
    (*(void (**)(void, void))(*(void *)(v29 + 176) + 16))(*(void *)(v29 + 176), 0);
    char v41 = *(const void **)(v29 + 176);
    if (v41)
    {
      _Block_release(v41);
      *(void *)(v29 + 176) = 0;
    }
    if (*(unsigned char *)(v29 + 168))
    {
      uint64_t v42 = *(void **)(v29 + 160);
      if (v42) {
        os_release(v42);
      }
    }
    *(void *)(v29 + 160) = 0;
    if (*(unsigned char *)(v29 + 152))
    {
      uint64_t v43 = *(void **)(v29 + 144);
      if (v43) {
        os_release(v43);
      }
    }
    *(void *)(v29 + 144) = 0;
    if (*(unsigned char *)(v29 + 136))
    {
      int v44 = *(void **)(v29 + 128);
      if (v44) {
        os_release(v44);
      }
    }
LABEL_62:
    free((void *)v29);
    return 1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v54 = "nw_webtransport_stream_destroy";
  uint64_t v29 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v51 = 0;
  if (!__nwlog_fault((const char *)v29, &type, &v51))
  {
LABEL_79:
    if (!v29) {
      return 1;
    }
    goto LABEL_62;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v46 = __nwlog_obj();
    os_log_type_t v47 = type;
    if (!os_log_type_enabled(v46, type)) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446210;
    int v54 = "nw_webtransport_stream_destroy";
    int v48 = "%{public}s called with null webtransport_stream";
LABEL_78:
    _os_log_impl(&dword_1830D4000, v46, v47, v48, buf, 0xCu);
    goto LABEL_79;
  }
  if (!v51)
  {
    uint64_t v46 = __nwlog_obj();
    os_log_type_t v47 = type;
    if (!os_log_type_enabled(v46, type)) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446210;
    int v54 = "nw_webtransport_stream_destroy";
    int v48 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_78;
  }
  uint64_t v49 = (char *)__nw_create_backtrace_string();
  uint64_t v46 = __nwlog_obj();
  os_log_type_t v47 = type;
  BOOL v50 = os_log_type_enabled(v46, type);
  if (!v49)
  {
    if (!v50) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446210;
    int v54 = "nw_webtransport_stream_destroy";
    int v48 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_78;
  }
  if (v50)
  {
    *(_DWORD *)buf = 136446466;
    int v54 = "nw_webtransport_stream_destroy";
    __int16 v55 = 2082;
    uint64_t v56 = v49;
    _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v49);
  if (v29) {
    goto LABEL_62;
  }
  return 1;
}

void std::destroy_at[abi:nn180100]<nw_webtransport_session,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 384))
  {
    uint64_t v2 = *(void **)(a1 + 376);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 376) = 0;
  if (*(unsigned char *)(a1 + 368))
  {
    uint64_t v3 = *(void **)(a1 + 360);
    if (v3) {
      os_release(v3);
    }
  }
  *(void *)(a1 + 360) = 0;
  if (*(unsigned char *)(a1 + 352))
  {
    uint64_t v4 = *(void **)(a1 + 344);
    if (v4) {
      os_release(v4);
    }
  }
  *(void *)(a1 + 344) = 0;
}

uint64_t ___ZL30nw_webtransport_stream_destroyP22nw_webtransport_stream_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_protocol_webtransport_stream_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v6, &type, &v16)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
      BOOL v9 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_50:
        if (!v6) {
          return;
        }
        goto LABEL_51;
      }
      if (!v11) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
      BOOL v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
      BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_49;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v6, &type, &v16)) {
      goto LABEL_50;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
        BOOL v9 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_49;
      }
      uint64_t v12 = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (!v12)
      {
        if (!v13) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
        BOOL v9 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_49;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
        __int16 v20 = 2082;
        os_log_type_t v21 = v12;
        os_log_type_t v14 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
LABEL_34:
        _os_log_impl(&dword_1830D4000, v7, v8, v14, buf, 0x16u);
      }
LABEL_35:
      free(v12);
      if (!v6) {
        return;
      }
LABEL_51:
      free(v6);
      return;
    }
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
    BOOL v9 = "%{public}s called with null webtransport_stream";
LABEL_49:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_50;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v6, &type, &v16)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
      BOOL v9 = "%{public}s called with null message_properties";
      goto LABEL_49;
    }
    if (!v16)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
      BOOL v9 = "%{public}s called with null message_properties, backtrace limit exceeded";
      goto LABEL_49;
    }
    uint64_t v12 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v15 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v15) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
      BOOL v9 = "%{public}s called with null message_properties, no backtrace";
      goto LABEL_49;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v19 = "nw_protocol_webtransport_stream_get_message_properties";
      __int16 v20 = 2082;
      os_log_type_t v21 = v12;
      os_log_type_t v14 = "%{public}s called with null message_properties, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  unsigned int v4 = a3[1] & 0xFFFFFFF8;
  if (*(void *)(v3 + 64) == -2) {
    int v5 = 1;
  }
  else {
    int v5 = 4;
  }
  *a3 = -1;
  a3[1] = v4 | v5;
}

uint64_t nw_protocol_webtransport_stream_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
      BOOL v9 = "%{public}s called with null protocol";
LABEL_51:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      goto LABEL_52;
    }
    if (!v19)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
        BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v14 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
        BOOL v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v14) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
    __int16 v23 = 2082;
    uint64_t v24 = backtrace_string;
    BOOL v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_35:
    _os_log_impl(&dword_1830D4000, v7, v8, v15, buf, 0x16u);
    goto LABEL_36;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
      BOOL v9 = "%{public}s called with null webtransport_stream";
      goto LABEL_51;
    }
    if (!v19)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
        BOOL v9 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v16 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
        BOOL v9 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v16) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
    __int16 v23 = 2082;
    uint64_t v24 = backtrace_string;
    BOOL v15 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
    goto LABEL_35;
  }
  uint64_t v3 = handle[11];
  if (v3)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        int v10 = __nwlog_obj();
        BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
        uint64_t v3 = handle[11];
        if (v11)
        {
          if (v3) {
            int v12 = *(_DWORD *)(v3 + 460);
          }
          else {
            int v12 = -1;
          }
          uint64_t v18 = handle[8];
          *(_DWORD *)buf = 136447234;
          uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
          __int16 v23 = 2082;
          uint64_t v24 = (char *)(handle + 24);
          __int16 v25 = 2080;
          uint64_t v26 = " ";
          __int16 v27 = 1024;
          int v28 = v12;
          __int16 v29 = 2048;
          uint64_t v30 = v18;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
          uint64_t v3 = handle[11];
        }
      }
    }
    return nw_protocol_remove_listen_handler(v3, (uint64_t)a2);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_52;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v19)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
        BOOL v9 = "%{public}s called with null webtransport_stream->webtransport_session, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v17 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
        BOOL v9 = "%{public}s called with null webtransport_stream->webtransport_session, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      BOOL v15 = "%{public}s called with null webtransport_stream->webtransport_session, dumping backtrace:%{public}s";
      goto LABEL_35;
    }
LABEL_36:
    free(backtrace_string);
    goto LABEL_52;
  }
  uint64_t v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
    BOOL v9 = "%{public}s called with null webtransport_stream->webtransport_session";
    goto LABEL_51;
  }
LABEL_52:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t nw_protocol_webtransport_stream_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
      BOOL v9 = "%{public}s called with null protocol";
LABEL_51:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      goto LABEL_52;
    }
    if (!v19)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
        BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v14 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
        BOOL v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v14) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
    __int16 v23 = 2082;
    uint64_t v24 = backtrace_string;
    BOOL v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_35:
    _os_log_impl(&dword_1830D4000, v7, v8, v15, buf, 0x16u);
    goto LABEL_36;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_52;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
      BOOL v9 = "%{public}s called with null webtransport_stream";
      goto LABEL_51;
    }
    if (!v19)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
        BOOL v9 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v16 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
        BOOL v9 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v16) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
    __int16 v23 = 2082;
    uint64_t v24 = backtrace_string;
    BOOL v15 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
    goto LABEL_35;
  }
  uint64_t v3 = handle[11];
  if (v3)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        int v10 = __nwlog_obj();
        BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
        uint64_t v3 = handle[11];
        if (v11)
        {
          if (v3) {
            int v12 = *(_DWORD *)(v3 + 460);
          }
          else {
            int v12 = -1;
          }
          uint64_t v18 = handle[8];
          *(_DWORD *)buf = 136447234;
          uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
          __int16 v23 = 2082;
          uint64_t v24 = (char *)(handle + 24);
          __int16 v25 = 2080;
          uint64_t v26 = " ";
          __int16 v27 = 1024;
          int v28 = v12;
          __int16 v29 = 2048;
          uint64_t v30 = v18;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
          uint64_t v3 = handle[11];
        }
      }
    }
    return nw_protocol_add_listen_handler(v3, (uint64_t)a2);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_52;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v19)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
        BOOL v9 = "%{public}s called with null webtransport_stream->webtransport_session, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v17 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
        BOOL v9 = "%{public}s called with null webtransport_stream->webtransport_session, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      BOOL v15 = "%{public}s called with null webtransport_stream->webtransport_session, dumping backtrace:%{public}s";
      goto LABEL_35;
    }
LABEL_36:
    free(backtrace_string);
    goto LABEL_52;
  }
  uint64_t v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_webtransport_stream_add_listen_handler";
    BOOL v9 = "%{public}s called with null webtransport_stream->webtransport_session";
    goto LABEL_51;
  }
LABEL_52:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t nw_protocol_webtransport_stream_copy_info(uint64_t a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3)
    {
      if ((*(unsigned char *)(v3 + 276) & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          BOOL v11 = __nwlog_obj();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v12 = *(void *)(v3 + 88);
            if (v12) {
              int v13 = *(_DWORD *)(v12 + 460);
            }
            else {
              int v13 = -1;
            }
            uint64_t v18 = *(void *)(v3 + 64);
            *(_DWORD *)buf = 136447234;
            uint64_t v22 = "nw_protocol_webtransport_stream_copy_info";
            __int16 v23 = 2082;
            uint64_t v24 = (char *)(v3 + 192);
            __int16 v25 = 2080;
            uint64_t v26 = " ";
            __int16 v27 = 1024;
            int v28 = v13;
            __int16 v29 = 2048;
            uint64_t v30 = v18;
            _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
          }
        }
      }
      if (*(void *)(v3 + 32)) {
        uint64_t v5 = a1;
      }
      else {
        uint64_t v5 = *(void *)(v3 + 88);
      }
      return nw_protocol_common_copy_info(v5, a2);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_webtransport_stream_copy_info";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v7, &type, &v19)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_copy_info";
        int v10 = "%{public}s called with null webtransport_stream";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (!v19)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_copy_info";
        int v10 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v17 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_copy_info";
        int v10 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_protocol_webtransport_stream_copy_info";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      BOOL v16 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_protocol_webtransport_stream_copy_info";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v7, &type, &v19)) {
    goto LABEL_42;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v19)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_copy_info";
        int v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v15 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_protocol_webtransport_stream_copy_info";
        int v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "nw_protocol_webtransport_stream_copy_info";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      BOOL v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_29:
      _os_log_impl(&dword_1830D4000, v8, v9, v16, buf, 0x16u);
    }
LABEL_30:
    free(backtrace_string);
    goto LABEL_42;
  }
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_webtransport_stream_copy_info";
    int v10 = "%{public}s called with null protocol";
LABEL_41:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
  }
LABEL_42:
  if (v7) {
    free(v7);
  }
  return 0;
}

void nw_protocol_webtransport_stream_notify(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_webtransport_stream_notify";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v7, &type, &v19)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_protocol_webtransport_stream_notify";
      int v10 = "%{public}s called with null protocol";
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v15 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v22 = "nw_protocol_webtransport_stream_notify";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_40:
        if (!v7) {
          return;
        }
LABEL_41:
        free(v7);
        return;
      }
      if (!v15) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_protocol_webtransport_stream_notify";
      int v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "nw_protocol_webtransport_stream_notify";
      int v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_39:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_40;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    if ((*(unsigned char *)(v4 + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v11 = __nwlog_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = *(void *)(v4 + 88);
          if (v12) {
            int v13 = *(_DWORD *)(v12 + 460);
          }
          else {
            int v13 = -1;
          }
          uint64_t v18 = *(void *)(v4 + 64);
          *(_DWORD *)buf = 136447234;
          uint64_t v22 = "nw_protocol_webtransport_stream_notify";
          __int16 v23 = 2082;
          uint64_t v24 = (char *)(v4 + 192);
          __int16 v25 = 2080;
          uint64_t v26 = " ";
          __int16 v27 = 1024;
          int v28 = v13;
          __int16 v29 = 2048;
          uint64_t v30 = v18;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }
    nw_protocol_common_notify(a1, a2, a3);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_protocol_webtransport_stream_notify";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v7, &type, &v19)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_webtransport_stream_notify";
    int v10 = "%{public}s called with null webtransport_stream";
    goto LABEL_39;
  }
  if (!v19)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_webtransport_stream_notify";
    int v10 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_39;
  }
  BOOL v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_protocol_webtransport_stream_notify";
    int v10 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_39;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v22 = "nw_protocol_webtransport_stream_notify";
    __int16 v23 = 2082;
    uint64_t v24 = v16;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v16);
  if (v7) {
    goto LABEL_41;
  }
}

void nw_protocol_webtransport_stream_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_output_available";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v4, &type, &v16)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_stream_output_available";
      uint64_t v7 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v12 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v19 = "nw_protocol_webtransport_stream_output_available";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_41:
        if (!v4) {
          return;
        }
LABEL_42:
        free(v4);
        return;
      }
      if (!v12) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_stream_output_available";
      uint64_t v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_stream_output_available";
      uint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_40:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_41;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = handle[11];
          if (v9) {
            int v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            int v10 = -1;
          }
          uint64_t v15 = handle[8];
          *(_DWORD *)buf = 136447234;
          char v19 = "nw_protocol_webtransport_stream_output_available";
          __int16 v20 = 2082;
          os_log_type_t v21 = (char *)(handle + 24);
          __int16 v22 = 2080;
          __int16 v23 = " ";
          __int16 v24 = 1024;
          int v25 = v10;
          __int16 v26 = 2048;
          uint64_t v27 = v15;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }
    if (*((_DWORD *)handle + 47) == 2) {
      nw_protocol_output_available((void *)handle[6], (uint64_t)a1);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_protocol_webtransport_stream_output_available";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v4, &type, &v16)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_output_available";
    uint64_t v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_40;
  }
  if (!v16)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_output_available";
    uint64_t v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_40;
  }
  int v13 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_output_available";
    uint64_t v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_40;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    char v19 = "nw_protocol_webtransport_stream_output_available";
    __int16 v20 = 2082;
    os_log_type_t v21 = v13;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v4) {
    goto LABEL_42;
  }
}

void nw_protocol_webtransport_stream_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_input_available";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v4, &type, &v16)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_stream_input_available";
      uint64_t v7 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v12 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v19 = "nw_protocol_webtransport_stream_input_available";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_41:
        if (!v4) {
          return;
        }
LABEL_42:
        free(v4);
        return;
      }
      if (!v12) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_stream_input_available";
      uint64_t v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_stream_input_available";
      uint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_40:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_41;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = handle[11];
          if (v9) {
            int v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            int v10 = -1;
          }
          uint64_t v15 = handle[8];
          *(_DWORD *)buf = 136447234;
          char v19 = "nw_protocol_webtransport_stream_input_available";
          __int16 v20 = 2082;
          os_log_type_t v21 = (char *)(handle + 24);
          __int16 v22 = 2080;
          __int16 v23 = " ";
          __int16 v24 = 1024;
          int v25 = v10;
          __int16 v26 = 2048;
          uint64_t v27 = v15;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }
    if (*((_DWORD *)handle + 46) == 2) {
      nw_protocol_input_available((void *)handle[6], (uint64_t)a1);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_protocol_webtransport_stream_input_available";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v4, &type, &v16)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_input_available";
    uint64_t v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_40;
  }
  if (!v16)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_input_available";
    uint64_t v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_40;
  }
  int v13 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_input_available";
    uint64_t v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_40;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    char v19 = "nw_protocol_webtransport_stream_input_available";
    __int16 v20 = 2082;
    os_log_type_t v21 = v13;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v4) {
    goto LABEL_42;
  }
}

void nw_protocol_webtransport_stream_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_disconnected";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v4, &type, &v16)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_stream_disconnected";
      uint64_t v7 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v12 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v19 = "nw_protocol_webtransport_stream_disconnected";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_40:
        if (!v4) {
          return;
        }
LABEL_41:
        free(v4);
        return;
      }
      if (!v12) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_stream_disconnected";
      uint64_t v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_webtransport_stream_disconnected";
      uint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_39:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_40;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = handle[11];
          if (v9) {
            int v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            int v10 = -1;
          }
          uint64_t v15 = handle[8];
          *(_DWORD *)buf = 136447234;
          char v19 = "nw_protocol_webtransport_stream_disconnected";
          __int16 v20 = 2082;
          os_log_type_t v21 = (char *)(handle + 24);
          __int16 v22 = 2080;
          __int16 v23 = " ";
          __int16 v24 = 1024;
          int v25 = v10;
          __int16 v26 = 2048;
          uint64_t v27 = v15;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }
    nw_protocol_disconnected(a1->default_input_handler->flow_id, (uint64_t)a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_protocol_webtransport_stream_disconnected";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v4, &type, &v16)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_disconnected";
    uint64_t v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_39;
  }
  if (!v16)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_disconnected";
    uint64_t v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_39;
  }
  int v13 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_disconnected";
    uint64_t v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_39;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    char v19 = "nw_protocol_webtransport_stream_disconnected";
    __int16 v20 = 2082;
    os_log_type_t v21 = v13;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v4) {
    goto LABEL_41;
  }
}

uint64_t nw_protocol_webtransport_stream_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_webtransport_stream_get_remote_endpoint";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_webtransport_stream_get_remote_endpoint";
      uint64_t v9 = "%{public}s called with null protocol";
      goto LABEL_36;
    }
    if (!v14)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_webtransport_stream_get_remote_endpoint";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (!v11) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_webtransport_stream_get_remote_endpoint";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_36;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v17 = "nw_protocol_webtransport_stream_get_remote_endpoint";
      __int16 v18 = 2082;
      char v19 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_37:
    if (!v6) {
      return 0;
    }
LABEL_38:
    free(v6);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_webtransport_stream_get_remote_endpoint";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_webtransport_stream_get_remote_endpoint";
      uint64_t v9 = "%{public}s called with null webtransport_stream";
      goto LABEL_36;
    }
    if (!v14)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_webtransport_stream_get_remote_endpoint";
      uint64_t v9 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
      goto LABEL_36;
    }
    BOOL v12 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (v12)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v17 = "nw_protocol_webtransport_stream_get_remote_endpoint";
        __int16 v18 = 2082;
        char v19 = v12;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v12);
      if (!v6) {
        return 0;
      }
      goto LABEL_38;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_webtransport_stream_get_remote_endpoint";
      uint64_t v9 = "%{public}s called with null webtransport_stream, no backtrace";
LABEL_36:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  uint64_t v2 = handle[6];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3 || !*(void *)(v3 + 136)) {
    return 0;
  }
  default_input_handler = a1->default_input_handler;

  return nw_protocol_get_remote_endpoint((uint64_t)default_input_handler);
}

uint64_t nw_protocol_webtransport_stream_get_parameters(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[18];
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_webtransport_stream_get_parameters";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_webtransport_stream_get_parameters";
        os_log_type_t v6 = "%{public}s called with null webtransport_stream";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_webtransport_stream_get_parameters";
        os_log_type_t v6 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_webtransport_stream_get_parameters";
        os_log_type_t v6 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      char v14 = "nw_protocol_webtransport_stream_get_parameters";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      uint64_t v9 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_protocol_webtransport_stream_get_parameters";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_webtransport_stream_get_parameters";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = __nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_webtransport_stream_get_parameters";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      char v14 = "nw_protocol_webtransport_stream_get_parameters";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      uint64_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_t v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_webtransport_stream_get_parameters";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3) {
    free(v3);
  }
  return 0;
}

uint64_t nw_protocol_webtransport_stream_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
    __int16 v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v15, &type, &v43)) {
      goto LABEL_75;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
      __int16 v18 = "%{public}s called with null protocol";
      goto LABEL_74;
    }
    if (!v43)
    {
      char v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
      __int16 v18 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v23 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (!v23) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
      __int16 v18 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_74;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
      __int16 v47 = 2082;
      int v48 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_75:
    if (!v15) {
      return 0;
    }
LABEL_76:
    free(v15);
    return 0;
  }
  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
    __int16 v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v15, &type, &v43)) {
      goto LABEL_75;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
      __int16 v18 = "%{public}s called with null webtransport_stream";
      goto LABEL_74;
    }
    if (!v43)
    {
      char v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
      __int16 v18 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
      goto LABEL_74;
    }
    __int16 v24 = (char *)__nw_create_backtrace_string();
    char v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v25 = os_log_type_enabled(v16, type);
    if (v24)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
        __int16 v47 = 2082;
        int v48 = v24;
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v24);
      if (!v15) {
        return 0;
      }
      goto LABEL_76;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
      __int16 v18 = "%{public}s called with null webtransport_stream, no backtrace";
LABEL_74:
      _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
      goto LABEL_75;
    }
    goto LABEL_75;
  }
  if ((BYTE4(handle[4].identifier) & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      char v19 = __nwlog_obj();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        callbacks = handle[1].callbacks;
        if (callbacks) {
          int input_finished_high = HIDWORD(callbacks[1].input_finished);
        }
        else {
          int input_finished_high = -1;
        }
        uint64_t v38 = *(void *)handle[1].flow_id;
        *(_DWORD *)buf = 136447234;
        uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
        __int16 v47 = 2082;
        int v48 = (char *)&handle[3];
        __int16 v49 = 2080;
        BOOL v50 = " ";
        __int16 v51 = 1024;
        int v52 = input_finished_high;
        __int16 v53 = 2048;
        uint64_t v54 = v38;
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }
  uint64_t v5 = (uint64_t)handle[1].callbacks;
  if (v5) {
    BOOL v6 = a1->default_input_handler == a2;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (gLogDatapath)
    {
      uint64_t v7 = __nwlog_obj();
      uint64_t result = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s Rejecting duplicate request for a webtransport stream", buf, 0xCu);
    }
  }
  else
  {
    if ((BYTE4(handle[4].identifier) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        __int16 v26 = __nwlog_obj();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v27 = handle[1].callbacks;
          if (v27) {
            int v28 = HIDWORD(v27[1].input_finished);
          }
          else {
            int v28 = -1;
          }
          uint64_t v39 = *(void *)handle[1].flow_id;
          *(_DWORD *)buf = 136447490;
          uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
          __int16 v47 = 2082;
          int v48 = (char *)&handle[3];
          __int16 v49 = 2080;
          BOOL v50 = " ";
          __int16 v51 = 1024;
          int v52 = v28;
          __int16 v53 = 2048;
          uint64_t v54 = v39;
          __int16 v55 = 2048;
          uint64_t v56 = handle;
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> Peeling off a new stream from %p", buf, 0x3Au);
        }
      }
    }
    uint64_t parameters = nw_protocol_get_parameters((uint64_t)a2);
    if (parameters)
    {
      BOOL v10 = (nw_protocol *)parameters;
      if ((BYTE4(handle[4].identifier) & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          __int16 v29 = __nwlog_obj();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v30 = handle[1].callbacks;
            if (v30) {
              int v31 = HIDWORD(v30[1].input_finished);
            }
            else {
              int v31 = -1;
            }
            uint64_t v40 = *(void *)handle[1].flow_id;
            *(_DWORD *)buf = 136447234;
            uint64_t v46 = "nw_webtransport_stream_replace_protocol_instance";
            __int16 v47 = 2082;
            int v48 = (char *)&handle[3];
            __int16 v49 = 2080;
            BOOL v50 = " ";
            __int16 v51 = 1024;
            int v52 = v31;
            __int16 v53 = 2048;
            uint64_t v54 = v40;
            _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
          }
        }
      }
      char v11 = nw_parameters_copy_protocol_options_legacy(v10, handle);
      if (v11)
      {
        BOOL v12 = v11;
        if ((BYTE4(handle[4].identifier) & 0x10) == 0)
        {
          if (gLogDatapath)
          {
            uint64_t v35 = __nwlog_obj();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
            {
              int v36 = handle[1].callbacks;
              if (v36) {
                int v37 = HIDWORD(v36[1].input_finished);
              }
              else {
                int v37 = -1;
              }
              uint64_t v42 = *(void *)handle[1].flow_id;
              *(_DWORD *)buf = 136448514;
              uint64_t v46 = "nw_webtransport_stream_replace_protocol_instance";
              __int16 v47 = 2082;
              int v48 = (char *)&handle[3];
              __int16 v49 = 2080;
              BOOL v50 = " ";
              __int16 v51 = 1024;
              int v52 = v37;
              __int16 v53 = 2048;
              uint64_t v54 = v42;
              __int16 v55 = 2048;
              uint64_t v56 = handle;
              __int16 v57 = 2048;
              uint64_t v58 = v5;
              __int16 v59 = 2048;
              int v60 = handle;
              __int16 v61 = 2048;
              uint64_t v62 = v10;
              __int16 v63 = 2048;
              uint64_t v64 = v12;
              _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> webtransport_stream protocol %p, set protocol instance to %p instead of %p in parameters %p options %p", buf, 0x62u);
            }
          }
        }
        if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
          dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_61090);
        }
        id v13 = (id)nw_protocol_copy_webtransport_definition::definition;
        char v14 = v12;
        *((void *)v14 + 2) = v5;

        if (v13) {
          os_release(v13);
        }
        os_release(v14);
      }
      if ((BYTE4(handle[4].identifier) & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          int v32 = __nwlog_obj();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v33 = handle[1].callbacks;
            if (v33) {
              int v34 = HIDWORD(v33[1].input_finished);
            }
            else {
              int v34 = -1;
            }
            uint64_t v41 = *(void *)handle[1].flow_id;
            *(_DWORD *)buf = 136447490;
            uint64_t v46 = "nw_protocol_webtransport_stream_add_input_handler";
            __int16 v47 = 2082;
            int v48 = (char *)&handle[3];
            __int16 v49 = 2080;
            BOOL v50 = " ";
            __int16 v51 = 1024;
            int v52 = v34;
            __int16 v53 = 2048;
            uint64_t v54 = v41;
            __int16 v55 = 2048;
            uint64_t v56 = v10;
            _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> Set connection protocol as instance in peeled off parameters %p", buf, 0x3Au);
          }
        }
      }
    }
    if (handle[1].callbacks) {
      return nw_protocol_add_input_handler(v5, (uint64_t)a2);
    }
  }
  return 0;
}

void ___ZL47nw_protocol_webtransport_http2_stream_callbacksv_block_invoke()
{
  qword_1E8F799F0 = (uint64_t)nw_protocol_default_replace_input_handler;
  qword_1E8F79AE8 = (uint64_t)nw_protocol_default_input_flush;
  qword_1E8F79A48 = (uint64_t)nw_protocol_default_link_state;
  qword_1E8F79A60 = (uint64_t)nw_protocol_default_get_local;
  qword_1E8F79A58 = (uint64_t)nw_protocol_default_get_path;
  qword_1E8F79A88 = (uint64_t)nw_protocol_default_updated_path;
  qword_1E8F79AA8 = (uint64_t)nw_protocol_default_get_output_local;
  qword_1E8F79AB0 = (uint64_t)nw_protocol_default_get_output_interface;
  qword_1E8F79AE0 = (uint64_t)nw_protocol_default_reset;
  qword_1E8F79A90 = (uint64_t)nw_protocol_default_supports_external_data;
  qword_1E8F79AB8 = (uint64_t)nw_protocol_default_waiting_for_output;
  qword_1E8F79A70 = (uint64_t)nw_protocol_default_register_notification;
  qword_1E8F79A78 = (uint64_t)nw_protocol_default_unregister_notification;
  nw_protocol_webtransport_http2_stream_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_webtransport_stream_add_input_handler;
  qword_1E8F79A50 = (uint64_t)nw_protocol_webtransport_stream_get_parameters;
  qword_1E8F79A68 = (uint64_t)nw_protocol_webtransport_stream_get_remote_endpoint;
  qword_1E8F79A00 = (uint64_t)nw_protocol_webtransport_stream_disconnect;
  qword_1E8F79A10 = (uint64_t)nw_protocol_webtransport_stream_disconnected;
  qword_1E8F79A18 = (uint64_t)nw_protocol_webtransport_stream_error;
  qword_1E8F79A20 = (uint64_t)nw_protocol_webtransport_stream_input_available;
  qword_1E8F79A28 = (uint64_t)nw_protocol_webtransport_stream_output_available;
  qword_1E8F79A80 = (uint64_t)nw_protocol_webtransport_stream_notify;
  qword_1E8F79AC0 = (uint64_t)nw_protocol_webtransport_stream_copy_info;
  qword_1E8F79AC8 = (uint64_t)nw_protocol_webtransport_stream_add_listen_handler;
  qword_1E8F79AD0 = (uint64_t)nw_protocol_webtransport_stream_remove_listen_handler;
  qword_1E8F79AD8 = (uint64_t)nw_protocol_webtransport_stream_get_message_properties;
  qword_1E8F799E8 = (uint64_t)nw_protocol_webtransport_http2_stream_remove_input_handler;
  qword_1E8F799F8 = (uint64_t)nw_protocol_webtransport_http2_stream_connect;
  qword_1E8F79A08 = (uint64_t)nw_protocol_webtransport_http2_stream_connected;
  qword_1E8F79A30 = (uint64_t)nw_protocol_webtransport_http2_stream_get_input_frames;
  qword_1E8F79A38 = (uint64_t)nw_protocol_webtransport_http2_stream_get_output_frames;
  qword_1E8F79A40 = (uint64_t)nw_protocol_webtransport_http2_stream_finalize_output_frames;
  qword_1E8F79A98 = (uint64_t)nw_protocol_webtransport_http2_stream_input_finished;
  qword_1E8F79AA0 = (uint64_t)nw_protocol_webtransport_http2_stream_output_finished;
}

void nw_protocol_webtransport_http2_stream_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v9, type, &v25)) {
      goto LABEL_64;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type[0];
      if (!os_log_type_enabled(v10, type[0])) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
      BOOL v12 = "%{public}s called with null protocol";
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type[0];
      BOOL v17 = os_log_type_enabled(v10, type[0]);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_64:
        if (!v9) {
          return;
        }
        goto LABEL_65;
      }
      if (!v17) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
      BOOL v12 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type[0];
      if (!os_log_type_enabled(v10, type[0])) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
      BOOL v12 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_63;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v9, type, &v25)) {
      goto LABEL_64;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t v11 = type[0];
        if (!os_log_type_enabled(v10, type[0])) {
          goto LABEL_64;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
        BOOL v12 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_63;
      }
      __int16 v18 = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type[0];
      BOOL v19 = os_log_type_enabled(v10, type[0]);
      if (!v18)
      {
        if (!v19) {
          goto LABEL_64;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
        BOOL v12 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_63;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v18;
        uint64_t v20 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v10, v11, v20, buf, 0x16u);
      }
LABEL_37:
      free(v18);
      if (!v9) {
        return;
      }
LABEL_65:
      free(v9);
      return;
    }
    BOOL v10 = __nwlog_obj();
    os_log_type_t v11 = type[0];
    if (!os_log_type_enabled(v10, type[0])) {
      goto LABEL_64;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
    BOOL v12 = "%{public}s called with null webtransport_stream";
LABEL_63:
    _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
    goto LABEL_64;
  }
  if ((*((unsigned char *)handle + 276) & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      id v13 = __nwlog_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = handle[11];
        if (v14) {
          int v15 = *(_DWORD *)(v14 + 460);
        }
        else {
          int v15 = -1;
        }
        uint64_t v23 = handle[8];
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_output_finished";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 24;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v32 = (uint64_t)" ";
        LOWORD(v33) = 1024;
        *(_DWORD *)((char *)&v33 + 2) = v15;
        HIWORD(v33) = 2048;
        BOOL v34 = v23;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }
  if (*((_DWORD *)handle + 47) != 2 || (*((unsigned char *)handle + 276) & 8) != 0) {
    return;
  }
  uint64_t v3 = handle[11];
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_http2_send_control_capsule";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v9, type, &v25)) {
      goto LABEL_64;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type[0];
      if (!os_log_type_enabled(v10, type[0])) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http2_send_control_capsule";
      BOOL v12 = "%{public}s called with null webtransport_session";
      goto LABEL_63;
    }
    if (!v25)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type[0];
      if (!os_log_type_enabled(v10, type[0])) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http2_send_control_capsule";
      BOOL v12 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
      goto LABEL_63;
    }
    __int16 v18 = (char *)__nw_create_backtrace_string();
    BOOL v10 = __nwlog_obj();
    os_log_type_t v11 = type[0];
    BOOL v24 = os_log_type_enabled(v10, type[0]);
    if (!v18)
    {
      if (!v24) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http2_send_control_capsule";
      BOOL v12 = "%{public}s called with null webtransport_session, no backtrace";
      goto LABEL_63;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http2_send_control_capsule";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v18;
      uint64_t v20 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  uint64_t v4 = handle[8];
  if (!*(void *)(v3 + 192)) {
    *(void *)(v3 + 192) = nw_array_create();
  }
  uint64_t v5 = malloc_type_calloc(1uLL, 0x18uLL, 0xEAFB8F1AuLL);
  if (!v5)
  {
    os_log_type_t v21 = __nwlog_obj();
    os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "strict_calloc";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = 1;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v32 = 24;
    __int16 v22 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v22))
    {
      __break(1u);
      return;
    }
    free(v22);
  }
  void *v5 = 420171068;
  v5[1] = v4;
  v5[2] = -1;
  nw_array_append(*(void *)(v3 + 192), v5);
  uint64_t v6 = *(void *)(v3 + 192);
  if (v6 && *(void *)(v6 + 16) != *(void *)(v6 + 24))
  {
    BOOL v7 = nw_array_create();
    BOOL v8 = *(atomic_uchar **)(v3 + 192);
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL51nw_webtransport_http2_send_pending_control_capsulesP23nw_webtransport_session_block_invoke;
    uint64_t v32 = (uint64_t)&__block_descriptor_tmp_43_34021;
    uint64_t v33 = v3;
    BOOL v34 = v7;
    nw_array_apply(v8, (uint64_t)buf);
    *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
    uint64_t v27 = 0x40000000;
    int v28 = ___ZL51nw_webtransport_http2_send_pending_control_capsulesP23nw_webtransport_session_block_invoke_44;
    __int16 v29 = &__block_descriptor_tmp_45_34022;
    uint64_t v30 = v3;
    nw_array_apply((atomic_uchar *)v7, (uint64_t)type);
    if (v7) {
      os_release((void *)v7);
    }
  }
}

void nw_protocol_webtransport_http2_stream_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_http2_stream_input_finished";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v4, &type, &v16)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_protocol_webtransport_http2_stream_input_finished";
      BOOL v7 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v12 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v19 = "nw_protocol_webtransport_http2_stream_input_finished";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_41:
        if (!v4) {
          return;
        }
LABEL_42:
        free(v4);
        return;
      }
      if (!v12) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_protocol_webtransport_http2_stream_input_finished";
      BOOL v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_protocol_webtransport_http2_stream_input_finished";
      BOOL v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_40:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_41;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = handle[11];
          if (v9) {
            int v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            int v10 = -1;
          }
          uint64_t v15 = handle[8];
          *(_DWORD *)buf = 136447234;
          BOOL v19 = "nw_protocol_webtransport_http2_stream_input_finished";
          __int16 v20 = 2082;
          os_log_type_t v21 = (char *)(handle + 24);
          __int16 v22 = 2080;
          uint64_t v23 = " ";
          __int16 v24 = 1024;
          int v25 = v10;
          __int16 v26 = 2048;
          uint64_t v27 = v15;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }
    if (*((_DWORD *)handle + 46) == 2) {
      nw_protocol_input_finished((void *)handle[6], (uint64_t)a1);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "nw_protocol_webtransport_http2_stream_input_finished";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v4, &type, &v16)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_http2_stream_input_finished";
    BOOL v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_40;
  }
  if (!v16)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_http2_stream_input_finished";
    BOOL v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_40;
  }
  id v13 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_http2_stream_input_finished";
    BOOL v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_40;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v19 = "nw_protocol_webtransport_http2_stream_input_finished";
    __int16 v20 = 2082;
    os_log_type_t v21 = v13;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v4) {
    goto LABEL_42;
  }
}

uint64_t nw_protocol_webtransport_http2_stream_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v35 = "nw_protocol_webtransport_http2_stream_finalize_output_frames";
    id v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v35 = "nw_protocol_webtransport_http2_stream_finalize_output_frames";
        char v16 = "%{public}s called with null protocol";
LABEL_53:
        _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
      }
LABEL_54:
      if (v13) {
        free(v13);
      }
      return 0;
    }
    if (!v32)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v35 = "nw_protocol_webtransport_http2_stream_finalize_output_frames";
        char v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v21 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v35 = "nw_protocol_webtransport_http2_stream_finalize_output_frames";
        char v16 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v35 = "nw_protocol_webtransport_http2_stream_finalize_output_frames";
      __int16 v36 = 2082;
      int v37 = backtrace_string;
      __int16 v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_41:
      _os_log_impl(&dword_1830D4000, v14, v15, v22, buf, 0x16u);
    }
LABEL_42:
    free(backtrace_string);
    goto LABEL_54;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v35 = "nw_protocol_webtransport_http2_stream_finalize_output_frames";
    id v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v35 = "nw_protocol_webtransport_http2_stream_finalize_output_frames";
        char v16 = "%{public}s called with null webtransport_stream";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (!v32)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v35 = "nw_protocol_webtransport_http2_stream_finalize_output_frames";
        char v16 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v23 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v35 = "nw_protocol_webtransport_http2_stream_finalize_output_frames";
        char v16 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v35 = "nw_protocol_webtransport_http2_stream_finalize_output_frames";
      __int16 v36 = 2082;
      int v37 = backtrace_string;
      __int16 v22 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  if ((*((unsigned char *)handle + 276) & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v17 = __nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = handle[11];
        if (v18) {
          int v19 = *(_DWORD *)(v18 + 460);
        }
        else {
          int v19 = -1;
        }
        uint64_t v24 = handle[8];
        *(_DWORD *)buf = 136447234;
        uint64_t v35 = "nw_protocol_webtransport_http2_stream_finalize_output_frames";
        __int16 v36 = 2082;
        int v37 = (char *)(handle + 24);
        __int16 v38 = 2080;
        uint64_t v39 = " ";
        __int16 v40 = 1024;
        int v41 = v19;
        __int16 v42 = 2048;
        uint64_t v43 = v24;
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }
  if ((*((unsigned char *)handle + 276) & 8) != 0)
  {
    uint64_t v7 = 0;
  }
  else
  {
    unint64_t v5 = handle[8];
    if (v5 >= 0x40)
    {
      if (v5 >> 14)
      {
        if (v5 >> 30)
        {
          if (v5 >> 62)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446466;
            uint64_t v35 = "_http_vle_encode";
            __int16 v36 = 2048;
            int v37 = (char *)v5;
            BOOL v8 = (void *)_os_log_send_and_compose_impl();
            uint64_t result = __nwlog_abort((uint64_t)v8);
            if (result)
            {
              __break(1u);
              return result;
            }
            free(v8);
            unint64_t v5 = 0;
            char v6 = 0;
          }
          else
          {
            unint64_t v5 = bswap64(v5 | 0xC000000000000000);
            char v6 = 8;
          }
        }
        else
        {
          unint64_t v5 = bswap32(v5 | 0x80000000);
          char v6 = 4;
        }
      }
      else
      {
        unint64_t v5 = bswap32(v5 | 0x4000) >> 16;
        char v6 = 2;
      }
    }
    else
    {
      char v6 = 1;
    }
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 0x40000000;
    __int16 v26 = ___ZL60nw_protocol_webtransport_http2_stream_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
    uint64_t v27 = &__block_descriptor_tmp_40_34512;
    char v31 = v6;
    uint64_t v28 = a1;
    unint64_t v29 = v5;
    uint64_t v30 = handle;
    tqh_first = a2->tqh_first;
    uint64_t v7 = 420171067;
    do
    {
      if (!tqh_first) {
        break;
      }
      os_log_type_t v11 = (nw_frame *)*((void *)tqh_first + 4);
      char v12 = ((uint64_t (*)(void *))v26)(v25);
      tqh_first = v11;
    }
    while ((v12 & 1) != 0);
  }
  return nw_http_capsule_framer_finalize_output_frames(handle[11] + 96, handle[11], v7, (uint64_t *)a2);
}

uint64_t ___ZL60nw_protocol_webtransport_http2_stream_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  nw_frame_unclaim(a2, a2, *(unsigned __int8 *)(a1 + 56), 0);
  int v6 = 0;
  uint64_t v4 = (void *)nw_frame_unclaimed_bytes(a2, &v6);
  memcpy(v4, (const void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
  if (nw_frame_is_metadata_complete(a2)) {
    *(_DWORD *)(*(void *)(a1 + 48) + 188) = 3;
  }
  return 1;
}

BOOL nw_protocol_webtransport_http2_stream_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, uint64_t a5, nw_frame_array_s *a6)
{
  *(void *)&v57[11] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v26, &type, &v48)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
      unint64_t v29 = "%{public}s called with null protocol";
      goto LABEL_75;
    }
    if (!v48)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
      unint64_t v29 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v34 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (!v34) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
      unint64_t v29 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_75;
    }
    if (!v34) {
      goto LABEL_60;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
    __int16 v52 = 2082;
    __int16 v53 = backtrace_string;
    uint64_t v35 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_59:
    _os_log_impl(&dword_1830D4000, v27, v28, v35, buf, 0x16u);
    goto LABEL_60;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v26, &type, &v48)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
      unint64_t v29 = "%{public}s called with null webtransport_stream";
      goto LABEL_75;
    }
    if (!v48)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
      unint64_t v29 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v36 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (!v36) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
      unint64_t v29 = "%{public}s called with null webtransport_stream, no backtrace";
      goto LABEL_75;
    }
    if (!v36) {
      goto LABEL_60;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
    __int16 v52 = 2082;
    __int16 v53 = backtrace_string;
    uint64_t v35 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
    goto LABEL_59;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v26, &type, &v48)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
      unint64_t v29 = "%{public}s called with null return_array";
      goto LABEL_75;
    }
    if (!v48)
    {
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
      unint64_t v29 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v37 = os_log_type_enabled(v27, type);
    if (backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
        __int16 v52 = 2082;
        __int16 v53 = backtrace_string;
        uint64_t v35 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
        goto LABEL_59;
      }
LABEL_60:
      free(backtrace_string);
      goto LABEL_76;
    }
    if (!v37) {
      goto LABEL_76;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
    unint64_t v29 = "%{public}s called with null return_array, no backtrace";
LABEL_75:
    _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
LABEL_76:
    if (v26) {
      free(v26);
    }
    return 0;
  }
  if ((handle[276] & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v31 = *((void *)handle + 11);
        if (v31) {
          int v32 = *(_DWORD *)(v31 + 460);
        }
        else {
          int v32 = -1;
        }
        uint64_t v38 = *((void *)handle + 8);
        *(_DWORD *)buf = 136447234;
        __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
        __int16 v52 = 2082;
        __int16 v53 = handle + 192;
        __int16 v54 = 2080;
        __int16 v55 = " ";
        __int16 v56 = 1024;
        *(_DWORD *)__int16 v57 = v32;
        v57[2] = 2048;
        *(void *)&v57[3] = v38;
        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }
  if (*((nw_protocol **)handle + 6) != a2 || *((_DWORD *)handle + 47) != 2) {
    return 0;
  }
  if ((handle[276] & 8) != 0) {
    return nw_http_capsule_framer_get_output_frames(*((void *)handle + 11) + 96, *((void *)handle + 11), 0, a3, 0xF4240u, a5, (uint64_t *)a6);
  }
  unint64_t v13 = *((void *)handle + 8);
  if (v13 < 0x40)
  {
    char v14 = 0;
    unsigned int v15 = 1;
    goto LABEL_20;
  }
  if (v13 < 0x4000)
  {
    char v14 = 0;
    unsigned int v15 = 2;
    goto LABEL_20;
  }
  if (!(v13 >> 30))
  {
    char v14 = 0;
    unsigned int v15 = 4;
    goto LABEL_20;
  }
  if (!(v13 >> 62))
  {
    char v14 = 0;
    unsigned int v15 = 8;
    goto LABEL_20;
  }
  BOOL v17 = __nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  __int16 v51 = "_http_vle_length";
  __int16 v52 = 2048;
  __int16 v53 = (const char *)v13;
  uint64_t v18 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v18);
  if (!result)
  {
    free(v18);
    unsigned int v15 = 0;
    char v14 = 1;
LABEL_20:
    BOOL v20 = __CFADD__(a3, v15);
    uint64_t v21 = a3 + v15;
    if (v20)
    {
      if (gLogDatapath)
      {
        char v42 = v14;
        uint64_t v39 = __nwlog_obj();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
          __int16 v52 = 2082;
          __int16 v53 = "minimum_bytes";
          __int16 v54 = 2048;
          __int16 v55 = (const char *)v15;
          __int16 v56 = 2048;
          *(void *)__int16 v57 = v21;
          _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }
        LODWORD(v21) = -1;
        char v14 = v42;
        uint64_t v22 = a4 + v15;
        if (!__CFADD__(a4, v15)) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      LODWORD(v21) = -1;
    }
    uint64_t v22 = a4 + v15;
    if (!__CFADD__(a4, v15))
    {
LABEL_27:
      BOOL output_frames = nw_http_capsule_framer_get_output_frames(*((void *)handle + 11) + 96, *((void *)handle + 11), 0x190B4D3BuLL, v21, 0xF4240u, a5, (uint64_t *)a6);
      if ((v14 & 1) == 0)
      {
        v43[0] = MEMORY[0x1E4F143A8];
        v43[1] = 0x40000000;
        uint64_t v44 = ___ZL55nw_protocol_webtransport_http2_stream_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
        uint64_t v45 = &__block_descriptor_tmp_39_34534;
        uint64_t v46 = a1;
        unsigned int v47 = v15;
        tqh_first = a6->tqh_first;
        do
        {
          if (!tqh_first) {
            break;
          }
          uint64_t v24 = (nw_frame *)*((void *)tqh_first + 4);
          char v25 = ((uint64_t (*)(void *))v44)(v43);
          tqh_first = v24;
        }
        while ((v25 & 1) != 0);
      }
      return output_frames;
    }
LABEL_26:
    if (gLogDatapath)
    {
      uint64_t v40 = v22;
      int v41 = __nwlog_obj();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        __int16 v51 = "nw_protocol_webtransport_http2_stream_get_output_frames";
        __int16 v52 = 2082;
        __int16 v53 = "maximum_bytes";
        __int16 v54 = 2048;
        __int16 v55 = (const char *)v15;
        __int16 v56 = 2048;
        *(void *)__int16 v57 = v40;
        _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
      }
    }
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t ___ZL55nw_protocol_webtransport_http2_stream_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_protocol_webtransport_http2_stream_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
    unint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v13, &type, &v33)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
      char v16 = "%{public}s called with null protocol";
      goto LABEL_55;
    }
    if (!v33)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
      char v16 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v21 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v21) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
      char v16 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_55;
    }
    if (!v21) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    uint64_t v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_39:
    _os_log_impl(&dword_1830D4000, v14, v15, v22, buf, 0x16u);
    goto LABEL_40;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
    unint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v13, &type, &v33)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
      char v16 = "%{public}s called with null webtransport_stream";
      goto LABEL_55;
    }
    if (!v33)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
      char v16 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v23 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v23) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
      char v16 = "%{public}s called with null webtransport_stream, no backtrace";
      goto LABEL_55;
    }
    if (!v23) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    uint64_t v22 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
    goto LABEL_39;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
    unint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v13, &type, &v33)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
      char v16 = "%{public}s called with null input_protocol";
      goto LABEL_55;
    }
    if (!v33)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
      char v16 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v24 = os_log_type_enabled(v14, type);
    if (backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v22 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
        goto LABEL_39;
      }
LABEL_40:
      free(backtrace_string);
      goto LABEL_56;
    }
    if (!v24) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
    char v16 = "%{public}s called with null input_protocol, no backtrace";
LABEL_55:
    _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
LABEL_56:
    if (v13) {
      free(v13);
    }
    return 0;
  }
  if ((*((unsigned char *)handle + 276) & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v17 = __nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = handle[11];
        if (v18) {
          int v19 = *(_DWORD *)(v18 + 460);
        }
        else {
          int v19 = -1;
        }
        uint64_t v25 = handle[8];
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 24;
        *(_WORD *)&buf[22] = 2080;
        BOOL v36 = " ";
        __int16 v37 = 1024;
        int v38 = v19;
        __int16 v39 = 2048;
        uint64_t v40 = v25;
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }
  if ((nw_protocol *)handle[6] != a2 || *((_DWORD *)handle + 46) != 2) {
    return 0;
  }
  a6->tqh_first = 0;
  a6->tqh_last = &a6->tqh_first;
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  LODWORD(v36) = 0;
  *(void *)&buf[16] = 0x2000000000;
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 0x40000000;
  os_log_type_t v28 = (uint64_t (*)(void *))___ZL54nw_protocol_webtransport_http2_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
  unint64_t v29 = &unk_1E5240318;
  uint64_t v31 = handle;
  int v32 = a6;
  uint64_t v30 = buf;
  uint64_t v9 = handle[9];
  do
  {
    if (!v9) {
      break;
    }
    uint64_t v10 = *(void *)(v9 + 32);
    char v11 = v28(v27);
    uint64_t v9 = v10;
  }
  while ((v11 & 1) != 0);
  uint64_t v12 = *(unsigned int *)(*(void *)&buf[8] + 24);
  _Block_object_dispose(buf, 8);
  return v12;
}

uint64_t ___ZL54nw_protocol_webtransport_http2_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 32);
  unint64_t v5 = *(void **)(a2 + 40);
  uint64_t v3 = (void *)(a2 + 32);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    unint64_t v5 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(a1[5] + 80) = v5;
  }
  void *v5 = v4;
  void *v3 = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = a1[6];
  uint64_t v7 = *(uint64_t **)(v6 + 8);
  *(void *)(a2 + 40) = v7;
  *uint64_t v7 = a2;
  *(void *)(v6 + 8) = v3;
  if (nw_frame_is_metadata_complete(a2))
  {
    uint64_t v8 = a1[5];
    if ((*(unsigned char *)(v8 + 276) & 8) == 0) {
      *(_DWORD *)(v8 + 184) = 3;
    }
  }
  uint64_t v9 = *(void *)(a1[4] + 8);
  uint64_t v10 = *(unsigned int *)(v9 + 24) + 1;
  uint64_t v11 = v10 << 31 >> 31;
  *(_DWORD *)(v9 + 24) = v10;
  if (v11 != v10 || v11 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v12 = *(unsigned int *)(*(void *)(a1[4] + 8) + 24);
    *(_DWORD *)buf = 136446978;
    uint64_t v27 = "nw_protocol_webtransport_http2_stream_get_input_frames_block_invoke";
    __int16 v28 = 2082;
    unint64_t v29 = "count";
    __int16 v30 = 2048;
    uint64_t v31 = 1;
    __int16 v32 = 2048;
    uint64_t v33 = v12;
    unint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v16 = *(unsigned int *)(*(void *)(a1[4] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          uint64_t v27 = "nw_protocol_webtransport_http2_stream_get_input_frames_block_invoke";
          __int16 v28 = 2082;
          unint64_t v29 = "count";
          __int16 v30 = 2048;
          uint64_t v31 = 1;
          __int16 v32 = 2048;
          uint64_t v33 = v16;
          BOOL v17 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_22:
          _os_log_impl(&dword_1830D4000, v14, v15, v17, buf, 0x2Au);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = gLogObj;
        os_log_type_t v15 = type;
        BOOL v19 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v19)
          {
            uint64_t v20 = *(unsigned int *)(*(void *)(a1[4] + 8) + 24);
            *(_DWORD *)buf = 136447234;
            uint64_t v27 = "nw_protocol_webtransport_http2_stream_get_input_frames_block_invoke";
            __int16 v28 = 2082;
            unint64_t v29 = "count";
            __int16 v30 = 2048;
            uint64_t v31 = 1;
            __int16 v32 = 2048;
            uint64_t v33 = v20;
            __int16 v34 = 2082;
            uint64_t v35 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(backtrace_string);
          goto LABEL_23;
        }
        if (v19)
        {
          uint64_t v22 = *(unsigned int *)(*(void *)(a1[4] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          uint64_t v27 = "nw_protocol_webtransport_http2_stream_get_input_frames_block_invoke";
          __int16 v28 = 2082;
          unint64_t v29 = "count";
          __int16 v30 = 2048;
          uint64_t v31 = 1;
          __int16 v32 = 2048;
          uint64_t v33 = v22;
          BOOL v17 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_22;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v21 = *(unsigned int *)(*(void *)(a1[4] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          uint64_t v27 = "nw_protocol_webtransport_http2_stream_get_input_frames_block_invoke";
          __int16 v28 = 2082;
          unint64_t v29 = "count";
          __int16 v30 = 2048;
          uint64_t v31 = 1;
          __int16 v32 = 2048;
          uint64_t v33 = v21;
          BOOL v17 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_22;
        }
      }
    }
LABEL_23:
    if (v13) {
      free(v13);
    }
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = -1;
  }
  return 1;
}

void nw_protocol_webtransport_http2_stream_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
    uint64_t v58 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v89 = 0;
    if (!__nwlog_fault(v58, &type, &v89)) {
      goto LABEL_142;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v59 = __nwlog_obj();
      os_log_type_t v60 = type;
      if (!os_log_type_enabled(v59, type)) {
        goto LABEL_142;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
      __int16 v61 = "%{public}s called with null protocol";
    }
    else if (v89)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v59 = __nwlog_obj();
      os_log_type_t v60 = type;
      BOOL v66 = os_log_type_enabled(v59, type);
      if (backtrace_string)
      {
        if (v66)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
          __int16 v93 = 2082;
          p_identifier = backtrace_string;
          _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_142:
        if (!v58) {
          return;
        }
LABEL_143:
        free(v58);
        return;
      }
      if (!v66) {
        goto LABEL_142;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
      __int16 v61 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      __int16 v59 = __nwlog_obj();
      os_log_type_t v60 = type;
      if (!os_log_type_enabled(v59, type)) {
        goto LABEL_142;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
      __int16 v61 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_141:
    _os_log_impl(&dword_1830D4000, v59, v60, v61, buf, 0xCu);
    goto LABEL_142;
  }
  handle = (unsigned __int8 *)a1->handle;
  if (handle)
  {
    int v4 = (handle[276] >> 4) & 1;
    if (!gLogDatapath) {
      LOBYTE(v4) = 1;
    }
    if (!*((void *)handle + 11))
    {
      if (v4) {
        return;
      }
      uint64_t v11 = __nwlog_obj();
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
        return;
      }
      uint64_t v12 = *((void *)handle + 11);
      if (v12) {
        int v13 = *(_DWORD *)(v12 + 460);
      }
      else {
        int v13 = -1;
      }
      uint64_t v85 = *((void *)handle + 8);
      *(_DWORD *)buf = 136447234;
      uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
      __int16 v93 = 2082;
      p_identifier = (char *)(handle + 192);
      __int16 v95 = 2080;
      os_log_type_t v96 = " ";
      __int16 v97 = 1024;
      int v98 = v13;
      __int16 v99 = 2048;
      uint64_t v100 = v85;
      BOOL v50 = "%{public}s %{public}s%s<i%u:s%lld> Stream is not fully setup. Ignoring connected.";
      __int16 v51 = v11;
      os_log_type_t v52 = OS_LOG_TYPE_DEBUG;
      goto LABEL_81;
    }
    if ((v4 & 1) == 0)
    {
      uint64_t v62 = __nwlog_obj();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v63 = *((void *)handle + 11);
        if (v63) {
          int v64 = *(_DWORD *)(v63 + 460);
        }
        else {
          int v64 = -1;
        }
        uint64_t v81 = *((void *)handle + 8);
        *(_DWORD *)buf = 136447234;
        uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
        __int16 v93 = 2082;
        p_identifier = (char *)(handle + 192);
        __int16 v95 = 2080;
        os_log_type_t v96 = " ";
        __int16 v97 = 1024;
        int v98 = v64;
        __int16 v99 = 2048;
        uint64_t v100 = v81;
        _os_log_impl(&dword_1830D4000, v62, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> Got a connected event from the lower layer", buf, 0x30u);
      }
    }
    nw_protocol_connected(a1->default_input_handler->flow_id, (uint64_t)a2);
    uint64_t v6 = (nw_protocol *)*((void *)handle + 11);
    unsigned __int8 v7 = handle[276];
    if (v6 != a2)
    {
      if ((handle[276] & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v8 = __nwlog_obj();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v9 = *((void *)handle + 11);
            if (v9) {
              int v10 = *(_DWORD *)(v9 + 460);
            }
            else {
              int v10 = -1;
            }
            uint64_t v84 = *((void *)handle + 8);
            *(_DWORD *)buf = 136447490;
            uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
            __int16 v93 = 2082;
            p_identifier = (char *)(handle + 192);
            __int16 v95 = 2080;
            os_log_type_t v96 = " ";
            __int16 v97 = 1024;
            int v98 = v10;
            __int16 v99 = 2048;
            uint64_t v100 = v84;
            __int16 v101 = 2048;
            *(void *)int v102 = v6;
            _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> connected protocol is not our WebTransport session (%p), ignoring", buf, 0x3Au);
          }
        }
      }
      return;
    }
    if ((handle[276] & 4) == 0)
    {
      int v14 = *((_DWORD *)handle + 47);
      if (v14) {
        goto LABEL_19;
      }
LABEL_33:
      int v14 = 2;
      *((_DWORD *)handle + 47) = 2;
      int v15 = *((_DWORD *)handle + 46);
      if (v15)
      {
LABEL_20:
        if (a2) {
          goto LABEL_21;
        }
        goto LABEL_35;
      }
LABEL_34:
      int v15 = 2;
      *((_DWORD *)handle + 46) = 2;
      if (a2)
      {
LABEL_21:
        uint64_t default_input_handler = (uint64_t)a2[2].default_input_handler;
        if (default_input_handler == -1)
        {
          if ((v7 & 8) != 0)
          {
            uint64_t default_input_handler = -2;
            goto LABEL_40;
          }
          if (v14 == 3)
          {
            uint64_t default_input_handler = -1;
            goto LABEL_40;
          }
          char v45 = BYTE4(a2[8].output_handler);
          unint64_t v46 = v45 & 1;
          if (v15 == 3)
          {
            output_handler = a2[4].output_handler;
            uint64_t default_input_handler = v46 | (4 * (void)output_handler) | 2;
            a2[4].output_handler = (nw_protocol *)&output_handler->flow_id[1];
            a2[4].handle = (void *)default_input_handler;
            if ((v45 & 2) != 0) {
              goto LABEL_40;
            }
            BOOL v17 = __nwlog_obj();
            if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_40;
            }
            int v48 = *(_DWORD *)&a2[7].flow_id[12];
            *(_DWORD *)buf = 136447234;
            uint64_t v92 = "nw_webtransport_stream_allocate_new_id";
            __int16 v93 = 2082;
            p_identifier = (char *)&a2[7].identifier;
            __int16 v95 = 2080;
            os_log_type_t v96 = " ";
            __int16 v97 = 1024;
            int v98 = v48;
            __int16 v99 = 2048;
            uint64_t v100 = default_input_handler;
            BOOL v19 = "%{public}s %{public}s%s<i%u> allocated new stream id %llu for unidirectional stream";
          }
          else
          {
            __int16 v53 = a2[3].output_handler;
            uint64_t default_input_handler = (4 * v53) | v46;
            a2[3].output_handler = (nw_protocol *)&v53->flow_id[1];
            a2[3].handle = (void *)default_input_handler;
            if ((v45 & 2) != 0) {
              goto LABEL_40;
            }
            BOOL v17 = __nwlog_obj();
            if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_40;
            }
            int v54 = *(_DWORD *)&a2[7].flow_id[12];
            *(_DWORD *)buf = 136447234;
            uint64_t v92 = "nw_webtransport_stream_allocate_new_id";
            __int16 v93 = 2082;
            p_identifier = (char *)&a2[7].identifier;
            __int16 v95 = 2080;
            os_log_type_t v96 = " ";
            __int16 v97 = 1024;
            int v98 = v54;
            __int16 v99 = 2048;
            uint64_t v100 = default_input_handler;
            BOOL v19 = "%{public}s %{public}s%s<i%u> allocated new stream id %llu for bidirectional stream";
          }
        }
        else
        {
          if ((BYTE4(a2[8].output_handler) & 2) != 0) {
            goto LABEL_40;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v17 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_40;
          }
          int v18 = *(_DWORD *)&a2[7].flow_id[12];
          *(_DWORD *)buf = 136447234;
          uint64_t v92 = "nw_webtransport_stream_allocate_new_id";
          __int16 v93 = 2082;
          p_identifier = (char *)&a2[7].identifier;
          __int16 v95 = 2080;
          os_log_type_t v96 = " ";
          __int16 v97 = 1024;
          int v98 = v18;
          __int16 v99 = 2048;
          uint64_t v100 = default_input_handler;
          BOOL v19 = "%{public}s %{public}s%s<i%u> new incoming stream id %llu";
        }
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, v19, buf, 0x30u);
LABEL_40:
        *((void *)handle + 8) = default_input_handler;
        goto LABEL_41;
      }
LABEL_35:
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v92 = "nw_webtransport_stream_allocate_new_id";
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v89 = 0;
      os_log_type_t v87 = (char *)_os_log_send_and_compose_impl();
      if (!__nwlog_fault(v87, &type, &v89)) {
        goto LABEL_162;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (!os_log_type_enabled(v20, type)) {
          goto LABEL_162;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v92 = "nw_webtransport_stream_allocate_new_id";
        uint64_t v22 = "%{public}s called with null webtransport_session";
      }
      else if (v89)
      {
        os_log_type_t v76 = (char *)__nw_create_backtrace_string();
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v77 = os_log_type_enabled(v20, type);
        if (v76)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v92 = "nw_webtransport_stream_allocate_new_id";
            __int16 v93 = 2082;
            p_identifier = v76;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v76);
          goto LABEL_162;
        }
        if (!v77)
        {
LABEL_162:
          if (v87) {
            free(v87);
          }
LABEL_41:
          uint64_t v23 = *((void *)handle + 11);
          if (v23)
          {
            if (*((void *)handle + 8) == -2)
            {
              if (*(void *)(v23 + 424))
              {
                if ((*(unsigned char *)(v23 + 548) & 2) != 0) {
                  goto LABEL_60;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v24 = gLogObj;
                if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_60;
                }
                int v25 = *(_DWORD *)(v23 + 460);
                *(_DWORD *)buf = 136446978;
                uint64_t v92 = "nw_webtransport_session_add_stream";
                __int16 v93 = 2082;
                p_identifier = (char *)(v23 + 464);
                __int16 v95 = 2080;
                os_log_type_t v96 = " ";
                __int16 v97 = 1024;
                int v98 = v25;
                __int16 v26 = "%{public}s %{public}s%s<i%u> WebTransport already has datagram stream registered";
                uint64_t v27 = v24;
                os_log_type_t v28 = OS_LOG_TYPE_ERROR;
                uint32_t v29 = 38;
LABEL_56:
                _os_log_impl(&dword_1830D4000, v27, v28, v26, buf, v29);
LABEL_60:
                unsigned __int8 v34 = handle[276];
                if (a1->default_input_handler)
                {
                  if ((handle[276] & 1) == 0)
                  {
                    uint64_t v35 = *((void *)handle + 8);
                    if (v35 == -1)
                    {
                      if ((handle[276] & 0x10) == 0)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        char v42 = gLogObj;
                        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                        {
                          uint64_t v43 = *((void *)handle + 11);
                          if (v43) {
                            int v44 = *(_DWORD *)(v43 + 460);
                          }
                          else {
                            int v44 = -1;
                          }
                          uint64_t v57 = *((void *)handle + 8);
                          *(_DWORD *)buf = 136447234;
                          uint64_t v92 = "nw_webtransport_stream_configure_metadata_with_stream_id";
                          __int16 v93 = 2082;
                          p_identifier = (char *)(handle + 192);
                          __int16 v95 = 2080;
                          os_log_type_t v96 = " ";
                          __int16 v97 = 1024;
                          int v98 = v44;
                          __int16 v99 = 2048;
                          uint64_t v100 = v57;
                          _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> Not configuring webtransport stream metadata with no stream ID set", buf, 0x30u);
                          if ((handle[276] & 0x10) == 0)
                          {
LABEL_89:
                            if (gLogDatapath)
                            {
                              uint64_t v73 = __nwlog_obj();
                              if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
                              {
                                uint64_t v74 = *((void *)handle + 11);
                                if (v74) {
                                  int v75 = *(_DWORD *)(v74 + 460);
                                }
                                else {
                                  int v75 = -1;
                                }
                                uint64_t v86 = *((void *)handle + 8);
                                *(_DWORD *)buf = 136448002;
                                uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
                                __int16 v93 = 2082;
                                p_identifier = (char *)(handle + 192);
                                __int16 v95 = 2080;
                                os_log_type_t v96 = " ";
                                __int16 v97 = 1024;
                                int v98 = v75;
                                __int16 v99 = 2048;
                                uint64_t v100 = v86;
                                __int16 v101 = 2048;
                                *(void *)int v102 = a1;
                                *(_WORD *)&v102[8] = 2048;
                                uint64_t v103 = v86;
                                __int16 v104 = 2048;
                                uint64_t v105 = a2;
                                _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> webtransport http2 stream %p with id %llu connected with output_handler %p", buf, 0x4Eu);
                              }
                            }
                          }
LABEL_90:
                          nw_protocol_connected(a1->default_input_handler->flow_id, (uint64_t)a1);
                          return;
                        }
                      }
                    }
                    else
                    {
                      handle[276] = v34 & 0xF0 | (4 * ((v35 & 2) != 0)) | 3;
                      if ((v34 & 0x10) == 0)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        uint64_t v36 = gLogObj;
                        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                        {
                          uint64_t v37 = *((void *)handle + 11);
                          if (v37) {
                            int v38 = *(_DWORD *)(v37 + 460);
                          }
                          else {
                            int v38 = -1;
                          }
                          uint64_t v55 = *((void *)handle + 8);
                          unsigned int v56 = handle[276];
                          *(_DWORD *)buf = 136448002;
                          uint64_t v92 = "nw_webtransport_stream_configure_metadata_with_stream_id";
                          __int16 v93 = 2082;
                          p_identifier = (char *)(handle + 192);
                          __int16 v95 = 2080;
                          os_log_type_t v96 = " ";
                          __int16 v97 = 1024;
                          int v98 = v38;
                          __int16 v99 = 2048;
                          uint64_t v100 = v55;
                          __int16 v101 = 1024;
                          *(_DWORD *)int v102 = (v56 >> 1) & 1;
                          *(_WORD *)&v102[4] = 1024;
                          *(_DWORD *)&v102[6] = (v56 >> 3) & 1;
                          LOWORD(v103) = 1024;
                          *(_DWORD *)((char *)&v103 + 2) = (v56 >> 2) & 1;
                          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> Configuring metadata with flags: peer_initiated: %u, datagram: %u, unidirectional: %u", buf, 0x42u);
                        }
                      }
                      nw_webtransport_metadata_set_is_peer_initiated(*((void **)handle + 20), (handle[276] & 2) != 0);
                      nw_webtransport_metadata_set_is_datagram(*((void **)handle + 20), (handle[276] & 8) != 0);
                      nw_webtransport_metadata_set_is_unidirectional(*((void **)handle + 20), (handle[276] & 4) != 0);
                    }
                  }
                  if ((handle[276] & 0x10) == 0) {
                    goto LABEL_89;
                  }
                  goto LABEL_90;
                }
                if ((handle[276] & 0x10) != 0) {
                  return;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v39 = gLogObj;
                if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
                  return;
                }
                uint64_t v40 = *((void *)handle + 11);
                if (v40) {
                  int v41 = *(_DWORD *)(v40 + 460);
                }
                else {
                  int v41 = -1;
                }
                uint64_t v49 = *((void *)handle + 8);
                *(_DWORD *)buf = 136447234;
                uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
                __int16 v93 = 2082;
                p_identifier = (char *)(handle + 192);
                __int16 v95 = 2080;
                os_log_type_t v96 = " ";
                __int16 v97 = 1024;
                int v98 = v41;
                __int16 v99 = 2048;
                uint64_t v100 = v49;
                BOOL v50 = "%{public}s %{public}s%s<i%u:s%lld> No input handler found, ignoring connected call";
                __int16 v51 = v39;
                os_log_type_t v52 = OS_LOG_TYPE_ERROR;
LABEL_81:
                _os_log_impl(&dword_1830D4000, v51, v52, v50, buf, 0x30u);
                return;
              }
              *(void *)(v23 + 424) = handle;
            }
            else
            {
              uint64_t internal = *(void *)(v23 + 184);
              if (!internal)
              {
                uint64_t internal = nw_hash_table_create_internal(0x11u, 0, (const void *(*)(const void *, unsigned int *))nw_webtransport_stream_get_key, (unsigned int (*)(const void *, unsigned int))nw_webtransport_stream_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_webtransport_stream_matches_key, 0);
                if (internal) {
                  *(_DWORD *)(internal + 48) &= ~2u;
                }
                *(void *)(v23 + 184) = internal;
              }
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              nw_hash_table_add_object(internal, (uint64_t)handle, (char *)&type);
              if (type == OS_LOG_TYPE_DEFAULT)
              {
                if ((*(unsigned char *)(v23 + 548) & 2) != 0) {
                  goto LABEL_60;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v31 = gLogObj;
                if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_60;
                }
                int v32 = *(_DWORD *)(v23 + 460);
                uint64_t v33 = *((void *)handle + 8);
                *(_DWORD *)buf = 136447234;
                uint64_t v92 = "nw_webtransport_session_add_stream";
                __int16 v93 = 2082;
                p_identifier = (char *)(v23 + 464);
                __int16 v95 = 2080;
                os_log_type_t v96 = " ";
                __int16 v97 = 1024;
                int v98 = v32;
                __int16 v99 = 2048;
                uint64_t v100 = v33;
                __int16 v26 = "%{public}s %{public}s%s<i%u> WebTransport already has stream id registered for %llu";
                uint64_t v27 = v31;
                os_log_type_t v28 = OS_LOG_TYPE_ERROR;
LABEL_55:
                uint32_t v29 = 48;
                goto LABEL_56;
              }
            }
            if ((*(unsigned char *)(v23 + 548) & 2) != 0) {
              goto LABEL_60;
            }
            if (!gLogDatapath) {
              goto LABEL_60;
            }
            uint64_t v78 = __nwlog_obj();
            if (!os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_60;
            }
            int v79 = *(_DWORD *)(v23 + 460);
            uint64_t v80 = *((void *)handle + 8);
            *(_DWORD *)buf = 136447234;
            uint64_t v92 = "nw_webtransport_session_add_stream";
            __int16 v93 = 2082;
            p_identifier = (char *)(v23 + 464);
            __int16 v95 = 2080;
            os_log_type_t v96 = " ";
            __int16 v97 = 1024;
            int v98 = v79;
            __int16 v99 = 2048;
            uint64_t v100 = v80;
            __int16 v26 = "%{public}s %{public}s%s<i%u> Added stream %llu to WebTransport streams";
            uint64_t v27 = v78;
            os_log_type_t v28 = OS_LOG_TYPE_DEBUG;
            goto LABEL_55;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          uint64_t v92 = "nw_webtransport_session_add_stream";
          uint64_t v69 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v89 = 0;
          BOOL v88 = (char *)v69;
          if (__nwlog_fault(v69, &type, &v89))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              int v70 = __nwlog_obj();
              os_log_type_t v71 = type;
              if (!os_log_type_enabled(v70, type)) {
                goto LABEL_167;
              }
              *(_DWORD *)buf = 136446210;
              uint64_t v92 = "nw_webtransport_session_add_stream";
              int v72 = "%{public}s called with null webtransport_session";
              goto LABEL_166;
            }
            if (!v89)
            {
              int v70 = __nwlog_obj();
              os_log_type_t v71 = type;
              if (!os_log_type_enabled(v70, type)) {
                goto LABEL_167;
              }
              *(_DWORD *)buf = 136446210;
              uint64_t v92 = "nw_webtransport_session_add_stream";
              int v72 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
              goto LABEL_166;
            }
            int v82 = (char *)__nw_create_backtrace_string();
            int v70 = __nwlog_obj();
            os_log_type_t v71 = type;
            BOOL v83 = os_log_type_enabled(v70, type);
            if (v82)
            {
              if (v83)
              {
                *(_DWORD *)buf = 136446466;
                uint64_t v92 = "nw_webtransport_session_add_stream";
                __int16 v93 = 2082;
                p_identifier = v82;
                _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v82);
              goto LABEL_167;
            }
            if (v83)
            {
              *(_DWORD *)buf = 136446210;
              uint64_t v92 = "nw_webtransport_session_add_stream";
              int v72 = "%{public}s called with null webtransport_session, no backtrace";
LABEL_166:
              _os_log_impl(&dword_1830D4000, v70, v71, v72, buf, 0xCu);
            }
          }
LABEL_167:
          if (v88) {
            free(v88);
          }
          goto LABEL_60;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v92 = "nw_webtransport_stream_allocate_new_id";
        uint64_t v22 = "%{public}s called with null webtransport_session, no backtrace";
      }
      else
      {
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (!os_log_type_enabled(v20, type)) {
          goto LABEL_162;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v92 = "nw_webtransport_stream_allocate_new_id";
        uint64_t v22 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0xCu);
      goto LABEL_162;
    }
    if ((handle[276] & 2) != 0)
    {
      *((_DWORD *)handle + 47) = 3;
      int v14 = *((_DWORD *)handle + 47);
      if (!v14) {
        goto LABEL_33;
      }
    }
    else
    {
      *((_DWORD *)handle + 46) = 3;
      int v14 = *((_DWORD *)handle + 47);
      if (!v14) {
        goto LABEL_33;
      }
    }
LABEL_19:
    int v15 = *((_DWORD *)handle + 46);
    if (v15) {
      goto LABEL_20;
    }
    goto LABEL_34;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
  uint64_t v58 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v89 = 0;
  if (!__nwlog_fault(v58, &type, &v89)) {
    goto LABEL_142;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    __int16 v59 = __nwlog_obj();
    os_log_type_t v60 = type;
    if (!os_log_type_enabled(v59, type)) {
      goto LABEL_142;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
    __int16 v61 = "%{public}s called with null webtransport_stream";
    goto LABEL_141;
  }
  if (!v89)
  {
    __int16 v59 = __nwlog_obj();
    os_log_type_t v60 = type;
    if (!os_log_type_enabled(v59, type)) {
      goto LABEL_142;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
    __int16 v61 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_141;
  }
  int v67 = (char *)__nw_create_backtrace_string();
  __int16 v59 = __nwlog_obj();
  os_log_type_t v60 = type;
  BOOL v68 = os_log_type_enabled(v59, type);
  if (!v67)
  {
    if (!v68) {
      goto LABEL_142;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
    __int16 v61 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_141;
  }
  if (v68)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v92 = "nw_protocol_webtransport_http2_stream_connected";
    __int16 v93 = 2082;
    p_identifier = v67;
    _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v67);
  if (v58) {
    goto LABEL_143;
  }
}

uint64_t nw_protocol_webtransport_http2_stream_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((*((unsigned char *)handle + 276) & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v9 = __nwlog_obj();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v10 = handle[11];
            if (v10) {
              int v11 = *(_DWORD *)(v10 + 460);
            }
            else {
              int v11 = -1;
            }
            uint64_t v16 = handle[8];
            *(_DWORD *)buf = 136447234;
            uint64_t v20 = "nw_protocol_webtransport_http2_stream_connect";
            __int16 v21 = 2082;
            uint64_t v22 = (char *)(handle + 24);
            __int16 v23 = 2080;
            uint64_t v24 = " ";
            __int16 v25 = 1024;
            int v26 = v11;
            __int16 v27 = 2048;
            uint64_t v28 = v16;
            _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
          }
        }
      }
      nw_protocol_connected(a1->default_input_handler->flow_id, (uint64_t)a1);
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_protocol_webtransport_http2_stream_connect";
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v5, &type, &v17)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_webtransport_http2_stream_connect";
        uint64_t v8 = "%{public}s called with null webtransport_stream";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (!v17)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_webtransport_http2_stream_connect";
        uint64_t v8 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v15 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_webtransport_http2_stream_connect";
        uint64_t v8 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v20 = "nw_protocol_webtransport_http2_stream_connect";
      __int16 v21 = 2082;
      uint64_t v22 = backtrace_string;
      int v14 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_protocol_webtransport_http2_stream_connect";
  unint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v5, &type, &v17)) {
    goto LABEL_39;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v17)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_webtransport_http2_stream_connect";
        uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v13 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_webtransport_http2_stream_connect";
        uint64_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v20 = "nw_protocol_webtransport_http2_stream_connect";
      __int16 v21 = 2082;
      uint64_t v22 = backtrace_string;
      int v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_1830D4000, v6, v7, v14, buf, 0x16u);
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_39;
  }
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_protocol_webtransport_http2_stream_connect";
    uint64_t v8 = "%{public}s called with null protocol";
LABEL_38:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
  }
LABEL_39:
  if (v5) {
    free(v5);
  }
  return 0;
}

uint64_t nw_protocol_webtransport_http2_stream_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
    uint8_t v127 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v163[0]) = 0;
    if (!__nwlog_fault(v127, type, v163)) {
      goto LABEL_278;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type[0];
      if (!os_log_type_enabled(v128, type[0])) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null protocol";
      goto LABEL_277;
    }
    if (!LOBYTE(v163[0]))
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type[0];
      if (!os_log_type_enabled(v128, type[0])) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_277;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v128 = __nwlog_obj();
    os_log_type_t v129 = type[0];
    BOOL v135 = os_log_type_enabled(v128, type[0]);
    if (!backtrace_string)
    {
      if (!v135) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_277;
    }
    if (!v135) {
      goto LABEL_251;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
    __int16 v177 = 2082;
    uint64_t v178 = backtrace_string;
    uint64_t v136 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_250:
    _os_log_impl(&dword_1830D4000, v128, v129, v136, buf, 0x16u);
    goto LABEL_251;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
    uint8_t v127 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v163[0]) = 0;
    if (!__nwlog_fault(v127, type, v163)) {
      goto LABEL_278;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type[0];
      if (!os_log_type_enabled(v128, type[0])) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null webtransport_stream";
      goto LABEL_277;
    }
    if (!LOBYTE(v163[0]))
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type[0];
      if (!os_log_type_enabled(v128, type[0])) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
      goto LABEL_277;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v128 = __nwlog_obj();
    os_log_type_t v129 = type[0];
    BOOL v137 = os_log_type_enabled(v128, type[0]);
    if (!backtrace_string)
    {
      if (!v137) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null webtransport_stream, no backtrace";
      goto LABEL_277;
    }
    if (!v137) {
      goto LABEL_251;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
    __int16 v177 = 2082;
    uint64_t v178 = backtrace_string;
    uint64_t v136 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
    goto LABEL_250;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
    uint8_t v127 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v163[0]) = 0;
    if (!__nwlog_fault(v127, type, v163)) {
      goto LABEL_278;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type[0];
      if (!os_log_type_enabled(v128, type[0])) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null input_protocol";
      goto LABEL_277;
    }
    if (!LOBYTE(v163[0]))
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type[0];
      if (!os_log_type_enabled(v128, type[0])) {
        goto LABEL_278;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
      uint64_t v130 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_277;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v128 = __nwlog_obj();
    os_log_type_t v129 = type[0];
    BOOL v138 = os_log_type_enabled(v128, type[0]);
    if (backtrace_string)
    {
      if (v138)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
        __int16 v177 = 2082;
        uint64_t v178 = backtrace_string;
        uint64_t v136 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
        goto LABEL_250;
      }
LABEL_251:
      free(backtrace_string);
      goto LABEL_278;
    }
    if (!v138) {
      goto LABEL_278;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
    uint64_t v130 = "%{public}s called with null input_protocol, no backtrace";
LABEL_277:
    _os_log_impl(&dword_1830D4000, v128, v129, v130, buf, 0xCu);
LABEL_278:
    if (v127) {
      free(v127);
    }
    return 0;
  }
  if ((handle[276] & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v131 = __nwlog_obj();
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v132 = *((void *)handle + 11);
        if (v132) {
          int v133 = *(_DWORD *)(v132 + 460);
        }
        else {
          int v133 = -1;
        }
        uint64_t v145 = *((void *)handle + 8);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
        __int16 v177 = 2082;
        uint64_t v178 = handle + 192;
        __int16 v179 = 2080;
        uint64_t v180 = (uint64_t)" ";
        __int16 v181 = 1024;
        *(_DWORD *)int v182 = v133;
        *(_WORD *)&v182[4] = 2048;
        *(void *)&v182[6] = v145;
        _os_log_impl(&dword_1830D4000, v131, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }
  unint64_t v5 = &unk_1EB267000;
  if ((handle[276] & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *((void *)handle + 11);
      if (v7) {
        int v8 = *(_DWORD *)(v7 + 460);
      }
      else {
        int v8 = -1;
      }
      uint64_t v9 = *((void *)handle + 8);
      uint64_t default_input_handler = a1->default_input_handler;
      *(_DWORD *)buf = 136448002;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_remove_input_handler";
      __int16 v177 = 2082;
      uint64_t v178 = handle + 192;
      __int16 v179 = 2080;
      uint64_t v180 = (uint64_t)" ";
      __int16 v181 = 1024;
      *(_DWORD *)int v182 = v8;
      *(_WORD *)&v182[4] = 2048;
      *(void *)&v182[6] = v9;
      *(_WORD *)&v182[14] = 2048;
      *(void *)&v182[16] = a1;
      __int16 v183 = 2048;
      size_t v184 = default_input_handler;
      __int16 v185 = 2048;
      BOOL v186 = a2;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:s%lld> protocol %p, default_input_handler %p, input protocol %p", buf, 0x4Eu);
    }
  }
  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  }
  if (a1->default_input_handler != a2) {
    return 0;
  }
  uint64_t v12 = *((void *)handle + 11);
  if (!v12)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
    int v139 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v163[0]) = 0;
    if (__nwlog_fault(v139, type, v163))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v140 = __nwlog_obj();
        os_log_type_t v141 = type[0];
        if (os_log_type_enabled(v140, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          uint64_t v142 = "%{public}s called with null webtransport_session";
LABEL_291:
          _os_log_impl(&dword_1830D4000, v140, v141, v142, buf, 0xCu);
        }
      }
      else if (LOBYTE(v163[0]))
      {
        int v146 = (char *)__nw_create_backtrace_string();
        uint64_t v140 = __nwlog_obj();
        os_log_type_t v141 = type[0];
        BOOL v147 = os_log_type_enabled(v140, type[0]);
        if (v146)
        {
          if (v147)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
            __int16 v177 = 2082;
            uint64_t v178 = v146;
            _os_log_impl(&dword_1830D4000, v140, v141, "%{public}s called with null webtransport_session, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v146);
          goto LABEL_292;
        }
        if (v147)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          uint64_t v142 = "%{public}s called with null webtransport_session, no backtrace";
          goto LABEL_291;
        }
      }
      else
      {
        uint64_t v140 = __nwlog_obj();
        os_log_type_t v141 = type[0];
        if (os_log_type_enabled(v140, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          uint64_t v142 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
          goto LABEL_291;
        }
      }
    }
LABEL_292:
    if (v139) {
      free(v139);
    }
    unint64_t v5 = &unk_1EB267000;
    goto LABEL_85;
  }
  uint64_t v162 = *((void *)handle + 11);
  if ((handle[276] & 0x20) != 0)
  {
    if ((*(unsigned char *)(v12 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v143 = __nwlog_obj();
        if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
        {
          int v144 = *(_DWORD *)(v12 + 460);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v177 = 2082;
          uint64_t v178 = (const char *)(v12 + 464);
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v144;
          *(_WORD *)&v182[4] = 2048;
          *(void *)&v182[6] = handle;
          _os_log_impl(&dword_1830D4000, v143, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream (%p)", buf, 0x30u);
        }
      }
    }
    if ((handle[276] & 0x20) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
      __int16 v177 = 2048;
      uint64_t v178 = handle;
      char v17 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v163[0]) = 0;
      if (!__nwlog_fault(v17, type, v163)) {
        goto LABEL_66;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v18 = gLogObj;
        os_log_type_t v19 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_66;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
        __int16 v177 = 2048;
        uint64_t v178 = handle;
        uint64_t v20 = "%{public}s stream %p not in pending list, cannot remove";
      }
      else if (LOBYTE(v163[0]))
      {
        __int16 v23 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v18 = gLogObj;
        os_log_type_t v19 = type[0];
        BOOL v24 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v23)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            __int16 v177 = 2048;
            uint64_t v178 = handle;
            __int16 v179 = 2082;
            uint64_t v180 = (uint64_t)v23;
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v23);
          unint64_t v5 = &unk_1EB267000;
          goto LABEL_66;
        }
        unint64_t v5 = &unk_1EB267000;
        if (!v24)
        {
LABEL_66:
          if (v17) {
            free(v17);
          }
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
        __int16 v177 = 2048;
        uint64_t v178 = handle;
        uint64_t v20 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
      }
      else
      {
        int v18 = __nwlog_obj();
        os_log_type_t v19 = type[0];
        if (!os_log_type_enabled(v18, type[0])) {
          goto LABEL_66;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
        __int16 v177 = 2048;
        uint64_t v178 = handle;
        uint64_t v20 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0x16u);
      goto LABEL_66;
    }
    uint64_t v21 = *((void *)handle + 14);
    uint64_t v22 = (void *)*((void *)handle + 15);
    if (v21)
    {
      *(void *)(v21 + 120) = v22;
      uint64_t v22 = (void *)*((void *)handle + 15);
    }
    else
    {
      *(void *)(v12 + 336) = v22;
    }
    *uint64_t v22 = v21;
    *((void *)handle + 14) = 0;
    *((void *)handle + 15) = 0;
    int v25 = *(_DWORD *)(v12 + 456);
    *(_DWORD *)(v12 + 456) = v25 - 1;
    if (v25)
    {
LABEL_76:
      char v41 = handle[276];
      handle[276] = v41 & 0xDF;
      if ((v41 & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          BOOL v148 = __nwlog_obj();
          if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v149 = *((void *)handle + 11);
            if (v149) {
              int v150 = *(_DWORD *)(v149 + 460);
            }
            else {
              int v150 = -1;
            }
            uint64_t v155 = *((void *)handle + 8);
            uint64_t v12 = v162;
            int v156 = *(_DWORD *)(v162 + 456);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            __int16 v177 = 2082;
            uint64_t v178 = handle + 192;
            __int16 v179 = 2080;
            uint64_t v180 = (uint64_t)" ";
            __int16 v181 = 1024;
            *(_DWORD *)int v182 = v150;
            *(_WORD *)&v182[4] = 2048;
            *(void *)&v182[6] = v155;
            *(_WORD *)&v182[14] = 2048;
            *(void *)&v182[16] = handle;
            __int16 v183 = 1024;
            LODWORD(v184) = v156;
            uint64_t v16 = "%{public}s %{public}s%s<i%u:s%lld> removed pending stream (%p), now have %u pending streams";
            uint64_t v33 = v148;
            os_log_type_t v34 = OS_LOG_TYPE_DEBUG;
            uint32_t v35 = 64;
            goto LABEL_55;
          }
        }
      }
      goto LABEL_78;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v26 = *(unsigned int *)(v12 + 456);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
    __int16 v177 = 2082;
    uint64_t v178 = "webtransport_session->pending_stream_count";
    __int16 v179 = 2048;
    uint64_t v180 = 1;
    __int16 v181 = 2048;
    *(void *)int v182 = v26;
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v163[0]) = 0;
    if (__nwlog_fault(v27, type, v163))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type[0];
        if (os_log_type_enabled(v28, type[0]))
        {
          uint64_t v30 = *(unsigned int *)(v162 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v177 = 2082;
          uint64_t v178 = "webtransport_session->pending_stream_count";
          __int16 v179 = 2048;
          uint64_t v180 = 1;
          __int16 v181 = 2048;
          *(void *)int v182 = v30;
          uint64_t v31 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_72:
          _os_log_impl(&dword_1830D4000, v28, v29, v31, buf, 0x2Au);
        }
      }
      else if (LOBYTE(v163[0]))
      {
        uint64_t v36 = (char *)__nw_create_backtrace_string();
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type[0];
        BOOL v37 = os_log_type_enabled(v28, type[0]);
        if (v36)
        {
          if (v37)
          {
            uint64_t v38 = *(unsigned int *)(v162 + 456);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            __int16 v177 = 2082;
            uint64_t v178 = "webtransport_session->pending_stream_count";
            __int16 v179 = 2048;
            uint64_t v180 = 1;
            __int16 v181 = 2048;
            *(void *)int v182 = v38;
            *(_WORD *)&v182[8] = 2082;
            *(void *)&v182[10] = v36;
            _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v36);
          unint64_t v5 = &unk_1EB267000;
          goto LABEL_73;
        }
        unint64_t v5 = &unk_1EB267000;
        if (v37)
        {
          uint64_t v40 = *(unsigned int *)(v162 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v177 = 2082;
          uint64_t v178 = "webtransport_session->pending_stream_count";
          __int16 v179 = 2048;
          uint64_t v180 = 1;
          __int16 v181 = 2048;
          *(void *)int v182 = v40;
          uint64_t v31 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type[0];
        if (os_log_type_enabled(v28, type[0]))
        {
          uint64_t v39 = *(unsigned int *)(v162 + 456);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          __int16 v177 = 2082;
          uint64_t v178 = "webtransport_session->pending_stream_count";
          __int16 v179 = 2048;
          uint64_t v180 = 1;
          __int16 v181 = 2048;
          *(void *)int v182 = v39;
          uint64_t v31 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_72;
        }
      }
    }
LABEL_73:
    if (v27) {
      free(v27);
    }
    uint64_t v12 = v162;
    *(_DWORD *)(v162 + 456) = 0;
    goto LABEL_76;
  }
  if (*(char **)(v12 + 416) == handle)
  {
    if ((*(unsigned char *)(v12 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        size_t v151 = __nwlog_obj();
        if (os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG))
        {
          int v152 = *(_DWORD *)(v12 + 460);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          __int16 v177 = 2082;
          uint64_t v178 = (const char *)(v12 + 464);
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v152;
          _os_log_impl(&dword_1830D4000, v151, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Removing placeholder stream for session", buf, 0x26u);
        }
      }
    }
    *(void *)(v12 + 416) = 0;
  }
  else if (*(char **)(v12 + 424) == handle)
  {
    if ((*(unsigned char *)(v12 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v153 = __nwlog_obj();
        if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG))
        {
          int v154 = *(_DWORD *)(v12 + 460);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          __int16 v177 = 2082;
          uint64_t v178 = (const char *)(v12 + 464);
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v154;
          _os_log_impl(&dword_1830D4000, v153, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Removing datagram stream for session", buf, 0x26u);
        }
      }
    }
    *(void *)(v12 + 424) = 0;
  }
  else
  {
    *(void *)os_log_type_t type = *((void *)handle + 8);
    BOOL node = nw_hash_table_get_node(*(void *)(v12 + 184), (uint64_t)type, 8);
    if (node)
    {
      if (!nw_hash_table_remove_node(*(void *)(v12 + 184), node) && (*(unsigned char *)(v12 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          int v15 = *(_DWORD *)(v12 + 460);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          __int16 v177 = 2082;
          uint64_t v178 = (const char *)(v12 + 464);
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v15;
          *(_WORD *)&v182[4] = 2048;
          *(void *)&v182[6] = *(void *)type;
          uint64_t v16 = "%{public}s %{public}s%s<i%u> Failed to remove stream %lld from hash table";
LABEL_54:
          uint64_t v33 = v14;
          os_log_type_t v34 = OS_LOG_TYPE_ERROR;
          uint32_t v35 = 48;
LABEL_55:
          _os_log_impl(&dword_1830D4000, v33, v34, v16, buf, v35);
        }
      }
    }
    else if ((*(unsigned char *)(v12 + 548) & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v32 = *(_DWORD *)(v12 + 460);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        __int16 v177 = 2082;
        uint64_t v178 = (const char *)(v12 + 464);
        __int16 v179 = 2080;
        uint64_t v180 = (uint64_t)" ";
        __int16 v181 = 1024;
        *(_DWORD *)int v182 = v32;
        *(_WORD *)&v182[4] = 2048;
        *(void *)&v182[6] = *(void *)type;
        uint64_t v16 = "%{public}s %{public}s%s<i%u> called remove_input_handler with stream id %lld, but no stream found";
        goto LABEL_54;
      }
    }
  }
LABEL_78:
  *((void *)handle + 11) = 0;
  if (*(char **)(v12 + 48) != handle) {
    goto LABEL_85;
  }
  if (*(_DWORD *)(v12 + 444))
  {
    uint64_t v42 = *(void *)(v12 + 424);
    if (v42)
    {
LABEL_81:
      nw_protocol_set_input_handler(v12, v42);
      if ((*(unsigned char *)(v12 + 548) & 2) != 0) {
        goto LABEL_85;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v43 = *((void *)v5 + 237);
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO)) {
        goto LABEL_85;
      }
      int v44 = *(_DWORD *)(v12 + 460);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
      __int16 v177 = 2082;
      uint64_t v178 = (const char *)(v12 + 464);
      __int16 v179 = 2080;
      uint64_t v180 = (uint64_t)" ";
      __int16 v181 = 1024;
      *(_DWORD *)int v182 = v44;
      char v45 = "%{public}s %{public}s%s<i%u> not destroying, still have datagram stream";
      goto LABEL_84;
    }
  }
  else
  {
    if ((*(unsigned char *)(v12 + 548) & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v53 = *((void *)v5 + 237);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        int v54 = *(_DWORD *)(v12 + 460);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        __int16 v177 = 2082;
        uint64_t v178 = (const char *)(v12 + 464);
        __int16 v179 = 2080;
        uint64_t v180 = (uint64_t)" ";
        __int16 v181 = 1024;
        *(_DWORD *)int v182 = v54;
        _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> first input handler bailed, closing", buf, 0x26u);
      }
    }
    uint64_t v55 = *(void *)(v12 + 432);
    unsigned int v56 = *(void **)(v12 + 392);
    v163[0] = MEMORY[0x1E4F143A8];
    v163[1] = 0x40000000;
    v163[2] = ___ZL37nw_webtransport_session_remove_streamP23nw_webtransport_sessionP22nw_webtransport_stream_block_invoke;
    v163[3] = &unk_1E5240268;
    v163[4] = v55;
    nw_queue_context_async(v56, v163);
    uint64_t v42 = *(void *)(v12 + 424);
    if (v42) {
      goto LABEL_81;
    }
  }
  uint64_t v57 = *(os_unfair_lock_s **)(v12 + 184);
  if (v57 && v57[10]._os_unfair_lock_opaque)
  {
    some_BOOL node = nw_hash_table_get_some_node(v57);
    uint64_t object = nw_hash_node_get_object(some_node);
    nw_protocol_set_input_handler(v12, object);
    if ((*(unsigned char *)(v12 + 548) & 2) != 0) {
      goto LABEL_85;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v43 = *((void *)v5 + 237);
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO)) {
      goto LABEL_85;
    }
    int v60 = *(_DWORD *)(v12 + 460);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
    __int16 v177 = 2082;
    uint64_t v178 = (const char *)(v12 + 464);
    __int16 v179 = 2080;
    uint64_t v180 = (uint64_t)" ";
    __int16 v181 = 1024;
    *(_DWORD *)int v182 = v60;
    char v45 = "%{public}s %{public}s%s<i%u> not destroying, still have active streams";
    goto LABEL_84;
  }
  if (!*(_DWORD *)(v12 + 456))
  {
    uint64_t v71 = *(void *)(v12 + 416);
    if (v71)
    {
      nw_protocol_set_input_handler(v12, v71);
      if ((*(unsigned char *)(v12 + 548) & 2) != 0) {
        goto LABEL_85;
      }
      uint64_t v43 = __nwlog_obj();
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO)) {
        goto LABEL_85;
      }
      int v72 = *(_DWORD *)(v12 + 460);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
      __int16 v177 = 2082;
      uint64_t v178 = (const char *)(v12 + 464);
      __int16 v179 = 2080;
      uint64_t v180 = (uint64_t)" ";
      __int16 v181 = 1024;
      *(_DWORD *)int v182 = v72;
      char v45 = "%{public}s %{public}s%s<i%u> not destroying, still have placeholder stream";
      goto LABEL_84;
    }
    nw_protocol_set_input_handler(v12, 0);
    if ((*(unsigned char *)(v12 + 548) & 2) == 0)
    {
      uint64_t v73 = __nwlog_obj();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        int v74 = *(_DWORD *)(v12 + 460);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
        __int16 v177 = 2082;
        uint64_t v178 = (const char *)(v12 + 464);
        __int16 v179 = 2080;
        uint64_t v180 = (uint64_t)" ";
        __int16 v181 = 1024;
        *(_DWORD *)int v182 = v74;
        _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> called, destroying session", buf, 0x26u);
      }
    }
    *(void *)buf = 0;
    nw::retained_ptr<nw_endpoint *>::operator=(v12 + 344, buf);
    *(void *)buf = 0;
    nw::retained_ptr<nw_endpoint *>::operator=(v12 + 360, buf);
    *(void *)buf = 0;
    nw::retained_ptr<nw_endpoint *>::operator=(v12 + 376, buf);
    nw_http_capsule_framer_cleanup((void *)(v12 + 96));
    uint64_t v75 = *(void *)(v12 + 400);
    if (v75) {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v75 + 8))(v75, v12, 0);
    }
    if ((*(unsigned char *)(v12 + 548) & 4) != 0)
    {
      if ((nw_protocol_remove_listen_handler(*(void *)(v12 + 408), v12 + 64) & 1) == 0
        && (*(unsigned char *)(v12 + 548) & 2) == 0)
      {
        os_log_type_t v76 = __nwlog_obj();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          int v77 = *(_DWORD *)(v12 + 460);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          __int16 v177 = 2082;
          uint64_t v178 = (const char *)(v12 + 464);
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v77;
          _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> failed to remove listen handler", buf, 0x26u);
        }
      }
      *(void *)(v12 + 408) = 0;
    }
    uint64_t v78 = *(void *)(v12 + 32);
    if (v78) {
      nw_protocol_remove_input_handler(v78, v12);
    }
    uint64_t v170 = 0;
    uint64_t v171 = &v170;
    uint64_t v172 = 0x2000000000;
    uint64_t v173 = 0;
    int v79 = *(char **)(v12 + 184);
    if (v79)
    {
      *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
      uint64_t v165 = 0x40000000;
      uint64_t v166 = ___ZL31nw_webtransport_session_destroyP23nw_webtransport_session_block_invoke;
      uint64_t v167 = &unk_1E52402B0;
      uint64_t v168 = &v170;
      uint64_t v169 = v12;
      nw_hash_table_apply(v79, (uint64_t)type);
      uint64_t v80 = *(os_unfair_lock_s **)(v12 + 184);
      if (v80)
      {
        _nw_hash_table_release(v80);
        *(void *)(v12 + 184) = 0;
      }
    }
    uint64_t v81 = *(void *)(v12 + 328);
    v171[3] = v81;
    if (!v81)
    {
      (*(void (**)(void, void))(*(void *)(v12 + 432) + 16))(*(void *)(v12 + 432), 0);
      uint64_t v126 = *(const void **)(v12 + 432);
      if (v126)
      {
        _Block_release(v126);
        *(void *)(v12 + 432) = 0;
      }
      std::destroy_at[abi:nn180100]<nw_webtransport_session,0>(v12);
      free((void *)v12);
      _Block_object_dispose(&v170, 8);
      goto LABEL_85;
    }
    v161 = (const char *)(v12 + 464);
    while (1)
    {
      uint64_t v81 = *(void *)(v81 + 112);
      if ((*(unsigned char *)(v12 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v82 = *((void *)v5 + 237);
        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          int v83 = *(_DWORD *)(v12 + 460);
          uint64_t v84 = v171[3];
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          __int16 v177 = 2082;
          uint64_t v178 = v161;
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v83;
          *(_WORD *)&v182[4] = 2048;
          *(void *)&v182[6] = v84;
          _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> should not have stream %p left, destroying anyways", buf, 0x30u);
        }
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
      uint64_t v85 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v175 = OS_LOG_TYPE_ERROR;
      char v174 = 0;
      if (__nwlog_fault(v85, &v175, &v174))
      {
        if (v175 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v86 = gLogObj;
          os_log_type_t v87 = v175;
          if (!os_log_type_enabled((os_log_t)gLogObj, v175)) {
            goto LABEL_168;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          BOOL v88 = v86;
          os_log_type_t v89 = v87;
          os_log_type_t v90 = "%{public}s should not have streams left when destroying";
LABEL_167:
          _os_log_impl(&dword_1830D4000, v88, v89, v90, buf, 0xCu);
          goto LABEL_168;
        }
        if (!v174)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v95 = gLogObj;
          os_log_type_t v96 = v175;
          if (!os_log_type_enabled((os_log_t)gLogObj, v175)) {
            goto LABEL_168;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          BOOL v88 = v95;
          os_log_type_t v89 = v96;
          os_log_type_t v90 = "%{public}s should not have streams left when destroying, backtrace limit exceeded";
          goto LABEL_167;
        }
        int v91 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v92 = gLogObj;
        os_log_type_t v93 = v175;
        BOOL v94 = os_log_type_enabled((os_log_t)gLogObj, v175);
        if (!v91)
        {
          if (!v94) {
            goto LABEL_168;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          BOOL v88 = v92;
          os_log_type_t v89 = v93;
          os_log_type_t v90 = "%{public}s should not have streams left when destroying, no backtrace";
          goto LABEL_167;
        }
        if (v94)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          __int16 v177 = 2082;
          uint64_t v178 = v91;
          _os_log_impl(&dword_1830D4000, v92, v93, "%{public}s should not have streams left when destroying, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v91);
      }
LABEL_168:
      if (v85) {
        free(v85);
      }
      uint64_t v97 = *(void *)(v81 + 112);
      int v98 = *(void **)(v81 + 120);
      if (v97)
      {
        *(void *)(v97 + 120) = v98;
        int v98 = *(void **)(v81 + 120);
      }
      else
      {
        *(void *)(v162 + 336) = v98;
      }
      *int v98 = v97;
      *(void *)(v81 + 112) = 0;
      *(void *)(v81 + 120) = 0;
      uint64_t v99 = v171[3];
      unint64_t v5 = &unk_1EB267000;
      if (v99)
      {
        if ((*(unsigned char *)(v99 + 276) & 0x10) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v100 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v101 = *(void *)(v99 + 88);
            if (v101) {
              int v102 = *(_DWORD *)(v101 + 460);
            }
            else {
              int v102 = -1;
            }
            uint64_t v103 = *(void *)(v99 + 64);
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
            __int16 v177 = 2082;
            uint64_t v178 = (const char *)(v99 + 192);
            __int16 v179 = 2080;
            uint64_t v180 = (uint64_t)" ";
            __int16 v181 = 1024;
            *(_DWORD *)int v182 = v102;
            *(_WORD *)&v182[4] = 2048;
            *(void *)&v182[6] = v103;
            *(_WORD *)&v182[14] = 2048;
            *(void *)&v182[16] = v99;
            _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> destroying stream %p", buf, 0x3Au);
          }
        }
        if (*(void *)(v99 + 72))
        {
          if ((*(unsigned char *)(v99 + 276) & 0x10) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v104 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              uint64_t v105 = *(void *)(v99 + 88);
              if (v105) {
                int v106 = *(_DWORD *)(v105 + 460);
              }
              else {
                int v106 = -1;
              }
              uint64_t v107 = *(void *)(v99 + 64);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
              __int16 v177 = 2082;
              uint64_t v178 = (const char *)(v99 + 192);
              __int16 v179 = 2080;
              uint64_t v180 = (uint64_t)" ";
              __int16 v181 = 1024;
              *(_DWORD *)int v182 = v106;
              *(_WORD *)&v182[4] = 2048;
              *(void *)&v182[6] = v107;
              _os_log_impl(&dword_1830D4000, v104, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> input_frames has unread frames before destroying", buf, 0x30u);
            }
          }
        }
        uint64_t v108 = *(void *)(v99 + 72);
        do
        {
          if (!v108) {
            break;
          }
          uint64_t v109 = *(void *)(v108 + 32);
          char v110 = ___ZL30nw_webtransport_stream_destroyP22nw_webtransport_stream_block_invoke((uint64_t)&__block_literal_global_31, v108);
          uint64_t v108 = v109;
        }
        while ((v110 & 1) != 0);
        (*(void (**)(void, void))(*(void *)(v99 + 176) + 16))(*(void *)(v99 + 176), 0);
        BOOL v111 = *(const void **)(v99 + 176);
        if (v111)
        {
          _Block_release(v111);
          *(void *)(v99 + 176) = 0;
        }
        if (*(unsigned char *)(v99 + 168))
        {
          uint64_t v112 = *(void **)(v99 + 160);
          if (v112) {
            os_release(v112);
          }
        }
        *(void *)(v99 + 160) = 0;
        if (*(unsigned char *)(v99 + 152))
        {
          BOOL v113 = *(void **)(v99 + 144);
          if (v113) {
            os_release(v113);
          }
        }
        *(void *)(v99 + 144) = 0;
        if (*(unsigned char *)(v99 + 136))
        {
          BOOL v114 = *(void **)(v99 + 128);
          if (v114) {
            os_release(v114);
          }
        }
LABEL_201:
        free((void *)v99);
        goto LABEL_202;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
      uint64_t v99 = _os_log_send_and_compose_impl();
      os_log_type_t v175 = OS_LOG_TYPE_ERROR;
      char v174 = 0;
      if (!__nwlog_fault((const char *)v99, &v175, &v174)) {
        goto LABEL_218;
      }
      if (v175 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v115 = __nwlog_obj();
        os_log_type_t v116 = v175;
        if (os_log_type_enabled(v115, v175))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
          BOOL v117 = v115;
          os_log_type_t v118 = v116;
          char v119 = "%{public}s called with null webtransport_stream";
          goto LABEL_217;
        }
LABEL_218:
        if (v99) {
          goto LABEL_201;
        }
        goto LABEL_202;
      }
      if (!v174)
      {
        uint64_t v124 = __nwlog_obj();
        os_log_type_t v125 = v175;
        if (!os_log_type_enabled(v124, v175)) {
          goto LABEL_218;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        BOOL v117 = v124;
        os_log_type_t v118 = v125;
        char v119 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
LABEL_217:
        _os_log_impl(&dword_1830D4000, v117, v118, v119, buf, 0xCu);
        goto LABEL_218;
      }
      uint64_t v120 = (char *)__nw_create_backtrace_string();
      uint64_t v121 = __nwlog_obj();
      os_log_type_t v122 = v175;
      BOOL v123 = os_log_type_enabled(v121, v175);
      if (!v120)
      {
        unint64_t v5 = &unk_1EB267000;
        if (!v123) {
          goto LABEL_218;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        BOOL v117 = v121;
        os_log_type_t v118 = v122;
        char v119 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_217;
      }
      if (v123)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        __int16 v177 = 2082;
        uint64_t v178 = v120;
        _os_log_impl(&dword_1830D4000, v121, v122, "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v120);
      unint64_t v5 = &unk_1EB267000;
      if (v99) {
        goto LABEL_201;
      }
LABEL_202:
      v171[3] = v81;
      uint64_t v12 = v162;
    }
  }
  uint64_t v69 = *(void *)(v12 + 328);
  if (v69)
  {
    if ((*(unsigned char *)(v69 + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v157 = __nwlog_obj();
        if (os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v158 = *(void *)(v69 + 88);
          if (v158) {
            int v159 = *(_DWORD *)(v158 + 460);
          }
          else {
            int v159 = -1;
          }
          uint64_t v160 = *(void *)(v69 + 64);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_get_next_pending_stream";
          __int16 v177 = 2082;
          uint64_t v178 = (const char *)(v69 + 192);
          __int16 v179 = 2080;
          uint64_t v180 = (uint64_t)" ";
          __int16 v181 = 1024;
          *(_DWORD *)int v182 = v159;
          *(_WORD *)&v182[4] = 2048;
          *(void *)&v182[6] = v160;
          *(_WORD *)&v182[14] = 2048;
          *(void *)&v182[16] = v69;
          _os_log_impl(&dword_1830D4000, v157, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> found stream (%p)", buf, 0x3Au);
          uint64_t v12 = v162;
        }
      }
    }
  }
  nw_protocol_set_input_handler(v12, v69);
  if ((*(unsigned char *)(v12 + 548) & 2) != 0) {
    goto LABEL_85;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v43 = *((void *)v5 + 237);
  if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO)) {
    goto LABEL_85;
  }
  int v70 = *(_DWORD *)(v12 + 460);
  *(_DWORD *)buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
  __int16 v177 = 2082;
  uint64_t v178 = (const char *)(v12 + 464);
  __int16 v179 = 2080;
  uint64_t v180 = (uint64_t)" ";
  __int16 v181 = 1024;
  *(_DWORD *)int v182 = v70;
  char v45 = "%{public}s %{public}s%s<i%u> not destroying, still have pending streams";
LABEL_84:
  _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_INFO, v45, buf, 0x26u);
LABEL_85:
  nw_protocol_set_output_handler((uint64_t)a1, 0);
  if ((handle[276] & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v46 = *((void *)v5 + 237);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      uint64_t v47 = *((void *)handle + 11);
      if (v47) {
        int v48 = *(_DWORD *)(v47 + 460);
      }
      else {
        int v48 = -1;
      }
      uint64_t v49 = *((void *)handle + 8);
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
      __int16 v177 = 2082;
      uint64_t v178 = handle + 192;
      __int16 v179 = 2080;
      uint64_t v180 = (uint64_t)" ";
      __int16 v181 = 1024;
      *(_DWORD *)int v182 = v48;
      *(_WORD *)&v182[4] = 2048;
      *(void *)&v182[6] = v49;
      *(_WORD *)&v182[14] = 2048;
      *(void *)&v182[16] = handle;
      _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%lld> destroying stream %p", buf, 0x3Au);
    }
  }
  if (*((void *)handle + 9))
  {
    if ((handle[276] & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v50 = *((void *)v5 + 237);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        uint64_t v51 = *((void *)handle + 11);
        if (v51) {
          int v52 = *(_DWORD *)(v51 + 460);
        }
        else {
          int v52 = -1;
        }
        uint64_t v61 = *((void *)handle + 8);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        __int16 v177 = 2082;
        uint64_t v178 = handle + 192;
        __int16 v179 = 2080;
        uint64_t v180 = (uint64_t)" ";
        __int16 v181 = 1024;
        *(_DWORD *)int v182 = v52;
        *(_WORD *)&v182[4] = 2048;
        *(void *)&v182[6] = v61;
        _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%lld> input_frames has unread frames before destroying", buf, 0x30u);
      }
    }
  }
  uint64_t v62 = *((void *)handle + 9);
  do
  {
    if (!v62) {
      break;
    }
    uint64_t v63 = *(void *)(v62 + 32);
    char v64 = ___ZL30nw_webtransport_stream_destroyP22nw_webtransport_stream_block_invoke((uint64_t)&__block_literal_global_31, v62);
    uint64_t v62 = v63;
  }
  while ((v64 & 1) != 0);
  (*(void (**)(void, void))(*((void *)handle + 22) + 16))(*((void *)handle + 22), 0);
  uint64_t v65 = (const void *)*((void *)handle + 22);
  if (v65)
  {
    _Block_release(v65);
    *((void *)handle + 22) = 0;
  }
  if (handle[168])
  {
    BOOL v66 = (void *)*((void *)handle + 20);
    if (v66) {
      os_release(v66);
    }
  }
  *((void *)handle + 20) = 0;
  if (handle[152])
  {
    int v67 = (void *)*((void *)handle + 18);
    if (v67) {
      os_release(v67);
    }
  }
  *((void *)handle + 18) = 0;
  if (handle[136])
  {
    BOOL v68 = (void *)*((void *)handle + 16);
    if (v68) {
      os_release(v68);
    }
  }
  free(handle);
  return 1;
}